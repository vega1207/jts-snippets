Welcome To Jabil Test

Top Next



* * *





User's Manual and Script Command Reference





End User License Agreement

Previous Top Next



* * *



USER LICENSE AGREEMENT FOR JABIL TEST

IMPORTANT - READ CAREFULLY: This User License Agreement for Jabil Test (“ULA”) is a binding agreement between you, as either an individual or a single entity (“You”) and Jabil Circuit, Inc. and its affiliates & subsidiaries (“Jabil”) for the Jabil Test Software. By using the Software, You accept the software and agree to the terms of this ULA - read it carefully before using the Software. By using the Software, you are confirming your acceptance of the Software and agreeing to become bound by the terms of this ULA. If you do not agree to be bound by these terms, then you must not use the Software. If you have already used the Software prior to your receipt of this ULA and you do not agree to be bound by the terms of this ULA, then (a) the license shall be automatically terminated and (b) you shall follow the termination procedure as set forth in Termination Section of this ULA.

DEFINITIONS. “Documentation” means all Software documentation, sample applications, manuals, user guides, tools and utilities, and miscellaneous technical information. “Script” means a file containing a sequence of commands that are read and interpreted by the Jabil Test Software in order to execute a specific command or series of commands. “Software” means the Jabil Test Software developed by Jabil and provided to You under this ULA, and includes any Jabil-developed: source code, software and protocol specifications, Documentation, printed and electronic materials, either in downloadable format or other format, and expressly excludes any Script or third party dynamic link library.

1. EFFECTIVITY. This ULA is effective immediately upon Your receipt of the Software, or any part thereof.

2. GRANT OF LICENSE. Jabil grants to You a limited, revocable, non-exclusive right to use the Software on hardware that is deployed by Jabil. Such hardware may include, for example: controllers that are used for test, automation, directed manual assembly or other custom manufacturing process, or alternatively controllers that are used for data collection, data analysis and shop floor control processes. The types, quantities, and purposes of the hardware will be described in a separate Statement of Work that is agreed between You and Jabil before Your use of the Software. Neither the Software nor any portion thereof may be transferred or redistributed in any manner without written approval by Jabil. All rights not expressly granted to Licensee are reserved to Jabil.

3. PROPRIETARY RIGHTS TO SOFTWARE AND TRADEMARKS. You acknowledge that the Software and any Documentation are proprietary to and the property of Jabil, and the Software and Documentation are protected under United States copyright law and international treaties. You further acknowledge and agree that, as between You and Jabil, Jabil owns and shall continue to own all right, title, and interest in and to the Software, including associated intellectual property rights under copyright, trade secret, patent, or trademark laws. This ULA does not grant You any ownership interest in or to the Software, but only a limited right of use in accordance with the terms of this ULA. Any and all trademarks or service marks that Jabil uses in connection with the Software or with services rendered by Jabil are marks owned by Jabil - this ULA does not grant You any right, license, or interest in such marks.

4. CONFIDENTIALITY. Only You may view the Software. Except as expressly authorized by this ULA, You shall not make available the Software to any third party. You will use your best efforts to cooperate with and assist Jabil in identifying and preventing any unauthorized use, copying, or disclosure of the Software or any portion thereof.

5. RESTRICTIONS ON USE. You may not: (a) use the Software in any manner not set forth in this ULA, (b) distribute, share, sublicense, lend, lease or otherwise make the Software available to any third party (on the Internet, an information network or tangible media, by broadcast or in any other manner), (c) modify, adapt, create derivative works from or translate any part of the Software (other than as integrated by you into your work in accordance with this ULA), (d) reverse engineer, decompile or disassemble the Software or otherwise attempt to obtain its source code, (e) remove or alter any copyright, trademark or other proprietary notice contained in the Software or (f) use the Software in any manner not expressly authorized by this ULA. The Software may only be stored, copied, installed and operated (a) within Your testing environment, (b) at a Jabil facility, or (c) at a third party testing facility (wherein such third party testing facility has been pre-approved by Jabil in writing).

6. COMMUNICATION & AUDIT. You acknowledge and agree that the Software may collect and provide to Jabil technical data, usage data, and related information, including but not limited to technical information about Your device, system and application software, and peripherals (“Data”). Jabil may use the Data for Jabil's purposes, including the purpose of facilitating and improving Jabil's software updates, technologies, hardware support, and other services. Further, You acknowledge and agree that Jabil may audit Your use of the Software and may analyze the Data for compliance with these terms at any time. In the event that such audit or such analysis of Data reveals Your breach of this ULA, You agree that Jabil has the right to terminate this ULA and to disable Your use of the Software without consequence.

7. COPIES AND MODIFICATION. You may not reverse engineer, decompile, disassemble, or otherwise translate the Software. You may not modify or adapt the Software in any way. You may only make a reasonable number of copies of the Software solely for backup or archival purposes. Any such copies of the Software shall include any copyright or other proprietary notices that were originally included on or in such materials. Except as expressly authorized in this Section, no copies of the Software may be made by You or any person under your authority or control.

8. ASSIGNMENT OF RIGHTS. You will not assign sublicense, or otherwise lend Your rights in the Software, as granted by this ULA, with any third party without prior written consent of Jabil.

9. TERMINATION. Either You or Jabil may terminate this license grant under this ULA by providing written notice of such termination. The license grant under this ULA will automatically terminate if You fail to comply with any provision of this ULA. In the event that the license grant under this ULA is terminated for any reason, You must: (a) cease all use of the Software, and (b) destroy the original and all copies of the Software.

10. NO WARRANTY. THE SOFTWARE AND SCRIPT IS PROVIDED “AS IS” WITHOUT WARRANTY OF ANY KIND. JABIL HEREBY EXPRESSLY DISCLAIMS, AND YOU HEREBY EXPRESSLY WAIVE, ALL WARRANTIES, REPRESENTATIONS AND CONDITIONS OF ANY KIND WHATSOEVER, WHETHER EXPRESS, IMPLIED, STATUTORY, OR ANY WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND/OR NON-INFRINGEMENT OF THIRD PARTY RIGHTS. NO ORAL OR WRITTEN INFORMATION OR ADVICE GIVEN BY JABIL SHALL CREATE A WARRANTY. WITHOUT ANY LIMITATION OF THE FOREGOING, JABIL DOES NOT WARRANT THAT THE SOFTWARE OR THE SCRIPT: (A) WILL BE ERROR-FREE, (B) WILL MEET YOUR REQUIREMENTS, OR (C) WILL OPERATE WITH THE HARDWARE OR SOFTWARE CONFIGURATION YOU CHOOSE.



11. LIMITATIONS ON LIABILITY. UNDER NO CIRCUMSTANCES SHALL JABIL BE LIABLE TO YOU OR TO ANY OTHER PERSON OR ENTITY UNDER ANY CONTRACT, TORT, STRICT LIABILITY, NEGLIGENCE, OR OTHER LEGAL OR EQUITABLE CLAIM OR THEORY FOR ANY DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES, OR FOR ANY AND ALL OTHER DAMAGES, LOSS, OR EXEMPLARY OR PUNITIVE DAMAGES WHETHER JABIL WAS INFORMED OR WAS AWARE OF THE POSSIBILITY OF SUCH LOSS OR DAMAGE.

12. UPDATES. Jabil may from time to time make available to You updates for the Software. You agree that these updates are subject to the terms and conditions of this ULA. Further, You acknowledge that Jabil has no obligation to provide any such updates or to provide any support for any such updates.

13. THIRD PARTY DLL/EXE. The Software may require a reference to third party software in the form of a dynamic link library (“DLL”) or executable (“EXE”). Any such DLL or EXE may be subject to terms of the third party. Jabil shall bear no responsibility or liability for any such third party DLL or EXE. Nothing in this ULA limits or expands any rights that may be granted under any applicable third party terms regarding such a DLL or EXE.

14. FEEDBACK. You agree that any feedback or ideas that you provide to Jabil regarding the Software or any suggested improvements thereto (together, the "Feedback") will be the exclusive property of Jabil. To the extent that You own any rights to the Feedback, You hereby agree to assign, and hereby assign, all right, title and interest in and to the Feedback to Jabil. You agree to perform all acts reasonably requested by Jabil to perfect and enforce sure rights.

15. MISCELLANEOUS. If any provision of this ULA is determined to be invalid or unenforceable, such determination will not affect the validity or enforceability of any other provision of this ULA. A waiver of any breach or failure to enforce any provision of this ULA will not be deemed a future waiver of such provision or a waiver of any other provision. Any amendment, supplementation or modification of any provision of this ULA will be effective only if it is in writing and signed by Jabil and You. This ULA and the interpretation of its terms shall be governed by the laws of the State of Florida, without application of any conflicts of law principles. The provisions of the United Nations Convention on Contracts for the International Sale of Goods shall not apply to this Agreement. The Parties hereby agree that the courts with jurisdiction over disputes arising in Pinellas County, Florida shall have exclusive jurisdiction over any litigation hereunder. Nothing in this ULA creates any agency, joint venture, partnership or fiduciary relationship between You and Jabil.





Installing Jabil Test

Previous Top Next



* * *





Installation Instructions

Installing the Jabil Test test executive, is very easy due to it being built on top of the Microsoft .Net platform. You will need local Administrator privileges on the test computer on which to install the software.





To run Jabil Test, you must have the Microsoft .Net Framework 4.0 or later installed.





* * *





* * *



To install Jabil Test

Once you have all the .Net framework installed, installing the latest version of Jabil Test is as simple as copying all the files into a directory, and executing it. Jabil Test is usually installed in the c:\jabiltest\ directory, however, it can be installed in any directory and still function properly. For consistency, it's recommended to use the default installation directory.





Installing Instrument Drivers

Previous Top Next



* * *



Note: Certain instruments may require that their own installation disks be installed in order for Jabil Test to use these instruments.



· Most National Instruments devices require NiDAQ or NiDAQmx to be installed in order to support the instrument drivers.





· Most Agilent instruments require their VXI drivers to be installed in order to be used from Jabil Test.





· A variety of technologies is used to interface each instrument with the test executive, so refer to that particular instruments function documentation for more details.





Setting Up Jabil Test

Previous Top Next



* * *



· Upon opening Jabil Test for the first time, you’ll receive a 4 up configuration setup to run the verification script



· As a first step, click 'Start All Cells' to verify that each cell is running properly and that no errors are encountered during the verification script execution.





Jabil Test Hot-Keys

Previous Top Next



* * *



Jabil Test Hot-Keys



The following hot-keys allow starting a specific test cell or setting focus to a test cell either using a keyboard, or a barcode scanner.





When Jabil Test is running, pressing any of the F-Keys, will start the corresponding test cell.





For instance, if the operator presses the F1 Key, it will start cell 1, the F2 Key will start cell 2, etc.





Pressing CONTROL-F1 will set the focus to the corresponding test cell to allow a serial number to be scanned or typed.





For instance, if the operator presses CONTROL-F1, it will set the focus to the serial number box on cell 1.



Hot-Key

Action

Hot-Key

Action



F1

Start Cell 1

CONTROL-F1

Set Focus to Cell 1



F2

Start Cell 2

CONTROL-F2

Set Focus to Cell 2



F3

Start Cell 3

CONTROL-F3

Set Focus to Cell 3



F4

Start Cell 4

CONTROL-F4

Set Focus to Cell 4



F5

Start Cell 5

CONTROL-F5

Set Focus to Cell 5



F6

Start Cell 6

CONTROL-F6

Set Focus to Cell 6



F7

Start Cell 7

CONTROL-F7

Set Focus to Cell 7



F8

Start Cell 8

CONTROL-F8

Set Focus to Cell 8



F9

Start Cell 9

CONTROL-F9

Set Focus to Cell 9



F10

Start Cell 10

CONTROL-F10

Set Focus to Cell 10



F11

Start Cell 11

CONTROL-F11

Set Focus to Cell 11



F12

Start Cell 12

CONTROL-F12

Set Focus to Cell 12





Jabil Test Results

Previous Top Next



* * *



Test Results



When a script is executed in Jabil Test, each test command records a collection of 'Test Results' associated with a particular test step. These test records are shown in the execution GUI (depending on the user's selected display options), and are also written to the Jabil Test report writer collection.



Here's a brief synopsis of each on the test result fields that are recorded for each test command that's executed.





Below you can see Jabil Test configured with a single test cell with all of the test result fields displayed on the test cell. The next screen capture shows the configuration options screen.





This table describes each of the fields that make up the test result record.





Test Fields For each Test Result



Name

Data Type

Description



Test Group Name

String

The test group name is the identifier assigned for a particular set of individual test steps. The value of this field is set using the 'SetTestName' script command. The current test group name remains unchanged until it is updated again by the SetTestName script command.



Test Step Name

String

The test step name is the hard coded name of the particular test command that's being executed. For instance 'UpdateStatus'



Status

String

The final Pass, Fail, or Abort status of the test



Parametric Test

Boolean

This boolean indicates if a particular test was marked as being a parametric test.



Measurement Test

Boolean

This boolean indicates if a particular test was marked as recording a measurement (although not necessarily a parametric measurement).



Measurement Name

String

The name of the measurement. This parameter is set by passing the desired measurement name as an argument to one of the 'RecordMeasurement' functions.



Measurement

String

The actual measurement value (if applicable)



Measurement Unit

String

The measurement unit (if applicable)



Lower Limit

String

The lower limit of the measurement (if applicable)



Upper Limit

String

The upper limit of the measurement (if applicable)



Elapsed Time*

Float

The total elapsed time from the beginning of the test, or the amount of time that has elapsed since the 'ResetElapsedTime' script command has executed.



Execution Time*

Float

The total execution time that was required to complete the test step.





* The elapsed time and execution time values will only be populated if the 'Record Elapsed Test Time' option is selected inside of the test cell option menu.





Figure 1. The Jabil Test GUI with all test fields configured for display.



Figure 2: The Test Cell Status Window Display Options Dialog





Full Mode Vs. Cell Mode

Previous Top Next



* * *





Full Mode Vs. Cell Mode Configuration





The following screenshots illustrate the differences between "Full" and "Cell" display modes. The Cell Display mode is useful for situations that involve having a large number of cells running on a given tester such as ORT or ESS situations.





Figure 1. The Jabil Test Full Mode Screen.





Figure 2. The Jabil Test Cell Mode Screen.





Selecting a Test Script

Previous Top Next



* * *





Jabil Test uses 'Test Scripts' which contain instructions for each test sequence that Jabil Test runs. Test scripts can be thought of as programs or batch files of instructions.



In order to select the particular test script that you would like a test cell to execute, you can select it from the main test cell drop down box, as shown here.





Figure 1. Jabil Test Screen Showing Script Select Drop-Down.





In order to configure the list of test scripts that are assigned to a specific test cell, you right click on the test cell and select Cell Options to open the cell options screen.



Figure 2. In Cell Right Click Menu Showing Cell Options.





Figure 3. Cell Options Screen





To Add a new test script, simply click on the 'Add' button. In order to remove a test script, select it and click on the Remove button.



Figure 4. Cell Options Script Selection, Add, Remove.





Notice that one test script has a 'Default' flag set. This test script will be the one that is automatically selected when Jabil test is opened. If you would like a different test script to be set as the default, simply click the default checkbox.





In order for your changes to be applied to the test cell, you must click Save Changes to update the configuration database. Clicking on Cancel will discard all changes.



Figure 5. Cell Options Save Changes and Cancel.





Setting Up CAMX Messaging

Previous Top Next



* * *



Setting Up CAMX Messaging



CAMX Messaging is set up for the entire program. The program and each test cell will report its status to a CAMX Message Broker.





The current status of CAMX Messaging is shown on the information bar at the top of the Jabil Test main screen:





To set up CAMX Messaging, open the CAMX Settings window by selecting Configure CAMX in the CAMX Settings entry on the main menu:





The CAMX Setting window will open:





To begin entering the required data, the CAMX Interface must be enabled. If necessary, click on the Enable CAMX Interface radio button to enable it.





Once CAMX is enabled, Select the type of messages to send in the CAMX Messaging Option Configuration section:

· Enable IPC-2546 Messages for systems that are doing assembly (inspection messages are not yet implemented in Jabil Test).

· Enable IPC-2547 Messages for systems that are doing inspection and testing (inspection messages are not yet implemented in Jabil Test).





Note: When enabled, the machine will always send the IPC-2541 messages for overall machine status.





Once enabled, you must also supply the CAMX Broker Configuration, including the Client Name, Broker Name, Broker URL and Domain Name.





If the Check Box for User Current Tester Name is checked, the Client Name will be filled in with the name of the computer that is running this program.





When all of the data is entered, clicking on the Test Connection To Message Broker button will pop up a message box informing you whether the connection to the message broker was successful or not.





Clicking on the Save Changes button will save the CAMX configuration so it will still be the same when Jabil Test is shut down and re-started.





Note: Only test cells that have a serial number in the serial number box will report their status to the message broker. If the serial number box is empty, the test cell will not send messages to the message broker.





Setting Up Cell Settings

Previous Top Next



* * *





In order to configure the global cell options, you select 'Options' from the main Jabil Test menu, and then select 'Configure Cell Settings' as shown below.





Figure 1. Configure Cell Options Menu Selection.





The Global Cell Options Dialog contains the following options for adjusting the number of test cells and their layout configuration:





· Number of Panels - When there are a large number of cells in use, they can be organized into Panels. Only one panel is visible at a time. For example: With 20 test cells, you could set up 2 panels. On panel 1 you would see test cells 1 to 10, on panel 2 you would see panels 11 to 20.

· Number of Cells - Sets the total number of cells in use.

· Number of Cells per Row - Sets the number of cells for each row.

· Activate Multi-Monitor Mode - Turns on and off Multiple Monitor Mode.

· Display "Start All" Button - Determines whether the "Start All Test Cells" button is visible and enabled.

· Display Information Bar Panel - Determines whether the Information Bar is displayed above the test cells on the main screen.

· Enable Cell Mode - Turns on and Off "Cell Mode".

· Display Serial Box in Cell Mode - This option configures the test cells to show the serial number box even when cell mode is activated.

· Enable Confirm on Abort - Determines whether a confirmation dialog will pop up when the user clicks on an "Abort" button.

· Debug Verbosity - The debug verbosity settings allows the user to control the amount of output that is generated inside of the test cell debug view. In 'Verbose' mode, all test cell output is written to debug mode. In the 'Update Status Messages Only' mode, only the output explicitly programmed inside of the test script will be written to the display, filtering all of the verbose debug messages from each test function. When 'None' is selected, no output is sent to the test cell debug window.

· Debug Mode - Selects where the debug data is stored as the scripts run. When set to "Use Physical Memory", the scripts can run faster since all data is stored in memory. When set to "Use Virtual Memory", the debug data is stored in a file on disk. This needs less memory, but the scripts will run slower.

· Cell-Update Frequency - Adjusts the update frequency of the GUI. If you are running a high number of test cells, you may need to turn down the update speed. Having a high number of test cells and fast update speed may slow down script execution.





Figure 2. Configure Cell Settings Screen.





Cell Threading Mode





The cell threading mode allows the user to select the specific threading apartment model that Jabil Test uses to execute each test script. For most applications, the threading mode should be set to 'MTA Mode' which enables a multiple thread apartment model. In some situations, you may need to enable 'STA mode' which will configure each test cell to run in a single threaded apartment for backwards compatibility with certain ActiveX controls which require a STA apartment module to execute correctly. The STA mode will have a negative impact on performance.





Configuring Global Initialization and Cleanup Scripts





The Global Scripts tab allows the user to specify the Global Initialization and Cleanup test scripts. These two special test scripts are executed automatically when Jabil Test opens, and closes respectively. Please see the section on Global Scripts for additional information.





Figure 3. Configuring Global Scripts.





Serial Scanning Options





The Serial Scanning Options tab allows the user to specify the cursor focus behavior when a script runs or completes.





The available choices are:





· Automatically Set Focus to Next Idle Cell's Serial Number Box - When the test cell is started, the cursor is automatically moved to the Serial Number box of the next available test cell that is not currently running.

· Automatically Set Focus to Test Cell Serial Number Entry Field on Test Completion - When the current test cell script ends, the cursor is automatically moved to the current test cell's Serial Number box.





Figure 4. Configuring Serial Scanning Options.





Setting Up Report Options

Previous Top Next



* * *



Setting Up Report Options



The reporting options for each test cell are configured individually. There are currently 9 different report writers shipped with Jabil Test:





· TARS Report Writer - The TARS Report writer generates a Jabil TARS format text file for each test run.

· MES Report Writer - The MES Report writer generates a Jabil MES format text file for each test run.

· HTML Report Writer - The HTML Report writer generates a HTML formatted file for each test run. This is the best test report to use for clarity and readability.

· Configurable HTML Report Writer - This report writer is very similar to the HTML Report writer but allows the user to configure the headers for each column in the report table as well as selecting which columns are shown.

· XML Report Writer - The XML Report Writer generates an XML file for each test run. The XML file is an excellent way to load test data into an external program or customer test tracking system.

· Database Report Writer - The database report writer will record the results of each test into the database specified in the Database Report options. The database report writer can be used with the built-in Jabil Test reporting capabilities to allow users to browse the test history of different DUT's.

· Microsoft SQL Server Report Writer - This report writer will record the results of each test into either a local or remote Microsoft SQL Server database specified in the database report options.

· TXT Report Writer - The TXT Report writer will record results to a text file. If the file already exists, it will append the new test data to the existing file.

· Debug Status Report Writer - Used to put data into an internal database that is used for debugging test scripts.





Setting up Report Writer Options





Each report writer has different options which can be configured by clicking on the 'Options' button to the right of each report writer in the Test Cell Options dialog. Some report writers have an extensive list of options, and some are relatively simple to configure.





Figure 1. Report Option Section of Cell Option Screen.





For illustration, the TARS and Database Report Writer configuration dialogs are shown below.





Figure 2. TARS Report Configuration.





Figure 3. Database Report Configuration.





Setting Up Test Cell Options

Previous Top Next



* * *



Setting up Test Cell Options



Test Cell Options must be set for each test cell in use. Changes to options in one test cell will have no impact on other test cells.





To get into the Test Cell Options screen, right click on the test cell that you want to configure and select Cell Options.





Figure 1. Test Cell Options Menu





The Test Cell Options window will open with a number of option sections. These sections are discussed below.





Figure 2. Test Cell Options Window





Current Test Scripts - This is where you select which scripts are available to be run in this test cell. See the help file entry for Selecting a Test Script for more information.





Test Script Options - Immediately below the list of test scripts are the Test Script Settings. These settings control some aspects of what happens when the test script runs or completes. The settings are:

· Continue on Parametric Measurement Failures - When turned on, a test step that fails due to being outside of set limits will not stop the test script from running (it will be recorded as a failed test, though). Default: Off.

· Calculate Elapsed Time For Each Test Step - When turned on, will determine and record how long each test step took to complete. Default: On.

· Suppress Standard Browser Script Completion Message - When turned on, will not display the test completion messages (Pass, Fail, Abort) on the browser tab after a test has completed. Used to stop the completion message from obscuring any data shown on the browser screen during testing. Default: Off.





Report Options - At the bottom of the window is the options for setting up the report writers. See the help file entry for Setting Up Report Options for more information.





Color Options - To the right of the Current Test Scripts section is one to select the colors for the test cell. Each test cell can have different colors.





The test cell color will fade from the Primary Cell Color to the Secondary Cell Color along the direction (in degrees) specified by the Color Gradient Angle.





For angle - 0 degrees is to the right. Positive directions are counted clockwise and negative directions are counted counter-clockwise. Maximum number is 180 degrees.





An example of setting the colors is:



Figure 3. Purple Color Options





Which will cause the test cell to look like:



Figure 4. Purple Test Cell





Test Cell Extended Panel Mode - Below the Color Options is a section that allows the user to select the type of Extended Panel to show.





Figure 5. Extended Panel Drop-Down





Setting this to Charting Panel Display will open the panel for charting and graphing.

Setting this to Empty Extended Panel Display will open a blank panel that can have ActiveX controls added to it.





Test Status Window Options - In the middle on the right are the options for what is displayed on the Status View tab. These selections are for what is on the display and has no effect on what is included in the report writers. With the exception of the setting for Display Test Status Window, these define what columns are visible in the Test Status window.





Display Test Status Window will configure whether the Status View tab is visible. Default: On.





The other settings are self explanatory as to what data is displayed.





Debug Mode Explained

Previous Top Next



* * *



Debug mode is used while debugging test scripts, or for running test functions manually.



Get into Debug Mode by right clicking on an active test cell.



Figure 1. Debug View Menu





· The Script Status window shows the output of the function ran.

· The Cell Variable window shows all current script variables that are present in the variable space for that cell.

· The Execution Status shows each script function ran, and it’s result.





Figure 2. Debug Window





Tips for Using Debug Mode Effectively

Previous Top Next



* * *



· When writing test scripts, be sure to break your test script into logical functions, otherwise debug mode will be very little help as a diagnostic tool for process techs and engineers.



· Place all your variable initialization code, etc into an “Initialize” function, otherwise there won’t be a method to setup all your devices when you attempt to run your script from debug mode.





Jabil Test Remoting Overview

Previous Top Next



* * *





Jabil Test Remoting Overview





Jabil test allows for other programs to connect to it via the network and either read status information, or provide a remote means of controlling Jabil Test.





The remoting capabilities allow for integrating Jabil Test into a larger test system, or configuring Jabil Test to work in an inline environment.





Configuring Jabil Test Remoting

Previous Top Next



* * *





Configuring Jabil Test Remoting





Jabil Test now allows a user to enable/disable remoting and set which TCP/IP port that the remoting system uses for communication.





The current status of the Jabil Test remoting engine is shown on the main test display as seen below:





To configure the remoting options for Jabil Test, click on 'Automation Control' on the main menu, and then select 'Configure Remoting Settings'.





This will open the remoting configuration dialog which has two simple settings:





The 'Enable/Disable' option turns on and off the Jabil Test remoting engine. If the remoting engine is set to 'Enabled', the user can also choose the TCP/IP port that Jabil Test will listen on for incoming connections.





Note: If another program or application is already using this port, the Remoting engine will deactivate itself, and the Remoting Interface status will display 'Error' on the main Jabil Test Status display.





Using Jabil Test Remoting

Previous Top Next



* * *



Using Jabil Test Remoting





Jabil Test allows any program capable of making SOAP calls the ability to remotely control Jabil Test. For .Net applications, a library is included in the JabilTestCoreLibs.dll file to greatly simplify the process.



The Jabil test remoting interface contains the following fields, methods, and properties shown below:





The Jabil Test Remoting Example project contains a fully working GUI application that can be used to demonstrate how each function and method of the Jabil Test remoter can be used.





Automation Engine Overview

Previous Top Next



* * *



Automation Engine Overview



The automation engine is a new feature of Jabil Test which can be used to allow Jabil Test to operate in a complex in-line process. In addition, it can be used for something as simple as starting or stopping a test cell by monitoring a DIO line.





The automation engine is basically a special test script that runs continuously in the background executing the same function in a loop. The standard Jabil Test functions are used in conjunction with a set of special automation engine functions to enable controlling the Jabil Test cells from inside of the automation script.





Configuring the Automation Engine

Previous Top Next



* * *



Configuring the Automation Engine

The automation engine can be configured from the Jabil Test main menu.





To configure the automation engine, click on Automation Control, and then select the Automation Engine sub-menu. Finally, click on the 'Configure Automation Engine' option which will open the automation engine dialog shown below.





The automation engine configuration dialog contains options for enabling and disabling the automation engine.





In addition, you can also select the specific test script, and polling frequency for the automation engine.



The script polling frequency controls how often the automation function will be executed. If the time required to execute the automation function is longer than the period of the polling frequency, the automation engine will wait for the completion of the automation function before calling the function again.



The automation script selects which test script file you would like the automation engine to run. Similiar to the global initialization scripts, the automation engine executes a single function out of the test script file called 'AutomationLoop'.





The Automation Engine Functions

Previous Top Next



* * *



The Automation Engine functions



In some cases, an automation script can be used to perform a function such as continuously polling a piece of test equipment to monitor a safety condition, etc.





In other instances, you may want an automation function to control the test cells to integrate the control of Jabil Test into an inline test process, use board handlers, etc.





This can be accomplished by using the Automation Engine functions shown here:





· GetTestCellCount

· GetTestCellStatus

· SetAutomationCell

· SetTestCellDefaultStartupScript

· SetTestCellTestScript

· SetTestCellToReadyStatus

· SetTestCellViewTab

· StartTestCell

· StartTestCellWithSerialNumber

· StopTestCell





These functions can be used from the automation engine script to control other test cells.





Debugging an Automation Script

Previous Top Next



* * *



Debugging an Automation Script



Since an automation script runs in the background, it's sometimes necessary to view the progress of an automation script in order to debug it's behavior. To debug an automation script, select the 'Debug Automation Script' option from the Jabil Test main menu. The following dialog will open allowing the automation script to be executed in 'Debug Mode':





Automation Engine Example

Previous Top Next



* * *



Automation Engine Example



The following script illustrates using the automation engine function to continuously poll two DIO lines and start a specific test cell if either digital line is active high.





Notice that inside of the automation function, we have all of the Jabil Test script functions at our disposal. This allows for extending the capabilities of the automation engine language in the same way that we can extend the capability of traditonal test scripts.





In this example, the National Intruments NIDAQmx functions are used to poll a specific DIO port and start test cells in response to the user clicking a start button.





Notice that the automation function should be kept relatively short for good performance. For longer running automation engine functions, you may want to decrease the polling frequency so that the overall performance of Jabil Test isn't impacted by the automation engine.





function AutomationLoop()

{

$Value0 = NI_DAQmx_Read_Dig_Port_Line("Dev1","port0","line0");

$Value1 = NI_DAQmx_Read_Dig_Port_Line("Dev1","port0","line1");

$Value2 = NI_DAQmx_Read_Dig_Port_Line("Dev1","port0","line2");



$Value0 = $Value0 ==0;

$Value1 = $Value1 ==0;

$Value2 = $Value2 ==0;

UpdateStatus($Value0);

UpdateStatus($Value1);

UpdateStatus($Value2);

ScriptIf($Value0,"CALL","StartCell1","");

ScriptIf($Value1,"CALL","StartCell2","");

ScriptIf($Value2,"CALL","StartCell3","");

End;



}





Branching in Jabil Test

Previous Top Next



* * *





Branch Control in Jabil Test





In Jabil Test there are 4 commands which allow branching inside of the scripting language





CALL





The call command causes Jabil Test to execute the supplied function and return when it's completed.





Example:





call myFunction();





GOTO





The goto command causes Jabil Test to jump to a particular label location, and continue execution from that point in the script.



Example:





goto myLabel;

UpdateStatus("This line will never execute");

Label myLabel:

UpdateStatus("Im executing this line");





If





The if command allows for executing a conditional block of code.





Example:

if ($MyNumber > 1)

{

UpdateSatus("If MyNumber is bigger than one, you'll see this message");

}

if ("DOG" == "D" + "O" + "G")

{

UpdateSatus("You'll always see this message");

}





ScriptIf





The ScriptIf command is the most powerful branching construct inside of Jabil Test, but it's also the most complicated. The script if command can be used to either call a particular function, or jump to a particular label depending on the value of a supplied boolean argument.





In fact, the function or label locations can also be variables which can be used to implement 'function pointers' inside of your test script for very advanced scripts.





Example:





ScriptIf($MyVar,"GOTO","Label1","Label2");

// If $MyVar is true, the script will begin executing at label 1, otherwise it will begin executing at label 2.





ScriptIf($MyVar,"CALL","Function1","Function2");

// If $MyVar is true, the script will call Function1, otherwise it will call Function2. Then the function returns, script execution will continue on the next script statement.





One useful feature of the ScriptIf statement is the default condition. If a particular label or function location is set to a blank string, if this branch is taken, the test script will begin executing at the line immediately following the ScriptIf statement. This allows for a simpler syntax to be used.





For example:





ScriptIf($MyVar,"GOTO","ItsTrue",""); // The blank location for the false label will cause the scriptIf statement to start executing on the next line.





While





The while statement continues to execute a block of code until the evaluation condition is no longer true.



The execution of the while loop can be stopped by using the break command - execution continues with the statements after the while loop.

The current iteration of the while loop can be ended and the boolean condition will be re-evaluated by using the continue command - if the condition is still true, execution starts at the beginning of the while loop.



For example:





$x = 0;

while ($x<10)

{

$x = $x+1;

UpdateStatus($x);

}





The execution of a loop can be modified by using the break or continue keywords as shown below.





$x = 0;

while ($x<10)

{

$x = $x+1;

if ($x==3)

{

continue;

}

if ($x == 9)

{

break;

}

UpdateStatus($x);

}





Global Scripts

Previous Top Next



* * *



Global Script Overview



Jabil Test supports two special test scripts which execute automatically when Jabil Test is opened, and closed.





You can choose which test scripts execute by configuring them inside of the 'Adjust Global Parameters' dialog window in the 'Global Scripts' tab.





Figure 1. Global Scripts Tab





One source of confusion around Global scripts is that the test script is not run from top to bottom as a traditional test script. Instead, only a specific function name is executed in the test script. Inside of this function, you can still call out and branch to other functions normally. The default function name is only used to tell Jabil Test where to 'Start' executing when running a Global script. The Global scripts were designed in this way to allow for a single test script to be used for testing the product, and also initializing and deinitializing the tester without the need for multiple test scripts.





· When a Global Initialization script is executed, the function named 'Initialize' is automatically called and executed.

· When a Global Cleanup script is executed, the function named 'GlobalCleanup' is automatically called and executed.





The Global Initialization Script and Shared Variables Explained





In addition to providing a simple way to automatically initialize the test system when Jabil Test is started, the Global initialization script also provides a simple way to create Shared Variables among the test cells. A shared variable is a variable that is globally available and shared for each test cell. Typically, each test cell has it's own set of variables. By defining a particular variable in the global initialization script, it allows each test cell to access as well as modify the variable in a thread-safe way.





NOTE: The global initialization script runs when the Jabil Test program starts, not when the Start button is pressed. If you make changes to the Global Initialization Script, you must close Jabil Test and restart the program.





Reserved Script Variables

Previous Top Next



* * *



Special Reserved Script Variables In Jabil Test



The following script variables are reserved and have special meaning when used inside of a Jabil Test script.



Variable

Variable Type

Description



$AbortFailMessage

String

This string variable is set to the Abort or Fail reason that was entered by a user after pressing the Record Abort or Record Failure button on the DAS panel.



$CellNumber

Integer

The number of the current test cell in which the script is executing. Read Only.



$SerialNumber

String

The string representing the value that was entered for the serial number at the time that the test was started.



$ProgressBar

Object

A reference to the Progress Bar control contained in the Test Cell.



$RESERVED_ContinueOnMeasurementFailure

Boolean

This boolean is set to true in the event that continue on measurement failure mode is selected for the current test cell. Read Only.



$RESERVED_CurrentScriptFile

String

This string contains the filename and path of the currently executing test script. Read Only.



$RESERVED_CurrentUser

String

This string variable is set to the name of the currently logged in Jabil Test user. Read Only.



$RESERVED_JabilTestVersionNumber

String

This string variable is set to the Jabil Test version number and location string that is shown in the title bar of the Jabil Test window. Read Only.



$RESERVED_AbortFunction

String

The name of the configured Abort Function. Read Only. Use SetAbortFunction to set the name of the Abort Function.



$RESERVED_FailFunction

String

The name of the configured Fail Function. Read Only. Use SetFailFunction to set the name of the Fail Function.



$RESERVED_FinalizeFunctions

String

The name of the configured Finalize Function. Read Only. Use SetFinalizeFunction to set the name of the Finalize Function.



$RESERVED_ProductName

String

The name of the configured Product Name. Read Only. Use SetProductName to set the Product Name.



$RESERVED_TestName

String

The name of the current Test. Read Only. Use SetTestName to set the Test name.



$RESERVED_TestResults

Object

A reference to the test results object which contains all the test script execution information... this object can be used in conjunction with a custom test script command to 'fine tune' the test results before they are sent to the test report writer collection.



$TARS_AssemblyNumber

String

By setting this variable inside of a test script, it allows the script writer to override the default values entered into the TARS option form for the cell. If the variable is not used in the script, the default option specified in the TARS option form will be used for reporting.



$TARS_AssemblyRevision

String

By setting this variable inside of a test script, it allows the script writer to override the default values entered into the TARS option form for the cell. If the variable is not used in the script, the default option specified in the TARS option form will be used for reporting.



$TARS_BoardStyle

String

By setting this variable inside of a test script, it allows the script writer to override the default values entered into the TARS option form for the cell. If the variable is not used in the script, the default option specified in the TARS option form will be used for reporting.



$TARS_Customer

String

By Setting this variable inside of a test script, it allows the script writer to override the default values entered into the TARS option form for the cell. If the variable is not used in the script, the default option specified in the TARS option form will be used for reporting.



$TARS_Division

String

By Setting this variable inside of a test script, it allows the script writer to override the default values entered into the TARS option form for the cell. If the variable is not used in the script, the default option specified in the TARS option form will be used for reporting.



$TARS_FirmwareRevision

String

By Setting this variable inside of a test script, it allows the script writer to override the default values entered into the TARS option form for the cell. If the variable is not used in the script, the default option specified in the TARS option form will be used for reporting.



$TARS_Line

String

By Setting this variable inside of a test script, it allows the script writer to override the default values entered into the TARS option form for the cell. If the variable is not used in the script, the default option specified in the TARS option form will be used for reporting.



$TARS_Operator

String

By Setting this variable inside of a test script, it allows the script writer to override the default values entered into the TARS option form for the cell. If the variable is not used in the script, the default option specified in the TARS option form will be used for reporting.



$TARS_Process

String

By Setting this variable inside of a test script, it allows the script writer to override the default values entered into the TARS option form for the cell. If the variable is not used in the script, the default option specified in the TARS option form will be used for reporting.



$TARS_Site

String

By Setting this variable inside of a test script, it allows the script writer to override the default values entered into the TARS option form for the cell. If the variable is not used in the script, the default option specified in the TARS option form will be used for reporting.



$TARS_SoftwareDoc

String

By Setting this variable inside of a test script, it allows the script writer to override the default values entered into the TARS option form for the cell. If the variable is not used in the script, the default option specified in the TARS option form will be used for reporting.



$TARS_SoftwareRevision

String

By Setting this variable inside of a test script, it allows the script writer to override the default values entered into the TARS option form for the cell. If the variable is not used in the script, the default option specified in the TARS option form will be used for reporting.



$TARS_TesterName

String

By Setting this variable inside of a test script, it allows the script writer to override the default values entered into the TARS option form for the cell. If the variable is not used in the script, the default option specified in the TARS option form will be used for reporting.



$TestCell

Object

A reference to the entire test cell object which can be used for implementing reflection inside certain script functions. The variable exists more for the benefit of the executive programmer than the script programmer.



$TestResults

Object

A reference to the test results object which can be used by certain script functions. The variable exists more for the benefit of the executive programmer than the script programmer. Read Only.



$TestStatus

String

Contains the current status of the test and the test cell. Contains one of: Ready, Pass, Fail, Abort, Running, Waiting. Read Only.





Script Control Functions

Previous Top Next



* * *



Jabil Test Script Control Statements

The Jabil Test scripting language provides several control statements to adjust program flow. The following provides a summary of each script control statement, and it's function.



Script Statement

Description



break

The break statement is used to terminate the execution of a while loop.



call

The call statement is used to execute a script function. When the interpreter encounters a 'return' statement inside of the function, the executive will return to the location immediately following the call statement. Jabil Test supports a call stack limited only the available free memory.



continue

The continue statement is used to stop the current iteration of a while loop, and return to the beginning of the loop. The while condition is re-evaluated before beginning entering the while loop.



End

The 'End' statement is used for to halt program execution. When the script interpreter encounters an 'End' statement, script execution is halted. If a finalization function has been set, it will still be executed.



function

The function keyword is used to define a set of instructions as a logical function. Each function should be wrapped by a function definition, and it's matching 'return' or 'End' statement.

For example:

function MyFunction()

...statement1;

...statement2;

...statement3;

return;



goto

The goto statement can be used to jump to a label in the script, but nothing is appended to the return stack.



label

The label statement can be used to mark a particular location in the script for access via the 'goto' function. The syntax for the label statement follows:

Label location:



return

The return statement is used to return from a previous call statement. If a return statement is encountered, and no call location is present on the stack, a general parse exception is thrown by the script interpreter, which results in script failure.



ScriptIf

The 'ScriptIf' statement allows for conditional branching depending on a boolean variable. For more information, see the ScriptIf function in the Test Function documentation.



SetFailFunction

The 'SetFailFunction' is actually implemented as a test function, but it is used to control script execution flow. The SetFailFunction marks a specific function to be executed when the test either generates a 'fail' status. The 'SetFailFunction' can be used several times throughout a script to define different cleanup routines depending on the amount of progress made executing a test script. For more information see the SetFailFunction documentation.



SetFinalizeFunction

The 'SetFinalizeFunction' is actually implemented as a test function, but it is used to control script execution flow. The SetFinalizeFunction marks a specific function to be executed when the test either generates a 'pass/fail/abort' status. The 'SetFinalizeFunction' can be used several times throughout a script to define different cleanup routines depending on the amount of progress made executing a test script. For more information see the SetFinalizeFunction documentation.





Script Variables Explained

Previous Top Next



* * *





Jabil Test Script Variables

Variable Overview

The Jabil Test scripting language provides robust support for variables which allow passing information between separate test steps. Any function can accept an unlimited number of parameters, and return any number of parameters required. The syntax for a function call using variables follows:

($returnVariable1,$returnVariable2...) = FunctionCall($functionArgument1,$functionArgument2...)

Variable Naming Convention

The naming convention for variables is simple:

Each variable must begin with a '$' character which indicates to the interpreter that the following token is a script variable.

Each variable must contain no whitespace characters.

Supported Variable Types

Jabil Test supports the following variable types:

Boolean = a true/false conditional variable

Integer = a whole number 32 bit value

Float = a decimal value with 64 bits of precision

String = a text string of unlimited length

Object = a generic data structure that can be cast to the proper type inside a test function. Objects can't be created inside the test script, they can only be created by test functions and then can be used to pass information (or instrument handles) to following test functions.

Defining Variables

Variables are defined in Jabil Test using one of two available methods. The first and most basic method of defining a variable is simply to use it in a script function. There is no need to pre-declare it. The variable will be defined the first time that it's used.

The other way for a variable to be created inside of the test script is for it to be a predefined variable. See the topic entitled 'Reserved Script Variables' for more information about the variable names in Jabil Test that have a special meaning.





String Escape Sequences

Previous Top Next



* * *



String Escape Sequences



Jabil Test supports using escape sequences in string literals to embed special characters into the contents of an user created immutable string.





String Escape Sequences



Escape Sequence

Character

Description



\n

New Line

This escape sequence can be used to insert a new line character into a string.



\r

Carriage Return

This escape sequence can be used to insert a carriage return character into a string.



\"

Quotation Mark

This escape sequence can be used to insert a quotation mark character into a string.



\t

Tab

This escape sequence can be used to insert a tab character into a string.



\\

Back Slash

This escape sequence can be used to insert a single back slash character into a string



\x##

Any Hex

This escape sequence can be used to insert a single character into a string based on its ASCII value





Examples





$MyString1 = "This\n is\n a\n string\n with\n many\n newline\n characters";





$MyString2 = "This\r is\n a\r string\r with\r many\r carriage\r return\r characters";





$MyString3 = "This is a string containing \"Quoted\" Characters";





$MyString4 = "This \t Contains\t TAB characters";





$MyString5 = "This string contains a \\ a backslash character";





$MyString6 = "This string contains the VT-100 code for red text (escape character is 0x1b): \x1b[21mRed Text";





Using Include Statements

Previous Top Next



* * *



Using Include Statements



Test scripts can call test functions that are contained in external files by using #include statements. The syntax for the include file is directly compatible with the familiar syntax used in the C Programming language.



To include an external script file, you reference the script file using the following syntax:





#include<"c:\\myScripts\\MyScript.jts">





By including a script, the script interpreter essentially "cuts and pastes" the contents of the included script into the body of the primary script.





It's possible for included test scripts to include other test scripts as well using the same syntax.





In the event of a circular inclusion (meaning a test script includes another test script which includes itself), the script compiler will generate an error message.





Using Jabil Test Statements

Previous Top Next



* * *



Jabil Test has the capability of evaluating statements from the scripting language.



Here are a few examples:



Creating Variables (without using the New function):



$myBoolean = false;

$myInteger = 2;

$myString = "This is a string";

$myFloat = 2.2;



Math Statements:



$myInteger = 2 + 2;

$myInteger = $myInteger + 1;

$myFloat = (($myInteger + 5) * 5) / ($myInteger);



String Statements



$myString = "This is a string";

$myConcat = "This is a string" + $myString;



Boolean Evaluation



$myBool = $myInteger > 5;

$myBool = ($myInteger * 2) / 2 > 10;

$myBool = ($myInteger == 11);



Boolean Operators



$myBool = $boolean1 || $boolean2; //OR operator.

$myBool = $boolean1 && $boolean2; //AND operator.





AP1P_Close

Previous Top Next



* * *



AP1P_Close



Usage:

AP1P_Close($InstrumentHandle);





Description:

The close function terminates the software connection to the instrument and de-allocates system resources. It is generally a good programming habit to close the instrument handle when the program is done using the instrument.

Function arguments



Parameter

Variable Type

Description



$InstrumentHandle

Object

The handle of the instrument returned from the AP1P_Init function





Return parameters



Parameter

Variable Type

Description



None





Usage Examples

AP1P_Close($handle);





Supported Instruments

Audio Precision AP1P





AP1P_ConfigureAnalogAmpFreq

Previous Top Next



* * *



AP1P_GetAnalogAmpFreq



Usage:

$genSetting = AP1P_GetAnalogAmpFreq($AP1P_handle, $genFunction)





Description:

Returns the current analog generator amplitude or frequency setting and units.

Function arguments



Parameter

Variable Type

Description



$AP1P_handle

Object

Handle created by the AP1P_Init() function. Used in all subsequent driver calls.



$genFunction

String

The desired setting to return. [AMPLITUDE , FREQUENCY]





Return parameters



Parameter

Variable Type

Description



$genSetting

String

The current setting and units for the specified generator function.





Usage Examples

$genAmplitude = AP1P_GetAnalogAmpFreq($handle, "AMPLITUDE");





Supported Instruments

Audio Precision AP1P





AP1P_ConfigureAnalogGenerator

Previous Top Next



* * *



AP1P_ConfigureAnalogGenerator



Usage:

AP1P_ConfigureAnalogGenerator($AP1P_handle, $waveType, $frequency, $amplitude, $amplitudeUnits, $imdHighFreq, $imdLowFreq)





Description:

Configures the analog generator to the specified values and settings.

Function arguments



Parameter

Variable Type

Description



$AP1P_handle

Object

Handle created by the AP1P_Init() function. Used in all subsequent driver calls.



$waveType

String

Selects the analog generator waveform for output. Accepted string values are: [SINE, SQUARE, IMD]



$frequency

Float

The frequency value to set the analog generator to specified in hertz.



$amplitude

Float

The amplitude value to set the analog generator to, specified in the current units passed in the subsequent argument.



$amplitudeUnits

String

The amplitude units of the value sent in $amplitudeValue. Accepted string values are:

[VPK, Vrms, DBV, DBU, DBM]



$imdHighFreq

Integer

Selects the analog generator IMD high frequency tone for the IMD waveform. [7000, 8000]



$imdLowFreq

Integer

Selects the analog generator IMD low frequency tone for the IMD waveform. [50, 60, 70, 250]





Return parameters



Parameter

Variable Type

Description



None

-

-





Usage Examples

AP1P_ConfigureAnalogGenerator($handle, "SQUARE", 1000, 2.5, "Vrms", 7000, 60);





Supported Instruments

Audio Precision AP1P





AP1P_ConfigureInput

Previous Top Next



* * *



AP1P_ConfigureInput



Usage:

AP1P_ConfigureInput($AP1P_handle, $inputChannel)





Description:

Selects the Analog Analyzer input channel to be measured, depending on the the measurement function currently selected.



Note: GAGB and GBGA are valid only when LEVEL, PHASE, or RATIO are selected with AP1P_ConfigureMeasurementFunction.





Function arguments



Parameter

Variable Type

Description



$AP1P_handle

Object

Handle created by the AP1P_Init() function. Used in all subsequent driver calls.



$inputChannel

String

Analog Analyzer Input Channel. Accepted strings are: [A,B,GENA,GENB,GAGB,GBGA]





Return parameters



Parameter

Variable Type

Description



None

-

-





Usage Examples

AP1P_ConfigureInput($handle, "A");





Supported Instruments

Audio Precision AP1P





AP1P_ConfigureMeasurementFunction

Previous Top Next



* * *



AP1P_ConfigureMeasurementFunction



Usage:

AP1P_ConfigureMeasurementFunction($AP1P_handle, $measurementFunction)





Description:

Turns on the specified audio analyzer measurement function for the instrument.

Function arguments



Parameter

Variable Type

Description



$AP1P_handle

Object

Handle created by the AP1P_Init() function. Used in all subsequent driver calls.



$measurementFunction

String

The measurement function to set the audio analyzer. Accepted strings are:

[AMPLITUDE, NOISE, THD, SINAD,IMD,WF,ACMAINS, LEVEL, PHASE, RATIO, XTALK, GENLOAD]





Return parameters



Parameter

Variable Type

Description



None

-

-





Usage Examples

AP1P_ConfigureMeasurementFunction($handle, "AMPLITUDE");





Supported Instruments

Audio Precision AP1P





AP1P_ConfigureNoiseMeasurement

Previous Top Next



* * *



AP1P_ConfigureNoiseMeasurement



Usage:

AP1P_ConfigureNoiseMeasurement($AP1P_handle, $maxAmplitude, $minAmplitude, $bpFilter, $extSweep, $noiseFilter, $maxFrequency, $minFrequency, $hpFilter, $lpFilter, $noiseUnit, $weightingFilter)





Description:

Configures the Noise function of the analog generator to the specified values and settings.

Function arguments



Parameter

Variable Type

Description



$AP1P_handle

Object

Handle created by the AP1P_Init() function. Used in all subsequent driver calls.



$maxAmplitude

Float

Sets the maximum amplitude level for an amplitude sweep of the analog generator.



$minAmplitude

Float

Sets the minimum amplitude level for an amplitude sweep of the analog generator.



$bpFilter

Float

Selects the center frequency for the tunable bandpass filter.



$extSweep

String

Selectes the GLIDE or STEP settling in external sweep mode.



$noiseFilter

String

Selects the filter for the noise function. [SELECTIVE, WTD, UNWTD]



$maxFrequency

Float

Selects the upper frequency display range for the sweep and bargraph displays.



$minFrequency

Float

Selects the lower frequency display range for the sweep and bargraph displays.



$hpFilter

String

Enables and disables the high pass filter. [ON, OFF]



$lpFilter

String

Selects the band pass filter when the unweighted filter is selected. [R22K, Q22K, R30K, R80K, R300K]



$noiseUnit

String

Selects the measurement units for the noise function. [V, DBV, DBU, DBM, DBG, W, DB]



$weightingFilter

String

Selects the weighting filter for the noise function when the WTD filter is selected. [AUX1, AUX2, IECA, RMSCCIR, CCIR2K, QPKCCIR, ARMCCIR]





Return parameters



Parameter

Variable Type

Description



None

-

-





Usage Examples

AP1P_ConfigureNoiseMeasurement($handle,

2.5,0,1000,"STEP","WTD",20000,20,"ON","R22K","V","AUX1" );





Supported Instruments

Audio Precision AP1P





AP1P_ConfigureNoiseSweep

Previous Top Next



* * *



AP1P_ConfigureNoiseSweep



Usage:

AP1P_ConfigureNoiseSweep($AP1P_handle, $sweepSpeed, $steps, $sweepType)





Description:





Configures the sweep settings for the noise function of the audio analyzer.



Function arguments



Parameter

Variable Type

Description



$AP1P_handle

Object

Handle created by the AP1P_Init() function. Used in all subsequent driver calls.



$sweepSpeed

String

Selects the sweep speed. [FAST, MEDIUM, SLOW]



$steps

Integer

Selects the number of sweep steps. [-1, 0, 3, 5, 10, 5, 30, 75, 150]



$sweepType

String

Specifies either a frequency sweep or an amplitude sweep is to be performed when the sweep begins. [FREQ, AMPL]





Return parameters



Parameter

Variable Type

Description



None

-

-





Usage Examples

AP1P_ConfigureNoiseSweep($handle, "MEDIUM", 5, "AMPL");





Supported Instruments

Audio Precision AP1P





AP1P_ConfigureOutput

Previous Top Next



* * *



AP1P_ConfigureOutput



Usage:

AP1P_ConfigureOutput($AP1P_handle, $outputChannel)





Description:

Selects the analog generator output channel. Selecting channel A connects the generator to the channel A output and does not effect the status of the B output. Selecting OFF turns both A and B off. Selecting ON turns both A and B on.



Function arguments



Parameter

Variable Type

Description



$AP1P_handle

Object

Handle created by the AP1P_Init() function. Used in all subsequent driver calls.



$outputChannel

String

Analog Generator Output Channel. Accepted strings are: [A, B, ON, OFF]





Return parameters



Parameter

Variable Type

Description



None

-

-





Usage Examples

AP1P_ConfigureOutput($handle, "A");





Supported Instruments

Audio Precision AP1P





AP1P_ConfigureOutputImpedance

Previous Top Next



* * *



AP1P_ConfigureOutputImpedance



Usage:

AP1P_ConfigureOutputImpedance($AP1P_handle, $outputImpedance)





Description:





Selects the analog generator output impedance in ohms and configuration.



Function arguments



Parameter

Variable Type

Description



$AP1P_handle

Object

Handle created by the AP1P_Init() function. Used in all subsequent driver calls.



$outputImpedance

String

Output Impedance and Configuration. Accepted strings are: [U40, U50, B40, B50, B150, B600]





Return parameters



Parameter

Variable Type

Description



None

-

-





Usage Examples

AP1P_ConfigureOutputImpedance($handle, "B600");





Supported Instruments

Audio Precision AP1P





AP1P_ConfigurePhaseMeasurement

Previous Top Next



* * *



AP1P_ConfigurePhaseMeasurement



Usage:

AP1P_ConfigurePhaseMeasurement($AP1P_handle, $maxAmplitude, $minAmplitude, $average, $external, $maxFrequency, $minFrequency, $levelMeterUnits, $displayRange)





Description:

Configures the Phase function of the analog generator to the specified values and settings.

Function arguments



Parameter

Variable Type

Description



$AP1P_handle

Object

Handle created by the AP1P_Init() function. Used in all subsequent driver calls.



$maxAmplitude

Float

Sets the maximum amplitude level for an amplitude sweep of the analog generator.



$minAmplitude

Float

Sets the minimum amplitude level for an amplitude sweep of the analog generator.



$average

String

Selects the average function for the phase meter. [AVERAGE, NOAVERAGE]



$external

String

Selectes the GLIDE or STEP settling in external sweep mode.



$maxFrequency

Float

Selects the upper frequency display range for the sweep and bargraph displays.



$minFrequency

Float

Selects the lower frequency display range for the sweep and bargraph displays.



$levelMeterUnits

String

Selects the level meter units. OFF turns the level measurement display off. [V, DBV, DBU, DBM, DBR, DBG, W, OFF]



$displayRange

String

Selects the phase meter display range. [DEG90, DEG180, DEG270]





Return parameters



Parameter

Variable Type

Description



None

-

-





Usage Examples

AP1P_ConfigurePhaseMeasurement($handle,2.5,0,"AVERAGE","STEP",20000,20,"V","DEG90");





Supported Instruments

Audio Precision AP1P





AP1P_ConfigurePhaseSweep

Previous Top Next



* * *



AP1P_ConfigurePhaseSweep



Usage:

AP1P_ConfigurePhaseSweep($AP1P_handle, $sweepSpeed, $steps, $sweepType)





Description:





Configures the sweep settings for the phase measurement function of the audio analyzer.



Function arguments



Parameter

Variable Type

Description



$AP1P_handle

Object

Handle created by the AP1P_Init() function. Used in all subsequent driver calls.



$sweepSpeed

String

Selects the sweep speed. [FAST, MEDIUM, SLOW]



$steps

Integer

Selects the number of sweep steps. [-1, 0, 3, 5, 10, 5, 30, 75, 150]



$sweepType

String

Specifies either a frequency sweep or an amplitude sweep is to be performed when the sweep begins. [FREQ, AMPL]





Return parameters



Parameter

Variable Type

Description



None

-

-





Usage Examples

AP1P_ConfigurePhaseSweep($handle, "MEDIUM", 5, "AMPL");





Supported Instruments

Audio Precision AP1P





AP1P_ConfigureTHDMeasurement

Previous Top Next



* * *



AP1P_ConfigureTHDMeasurement



Usage:

AP1P_ConfigureTHDMeasurement($AP1P_handle, $maxAmplitude, $minAmplitude, $extSweep, $filter, $maxFrequency, $minFrequency, $hpFilter, $bpFilter, $levelUnit, $weightingFilter, $notchFrequency, $notchTune)





Description:

Configures the THD function of the analog generator to the specified values and settings.

Function arguments



Parameter

Variable Type

Description



$AP1P_handle

Object

Handle created by the AP1P_Init() function. Used in all subsequent driver calls.



$maxAmplitude

Float

Sets the maximum amplitude level for an amplitude sweep of the analog generator.



$minAmplitude

Float

Sets the minimum amplitude level for an amplitude sweep of the analog generator.



$extSweep

String

Selects the GLIDE or STEP settling in external sweep mode.



$filter

String

Selects the filter for the noise function. [WTD, UNWTD, AVERAGE]



$maxFrequency

Float

Selects the upper frequency display range for the sweep and bargraph displays.



$minFrequency

Float

Selects the lower frequency display range for the sweep and bargraph displays.



$hpFilter

String

Enables and disables the high pass filter. [ON, OFF]



$bpFilter

String

Selects the band pass filter when the UNWTD filter is selected. [R22K, Q22K, R30K, R80K, R300K]



$levelUnit

String

Selects the measurement units for the level measurement in the THD function. [PCT,V, DBV, DBU, DBM, DBG, W, DB]



$weightingFilter

String

Selects the weighting filter for the THD+N function when the WTD filter is selected. [AUX1, AUX2, IECA, RMSCCIR, CCIR2K, QPKCCIR, ARMCCIR]



$notchFrequency

Float

Selects the center frequency for the tunable notch filter when $notchTune is set to FIXTUNE.



$notchTune

String

Selects the notch filter tuning mode for the THD function. [AUTO, GENTRACK, FIXTUNE]





Return parameters



Parameter

Variable Type

Description



None

-

-





Usage Examples

AP1P_ConfigureTHDMeasurement($handle,

2.5,0,"STEP","WTD",20000,20,"ON","R22K","V","AUX1",1000,"AUTO" );





Supported Instruments

Audio Precision AP1P





AP1P_ConfigureTHDSweep

Previous Top Next



* * *



AP1P_ConfigureTHDSweep



Usage:

AP1P_ConfigureTHDSweep($AP1P_handle, $sweepSpeed, $steps, $sweepType)





Description:





Configures the sweep settings for the THD measurement function of the audio analyzer.



Function arguments



Parameter

Variable Type

Description



$AP1P_handle

Object

Handle created by the AP1P_Init() function. Used in all subsequent driver calls.



$sweepSpeed

String

Selects the sweep speed. [FAST, MEDIUM, SLOW]



$steps

Integer

Selects the number of sweep steps. [-1, 0, 3, 5, 10, 5, 30, 75, 150]



$sweepType

String

Specifies either a frequency sweep or an amplitude sweep is to be performed when the sweep begins. [FREQ, AMPL]





Return parameters



Parameter

Variable Type

Description



None

-

-





Usage Examples

AP1P_ConfigureTHDSweep($handle, "MEDIUM", 5, "AMPL");





Supported Instruments

Audio Precision AP1P





AP1P_ConfigureWowAndFlutterMeasurement

Previous Top Next



* * *



AP1P_ConfigureWowAndFlutterMeasurement



Usage:

AP1P_ConfigureWowAndFlutterMeasurement($AP1P_handle, $wfDetector, $wfFilter, $wfLUnit, $wfMMax, $wfMMin, $wfResponse, $wfFUnit, )





Description:

Configures the Wow and Flutter function of the analog generator to the specified values and settings.

Function arguments



Parameter

Variable Type

Description



$AP1P_handle

Object

Handle created by the AP1P_Init() function. Used in all subsequent driver calls.



$wfDetector

String

Selects the Wow and Flutter Detector. [IEC, NAB, JIS]



$wfFilter

String

Selects the Wow and Flutter weighted or unweighted filters. [WTD, UNWTD]



$wfLUnit

String

Selects the measurement units for the level measurement in the Wow and Flutter function. [V, DBV, DBU, DBM, DBR, DBG, W, OFF]



$wfMMax

Float

Selects the upper magnitude display range for the bar graph display.



$wfMMin

Float

Selects the lower magnitude display range for the bar graph display.



$wfResponse

String

Selects the measurement response mode for the Wow and Flutter measurements. [PEAK, SIG2]



$wfFUnit

String

Selects the Wow and Flutter function frequency meter units and reference frequency for frequency deviation measurements. [HZ, DPCT3000, DPCT3150, OFF]





Return parameters



Parameter

Variable Type

Description



None

-

-





Usage Examples

AP1P_ConfigureWowAndFlutterMeasurement($handle,"IEC","WTD","V",2.5,1.5,"PEAK","HZ");





Supported Instruments

Audio Precision AP1P





AP1P_GetMeasurementData

Previous Top Next



* * *



AP1P_GetMeasurementData



Usage:

($measurement, $Units) = AP1P_GetMeasurementData($AP1P_handle, $measurementGauge)





Description:

Returns the next available measurement from specified measurement meter. This meter is dependant on the currently selected analog function.





Note: The accepted measurement gauge and correpsonding reading are as follows:





"1" : Left displayed measurement on the front panel

"2" : Center displayed measurement on the front panel

"3" : Right displayed measurement on the front panel

"F" : The measurement from the analog frequency meter

"P" : The measurement from the analog phase meter

Function arguments



Parameter

Variable Type

Description



$AP1P_handle

Object

Handle created by the AP1P_Init() function. Used in all subsequent driver calls.



$measurementGauge

String

Desired measurement meter to get the measurement from. Accepted string values above.





Return parameters



Parameter

Variable Type

Description



$measurement

Float

The returned measurement value



$measurementUnits

String

The returned measurement units





Usage Examples

($measurement, $Units) = AP1P_GetMeasurementData($handle, "1");





Supported Instruments

Audio Precision AP1P





AP1P_Init

Previous Top Next



* * *



AP1P_Init



Usage:

$handle = AP1P_Init($ResourceName);





Description:

This function initializes a session with the instrument and returns the handle to the test script.

Note: This function requires NI-VISA to be installed.

Function arguments



Parameter

Variable Type

Description



$ResourceName

String

The resource name of the instrument.





Return parameters



Parameter

Variable Type

Description



$handle

Object

The handle to the instrument session.





Usage Examples

$handle = AP1P_Init("GPIB0::7::Instr");





Supported Instruments

Audio Precision AP1P





AP1P_Query

Previous Top Next



* * *



AP1P_Query



Usage:

$ReturnString = AP1P_Query($handle, $QueryCommand);





Description:

This function will send query messages directly to the instrument.

Note: All query messages must end with a "?".

Function arguments



Parameter

Variable Type

Description



$handle

Object

The handle of the instrument session that was returned by the AP1P_Init function.



$QueryCommand

String

The query to be sent to the instrument.





Return parameters



Parameter

Variable Type

Description



$ReturnString

String

The data return from the instrument





Usage Examples

$handle = AP1P_Query($handle,"M1?");





Supported Instruments

Audio Precision AP1P





AP1P_Reset

Previous Top Next



* * *



AP1P_Reset



Usage:

AP1P_Reset($AP1P_handle)





Description:

Resets the instrument to the factory default settings.



Note: This function requires NI-VISA to be installed.

Function arguments



Parameter

Variable Type

Description



$AP1P_handle

Object

Handle created by the AP1P_Init() function. Used in all subsequent driver calls.





Return parameters



Parameter

Variable Type

Description



None

-

-





Usage Examples

AP1P_Reset($handle);





Supported Instruments

Audio Precision AP1P





AP1P_SetAnalogAmplitude

Previous Top Next



* * *



AP1P_SetAnalogAmplitude



Usage:

AP1P_SetAnalogAmplitude($AP1P_handle, $amplitudeValue, $amplitudeUnits)





Description:

Sets the analog generator output amplitude in the specified units.



Function arguments



Parameter

Variable Type

Description



$AP1P_handle

Object

Handle created by the AP1P_Init() function. Used in all subsequent driver calls.



$amplitudeValue

Float

The amplitude level to set the analog generator to.



$amplitudeUnits

String

The amplitude units of the value sent in $amplitudeValue. Accepted string values are:

[VPK, Vrms, DBV, DBU, DBM]





Return parameters



Parameter

Variable Type

Description



None

-

-





Usage Examples

AP1P_SetAnalogAmplitude($handle,2.5, "Vrms");





Supported Instruments

Audio Precision AP1P





AP1P_SetAnalogFrequency

Previous Top Next



* * *



AP1P_SetAnalogFrequency



Usage:

AP1P_SetAnalogFrequency($AP1P_handle, $frequencyValue)





Description:

Sets the analog generator frequency to the specified value. Default units are Hz.



Function arguments



Parameter

Variable Type

Description



$AP1P_handle

Object

Handle created by the AP1P_Init() function. Used in all subsequent driver calls.



$frequecyValue

Float

The frequency value to set the analog generator to.





Return parameters



Parameter

Variable Type

Description



None

-

-





Usage Examples

AP1P_SetAnalogFrequency($handle,1000);





Supported Instruments

Audio Precision AP1P





AP1P_Write

Previous Top Next



* * *



AP1P_Write



Usage:

AP1P_Write($handle, $Command);





Description:





The Write function will send the passed command directly to the instrument. This will allow the test engineer to communicate with the instrument through GPIB commands that may not be available in one of the functions.





Note: This function provides no error checking on the passed arguments. The arguments will be sent directly to the instrument.

Function arguments



Parameter

Variable Type

Description



$handle

Object

The handle of the instrument returned from the AP1P_Init function



$Command

string

The GPIB command to be sent to the instrument.





Return parameters



Parameter

Variable Type

Description



None





Usage Examples

AP1P_Close($handle, $command);





Supported Instruments

Audio Precision AP1P





APX525_Close

Previous Top Next



* * *



APX525_Close



Usage:

APX525_Close($InstrumentHandle);





Description:

The close function terminates the software connection to the instrument and de-allocates system resources. It is generally a good programming habit to close the instrument handle when the program is done using the instrument.

Function arguments



Parameter

Variable Type

Description



$InstrumentHandle

Object

The handle of the instrument returned from the APX525_Init function





Return parameters



Parameter

Variable Type

Description



None





Usage Examples

APX525_Close($handle);





Supported Instruments

Audio Precision APX525





APX525_GetMeasurement_Frequency

Previous Top Next



* * *



APX525_GetMeasurement_Frequency



Usage:

($Ch1_Level,$Ch2_Level) = APX525_GetMeasurement_Frequency($InstrumentHandle,$SignalPathName,$MeasurementName,$NoOfChannels);





Description:

The GetMeasurement_Frequency function loads the test configuration file for an RMS Level measurement and returns the Ch1 and Ch2 frequency readings .

Function arguments



Parameter

Variable Type

Description



$InstrumentHandle

Object

The handle of the instrument returned from the APX525_Init function



$SignalPathName

String

The Name of the Signal Path in the config file loaded using the APX525_LoadProjectFile function.



$MeasurementName

String

The Name of the Measurement to perform as specified in the config file loaded using the APX525_LoadProjectFile function.



$NoOfChannels

Integer

The number of channels to test. It may be 1 or 2. If 1 is specified then the data returned for CH2 is "NA."





Return parameters



Parameter

Variable Type

Description



$Ch1_Level

String

Returns the level value.



$Ch2_Level

String

Returns the level value if there are 2 channels being used. Returns "NA" if only 1 channel is specified for measurement.





Usage Examples

($Ch1_Level,$Ch2_Level) = APX525_GetMeasurement_Frequency($InstrumentHandle,$SignalPathName,$MeasurementName,$NoOfChannels);





Supported Instruments

Audio Precision APX525





APX525_GetMeasurement_RMSLevel

Previous Top Next



* * *



APX525_GetMeasurement_RMSLevel



Usage:

($Ch1_Level,$Ch2_Level) = APX525_GetMeasurement_RMSLevel($InstrumentHandle,$SignalPathName,$MeasurementName,$NoOfChannels);





Description:

The GetMeasurement_RMSevel function loads the test configuration file for an RMS Level measurement and returns the Ch1 and Ch2 level readings .

Function arguments



Parameter

Variable Type

Description



$InstrumentHandle

Object

The handle of the instrument returned from the APX525_Init function



$SignalPathName

String

The Name of the Signal Path in the config file loaded using the APX525_LoadProjectFile function.



$MeasurementName

String

The Name of the Measurement to perform as specified in the config file loaded using the APX525_LoadProjectFile function.



$NoOfChannels

Integer

The number of channels to test. It may be 1 or 2. If 1 is specified then the data returned for CH2 is "NA."





Return parameters



Parameter

Variable Type

Description



$Ch1_Level

String

Returns the level value.



$Ch2_Level

String

Returns the level value if there are 2 channels being used. Returns "NA" if only 1 channel is specified for measurement.





Usage Examples

($Ch1_Level,$Ch2_Level) = APX525_GetMeasurement_RMSLevel($InstrumentHandle,$SignalPathName,$MeasurementName,$NoOfChannels);





Supported Instruments

Audio Precision APX525





APX525_GetMeasurement_THD_Plus_N_Level

Previous Top Next



* * *



APX525_Close



Usage:

($Ch1_Level,$Ch2_Level) = APX525_GetMeasurement_THD_Plus_N_Level($InstrumentHandle,$SignalPathName,$MeasurementName,$NoOfChannels);





Description:

The close function loads the test configuration file for a THD plus noise level measurement and

returns the Ch1 and Ch2 level readings .

Function arguments



Parameter

Variable Type

Description



$InstrumentHandle

Object

The handle of the instrument returned from the APX525_Init function



$SignalPathName

String

The Name of the Signal Path in the config file loaded using the APX525_LoadProjectFile function.



$MeasurementName

String

The Name of the Measurement to perform as specified in the config file loaded using the APX525_LoadProjectFile function.



$NoOfChannels

Integer

The number of channels to test. It may be 1 or 2. If 1 is specified then the data returned for CH2 is "NA."





Return parameters



Parameter

Variable Type

Description



$Ch1_Level

String

Returns the level value.



$Ch2_Level

String

Returns the level value if there are 2 channels being used. Returns "NA" if only 1 channel is specified for measurement.





Usage Examples

($Ch1_Level,$Ch2_Level) = APX525_GetMeasurement_THD_Plus_N_Level($InstrumentHandle,$SignalPathName,$MeasurementName,$NoOfChannels);





Supported Instruments

Audio Precision APX525





APX525_Init

Previous Top Next



* * *



APX525_Init



Usage:

$handle = APX525_Init();





Description:

This function initializes a session with APX500 software and returns the handle to the test script.





Function arguments



Parameter

Variable Type

Description



None

NA

NA





Return parameters



Parameter

Variable Type

Description



$handle

Object

The handle to the APX525 instrument session.





Usage Examples

$handle = APX525_Init();





Supported Instruments

Audio Precision APX525





APX525_LoadProjectFile

Previous Top Next



* * *



APX525_LoadProjectFile



Usage:

APX525_LoadProjectFile($InstrumentHandle,$ProjectFileNameAndPath);





Description:

This function initializes a session with APX500 software and returns the handle to the test script.





Function arguments



Parameter

Variable Type

Description



$InstrumentHandle

Object

The handle to the APX525 instrument session.



$ProjectFileNameAndPath

String

Path and filename to the cofig file to be used by the APX500 software.





Return parameters



Parameter

Variable Type

Description



None

NA

NA





Usage Examples

APX525_LoadProjectFile($InstrumentHandle,$ProjectFileNameAndPath);





Supported Instruments

Audio Precision APX525





SNAPI_ScanBarcode

Previous Top Next



* * *



SNAPI_ScanBarcode



Usage:

$Barcode = SNAPI_ScanBarcode($Device,$Timeout,$MaxLength);



Description:

This function requires the installation of the Motorola SNAPI driver on the system.

This function scans a barcode of given length within the given time limit.





Result:

$Barcode = SNAPI_ScanBarcode($Device,$Timeout,$MaxLength);

Function arguments



Parameter

Variable Type

Description



$Device

integer

The device number of the scanner. (usually 0)



$Timeout

integer

The timeout value in seconds. (1-10)



$MaxLength

integer

The maximum length of the barcode to be scanned.

Results will be clipped to this value when they are too long.





Return parameters



Parameter

Variable Type

Description



$Barcode

String

The scanned barcode. (empty if no barcode was found)





Example(s):

$Barcode = SNAPI_ScanBarcode(0,2,16);





Extended Example:

// Parameters

$DeviceNr = 0; // Device number

$ScanTimeout = 2; // Timeout in seconds

$MaxBarcodeLength = 16; // Maximum length





// Open serial device to PRN

$Barcode = SNAPI_ScanBarcode($DeviceNr,$ScanTimeout,$MaxBarcodeLength);

UpdateStatus($Barcode);

$Len = StringLength($Barcode);

UpdateStatus($Len);

End;





CableEye_Destroy

Previous Top Next



* * *



CableEye_Destroy



Usage:

CableEye_Destroy($CableEyeHandle);





Description:

Closes session, releasing all hardware and software resources.





Note: Using these functions requires registering the CableEye API using the 'CableEyeAPI.license' file in the Jabil Test directory. Start the main CableEye program by dragging the license file on top of the CableEye shortcut icon. You should get a pop-up confirming that the license was installed.





Function Arguments



Parameter

Variable Type

Description



$CableEyeHandle

Object

Handle to CableEye fixture and databases returned by the CableEye_Init() function.





Return Parameters



Parameter

Variable Type

Description



None

--





Example:

CableEye_Destroy($CableEyeHandle);





CableEye_Init

Previous Top Next



* * *



CableEye_Init



Usage:

$CableEyeHandle = CableEye_Init($baseDirectory);





Description:

Opens a session and returns a handle to the CableEye tester hardware.





Note: Using these functions requires registering the CableEye API using the 'CableEyeAPI.license' file in the Jabil Test directory. Start the main CableEye program by dragging the license file on top of the CableEye shortcut icon. You should get a pop-up confirming that the license was installed.





Function Arguments



Parameter

Variable Type

Description



$baseDirectory

String

Directory containing the CableEye.ini file. Use a blank directory ("") if the CableEye software was installed to the default directory.





Return Parameters



Parameter

Variable Type

Description



$CableEyeHandle

Object

Handle to CableEye fixture and databases.





Example:

$baseDirectory = "C:\\Documents and Settings\\All Users\\Application Data\\CAMI\\CableEyeV5";

$CableEyeHandle = CableEye_Init($baseDirectory );





CableEye_Learn

Previous Top Next



* * *



CableEye_Learn



Usage:

CableEye_Learn($CableEyeHandle);





Description:

Loads the match data with the current fixture configuration, using the currently set fixture mapping.





Note: Using these functions requires registering the CableEye API using the 'CableEyeAPI.license' file in the Jabil Test directory. Start the main CableEye program by dragging the license file on top of the CableEye shortcut icon. You should get a pop-up confirming that the license was installed.





Function Arguments



Parameter

Variable Type

Description



$CableEyeHandle

Object

Handle to CableEye fixture and databases returned by the CableEye_Init() function.





Return Parameters



Parameter

Variable Type

Description



None

--





Example:

CableEye_Learn($CableEyeHandle);





CableEye_LoadMap

Previous Top Next



* * *



CableEye_LoadMap



Usage:

CableEye_LoadMap($CableEyeHandle, $customMapFile);





Description:

Loads the match data's fixture mapping. A custom mapping can be loaded from the database, or the built-in default or consecutive header numbering schemes. This mapping is ignored if the match file has a default fixture mapping associated with it and overrideDefaultMap is set to false in the CableEye_LoadMatch() function.





Note: Using these functions requires registering the CableEye API using the 'CableEyeAPI.license' file in the Jabil Test directory. Start the main CableEye program by dragging the license file on top of the CableEye shortcut icon. You should get a pop-up confirming that the license was installed.





Function Arguments



Parameter

Variable Type

Description



$CableEyeHandle

Object

Handle to CableEye fixture and databases returned by the CableEye_Init() function.



$customMapFile

String

Custom fixture mapping filename. If no custom mapping exists for the selected cable type (match data), there are two other mapping modes that can be used:





· "DEFAULT" for CB Board layouts. Warning: because multiple CB connector pins map to the same data point, this mode can cause ambiguous mapping errors when running the test!

· "HEADERS" for generic connector headers with consecutive numbering





Return Parameters



Parameter

Variable Type

Description



None

--





Example:

$mappingFile = "Test Map";

CableEye_LoadMap($CableEyeHandle, $mappingFile);





CableEye_LoadMatch

Previous Top Next



* * *



CableEye_LoadMatch



Usage:

CableEye_LoadMatch($CableEyeHandle, $matchDataFile, $overrideDefaultMap);





Description:

Loads the match data file. If overrideDefaultMap is true, a custom fixture mapping file can be specified using the CableEye_LoadMap() function. If the match data does not have a custom fixture mapping associated with it, you must call the CableEye_LoadMap() function with the "HEADERS" or "DEFAULT" option.





Note: Using these functions requires registering the CableEye API using the 'CableEyeAPI.license' file in the Jabil Test directory. Start the main CableEye program by dragging the license file on top of the CableEye shortcut icon. You should get a pop-up confirming that the license was installed.





Function Arguments



Parameter

Variable Type

Description



$CableEyeHandle

Object

Handle to CableEye fixture and databases returned by the CableEye_Init() function.



$matchDataFile

String

Name of the match data filename.



$overrideDefaultMap

Boolean

Controls whether the match file's default fixture mapping should be replaced (with a custom map or generic connector headers).





Return Parameters



Parameter

Variable Type

Description



None

--





Example:

$matchFile = "Test Cable 4";

CableEye_LoadMatch($CableEyeHandle, $matchFile, true);





CableEye_Run

Previous Top Next



* * *



CableEye_Run



Usage:

($testPass, $failureList) = CableEye_Run($CableEyeHandle);





Description:

Runs the test, comparing the current setup to the match data. If any failures are found, they are returned as a list of non-conforming connections.





Note: Using these functions requires registering the CableEye API using the 'CableEyeAPI.license' file in the Jabil Test directory. Start the main CableEye program by dragging the license file on top of the CableEye shortcut icon. You should get a pop-up confirming that the license was installed.





Function Arguments



Parameter

Variable Type

Description



$CableEyeHandle

Object

Handle to CableEye fixture and databases returned by the CableEye_Init() function.





Return Parameters



Parameter

Variable Type

Description



$testPass

Boolean

True if the Test data and Match data are a match (all wiring the same, all values within tolerance).



$failureList

String

A list of nonconforming connections, in the format:

<FROM> - <TO> = <FAULT> (<TYPE>[ - <VALUE>])





Example:

($testPass, $failureList) = CableEye_Run($CableEyeHandle);

RecordMeasurementPassFail("Cable Test",$failureList," ",true,$testPass);





CableEye_ShowDifference

Previous Top Next



* * *



CableEye_ShowDifference



Usage:

CableEye_ShowDifference($CableEyeHandle);





Description:

Runs the test, comparing the current setup to the match data. If any non-conforming connections are found, they are displayed in a cable diagram with a table of failures. The script pauses until the form is closed.





Note: this function requires the cell setting 'Cell Threading Mode' to be set to (STA Mode).





Note: Using these functions requires registering the CableEye API using the 'CableEyeAPI.license' file in the Jabil Test directory. Start the main CableEye program by dragging the license file on top of the CableEye shortcut icon. You should get a pop-up confirming that the license was installed.





Function Arguments



Parameter

Variable Type

Description



$CableEyeHandle

Object

Handle to CableEye fixture and databases returned by the CableEye_Init() function.





Return Parameters



Parameter

Variable Type

Description



None

--





Example:

CableEye_ShowDifference($CableEyeHandle);





CableEye_Close

Previous Top Next



* * *



CableEye_Close

Usage:

CableEye_Close($Handle);

Description:

This function is used to support the CableEye cable test platform developed by CAMI Research. It supports both M2 and M3 model cable test platforms.

Closes connection to the CableEye fixture.

Note: These functions have been replaced by the CableEye API functions.

Example:

CableEye_Close($Handle);

Function Arguments



Parameter

Variable Type

Description



$Handle

Object

The handle to the CableEye hardware to be released.





Return Parameters



Parameter

Variable Type

Description



None





CableEye_LoadFiles

Previous Top Next



* * *



CableEye_LoadFiles

Usage:

CableEye_LoadFiles($Handle,$CableName,$MapFile);

Description:

This function is used to support the CableEye cable test platform developed by CAMI Research. It supports both M2 and M3 model cable test platforms.

This function is used to load the test data and map file to be used for Cable Testing on the CableEye product from CAMI research. In the event that the Cable Name can't be found in the CableEye database, or the custom pin map file can't be found, a failure is returned to the test executive interpreter. For more information on creating cable models, and custom pin map definitions, please see the CableEye user's manual.

Note: These functions have been replaced by the CableEye API functions.

Example:

CableEye_LoadFiles($Handle,"TestCable","MapDef");

Function Arguments



Parameter

Variable Type

Description



$Handle

Object

The handle to the CableEye hardware to be released.



$CableName

String

The Cable file from the CableEye database to be used for comparison.



$MapFile

String

The name of the custom map file (not including .map file extension or directory path)





Return Parameters



Parameter

Variable Type

Description



None





CableEye.Open

Previous Top Next



* * *



CableEye_Open

Usage:

$handle = CableEye_Open($WorkingDirectory,$ComPort,$DwellTime,$ModelType);

Description:

This function is used to support the CableEye cable test platform developed by CAMI Research. It supports both M2 and M3 model cable test platforms.

This function is used to initialize the CableEye cable tester made by CAMI research. After executing the CableEye.Open function, the handle returned must be disposed with the CableEye.Close function. In the event that the CableEye hardware can't be accessed, a failure is returned to the test script interpreter.

Note: These functions have been replaced by the CableEye API functions.

Example:

$handle = CableEye_Open("c:\\program files\\cableeye\\software",1,200,"M3);

Function Arguments



Parameter

Variable Type

Description



$WorkingDirectory

String

The working directory of the CableEye software. This directory must contain the sub-directories which contain the custom MAP and cable definition files.



$ComPort

Integer

The number of the COM port on which the CableEye fixture is connected.



$DwellTime

Integer

The dwell time in microseconds in which to wait before detecting a test pattern after it has been asserted.



$ModelType

String

The model type of Cable Eye to open. Allowable values are "M2" or "M3".





Return Parameters



Parameter

Variable Type

Description



$handle

Object

Returns a handle to the initialized CableEye hardware





CableEye.RunTest

Previous Top Next



* * *



CableEye_RunTest

Usage:

CableEye_RunTest($Session);

Description:

This function is used to support the CableEye cable test platform developed by CAMI Research. It supports both M2 and M3 model cable test platforms.

This function is used to initiate the test sequence on the CableEye Tester. In the event that the cable matches the cable data loaded, a passing result is generated. Otherwise a failure is returned to the test executive, along with a list of all the shorts,opens, and resistive mismatch failures found in the cable.

Before this function can be run, the CableEye tester first needs to be initialized and setup using the CableEye.Open and CableEye.LoadFiles functions. After running the CableEye test, the resources should be freed using the CableEye.Close function.

Note: These functions have been replaced by the CableEye API functions.

Example:

CableEye_RunTest($Session)

Function Arguments



Parameter

Variable Type

Description



$Session

Object

A handle to a current CableEye fixture which was creating using the CableEye.Open function.





Return Parameters



Parameter

Variable Type

Description



None





CableEye_SetThresholds

Previous Top Next



* * *



CableEye_SetThresholds

Usage:

$handle = CableEye.SetThresholds($Session,$LowerLimit,$UpperLimit,$LowerTolerance,$UpperTolerance);

Description:

This function is used to support the CableEye cable test platform developed by CAMI Research. It supports both M2 and M3 model cable test platforms.

This function is used to set the thresholds consistuting a short vs. open for the CableEye platform. Both single-threshold or dual-threshold setups are supported. If a single threshold is used, set the $UpperLimit argument to 0. For more information about resistance thresholds, see the CableEye user's manual.

Note: These functions have been replaced by the CableEye API functions.

Example:

CableEye_SetThresholds($Session,2,0,1,1);

Function Arguments



Parameter

Variable Type

Description



$Session

Object

A handle to a current CableEye fixture which was creating using the CableEye.Open function.



$LowerLimit

Float

Resistance threshold below which connections are considered wires (or, in single-threshold mode, below which a connection is detected)



$UpperLimit

Float

Resistance threshold above which connections are considered opens. Set to 0 to use single-threshold mode.



$LowerTolerance

Float

For resistance measurements, the lower bound on the difference between the measured resistance value of a resistive connection and the expected value expressed as a percent of the expected value.



$UpperTolerance

Float

For resistance measurements, the upper bound on the difference between the measured resistance value of a resistive connection and the expected value, expressed as percent of the expected value.





Return Parameters



Parameter

Variable Type

Description



None





CA210_Close

Previous Top Next



* * *



CA210_Close

Usage:

CA210_Close($InstrumentHandle);

Description:

This function supports the CA-210 Color Analzyer manufactered by Konica Minolta. It supports a single instrument connected via USB. In order to use this function, the USB driver must be installed along with the SDK library.

This function closes and releases the CA210 Color Analyzer

Function Arguments



Parameter

Variable Type

Description



$InstrumentHandle

Object

An instance of the CA210 Instrument handle to close





Return Parameters



Parameter

Variable Type

Description



None





CA210_Measure_FlickerFMA

Previous Top Next



* * *



CA210_Measure_FlickerFMA

Usage:

$flickerMeasure = $CA210_MeasureFlickerFMA($InstrumentHandle);

Description:

This function supports the CA-210 Color Analzyer manufactered by Konica Minolta. It supports a single instrument connected via USB. In order to use this function, the USB driver must be installed along with the SDK library.

Performs a measurement and returns the result of the FMA flicker measurement.

See the Konika-Minolta Display Color Analyzer User's Manual For More Detailed Information.

Function Arguments



Parameter

Variable Type

Description



$InstrumentHandle

Object

An instance of the CA210 Instrument handle





Return Parameters



Parameter

Variable Type

Description



$flickerMeasure

Float

The FMA flicker measurement





CA210_Measure_FlickerJEITA

Previous Top Next



* * *



CA210_Measure_FlickerJEITA

Usage:

$flickerMeasure = $CA210_Measure_FlickerJEITA($InstrumentHandle);

Description:

This function supports the CA-210 Color Analzyer manufactered by Konica Minolta. It supports a single instrument connected via USB. In order to use this function, the USB driver must be installed along with the SDK library.

Performs a measurement and returns the result of the JEITA flicker measurement.

See the Konika-Minolta Display Color Analyzer User's Manual For More Detailed Information.

Function Arguments



Parameter

Variable Type

Description



$InstrumentHandle

Object

An instance of the CA210 Instrument handle





Return Parameters



Parameter

Variable Type

Description



$flickerMeasure

Float

The JEITA flicker measurement





CA210_Measure_LV

Previous Top Next



* * *



CA210_Measure_LV

Usage:

$Lv = $CA210.Measure_LV($InstrumentHandle);

Description:

This function supports the CA-210 Color Analzyer manufactered by Konica Minolta. It supports a single instrument connected via USB. In order to use this function, the USB driver must be installed along with the SDK library.

Performs a brightness measurement and results the results in (cd/m2) Lv units.

See the Konika-Minolta Display Color Analyzer User's Manual For More Detailed Information.

Function Arguments



Parameter

Variable Type

Description



$InstrumentHandle

Object

An instance of the CA210 Instrument handle





Return Parameters



Parameter

Variable Type

Description



$Lv

Float

The measurement returned in (Lv) (cd/m2) units





CA210_Measure_LVFL

Previous Top Next



* * *



CA210_Measure_LVFL

Usage:

$LvfL = $CA210_Measure_LVFL($InstrumentHandle);

Description:

This function supports the CA-210 Color Analzyer manufactered by Konica Minolta. It supports a single instrument connected via USB. In order to use this function, the USB driver must be installed along with the SDK library.

Performs a brightness measurement and results the results in fL units.

See the Konika-Minolta Display Color Analyzer User's Manual For More Detailed Information.

Function Arguments



Parameter

Variable Type

Description



$InstrumentHandle

Object

An instance of the CA210 Instrument handle





Return Parameters



Parameter

Variable Type

Description



$LvfL

Float

The measurement returned in fL units





CA210_Measure_SXSY

Previous Top Next



* * *



CA210_Measure_SXSY

Usage:

($sx,sy) = $CA210_Measure_SXSY($InstrumentHandle);

Description:

This function supports the CA-210 Color Analzyer manufactered by Konica Minolta. It supports a single instrument connected via USB. In order to use this function, the USB driver must be installed along with the SDK library.

Performs a measurement, and returns the results in the xy color space.

See the Konika-Minolta Display Color Analyzer User's Manual For More Detailed Information.

Function Arguments



Parameter

Variable Type

Description



$InstrumentHandle

Object

An instance of the CA210 Instrument handle





Return Parameters



Parameter

Variable Type

Description



$sx

Float

The x value of the measurement in the xy color space



$sy

Float

The yvalue of the measurement in the xy color space





CA210_Measure_TDUV

Previous Top Next



* * *



CA210_Measure_TDUV

Usage:

($T,$Duv) = $CA210_MeasureTDUV($InstrumentHandle);

Description:

This function supports the CA-210 Color Analzyer manufactered by Konica Minolta. It supports a single instrument connected via USB. In order to use this function, the USB driver must be installed along with the SDK library.

Performs a measurement and returns the correlated color temperature and the difference from black-body locus, as represented in the uv color space.

See the Konika-Minolta Display Color Analyzer User's Manual For More Detailed Information.

Function Arguments



Parameter

Variable Type

Description



$InstrumentHandle

Object

An instance of the CA210 Instrument handle





Return Parameters



Parameter

Variable Type

Description



$T

Float

Correlated color temperature, in uv color space



$Duv

Float

Difference from black-body locus, in uv color space





CA210_Measure_XYZ

Previous Top Next



* * *



CA210_Measure_XYZ

Usage:

($X,$Y,$Z) = $CA210_Measure_XYZ($InstrumentHandle);

Description:

This function supports the CA-210 Color Analzyer manufactered by Konica Minolta. It supports a single instrument connected via USB. In order to use this function, the USB driver must be installed along with the SDK library.

Performs a measurement and returns the result in the XYZ color space.

See the Konika-Minolta Display Color Analyzer User's Manual For More Detailed Information.

Function Arguments



Parameter

Variable Type

Description



$InstrumentHandle

Object

An instance of the CA210 Instrument handle





Return Parameters



Parameter

Variable Type

Description



$X

Float

The X value of measurement result in XYZ color space



$Y

Float

The Y value of measurement result in XYZ color space



$Z

Float

The Z value of measurement result in XYZ color space





CA210_Open

Previous Top Next



* * *



CA210_Open

Usage:

$Instrument = CA210_Open();

Description:

This function supports the CA-210 Color Analzyer manufactered by Konica Minolta. It supports a single instrument connected via USB. In order to use this function, the USB driver must be installed along with the SDK library.

This function opens the CA210 color analyzer for use.

Function Arguments



Parameter

Variable Type

Description



None





Return Parameters



Parameter

Variable Type

Description



$Instrument

Object

An instance of the CA210 Instrument handle





CA210_SetAnalogRange

Previous Top Next



* * *



CA210_SetAnalogRange

Usage:

CA210_SetAnalogRange($InstrumentHandle,$Range1,$Range2);

Description:

This function supports the CA-210 Color Analzyer manufactered by Konica Minolta. It supports a single instrument connected via USB. In order to use this function, the USB driver must be installed along with the SDK library.

This function sets the analog range of the CA-200 unit's analog display.

See the Konika-Minolta Display Color Analyzer User's Manual For More Detailed Information.

Function Arguments



Parameter

Variable Type

Description



$InstrumentHandle

Object

An instance of the CA210 Instrument handle



$Range1

Float

Allowable values are (0.1 .. 99.0)



$Range2

Float

Allowable values are (0.1 .. 99.0)





Return Parameters



Parameter

Variable Type

Description



None





CA210_SetAveragingMode

Previous Top Next



* * *



CA210_SetAveragingMode

Usage:

CA210_SetAveragingMode($InstrumentHandle,$AveragingMode);

Description:

This function supports the CA-210 Color Analzyer manufactered by Konica Minolta. It supports a single instrument connected via USB. In order to use this function, the USB driver must be installed along with the SDK library.

This function sets the averaging mode on the CA-210 Instrument.

See the Konika-Minolta Display Color Analyzer User's Manual For More Detailed Information.

Function Arguments



Parameter

Variable Type

Description



$InstrumentHandle

Object

An instance of the CA210 Instrument handle



$SyncMode

String

The synchronization mode to use. Valid values are:

· "SLOW"

· "FAST"

· "AUTO"





Return Parameters



Parameter

Variable Type

Description



None





CA210_SetFMAAnalogRange

Previous Top Next



* * *



CA210_SetFMAAnalogRange

Usage:

CA210_SetFMAAnalogRange($InstrumentHandle,$Range);

Description:

This function supports the CA-210 Color Analzyer manufactered by Konica Minolta. It supports a single instrument connected via USB. In order to use this function, the USB driver must be installed along with the SDK library.

Sets the analog display range used by the CA-210 for flicker measurement.

See the Konika-Minolta Display Color Analyzer User's Manual For More Detailed Information.

Function Arguments



Parameter

Variable Type

Description



$InstrumentHandle

Object

An instance of the CA210 Instrument handle



$Range

Float

Allowable values are (0.1 .. 99.0)





Return Parameters



Parameter

Variable Type

Description



None





CA210_SetSyncMode

Previous Top Next



* * *



CA210_SetSyncMode

Usage:

CA210_SetSyncMode($InstrumentHandle,$SyncMode);

Description:

This function supports the CA-210 Color Analzyer manufactered by Konica Minolta. It supports a single instrument connected via USB. In order to use this function, the USB driver must be installed along with the SDK library.

This function sets the Synchronization mode on the CA-210 Instrument.

See the Konika-Minolta Display Color Analyzer User's Manual For More Detailed Information.

Function Arguments



Parameter

Variable Type

Description



$InstrumentHandle

Object

An instance of the CA210 Instrument handle



$SyncMode

String

The synchronization mode to use. Valid values are:

· "NTSC"

· "PAL"

· "EXT"

· "UNIV"

· "INT"





Return Parameters



Parameter

Variable Type

Description



None





CA210_StandardCal

Previous Top Next



* * *



CA210_StandardCal

Usage:

CA210_StandardCal($InstrumentHandle,$CalMode);

Description:

This function supports the CA-210 Color Analzyer manufactered by Konica Minolta. It supports a single instrument connected via USB. In order to use this function, the USB driver must be installed along with the SDK library.

This function performs a Standard Calibration on the CA-210 Instrument. Either a 6500K calibration or 9300K calibration may be selected.

Function Arguments



Parameter

Variable Type

Description



$InstrumentHandle

Object

An instance of the CA210 Instrument handle



$CalMode

String

The calibration standard to use. Valid values are:

· "6500K"

· "9300K"





Return Parameters



Parameter

Variable Type

Description



None





CA210_ZeroCal

Previous Top Next



* * *



CA210_ZeroCal

Usage:

CA210_ZeroCal($InstrumentHandle);

Description:

This function supports the CA-210 Color Analzyer manufactered by Konica Minolta. It supports a single instrument connected via USB. In order to use this function, the USB driver must be installed along with the SDK library.

This function performs a Zero Cal on the CA-210 Instrument. In order for a successful zero calibration operation, the device should have the lens cap in place, and the probe should be set to the Zero Cal position.

Function Arguments



Parameter

Variable Type

Description



$InstrumentHandle

Object

An instance of the CA210 Instrument handle





Return Parameters



Parameter

Variable Type

Description



None





PCIE1752_Close

Previous Top Next



* * *



PCIE1752_Close



Usage:

PCIE1752_Close($pcieHandle);



Description:

This function will close communication with the PCIE-1752 DO card.



Remarks

Communication must already have been opened with the PCIE1752_Connect function.



Function arguments



Parameter

Variable Type

Description



$pcieHandle

Object

The handle to an existing PCIE-1752 connection.





Return parameters



Parameter

Variable Type

Description



None





Example:





// Connect to board ID 0.

$boardNum = 0;

$pcieHandle = PCIE1752_Connect($boardNum);



// Now we close the communication.

PCIE1752_Close($pcieHandle);





PCIE1752_Connect

Previous Top Next



* * *



PCIE1752_Connect



Usage:

$pcieHandle = PCIE1752_Connect($deviceNumber);



Description:

This function will open communication with the PCIE-1752 DO card.



Remarks

If the board can not be found, an error will be generated and the script will be failed.



Function arguments



Parameter

Variable Type

Description



$deviceNumber

Integer

The ID number of the DO card to connect to.





Return parameters



Parameter

Variable Type

Description



$pcieHandle

Object

A handle to the open communication that can be used with other PCIE-1752 functions.





Example:





// Connect to board ID 0.

$boardNum = 0;

$pcieHandle = PCIE1752_Connect($boardNum);





PCIE1752_GetBoardInfo

Previous Top Next



* * *



PCIE1752_GetBoardInfo



Usage:

($boardVersion, $boardID, $driverVersion, $portCount, $location, $boardDesc) = PCIE1752_GetBoardInfo($pcieHandle);



Description:

This function will return information about the PCIE-1752 DO card.



Remarks

Communication must already have been opened with the PCIE1752_Connect function.



Function arguments



Parameter

Variable Type

Description



$pcieHandle

Object

The handle to an existing PCIE-1752 connection.





Return parameters



Parameter

Variable Type

Description



$boardVersion

String

A string containing the version of the board.



$boardID

String

A string containing the ID of the board.



$driverVersion

String

A string containing the version of the software driver.



$portCount

Integer

The number of ports on the board.



$location

String

A string containing the location of the board inside the computer.



$boardDesc

String

A string containing the description of the board.





Example:





// Connect to board ID 0.

$boardNum = 0;

$pcieHandle = PCIE1752_Connect($boardNum);



// Get the information about the board.

($boardVer, $boardID, $driverVer, $portCount, $location, $boardDesc) = PCIE1752_GetBoardInfo($pcieHandle);



// Output the information about the board.

$outStr = "\r\nBoard Version:\t" + $boardVer;

$outStr = $outStr + "\r\nBoard ID:\t\t" + $boardID;

$outStr = $outStr + "\r\nDriver Version:\t" + $driverVer;

$outStr = $outStr + "\r\nNumber of Ports:\t" + $portCount;

$outStr = $outStr + "\r\nBoard Location:\t" + $location;

$outStr = $outStr + "\r\nBoard Description:\t" + $boardDesc;

UpdateStatus($outStr);





PCIE1752_ReadBit

Previous Top Next



* * *



PCIE1752_ReadBit



Usage:

$bitState = PCIE1752_ReadBit($pcieHandle, $portNumber, $lineNumber);



Description:

This function will return the state of the specified output line.



Remarks

Communication must already have been opened with the PCIE1752_Connect function.

Port numbers and Line numbers start at 0. A board with 8 ports will have them numbered 0 to 7.



Function arguments



Parameter

Variable Type

Description



$pcieHandle

Object

The handle to an existing PCIE-1752 connection.



$portNumber

Integer

The port number to get the data from.



$lineNumber

Integer

The line number to get the data from.





Return parameters



Parameter

Variable Type

Description



$bitState

Integer

The state of the output line. 0 = low, 1 = high.





Example:





// Connect to board ID 0.

$boardNum = 0;

$pcieHandle = PCIE1752_Connect($boardNum);



// Get the state of line 2 on port 1.

$portNum = 1;

$lineNum = 2;

$lineState = PCIE1752_ReadBit($pcieHandle, $portNum, lineNum);





PCIE1752_ReadPort

Previous Top Next



* * *



PCIE1752_ReadPort



Usage:

$portState = PCIE1752_ReadPort($pcieHandle, $portNumber);



Description:

This function will return the state of the specified port.



Remarks

Communication must already have been opened with the PCIE1752_Connect function.

Port numbers start at 0. A board with 8 ports will have them numbered 0 to 7.



Function arguments



Parameter

Variable Type

Description



$pcieHandle

Object

The handle to an existing PCIE-1752 connection.



$portNumber

Integer

The port number to get the data from.





Return parameters



Parameter

Variable Type

Description



$portState

Integer

The state of the output port.





Example:





// Connect to board ID 0.

$boardNum = 0;

$pcieHandle = PCIE1752_Connect($boardNum);



// Get the state of port 1.

$portNum = 1;

$lineState = PCIE1752_ReadPort($pcieHandle, $portNum);





PCIE1752_ResetBoard

Previous Top Next



* * *



PCIE1752_ResetBoard



Usage:

PCIE1752_ResetBoard($pcieHandle, $resetState);



Description:

This function will reset the board.



Remarks

Communication must already have been opened with the PCIE1752_Connect function.

The board will be reset to its power-on state.



Function arguments



Parameter

Variable Type

Description



$pcieHandle

Object

The handle to an existing PCIE-1752 connection.



$resetState

Integer

The reset state for the board.





Return parameters



Parameter

Variable Type

Description



None





Example:





// Connect to board ID 0.

$boardNum = 0;

$pcieHandle = PCIE1752_Connect($boardNum);



// Reset the board.

$resetState = 0;

PCIE1752_ResetBoard($pcieHandle, $resetState);





PCIE1752_WriteBit

Previous Top Next



* * *



PCIE1752_WriteBit



Usage:

PCIE1752_WriteBit($pcieHandle, $portNumber, $lineNumber, $lineData);



Description:

This function will set the state of one output line on a specified port.



Remarks

Communication must already have been opened with the PCIE1752_Connect function.

Port numbers and Line numbers start at 0. A board with 8 ports will have them numbered 0 to 7.



Function arguments



Parameter

Variable Type

Description



$pcieHandle

Object

The handle to an existing PCIE-1752 connection.



$portNumber

Integer

The port number to set a line state on.



$lineNumber

Integer

The line number to set the state of.



$lineData

Integer

The state to set the line to. 0 = low, all positive integers = high.





Return parameters



Parameter

Variable Type

Description



None





Example:





// Connect to board ID 0.

$boardNum = 0;

$pcieHandle = PCIE1752_Connect($boardNum);



// Set line 2 on port 1 high.

$portNum = 1;

$lineNum = 2;

$lineState = 255;

PCIE1752_WriteBit($pcieHandle, $portNum, lineNum, $lineState);





PCIE1752_WritePort

Previous Top Next



* * *



PCIE1752_WritePort



Usage:

PCIE1752_WritePort($pcieHandle, $portNumber, $portData);



Description:

This function will set the state of all of the output lines on one port.



Remarks

Communication must already have been opened with the PCIE1752_Connect function.

Port numbers start at 0. A board with 8 ports will have them numbered 0 to 7.



Function arguments



Parameter

Variable Type

Description



$pcieHandle

Object

The handle to an existing PCIE-1752 connection.



$portNumber

Integer

The port number to set the outputs of.



$portData

Integer

The state to set the port to. Each bit represents one line. 0 = low, 1 = high.





Return parameters



Parameter

Variable Type

Description



None





Example:





// Connect to board ID 0.

$boardNum = 0;

$pcieHandle = PCIE1752_Connect($boardNum);



// Set port 1 to a pattern of 0011 0011. (0x33 = 0d51).

$portNum = 1;

$portState = 51;

PCIE1752_WritePort($pcieHandle, $portNum, $portState);





PMD_AnalogConfigure

Previous Top Next



* * *



PMD_AnalogConfigure

Usage:

PMD_AnalogConfigure($DeviceID,$AnalogMode);

Description:

This function supports the PMD-1208LS Personal Measurement Device From Measurement Computing Corporation

This function configures the Analog Input section of the PMD-1208LS device for either Single Ended or Differential operation. In Single-Ended mode, 8 Analog input ports are available. In Differential Mode, 4 Analog Input devices are available.

Function Arguments



Parameter

Variable Type

Description



$deviceNumber

Integer

The Board ID of the PMD-1208LS device



$AnalogMode

String

Configures the Analog input mode, allowable values are:

· "SingleEnded"

· "Differential"





Return Parameters



Parameter

Variable Type

Description



None





PMD_AnalogMeasure

Previous Top Next



* * *



PMD_AnalogMeasure

Usage:

$measurement = PMD_AnalogMeasure($DeviceID,$Channel,$Range);

Description:

This function supports the PMD-1208LS Personal Measurement Device From Measurement Computing Corporation

This function acquires an analog measurement from the D/A Convertor of the PMD-1208LS device. The raw value of the DA converter is automatically converted to a voltage measurement based on the range value supplied to the function. In the event of a successful measurement the function returns a PASS result. In the event that a hardware problem occurs, a FAIL result is returned to the executive.

Function Arguments



Parameter

Variable Type

Description



$deviceNumber

Integer

The Board ID of the PMD-1208LS device



$Channel

Integer

The channel to for an analog measurement. For single ended measurements, 0-7 are valid values. For differential measurements 0-3 are valid values.



$Range

String

The measurement range for the D/A converter. For single-ended configuration, the only valid range is "Bip10Volts". For differential measurements, the valid values are:

· "Bip20Volts" = +/- 20 Volts

· "Bip10Volts" = +/- 10 Volts

· "Bip5Volts" = +/- 5 Volts

· "Bip4Volts" = +/- 4 Volts

· "Bip2Pt5Volts" = +/- 2.5 Volts

· "Bip2Volts" = +/- 2 Volts

· "Bip1Pt25Volts" = +/- 1.25 Volts

· "Bip2Volts" = +/- 2 Volts

· "Bip1Pt25Volts" = +/- 1.25 Volts

· "Bip1Volts' = +/- 1 Volts

· "BipPt625Volts" = +/- 0.625 Volts

· "BipPt5Volts" = +/- 0.5 Volts

· "BipPt25Volts" = +/- 0.25 Volts

· "BipPt2Volts" = +/- 0.20 Volts

· "BipPt1Volts" = +/- 0.10 Volts

· "BipPt05Volts" = +/- 0.05 Volts

· "BipPt01Volts" = +/- 0.01 Volts

· "BipPt005Volts" = +/- 0.005 Volts

· "Bip1Pt67Volts" = +/- 1.67 Volts

· "Uni10Volts" = 0 - 10 Volts

· "Uni5Volts" = 0 - 5 Volts

· "Uni2Pt5Volts" = 0 - 2.5 Volts

· "Uni1Volts" = 0 - 1 Volts

· "UniPt5Volts" = 0 - 0.5 Volts

· "UniPt25Volts" = 0 - 0.25 Volts

· "UniPt2Volts" = 0 - 0.2 Volts

· "UniPt1Volts" = 0 - 0.1 Volts

· "UniPt01Volts" = 0 - 0.01 Volts

· "UniPt02Volts" = 0 - 0.02 Volts

· "UniPt05Volts" = 0 - 0.05 Volts





Return Parameters



Parameter

Variable Type

Description



$measurement

Float

The measurement in Volts computed by taking the raw output of the A/D convertor and comparing to the measurement range specified in the function call.





PMD_AnalogOut

Previous Top Next



* * *



PMD_AnalogOut

Usage:

PMD_AnalogOut($DeviceID,$Channel,$Range,$DACValue);

Description:

This function supports the PMD-1208LS Personal Measurement Device From Measurement Computing Corporation

This function writes an analog voltage to the D/A Convertor of the PMD-1208LS device. The $Range specifies the scaling for the A/D convertor (for the PMD-1208LS the A/D convertor only supports "Uni5Volts"). The $DACValue is an integer value between 0-1023 that specifies the value written to the A/D register.

For example:

PMD_AnalogOut(1,1,"Uni5Volts",1023); // Sets Channel 1 of Unit 1 to 5 volts

PMD_AnalogOut(1,1,"Uni5Volts",0); // Sets Channel 1 of Unit 1 to 0 volts

PMD_AnalogOut(1,1,"Uni5Volts",512); // Sets Channel 1 of Unit 1 to 2.5 volts

In the event of that the DAC value is set successfully the function returns a PASS result. In the event that a hardware problem occurs, a FAIL result is returned to the executive.

Function Arguments



Parameter

Variable Type

Description



$deviceNumber

Integer

The Board ID of the PMD-1208LS device



$Channel

Integer

The channel to for an analog measurement. For single ended measurements, 0-7 are valid values. For differential measurements 0-3 are valid values.



$Range

String

The measurement range for the D/A converter. For single-ended configuration, the only valid range is "Bip10Volts". For differential measurements, the valid values are:

· "Bip20Volts" = +/- 20 Volts

· "Bip10Volts" = +/- 10 Volts

· "Bip5Volts" = +/- 5 Volts

· "Bip4Volts" = +/- 4 Volts

· "Bip2Pt5Volts" = +/- 2.5 Volts

· "Bip2Volts" = +/- 2 Volts

· "Bip1Pt25Volts" = +/- 1.25 Volts

· "Bip2Volts" = +/- 2 Volts

· "Bip1Pt25Volts" = +/- 1.25 Volts

· "Bip1Volts' = +/- 1 Volts

· "BipPt625Volts" = +/- 0.625 Volts

· "BipPt5Volts" = +/- 0.5 Volts

· "BipPt25Volts" = +/- 0.25 Volts

· "BipPt2Volts" = +/- 0.20 Volts

· "BipPt1Volts" = +/- 0.10 Volts

· "BipPt05Volts" = +/- 0.05 Volts

· "BipPt01Volts" = +/- 0.01 Volts

· "BipPt005Volts" = +/- 0.005 Volts

· "Bip1Pt67Volts" = +/- 1.67 Volts

· "Uni10Volts" = 0 - 10 Volts

· "Uni5Volts" = 0 - 5 Volts

· "Uni2Pt5Volts" = 0 - 2.5 Volts

· "Uni1Volts" = 0 - 1 Volts

· "UniPt5Volts" = 0 - 0.5 Volts

· "UniPt25Volts" = 0 - 0.25 Volts

· "UniPt2Volts" = 0 - 0.2 Volts

· "UniPt1Volts" = 0 - 0.1 Volts

· "UniPt01Volts" = 0 - 0.01 Volts

· "UniPt02Volts" = 0 - 0.02 Volts

· "UniPt05Volts" = 0 - 0.05 Volts



$DACValue

Integer

The integer value to set the D/A output register. Valid values are 0-1023





Return Parameters



Parameter

Variable Type

Description



None





PMD_ConfigDigitalPort

Previous Top Next



* * *



PMD_ConfigDigitalPort

Usage:

PMD_ConfigDigitalPort($DeviceID,$Port,$Direction);

Description:

This function supports the PMD-1208LS Personal Measurement Device From Measurement Computing Corporation

This function configures the specified DIO port direction for the PMD-1208LS measurement device. In the event of a successful configuration, a PASS result is returned. Otherwise a FAIL result is generated.

Function Arguments



Parameter

Variable Type

Description



$deviceNumber

Integer

The Board ID of the PMD-1208LS device



$Port

Integer

The DIO Port to Configure



$Direction

String

The direction of the DIO port. Allowable Values are:

· "INPUT"

· "OUTPUT"





Return Parameters



Parameter

Variable Type

Description



None





PMD_DIOBitRead

Previous Top Next



* * *



PMD_DIOBitRead

Usage:

$value = PMD_DIOBitRead($DeviceID,$Port,$BitNumber);

Description:

This function supports the PMD-1208LS Personal Measurement Device From Measurement Computing Corporation

This function reads the present value of a particular bit on the DIO Port from the PMD-1208LS device.

Before reading a value from the DIO port bit, it first must be configured as an INPUT port using the PMD_DIOConfigDigitalPort function. In the event that a value is successfully read from the device a PASS result is generated. Otherwise a FAIL result is returned to the executive.

Function Arguments



Parameter

Variable Type

Description



$deviceNumber

Integer

The Board ID of the PMD-1208LS device



$Port

Integer

The DIO Port to Write



$BitNumber

Integer

The particular bit of a port to read (valid values are 0-7)





Return Parameters



Parameter

Variable Type

Description



$value

Integer

The integer value of the DIO Port Bit requested. Return values are 0 or 1.





PMD_DIOBitWrite

Previous Top Next



* * *



PMD_DIOBitWrite

Usage:

PMD_DIOBitWrite($DeviceID,$Port,$BitNumber,$value);

Description:

This function supports the PMD-1208LS Personal Measurement Device From Measurement Computing Corporation

This function writes the supplied value to the specified DIO Port and Bit Number. Before writing a value to the DIO port, it first must be configured as an OUTPUT port using the PMD_DIOConfigDigitalPort function. In the event that a value is successfully written to the device a PASS result is generated. Otherwise a FAIL result is returned to the executive.

Function Arguments



Parameter

Variable Type

Description



$deviceNumber

Integer

The Board ID of the PMD-1208LS device



$Port

Integer

The DIO Port to Write



$BitNumber

Integer

The Bit Number of the DIO Port to Write. Valid Values are 0-7.



$value

Integer

A integer value indicating the value to write to the port and bit number. Valid values are 0 or 1.





Return Parameters



Parameter

Variable Type

Description



None





PMD_DIOPortRead

Previous Top Next



* * *



PMD_DIOPortRead

Usage:

$value = PMD_DIOPortRead($DeviceID,$Port);

Description:

This function supports the PMD-1208LS Personal Measurement Device From Measurement Computing Corporation

This function reads the present value of a DIO Port from the PMD-1208LS device.

Before reading a value from the DIO port, it first must be configured as an INPUT port using the PMD_DIOConfigDigitalPort function. In the event that a value is successfully read from the device a PASS result is generated. Otherwise a FAIL result is returned to the executive.

Function Arguments



Parameter

Variable Type

Description



$deviceNumber

Integer

The Board ID of the PMD-1208LS device



$Port

Integer

The DIO Port to Write





Return Parameters



Parameter

Variable Type

Description



$value

Integer

The integer value of the DIO Port. Return values are 0-255.





PMD_DIOPortWrite

Previous Top Next



* * *



PMD_DIOPortWrite

Usage:

PMD_DIOPortWrite($DeviceID,$Port,$value);

Description:

This function supports the PMD-1208LS Personal Measurement Device From Measurement Computing Corporation

This function writes the supplied value to the specified DIO Port. Before writing a value to the DIO port, it first must be configured as an OUTPUT port using the PMD_DIOConfigDigitalPort function. In the event that a value is successfully written to the device a PASS result is generated. Otherwise a FAIL result is returned to the executive.

Function Arguments



Parameter

Variable Type

Description



$deviceNumber

Integer

The Board ID of the PMD-1208LS device



$Port

Integer

The DIO Port to Write



$value

String

A hexidecimal string indicating the value to write to the port. Valid values are "00" to "FF"





Return Parameters



Parameter

Variable Type

Description



None





PMD_FlashLED

Previous Top Next



* * *



PMD_FlashLED

Usage:

PMD_FlashLED($DeviceID);

Description:

This function supports the PMD-1208LS Personal Measurement Device From Measurement Computing Corporation

This function flashes the LED of the PMD Device. This can be useful for determining which device is hooked up to a particular USB port when multiple devices are used. In the event of successful communication with the device, a PASS result is returned. In the event of unsuccessful communication, a FAIL result is returned.

Function Arguments



Parameter

Variable Type

Description



$deviceNumber

Integer

The Board ID of the PMD-1208LS device





Return Parameters



Parameter

Variable Type

Description



None





MCC DIO-96 Port Mapping

Previous Top Next



* * *



The following chart illustrates how the measurement computing DIO-96 cards physical ports map to their corresponding software ID's.



Bit #

Port Description

Software Port

Port Bit



0

(Group 0) Port A0 A

1

0



1

(Group 0) Port A1 A

1

1



2

(Group 0) Port A2 A

1

2



3

(Group 0) Port A3 A

1

3



4

(Group 0) Port A4 A

1

4



5

(Group 0) Port A5 A

1

5



6

(Group 0) Port A6 A

1

6



7

(Group 0) Port A7 A

1

7



8

(Group 0) Port B0 A

2

0



9

(Group 0) Port B1 A

2

1



10

(Group 0) Port B2 A

2

2



11

(Group 0) Port B3 A

2

3



12

(Group 0) Port B4 A

2

4



13

(Group 0) Port B5 A

2

5



14

(Group 0) Port B6 A

2

6



15

(Group 0) Port B7 A

2

7



16

(Group 0) Port C0 A

3

0



17

(Group 0) Port C1 A

3

1



18

(Group 0) Port C2 A

3

2



19

(Group 0) Port C3 A

3

3



20

(Group 0) Port C4 A

4

0



21

(Group 0) Port C5 A

4

1



22

(Group 0) Port C6 A

4

2



23

(Group 0) Port C7 A

4

3



24

(Group 1) Port A0 B

5

0



25

(Group 1) Port A1 B

5

1



26

(Group 1) Port A2 B

5

2



27

(Group 1) Port A3 B

5

3



28

(Group 1) Port A4 B

5

4



29

(Group 1) Port A5 B

5

5



30

(Group 1) Port A6 B

5

6



31

(Group 1) Port A7 B

5

7



32

(Group 1) Port B0 B

6

0



33

(Group 1) Port B1 B

6

1



34

(Group 1) Port B2 B

6

2



35

(Group 1) Port B3 B

6

3



36

(Group 1) Port B4 B

6

4



37

(Group 1) Port B5 B

6

5



38

(Group 1) Port B6 B

6

6



39

(Group 1) Port B7 B

6

7



40

(Group 1) Port C0 B

7

0



41

(Group 1) Port C1 B

7

1



42

(Group 1) Port C2 B

7

2



43

(Group 1) Port C3 B

7

3



44

(Group 1) Port C4 B

8

0



45

(Group 1) Port C5 B

8

1



46

(Group 1) Port C6 B

8

2



47

(Group 1) Port C7 B

8

3



48

(Group 2) Port A0 C

9

0



49

(Group 2) Port A1 C

9

1



50

(Group 2) Port A2 C

9

2



51

(Group 2) Port A3 C

9

3



52

(Group 2) Port A4 C

9

4



53

(Group 2) Port A5 C

9

5



54

(Group 2) Port A6 C

9

6



55

(Group 2) Port A7 C

9

7



56

(Group 2) Port B0 C

10

0



57

(Group 2) Port B1 C

10

1



58

(Group 2) Port B2 C

10

2



59

(Group 2) Port B3 C

10

3



60

(Group 2) Port B4 C

10

4



61

(Group 2) Port B5 C

10

5



62

(Group 2) Port B6 C

10

6



63

(Group 2) Port B7 C

10

7



64

(Group 2) Port C0 C

11

0



65

(Group 2) Port C1 C

11

1



66

(Group 2) Port C2 C

11

2



67

(Group 2) Port C3 C

11

3



68

(Group 2) Port C4 C

12

0



69

(Group 2) Port C5 C

12

1



70

(Group 2) Port C6 C

12

2



71

(Group 2) Port C7 C

12

3



72

(Group 3) Port A0 D

13

0



73

(Group 3) Port A1 D

13

1



74

(Group 3) Port A2 D

13

2



75

(Group 3) Port A3 D

13

3



76

(Group 3) Port A4 D

13

4



77

(Group 3) Port A5 D

13

5



78

(Group 3) Port A6 D

13

6



79

(Group 3) Port A7 D

13

7



80

(Group 3) Port B0 D

14

0



81

(Group 3) Port B1 D

14

1



82

(Group 3) Port B2 D

14

2



83

(Group 3) Port B3 D

14

3



84

(Group 3) Port B4 D

14

4



85

(Group 3) Port B5 D

14

5



86

(Group 3) Port B6 D

14

6



87

(Group 3) Port B7 D

14

7



88

(Group 3) Port C0 D

15

0



89

(Group 3) Port C1 D

15

1



90

(Group 3) Port C2 D

15

2



91

(Group 3) Port C3 D

15

3



92

(Group 3) Port C4 D

16

0



93

(Group 3) Port C5 D

16

1



94

(Group 3) Port C6 D

16

2



95

(Group 3) Port C7 D

16

3





MC_AnalogMeasure

Previous Top Next



* * *



MC_AnalogMeasure

Usage:

$measurement = MC_AnalogMeasure($DeviceID,$Channel,$Range, $BitQuantity);

Description:

This function supports all Data Acquisition Devices From Measurement Computing Corporation

This function acquires an analog measurement from the D/A Convertor of the DAQ device. The raw value of the DA converter is automatically converted to a voltage measurement based on the range value supplied to the function. In the event of a successful measurement the function returns a PASS result. In the event that a hardware problem occurs, a FAIL result is returned to the executive.

Function Arguments



Parameter

Variable Type

Description



$deviceNumber

Integer

The Board ID of the DAQ device



$Channel

Integer

The channel to for an analog measurement.



$Range

String

The measurement range for the D/A converter. For single-ended configuration, the only valid range is "Bip10Volts". For differential measurements, the valid values are:

· "Bip20Volts" = +/- 20 Volts

· "Bip10Volts" = +/- 10 Volts

· "Bip5Volts" = +/- 5 Volts

· "Bip4Volts" = +/- 4 Volts

· "Bip2Pt5Volts" = +/- 2.5 Volts

· "Bip2Volts" = +/- 2 Volts

· "Bip1Pt25Volts" = +/- 1.25 Volts

· "Bip2Volts" = +/- 2 Volts

· "Bip1Pt25Volts" = +/- 1.25 Volts

· "Bip1Volts' = +/- 1 Volts

· "BipPt625Volts" = +/- 0.625 Volts

· "BipPt5Volts" = +/- 0.5 Volts

· "BipPt25Volts" = +/- 0.25 Volts

· "BipPt2Volts" = +/- 0.20 Volts

· "BipPt1Volts" = +/- 0.10 Volts

· "BipPt05Volts" = +/- 0.05 Volts

· "BipPt01Volts" = +/- 0.01 Volts

· "BipPt005Volts" = +/- 0.005 Volts

· "Bip1Pt67Volts" = +/- 1.67 Volts

· "Uni10Volts" = 0 - 10 Volts

· "Uni5Volts" = 0 - 5 Volts

· "Uni2Pt5Volts" = 0 - 2.5 Volts

· "Uni1Volts" = 0 - 1 Volts

· "UniPt5Volts" = 0 - 0.5 Volts

· "UniPt25Volts" = 0 - 0.25 Volts

· "UniPt2Volts" = 0 - 0.2 Volts

· "UniPt1Volts" = 0 - 0.1 Volts

· "UniPt01Volts" = 0 - 0.01 Volts

· "UniPt02Volts" = 0 - 0.02 Volts

· "UniPt05Volts" = 0 - 0.05 Volts



$BitQuantity

Integer

The Number of bits according to your board (8,12,14 or 16).





Return Parameters



Parameter

Variable Type

Description



$measurement

Float

The measurement in Volts computed by taking the raw output of the A/D convertor and comparing to the measurement range specified in the function call.





MC_AnalogOut

Previous Top Next



* * *



MC_AnalogOut

Usage:

MC_AnalogOut($DeviceID,$Channel,$Range,$DACValue);

Description:

This function supports all Data Acquisition Devices From Measurement Computing Corporation

This function writes an analog voltage to the D/A Convertor of the DAQ device. The $Range specifies the scaling for the A/D convertor. The $DACValue is an integer value between 0-1023 that specifies the value written to the A/D register.

For example:

MC_AnalogOut(1,1,"Uni5Volts",1023); // Sets Channel 1 of Unit 1 to 5 volts

MC_AnalogOut(1,1,"Uni5Volts",0); // Sets Channel 1 of Unit 1 to 0 volts

MC_AnalogOut(1,1,"Uni5Volts",512); // Sets Channel 1 of Unit 1 to 2.5 volts

In the event of that the DAC value is set successfully the function returns a PASS result. In the event that a hardware problem occurs, a FAIL result is returned to the executive.

Function Arguments



Parameter

Variable Type

Description



$deviceNumber

Integer

The Board ID of the DAQ device



$Channel

Integer

The channel to for an analog measurement.



$Range

String

The measurement range for the D/A converter. For single-ended configuration, the only valid range is "Bip10Volts". For differential measurements, the valid values are:

· "Bip20Volts" = +/- 20 Volts

· "Bip10Volts" = +/- 10 Volts

· "Bip5Volts" = +/- 5 Volts

· "Bip4Volts" = +/- 4 Volts

· "Bip2Pt5Volts" = +/- 2.5 Volts

· "Bip2Volts" = +/- 2 Volts

· "Bip1Pt25Volts" = +/- 1.25 Volts

· "Bip2Volts" = +/- 2 Volts

· "Bip1Pt25Volts" = +/- 1.25 Volts

· "Bip1Volts' = +/- 1 Volts

· "BipPt625Volts" = +/- 0.625 Volts

· "BipPt5Volts" = +/- 0.5 Volts

· "BipPt25Volts" = +/- 0.25 Volts

· "BipPt2Volts" = +/- 0.20 Volts

· "BipPt1Volts" = +/- 0.10 Volts

· "BipPt05Volts" = +/- 0.05 Volts

· "BipPt01Volts" = +/- 0.01 Volts

· "BipPt005Volts" = +/- 0.005 Volts

· "Bip1Pt67Volts" = +/- 1.67 Volts

· "Uni10Volts" = 0 - 10 Volts

· "Uni5Volts" = 0 - 5 Volts

· "Uni2Pt5Volts" = 0 - 2.5 Volts

· "Uni1Volts" = 0 - 1 Volts

· "UniPt5Volts" = 0 - 0.5 Volts

· "UniPt25Volts" = 0 - 0.25 Volts

· "UniPt2Volts" = 0 - 0.2 Volts

· "UniPt1Volts" = 0 - 0.1 Volts

· "UniPt01Volts" = 0 - 0.01 Volts

· "UniPt02Volts" = 0 - 0.02 Volts

· "UniPt05Volts" = 0 - 0.05 Volts



$DACValue

Integer

The integer value to set the D/A output register. Valid values are 0-1023





Return Parameters



Parameter

Variable Type

Description



None





MC_AnalogOutDC

Previous Top Next



* * *



MC_AnalogOutDC

Usage:

MC_AnalogOutDC($DeviceID,$Channel,$Range,$DCValue);

Description:

This function writes an analog voltage to the D/A Convertor of the DAQ device. The $Range specifies the scaling for the A/D convertor. The $DCValue is the wanted DC output.

For example:

MC_AnalogOutDC(1,1,"Bip10Volts","5,2"); // Sets Channel 1 of Unit 1 to 5,2 volts

MC_AnalogOutDC(1,1,"Bip10Volts","0"); // Sets Channel 1 of Unit 1 to 0 volts

MC_AnalogOutDC(1,1,"Bip10Volts","-3"); // Sets Channel 1 of Unit 1 to -3 volts

In the event of that the DAC value is set successfully the function returns a PASS result. In the event that a hardware problem occurs, a FAIL result is returned to the executive.

Function Arguments



Parameter

Variable Type

Description



$deviceNumber

Integer

The Board ID of the DAQ device



$Channel

Integer

The channel to for an analog measurement.



$Range

String

The measurement range for the D/A converter. For single-ended configuration, the only valid range is "Bip10Volts". For differential measurements, the valid values are:

· "Bip20Volts" = +/- 20 Volts

· "Bip10Volts" = +/- 10 Volts

· "Bip5Volts" = +/- 5 Volts

· "Bip4Volts" = +/- 4 Volts

· "Bip2Pt5Volts" = +/- 2.5 Volts

· "Bip2Volts" = +/- 2 Volts

· "Bip1Pt25Volts" = +/- 1.25 Volts

· "Bip2Volts" = +/- 2 Volts

· "Bip1Pt25Volts" = +/- 1.25 Volts

· "Bip1Volts' = +/- 1 Volts

· "BipPt625Volts" = +/- 0.625 Volts

· "BipPt5Volts" = +/- 0.5 Volts

· "BipPt25Volts" = +/- 0.25 Volts

· "BipPt2Volts" = +/- 0.20 Volts

· "BipPt1Volts" = +/- 0.10 Volts

· "BipPt05Volts" = +/- 0.05 Volts

· "BipPt01Volts" = +/- 0.01 Volts

· "BipPt005Volts" = +/- 0.005 Volts

· "Bip1Pt67Volts" = +/- 1.67 Volts

· "Uni10Volts" = 0 - 10 Volts

· "Uni5Volts" = 0 - 5 Volts

· "Uni2Pt5Volts" = 0 - 2.5 Volts

· "Uni1Volts" = 0 - 1 Volts

· "UniPt5Volts" = 0 - 0.5 Volts

· "UniPt25Volts" = 0 - 0.25 Volts

· "UniPt2Volts" = 0 - 0.2 Volts

· "UniPt1Volts" = 0 - 0.1 Volts

· "UniPt01Volts" = 0 - 0.01 Volts

· "UniPt02Volts" = 0 - 0.02 Volts

· "UniPt05Volts" = 0 - 0.05 Volts



$DCValue

String

The value to set the D/A output.





Return Parameters



Parameter

Variable Type

Description



None





MC_AnalogScanInput

Previous Top Next



* * *



MC_AnalogScanInput

Usage:

($RMS,$ACRMS,$TT,$Mean) = MC_AnalogScanInput($DeviceID,$Channel,$Range,$qntBit,$scanrate,$nbrpoints);



Description:

This function takes a number of samples from a channel, and calculates the RMS,ACRMS,PTP and Mean value. This function can be used on DC measurements and on sine wave signals.

Remark:

This function has been written for and tested with a PCI DAS6031 board.

It should work with other boards within the same family

For example:

($RMS,$ACRMS,$TT,$Mean) = MC_AnalogScanInput(1,7,"Bip10Volts",16,320,600);

In the event of that the scan was successfully the function returns a PASS result and all of the calculated values. In the event that a hardware problem occurs, a FAIL result is returned to the executive.

Function Arguments



Parameter

Variable Type

Description



$DeviceID

Integer

The Board ID of the DAQ device



$Channel

Integer

The channel to for an analog measurement.



$Range

String

The measurement range for the D/A converter. For single-ended configuration, the only valid range is "Bip10Volts". For differential measurements, the valid values are:

· "Bip20Volts" = +/- 20 Volts

· "Bip10Volts" = +/- 10 Volts

· "Bip5Volts" = +/- 5 Volts

· "Bip4Volts" = +/- 4 Volts

· "Bip2Pt5Volts" = +/- 2.5 Volts

· "Bip2Volts" = +/- 2 Volts

· "Bip1Pt25Volts" = +/- 1.25 Volts

· "Bip2Volts" = +/- 2 Volts

· "Bip1Pt25Volts" = +/- 1.25 Volts

· "Bip1Volts' = +/- 1 Volts

· "BipPt625Volts" = +/- 0.625 Volts

· "BipPt5Volts" = +/- 0.5 Volts

· "BipPt25Volts" = +/- 0.25 Volts

· "BipPt2Volts" = +/- 0.20 Volts

· "BipPt1Volts" = +/- 0.10 Volts

· "BipPt05Volts" = +/- 0.05 Volts

· "BipPt01Volts" = +/- 0.01 Volts

· "BipPt005Volts" = +/- 0.005 Volts

· "Bip1Pt67Volts" = +/- 1.67 Volts

· "Uni10Volts" = 0 - 10 Volts

· "Uni5Volts" = 0 - 5 Volts

· "Uni2Pt5Volts" = 0 - 2.5 Volts

· "Uni1Volts" = 0 - 1 Volts

· "UniPt5Volts" = 0 - 0.5 Volts

· "UniPt25Volts" = 0 - 0.25 Volts

· "UniPt2Volts" = 0 - 0.2 Volts

· "UniPt1Volts" = 0 - 0.1 Volts

· "UniPt01Volts" = 0 - 0.01 Volts

· "UniPt02Volts" = 0 - 0.02 Volts

· "UniPt05Volts" = 0 - 0.05 Volts



$qntBit

Integer

The number of bits of the board:8,11,12 and 16 allowed.



$scanrate

Integer

The rate of the samples to take.Refer to board specs



$nbrpoints

Integer

How many samples should be taken on the channel.Refer to board specs





Return Parameters



Parameter

Variable Type

Description



$RMS

Float

RMS over the samples taken



$ACRMS

Float

ACRMS over the samples taken



$TT

Float

Top Top value over the samples taken



$Mean

Float

Average value over the samples taken





MC_ConfigDigitalBit

Previous Top Next



* * *



MC_ConfigDigitalBit

Usage:

MC_ConfigDigitalBit($DeviceID,$Port, $Bit, $Direction);

Description:

Please See the linked spreadsheet which explains the Measurement computing DIO port mapping: MCC DIO-96 Port Mapping.

In case you use a PCI multi IO A/D D/A with an AuxPort: example PCI-DAS6031, then you can simple select the Port to be 0

This function is NOT supported by 8255 type DIO ports. Refer to the board-specific information for details.

This function configures the specified DIO bit direction for Measurement Computing Data Acquisition devices. Only works for ports with individually configurable bits; see MC_ConfigDigitalPort for 8255 type DIO ports. In the event of a successful configuration, a PASS result is returned. Otherwise a FAIL result is generated.



Function arguments



Parameter

Variable Type

Description



$DeviceID

Integer

The Board ID of the Measurement Computing Device



$Port

Integer

The DIO Port to Configure



$Bit

Integer

The DIO Bit to Configure



$Direction

String

The direction of the DIO port; Allowable values are:

· "INPUT"

· "OUTPUT"





Return parameters



Parameter

Variable Type

Description



None





MC_ConfigDigitalBitBool

Previous Top Next



* * *



MC_ConfigDigitalBitBool



Usage:

$success = MC_ConfigDigitalBitBool($deviceNumber, $portNumber, $bitNumber, $direction);





Description:

This function will configure the specified bit on the DIO port direction for a Measurement Computing Data Acquisition device.





Remarks:

This function will not fail a test step. Instead it will return pass/fail through the $success boolean.

Please see MCC DIO-96 Port Mapping for the port mapping.

This function is not supported by 8255 type DIO ports. Refer to the board-specific information for details.

Function arguments



Parameter

Variable Type

Description



$deviceNumber

Integer

The Board ID of the Measurement Computing device.



$portNumber

Integer

The DIO port to configure.



$bitNumber

Integer

The number of the bit on the DIO port to configure.



$direction

String

The direction of the DIO port. Valid entries are:

· INPUT

· OUTPUT





Return parameters



Parameter

Variable Type

Description



$success

Boolean

True if the configuration was successful and False otherwise.





Example(s):

// Configure a bit for output

$deviceNumber = 7;

$portNumber = 0;

$bitNumber = 3;

$direction = "OUTPUT";





$success = MC_ConfigDigitalBitBool($deviceNumber, $portNumber, $bitNumber, $direction);





MC_ConfigDigitalPort

Previous Top Next



* * *



MC_ConfigDigitalPort

Usage:

MC_ConfigDigitalPort($DeviceID,$Port,$Direction);

Description:

Please See the linked spreadsheet which explains the Measurement computing DIO port mapping: MCDIOMapping.xls

In case you use a PCI multi IO A/D D/A with an AuxPort: example PCI-DAS6031, then you can simple select the Port to be 0

This function supports all Data Acquisition Products From Measurement Computing Corporation

This function configures the specified DIO port direction for Measurement Computing Data Acquisition device. In the event of a successful configuration, a PASS result is returned. Otherwise a FAIL result is generated.

Function Arguments



Parameter

Variable Type

Description



$deviceNumber

Integer

The Board ID of the Measurement Computing Device



$Port

Integer

The DIO Port to Configure



$Direction

String

The direction of the DIO port. Allowable Values are:

"INPUT"

"OUTPUT"





Return Parameters



Parameter

Variable Type

Description



None





MC_ConfigDigitalPortBool

Previous Top Next



* * *



MC_ConfigDigitalPortBool



Usage:

$success = MC_ConfigDigitalPortBool($deviceNumber, $portNumber, $direction);





Description:

This function will configure the specified DIO port direction for a Measurement Computing Data Acquisition device.





Remarks:

This function will not fail a test step. Instead it will return pass/fail through the $success boolean.

Please see MCC DIO-96 Port Mapping for the port mapping.

If you have a PCI multi IO A/D D/A with an AuxPort (like the PCI-DAS6031), you can only select Port 0.

Function arguments



Parameter

Variable Type

Description



$deviceNumber

Integer

The Board ID of the Measurement Computing device.



$portNumber

Integer

The DIO port to configure.



$direction

String

The direction of the DIO port. Valid entries are:

· INPUT

· OUTPUT





Return parameters



Parameter

Variable Type

Description



$success

Boolean

True if the configuration was successful and False otherwise.





Example(s):

// Configure a port for output

$deviceNumber = 7;

$portNumber = 0;

$direction = "OUTPUT";





$success = MC_ConfigDigitalPortBool($deviceNumber, $portNumber, $direction);





MC_DIOBitRead

Previous Top Next



* * *



MC_DIOBitRead

Usage:

$value = MC_DIOBitRead($DeviceID,$Port,$BitNumber);

Description:

This function supports all Data Acquisition cards From Measurement Computing Corporation

Please See the linked spreadsheet which explains the Measurement computing DIO port mapping: MCDIOMapping.xls



This function reads the present value of a particular bit on the DIO Port from the DAQ device.

Before reading a value from the DIO port bit, it first must be configured as an INPUT port using the MC_ConfigDigitalBit function. In the event that a value is successfully read from the device a PASS result is generated. Otherwise a FAIL result is returned to the executive.

Function Arguments



Parameter

Variable Type

Description



$deviceNumber

Integer

The Board ID of the DAQ device



$Port

Integer

The DIO Port to Write



$BitNumber

Integer

The particular bit of a port to read (valid values are 0-7)





Return Parameters



Parameter

Variable Type

Description



$value

Integer

The integer value of the DIO Port Bit requested. Return values are 0 or 1.





MC_DIOBitReadBool

Previous Top Next



* * *



MC_DIOBitReadBool



Usage:

($value, $success) = MC_DIOBitReadBool($deviceNumber, $portNumber, $bitNumber);





Description:

This function will read the present value of one bit on the DIO port of the specified DAQ device.





Remarks:

This function will not fail a test step. Instead it will return pass/fail through the $success boolean.

Please see MCC DIO-96 Port Mapping for the port mapping.

Before reading the bit must be configured for input using MC_ConfigDigitalBit or MC_ConfigDigitalBitBool.

Function arguments



Parameter

Variable Type

Description



$deviceNumber

Integer

The Board ID of the Measurement Computing device.



$portNumber

Integer

The DIO port to read from.



$bitNumber

Integer

The number of the bit on the DIO port to read from.





Return parameters



Parameter

Variable Type

Description



$value

Integer

The integer value representing the bit value. 0 = low and 1 = high.



$success

Boolean

True if the reading was successful and False otherwise.





Example(s):

// Configure a bit for input.

$deviceNumber = 7;

$portNumber = 0;

$bitNumber = 3;

$direction = "INPUT";





$success = MC_ConfigDigitalBitBool($deviceNumber, $portNumber, $bitNumber, $direction);





// Read the bit.

($value, $success) = MC_DIOBitReadBool($deviceNumber, $portNumber, $bitNumber);





MC_DIOBitWrite

Previous Top Next



* * *



MC_DIOBitWrite

Usage:

MC_DIOBitWrite($DeviceID,$Port,$BitNumber,$value);

Description:

This function supports all DAQ Devices From Measurement Computing Corporation

Please See the linked spreadsheet which explains the Measurement computing DIO port mapping: MCDIOMapping.xls

This function writes the supplied value to the specified DIO Port and Bit Number. Before writing a value to the DIO port, it first must be configured as an OUTPUT port using the MC_ConfigDigitalBit function. In the event that a value is successfully written to the device a PASS result is generated. Otherwise a FAIL result is returned to the executive.

Function Arguments



Parameter

Variable Type

Description



$deviceNumber

Integer

The Board ID of the DAQ device



$Port

Integer

The DIO Port to Write



$BitNumber

Integer

The Bit Number of the DIO Port to Write. Valid Values are 0-7.



$value

Integer

A integer value indicating the value to write to the port and bit number. Valid values are 0 or 1.





Return Parameters



Parameter

Variable Type

Description



None





MC_DIOBitWriteBool

Previous Top Next



* * *



MC_DIOBitWriteBool



Usage:

$success = MC_DIOBitWriteBool($deviceNumber, $portNumber, $bitNumber, $value);





Description:

This function will write a value to one bit on the DIO port of the specified DAQ device.





Remarks:

This function will not fail a test step. Instead it will return pass/fail through the $success boolean.

Please see MCC DIO-96 Port Mapping for the port mapping.

Before writing the bit must be configured for output using MC_ConfigDigitalBit or MC_ConfigDigitalBitBool.

Function arguments



Parameter

Variable Type

Description



$deviceNumber

Integer

The Board ID of the Measurement Computing device.



$portNumber

Integer

The DIO port to write to.



$bitNumber

Integer

The number of the bit on the DIO port to write to.



$value

Integer

The value representing the state to set the bit to. 0 to set the bit low and 1 to set the bit high.





Return parameters



Parameter

Variable Type

Description



$success

Boolean

True if the writing was successful and False otherwise.





Example(s):

// Configure a bit for output.

$deviceNumber = 7;

$portNumber = 0;

$bitNumber = 3;

$direction = "OUTPUT";





$success = MC_ConfigDigitalBitBool($deviceNumber, $portNumber, $bitNumber, $direction);





// Write the bit.

$value = 1;

$success = MC_DIOBitWriteBool($deviceNumber, $portNumber, $bitNumber, $value);





MC_DIOPortRead

Previous Top Next



* * *



MC_DIOPortRead

Usage:

$value = MC_DIOPortRead($DeviceID,$Port);

Description:

This function supports all Data Acqusition Devices From Measurement Computing Corporation.

Please See the linked spreadsheet which explains the Measurement computing DIO port mapping: MCDIOMapping.xls

This function reads the present value of a DIO Port from the device.

Before reading a value from the DIO port, it first must be configured as an INPUT port using the MC_ConfigDigitalPort function. In the event that a value is successfully read from the device a PASS result is generated. Otherwise a FAIL result is returned to the executive.

Function Arguments



Parameter

Variable Type

Description



$deviceNumber

Integer

The Board ID of the DAQ device



$Port

Integer

The DIO Port to Write





Return Parameters



Parameter

Variable Type

Description



$value

Integer

The integer value of the DIO Port. Return values are 0-255.





MC_DIOPortReadBool

Previous Top Next



* * *



MC_DIOPortReadBool



Usage:

($value, $success) = MC_DIOPotReadBool($deviceNumber, $portNumber);





Description:

This function will read the present value of one eight bit port of the specified DAQ device.





Remarks:

This function will not fail a test step. Instead it will return pass/fail through the $success boolean.

Please see MCC DIO-96 Port Mapping for the port mapping.

Before reading the port must be configured for input using MC_ConfigDigitalPort or MC_ConfigDigitalPortBool.

Function arguments



Parameter

Variable Type

Description



$deviceNumber

Integer

The Board ID of the Measurement Computing device.



$portNumber

Integer

The DIO port to read from.





Return parameters



Parameter

Variable Type

Description



$value

Integer

The integer value of the DIO port. Returns values between 0 and 255.



$success

Boolean

True if the reading was successful and False otherwise.





Example(s):

// Configure a port for input.

$deviceNumber = 7;

$portNumber = 0;

$direction = "INPUT";





$success = MC_ConfigDigitalPortBool($deviceNumber, $portNumber, $direction);





// Read the bit.

($value, $success) = MC_DIOPortReadBool($deviceNumber, $portNumber);





MC_DIOPortWrite

Previous Top Next



* * *



MC_DIOPortWrite

Usage:

MC_DIOPortWrite($DeviceID,$Port,$value);

Description:

This function supports all Data Acquisition Devices From Measurement Computing Corporation

Please See the linked spreadsheet which explains the Measurement computing DIO port mapping: MCDIOMapping.xls

In case you use a PCI multi IO A/D D/A with an AuxPort: example PCI-DAS6031, then you can simple select the Port to be 0

This function writes the supplied value to the specified DIO Port. Before writing a value to the DIO port, it first must be configured as an OUTPUT port using the MC_ConfigDigitalPort function. In the event that a value is successfully written to the device a PASS result is generated. Otherwise a FAIL result is returned to the executive.

Function Arguments



Parameter

Variable Type

Description



$deviceNumber

Integer

The Board ID of the DAQ device



$Port

Integer

The DIO Port to Write



$value

String

A hexidecimal string indicating the value to write to the port. Valid values are "00" to "FF"





Return Parameters



Parameter

Variable Type

Description



None





MC_DIOPortWriteBool

Previous Top Next



* * *



MC_DIOPortWriteBool



Usage:

$success = MC_DIOPortWriteBool($deviceNumber, $portNumber, $value);





Description:

This function will write a value to one port on the specified DAQ device.





Remarks:

This function will not fail a test step. Instead it will return pass/fail through the $success boolean.

Please see MCC DIO-96 Port Mapping for the port mapping.

Before writing the port must be configured for output using MC_ConfigDigitalPort or MC_ConfigDigitalPortBool.

Function arguments



Parameter

Variable Type

Description



$deviceNumber

Integer

The Board ID of the Measurement Computing device.



$portNumber

Integer

The DIO port to write to.



$value

Integer

The value to set the port to. Valid values are between 0 and 255.





Return parameters



Parameter

Variable Type

Description



$success

Boolean

True if the writing was successful and False otherwise.





Example(s):

// Configure a port for output.

$deviceNumber = 7;

$portNumber = 0;

$direction = "OUTPUT";





$success = MC_ConfigDigitalPortBool($deviceNumber, $portNumber, $direction);





// Write to the port.

$value = 67;

$success = MC_DIOPortWriteBool($deviceNumber, $portNumber, $value);





MC_Diff_or_Single

Previous Top Next



* * *



MC_Diff_or_Single

Usage:

MC_Diff_or_Single($DeviceID,$ChnQnt);

Description:

Sets the number of A/D channels on the board Check board specific info for valid numbers Note that this settings affects the single-ended/differential input mode of boards for which this setting is programmable.

In the event of a successful configuration, a PASS result is returned. Otherwise a FAIL result is generated.

Function Arguments



Parameter

Variable Type

Description



$DeviceID

Integer

The Board ID of the Measurement Computing Device



$ChnQnt

Integer

The number of A/D channels on the board to set





Return Parameters



Parameter

Variable Type

Description



None





NIDSA_ConfigSource

Previous Top Next



* * *



NIDSA_ConfigSource

Usage:

NIDSA_ConfigSource($DeviceID,$Frequency,$Amplitude);



Description:

This function will configure a sine output from the DSA card.

Remark:

This function has been written for and tested with a NI 4551 DSA board.

It should work with other boards within the same family

For example:

NIDSA_ConfigSource(1, 920.0, 0.500);





In the event of that the scan was successfully the function returns a PASS result and all of the calculated values. In the event that a hardware problem occurs, a FAIL result is returned to the executive.

Function Arguments



Parameter

Variable Type

Description



$DeviceID

Integer

The Board ID of the DAQ device



$Frequency

Double

The output frequency.



$Amplitude

Double

The output amplitude in volts peak to peak.





NIDSA_Init

Previous Top Next



* * *



NIDSA_Init

Usage:

NIDSA_Init($DeviceID);

Description:

This function initializes the DSA card.

Remark:

This function has been written for and tested with a NI 4551 DSA board.

It should work with other boards within the same family

For example:

NIDSA_Init(1);

In the event of that the scan was successfully the function returns a PASS result and all of the calculated values. In the event that a hardware problem occurs, a FAIL result is returned to the executive.

Function Arguments



Parameter

Variable Type

Description



$DeviceID

Integer

The Board ID of the DAQ device





NIDSA_MeasTHD

Previous Top Next



* * *



NIDSA_MeasTHD

Usage:

$Power=NIDSA_MeasTHD($DeviceID,$Channel,$DbUnits);

Description:

This function measures the Total Harmonic Distortion and returns the Fundamental frequency power level.

Remark:

This function has been written for and tested with a NI 4551 DSA board.

It should work with other boards within the same family

For example:

$Power = NIDSA_MeasTHD(1, 0, 1);

In the event of that the scan was successfully the function returns a PASS result and all of the calculated values. In the event that a hardware problem occurs, a FAIL result is returned to the executive.

Function Arguments



Parameter

Variable Type

Description



$DeviceID

Integer

The Board ID of the DAQ device



$Channel

Integer

The channel to for an analog measurement.



$DbUnits

Integer

Will power be measured in dB unit, 1 will set dB units on.





Return Parameters



Parameter

Variable Type

Description



$Power

Float

The measured power of the fundamental frequency





NI_DAQmx_CounterReadFreq

Previous Top Next



* * *



NI_DAQmx_CounterReadFreq

Usage:

$Results = NI_DAQmx_CounterReadFreq($CounterDeviceName, $Edge, $MinRange, $MaxRange, $Time,$Qnt,$TaskName);

Description:

This function requires NI-DAQmx 9.4 or later to be installed on the system.

This function measures a TTL signal (sine, square,saw ) and calculates its frequency. This function is used to measure higher frequencies using the internal timebase.

Remarks:

This function is tested with NI-PCI-6221, and NI-PCI-6625 This function checks if the user has used a correct parameter for $CounterDeviceName.

Method used: "Measure High frequencies with two counters . This method is mainly used for higher frequencies using two counter method. In this method, you route a pulse of known duration to the gate of a counter. This is internally generated with a second counter." You should only apply the signal to be measured onto the Source input of your selected counter.

Due to the chosen measurement method you should always take at least 2 measurements and ignore always the first one .

Result: Function Arguments



Parameter

Variable Type

Description



$CounterDeviceName

String

The NI DAQmx Device Name + CounterChannel you want to use.



$Edge

int

0=Falling 1 = Rising. Unknown results in falling



$MinRange

String

The minimum expected value.



$MaxRange

String

The maximum expected value.



$Time

String

The Time the measurement may take, the higher the more accuracy.





$Qnt

int

The number of readings to return



$TaskName

String

The name of the measurement task to be performed. Each NIDAQmx task that occurs in parallel should have a unique name. Jabil Test automatically appends the cell number to the supplied task name in the script to guarantee uniqueness when a test script is executed on multiple threads.





Return Parameters



Parameter

Variable Type

Description



$Result

Array

The measurements in Hz.





Examples:

$HelloTest = NI_DAQmx_CounterReadFreq("Dev2/ctr0",1,"10000","20000","0.5",2,"TaskName");

Measure: on counter 0 of device 2, Rising edge detection,10Khz min, 20Khz max, 0.5 seconds time, 2 values returned.

You can now use the following function to retreive your measurements

$Testme = ArrayGetValue($HelloTest,0,1); This will take the second element out of the array and return it





NI_DAQmx_CounterReadFreqPFIx

Previous Top Next



* * *



NI_DAQmx_CounterReadFreqPFIx



Usage:

$ResultsArray = NI_DAQmx_CounterReadFreqPFIx($CounterDeviceName, $Edge, $MinRange, $MaxRange, $Time, $Qnt, $PFIx, $TaskName);



Description:

This function measures a TTL signal and calculates its frequency. This function is used to measure higher frequencies using the internal timebase.



Remarks:

This function requires NI-DAQmx 9.4 or later to be installed on the system.

This function is tested with NI-PXI-6723. This function checks if the user has used a correct parameter for $CounterDeviceName.

Method used: "Measure High frequencies with two counters. This method is mainly used for higher frequencies using two counter method. In this method, you route a pulse of known duration to the gate of a counter. This is internally generated with a second counter." You should only apply the signal to be measured onto the Source input of your selected counter.

Due to the chosen measurement method you should always take at least 2 measurements and ignore the first one.

Function arguments



Parameter

Variable Type

Description



$CounterDeviceName

String

The NI-DAQmx Device Name including the name of the counter that will be used for pulse generation.



$Edge

Integer

The Edge the counter will trigger on.

0 = Falling (generates unknown results)

1 = Rising



$MinRange

String

The minimum expected value based on the DAQmx channel setting. Eg. if the device reads -10V to +10V, $MinRange = -10 (if there is no scaling applied to the channel), regardless of the what the measured signal levels are.



$MaxRange

String

The maximum expected value based on the DAQmx device setting.



$Time

String

The time the measurement may take, the higher - the more accuracy.



$Qnt

Integer

The number of readings to return.



$PFIx

String

The Counter channel used for the measurement.



$TaskName

String

The name of the measurement task to be performed. Each NIDAQmx task that occurs in parallel should have a unique name. Jabil Test automatically appends the cell number to the supplied task name in the script to guarantee uniqueness when a test script is executed on multiple threads.





Return parameters



Parameter

Variable Type

Description



$Result

Array

The measurements in Hz.





Example(s):

$CounterDeviceName = "PXI1Slot9/ctr0";

$Edge = 1; //rising edge

$MinRange = "0";

$MaxRange = "1000.0"; // Channel is scaled to 0 to 1000.

$Time = "5"; // 5 seconds

$Qnt = 2; // return 1 reading

$PFIx = "PFI0";





$ResultsArray = NI_DAQmx_CounterReadFreqPFIx($CounterDeviceName, $Edge, $MinRange, $MaxRange, $Time, $Qnt, $PFIx, "MyTask");





$Frequency = Array1DGetValue($ResultsArray, 1); // Ignore first reading





NI_DAQmx_CounterReadPulseWidth

Previous Top Next



* * *



NI_DAQmx_CounterReadPulseWidth



Usage:

$Result = NI_DAQmx_CounterReadPulseWidth($CounterName, $Edge, $MinRange, $MaxRange, $NumMeasure, $TaskName);



Description:

This function requires NI-DAQmx 9.4 or later to be installed on the system.



This function measures a TTL signal (sine, square,saw ) and returns the pulse width.





Remarks:

· This function was tested with: NI-6225 simulated DAQ.





· This function will return an number of measurements in an array. The first measurements may not be accurate and should be discarded.



Function arguments



Parameter

Variable Type

Description



$CounterName

String

The name of the counter on the DAQ card. Example: Dev2/ctr0



$Edge

String

The edge of the waveform to start measurements from.

Value: Rising, Falling



$MinRange

String

The minimum expected value.



$MaxRange

String

The maximum expected value.



$NumMeasure

Integer

The number of measurements to return.



$TaskName

String

The name of the measurement task to be performed. Each NI-DAQmx task that occurs in parallel should have a unique name. Jabil Test automatically appends the cell number to the supplied task name in the script to guarantee uniqueness when a test script is executed on multiple threads.





Return parameters



Parameter

Variable Type

Description



$Result

Array

The configured number of measurements in seconds.





Example(s):

// Build array to hold 3 results returned.

$Results = Array1DCreate("FLOAT", 3);

$CounterName = "Dev1/ctr0";

$Edge = "Rising";

$MinRange = "0.002";

$MaxRange = "0.020";

$NumMeasure = 3;

$TaskName = "PTrainWidth";





$Results = NI_DAQmx_CounterReadPulseWidth($CounterName, $Edge, $MinRange, $MaxRange, $NumMeasure, $TaskName);





NI_DAQmx_DeleteTask

Previous Top Next



* * *



NI_DAQmx_DeleteTask



Usage:

NI_DAQmx_DeleteTask($TaskName);





Description:





This function will delete a currently executing task across any NIDAQmx compatible DAQ device on the local system. If the requested task doesn't exist, the function will generate a failure. It's possible to retrieve a list of all currently executing tasks using the NI_DAQmx_ShowAllTasks script command.





This function requires NI-DAQmx 9.4 or later to be installed on the system.





Special Notes:

The majority of tasks created by single use functions such as NI_DAQmx_MeasureVoltageAC and similiar functions automatically dispose of the task after execution has completed.





Also, take note that Jabil Test automatically appends the cell number at the end of any created NIDAQmx tasks to ensure that task names are unique across test cells so that the script developer doesn't need to address this concern when developing multi-cell tests.

For instance, if a task name such as 'DoSomething' is created, on cell 1 the task would be named 'DoSomething1', and on cell 2 it would be named 'DoSomething2', etc.





Function arguments



Parameter

Variable Type

Description



$TaskName

String

The name of the NIDAQmx task to delete.





Return parameters



Parameter

Variable Type

Description



None





Usage Examples

NI_DAQmx_DeleteTask("MyTask1");





NI_DAQmx_GenerateSinusWave

Previous Top Next



* * *



NI_DAQmx_GenerateSinusWave



Usage:

NI_DAQmx_GenerateSinusWave($deviceName, $analogOutputChannel, $minimumRange, $maximumRange, $frequency, $cyclesPerBuffer, $samplesPerBuffer, $amplitude);



Description:

This function generates a sinusoidal wave on the selected analog output $analogOutputChannel of device $deviceName with the user defined settings. You only can generate a sinusoidal wave on 1 analog output at a time.

You can execute this function several times after each other, but when you use another output, the sinusoidal wave on the previous output will disappear.



Remarks:

This function requires NI-DAQmx 9.4 or later to be installed on the system.

This function was tested with NI-PCI-6221.

This function requires a DAQ device with internal memory and processing. Devices known to not work are the USB-6008 and USB-6009.



Function arguments



Parameter

Variable Type

Description



$deviceName

String

The NI-DAQmx device name you want to use. You can find this in the Measurement and Automation Explorer (MAX).



$analogOutputChannel

String

The analog output channel of the device where you want to have the sine wave.



$minimumRange

Float

The minimum value in volts that you expect to generate.



$maximumRange

Float

The maximum value of the generated sine wave.



$frequency

Float

The frequency of the generated sine wave.



$cyclesPerBuffer

Float

The number of cycles per sample.



$samplesPerBuffer

Float

The number of samples to generate.



$amplitude

Float

The peak to peak value of the generated sine wave.





Return parameters



Parameter

Variable Type

Description



None





Example:





// This example generates a sine wave of 2Vpkpk and a frequency of 1250Hz on Dev1/Ao0.

$device = "Dev1";

$aoChan = "ao0";

$minRange = -10.0;

$maxRange = 10.0;

$freq = 1250.0;

$cycles = 5.0;

$samples = 1000.0;

$amplitude = 2.0;

NI_DAQmx_GenerateSinusWave($device, $aoChan, $minRange, $maxRange, $freq, $cycles, $samples, $amplitude);





NI_DAQmx_GenerateSinusWaveWithOffset

Previous Top Next



* * *



NI_DAQmx_GenerateSinusWaveWithOffset



Usage:

NI_DAQmx_GenerateSinusWaveWithOffset($deviceName, $analogOutputChannel, $minimumRange, $maximumRange, $frequency, $cyclesPerBuffer, $samplesPerBuffer, $amplitude, $dcOffset);



Description:

This function generates a sinusoidal wave on the selected analog output $analogOutputChannel of device $deviceName with the user defined settings.





Remarks:

This function requires NI-DAQmx 9.4 or later to be installed on the system.

You only can generate a sinusoidal wave on 1 analog output at a time. You can execute this function several times after each other, but when you use another output, the sinusoidal wave on the previous output will disappear.

This function was tested with NI-PXI-6723.

This function requires a DAQ device with internal memory and processing. Devices known to not work are the USB-6008 and USB-6009.



Function arguments



Parameter

Variable Type

Description



$deviceName

String

The NI-DAQmx device name you want to use. You can find this in the Measurement and Automation Explorer (MAX).



$analogOutputChannel

String

The analog output channel of the device on which to generate the sine wave.



$minimumRange

Float

The minimum output value based on the DAQmx channel setting. Eg. if the device outputs 0V to +10V, $MinimumRange = 0 (if there is no scaling applied to the channel), regardless of the what the amplitude and offset levels are.



$maximumRange

Float

The maximum output value based on the DAQmx device setting.



$frequency

Float

The frequency of the generated sine wave.



$cyclesPerBuffer

Float

The number of cycles per sample.



$samplesPerBuffer

Float

The number of samples to generate.



$amplitude

Float

The peak-to-peak amplitude of the sine wave.



$dcOffset

Float

The DC offset value of the generated sine wave.





Return parameters



Parameter

Variable Type

Description



None





Example:





// This example generates a sine wave with a frequency of 5000Hz on PXI1, Slot 13, ao0.

$device = "PXI1Slot13";

$aoChan = "ao0";

$minRange = -10.0;

$maxRange = 10.0; // Channel scaled to -10 to +10.

$freq = 5000.0; // 5 kHz.

$cycles = 5.0; // 5 cycles per buffer.

$samples = 10.0;

$amplit = 4.5;

$dcOffset = 0.0;

NI_DAQmx_GenerateSinusWaveWithOffset($device, $aoChan, $minRange, $maxRange, $freq, $cycles, $samples, $amplit, $dcOffset);





NI_DAQmx_GenerateSquareWaveWithOffset

Previous Top Next



* * *



NI_DAQmx_GenerateSquareWaveWithOffset



Usage:

NI_DAQmx_GenerateSquareWaveWithOffset($deviceName, $analogOutputChannel, $minimumRange, $maximumRange, $frequency, $cyclesPerBuffer, $samplesPerBuffer, $amplitude, $dcOffset);



Description:

This function generates a square wave on the selected analog output $analogOutputChannel of device $deviceName with the user defined settings.





Remarks:

This function requires NI-DAQmx 9.4 or later to be installed on the system.

You only can generate a square wave on 1 analog output at a time. You can execute this function several times after each other, but when you use another output, the square wave on the previous output will disappear.

This function was tested with NI-PXI-6723.

This function requires a DAQ device with internal memory and processing. Devices known to not work are the USB-6008 and USB-6009.



Function arguments



Parameter

Variable Type

Description



$deviceName

String

The NI-DAQmx device name you want to use. You can find this in the Measurement and Automation Explorer (MAX).



$analogOutputChannel

String

The analog output channel of the device on which to generate the square wave.



$minimumRange

Float

The minimum output value based on the DAQmx channel setting. Eg. if the device outputs 0V to +10V, $MinimumRange = 0 (if there is no scaling applied to the channel), regardless of the what the amplitude and offset levels are.



$maximumRange

Float

The maximum output value based on the DAQmx device setting.



$frequency

Float

The frequency of the generated square wave.



$cyclesPerBuffer

Float

The number of cycles per sample.



$samplesPerBuffer

Float

The number of samples to generate.



$amplitude

Float

The peak-to-peak amplitude of the generated square wave.



$dcOffset

Float

The DC offset value of the generated square wave.





Return parameters



Parameter

Variable Type

Description



None





Example:





// This example generates a square wave with a frequency of 5000Hz on PXI1, Slot 13, ao0.

$device = "PXI1Slot13";

$aoChan = "ao0";

$minRange = -10.0;

$maxRange = 10.0; // Channel scaled to -10 to +10.

$freq = 5000.0; // 5 kHz.

$cycles = 5.0; // 5 cycles per buffer.

$samples = 10.0;

$amplit = 4.5;

$dcOffset = 0.0;

NI_DAQmx_GenerateSquareWaveWithOffset($device, $aoChan, $minRange, $maxRange, $freq, $cycles, $samples, $smplit, $dcOffset);





NI_DAQmx_Generate_Dig_Pulse_Train

Previous Top Next



* * *



NI_DAQmx_Generate_Dig_Pulse_Train

Usage:

NI_DAQmx_Generate_Dig_Pulse_Train($DeviceName, $Counter, $Frequency, $DutyCycle, $IdleState, $FirstPulseDelay);



Description:

This function requires NI-DAQmx 9.4 or later to be installed on the system.

This function generates a digital pulse train on the counter output $Counter of device $DeviceName with a frequency $Frequency and duty cycle $DutyCycle. $IdleState specifies the resting state of the output terminal.





Remarks:



This function is tested with NI-PCI-6221 and NI-PCI-MIO-16E-4

This function checks if the user has used a correct parameter for $DeviceName

This function checks if the user has used a correct parameter for $Channel

This function checks if the user has used a correct parameter for $InputConfig





Result:

NI_DAQmx_Generate_Dig_Pulse_Train($DeviceName, $Counter, $Frequency, $DutyCycle, $IdleState, $FirstPulseDelay);

Function Arguments



Parameter

Variable Type

Description



$DeviceName

String

The NI DAQmx device name you want to use.



$Counter

String

The NI DAQmx counter channel where the pulse train will appear.



$Frequency

Float

The frequency of the pulse to generate.



$DutyCycle

Float

The width of the pulse divided by period. NI-DAQmx uses this ratio, combined with frequency, to determine both pulse width and the interval between pulses.



$IdleState

Integer

The resting state of the output terminal.



$FirstPulseDelay

Float

The amount of time in seconds to wait before generating the first pulse.





Return Parameters



Parameter

Variable Type

Description



None





Example:

NI_DAQmx_Generate_Dig_Pulse_Train("Dev2", "ctr0", 100.0, 0.45, 0, 0.0);

This example generates a digital pulse train on "Dev2/ctr0" with a frequency of 100 Hz and duty cycle of 45%. The idle state is low and the initial delay 0 sec.





NI_DAQmx_Initialize

Previous Top Next



* * *



NI_DAQmx_Initialize

Usage:

NI_DAQmx_Initialize();

Description:

This function requires NI-DAQmx 9.4 or later to be installed on the system.

This function initialize all NI-DAQmx devices present in the system .

Remarks:

This function is tested with NI-PCI-6221 and NI-PCI-MIO-16E-4

The initializing takes some time.

Result:

NI_DAQmx_Initialize();

Function Arguments



Parameter

Variable Type

Description



None





Return Parameters



Parameter

Variable Type

Description



None





NI_DAQmx_MeasureCurrentDC

Previous Top Next



* * *



NI_DAQmx_MeasureCurrentDC



Usage:

$current = NI_DAQmx_MeasureCurrentDC($device, $channel, $minRange, $maxRange, $samples, $sampleRate, $configuration, $taskName);



Description:

This function returns an average current from one channel of a DAQmx system.



Remarks:

This function requires NI_DAQmx 9.0+ to be loaded on the computer.

Function arguments



Parameter

Variable Type

Description



$device

String

The name of the device to read the current from (as shown in NI-MAX).



$channel

String

The name of the channel to read the current from (as shown in NI-MAX).



$minRange

Float

The lowest value expected in the measured current.



$maxRange

Float

The highest value expected in the measured current.



$samples

Integer

The number of samples to average together.



$sampleRate

Integer

The sampling rate in samples per second.



$configuration

String

The type of input signal source and the configuration of the measurement system.

Valid entries are:

· RSE

· NRSE

· Differential

· PseudoDifferential



$taskName

String

The name of the task to create in NI-DAQmx. Each NI-DAQmx task that occurs in parallel should have a unique name. Jabil Test will append the test cell number to the end of the task name to ensure unique task names for scripts that are run in multiple test cells.





Return parameters



Parameter

Variable Type

Description



$current

Float

The average current that was measured on the specified channel.





Example(s):

// Set up some variables.

$device = "cDAQ1Mod1";

$chan = "ai0";

$minR = 0;

$maxR = 5;

$samples = 100;

$sampleRate = 1000;

$config = "Differential";

$task = "ReadCurr";





$curr = NI_DAQmx_MeasureCurrentDC($device, $chan, $minR, $maxR, $samples, $sampleRate, $config, $task);





$outStr = "Average Current = " + $curr;

UpdateStatus($outStr);





NI_DAQmx_MeasureVoltageAC

Previous Top Next



* * *



NI_DAQmx_MeasureVoltageAC

Usage:

($avg,$min,$max,$rms,$ACrms,$PTP) = NI_DAQmx_MeasureVoltageAC($DeviceName, $Channel, $MinRange, $MaxRange, $Samples, $Rate, $InputConfig,$TaskName);

Description:

This function requires NI-DAQmx 9.4 or later to be installed on the system.

This function measures the AC voltage on $DeviceName/$Channel with the configuration $InputConfig between a range of $MinRange and $MaxRange. .

Remarks:

This function is tested with NI-PCI-6221

Result:

($avg,$min,$max,$rms,$ACrms,$PTP) = NI_DAQmx_MeasureVoltageAC($DeviceName, $Channel, $MinRange, $MaxRange, $Samples, $Rate, $InputConfig,$TaskName);

Function Arguments



Parameter

Variable Type

Description



$DeviceName

String

The NI DAQmx device name you want to use.



$Channel

String

The NI DAQmx device channel where you want to measure the voltage. (MAX explorer)



$MinRange

Double

The minimum value expected from the measurement.



$MaxRange

Double

The maximum value expected from the measurement.



$Samples

Integer

The number of samples to acquire.



$Rate

Integer

The sampling rate in samples per second.



$InputConfig

String

The type of input signal source and the configuration of the measurement system.

Possible values:

RSE

NRSE

Differential

PseudoDifferential



$TaskName

String

The name of the measurement task to be performed. Each NIDAQmx task that occurs in parallel should have a unique name. Jabil Test automatically appends the cell number to the supplied task name in the script to guarantee uniqueness when a test script is executed on multiple threads.





Return Parameters



Parameter

Variable Type

Description



$avg

float

The average of all samples.



$min

float

The minimum measured value.



$max

float

The maximum measured value.



$rms

float

The measured RMS value.



$ACrms

float

The measured ACrms value.



$PTP

float

The measured peak to peak value.





Examples:

($avg,$min,$max,$rms,$ACrms,$PTP) = NI_DAQmx_MeasureVoltageAC("Dev1", "ai1", 0.0, 2.5, 2000, 1000, "RSE","TaskName");

NumericLimitTest($min, "-1.100", "-0.950");

NumericLimitTest($max, "0.950", "1.100");

NumericLimitTest($rms, "0.700", "0.715");

NumericLimitTest($ACrms, "0.700", "0.715");

NumericLimitTest($avg, "-0.1", "0.1");

NumericLimitTest($PTP, "1.95", "2.05");





NI_DAQmx_MeasureVoltageDC

Previous Top Next



* * *



NI_DAQmx_MeasureVoltageDC

Usage:

$dc = NI_DAQmx_MeasureVoltageDC($DeviceName, $Channel, $MinRange, $MaxRange, $Samples, $Rate, $InputConfig,$TaskName);

Description:

This function requires NI-DAQmx 9.4 or later to be installed on the system.

This function measures the DC voltage on $DeviceName/$Channel with the configuration $InputConfig between a range of $MinRange and $MaxRange. .

Remarks:

This function is tested with NI-PCI-6221

Result:

$dc = NI_DAQmx_MeasureVoltageDC($DeviceName, $Channel, $MinRange, $MaxRange, $Samples, $Rate, $InputConfig,$TaskName);

Function Arguments



Parameter

Variable Type

Description



$DeviceName

String

The NI DAQmx device name you want to use.



$Channel

String

The NI DAQmx device channel where you want to measure the voltage. (MAX explorer)



$MinRange

Double

The minimum value expected from the measurement.



$MaxRange

Double

The maximum value expected from the measurement.



$Samples

Integer

The number of samples to acquire.



$Rate

Integer

The sampling rate in samples per second.



$InputConfig

String

The type of input signal source and the configuration of the measurement system.

Possible values:

RSE

NRSE

Differential

PseudoDifferential



$TaskName

String

The name of the measurement task to be performed. Each NIDAQmx task that occurs in parallel should have a unique name. Jabil Test automatically appends the cell number to the supplied task name in the script to guarantee uniqueness when a test script is executed on multiple threads.





Return Parameters



Parameter

Variable Type

Description



$dc

float

The resulting value is returned as a float.





Examples:

$dc = NIDAQmx_MeasureVoltageDC("Dev1", "ai0", 4.95, 5.05, 1000, 10000, "RSE","TaskName");

NumericLimitTest($dc, "4.95", "5.05");





NI_DAQmx_Measure_Chan_Current

Previous Top Next



* * *



NI_DAQmx_Measure_Chan_Current



Usage:

$current = NI_DAQmx_Measure_Chan_Current($device, $channel, $minRange, $maxRange, $configuration, $taskName);



Description:

This function returns the current on one channel of a DAQmx system.



Remarks:

This function requires NI_DAQmx 9.0+ to be loaded on the computer.

This function takes a single reading and not all NI-DAQmx instruments can perform this. If your instrument returns an error while using this try the function NI_DAQmx_MeasureCurrent_DC.

Function arguments



Parameter

Variable Type

Description



$device

String

The name of the device to read the current from (as shown in NI-MAX).



$channel

String

The name of the channel to read the current from (as shown in NI-MAX).



$minRange

Float

The lowest value expected in the measured current.



$maxRange

Float

The highest value expected in the measured current.



$configuration

String

The type of input signal source and the configuration of the measurement system.

Valid entries are:

· RSE

· NRSE

· Differential

· PseudoDifferential



$taskName

String

The name of the task to create in NI-DAQmx. Each NI-DAQmx task that occurs in parallel should have a unique name. Jabil Test will append the test cell number to the end of the task name to ensure unique task names for scripts that are run in multiple test cells.





Return parameters



Parameter

Variable Type

Description



$current

Float

The current that was measured in the specified channel.





Example(s):

// Set up some variables.

$device = "cDAQ1Mod1";

$chan = "ai0";

$minR = 0;

$maxR = 5;

$config = "Differential";

$task = "ReadCurr";





$curr = NI_DAQmx_Measure_Chan_Current($device, $chan, $minR, $maxR, $config, $task);





$outStr = "Measured Current = " + $curr;

UpdateStatus($outStr);





NI_DAQmx_Measure_Chan_Voltage

Previous Top Next



* * *



NI_DAQmx_Measure_Chan_Voltage

Usage:

$measurement = NI_DAQmx_Measure_Chan_Voltage($DeviceName, $Channel,$MinRange, $MaxRange, $InputConfig,$TaskName);

Description:

This function requires NI-DAQmx 9.4 or later to be installed on the system.

This function measures the voltage on $DeviceName/$Channel with the configuration $InputConfig between a range of $MinRange and $MaxRange .

Remarks:

This function is tested with NI-PCI-6221 and NI-PCI-MIO-16E-4

This function checks if the user has used a correct parameter for $DeviceName

This function checks if the user has used a correct parameter for $Channel

This function checks if the user has used a correct parameter for $InputConfig

Result:

$measurement = NI_DAQmx_Measure_Chan_Voltage($DeviceName, $Channel, $MinRange, $MaxRange, $InputConfig,$TaskName);

Function Arguments



Parameter

Variable Type

Description



$DeviceName

String

The NI DAQmx device name you want to use.



$Channel

String

The NI DAQmx device channel where you want to measure the voltage.



$MinRange

Double

The minimum value expected from the measurement.



$MaxRange

Double

The maximum value expected from the measurement.



$InputConfig

String

The type of input signal source and the configuration of the measurement system.

Possible values:

Referenced Single-Ended

Non-Referenced Single-Ended

Differential

PseudoDifferential



$TaskName

String

The name of the measurement task to be performed. Each NIDAQmx task that occurs in parallel should have a unique name. Jabil Test automatically appends the cell number to the supplied task name in the script to guarantee uniqueness when a test script is executed on multiple threads.





Return Parameters



Parameter

Variable Type

Description



$measurement

float

The resulting value is returned as a float.





Examples:

$measurement = NI_DAQmx_Measure_Chan_Voltage("Dev2", "ai0", 6.0, 7.0,"Referenced Single-Ended","MyTask1");

This example measures a referenced single-ended voltage on Dev2/ai0 between a range of 6 and 7. The resulting value was 6.12V

$measurement = NI_DAQmx_Measure_Chan_Voltage("Dev2", "ai5", 4.85,5.15,"Referenced Single-Ended","MyTask1");

This example measures a referenced single-ended voltage on Dev2/ai5 between a range of 4.85 and 5.15. The resulting value was 5.02V





NI_DAQmx_Measure_Chan_VoltageMulti

Previous Top Next



* * *



NI_DAQmx_Measure_Chan_VoltageMulti

Usage:

$measurementArray = NI_DAQmx_Measure_ChanVoltageMulti($DeviceName, $Channel, $MinRange, $MaxRange, $InputConfig,$NumberOfSamples,$SampleRate,$TaskName);



Description:

This function requires NI-DAQmx 9.4 or later to be installed on the system.

This function takes a number of samples of the voltage on $DeviceName/$Channel with the configuration $InputConfig between a range of $MinRange and $MaxRange at a given sample rate. The samples are returned as an object which contains an array of doubles.

Remarks:

This function is tested with NI-PCI-6221 and NI-PCI-MIO-16E-4

This function checks if the user has used a correct parameter for $DeviceName

This function checks if the user has used a correct parameter for $Channel

This function checks if the user has used a correct parameter for $InputConfig

Result:

$measurement = NI_DAQmx_Measure_ChanVoltageMulti($DeviceName, $Channel, $MinRange, $MaxRange, $InputConfig,$NumberOfSamples,$SampleRate,$TaskName);

Function Arguments



Parameter

Variable Type

Description



$DeviceName

String

The NI DAQmx device name you want to use.



$Channel

String

The NI DAQmx device channel where you want to measure the voltage.



$MinRange

Double

The minimum value expected from the measurement.



$MaxRange

Double

The maximum value expected from the measurement.



$InputConfig

String

The type of input signal source and the configuration of the measurement system.

Possible values:

Referenced Single-Ended

Non-Referenced Single-Ended

Differential

PseudoDifferential



$NumberOfSamples

Integer

The number of samples to take



$SampleRate

Integer

The rate at which to sample measured in Hertz



$TaskName

String

The name of the measurement task to be performed. Each NIDAQmx task that occurs in parallel should have a unique name. Jabil Test automatically appends the cell number to the supplied task name in the script to guarantee uniqueness when a test script is executed on multiple threads.





Return Parameters



Parameter

Variable Type

Description



$measurementArray

Array

A single-dimensional array of type double containing all the measurements





NI_DAQmx_MultiDACWaves

Previous Top Next



* * *



NI_DAQmx_MultiDACWaves



Usage:

NI_DAQmx_MultiDACWaves($DeviceNameRanges, $Channels, $MinRanges, $MaxRanges, $Freqs,$Waves,$Cycles,$Amplitudes,$OffSets);

Description:

This function requires NI-DAQmx 9.4 or later to be installed on the system.

This function generates on the selected DACs a selected waveform Square,Sine, Triangle. The frequence can be selected, also the Voltage and the Offset. It is multi channel.





Remarks:

This function is tested with NI-PCI-6221.





This function checks if the user has used a correct parameter for:

- $DeviceNameRanges.

- $Channels.

- $Waves

- $Channels

- $Amplitudes in reference to $MaxRanges and $MinRanges

- $OffSets in reference to $Amplitudes and $MaxRanges,$MinRanges





For multichannel:



At this moment for $MinRanges,$MaxRanges and $Freqs, only the first value is taken into account. So every channel will operate on the same frequence and ranges.

In order for this "Task" to be still available over more steps, the object stays alive until you use the NI_DAQmx_StopMultiDACWaves script function.

See this helpfile for more details about how to stop the generation.





Result:

Function Arguments



Parameter

Variable Type

Description



$DeviceNameRanges

String

The NI DAQmx device name Device Name + ChannelRange you want to use.



$Channels

String

The NI DAQmx device channels where you want to generate the voltages.



$MinRanges

String

The minimum Range values.



$MaxRanges

String

The maximum Range values.



$Freqs

String

The base frequences for this function.





$Waves

String

The wave types to generate

Possible values:

Sine

Square

Triangle



$Cycles

String

The number of Cycles to generate, in fact total frequence equals $Cycles * $Freqs

Cycles must be greater then 1.

Best practice indicates a value of 10



$Amplitudes

String

The Voltages to generate,ex. 2 will generate +2V and -2V waves



$OffSets

String

The DC Offsets to add to the waves





Return Parameters



Parameter

Variable Type

Description





Examples:

NI_DAQmx_MultiDACWaves("Dev1/ao0:1","1","-10","10","500","Sine","10","5","+0.0");

Generates: on channel 1 (ao1), range -10V,10V,500*10=5Khz Sine wave, amplitude (+-5V),Offset(0V)

NI_DAQmx_MultiDACWaves("Dev1/ao0:1","1","-10","10","200","Sine","10","5","+0.0");

Generates: on channel 1 (ao1), range -10V,10V,200*10=2Khz Sine wave, amplitude (+-5V),Offset(0V)

NI_DAQmx_MultiDACWaves("Dev1/ao0:1","0","-10","10","200","Sine","10","3","-7.0");

Generates: on channel 0 (ao0), range -10V,10V,200*10=2Khz Sine wave, amplitude (+-3V),Offset(-7V)

NI_DAQmx_MultiDACWaves("Dev1/ao0:1","0,1","-10,-10","10,10","500,500","Triangle,Square","20,20","4,4","-2,2");

Generates: on channel 0 (ao0) and 1(a01) , range -10V,10V,500*20=10Khz Triangle and Square, amplitude both (+-4V),Offset(channel 0 =-2, channel 1=+2V)





NI_DAQmx_OneCounterReadFreqPFIx

Previous Top Next



* * *



NI_DAQmx_OneCounterReadFreqPFIx



Usage:

$ResultsArray = NI_DAQmx_OneCounterReadFreqPFIx($CounterDeviceName, $Edge, $MinRange, $MaxRange, $Time, $Qnt, $PFIx, $TaskName);



Description:

This function measures a TTL signal and calculates its frequency. This function is used to measure higher frequencies using the internal timebase.



Remarks:

This function requires NI-DAQmx 9.4 or later to be installed on the system.

This function is tested with NI-PXI-6723. This function checks if the user has used a correct parameter for $CounterDeviceName.

Method used: "Measure low frequencies with one counter."

Due to the chosen measurement method you should always take at least 3 measurements and ignore the first 2.

Function arguments



Parameter

Variable Type

Description



$CounterDeviceName

String

The NI-DAQmx Device Name including the name of the counter that will be used for pulse generation.



$Edge

Integer

The Edge the counter will trigger on.

0 = Falling (generates unknown results)

1 = Rising



$MinRange

String

The minimum expected value based on the DAQmx channel setting. Eg. if the device reads -10V to +10V, $MinRange = -10 (if there is no scaling applied to the channel), regardless of the what the measured signal levels are.



$MaxRange

String

The maximum expected value based on the DAQmx device setting.



$Time

String

The time the measurement may take, the higher - the more accuracy.



$Qnt

Integer

The number of readings to return.



$PFIx

String

The Counter channel used for the measurement.



$TaskName

String

The name of the measurement task to be performed. Each NIDAQmx task that occurs in parallel should have a unique name. Jabil Test automatically appends the cell number to the supplied task name in the script to guarantee uniqueness when a test script is executed on multiple threads.





Return parameters



Parameter

Variable Type

Description



$Result

Array

The measurements in Hz.





Example(s):

$CounterDeviceName = "PXI1Slot9/ctr0";

$Edge = 1; //rising edge

$MinRange = "0";

$MaxRange = "1000.0"; // Channel is scaled to 0 to 1000.

$Time = "5"; // 5 seconds

$Qnt = 3; // return 1 reading

$PFIx = "PFI0";





$ResultsArray = NI_DAQmx_OneCounterReadFreqPFIx($CounterDeviceName, $Edge, $MinRange, $MaxRange, $Time, $Qnt, $PFIx, "MyTask");





$Frequency = Array1DGetValue($ResultsArray, 2); // Ignore first readings





NI_DAQmx_ReadDIOPort

Previous Top Next



* * *



NI_DAQmx_ReadDIOPort



Usage:

$Value = NI_DAQmx_ReadDIOPort($DeviceName,$PortName,$TaskName);





Description:





This function reads the value on a specified digital input port on a NIDAQmx compatible DAQ device.





This function requires NI-DAQmx 9.4 or later to be installed on the system.

Function arguments



Parameter

Variable Type

Description



$Device

String

The NIDAQmx device name you want to use.



$Channel

String

The specified channel on the NIDAQmx device. If this channel does not exist, or is not able to be used as a digital output resource, the function will fail.



$TaskName

String

The name of the measurement task to be performed. Each NIDAQmx task that occurs in parallel should have a unique name. Jabil Test automatically appends the cell number to the supplied task name in the script to guarantee uniqueness when a test script is executed on multiple threads.





Return parameters



Parameter

Variable Type

Description



$Value

Integer

The digital port value read from the input port on the NIDAQmx compatible DAQ device.





Usage Examples

$Value = NI_DAQmx_ReadDIOPort("dev1","port0","MyTask");





NI_DAQmx_Read_Dig_Port_Line

Previous Top Next



* * *



NI_DAQmx_Read_Dig_Port_Line

Usage:

$measurement = NI_DAQmx_Read_Dig_Port_Line($DeviceName, $Port, $Line,$TaskName);



Description:

This function requires NI-DAQmx 9.4 or later to be installed on the system.

This function reads a $value (high or low) from a NI DAQmx $DeviceName/$Port/$Line. .

Remarks:

This function is tested with NI-PCI-6221 and NI-PCI-MIO-16E-4

This function checks if the user has used a correct parameter for $DeviceName

This function checks if the user has used a correct parameter for $Port

This function checks if the user has used a correct parameter for $Line

Result:

$measurement = NI_DAQmx_Read_Dig_Port_Line($DeviceName, $Port, $Line,$TaskName);

Function Arguments



Parameter

Variable Type

Description



$DeviceName

String

The NI DAQmx device name you want to use.



$Port

String

The NI DAQmx device port you want to use.



$Line

String

The NI DAQmx device line you want to use.



$TaskName

String

The name of the measurement task to be performed. Each NIDAQmx task that occurs in parallel should have a unique name. Jabil Test automatically appends the cell number to the supplied task name in the script to guarantee uniqueness when a test script is executed on multiple threads.





Return Parameters



Parameter

Variable Type

Description



$measurement

Integer

The status of the DIO line. (high or low)





Examples:

$measurement = NI_DAQmx_Read_Dig_Port_Line("Dev2","port0","line5","MyTask");

This example reads the "Dev2/port0/line5" high.





NI_DAQmx_ResetDevice

Previous Top Next



* * *



NI_DAQmx_ResetDevice



Usage:

NI_DAQmx_ResetDevice($DeviceName);





Description:





This function will reset the specified NIDAQmx device on the system, which ends all tasks executing on that particular device.





If the specified device is not found in the system, or can't be reset, the function generates a failing test result.





Note:

The name of each NIDAQmx device can be retrieved by using the NI-MAX Explorer application provided by National Instruments.





This function requires NI-DAQmx 9.4 or later to be installed on the system.

Function arguments



Parameter

Variable Type

Description



$DeviceName

String

The name of the NIDAQmx Device that the user wishes to reset, and re-initialize.





Return parameters



Parameter

Variable Type

Description



None





Usage Examples

NI_DAQmx_ResetDevice("Dev1");

NI_DAQmx_ResetDevice("Dev2");





NI_DAQmx_SetCurrentDC

Previous Top Next



* * *



NI_DAQmx_SetCurrentDC



Usage:

NI_DAQmx_SetCurrentDC($deviceName, $channelName, $current, $minimumCurrent, $maximumCurrent, $taskName);



Description:

This function sets an output current on the specified channel of the specified device.



Remarks:

This function requires that NI-DAQmx 9.4 or later be installed on the system.

This NI-DAQmx device must be capable of current output.

The minimum and maximum current settings are used to determine the range selected by the instrument. The output current must be between the minumum and maximum currents.



Function arguments



Parameter

Variable Type

Description



$deviceName

String

The name of the NI-DAQmx device to output from.



$channelName

String

The name of the channel to output from.



$current

Float

The output current in Amps.



$minimumCurrent

Float

The smallest current you expect (low end of current range).



$maximumCurrent

Float

The largest current you expect (high end of current range).



$taskName

String

The name of the NI-DAQmx Task to create for this function.





Return parameters



Parameter

Variable Type

Description



None





Example:





// Set up a 100mA current.

$devName = "Dev1";

$chanName = "line0";

$current = 0.1;

$minA = 0;

$maxA = 1;

$taskName = "CurrentOutTask";



NI_DAQmx_SetCurrentDC($devName, $chanName, $current, $minA, $maxA, $taskName);





NI_DAQmx_SetVoltageDC

Previous Top Next



* * *



NI_DAQmx_SetVoltageDC

Usage:

NI_DAQmx_SetVoltageDC($DeviceName, $Channel, $Voltage,$MinimumExpectedVoltage,$MaximumExpectedVoltage,$TaskName);

Description:

This function requires NI-DAQmx 9.4 or later to be installed on the system.

This function sets the DC voltage on $DeviceName/$Channel.

Remarks:

This function is tested with NI-PCI-6025 and NI-DAQ USB 6008

Function Arguments



Parameter

Variable Type

Description



$DeviceName

String

The NI DAQmx device name you want to use.



$Channel

String

The NI DAQmx device channel where you want to measure the voltage. (MAX explorer)



$Voltage

Float

The desired voltage for the analog output channel.



$MinimumExpectedVoltage

Float

The minimum expected voltage for the output channel.



$MaximumExpectedVoltage

Float

The maximum expected voltage for the output channel.



$TaskName

String

The name of the measurement task to be performed. Each NIDAQmx task that occurs in parallel should have a unique name. Jabil Test automatically appends the cell number to the supplied task name in the script to guarantee uniqueness when a test script is executed on multiple threads.





Return Parameters



None





NI_DAQmx_ShowAllTasks

Previous Top Next



* * *



NI_DAQmx_ShowAllTasks



Usage:

$TaskList = NI_DAQmx_ShowAllTasks();





Description:





This function lists all the persistent tasks that are currently executing on the local system across all NIDAQmx devices.

The list of devices is written to the debug window, and returned as a semi-colon delimited string.





This function requires NI-DAQmx 9.4 or later to be installed on the system.

Function arguments



Parameter

Variable Type

Description





Return parameters



Parameter

Variable Type

Description



$TaskList

String

A semi-colon delimited list of all the currently executing persistent tasks on the local system.





Usage Examples

$Tasks = NI_DAQmx_ShowAllTasks();





NI_DAQmx_StopMultiDACWaves

Previous Top Next



* * *



NI_DAQmx_StopMultiDACWaves

Usage:

NI_DAQmx_StopMultiDACWaves($DeviceName, $AnalogOutputChannel);

Description:

This function requires NI-DAQmx 9.4 or later to be installed on the system. This function stops the generation of waves on all the analog output with the user defined settings.

Remarks:

This function is tested with NI-PCI-6221.

Before stopping the generation, you need at least to set the outputs to zero, especially the DC part of it, otherwise you receive a fluctuated DC offset at the outputs.

You must use the NI_DAQmx_MultiDACWaves to do so.

Result:

NI_DAQmx_StopMultiDACWaves($DeviceName, $AnalogOutputChannel);

Function Arguments



Parameter

Variable Type

Description



$DeviceName

String

The NI DAQmx device name you want to use. You find this name in MAX explorer.



$AnalogOutputChannel

String

The 1st analog output channel used by the NI_DAQmx_MultiDACWaves

The others will stop accordingly.





Return Parameters



Parameter

Variable Type

Description





Example(s):

NI_DAQmx_StopMultiDACWaves("Dev1", "ao0");

This example stops generating on all channels Dev1.

NI_DAQmx_StopMultiDACWaves("Dev1", "ao1");

This example also stops generating on all channels Dev1.





NI_DAQmx_StopSinusWave

Previous Top Next



* * *



NI_DAQmx_StopSinusWave

Usage:

NI_DAQmx_StopSinusWave($DeviceName, $AnalogOutputChannel);



Description:

This function requires NI-DAQmx 9.4 or later to be installed on the system.

This function stops the generation of a sinusoidal wave on the analog output with the user defined settings.

Remarks:

This function is tested with NI-PCI-6221.

Result:

NI_DAQmx_StopSinusWave($DeviceName, $AnalogOutputChannel);

Function Arguments



Parameter

Variable Type

Description



$DeviceName

String

The NI DAQmx device name you want to use. You find this name in MAX explorer.



$AnalogOutputChannel

String

The analog output channel of the device where you want to have the sinusoidal wave.





Return Parameters



Parameter

Variable Type

Description





Example(s):

// This example stops generating a sinus wave on Dev1/Ao0.

NI_DAQmx_StopSinusWave("Dev1", "ao0");





// This example stops generating a sinus wave on Dev1/Ao1.

NI_DAQmx_StopSinusWave("Dev1", "ao1");





NI_DAQmx_StopSinusWaveWithOffset

Previous Top Next



* * *



NI_DAQmx_StopSinusWaveWithOffset



Usage:

NI_DAQmx_StopSinusWaveWithOffset($DeviceName, $AnalogOutputChannel);





Description:

This function stops the generation of a sinusoidal wave on the specified analog output.





Remarks:

This function requires NI-DAQmx 9.4 or later to be installed on the system.

This function is tested with NI-PXI-6723. This function checks if the user has used a correct parameter for $CounterDeviceName.

Function arguments



Parameter

Variable Type

Description



$DeviceName

String

The NI-DAQmx Device Name for the wave. Find the name in Measurement and Automation Explorer.



$AnalogOutputChannel

String

The analog output channel on which to stop the generation of a sinusoidal wave.





Return parameters



Parameter

Variable Type

Description



None





Example(s):

$DeviceName = "PXI1Slot13";

$AnalogOutputChannel = "ao0";





NI_DAQmx_StopSinusWaveWithOffset($DeviceName, $AnalogOutputChannel);





NI_DAQmx_StopSquareWaveWithOffset

Previous Top Next



* * *



NI_DAQmx_StopSquareWaveWithOffset



Usage:

NI_DAQmx_StopSquareWaveWithOffset($DeviceName, $AnalogOutputChannel);



Description:

This function stops the generation of a square wave on the specified analog output.



Remarks:

This function requires NI-DAQmx 9.4 or later to be installed on the system.

This function is tested with NI-PXI-6723. This function checks if the user has used a correct parameter for $CounterDeviceName.

Function arguments



Parameter

Variable Type

Description



$DeviceName

String

The NI-DAQmx Device Name for the wave. Find the name in Measurement and Automation Explorer.



$AnalogOutputChannel

String

The analog output channel on which to stop the generation of a square wave.





Return parameters



Parameter

Variable Type

Description



None





Example(s):

$DeviceName = "PXI1Slot13";

$AnalogOutputChannel = "ao0";





NI_DAQmx_StopSquareWaveWithOffset($DeviceName, $AnalogOutputChannel);





NI_DAQmx_Stop_Dig_Pulse_Train

Previous Top Next



* * *



NI_DAQmx_Stop_Dig_Pulse_Train

Usage:

NI_DAQmx_Stop_Dig_Pulse_Train($DeviceName, $Counter);



Description:

This function requires NI-DAQmx 9.4 or later to be installed on the system.

This function stops a digital pulse train on the counter output $Counter of device $DeviceName .

Remarks:

This function is tested with NI-PCI-6221 and NI-PCI-MIO-16E-4

This function checks if the user has used a correct parameter for $DeviceName

This function checks if the user has used a correct parameter for $Channel

This function checks if the user has used a correct parameter for $InputConfig

Result:

NI_DAQmx_Stop_Dig_Pulse_Train($DeviceName, $Counter);

Function Arguments



Parameter

Variable Type

Description



$DeviceName

String

The NI DAQmx device name you want to use.



$Counter

String

The NI DAQmx counter channel where the pulse train will appear.





Return Parameters



Parameter

Variable Type

Description



None





Example:

NI_DAQmx_Stop_Dig_Pulse_Train("Dev2", "ctr0");

This example stops the digital pulse train on "Dev2/ctr0".





NI_DAQmx_WriteDIOPort

Previous Top Next



* * *



NI_DAQmx_WriteDIOPort



Usage:

NI_DAQmx_WriteDIOPort($DeviceName,$ChannelName,$ChannelValue,$TaskName);





Description:





This function writes a specified static 8-bit value to a Digital Output channel on a NIDAQmx compatible DAQ device.





This function requires NI-DAQmx 9.4 or later to be installed on the system.

Function arguments



Parameter

Variable Type

Description



$Device

String

The NIDAQmx device name you want to use.



$Channel

String

The specified channel on the NIDAQmx device. If this channel does not exist, or is not able to be used as a digital output resource, the function will fail.



$ChannelValue

String

A hexadecimal string indicating the desired 8-bit value to write to the specified port.



$TaskName

String

The name of the measurement task to be performed. Each NIDAQmx task that occurs in parallel should have a unique name. Jabil Test automatically appends the cell number to the supplied task name in the script to guarantee uniqueness when a test script is executed on multiple threads.





Return parameters



Parameter

Variable Type

Description



None





Usage Examples

NI_DAQmx_WriteDIOPort("Dev0","Port0","FF","MyTask");





NI_DAQmx_Write_Dig_Port_Line

Previous Top Next



* * *



NI_DAQmx_Write_Dig_Port_Line



Usage:

NI_DAQmx_Write_Dig_Port_Line($deviceName, $portName, $lineName, $value, $taskName);



Description:

This function writes a value to the specified line on the specified NI-DAQmx device and port.





Remarks:

This function requires NI-DAQmx 16.1 or later.



This function checks that the device, port and line exist.



For $value any of these will evaluate to True (everything else will evaluate to False: "1", "True", "Yes", "High", "T", "Y".



This function was tested with an NI-USB-6008.





Function arguments



Parameter

Variable Type

Description



$deviceName

String

The NI-DAQmx device name to use.



$portName

String

The port on the NI-DAQmx device to use.



$lineName

String

The line on the port of the NI-DAQmx device to use.



$value

String

The value to write to the line.



$taskName

String

The name of the measurement task to be performed. Each NIDAQmx task that occurs in parallel should have a unique name. Jabil Test automatically appends the cell number to the supplied task name in the script to guarantee uniqueness when a test script is executed in multiple test cells.





Return parameters



Parameter

Variable Type

Description



None





Example:





// Output a high on Port0, Line 2 of Dev1.

$device = "Dev1";

$port = "port0";

$line = "line2";

$value = 1;

$task = "VoltOut";



NI_DAQmx_Write_Dig_Port_Line($device, $port, $line, $value, $task);





DIO_ConfigPort

Previous Top Next



* * *



DIO_ConfigPort

Usage:

DIO_ConfigPort($deviceNumber,$portNumber,$mode,$direction);

Description:

This is a direct mapping of the NIDAQ function DIO_ConfigPort, therefore it's compatible with any digital input output device which supports the NIDAQ interface created by National Instruments.

This function configures a digital input or output port on a NIDAQ compatible device for further operations.

Function Arguments



Parameter

Variable Type

Description



$deviceNumber

Integer

The number assigned to your device in the Measurement and Automation explorer utility by National Instruments.



$portNumber

Integer

The number of the port to configure. The valid range of ports is dependant on the particular digital control device that you are using in your test solution.



$mode

String

The operational mode of the port. Note: Not all devices support all modes, you'll need to refer to the documentation for your DIO device.

Supported Values:

"LATCHED"

"UNLATCHED"



$direction

String

The operational direction of the port. Note: Not all devices support all modes, you'll need to refer to the documentation for your DIO device.

Supported Values:

"INPUT"

"OUTPUT"

"BIDIRECTIONAL".





Return Parameters



Parameter

Variable Type

Description



None





DIO_ReadPort

Previous Top Next



* * *



DIO_ReadPort

Usage:

$returnValue = DIO_ReadPort($deviceNumber,$portNumber);

Description:

This is a direct mapping of the NIDAQ function DIO_ReadPort, therefore it's compatible with any digital input output device which supports the NIDAQ interface created by National Instruments.

This function returns a hexidecimal string representing an 8 bit value fromthe device and port specified in the function parameters.

Function Arguments



Parameter

Variable Type

Description



$deviceNumber

Integer

The number assigned to your device in the Measurement and Automation explorer utility by National Instruments.



$portNumber

Integer

The number of the port to configure. The valid range of ports is dependant on the particular digital control device that you are using in your test solution.





Return Parameters



Parameter

Variable Type

Description



$returnValue

String

A string representing the hexidecimal value of the pattern read from the port and device specified in the function parameters.





DIO_WriteLine

Previous Top Next



* * *



DIO_WriteLine



Usage:

DIO_WriteLine($Device,$Port,$Line,$Value);





Description:





This function writes a single line of a given port with the supplied bit value of 0 or 1. This function uses the traditional NIDAQ library.





The given port must be configured as an output port before invoking this function.

Function arguments



Parameter

Variable Type

Description



$Device

Integer

The ID Number of the NIDAQ device



$Port

Integer

The port number on the device to be written to



$Line

Integer

The line on the given port to be written to



$Value

Integer

The value to write to the supplied port, allowed values are 0 or 1.





Return parameters



Parameter

Variable Type

Description



None





Usage Examples

DIO_WriteLine(1,4,3,1);





DIO_WritePort

Previous Top Next



* * *



DIO_WritePort

Usage:

DIO_WritePort($deviceNumber,$portNumber,$PatternValue);

Description:

This is a direct mapping of the NIDAQ function DIO_WritePort, therefore it's compatible with any digital input output device which supports the NIDAQ interface created by National Instruments.

This function writes an 8 bit value to the device and port specified in the function parameters.

Function Arguments



Parameter

Variable Type

Description



$deviceNumber

Integer

The number assigned to your device in the Measurement and Automation explorer utility by National Instruments.



$portNumber

Integer

The number of the port to configure. The valid range of ports is dependant on the particular digital control device that you are using in your test solution.



$PatternValue

String

A String representing a hexidecimal number to write to the port and device specified. Valid values are 0x00 to 0xff. Note: The '0x' notation is entirely optional, and not required for the function to work properly.





Return Parameters



Parameter

Variable Type

Description



None





DIO_WritePortWithMask

Previous Top Next



* * *



DIO_WritePortWithMask



Usage:

DIO_WritePortWithMask($Device,$Port,$WritePattern,$MaskPattern);





Description:





This function writes an 8 bit value to the device and port specified. The 8-bit value to be written is logically "ANDED" with the 8-bit value supplied in the mask pattern, and only the unmasked bits are written. The remaining port lines which are masked will be unaffected.





The given port must be configured as an output port before invoking this function.

Function arguments



Parameter

Variable Type

Description



$Device

Integer

The ID Number of the NIDAQ device



$Port

Integer

The port number on the device to be written to



$WritePattern

String

The 8-bit value to be written to the port expressed as a hexadecimal string.



$MaskPattern

String

The 8-bit value to be applied as a mask to the 8-bit write pattern value. The mask bits on the output port will be unaffected by the write operation.





Return parameters



Parameter

Variable Type

Description



None





Usage Examples

DIO_WritePortWithMask(1,2,"AA","0F");





Omega_DAQ_Close

Previous Top Next



* * *



Omega_DAQ_Close



Usage:

Omega_DAQ_Close($DeviceHandle);





Description:

The close function terminates the connection to the Omega OMB-DAQ-54 device. Once the specified device has been closed, no subsequent communication with the device can be performed. In order to re-establish communications with a closed device, the device must be re-opened with the Omega_DAQ_Init function.

Function arguments



Parameter

Variable Type

Description



$DeviceHandle

Object

The handle of the device returned from the Omega_DAQ_Init function





Return parameters



Parameter

Variable Type

Description



None





Usage Examples

Omega_DAQ_Close($handle);





Omega_DAQ_GetChannelTemperature

Previous Top Next



* * *



Omega_DAQ_GetChannelTemperature



Usage:

$Temperature = Omega_DAQ_GetChannelTemperature($DeviceHandle, $Channel, $Degree, $Thermocouple,$ADCSetting);





Description:

This function scans the specified device channel and returns the Voltage to Temperature conversion result based on the degree and thermocouple parameters.

Function arguments



Parameter

Variable Type

Description



$DeviceHandle

Object

The handle of the device returned from the Omega_DAQ_Init function



$Channel

Integer

The device channel to scan



$Degree

String

Temperature Degree Unit [C,F]



$Thermocouple

String

Thermocouple Type [J,K,T,N,N14,N28,S,R,B,CJC]



$ADCSetting

String

The setting for the analog-digital converter for the specified channel number. Supported values are:

· "SELOW" = Single Ended Low

· "SEHIGH" = Single Ended High

· "DIFF" = Differential





Return parameters



Parameter

Variable Type

Description



$Temperature

Float

The resultant voltage to temperature conversion





Usage Examples

$temp = Omega_DAQ_GetChannelTemperature($handle,3,"F","T","DIFF");





Omega_DAQ_GetChannelVoltage

Previous Top Next



* * *



Omega_DAQ_GetChannelVoltage



Usage:

$Voltage= Omega_DAQ_GetChannelVoltage($DeviceHandle, $Channel, $Gain,$ADCSetting)



Description:

This function scans the specified device channel and returns the Voltage to Temperature conversion result based on the degree and thermocouple parameters.

Function arguments



Parameter

Variable Type

Description



$DeviceHandle

Object

The handle of the device returned from the Omega_DAQ_Init function



$Channel

Integer

The device channel to scan



$Gain

String

The channel's gain setting [DIV5,X1,X2,X4,X8,X16,X32,X64,X128]



$ADCSetting

String

The setting for the analog-digital converter for the specified channel number. Supported values are:

· "SELOW" = Single Ended Low

· "SEHIGH" = Single Ended High

· "DIFF" = Differential





Return parameters



Parameter

Variable Type

Description



$Voltage

Float

The channel voltage reading





Usage Examples

$voltage = Omega_DAQ_GetChannelVoltage($handle,1,"X1","DIFF");





Omega_DAQ_GetDeviceCount

Previous Top Next



* * *



Omega_DAQ_GetDeviceCount



Usage:

$Count = Omega_DAQ_GetDeviceCount()



Description:

This function returns the number of currently configured devices.





Function arguments



Parameter

Variable Type

Description



None





Return parameters



Parameter

Variable Type

Description



$Count

Integer

The number of devices





Usage Examples

$count = Omega_DAQ_GetDeviceCount();





Omega_DAQ_GetDeviceStatus

Previous Top Next



* * *



Omega_DAQ_GetDeviceStatus



Usage:

$Status = Omega_DAQ_GetDeviceStatus($DeviceHandle)



Description:

This function determines if a device is online and returns and true/false status.





Function arguments



Parameter

Variable Type

Description



$DeviceHandle

Object

The handle of the device returned from the Omega_DAQ_Init function





Return parameters



Parameter

Variable Type

Description



$Status

Boolean

Status of device [True,False]





Usage Examples

$Status = Omega_DAQ_GetDeviceStatus($handle);





Omega_DAQ_Init

Previous Top Next



* * *



Omega_DAQ_Init



Usage:

$DeviceHandle = Omega_DAQ_Init($DeviceName);



Description:

This function will initiate a session for the device name specified by the $DeviceName parameter by opening the device, initializing it, and preparing it for further operation. The device name specified must reference a currently configured device.





Note: It is generally a good programming habit to close the instrument handle when the program is done using the instrument. This can be done with the Omega_DAQ_Init function.

Function arguments



Parameter

Variable Type

Description



$DeviceName

String

Name of the Omega device to be initialized.





Return parameters



Parameter

Variable Type

Description



$DeviceHandle

Object

The handle of the device





Usage Examples

$DeviceHandle = Omega_DAQ_Init("PDAQ");





Opto22_Close

Previous Top Next



* * *



Opto22_Close



Usage:

Opto22_Close($Handle);



Description:

This function requires the OptoMMP2.dll file to be installed in the Jabil Test folder.



This function closes and releases the instrument driver session. It also deallocates any memory resources the driver uses.





Remarks:

· After closing, communications must be re-initialized before any more commands can be sent.



Function arguments



Parameter

Variable Type

Description



$Handle

Object

The handle of the instrument returned from the initialization function.





Return parameters



Parameter

Variable Type

Description



None





Example(s):

Opto22_Close($Handle);





Opto22_Init

Previous Top Next



* * *



Opto22_Init



Usage:

$Handle = Opto22_Init($HostName, $HostPort, $ConnectionType, $TimeOut, $PowerUpClear);



Description:

This function requires the OptoMMP2.dll file to be installed in the Jabil Test folder.



This function opens communication to the instrument.





Remarks:

· This library was tested on a SNAP-B3000-ENET PAC.

· All Opto22 SNAP PAC's can be controlled with this library with the exception of the SNAP Ultimate I/O models.

· This function must be called for each PAC that is to be communicated with.



Function arguments



Parameter

Variable Type

Description



$HostName

String

The name of the host PAC to connect to or the IP address of the PAC in dot format.



$HostPort

Integer

The ethernet port on the PAC to connect to. Default is 2001.



$ConnectionType

String

The ethernet protocol to use when talking to the PAC.

Values: TCP, UDP



$TimeOut

Integer

The number of milliseconds to wait for communication from the PAC before returning a time out error.

Minimum value for UDP: 100

Minimum value for TCP: 1000



$PowerUpClear

Boolean

Whether to reset a PAC that is a "Brain" unit. Ignored if not a "Brain" PAC.





Return parameters



Parameter

Variable Type

Description



$Handle

Object

Returns a session handle that is used to identify the device in all subsequent function calls.





Example(s):

$Handle = Opto22_Init("192.168.10.11", 2001, "TCP", 3000, False);





Opto22_ReadAnalog

Previous Top Next



* * *



Opto22_ReadAnalog



Usage:

$Value = Opto22_ReadAnalogl($Handle, $MemoryIndex);



Description:

This function requires the OptoMMP2.dll file to be installed in the Jabil Test folder.



This function reads a single analog channel value from the instrument.





Remarks:

· The analog values are stored in the instrument memory after the digital values. The first analog value is stored at memory location: <number of digital channels> (due to the memory starting at location 0. If there are 64 digital channels (numbered 0 to 63), the first analog would be 64.



Function arguments



Parameter

Variable Type

Description



$Handle

Object

The handle of the instrument returned from the initialization function.



$MemoryIndex

Integer

The memory location to read from.





Return parameters



Parameter

Variable Type

Description



$Value

Float

The analog value read from the specified memory location.





Example(s):

$Value = Opto22_ReadAnalog($Handle, 64);





Opto22_ReadDigital

Previous Top Next



* * *



Opto22_ReadDigital



Usage:

$State = Opto22_ReadDigital($Handle, $MemoryIndex);



Description:

This function requires the OptoMMP2.dll file to be installed in the Jabil Test folder.



This function reads a single digital line state from the instrument.





Remarks:

· There are a maximum of 64 digital lines on a SNAP PAC - numbered 0 to 63.



Function arguments



Parameter

Variable Type

Description



$Handle

Object

The handle of the instrument returned from the initialization function.



$MemoryIndex

Integer

The memory location to read from.





Return parameters



Parameter

Variable Type

Description



$State

Boolean

The boolean state read from the specified digital line.





Example(s):

$State = Opto22_ReadDigital($Handle, 3);





Opto22_ReadDigitals

Previous Top Next



* * *



Opto22_ReadDigitals



Usage:

$States[] = Opto22_ReadDigitals($Handle, $StartIndex);



Description:

This function requires the OptoMMP2.dll file to be installed in the Jabil Test folder.



This function reads 64 digital line states from the instrument.





Remarks:

· Always returns 64 digital states. Even if the PAC does not have 64 digital lines.



Function arguments



Parameter

Variable Type

Description



$Handle

Object

The handle of the instrument returned from the initialization function.



$StartIndex

Integer

The memory location to start reading from.





Return parameters



Parameter

Variable Type

Description



$States

Array

The array of boolean values returned by the PAC.





Example(s):

$States = Array1DCreate("BOOLEAN", 64);

$States = Opto22_ReadDigitals($Handle, 0);





Opto22_WriteAnalog

Previous Top Next



* * *



Opto22_WriteAnalog



Usage:

Opto22_WriteAnalog($Handle, $Value, $MemoryIndex);



Description:

This function requires the OptoMMP2.dll file to be installed in the Jabil Test folder.



This function writes a single analog value to the instrument.





Remarks:

· The analog values are stored in the instrument memory after the digital values. The first analog value is stored at memory location: <number of digital channels> (due to the memory starting at location 0. If there are 64 digital channels (numbered 0 to 63), the first analog would be 64.

Function arguments



Parameter

Variable Type

Description



$Handle

Object

The handle of the instrument returned from the initialization function.



$Value

Float

The analog value to write to the memory location.



$MemoryIndex

Integer

The memory location to write to.





Return parameters



Parameter

Variable Type

Description



None





Example(s):

Opto22_WriteAnalog($Handle, 4.53, 64);





Opto22_WriteDigital

Previous Top Next



* * *



Opto22_WriteDigital



Usage:

Opto22_WriteDigital($Handle, $State, $MemoryIndex);



Description:

This function requires the OptoMMP2.dll file to be installed in the Jabil Test folder.



This function writes a single digital line state to the instrument.





Remarks:

· There are a maximum of 64 digital lines on a SNAP PAC - numbered 0 to 63.



Function arguments



Parameter

Variable Type

Description



$Handle

Object

The handle of the instrument returned from the initialization function.



$State

Boolean

The state to write to the digital line.



$MemoryIndex

Integer

The memory location to write to.





Return parameters



Parameter

Variable Type

Description



None





Example(s):

Opto22_WriteDigital($Handle, false, 3);





Opto22_WriteDigitals

Previous Top Next



* * *



Opto22_WriteDigitals



Usage:

Opto22_WriteDigitals($Handle, $States, $StartIndex);



Description:

This function requires the OptoMMP2.dll file to be installed in the Jabil Test folder.



This function writes a number of digital line states to the instrument.





Remarks:

· The number of digital states entered need not be 64.

· The number of digital states written to the PAC is 64. This could cause the write to overwrite memory locations beyond the DIO locations.



Function arguments



Parameter

Variable Type

Description



$Handle

Object

The handle of the instrument returned from the initialization function.



$States

Array

The array of boolean values to write to the PAC.



$StartIndex

Integer

The memory location to start writing to.





Return parameters



Parameter

Variable Type

Description



None





Example(s):

$States = Array1DCreate("BOOLEAN", 4);

Array1DSetValue($States, 2, True);

Opto22_WriteDigitals($Handle, $States, 0);





AG34401A_Close

Previous Top Next



* * *



AG34401A_Close



Usage:

AG34401A_Close($agHandle);



Description:

This function closes communication to the instrument and recovers resources used.





Remarks:

This function uses the Agilent IVI instrument drivers for the AG34401A instrument. You also need to load the Agilent COM components.

Communication must previously have been opened using the AG34401A_Init or AG34401A_InitWithOptions function.

This function does not reset the instrument or change any existing settings.

A fail is generated if this function is unable to close the communication channel.



Function arguments



Parameter

Variable Type

Description



$agHandle

Object

Handle to previously opened instrument communication channel.





Return parameters



Parameter

Variable Type

Description



None





Example:





// Open and close communication.

$resource = "GPIB0::11::INSTR";



$agHandle = AG34401A_Init($resource);



AG34401A_Close($agHandle);





AG34401A_Init

Previous Top Next



* * *



AG34401A_Init



Usage:

$agHandle = AG34401A_Init($resourceString);



Description:

This function initializes communication with the instrument.





Remarks:

This function uses the Agilent IVI instrument drivers for the AG34401A instrument. You also need to load the Agilent COM components.

This function does not reset the instrument or change any existing settings.

A fail is generated if this function is unable to open the communication channel.



Function arguments



Parameter

Variable Type

Description



$resourceString

String

VISA resource string identifying the instrument. See VISA Communications in Jabil Test for more information.





Return parameters



Parameter

Variable Type

Description



$agHandle

Object

Handle to instrument communication channel.





Example:





// Open communication on GPIB bus.

$resource = "GPIB0::11::INSTR";



$agHandle = AG34401A_Init($resource);





AG34401A_InitWithOptions

Previous Top Next



* * *



AG34401A_InitWithOptions



Usage:

$agHandle = AG34401A_InitWithOptions($resourceString[, $query[, $reset[, $options]]]);



Description:

This function initializes communication with the instrument and, optionally, queries the instrument for its ID, resets the instrument and sets initialization options.





Remarks:

This function uses the Agilent IVI instrument drivers for the AG34401A instrument. You also need to load the Agilent COM components.

A fail is generated if this function is unable to open the communication channel.

Refer to the instrument documentation for more details on initialization parameters.



Function arguments



Parameter

Variable Type

Description



$resourceString

String

VISA resource string identifying the instrument. See VISA Communications in Jabil Test for more information.



$query

Boolean

{Optional] Whether to query the instrument ID on initialization.



$reset

Boolean

[Optional] Whether to reset the instrument on initialization.



$options

String

[Optional] List of additional parameters to be supplied when initializing the instrument.





Return parameters



Parameter

Variable Type

Description



$agHandle

Object

Handle to instrument communication channel.





Example:





// Open communication on GPIB bus with query and reset.

$resource = "GPIB0::11::INSTR";

$query = true;

$reset = true;



$agHandle = AG34401A_InitWithOptions($resource, $query, $reset);





AG34401A_MeasureACCurrent

Previous Top Next



* * *



AG34401A_MeasureACCurrent



Usage:

$measurement = AG34401A_MeasureACCurrent($agHandle, $timeout, $range, $resolution);



Description:

This function performs an AC current measurement and returns the result.





Remarks:

This function uses the Agilent IVI instrument drivers for the AG34401A instrument. You also need to load the Agilent COM components.

Communication must previously have been opened using the AG34401A_Init or AG34401A_InitWithOptions function.

A fail is generated if the instrument is unable to make a measurement or times out.



Function arguments



Parameter

Variable Type

Description



$agHandle

Object

Handle to previously opened instrument communication channel.



$timeout

Integer

Number of milliseconds to wait for a measurement before returning a fail result.



$range

Float

The range for the measurement.



$resolution

Float

The resolution for the measurement.





Return parameters



Parameter

Variable Type

Description



$measurement

Float

The AC current measurement.





Example:



// Open communication.

$resource = "GPIB0::11::INSTR";



$agHandle = AG34401A_Init($resource);



// Make an AC Current measurement.

$timeout = 1000;

$range = 1;

$resol = 0.0001;



$measure = AG34401A_MeasureACCurrent($agHandle, $timeout, $range, $resol);





AG34401A_MeasureACVolt

Previous Top Next



* * *



AG34401A_MeasureACVolt



Usage:

$measurement = AG34401A_MeasureACVolt($agHandle, $timeout, $range, $resolution);



Description:

This function performs an AC voltage measurement and returns the result.





Remarks:

This function uses the Agilent IVI instrument drivers for the AG34401A instrument. You also need to load the Agilent COM components.

Communication must previously have been opened using the AG34401A_Init or AG34401A_InitWithOptions function.

A fail is generated if the instrument is unable to make a measurement or times out.



Function arguments



Parameter

Variable Type

Description



$agHandle

Object

Handle to previously opened instrument communication channel.



$timeout

Integer

Number of milliseconds to wait for a measurement before returning a fail result.



$range

Float

The range for the measurement.



$resolution

Float

The resolution for the measurement.





Return parameters



Parameter

Variable Type

Description



$measurement

Float

The AC Voltage measurement.





Example:



// Open communication.

$resource = "GPIB0::11::INSTR";



$agHandle = AG34401A_Init($resource);



// Make an AC Voltage measurement.

$timeout = 1000;

$range = 5;

$resol = 0.001;



$measure = AG34401A_MeasureACVolt($agHandle, $timeout, $range, $resol);





AG34401A_MeasureDCCurrent

Previous Top Next



* * *



AG34401A_MeasureDCCurrent



Usage:

$measurement = AG34401A_MeasureDCCurrent($agHandle, $timeout, $range, $resolution);



Description:

This function performs a DC current measurement and returns the result.





Remarks:

This function uses the Agilent IVI instrument drivers for the AG34401A instrument. You also need to load the Agilent COM components.

Communication must previously have been opened using the AG34401A_Init or AG34401A_InitWithOptions function.

A fail is generated if the instrument is unable to make a measurement or times out.



Function arguments



Parameter

Variable Type

Description



$agHandle

Object

Handle to previously opened instrument communication channel.



$timeout

Integer

Number of milliseconds to wait for a measurement before returning a fail result.



$range

Float

The range for the measurement.



$resolution

Float

The resolution for the measurement.





Return parameters



Parameter

Variable Type

Description



$measurement

Float

The DC current measurement.





Example:



// Open communication.

$resource = "GPIB0::11::INSTR";



$agHandle = AG34401A_Init($resource);



// Make a DC Current measurement.

$timeout = 1000;

$range = 1;

$resol = 0.0001;



$measure = AG34401A_MeasureDCCurrent($agHandle, $timeout, $range, $resol);





AG34401A_MeasureDCVolt

Previous Top Next



* * *



AG34401A_MeasureDCVolt



Usage:

$measurement = AG34401A_MeasureDCVolt($agHandle, $timeout, $range, $resolution);



Description:

This function performs a DC voltage measurement and returns the result.





Remarks:

This function uses the Agilent IVI instrument drivers for the AG34401A instrument. You also need to load the Agilent COM components.

Communication must previously have been opened using the AG34401A_Init or AG34401A_InitWithOptions function.

A fail is generated if the instrument is unable to make a measurement or times out.



Function arguments



Parameter

Variable Type

Description



$agHandle

Object

Handle to previously opened instrument communication channel.



$timeout

Integer

Number of milliseconds to wait for a measurement before returning a fail result.



$range

Float

The range for the measurement.



$resolution

Float

The resolution for the measurement.





Return parameters



Parameter

Variable Type

Description



$measurement

Float

The DC Voltage measurement.





Example:



// Open communication.

$resource = "GPIB0::11::INSTR";



$agHandle = AG34401A_Init($resource);



// Make a DC Voltage measurement.

$timeout = 1000;

$range = 5;

$resol = 0.001;



$measure = AG34401A_MeasureDCVolt($agHandle, $timeout, $range, $resol);





AG34401A_MeasureResistance

Previous Top Next



* * *



AG34401A_MeasureResistance



Usage:

$measurement = AG34401A_MeasureResistance($agHandle, $timeout, $range, $resolution);



Description:

This function performs a resistance measurement and returns the result.





Remarks:

This function uses the Agilent IVI instrument drivers for the AG34401A instrument. You also need to load the Agilent COM components.

Communication must previously have been opened using the AG34401A_Init or AG34401A_InitWithOptions function.

A fail is generated if the instrument is unable to make a measurement or times out.



Function arguments



Parameter

Variable Type

Description



$agHandle

Object

Handle to previously opened instrument communication channel.



$timeout

Integer

Number of milliseconds to wait for a measurement before returning a fail result.



$range

Float

The range for the measurement.



$resolution

Float

The resolution for the measurement.





Return parameters



Parameter

Variable Type

Description



$measurement

Float

The resistance measurement.





Example:



// Open communication.

$resource = "GPIB0::11::INSTR";



$agHandle = AG34401A_Init($resource);



// Make a Resistance measurement.

$timeout = 1000;

$range = 1000;

$resol = 0.1;



$measure = AG34401A_MeasureResistance($agHandle, $timeout, $range, $resol);





AG34401A_SetDisplay

Previous Top Next



* * *



AG34401A_SetDisplay



Usage:

AG34401A_SetDisplay($agHandle, $text);



Description:

This function sets the display text on the instrument.





Remarks:

This function uses the Agilent IVI instrument drivers for the AG34401A instrument. You also need to load the Agilent COM components.

Communication must previously have been opened using the AG34401A_Init or AG34401A_InitWithOptions function.

A fail is generated if the instrument is unable to set the display text.



Function arguments



Parameter

Variable Type

Description



$agHandle

Object

Handle to previously opened instrument communication channel.



$text

String

The text to be displayed on the instrument (13 characters maximum).





Return parameters



Parameter

Variable Type

Description



None





Example:



// Open communication.

$resource = "GPIB0::11::INSTR";



$agHandle = AG34401A_Init($resource);



// Display some text.

$text = "MEASURING";



AG34401A_SetDisplay($agHandle, $text);





AG34410A_Close

Previous Top Next



* * *



AG34410A_Close



Usage:

AG34410A_Close($Handle);



Description:

This function closes the communication with the instrument and releases resources used by the instrument.





Requirements:

· This function uses the Agilent IVI-COM driver which must be installed before using these functions.

Function arguments



Parameter

Variable Type

Description



$Handle

Object

The communcations handle of the instrument returned by the AG34410A_Init function.





Return parameters



Parameter

Variable Type

Description



None





Example:





AG34410A_Close($Handle);





AG34410A_ConfigureDCCurrentRange

Previous Top Next



* * *



AG34410A_ConfigureDCCurrentRange



Usage:

AG34410A_ConfigureDCCurrentRange($Handle,$Range,$Resolution);



Description:

This function initializes the range and resolution setting of the AG34410A multimeter. This function can be used to reset the instruments current range setting to eliminate problems that can occur with the current meter causing a voltage drop in a circuit due to it's internal burden voltage.





Requirements:

· This function uses the Agilent IVI-COM driver which must be installed before using these functions.

Function arguments



Parameter

Variable Type

Description



$Handle

Object

The communcations handle of the instrument returned by the AG34410A_Init function.



$Range

Float

The specified range for the instrument reading.



$Resolution

String

The specified resolution for the instrument.





Allowable values are:

· "LEAST" = Fastest, Least Accurate

· "DEFAULT" = Default Setting

· "BEST" = Slowest, Most Accurate





Return parameters



Parameter

Variable Type

Description



None





Example:





AG34410A_ConfigureDCCurrentRange($Handle,0.00001,"BEST");

// Configures the instrument for 100 uAmp range.





AG34410A_Init

Previous Top Next



* * *



AG34410A_Init



Usage:

$Handle = AG34410A_Init($InstrumentID);



Description:

This function opens, and initializes the Agilent 34410A digital multimeter and prepares it for further operations.





Requirements:

· This function uses the Agilent IVI-COM driver which must be installed before using these functions.



Function arguments



Parameter

Variable Type

Description



$InstrumentID

String

The GPIB address of the Instrument, for example "GPIB0::3::Instr".





Return parameters



Parameter

Variable Type

Description



$Handle

Object

A communications handle for the instrument to pass to subsequent function calls.





Example:





$AG34410A = AG34410A_Init("GPIB0::3::INSTR");





AG34410A_MeasureACCurrent

Previous Top Next



* * *



AG34410A_MeasureACCurrent



Usage:

$Measurement = AG34410A_MeasureACCurrent($Handle,$Range,$Resolution);



Description:

This function performs a AC Current measurement on the Agilent 34410A using the supplied Range and Resolution settings.





Requirements:

· This function uses the Agilent IVI-COM driver which must be installed before using these functions.

Function arguments



Parameter

Variable Type

Description



$Handle

Object

The communcations handle of the instrument returned by the AG34410A_Init function.



$Range

Float

The specified range for the instrument reading. If the sampled value is outside of the range specified, the instrument will autorange automatically. This means that the measurement will take longer to acquire, but will still be an accurate parametric measurement.



$Resolution

String

The specified resolution for the measurement. This parameter specifies the desired accuracy of the measurement to acquire. The more accurate the measurement, the longer the measurement will require.

Allowable values are:

· "LEAST" = Fastest, Least Accurate

· "DEFAULT" = Default Setting

· "BEST" = Slowest, Most Accurate





Return parameters



Parameter

Variable Type

Description



$Measurement

Float

The acquired measurement value.





Example:





$Measurement = AG34410A_MeasureACCurrent($Handle,1,"BEST");





AG34410A_MeasureACVolt

Previous Top Next



* * *



AG34410A_MeasureACVolt



Usage:

$Measurement = AG34410A_MeasureACVolt($Handle,$Range,$Resolution);



Description:

This function performs a AC Voltage measurement on the Agilent 34410A using the supplied Range and Resolution settings.





Requirements:

· This function uses the Agilent IVI-COM driver which must be installed before using these functions.

Function arguments



Parameter

Variable Type

Description



$Handle

Object

The communcations handle of the instrument returned by the AG34410A_Init function.



$Range

Float

The specified range for the instrument reading. If the sampled value is outside of the range specified, the instrument will autorange automatically. This means that the measurement will take longer to acquire, but will still be an accurate parametric measurement.



$Resolution

String

The specified resolution for the measurement. This parameter specifies the desired accuracy of the measurement to acquire. The more accurate the measurement, the longer the measurement will require.

Allowable values are:

· "LEAST" = Fastest, Least Accurate

· "DEFAULT" = Default Setting

· "BEST" = Slowest, Most Accurate





Return parameters



Parameter

Variable Type

Description



$Measurement

Float

The acquired measurement value.





Example:





$Measurement = AG34410A_MeasureACVolt($Handle,1,"BEST");





AG34410A_MeasureDCCurrent

Previous Top Next



* * *



AG34410A_MeasureDCCurrent



Usage:

$Measurement = AG34410A_MeasureDCCurrent($Handle,$Range,$Resolution);



Description:

This function performs a DC Current measurement on the Agilent 34410A using the supplied Range and Resolution settings.





Requirements:

· This function uses the Agilent IVI-COM driver which must be installed before using these functions.

Function arguments



Parameter

Variable Type

Description



$Handle

Object

The communcations handle of the instrument returned by the AG34410A_Init function.



$Range

Float

The specified range for the instrument reading. If the sampled value is outside of the range specified, the instrument will autorange automatically. This means that the measurement will take longer to acquire, but will still be an accurate parametric measurement.



$Resolution

String

The specified resolution for the measurement. This parameter specifies the desired accuracy of the measurement to acquire. The more accurate the measurement, the longer the measurement will require.

Allowable values are:

· "LEAST" = Fastest, Least Accurate

· "DEFAULT" = Default Setting

· "BEST" = Slowest, Most Accurate





Return parameters



Parameter

Variable Type

Description



$Measurement

Float

The acquired measurement value.





Example:





$Measurement = AG34410A_MeasureDCCurrent($Handle,1,"BEST");





AG34410A_MeasureDCVolt

Previous Top Next



* * *



AG34410A_MeasureDCVolt



Usage:

$Measurement = AG34410A_MeasureDCVolt($Handle,$Range,$Resolution);



Description:

This function performs a DC Voltage measurement on the Agilent 34410A using the supplied Range and Resolution settings.





Requirements:

· This function uses the Agilent IVI-COM driver which must be installed before using these functions.

Function arguments



Parameter

Variable Type

Description



$Handle

Object

The communcations handle of the instrument returned by the AG34410A_Init function.



$Range

Float

The specified range for the instrument reading. If the sampled value is outside of the range specified, the instrument will autorange automatically. This means that the measurement will take longer to acquire, but will still be an accurate parametric measurement.



$Resolution

String

The specified resolution for the measurement. This parameter specifies the desired accuracy of the measurement to acquire. The more accurate the measurement, the longer the measurement will require.

Allowable values are:

· "LEAST" = Fastest, Least Accurate

· "DEFAULT" = Default Setting

· "BEST" = Slowest, Most Accurate





Return parameters



Parameter

Variable Type

Description



$Measurement

Float

The acquired measurement value.





Example:





$Measurement = AG34410A_MeasureDCVolt($Handle,1,"BEST");





AG34410A_MeasureResistance

Previous Top Next



* * *



AG34410A_MeasureResistance



Usage:

$Measurement = AG34410A_MeasureResistance($Handle,$Range,$Resolution);



Description:

This function performs a resistance measurement on the Agilent 34410A using the supplied Range and Resolution settings.





Requirements:

· This function uses the Agilent IVI-COM driver which must be installed before using these functions.

Function arguments



Parameter

Variable Type

Description



$Handle

Object

The communcations handle of the instrument returned by the AG34410A_Init function.



$Range

Float

The specified range for the instrument reading. If the sampled value is outside of the range specified, the instrument will autorange automatically. This means that the measurement will take longer to acquire, but will still be an accurate parametric measurement.



$Resolution

String

The specified resolution for the measurement. This parameter specifies the desired accuracy of the measurement to acquire. The more accurate the measurement, the longer the measurement will require.

Allowable values are:

· "LEAST" = Fastest, Least Accurate

· "DEFAULT" = Default Setting

· "BEST" = Slowest, Most Accurate





Return parameters



Parameter

Variable Type

Description



$Measurement

Float

The acquired measurement value.





Example:





$Measurement = AG34410A_MeasureResistance($Handle,1,"BEST");





AG34410A_SetTimeout

Previous Top Next



* * *



AG34410A_SetTimeout



Usage:

AG34410A_SetTimeout($Handle, $Timeout);



Description:

This function sets the timeout value for all measurement functions.





Remarks:

This function uses the Agilent 34410A IVI-COM driver which must be installed before using these functions.

If a measurement can't be completed within the timeout allotted, the function will generate a failure.

The default timeout of the instrument is 2 seconds.

The $Timeout parameter is specified in milliseconds.



Function arguments



Parameter

Variable Type

Description



$Handle

Object

The communcations handle of the instrument returned by the AG34410A_Init function.



$Timeout

Integer

The timeout setting of the instrument specified in milliseconds.





Return parameters



Parameter

Variable Type

Description



None





Example:





// Connect to the instrument.

$visa = "GPIB0::10::INSTR";

$handle = AG34410A_Init($visa);



// Set the timeout value to 10 seconds.

$timeout = 10000;



AG34410A_SetTimeout($handle, $timeout);





AG34970A_Close

Previous Top Next



* * *



AG34970A_Close

Usage:

AG34970A_Close($AgInstance);

Description:

This function uses the Agilent IVI Instrument drivers. In order to use the AG34970A functions in JabilTest, you need to have the Agilent COM components installed.

This function closes the AG34970A and recovers used resources. It does not reset the unit or change it's existing settings. This function returns a passing result if the instrument was closed successfully, otherwise a failure is generated by the script function.

Function Arguments



Parameter

Variable Type

Description



$AgInstance

Object

The COM Object representing the instance of the AG34970A to be closed. Closing the instrument releases all resources.





Return Parameters



Parameter

Variable Type

Description



None





AG34970A_CloseChannelList

Previous Top Next



* * *



AG34970A_CloseChannelList

Usage:

AG34970A_CloseChannelList($AgInstance,$ChannelList);

Description:

This function uses the Agilent IVI Instrument drivers. In order to use the AG34970 functions in JabilTest, you need to have the Agilent COM components installed.

This function closes the channel connections specified in the list on the measurement mainframe.

Function Arguments



Parameter

Variable Type

Description



$AgInstance

Object

A COM Object representing an instance of the AG34970A.



$ChannelList

String

List of channels to close separated by commas.





Return Parameters



Parameter

Variable Type

Description



None





AG34970A_CloseExclusiveChannel

Previous Top Next



* * *



AG34970A_CloseExclusiveChannel

Usage:

AG34970A_CloseExclusiveChannel($AgInstance,$ChannelNumber);

Description:

This function uses the Agilent IVI Instrument drivers. In order to use the AG34970 functions in JabilTest, you need to have the Agilent COM components installed.

This function closes one channel connection on the measurement mainframe.

Function Arguments



Parameter

Variable Type

Description



$AgInstance

Object

A COM Object representing an instance of the AG34970A.



$ChannelNumber

Integer

The channel to close.





Return Parameters



Parameter

Variable Type

Description



None





AG34970A_ConfigureACVolt

Previous Top Next



* * *



AG34970A_ConfigureACVolt

Usage:

AG34970A_ConfigureACVolt($AgInstance,$ChannelNumber,$Range,$Resolution);

Description:

This function uses the Agilent IVI Instrument drivers. In order to use the AG34970 functions in JabilTest, you need to have the Agilent COM components installed.

This function configures the AC voltage measurement subsystem for the specified channel, however it does not begin the actual acquisition process. In order to perform a measurement after the channel has been configured, use the AG34970A_Read function.

In the case of instrument communication failure, or an invalid channel specified, a failure is generated by the function.

Function Arguments



Parameter

Variable Type

Description



$AgInstance

Object

A COM Object representing an instance of the AG34970A.



$ChannelNumber

Integer

The channel to configure for an AC voltage measurement.



$Range

Float

The Range for the measurement channel.



$Resolution

Float

The resolution for the measurement channel.





Return Parameters



Parameter

Variable Type

Description



None





AG34970A_ConfigureDCVolt

Previous Top Next



* * *



AG34970A_ConfigureDCVolt

Usage:

AG34970A_ConfigureDCVolt($AgInstance,$ChannelNumber,$Range,$Resolution);

Description:

This function uses the Agilent IVI Instrument drivers. In order to use the AG34970 functions in JabilTest, you need to have the Agilent COM components installed.

This function configures the DC voltage measurement subsystem for the specified channel, however it does not begin the actual acquisition process. In order to perform a measurement after the channel has been configured, use the AG34970A_Read function.

In the case of instrument communication failure, or an invalid channel specified, a failure is generated by the function.

Function Arguments



Parameter

Variable Type

Description



$AgInstance

Object

A COM Object representing an instance of the AG34970A.



$ChannelNumber

Integer

The channel to configure for a DC voltage measurement.



$Range

Float

The Range for the measurement channel.



$Resolution

Float

The resolution for the measurement channel.





Return Parameters



Parameter

Variable Type

Description



None





AG34970A_ConfigureResistance

Previous Top Next



* * *



AG34970A_ConfigureResistance

Usage:

AG34970A_ConfigureResistance($AgInstance,$ChannelNumber,$Range,$Resolution);

Description:

This function uses the Agilent IVI Instrument drivers. In order to use the AG34970 functions in JabilTest, you need to have the Agilent COM components installed.

This function configures the resistance measurement subsystem for the specified channel, however it does not begin the actual acquisition process. In order to perform a measurement after the channel has been configured, use the AG34970A_Read function.

In the case of instrument communication failure, or an invalid channel specified, a failure is generated by the function.

Function Arguments



Parameter

Variable Type

Description



$AgInstance

Object

A COM Object representing an instance of the AG34970A.



$ChannelNumber

Integer

The channel to configure for a resistance measurement.



$Range

Float

The Range for the measurement channel.



$Resolution

Float

The resolution for the measurement channel.





Return Parameters



Parameter

Variable Type

Description



None





Example(s):

// Set up channel 214 with a 100K range and 1% resolution.

AG34970A_ConfigureResistance($AgInstance, 214, 100E+3, 1000);





AG34970A_DACGetVoltage

Previous Top Next



* * *



AG34970A_DACGetVoltage



Usage:

$voltLevel = AG34970A_DACGetVoltage($AgInstance, $ChannelNumber);





Description:

This function uses the Agilent IVI Instrument drivers. In order to use the AG34970 functions in JabilTest, you need to have the Agilent COM components installed.





This function returns the voltage level from the specified DAC channel.





Remarks:

· Not all modules for an Agilent 34970A mainframe have DAC channels.

· Only channels 04 and 05 are usable for DAC voltages.

Function arguments



Parameter

Variable Type

Description



$AgInstance

Object

A COM Object representing an instance of the AG34970A.



$ChannelNumber

Integer

The number of the channel to set the output line of. This follows standard Agilent 34970A numbering convention (ie. 1st module channels start at 1xx, 2nd module at 2xx, etc).

Only channel x04 and x05 are DAC channels.





Return parameters



Parameter

Variable Type

Description



$voltLevel

Float

The voltage the DAC channel is set to.

Values: -12.00 to +12.00 in 1mV steps.





Example(s):





$AgInstance = AG34970A_Init("GPIB0::9::Instr");





// Read volts on channel 204.

$voltLevel = AG34970A_DACGetVoltage($AgInstance, 204);





AG34970A_DACSetVoltage

Previous Top Next



* * *



AG34970A_DACSetVoltage



Usage:

AG34970A_DACSetVoltage($AgInstance, $ChannelNumber, $voltLevel);





Description:

This function uses the Agilent IVI Instrument drivers. In order to use the AG34970 functions in JabilTest, you need to have the Agilent COM components installed.





This function sets a specified DAC channel to a specified voltage level.





Remarks:

· Not all modules for an Agilent 34970A mainframe have DAC channels.

· Only channels 04 and 05 are usable for DAC voltage output.

Function arguments



Parameter

Variable Type

Description



$AgInstance

Object

A COM Object representing an instance of the AG34970A.



$ChannelNumber

Integer

The number of the channel to set the output line of. This follows standard Agilent 34970A numbering convention (ie. 1st module channels start at 1xx, 2nd module at 2xx, etc).

Only channel x04 and x05 are DAC channels.



$voltLevel

Float

The voltage to set the DAC channel to.

Values: -12.00 to +12.00 in 1mV steps.





Return parameters



Parameter

Variable Type

Description



None.





Example(s):





$AgInstance = AG34970A_Init("GPIB0::9::Instr");





// Output 5 volts on channel 204.

AG34970A_DACSetVoltage($AgInstance, 204, 5);





AG34970_DigitalInputLine

Previous Top Next



* * *



AG34970A_DigitalInputLine



Usage:

$lineIn = AG34970A_DigitalInputLine($AgInstance, $ChannelNumber, $LineNumber);





Description:

This function uses the Agilent IVI Instrument drivers. In order to use the AG34970 functions in JabilTest, you need to have the Agilent COM components installed.





This function reads a digital input line from a specified port (one line on the port) from a digital output module in the Agilent 34970A Mainframe.





Remarks:

· Only the specified line from the port is returned.

· If the port can do input and output, it will be switched to input - any output value will be lost.

Function arguments



Parameter

Variable Type

Description



$AgInstance

Object

A COM Object representing an instance of the AG34970A.



$ChannelNumber

Integer

The number of the channel to read the input line from. This follows standard Agilent 34970A numbering convention (ie. 1st module channels start at 1xx, 2nd module at 2xx, etc).



$LineNumber

Integer

The Line of the channel to read.

Value: 0 to 7.





Return parameters



Parameter

Variable Type

Description



$lineIn

Boolean

The value returned from the specified line.





Example(s):





$AgInstance = AG34970A_Init("GPIB0::9::Instr");

// Read line 1 on port 201.

$lineIn = AG34970A_DigitalInputLine($AgInstance, 201, 1);

// Read line 5 on port 201.

$lineIn = AG34970A_DigitalInputLine($AgInstance, 201, 5);





AG34970A_DigitalInputPort

Previous Top Next



* * *



AG34970A_DigitalInputPort



Usage:

$portIn = AG34970A_DigitalInputPort($AgInstance, $ChannelNumber);





Description:

This function uses the Agilent IVI Instrument drivers. In order to use the AG34970 functions in JabilTest, you need to have the Agilent COM components installed.





This function reads a digital input port (8 lines or 1 byte) from a digital input module in the Agilent 34970A Mainframe.





Remarks:

· All lines in the port are read at once.

· If the port can do input and output, it will be switched to input - any output value will be lost.

Function arguments



Parameter

Variable Type

Description



$AgInstance

Object

A COM Object representing an instance of the AG34970A.



$ChannelNumber

Integer

The number of the channel to read the input port of. This follows standard Agilent 34970A numbering convention (ie. 1st module channels start at 1xx, 2nd module at 2xx, etc).





Return parameters



Parameter

Variable Type

Description



$portIn

Integer

The value read from the specified port.





Example(s):





$AgInstance = AG34970A_Init("GPIB0::9::Instr");

// Read port from channel 302.

$portIn = AG34970A_DigitalInputPort($AgInstance, 302);





AG34970A_DigitalOutputLine

Previous Top Next



* * *



AG34970A_DigitalOutputLine



Usage:

AG34970A_DigitalOutputLine($AgInstance, $ChannelNumber, $LineNumber, $Value);





Description:

This function uses the Agilent IVI Instrument drivers. In order to use the AG34970 functions in JabilTest, you need to have the Agilent COM components installed.





This function sets a digital output line on a specified port (one line without changing the other lines on the port) on a digital output module in the Agilent 34970A Mainframe to a specified value.





Remarks:

· Only the specified line in the port is set. The other lines will not be changed.

· The line value is not case sensitive.

· If the port can do input and output, it will be switched to output.

Function arguments



Parameter

Variable Type

Description



$AgInstance

Object

A COM Object representing an instance of the AG34970A.



$ChannelNumber

Integer

The number of the channel to set the output line of. This follows standard Agilent 34970A numbering convention (ie. 1st module channels start at 1xx, 2nd module at 2xx, etc).



$LineNumber

Integer

The Line of the channel to set.

Value: 0 to 7.



$Value

String

The value to set the line to.

Values: 0, 1, "On", "Off", "True", "False"





Return parameters



Parameter

Variable Type

Description



None.





Example(s):





$AgInstance = AG34970A_Init("GPIB0::9::Instr");

// Turn on line 1 on port 201.

Ag34970A_DigitalOutputLine($AgInstance, 201, 1, "On");

// Turn off line 5 on port 201.

AG34970A_DigitalOutputLine($AgInstance, 201, 5, 0);





AG34970A_DigitalOutputPort

Previous Top Next



* * *



AG34970A_DigitalOutputPort



Usage:

AG34970A_DigitalOutputPort($AgInstance, $ChannelNumber, $ByteOut);





Description:

This function uses the Agilent IVI Instrument drivers. In order to use the AG34970 functions in JabilTest, you need to have the Agilent COM components installed.





This function sets a digital output port (8 lines or 1 byte) on a digital output module in the Agilent 34970A Mainframe to a specified value.





Remarks:

· All lines in the port are set at once. Any existing output values will be overwritten.

· If the port can do input and output, it will be switched to output.

Function arguments



Parameter

Variable Type

Description



$AgInstance

Object

A COM Object representing an instance of the AG34970A.



$ChannelNumber

Integer

The number of the channel to set the output port of. This follows standard Agilent 34970A numbering convention (ie. 1st module channels start at 1xx, 2nd module at 2xx, etc).



$ByteOut

Integer

The value to set the specified port to.





Return parameters



Parameter

Variable Type

Description



None.





Example(s):





$AgInstance = AG34970A_Init("GPIB0::9::Instr");

// Turn on lines 0, 1, 4 and 6 (01010011).

AG34970A_DigitalOutputPort($AgInstance, 302, 83);





AG34970A_Init

Previous Top Next



* * *



AG34970A_Init



Usage:

$agHandle = AG34970A_Init($resourceString);





Description:

This function opens communications to the Agilent 34970A. It does not reset the unit or change any of its existing settings. I grabs an instance of the COM component to use in further test script operations. This function returns a pass result if the instrument communication was successfully opened, a fail result otherwise.





Remarks:

This function uses the Agilent IVI instrument drivers. You need to have the Agilent COM components installed (included in the Agilent IO Suite).

This function will initialize communications with Agilent 34970A and 34972A instruments.

Function arguments



Parameter

Variable Type

Description



$resourceString

String

A VISA resource string identifying the instrument. For example: "GPIB0::9::INSTR".





Return parameters



Parameter

Variable Type

Description



$agHandle

Object

A handle to this instance of the AG34970A driver that can be passed to other AG34970A script functions.





Example(s):





// Get column 2 from a 2 dimensional array.

$resourceString = "GPIB0::9::INSTR";

$agHandle = AG34970A_Init($resourceString);





AG34970A_MeasureACCurrent

Previous Top Next



* * *



AG34970A_MeasureACCurrent

Usage:

$Measurement = AG34970A_MeasureACCurrent($AgInstance,$ChannelNumber,$Range,$Resolution);

Description:

This function uses the Agilent IVI Instrument drivers. In order to use the AG34970 functions in JabilTest, you need to have the Agilent COM components installed.

This function takes one AC Current measurement on the specified channel and returns the measurement. In the case of instrument communication failure, or an invalid channel specified, a failure is generated by the function.

Function Arguments



Parameter

Variable Type

Description



$AgInstance

Object

A COM Object representing an instance of the AG34970A.



$ChannelNumber

Integer

The channel on which to take the measurement.



$Range

Float

The Range for the measurement channel.



$Resolution

Float

The resolution for the measurement channel.





Return Parameters



Parameter

Variable Type

Description



$Measurement

Float

The AC Current measurement from the specified channel.





AG34970A_MeasureACVolt

Previous Top Next



* * *



AG34970A_MeasureACVolt

Usage:

$Measurement = AG34970A_MeasureACVolt($AgInstance,$ChannelNumber,$Range,$Resolution);

Description:

This function uses the Agilent IVI Instrument drivers. In order to use the AG34970 functions in JabilTest, you need to have the Agilent COM components installed.

This function takes one AC voltage measurement on the specified channel and returns the measurement. In the case of instrument communication failure, or an invalid channel specified, a failure is generated by the function.

Function Arguments



Parameter

Variable Type

Description



$AgInstance

Object

A COM Object representing an instance of the AG34970A.



$ChannelNumber

Integer

The channel on which to take the measurement.



$Range

Float

The Range for the measurement channel.



$Resolution

Float

The resolution for the measurement channel.





Return Parameters



Parameter

Variable Type

Description



$Measurement

Float

The AC Voltage measurement from the specified channel.





AG34970A_MeasureDCCurrent

Previous Top Next



* * *



AG34970A_MeasureDCCurrent

Usage:

$Measurement = AG34970A_MeasureDCCurrent($AgInstance,$ChannelNumber,$Range,$Resolution);

Description:

This function uses the Agilent IVI Instrument drivers. In order to use the AG34970 functions in JabilTest, you need to have the Agilent COM components installed.

This function takes one DC Current measurement on the specified channel and returns the measurement. In the case of instrument communication failure, or an invalid channel specified, a failure is generated by the function.

Function Arguments



Parameter

Variable Type

Description



$AgInstance

Object

A COM Object representing an instance of the AG34970A.



$ChannelNumber

Integer

The channel on which to take the measurement.



$Range

Float

The Range for the measurement channel.



$Resolution

Float

The resolution for the measurement channel.





Return Parameters



Parameter

Variable Type

Description



$Measurement

Float

The DC Current measurement from the specified channel.





AG34970A_MeasureDCVolt

Previous Top Next



* * *



AG34970A_MeasureDCVolt

Usage:

$Measurement = AG34970A_MeasureDCVolt($AgInstance,$ChannelNumber,$Range,$Resolution);

Description:

This function uses the Agilent IVI Instrument drivers. In order to use the AG34970 functions in JabilTest, you need to have the Agilent COM components installed.

This function takes one DC voltage measurement on the specified channel and returns the measurement. In the case of instrument communication failure, or an invalid channel specified, a failure is generated by the function.

Function Arguments



Parameter

Variable Type

Description



$AgInstance

Object

A COM Object representing an instance of the AG34970A.



$ChannelNumber

Integer

The channel on which to take the measurement.



$Range

Float

The Range for the measurement channel.



$Resolution

Float

The resolution for the measurement channel.





Return Parameters



Parameter

Variable Type

Description



$Measurement

Float

The DC Voltage measurement from the specified channel.





AG34970A_MeasureFrequency

Previous Top Next



* * *



AG34970A_MeasureFrequency

Usage:

$Measurement = AG34970A_MeasureFrequency($AgInstance,$ChannelNumber,$Range,$Resolution);

Description:

This function uses the Agilent IVI Instrument drivers. In order to use the AG34970 functions in JabilTest, you need to have the Agilent COM components installed.

This function takes one Frequency measurement on the specified channel and returns the measurement. In the case of instrument communication failure, or an invalid channel specified, a failure is generated by the function.

Function Arguments



Parameter

Variable Type

Description



$AgInstance

Object

A COM Object representing an instance of the AG34970A.



$ChannelNumber

Integer

The channel on which to take the measurement.



$Range

Float

The Range for the measurement channel.



$Resolution

Float

The resolution for the measurement channel.





Return Parameters



Parameter

Variable Type

Description



$Measurement

Float

The Frequency measurement from the specified channel.





AG34970A_MeasurePeriod

Previous Top Next



* * *



AG34970A_MeasurePeriod

Usage:

$Measurement = AG34970A_MeasurePeriod($AgInstance,$ChannelNumber,$Range,$Resolution);

Description:

This function uses the Agilent IVI Instrument drivers. In order to use the AG34970 functions in JabilTest, you need to have the Agilent COM components installed.

This function takes one Period measurement on the specified channel and returns the measurement. In the case of instrument communication failure, or an invalid channel specified, a failure is generated by the function.

Function Arguments



Parameter

Variable Type

Description



$AgInstance

Object

A COM Object representing an instance of the AG34970A.



$ChannelNumber

Integer

The channel on which to take the measurement.



$Range

Float

The Range for the measurement channel.



$Resolution

Float

The resolution for the measurement channel.





Return Parameters



Parameter

Variable Type

Description



$Measurement

Float

The Period measurement from the specified channel.





AG34970A_MeasureResistance

Previous Top Next



* * *



AG34970A_MeasureResistance

Usage:

$Measurement = AG34970A_MeasureResistance($AgInstance,$ChannelNumber,$Range,$Resolution);

Description:

This function uses the Agilent IVI Instrument drivers. In order to use the AG34970 functions in JabilTest, you need to have the Agilent COM components installed.

This function takes one two-wire Resistance measurement on the specified channel and returns the measurement. In the case of instrument communication failure, or an invalid channel specified, a failure is generated by the function.

Function Arguments



Parameter

Variable Type

Description



$AgInstance

Object

A COM Object representing an instance of the AG34970A.



$ChannelNumber

Integer

The channel on which to take the measurement.



$Range

Float

The Range for the measurement channel.



$Resolution

Float

The resolution for the measurement channel.





Return Parameters



Parameter

Variable Type

Description



$Measurement

Float

The two-wire resistance measurement from the specified channel.





AG34970A_MeasureTemperature

Previous Top Next



* * *



AG34970A_MeasureTemperature

Usage:

$Measurement = AG34970A_MeasureTemperature($AgInstance,$ChannelNumber,$ThermocoupleType,$Resolution);

Description:

This function uses the Agilent IVI Instrument drivers. In order to use the AG34970 functions in JabilTest, you need to have the Agilent COM components installed.

This function takes one temperature measurement on the specified channel and returns the measurement. In the case of instrument communication failure, or an invalid channel specified, a failure is generated by the function.

Function Arguments



Parameter

Variable Type

Description



$AgInstance

Object

A COM Object representing an instance of the AG34970A.



$ChannelNumber

Integer

The channel on which to take the measurement.



$ThermocoupleType

String

Specifies the type of thermocouple installed on the measurement channel. Allowable values are:

· "BTYPE"

· "ETYPE"

· "JTYPE"

· "KTYPE"

· "NTYPE"

· "RTYPE"

· "STYPE"

· "TTYPE"



$Resolution

Float

The resolution for the measurement channel.





Return Parameters



Parameter

Variable Type

Description



$Measurement

Float

Returns the Temperature Measurement in Degrees Celsius





Example:

AG34970A_MeasureTemperature($Handle,101,"RTYPE",0.1);





AG34970A_OpenChannelList

Previous Top Next



* * *



AG34970A_OpenChannelList



Usage:

AG34970A_OpenChannelList($AgInstance, $channelList);





Description:

This function will open the specified channels on a multiplexer or switch module in the Agilent 34970A.





Remarks:

This function uses the Agilent IVI instrument drivers. You need to have the Agilent COM components installed (included in the Agilent IO Suite).

The list of channels to open is a comma separated list of channels and ranges. Ranges are specified using a colon (:). For example to open channels 101 to 105, the range would be 101:105.

Function arguments



Parameter

Variable Type

Description



$AgInstance

Object

A COM object representing an instance of the AG34970A that was opened with the AG34970A_Init function.



$channelList

String

Comma separated list of channels and ranges of channels to open.





Return parameters



Parameter

Variable Type

Description



none





Example(s):

// Initialize communication with the 34970A.

$resourceStr = "GPIB0::9:INSTR";





$AgInst = AG34970A_Init($resourceStr);





// Open channels 101 to 105 and 202 and 205 to 208.

$chanList = "101:105,202,205:208";





AG34970A_OpenChannelList($AgInst, $chanList);





AG34970A_Read

Previous Top Next



* * *



AG34970A_Read

Usage:

$Measurement = AG34970A_Read($AgInstance);

Description:

This function uses the Agilent IVI Instrument drivers. In order to use the AG34970A functions in JabilTest, you need to have the Agilent COM components installed.

This function performs the 'Read' command on the Agilent 34970A which initiates a scan, and a fetch of the currently configured measurement.

Before using the 'Read' function, you must first configure the measurement type, channel, and settings for the desired measurement using one of the 'AG34970A_ConfigureXXX' functions.

Function Arguments



Parameter

Variable Type

Description



$AgInstance

Object

A COM Object representing an instance of the AG34970A.





Return Parameters



Parameter

Variable Type

Description



$Measurement

Float

The measurement returned from the instrument.





AG34970A_ScanAbort

Previous Top Next



* * *



AG34970A_ScanAbort

Usage:

AG34970A_ScanAbort($AgInstance);

Description:

This function uses the Agilent IVI Instrument drivers. In order to use the AG34970A functions in JabilTest, you need to have the Agilent COM components installed.

This function aborts a scan command on the Agilent 34970A. This command should be issued prior to changing any scan settings.

Function Arguments



Parameter

Variable Type

Description



$AgInstance

Object

A COM Object representing an instance of the AG34970A.





Return Parameters



Parameter

Variable Type

Description



None

-





Example:

$VoltMeter = AG34970A_Init($VoltMeterResourceString);

AG34970A_ScanAbort($VoltMeter);

AG34970A_ConfigureDCVolt($VoltMeter,101,1.0,4.5);

AG34970A_ConfigureDCVolt($VoltMeter,102,1.0,4.5);

AG34970A_ConfigureDCVolt($VoltMeter,103,1.0,4.5);

AG34970A_ConfigureDCVolt($VoltMeter,104,1.0,4.5);

AG34970A_ScanSetup($VoltMeter,"101,102,103,104","Timer",1.0,10000);

AG34970A_ScanInitiate($VoltMeter);

// Delay ......

AG34970A_ScanAbort($VoltMeter);

$MeasurementDataTable = AG34970A_ScanFetch($VoltMeter);

DataTable_ShowInWindow($MeasurementDataTable);

AG34970A_Close($VoltMeter);





AG34970A_ScanFetch

Previous Top Next



* * *



AG34970A_ScanFetch

Usage:

$DataTable = AG34970A_ScanFetch($AgInstance);

Description:

This function uses the Agilent IVI Instrument drivers. In order to use the AG34970A functions in JabilTest, you need to have the Agilent COM components installed.

This function returns the measurement results from a scan command on the Agilent 34970A.

Note: This function does not destroy the measurement memory within the instrument. The measurement memory will remain until a new scan has started. This function can be called during a scan. You can store up to 50,000 readings in non-volatile memory during a scan. From the instrument front panel, you can view the last 100 readings. If memory overflows (the MEM annunciator on the instrument will turn on), a status register bit is set and new readings will overwrite the first readings stored (the most recent readings are always preserved).

Each time you start a new scan, the instrument clears all readings (including alarm data) stored in reading memory from the previous scan. Therefore, the contents of memory are always from the most recent scan.

The instrument also clears all readings in memory after a reset.

Function Arguments



Parameter

Variable Type

Description



$AgInstance

Object

A COM Object representing an instance of the AG34970A.





Return Parameters



Parameter

Variable Type

Description



$DataTable

Object

A DataTable containing the measurement results, measurement type, channel number, elapsed time and alarms.





Example:

$VoltMeter = AG34970A_Init($VoltMeterResourceString);

AG34970A_ScanAbort($VoltMeter);

AG34970A_ConfigureDCVolt($VoltMeter,101,1.0,4.5);

AG34970A_ConfigureDCVolt($VoltMeter,102,1.0,4.5);

AG34970A_ConfigureDCVolt($VoltMeter,103,1.0,4.5);

AG34970A_ConfigureDCVolt($VoltMeter,104,1.0,4.5);

AG34970A_ScanSetup($VoltMeter,"101,102,103,104","Timer",1.0,10000);

AG34970A_ScanInitiate($VoltMeter);

// Delay ......

AG34970A_ScanAbort($VoltMeter);

$MeasurementDataTable = AG34970A_ScanFetch($VoltMeter);

DataTable_ShowInWindow($MeasurementDataTable);

AG34970A_Close($VoltMeter);





AG34970A_ScanInitiate

Previous Top Next



* * *



AG34970A_ScanInitiate

Usage:

AG34970A_ScanInitiate($AgInstance);

Description:

This function uses the Agilent IVI Instrument drivers. In order to use the AG34970A functions in JabilTest, you need to have the Agilent COM components installed.

This function starts the previously configured scan.

Function Arguments



Parameter

Variable Type

Description



$AgInstance

Object

A COM Object representing an instance of the AG34970A.





Return Parameters



Parameter

Variable Type

Description



None

-





Example:

$VoltMeter = AG34970A_Init($VoltMeterResourceString);

AG34970A_ScanAbort($VoltMeter);

AG34970A_ConfigureDCVolt($VoltMeter,101,1.0,4.5);

AG34970A_ConfigureDCVolt($VoltMeter,102,1.0,4.5);

AG34970A_ConfigureDCVolt($VoltMeter,103,1.0,4.5);

AG34970A_ConfigureDCVolt($VoltMeter,104,1.0,4.5);

AG34970A_ScanSetup($VoltMeter,"101,102,103,104","Timer",1.0,10000);

AG34970A_ScanInitiate($VoltMeter);

// Delay ......

AG34970A_ScanAbort($VoltMeter);

$MeasurementDataTable = AG34970A_ScanFetch($VoltMeter);

DataTable_ShowInWindow($MeasurementDataTable);

AG34970A_Close($VoltMeter);





AG34970A_ScanSetup

Previous Top Next



* * *



AG34970A_ScanSetup

Usage:

AG34970A_ScanSetup($AgInstance,$ScanList,$ScanType,$TimerDelay,$SweepCount);

Description:

This function uses the Agilent IVI Instrument drivers. In order to use the AG34970A functions in JabilTest, you need to have the Agilent COM components installed.

This function configures the scan parameters.

Function Arguments



Parameter

Variable Type

Description



$AgInstance

Object

A COM Object representing an instance of the AG34970A.



$ScanList

String

List of channels to scan separated by commas.



$ScanType

String

"Immediate" or "Timer" are the only allowed values. Immediate repeats the configured sweep immediately and Timer configures a sweep that will repeat based on the $TimerDelay value.



$TimerDelay

Double

If $ScanType = "Timer", this value is the delay between sweeps. It has a range of (0 - 359999) in seconds.



$SweepCount

Integer

A sweep is a complete measurement cycle through the provided $ScanList. The $SweepCount indicates how many sweeps of the scan list. It has a range of (0 - 50000). 50000 represents the number of measurements the instrument's memory can hold.





Return Parameters



Parameter

Variable Type

Description



None

-





Example:

$VoltMeter = AG34970A_Init($VoltMeterResourceString);

AG34970A_ScanAbort($VoltMeter);

AG34970A_ConfigureDCVolt($VoltMeter,101,1.0,4.5);

AG34970A_ConfigureDCVolt($VoltMeter,102,1.0,4.5);

AG34970A_ConfigureDCVolt($VoltMeter,103,1.0,4.5);

AG34970A_ConfigureDCVolt($VoltMeter,104,1.0,4.5);

AG34970A_ScanSetup($VoltMeter,"101,102,103,104","Timer",1.0,10000);

AG34970A_ScanInitiate($VoltMeter);

// Delay ......

AG34970A_ScanAbort($VoltMeter);

$MeasurementDataTable = AG34970A_ScanFetch($VoltMeter);

DataTable_ShowInWindow($MeasurementDataTable);

AG34970A_Close($VoltMeter);





AG34980A_Close

Previous Top Next



* * *



AG34980A_Close



Usage:

AG34980A_Close($agInstance);



Description:

This function closes the AG34980A and recovers used resources. It does not reset the unit or change it's existing settings. This function returns a passing result if the instrument can be closed successfully, otherwise a failure is generated by the script function.





Remarks:

Communication to the instrument must previously have been opened with the AG34980A_Init function.

This function uses the Agilent IVI Instrument drivers. In order to use the AG34980A functions, you need to have the Agilent COM components installed.



Function arguments



Parameter

Variable Type

Description



$agInstance

Object

The handle representing the instance of the AG34980A to be closed. Closing the instrument releases all resources





Return parameters



Parameter

Variable Type

Description



None





Example:





// Open and Close communication with the instrument.

$resource = "GPIB0::11::INSTR";

$agHandle = AG34980A_Init($resource);



AG34980A_Close($agHandle);





AG34980A_CloseChannel

Previous Top Next



* * *



AG34980A_CloseChannel



Usage:

AG34980A_CloseChannel($InstrumentHandle,$ChannelList);





Description:





This function closes the channels specified in the $ChannelList argument.

Function arguments



Parameter

Variable Type

Description



$InstrumentHandle

Object

The handle of the instrument returned from the AG34980A_Init function



$ChannelList

String

The channel list to close.





Return parameters



Parameter

Variable Type

Description



None





Supported Instruments

Agilent 34980A Measurement mainframe, and all current modules.





AG34980A_CloseExclusiveChannel

Previous Top Next



* * *



AG34980A_CloseExclusiveChannel



Usage:

AG34980A_CloseExclusiveChannel($AgInstance, $ChannelList);



Description:

This function opens all channels on the specified module and closes the channels in the channel list.



Remarks:

This function uses the Agilent IVI Instrument drivers. In order to use the AG34980A functions, you need to have the Agilent COM components installed.

Communication to the instrument must previously have been opened with the AG34980A_Init function.

In the case of instrument communication failure, or an invalid channel specified, a failure is generated by the function.

This function works with the following modules:

34921A through 34925A Multiplexer Modules

34931A through 34933A Matrix Modules

34937A and 34938A GP Switch Modules

34941A and 34942A RF Multiplexer Modules

34945A Microwave Switch Driver

34946A and 34947A Microwave Switch Modules





Function arguments



Parameter

Variable Type

Description



$agInstance

Object

The handle representing the instance of the AG34980A that was previously opened using AG34980A_Init.



$channelList

String

The list of channels to close.





Return parameters



Parameter

Variable Type

Description



None





Example:





$resource = "GPIB0::11::INSTR"; // The VISA resource string.

$agHandle = AG34980A_Init($resource);



$channelNum = 3006;

AG34980A_CloseExclusiveChannel($agHandle, $channelNum);





AG34980A_ConfigureCurrentAC

Previous Top Next



* * *



AG34980A_ConfigureCurrentAC



Usage:

AG34980A_ConfigureCurrentAC($agInstance, $channelNumber, $range, $resolution);



Description:

This function prepares the AC Current measurement on the specified channel but does not take a measurement. This function can be used to adjust the burden voltage of the current channel before taking a measurement.



Remarks:

This function uses the Agilent IVI Instrument drivers. In order to use the AG34980A functions, you need to have the Agilent COM components installed.



Communication to the instrument must previously have been opened with the AG34980A_Init function.



In the case of instrument communication failure, or an invalid channel specified, a failure is generated by the function.



Function arguments



Parameter

Variable Type

Description



$agInstance

Object

The handle representing the instance of the AG34980A that was previously opened using AG34980A_Init.



$channelNumber

Integer

The channel on which to take the measurement.



$range

Float

The measurement range. Set to a negative number for auto-ranging.



$resolution

String

A text string indicating the measurement resolution. Supported strings are: "BEST"

"DEFAULT"

"LEAST"





Return parameters



Parameter

Variable Type

Description



None





Example:





$resource = "GPIB0::11::INSTR"; // The VISA resource string.

$agHandle = AG34980A_Init($resource);



$channelNum = 3006;

$range = 5.0;

$resolution = "BEST";



AG34980A_ConfigureCurrentAC($agHandle, $channelNum, $range, $resolution);





AG34980A_ConfigureCurrentDC

Previous Top Next



* * *



AG34980A_ConfigureCurrentDC



Usage:

AG34980A_ConfigureCurrentDC($agInstance, $channelNumber, $range, $resolution);



Description:

This function prepares the DC Current measurement on the specified channel but does not take a measurement. This function can be used to adjust the burden voltage of the current channel before taking a measurement.



Remarks:

This function uses the Agilent IVI Instrument drivers. In order to use the AG34980A functions, you need to have the Agilent COM components installed.



Communication to the instrument must previously have been opened with the AG34980A_Init function.



In the case of instrument communication failure, or an invalid channel specified, a failure is generated by the function.



Function arguments



Parameter

Variable Type

Description



$agInstance

Object

The handle representing the instance of the AG34980A that was previously opened using AG34980A_Init.



$channelNumber

Integer

The channel on which to take the measurement.



$range

Float

The measurement range. Set to a negative number for auto-ranging.



$resolution

String

A text string indicating the measurement resolution. Supported strings are: "BEST"

"DEFAULT"

"LEAST"





Return parameters



Parameter

Variable Type

Description



None





Example:





$resource = "GPIB0::11::INSTR"; // The VISA resource string.

$agHandle = AG34980A_Init($resource);



$channelNum = 3006;

$range = 5.0;

$resolution = "BEST";



AG34980A_ConfigureCurrentDC($agHandle, $channelNum, $range, $resolution);





AG34980A_Init

Previous Top Next



* * *



AG34980A_Init



Usage:

$agInstance = AG34980A_Close($resourceString);





Description:

This function initializes the AG34980A for operation. It does not reset the unit or change it's existing settings. It simply grabs an instance of the COM component to use in further test script operations.





Remarks:

This function uses the Agilent IVI Instrument drivers. In order to use the AG34980A functions, you need to have the Agilent COM components installed.

This function returns a passing result if the instrument can be initialized successfully, otherwise a failure is generated by the script function.

Function Arguments



Parameter

Variable Type

Description



$resourceString

String

The resource string identifying the instrument.





Return parameters



Parameter

Variable Type

Description



$agInstance

Object

The handle representing the instance of the AG34980A for use in other script functions.





Example:





$resource = "GPIB0::11::INSTR"; // The VISA resource string.

$agHandle = AG34980A_Init($resource);





AG34980A_MeasureCurrentAC

Previous Top Next



* * *



AG34980A_MeasureCurrentAC



Usage:

$measurement = AG34980A_MeasureCurrentAC($agInstance, $channelNumber, $range, $resolution);





Description:

This function takes an AC Current measurement on the specified channel and returns the measurement.





Remarks:

This function uses the Agilent IVI Instrument drivers. In order to use the AG34980A functions, you need to have the Agilent COM components installed.

Communication to the instrument must previously have been opened with the AG34980A_Init function.

In the case of instrument communication failure, or an invalid channel specified, a failure is generated by the function.

Function Arguments



Parameter

Variable Type

Description



$agInstance

Object

The handle representing the instance of the AG34980A to obtain the measurement from.



$channelNumber

Integer

The channel on which to take the measurement.



$range

Float

The measurement range. Set to a negative number for auto-ranging.



$resolution

String

A text string indicating the measurement resolution. Supported strings are:

· "BEST"

· "DEFAULT"

· "LEAST"





Return parameters



Parameter

Variable Type

Description



$measurement

Float

The AC Current measured on the specified channel.





Example:





$resource = "GPIB0::11::INSTR"; // The VISA resource string.

$agHandle = AG34980A_Init($resource);





$channelNum = 3005;

$range = 5.0;

$resolution = "BEST";





$measure = AG34980A_MeasureCurrentAC($agHandle, $channelNum, $range, $resolution);





AG34980A_MeasureCurrentDC

Previous Top Next



* * *



AG34980A_MeasureCurrentDC



Usage:

$measurement = AG34980A_MeasureCurrentDC($agInstance, $channelNumber, $range, $resolution);





Description:

This function takes a DC Current measurement on the specified channel and returns the measurement.





Remarks:

This function uses the Agilent IVI Instrument drivers. In order to use the AG34980A functions, you need to have the Agilent COM components installed.

Communication to the instrument must previously have been opened with the AG34980A_Init function.

In the case of instrument communication failure, or an invalid channel specified, a failure is generated by the function.

Function Arguments



Parameter

Variable Type

Description



$agInstance

Object

The handle representing the instance of the AG34980A to obtain the measurement from.



$channelNumber

Integer

The channel on which to take the measurement.



$range

Float

The measurement range. Set to a negative number for auto-ranging.



$resolution

String

A text string indicating the measurement resolution. Supported strings are:

· "BEST"

· "DEFAULT"

· "LEAST"





Return parameters



Parameter

Variable Type

Description



$measurement

Float

The DC Current measured on the specified channel.





Example:





$resource = "GPIB0::11::INSTR"; // The VISA resource string.

$agHandle = AG34980A_Init($resource);





$channelNum = 3005;

$range = 5.0;

$resolution = "BEST";





$measure = AG34980A_MeasureCurrentDC($agHandle, $channelNum, $range, $resolution);





AG34980A_MeasureFrequency

Previous Top Next



* * *



AG34980A_MeasureFrequency



Usage:

$measurement = AG34980A_MeasureFrequency($agInstance, $channelNumber, $range, $resolution);





Description:

This function takes a Frequency measurement on the specified channel and returns the measurement.





Remarks:

This function uses the Agilent IVI Instrument drivers. In order to use the AG34980A functions, you need to have the Agilent COM components installed.

Communication to the instrument must previously have been opened with the AG34980A_Init function.

In the case of instrument communication failure, or an invalid channel specified, a failure is generated by the function.

Function Arguments



Parameter

Variable Type

Description



$agInstance

Object

The handle representing the instance of the AG34980A to obtain the measurement from.



$channelNumber

Integer

The channel on which to take the measurement.



$range

Float

The measurement range. Set to a negative number for auto-ranging.



$resolution

String

A text string indicating the measurement resolution. Supported strings are:

· "BEST"

· "DEFAULT"

· "LEAST"





Return parameters



Parameter

Variable Type

Description



$measurement

Float

The Frequency measured on the specified channel.





Example:





$resource = "GPIB0::11::INSTR"; // The VISA resource string.

$agHandle = AG34980A_Init($resource);





$channelNum = 3005;

$range = 5.0;

$resolution = "BEST";





$measure = AG34980A_MeasureFrequency($agHandle, $channelNum, $range, $resolution);





AG34980A_MeasurePeriod

Previous Top Next



* * *



AG34980A_MeasurePeriod



Usage:

$measurement = AG34980A_MeasureCurrentDC($agInstance, $channelNumber, $range, $resolution);





Description:

This function takes a Period measurement on the specified channel and returns the measurement.





Remarks:

This function uses the Agilent IVI Instrument drivers. In order to use the AG34980A functions, you need to have the Agilent COM components installed.

Communication to the instrument must previously have been opened with the AG34980A_Init function.

In the case of instrument communication failure, or an invalid channel specified, a failure is generated by the function.

Function Arguments



Parameter

Variable Type

Description



$agInstance

Object

The handle representing the instance of the AG34980A to obtain the measurement from.



$channelNumber

Integer

The channel on which to take the measurement.



$range

Float

The measurement range.



$resolution

String

A text string indicating the measurement resolution. Supported strings are:

· "BEST"

· "DEFAULT"

· "LEAST"





Return parameters



Parameter

Variable Type

Description



$measurement

Float

The Period measured on the specified channel.





Example:





$resource = "GPIB0::11::INSTR"; // The VISA resource string.

$agHandle = AG34980A_Init($resource);





$channelNum = 3005;

$range = 5.0;

$resolution = "BEST";





$measure = AG34980A_MeasurePeriod($agHandle, $channelNum, $range, $resolution);





AG34980A_MeasureResistance

Previous Top Next



* * *



AG34980A_MeasureResistance



Usage:

$measurement = AG34980A_MeasureResistance($agInstance, $channelNumber, $range, $resolution);



Description:

This function takes a two-wire resistance measurement on the specified channel and returns the measurement.



Remarks:

This function uses the Agilent IVI Instrument drivers. In order to use the AG34980A functions, you need to have the Agilent COM components installed.



Communication to the instrument must previously have been opened with the AG34980A_Init function.



In the case of instrument communication failure, or an invalid channel specified, a failure is generated by the function.



Function arguments



Parameter

Variable Type

Description



$agInstance

Object

The handle representing the instance of the AG34980A that was previously opened using AG34980A_Init.



$channelNumber

Integer

The channel on which to take the measurement.



$range

Float

The measurement range. Set to a negative number for auto-ranging.



$resolution

String

A text string indicating the measurement resolution. Supported strings are: "BEST"

"DEFAULT"

"LEAST"





Return parameters



Parameter

Variable Type

Description



$measurement

Float

The two-wire resistance measured on the specified channel.





Example:





$resource = "GPIB0::11::INSTR"; // The VISA resource string.

$agHandle = AG34980A_Init($resource);



$channelNum = 3006;

$range = 5.0;

$resolution = "BEST";



$measure = AG34980A_MeasureResistance($agHandle, $channelNum, $range, $resolution);





AG34980A_MeasureTemperature

Previous Top Next



* * *



AG34980A_MeasureTemperature



Usage:

$measurement = AG34980A_MeasureCurrentDC($agInstance, $channelNumber, $sensorType, $resolution);





Description:

This function takes a temperature measurement on the specified channel with an attached temperature sensor and returns the measurement.





Remarks:

This function uses the Agilent IVI Instrument drivers. In order to use the AG34980A functions, you need to have the Agilent COM components installed.

Communication to the instrument must previously have been opened with the AG34980A_Init function.

In the case of instrument communication failure, or an invalid channel specified, a failure is generated by the function.

The temperature sensor can be any of the supported thermistors or thermocouples.

Function Arguments



Parameter

Variable Type

Description



$agInstance

Object

The handle representing the instance of the AG34980A to obtain the measurement from.



$channelNumber

Integer

The channel on which to take the measurement.



$sensorType

String

A string indicating the sensor type used on the channel.

Allowable thermistor values are:

· "10000"

· "5000"

· "2252"

Allowable thermocouple types are:

"B","E","J","K","N","R","S", and "T"



$resolution

String

A text string indicating the measurement resolution. Supported strings are:

· "BEST"

· "DEFAULT"

· "LEAST"





Return parameters



Parameter

Variable Type

Description



$measurement

Float

The DC Current measured on the specified channel.





Example:





$resource = "GPIB0::11::INSTR"; // The VISA resource string.

$agHandle = AG34980A_Init($resource);





$channelNum = 3005;

$sensorType = "K"; // K type thermocouple.

$resolution = "BEST";





$measure = AG34980A_MeasureTemperature($agHandle, $channelNum, $sensorType, $resolution);





AG34980A_MeasureVoltageAC

Previous Top Next



* * *



AG34980A_MeasureVoltageAC



Usage:

$measurement = AG34980A_MeasureVoltageAC($agInstance, $channelNumber, $range, $resolution);





Description:

This function takes an AC Voltage measurement on the specified channel and returns the measurement.





Remarks:

This function uses the Agilent IVI Instrument drivers. In order to use the AG34980A functions, you need to have the Agilent COM components installed.

Communication to the instrument must previously have been opened with the AG34980A_Init function.

In the case of instrument communication failure, or an invalid channel specified, a failure is generated by the function.

Function Arguments



Parameter

Variable Type

Description



$agInstance

Object

The handle representing the instance of the AG34980A to obtain the measurement from.



$channelNumber

Integer

The channel on which to take the measurement.



$range

Float

The measurement range. Set to a negative number for auto-ranging.



$resolution

String

A text string indicating the measurement resolution. Supported strings are:

· "BEST"

· "DEFAULT"

· "LEAST"





Return parameters



Parameter

Variable Type

Description



$measurement

Float

The AC Voltage measured on the specified channel.





Example:





$resource = "GPIB0::11::INSTR"; // The VISA resource string.

$agHandle = AG34980A_Init($resource);





$channelNum = 3005;

$range = 5.0;

$resolution = "BEST";





$measure = AG34980A_MeasureVoltageAC($agHandle, $channelNum, $range, $resolution);





AG34980A_MeasureVoltageDC

Previous Top Next



* * *



AG34980A_MeasureVoltageDC



Usage:

$measurement = AG34980A_MeasureVoltageDC($agInstance, $channelNumber, $range, $resolution);





Description:

This function takes a DC Voltage measurement on the specified channel and returns the measurement.





Remarks:

This function uses the Agilent IVI Instrument drivers. In order to use the AG34980A functions, you need to have the Agilent COM components installed.

Communication to the instrument must previously have been opened with the AG34980A_Init function.

In the case of instrument communication failure, or an invalid channel specified, a failure is generated by the function.

Function Arguments



Parameter

Variable Type

Description



$agInstance

Object

The handle representing the instance of the AG34980A to obtain the measurement from.



$channelNumber

Integer

The channel on which to take the measurement.



$range

Float

The measurement range. Set to a negative number for auto-ranging.



$resolution

String

A text string indicating the measurement resolution. Supported strings are:

· "BEST"

· "DEFAULT"

· "LEAST"





Return parameters



Parameter

Variable Type

Description



$measurement

Float

The DC Voltage measured on the specified channel.





Example:





$resource = "GPIB0::11::INSTR"; // The VISA resource string.

$agHandle = AG34980A_Init($resource);





$channelNum = 3005;

$range = 5.0;

$resolution = "BEST";





$measure = AG34980A_MeasureVoltageDC($agHandle, $channelNum, $range, $resolution);





AG34980A_OpenAllChannels

Previous Top Next



* * *



AG34980A_OpenAllChannels



Usage:

AG34980A_OpenAllChannels($agInstance, $slotNumber);





Description:

This function opens the channel connections on the interface module in the specified slot.





Remarks:

This function uses the Agilent IVI Instrument drivers. In order to use the AG34980A functions, you need to have the Agilent COM components installed.

Communication to the instrument must previously have been opened with the AG34980A_Init function.

In the case of instrument communication failure, or an invalid slot specified, a failure is generated by the function.

Function Arguments



Parameter

Variable Type

Description



$agInstance

Object

The handle representing the instance of the AG34980A to open the channels on.



$slotNumber

Integer

The slot number to open the connections on.





Return parameters



Parameter

Variable Type

Description



None





Example:





$resource = "GPIB0::11::INSTR"; // The VISA resource string.

$agHandle = AG34980A_Init($resource);





$slotNum = 3;





$measure = AG34980A_OpenAllChannels($agHandle, $slotNum);





AG34980A_OpenChannel

Previous Top Next



* * *



AG34980A_OpenChannel



Usage:

AG34980A_OpenChannel($agInstance, $channelList);





Description:

This function opens the channel connections specified in the list on the measurement mainframe.





Remarks:

This function uses the Agilent IVI Instrument drivers. In order to use the AG34980A functions, you need to have the Agilent COM components installed.

Communication to the instrument must previously have been opened with the AG34980A_Init function.

In the case of instrument communication failure, or an invalid channel specified, a failure is generated by the function.

Function Arguments



Parameter

Variable Type

Description



$agInstance

Object

The handle representing the instance of the AG34980A to open the channels on.



$channelList

Integer

Comma separated list of channels to open.





Return parameters



Parameter

Variable Type

Description



None





Example:





$resource = "GPIB0::11::INSTR"; // The VISA resource string.

$agHandle = AG34980A_Init($resource);





$chanList = "1003, 6021, 4011";





$measure = AG34980A_OpenChannel($agHandle, $chanList);





AG34980A_Reset

Previous Top Next



* * *



AG34980A_Reset



Usage:

AG34980A_Reset($InstrumentHandle);





Description:





This function performs a global reset of the AG34980A, and returns all modules to their default power-on condition.

Function arguments



Parameter

Variable Type

Description



$InstrumentHandle

Object

The handle of the instrument returned from the AG34980A_Init function





Return parameters



Parameter

Variable Type

Description



None





Usage Examples

AG34980A_Reset($InstrumentHandle);





Supported Instruments

Agilent 34980A Measurement mainframe, and all current modules.





AG34980A_ScanVoltageAC

Previous Top Next



* * *



AG34980A_ScanVoltageAC



Usage:

$Measurements = AG34980A_ScanVoltageAC($InstrumentHandle,$Channel,$Range,$Resolution,$MeasurementCount,$TimeBetweenSamples,$TimeoutMS);





Description:

This function uses the Agilent IVI Instrument drivers. In order to use the AG34980 functions in JabilTest, you need to have the Agilent COM components installed.

This function configures and initiates an AC Voltage scan on a specified channel. This function can be used in place of the Measure commands when you need to take a large number of samples at a very high sample rate. If the $TimeoutMS value is exceeded before the acquisition can be completed, the function generates a failure.

Function arguments



Parameter

Variable Type

Description



$InstrumentHandle

Object

The handle of the instrument returned from the AG34980A_Init function



$Channel

String

The channel number to scan



$Range

Float

The range for the measurement. Set to a negative number for auto-ranging.



$Resolution

String

The measurement resolution specified as:

· BEST

· DEFAULT

· LEAST



$MeasurementCount

Integer

The number of sweeps of the channel to perform (number of measurements to complete)



$TimeBetweenSamples

Float

The time in seconds between the measurement samples.



$TimeoutMS

Integer

The timeout for the total operation to complete. If the acquisition and triggering exceed the timeout limit, the function generates a failure.





Return parameters



Parameter

Variable Type

Description



$MeasurementArray

Array

Returns a 2D measurement array containing the measurement samples.





Supported Instruments

Agilent 34980A Measurement mainframe, and all current modules.





Example:





// This example takes 1000 measurements as fast as possible on Channel 1015

$MyMeasurements = AG34980A_ScanVoltageAC($It,1015,0.01,"LEAST",1000,0,10000);





// List the measurements...

$Length = ArrayGetLength($MyMeasurements);

$Count = 0;

Label Loop1:





$Val = ArrayGetValue($MyMeasurements,0,$Count);

UpdateStatus($Val);

$Count = $Count+1;

if ($Count<$Length)

{

goto Loop1;

}

End;





AG34980A_ScanVoltageDC

Previous Top Next



* * *



AG34980A_ScanVoltageDC



Usage:

$Measurements = AG34980A_ScanVoltageDC($InstrumentHandle,$Channel,$Range,$Resolution,$MeasurementCount,$TimeBetweenSamples,$TimeoutMS);





Description:

This function uses the Agilent IVI Instrument drivers. In order to use the AG34980 functions in JabilTest, you need to have the Agilent COM components installed.

This function configures and initiates an DC Voltage scan on a specified channel. This function can be used in place of the Measure commands when you need to take a large number of samples at a very high sample rate. If the $TimeoutMS value is exceeded before the acquisition can be completed, the function generates a failure.

Function arguments



Parameter

Variable Type

Description



$InstrumentHandle

Object

The handle of the instrument returned from the AG34980A_Init function



$Channel

String

The channel number to scan



$Range

Float

The range for the measurement. Set to a negative number for auto-ranging.



$Resolution

String

The measurement resolution specified as:

· BEST

· DEFAULT

· LEAST



$MeasurementCount

Integer

The number of sweeps of the channel to perform (number of measurements to complete)



$TimeBetweenSamples

Float

The time in seconds between the measurement samples.



$TimeoutMS

Integer

The timeout for the total operation to complete. If the acquisition and triggering exceed the timeout limit, the function generates a failure.





Return parameters



Parameter

Variable Type

Description



$MeasurementArray

Array

Returns a 2D measurement array containing the measurement samples.





Supported Instruments

Agilent 34980A Measurement mainframe, and all current modules.





Example:





// This example takes 1000 measurements as fast as possible on Channel 1015

$MyMeasurements = AG34980A_ScanVoltageDC($It,1015,0.01,"LEAST",1000,0,10000);





// List the measurements...

$Length = ArrayGetLength($MyMeasurements);

$Count = 0;

Label Loop1:





$Val = ArrayGetValue($MyMeasurements,0,$Count);

UpdateStatus($Val);

$Count = $Count+1;

if ($Count<$Length)

{

goto Loop1;

}

End;





AG34980A_SelfTest

Previous Top Next



* * *



AG34980A_SelfTest



Usage:

AG34980A_SelfTest($InstrumentHandle);





Description:





This function performs a self test on the Agilent 34980A Measurement mainframe. This function passes if the self test is successful. In the event of a failure, a measurement result is returned containing the failure message.

Function arguments



Parameter

Variable Type

Description



$InstrumentHandle

Object

The handle of the instrument returned from the AG34980A_Init function





Return parameters



Parameter

Variable Type

Description



None





Usage Examples

AG34980A_SelfTest($InstrumentHandle);





Supported Instruments

Agilent 34980A Measurement mainframe, and all current modules.





AG34980A_SendCommand

Previous Top Next



* * *



AG34980A_SendCommand



Usage:

$ReturnString = AG34980A_SendCommand($InstrumentHandle$SCPICommand,$ExpectResult);





Description:





This function is used to pass raw SCPI commands to the instrument in the event that some functionality isn't exposed by the function library. The $ExpectResult boolean argument will cause the function to perform a GPIB read after the command and place the string into the $ReturnString argument. If $ExpectResult is set to "FALSE", the function will always return an empty string.





Example:

$ReturnString = AG34980A_SendCommand($AG34980A,"DMM:MEAS:RES?","TRUE");

Function arguments



Parameter

Variable Type

Description



$InstrumentHandle

Object

The handle of the instrument returned from the AG34980A_Init function



$SCPICommand

String

The SCPI command or query to send to the instrument.



$ExpectResult

Boolean

If this result is set to 'TRUE' then the function will query the instrument and return the result to the script.





Return parameters



Parameter

Variable Type

Description



$ReturnString

String

The contents of the GPIB buffer returned from the instrument.





Supported Instruments

Agilent 34980A Measurement mainframe, and all current modules.





AG34980A_SetDisplayText

Previous Top Next



* * *



AG34980A_SetDisplayText



Usage:

AG34980A_SetDisplayText($agInstance, $displayText);





Description:

This function displays the specified text on the display of the instrument. The display text is limited to 13 characters.





Remarks:

This function uses the Agilent IVI Instrument drivers. In order to use the AG34980A functions, you need to have the Agilent COM components installed.

Communication to the instrument must previously have been opened with the AG34980A_Init function.

In the case of instrument communication failure, a failure is generated by the function.

Function Arguments



Parameter

Variable Type

Description



$agInstance

Object

The handle representing the instance of the AG34980A to set the text on.



$displayText

String

The text to be displayed on the instrument's front panel display.





Return parameters



Parameter

Variable Type

Description



None





Example:





$resource = "GPIB0::11::INSTR"; // The VISA resource string.

$agHandle = AG34980A_Init($resource);





$dispTxt = "Measuring...";





$measure = AG34980A_SetDisplayText($agHandle, $dispTxt);





AG34980A_SetTimeout

Previous Top Next



* * *



AG34980A_SetTimeout



Usage:

AG34980A_SetTimeout($InstrumentHandle,$TimeoutMS);





Description:





This function sets the measurement timeout limit on the Agilent 34980A.





It may be necessary to adjust the measurement timeout when taking high precision measurements to prevent I/O errors from ocurring during measurement functions. (Current Measurement functions often require adjusting the instrument timeout).

Function arguments



Parameter

Variable Type

Description



$InstrumentHandle

Object

The handle of the instrument returned from the AG34980A_Init function



$TimeoutMS

Integer

The timeout duration specified in Milliseconds





Return parameters



Parameter

Variable Type

Description



None





Usage Examples

AG34980A_SelfTest($InstrumentHandle);





Supported Instruments

Agilent 34980A Measurement mainframe, and all current modules.





E1412A_Close

Previous Top Next



* * *



E1412A_Close

Usage:

E1412A_Close($Handle);

Description:

This function controls the HP E1412A Multimeter. In order to use this function the VXI pnp driver for the instrument must be installed on the system running Jabil Test. The latest version of this driver can be downloaded from Agilent.

This function closes the Multimeter Unit, and releases the handle and resources for the instrument.

Function Arguments



Parameter

Variable Type

Description



$Handle

Object

A handle to the HP E1412A instrument





Return Parameters



Parameter

Variable Type

Description



None





E1412A_Init

Previous Top Next



* * *



E1412A_Init

Usage:

$Handle = E1412A_Init($ResourceString,$Reset);

Description:

This function controls the HP 1412A Multimeter. In order to use this function the VXI pnp driver for the instrument must be installed on the system running Jabil Test. The latest version of this driver can be downloaded from Agilent.

This function initializes the Multimeter, and returns a handle to the instrument. If the $Reset argument is set to TRUE, the instrument is reset to it's default configuration.

Function Arguments



Parameter

Variable Type

Description



$ResourceString

String

The Resource string of the instrument, for instance "GPIB0::9::3::INSTR"



$Reset

Boolean

Specifies whether or not to reset the instrument upon initialization.





Return Parameters



Parameter

Variable Type

Description



$Handle

Object

A handle to the instrument





E1412A_MeasCurrentAC

Previous Top Next



* * *



E1412A_MeasCurrentAC

Usage:

$Current_AC = E1412A_MeasCurrentAC($Handle);

Description:

This function controls the HP E1412A Multimeter. In order to use this function the VXI pnp driver for the instrument must be installed on the system running Jabil Test. The latest version of this driver can be downloaded from Agilent.

This function returns the AC current measurement at the E1412A Multimeter.

Function Arguments



Parameter

Variable Type

Description



$Handle

Object

A handle to the E1412A created with the E1412A_Init function.





Return Parameters



Parameter

Variable Type

Description



$Current_AC

Float

The AC current measured in Amps.





E1412A_MeasureCurrentDC

Previous Top Next



* * *



E1412A_MeasCurrentDC

Usage:

$Current_DC = E1412A_MeasCurrentDC($Handle);

Description:

This function controls the HP E1412A Multimeter. In order to use this function the VXI pnp driver for the instrument must be installed on the system running Jabil Test. The latest version of this driver can be downloaded from Agilent.



This function returns the DC current measurement at the E1412A Multimeter.

Function Arguments



Parameter

Variable Type

Description



$Handle

Object

A handle to the E1412A created with the E1412A_Init function.





Return Parameters



Parameter

Variable Type

Description



$Current_DC

Float

The DC current measured in Amps.





E1412A_MeasFrequency

Previous Top Next



* * *



E1412A_MeasFrequency

Usage:

$Frequency = E1412A_MeasureFrequency($Handle);

Description:

This function controls the HP E1412A Multimeter. In order to use this function the VXI pnp driver for the instrument must be installed on the system running Jabil Test. The latest version of this driver can be downloaded from Agilent.

This function returns the Frequency measurement at the E1412A Multimeter.

Function Arguments



Parameter

Variable Type

Description



$Handle

Object

A handle to the E1412A created with the E1412A_Init function.





Return Parameters



Parameter

Variable Type

Description



$Frequency

Float

The frequency measured in Hertz





E1412A_MeasPeriod

Previous Top Next



* * *



E1412A_MeasPeriod

Usage:

$Period = E1412A_MeasPeriod($Handle);

Description:

This function controls the HP E1412A Multimeter. In order to use this function the VXI pnp driver for the instrument must be installed on the system running Jabil Test. The latest version of this driver can be downloaded from Agilent.

This function returns the Period measurement at the E1412A Multimeter.

Function Arguments



Parameter

Variable Type

Description



$Handle

Object

A handle to the E1412A created with the E1412A_Init function.





Return Parameters



Parameter

Variable Type

Description



$Period

Float

The Period measured in seconds





E1412A_MeasResistance

Previous Top Next



* * *



E1412A_MeasResistance

Usage:

$Resistance = E1412A_MeasResistance($Handle);

Description:

This function controls the HP E1412A Multimeter. In order to use this function the VXI pnp driver for the instrument must be installed on the system running Jabil Test. The latest version of this driver can be downloaded from Agilent.

This function returns the resistance measurement of the resitors connected to the E1412A Multimeter.

Function Arguments



Parameter

Variable Type

Description



$Handle

Object

A handle to the E1412A created with the E1412A_Init function.





Return Parameters



Parameter

Variable Type

Description



$Resistance

Float

The resistance measured in Ohms.





E1412A_MeasVoltageAC

Previous Top Next



* * *



E1412A_MeasVoltageAC

Usage:

$Voltage_AC = E1412A_MeasVoltageAC($Handle);

Description:

This function controls the HP E1412A Multimeter. In order to use this function the VXI pnp driver for the instrument must be installed on the system running Jabil Test. The latest version of this driver can be downloaded from Agilent.

This function returns the AC voltage measurement at the E1412A Multimeter.

Function Arguments



Parameter

Variable Type

Description



$Handle

Object

A handle to the E1412A created with the E1412A_Init function.





Return Parameters



Parameter

Variable Type

Description



$Voltage_AC

Float

The AC voltage measured in Volts.





E1412A_MeasVoltageDC

Previous Top Next



* * *



E1412A_MeasVoltageDC

Usage:

$Voltage_DC = E1412A_MeasVoltageDC($Handle);

Description:

This function controls the HP E1412A Multimeter. In order to use this function the VXI pnp driver for the instrument must be installed on the system running Jabil Test. The latest version of this driver can be downloaded from Agilent.



This function returns the DC voltage measurement at the E1412A Multimeter.

Function Arguments



Parameter

Variable Type

Description



$Handle

Object

A handle to the E1412A created with the E1412A_Init function.





Return Parameters



Parameter

Variable Type

Description



$Voltage_DC

Float

The DC voltage measured in Volts.





AG3606_Close

Previous Top Next



* * *



AG3606_Close



Usage:

AG3606_Close($AgHandle);





Description:

This function closes a connection to an Agilent U3606x device that was opened using the AG3606_Init function.





Remarks:

The Agilent library for this instrument must be installed on the test computer. The version used for building and testing this function library is version 1.1.7 for 64 bit operating systems.

Function arguments



Parameter

Variable Type

Description



$AgHandle

Object

A handle to a device opened with AG3606_Init.





Return parameters



Parameter

Variable Type

Description



$AgHandle

Object

A handle to the connection for use in other functions.





Example(s):

// Get a handle to the device, do an ID query and reset.

$resName = "GPIB0::5::INSTR";

$idQuery = true;

$reset = true;

$options = "";

$AgHandle = AG3606_Init($resName, $idQuery, $reset, $options);





// Take measurement and work with instrument here.





AG3606_Close($AgHandle);





AG3606_Init

Previous Top Next



* * *



AG3606_Init



Usage:

$AgHandle = AG3606_Init($resourceName, $idQuery, $resetDevice, $options);





Description:

This function opens a connection to an Agilent U3606x device (either U3606A or U3606B) and returns an handle to the connection that can be used with other functions.





Remarks:

The Agilent library for this instrument must be installed on the test computer. The version used for building and testing this function library is version 1.1.7 for 64 bit operating systems.

Function arguments



Parameter

Variable Type

Description



$resourceName

String

A VISA style resource descriptor string for this device. For example: "GPIB0::5::INSTR".



$idQuery

Boolean

Whether to perform an ID Query on the device.



$resetDevice

Boolean

Whether to perform a reset on the device once the connection is established.



$options

String

Options parameters to pass to the device. See the device documentation for examples. Use an empty string, if none are needed.





Return parameters



Parameter

Variable Type

Description



$AgHandle

Object

A handle to the connection for use in other functions.





Example(s):

// Get a handle to the device, do an ID query and reset.

$resName = "GPIB0::5::INSTR";

$idQuery = true;

$reset = true;

$options = "";

$AgHandle = AG3606_Init($resName, $idQuery, $reset, $options);





AG3606_MeasureAcCurrent

Previous Top Next



* * *



AG3606_MeasureAcCurrent



Usage:

$measurement = AG3606_MeasureAcCurrent($AgHandle, $range, $resolution);



Description:

This function resets all AC current measurement parameters and trigger parameters to their default values, configures the instrument for AC current measurements and immediately triggers a measurement. A single reading is returned.





Remarks:

The Agilent library for this instrument must be installed on the test computer. The version used for building and testing this function library is version 1.1.7 for 64 bit operating systems.

Function arguments



Parameter

Variable Type

Description



$AgHandle

Object

A handle to a device opened with AG3606_Init.



$range

Float

The current range for the measurement. Valid ranges are (enter the number only):

· 0.01 A (minimum)

· 0.1 A

· 1 A

· 3 A (maximum)

· Use 0 for AUTO



$resolution

String

The resolution for the measurements. Valid resolutions are:

· BEST

· LEAST





Return parameters



Parameter

Variable Type

Description



$measurement

Float

The measurement read from the instrument.





Example(s):

// Get a handle to the device, do an ID query and reset.

$resName = "GPIB0::5::INSTR";

$idQuery = true;

$reset = true;

$options = "";

$AgHandle = AG3606_Init($resName, $idQuery, $reset, $options);





// Measure in the 100mA range with the Least resolution.

$range = 100;

$resol = "LEAST";





$measure = AG3606_MeasureAcCurrent($AgHandle, $range, $resol);





AG3606_MeasureAcVoltage

Previous Top Next



* * *



AG3606_MeasureAcVoltage



Usage:

$measurement = AG3606_MeasureAcVoltage($AgHandle, $range, $resolution);



Description:

This function resets all AC current measurement parameters and trigger parameters to their default values, configures the instrument for AC voltage measurements and immediately triggers a measurement. A single reading is returned.





Remarks:

The Agilent library for this instrument must be installed on the test computer. The version used for building and testing this function library is version 1.1.7 for 64 bit operating systems.

Function arguments



Parameter

Variable Type

Description



$AgHandle

Object

A handle to a device opened with AG3606_Init.



$range

Float

The voltage range for the measurement. Valid ranges are (enter the number only):

· 0.1 V (minimum)

· 1 V

· 10 V

· 100 V

· 750 V (maximum)

· Use 0 for AUTO



$resolution

String

The resolution for the measurements. Valid resolutions are:

· BEST

· LEAST





Return parameters



Parameter

Variable Type

Description



$measurement

Float

The measurement read from the instrument.





Example(s):

// Get a handle to the device, do an ID query and reset.

$resName = "GPIB0::5::INSTR";

$idQuery = true;

$reset = true;

$options = "";

$AgHandle = AG3606_Init($resName, $idQuery, $reset, $options);





// Measure in the 10V range with the Least resolution.

$range = 10;

$resol = "LEAST";





$measure = AG3606_MeasureAcVoltage($AgHandle, $range, $resol);





AG3606_MeasureCapacitance

Previous Top Next



* * *



AG3606_MeasureCapacitance



Usage:

$measurement = AG3606_MeasureCapacitance($AgHandle, $range, $resolution);





Description:

This function resets all capacitance measurement parameters and trigger parameters to their default values, configures the instrument for capacitance measurements and immediately triggers a measurement. A single reading is returned.





Remarks:

The Agilent library for this instrument must be installed on the test computer. The version used for building and testing this function library is version 1.1.7 for 64 bit operating systems.

Function arguments



Parameter

Variable Type

Description



$AgHandle

Object

A handle to a device opened with AG3606_Init.



$range

Float

The capacitance range for the measurement. Valid ranges are (enter the number only):

· 0.000000001 F ( 1nF = minimum)

· 0.00000001 F (10 nF)

· 0.0000001 F (100 nF)

· 0.000001 F (1 uF)

· 0.00001 F (10 uF)

· 0.0001 F (100 uF)

· 0.001 F (1 mF)

· 0.01 F (10 mF = maximum)

· Use 0 for AUTO



$resolution

String

The resolution for the measurements. Valid resolutions are:

· BEST

· LEAST





Return parameters



Parameter

Variable Type

Description



$measurement

Float

The measurement read from the instrument.





Example(s):

// Get a handle to the device, do an ID query and reset.

$resName = "GPIB0::5::INSTR";

$idQuery = true;

$reset = true;

$options = "";

$AgHandle = AG3606_Init($resName, $idQuery, $reset, $options);





// Measure in the 1mF range with the Least resolution.

$range = 0.001;

$resol = "LEAST";





$measure = AG3606_MeasureCapacitance($AgHandle, $range, $resol);





AG3606_MeasureContinuity

Previous Top Next



* * *



AG3606_MeasureContinuity



Usage:

$measurement = AG3606_MeasureContinuity($AgHandle, $range, $resolution);





Description:

This function resets all continuity measurement parameters and trigger parameters to their default values, configures the instrument for continuity tests and immediately triggers a test. Continuity is a special type of fixed-range 2-wire resistance measurement. A single reading is returned.





Remarks:

The Agilent library for this instrument must be installed on the test computer. The version used for building and testing this function library is version 1.1.7 for 64 bit operating systems.

Function arguments



Parameter

Variable Type

Description



$AgHandle

Object

A handle to a device opened with AG3606_Init.



$range

Float

The resistance range for the test. Valid ranges are (enter the number only):

· 100 Ω (minimum)

· 1000 Ω (1 kΩ)

· 10000 Ω (10 kΩ)

· 100000 Ω (100 kΩ)

· 1000000 Ω (1 MΩ)

· 10000000 Ω (10 MΩ)

· 100000000 Ω (100 MΩ = maximum)

· Use 0 for AUTO



$resolution

String

The resolution for the measurements. Valid resolutions are:

· BEST

· LEAST





Return parameters



Parameter

Variable Type

Description



$measurement

Float

The measurement read from the instrument.





Example(s):

// Get a handle to the device, do an ID query and reset.

$resName = "GPIB0::5::INSTR";

$idQuery = true;

$reset = true;

$options = "";

$AgHandle = AG3606_Init($resName, $idQuery, $reset, $options);





// Measure in the 1 kΩ range with the Least resolution.

$range = 1000;

$resol = "LEAST";





$measure = AG3606_MeasureContinuity($AgHandle, $range, $resol);





AG3606_MeasureDcCurrent

Previous Top Next



* * *



AG3606_MeasureDcCurrent



Usage:

$measurement = AG3606_MeasureDcCurrent($AgHandle, $range, $resolution);





Description:

This function resets all DC current measurement parameters and trigger parameters to their default values, configures the instrument for DC current measurements and immediately triggers a measurement. A single reading is returned.





Remarks:

The Agilent library for this instrument must be installed on the test computer. The version used for building and testing this function library is version 1.1.7 for 64 bit operating systems.

Function arguments



Parameter

Variable Type

Description



$AgHandle

Object

A handle to a device opened with AG3606_Init.



$range

Float

The current range for the measurement. Valid ranges are (enter the number only):

· 0.01 A (minimum)

· 0.1 A

· 1 A

· 3 A (maximum)

· Use 0 for AUTO



$resolution

String

The resolution for the measurements. Valid resolutions are:

· BEST

· LEAST





Return parameters



Parameter

Variable Type

Description



$measurement

Float

The measurement read from the instrument.





Example(s):

// Get a handle to the device, do an ID query and reset.

$resName = "GPIB0::5::INSTR";

$idQuery = true;

$reset = true;

$options = "";

$AgHandle = AG3606_Init($resName, $idQuery, $reset, $options);





// Measure in the 100mA range with the Least resolution.

$range = 0.100;

$resol = "LEAST";





$measure = AG3606_MeasureDcCurrent($AgHandle, $range, $resol);





AG3606_MeasureDcVoltage

Previous Top Next



* * *



AG3606_MeasureDcVoltage



Usage:

$measurement = AG3606_MeasureDcVoltage($AgHandle, $range, $resolution);





Description:

This function resets all DC current measurement parameters and trigger parameters to their default values, configures the instrument for DC voltage measurements and immediately triggers a measurement. A single reading is returned.





Remarks:

The Agilent library for this instrument must be installed on the test computer. The version used for building and testing this function library is version 1.1.7 for 64 bit operating systems.

Function arguments



Parameter

Variable Type

Description



$AgHandle

Object

A handle to a device opened with AG3606_Init.



$range

Float

The voltage range for the measurement. Valid ranges are (enter the number only):

· 0.1 V (minimum)

· 1 V

· 10 V

· 100 V

· 750 V (maximum)

· Use 0 for AUTO



$resolution

String

The resolution for the measurements. Valid resolutions are:

· BEST

· LEAST





Return parameters



Parameter

Variable Type

Description



$measurement

Float

The measurement read from the instrument.





Example(s):

// Get a handle to the device, do an ID query and reset.

$resName = "GPIB0::5::INSTR";

$idQuery = true;

$reset = true;

$options = "";

$AgHandle = AG3606_Init($resName, $idQuery, $reset, $options);





// Measure in the 10V range with the Least resolution.

$range = 10;

$resol = "LEAST";





$measure = AG3606_MeasureDcVoltage($AgHandle, $range, $resol);





AG3606_MeasureDutyCycleCurrent

Previous Top Next



* * *



AG3606_MeasureDutyCycleCurrent



Usage:

$measurement = AG3606_MeasureDutyCycleCurrent($AgHandle, $range, $resolution);





Description:

This function resets all duty cycle measurement parameters and trigger parameters to their default values, configures the instrument for duty cycle measurements and immediately triggers a measurement. A single reading is returned.





Remarks:

The Agilent library for this instrument must be installed on the test computer. The version used for building and testing this function library is version 1.1.7 for 64 bit operating systems.

Function arguments



Parameter

Variable Type

Description



$AgHandle

Object

A handle to a device opened with AG3606_Init.



$range

Float

The current range for the measurement. Valid ranges are (enter the number only):

· 0.01 A (minimum)

· 0.1 A

· 1 A

· 3 A (maximum)

· Use 0 for AUTO



$resolution

String

The resolution for the measurements. Valid resolutions are:

· BEST

· LEAST





Return parameters



Parameter

Variable Type

Description



$measurement

Float

The measurement read from the instrument.





Example(s):

// Get a handle to the device, do an ID query and reset.

$resName = "GPIB0::5::INSTR";

$idQuery = true;

$reset = true;

$options = "";

$AgHandle = AG3606_Init($resName, $idQuery, $reset, $options);





// Measure in the 100mA range with the Least resolution.

$range = 0.100;

$resol = "LEAST";





$measure = AG3606_MeasureDutyCycleCurrent($AgHandle, $range, $resol);





AG3606_MeasureDutyCycleVoltage

Previous Top Next



* * *



AG3606_MeasureDutyCycleVoltage



Usage:

$measurement = AG3606_MeasureDutyCycleVoltage($AgHandle, $range, $resolution);





Description:

This function resets all duty cycle measurement parameters and trigger parameters to their default values, configures the instrument for duty cycle measurements and immediately triggers a measurement. A single reading is returned.





Remarks:

The Agilent library for this instrument must be installed on the test computer. The version used for building and testing this function library is version 1.1.7 for 64 bit operating systems.

Function arguments



Parameter

Variable Type

Description



$AgHandle

Object

A handle to a device opened with AG3606_Init.



$range

Float

The voltage range for the measurement. Valid ranges are (enter the number only):

· 0.1 V (minimum)

· 1 V

· 10 V

· 100 V

· 750 V (maximum)

· Use 0 for AUTO



$resolution

String

The resolution for the measurements. Valid resolutions are:

· BEST

· LEAST





Return parameters



Parameter

Variable Type

Description



$measurement

Float

The measurement read from the instrument.





Example(s):

// Get a handle to the device, do an ID query and reset.

$resName = "GPIB0::5::INSTR";

$idQuery = true;

$reset = true;

$options = "";

$AgHandle = AG3606_Init($resName, $idQuery, $reset, $options);





// Measure in the 10V range with the Least resolution.

$range = 10;

$resol = "LEAST";





$measure = AG3606_MeasureDutyCycleVoltage($AgHandle, $range, $resol);





AG3606_MeasureFrequency

Previous Top Next



* * *



AG3606_MeasureFrequency



Usage:

$measurement = AG3606_MeasureFrequency($AgHandle, $range, $resolution);





Description:

This function resets all frequency measurement parameters and trigger parameters to their default values, configures the instrument for frequency measurements and immediately triggers a measurement. A single reading is returned.





Remarks:

The Agilent library for this instrument must be installed on the test computer. The version used for building and testing this function library is version 1.1.7 for 64 bit operating systems.

Function arguments



Parameter

Variable Type

Description



$AgHandle

Object

A handle to a device opened with AG3606_Init.



$range

Float

The voltage range for the measurement. Valid ranges are (enter the number only):

· 0.1 V (minimum)

· 1 V

· 10 V

· 100 V

· 750 V (maximum)

· Use 0 for AUTO



$resolution

String

The resolution for the measurements. Valid resolutions are:

· BEST

· LEAST





Return parameters



Parameter

Variable Type

Description



$measurement

Float

The measurement read from the instrument.





Example(s):

// Get a handle to the device, do an ID query and reset.

$resName = "GPIB0::5::INSTR";

$idQuery = true;

$reset = true;

$options = "";

$AgHandle = AG3606_Init($resName, $idQuery, $reset, $options);





// Measure in the 10V range with the Least resolution.

$range = 10;

$resol = "LEAST";





$measure = AG3606_MeasureFrequency($AgHandle, $range, $resol);





AG3606_MeasureLowResistance

Previous Top Next



* * *



AG3606_MeasureLowResistance



Usage:

$measurement = AG3606_MeasureLowResistance($AgHandle, $range, $resolution);





Description:

This function resets all low-resistance measurement parameters and trigger parameters to their default values, configures the instrument for 4-wire low-resistance measurements and immediately triggers a measurement. A single reading is returned.





Remarks:

The Agilent library for this instrument must be installed on the test computer. The version used for building and testing this function library is version 1.1.7 for 64 bit operating systems.

Function arguments



Parameter

Variable Type

Description



$AgHandle

Object

A handle to a device opened with AG3606_Init.



$range

Float

The resistance range for the test. Valid ranges are (enter the number only):

· 0.1 Ω (100 mΩ = minimum)

· 1 Ω (1 kΩ)

· 10 Ω (maximum)

· Use 0 for AUTO



$resolution

String

The resolution for the measurements. Valid resolutions are:

· BEST

· LEAST





Return parameters



Parameter

Variable Type

Description



$measurement

Float

The measurement read from the instrument.





Example(s):

// Get a handle to the device, do an ID query and reset.

$resName = "GPIB0::5::INSTR";

$idQuery = true;

$reset = true;

$options = "";

$AgHandle = AG3606_Init($resName, $idQuery, $reset, $options);





// Measure in the 100 mΩ range with the Least resolution.

$range = 0.100;

$resol = "LEAST";





$measure = AG3606_MeasureLowResistance($AgHandle, $range, $resol);





AG3606_MeasurePulseWidthCurrent

Previous Top Next



* * *



AG3606_MeasurePulseWidthCurrent



Usage:

$measurement = AG3606_MeasurePulseWidthCurrent($AgHandle, $range, $resolution);





Description:

This function resets all pulse width measurement parameters and trigger parameters to their default values, configures the instrument for pulse width measurements and immediately triggers a measurement. A single reading is returned.





Remarks:

The Agilent library for this instrument must be installed on the test computer. The version used for building and testing this function library is version 1.1.7 for 64 bit operating systems.

Function arguments



Parameter

Variable Type

Description



$AgHandle

Object

A handle to a device opened with AG3606_Init.



$range

Float

The current range for the measurement. Valid ranges are (enter the number only):

· 0.01 A (minimum)

· 0.1 A

· 1 A

· 3 A (maximum)

· Use 0 for AUTO



$resolution

String

The resolution for the measurements. Valid resolutions are:

· BEST

· LEAST





Return parameters



Parameter

Variable Type

Description



$measurement

Float

The measurement read from the instrument.





Example(s):

// Get a handle to the device, do an ID query and reset.

$resName = "GPIB0::5::INSTR";

$idQuery = true;

$reset = true;

$options = "";

$AgHandle = AG3606_Init($resName, $idQuery, $reset, $options);





// Measure in the 100mA range with the Least resolution.

$range = 0.100;

$resol = "LEAST";





$measure = AG3606_MeasurePulseWidthCurrent($AgHandle, $range, $resol);





AG3606_MeasurePulseWidthVoltage

Previous Top Next



* * *



AG3606_MeasurePulseWidthVoltage



Usage:

$measurement = AG3606_MeasurePulseWidthVoltage($AgHandle, $range, $resolution);





Description:

This function resets all pulse width measurement parameters and trigger parameters to their default values, configures the instrument for pulse width measurements and immediately triggers a measurement. A single reading is returned.





Remarks:

The Agilent library for this instrument must be installed on the test computer. The version used for building and testing this function library is version 1.1.7 for 64 bit operating systems.

Function arguments



Parameter

Variable Type

Description



$AgHandle

Object

A handle to a device opened with AG3606_Init.



$range

Float

The voltage range for the measurement. Valid ranges are (enter the number only):

· 0.1 V (minimum)

· 1 V

· 10 V

· 100 V

· 750 V (maximum)

· Use 0 for AUTO



$resolution

String

The resolution for the measurements. Valid resolutions are:

· BEST

· LEAST





Return parameters



Parameter

Variable Type

Description



$measurement

Float

The measurement read from the instrument.





Example(s):

// Get a handle to the device, do an ID query and reset.

$resName = "GPIB0::5::INSTR";

$idQuery = true;

$reset = true;

$options = "";

$AgHandle = AG3606_Init($resName, $idQuery, $reset, $options);





// Measure in the 10V range with the Least resolution.

$range = 10;

$resol = "LEAST";





$measure = AG3606_MeasurePulseWidthVoltage($AgHandle, $range, $resol);





AG3606_MeasureResistance

Previous Top Next



* * *



AG3606_MeasureResistance



Usage:

$measurement = AG3606_MeasureResistance($AgHandle, $range, $resolution);





Description:

This function resets all resistance measurement parameters and trigger parameters to their default values, configures the instrument for 2-wire resistance measurements and immediately triggers a measurement. A single reading is returned.





Remarks:

The Agilent library for this instrument must be installed on the test computer. The version used for building and testing this function library is version 1.1.7 for 64 bit operating systems.

Function arguments



Parameter

Variable Type

Description



$AgHandle

Object

A handle to a device opened with AG3606_Init.



$range

Float

The resistance range for the test. Valid ranges are (enter the number only):

· 100 Ω (minimum)

· 1000 Ω (1 kΩ)

· 10000 Ω (10 kΩ)

· 100000 Ω (100 kΩ)

· 1000000 Ω (1 MΩ)

· 10000000 Ω (10 MΩ)

· 100000000 Ω (100 MΩ = maximum)

· Use 0 for AUTO



$resolution

String

The resolution for the measurements. Valid resolutions are:

· BEST

· LEAST





Return parameters



Parameter

Variable Type

Description



$measurement

Float

The measurement read from the instrument.





Example(s):

// Get a handle to the device, do an ID query and reset.

$resName = "GPIB0::5::INSTR";

$idQuery = true;

$reset = true;

$options = "";

$AgHandle = AG3606_Init($resName, $idQuery, $reset, $options);





// Measure in the 100 kΩ range with the Least resolution.

$range = 100000;

$resol = "LEAST";





$measure = AG3606_MeasureResistance($AgHandle, $range, $resol);





AG3606_PowerSupplyConfig

Previous Top Next



* * *



AG3606_PowerSupplyConfig



Usage:

AG3606_PowerSupplyConfig($AgHandle, $voltageRange, $voltage, $currentLimit);





Description:

This function configures the DC power supply parameters. The output must be disabled before a new configuration will be accepted.





Remarks:

The Agilent library for this instrument must be installed on the test computer. The version used for building and testing this function library is version 1.1.7 for 64 bit operating systems.

Function arguments



Parameter

Variable Type

Description



$AgHandle

Object

A handle to a device opened with AG3606_Init.



$voltageRange

Integer

The voltage range for output. Valid ranges are (enter the number only):

· 30 V - The S1 (30V / 1A) range has a higher voltage range, but a lower current range.

· 8 V - The S2 (8V / 3A) range provides for a higher current range, but a lower voltage range.





The maximum current is automatically set based on the voltage range chosen.



$voltage

Integer

The output voltage. This must be within the specified range.



$currentLimit

Integer

The maximum current before Over Current Protection (OCP) is tripped.





Return parameters



Parameter

Variable Type

Description



None





Example(s):

// Get a handle to the device, do an ID query and reset.

$resName = "GPIB0::5::INSTR";

$idQuery = true;

$reset = true;

$options = "";

$AgHandle = AG3606_Init($resName, $idQuery, $reset, $options);





// Configure the supply for 5V output in the 8V.3A range with 2A current limit.

$voltRange = 8;

$voltage = 5;

$currLimit = 2;





AG3606_PowerSupplyConfig($AgHandle, $voltRange, $voltage, $currLimit);





AG3606_PowerSupplySetOutputState

Previous Top Next



* * *



AG3606_PowerSupplySetOutputState



Usage:

AG3606_PowerSupplySetOutputState($AgHandle, $outputState);





Description:

This function toggles the DC power supply output to either ON or OFF. The parameters for the output are set with the AG3606_PowerSupplyConfig function.





Remarks:

The Agilent library for this instrument must be installed on the test computer. The version used for building and testing this function library is version 1.1.7 for 64 bit operating systems.

Function arguments



Parameter

Variable Type

Description



$AgHandle

Object

A handle to a device opened with AG3606_Init.



$outputState

String

The state for the output. Must be either ON or OFF.





Return parameters



Parameter

Variable Type

Description



None





Example(s):

// Get a handle to the device, do an ID query and reset.

$resName = "GPIB0::5::INSTR";

$idQuery = true;

$reset = true;

$options = "";

$AgHandle = AG3606_Init($resName, $idQuery, $reset, $options);





// Configure the supply for 5V output in the 8V.3A range with 2A current limit.

$voltRange = 8;

$voltage = 5;

$currLimit = 2;





AG3606_PowerSupplyConfig($AgHandle, $voltRange, $voltage, $currLimit);





// Turn the power supply on.

$psState = "ON";

AG3606_PowerSupplySetOutputState($AgHandle, $psState);





NI_DMM_Close

Previous Top Next



* * *



NI_DMM_Close



Usage:

NI_DMM_Close($Handle);



Description:

This function requires NI-DMM 2.3 to be installed on the system.

Closes the specified session (created with NI_DMM_Initialize) and de-allocates resources that it reserved.



Remarks:

· This function is tested with a National Instruments device NI PXI-4070.

· This function can be used for all National Instruments digital multimeter types (NI DMM devices).



Result:

NI_DMM_Close($Handle);

Function arguments



Parameter

Variable Type

Description



$Handle

Object

A handle to a NI DMM device created with the NIDMM_Initialize function.





Return parameters



Parameter

Variable Type

Description





Example(s):

NI_DMM_Close($Handle);





NI_DMM_ConfigureMeasurement

Previous Top Next



* * *



NI_DMM_ConfigureMeasurement



Usage:

NI_DMM_ConfigureMeasurement($Handle, $Type,$Range,$Resolution);



Description:

This function requires NI-DMM 2.3 to be installed on the system.

This function configures the DMM for a measurement.



Remarks:

· This function is tested with a National Instruments device NI PXI-4070.

· This function can be used for all National Instruments digital multimeter types (NI DMM devices).



Result:

NI_DMM_ConfigureMeasurement($Handle, $Type,$Range,$Resolution);

Function arguments



Parameter

Variable Type

Description



$Handle

Object

A handle to a NI DMM device created with the NIDMM_Initialize function.



$Type

String

Measurement Type.

The available types are:

· DC Volts

· AC Volts

· DC Current

· AC Current

· 2Wire Resistance

· 4Wire Resistance

· Frequency

· Period

· Diode

· ACVolts DCCoupled



$Range

Double

Specifies the range for the function. For example, you must type in 100 Hz if you are measuring 101 Hz or higher. For all other functions, you must supply a range that exceeds the value that you are measuring. For example, you must type in 10 V if you are measuring 9 V. Range values are coerced up to the closest input range. Refer to the Devices Overview for a list of valid ranges.



Possible options:

· -1: (On) NI-DMM performs an Auto Range before acquiring the measurement.

· -2: (Off) NI-DMM uses the current Auto Range value for all subsequent measurements until the measurement configuration is changed.

· -3: (Once) NI-DMM performs an Auto Range before acquiring the measurement. The Auto Range value is stored and used for all subsequent measurements until the measurement configuration is changed.

· Any other value.



$Resolution

Double

For a noise-free DMM, resolution is the smallest change in an input signal that produces, on average, a change in the output signal.





Return parameters



Parameter

Variable Type

Description





Example(s):

NI_DMM_ConfigureMeasurement($Handle, "DC Volts", 2.5, 5.5);





NI_DMM_ConfigureTrigger

Previous Top Next



* * *



NI_DMM_ConfigureTrigger



Usage:

NI_DMM_ConfigureTrigger($Handle,$Source,$Delay);



Description:

This function requires NI-DMM 2.3 to be installed on the system.

This function sets the trigger source and delay of the DMM.



Remarks:

· This function is tested with a National Instruments device NI PXI-4070.

· This function can be used for all National Instruments digital multimeter types (NI DMM devices).



Result:

NI_DMM_ConfigureTrigger($Handle,$Source,$Delay);

Function arguments



Parameter

Variable Type

Description



$Handle

Object

A handle to a NI DMM device created with the NIDMM_Initialize function.



$Source

Integer

Trigger source. See DMM documentation for values.



$Delay

Float

Trigger delay in seconds.





Return parameters



Parameter

Variable Type

Description





Example(s):

NI_DMM_ConfigureTrigger($Handle,1,0.5);





NI_DMM_Fetch

Previous Top Next



* * *



NI_DMM_Fetch



Usage:

$Result = NI_DMM_Fetch($Handle, $MaxMeasTime);



Description:

This function requires NI-DMM 2.3 to be installed on the system.

This function fetches a measurement after the NI_DMM_Initiate is executed. The DMM must be setup with the NI_DMM_ConfigureMeasurement.



Remarks:

· This function is tested with a National Instruments device NI PXI-4070.

· This function can be used for all National Instruments digital multimeter types (NI DMM devices).



Result:

$Result = NI_DMM_Fetch($Handle, $MaxMeasTime);

Function arguments



Parameter

Variable Type

Description



$Handle

Object

A handle to a NI DMM device created with the NIDMM_Initialize function.



$MaxMeasTime

Integer

Specifies the maximum time allowed for this function to complete in milliseconds.





Return parameters



Parameter

Variable Type

Description



$Result

Float

The resulting value is returned as a float.





Example(s):

$Result = NI_DMM_Fetch($Handle,1250);





NI_DMM_GetBooleanAttribute

Previous Top Next



* * *



NI_DMM_GetBooleanAttribute



Usage:

$Result = NI_DMM_GetBooleanAttribute($Handle, $AttributeIdentifier);



Description:

This function requires NI-DMM 2.3 to be installed on the system.

This function gets the value of a boolean attribute.



Remarks:

· This function is tested with a National Instruments device NI PXI-4070.

· This function can be used for all National Instruments digital multimeter types (NI DMM devices).



Result:

$Result = NI_DMM_GetBooleanAttribute($Handle, $AttributeIdentifier);

Function arguments



Parameter

Variable Type

Description



$Handle

Object

A handle to a NI DMM device created with the NIDMM_Initialize function.



$AttributeIdentifier

String

Pass the ID of an attribute.

Possible values:

· CACHE

· INTERCHANGE CHECK

· QUERY INSTRUMENT STATUS

· RANGE CHECK

· RECORD COERCIONS

· SIMULATE





Return parameters



Parameter

Variable Type

Description



$Result

Boolean

The value of the attribute identifier.





Example(s):

$Result = NI_DMM_GetBooleanAttribute($Handle, "RANGE CHECK");





NI_DMM_GetDoubleAttribute

Previous Top Next



* * *



NI_DMM_GetDoubleAttribute



Usage:

$Result = NI_DMM_GetDoubleAttribute($Handle, $AttributeIdentifier);



Description:

This function requires NI-DMM 2.3 to be installed on the system.

This function gets the value of a double attribute.



Remarks:

· This function is tested with a National Instruments device NI PXI-4070.

· This function can be used for all National Instruments digital multimeter types (NI DMM devices).



Result:

$Result = NI_DMM_GetDoubleAttribute($Handle, $AttributeIdentifier);

Function arguments



Parameter

Variable Type

Description



$Handle

Object

A handle to a NI DMM device created with the NIDMM_Initialize function.



$AttributeIdentifier

String

Pass the ID of an attribute.

Possible values:

· AUTO RANGE VALUE

· RANGE

· RESOLUTION DIGITS

· RESOLUTION ABSOLUTE

· AC MAX FREQUENCY

· AC MIN FREQUENCY

· CURRENT SOURCE

· FREQUENCY VOLTAGE AUTO RANGE VALUE

· FREQUENCY VOLTAGE RANGE

· INPUT RESISTANCE

· POWERLINE FREQUENCY

· SHUNT VALUE

· TRIGGER DELAY

· SAMPLE INTERVAL

· APERTURE TIME

· SETTLE TIME

· WAVEFORM RATE





Return parameters



Parameter

Variable Type

Description



$Result

Float

The value of the attribute identifier.





Example(s):

$Result = NI_DMM_GetDoubleAttribute($Handle, "AC MIN FREQUENCY");





NI_DMM_GetIntegerAttribute

Previous Top Next



* * *



NI_DMM_GetIntegerAttribute



Usage:

$Result = NI_DMM_GetIntegerAttribute($Handle, $AttributeIdentifier);



Description:

This function requires NI-DMM 2.3 to be installed on the system.

This function gets the value of an integer attribute.



Remarks:

· This function is tested with a National Instruments device NI PXI-4070.

· This function can be used for all National Instruments digital multimeter types (NI DMM devices).



Result:

$Result = NI_DMM_GetIntegerAttribute($Handle, $AttributeIdentifier);

Function arguments



Parameter

Variable Type

Description



$Handle

Object

A handle to a NI DMM device created with the NIDMM_Initialize function.



$AttributeIdentifier

String

Pass the ID of an attribute.

Possible values:

· CHANNEL COUNT

· SPECIFIC DRIVER MAJOR VERSION

· SPECIFIC DRIVER MINOR VERSION

· SPECIFIC DRIVER CLASS SPEC MAJOR VERSION

· SPECIFIC DRIVER CLASS SPEC MINOR VERSION

· FUNCTION

· ADC CALIBRATION

· AUTO ZERO

· DC NOISE REJECTION

· OFFSET COMPENSATED OHMS

· MEASUREMENT COMPLETE DESTINATION

· MEASUREMENT DESTINATION SLOPE

· TRIGGER SLOPE

· TRIGGER SOURCE

· BUFFER SIZE

· LATENCY

· SAMPLE COUNT

· SAMPLE DELAY MODE

· SAMPLE TRIGGER

· SAMPLE TRIGGER SLOPE

· TRIGGER COUNT

· APERTURE TIME UNITS

· NUMBER OF AVERAGES

· OPERATION MODE

· WAVEFORM COUPLING

· WAVEFORM POINTS





Return parameters



Parameter

Variable Type

Description



$Result

Boolean

The value of the attribute identifier.





Example(s):

$Result= NI_DMM_GetIntegerAttribute($Handle, "AUTO ZERO");





NI_DMM_GetStringAttribute

Previous Top Next



* * *



NI_DMM_GetStringAttribute



Usage:

$Result = NI_DMM_GetStringAttribute($Handle, $AttributeIdentifier, $BufferSize);



Description:

This function requires NI-DMM 2.3 to be installed on the system.

This function gets the value of a string attribute.



Remarks:

· This function is tested with a National Instruments device NI PXI-4070.

· This function can be used for all National Instruments digital multimeter types (NI DMM devices).



Result:

$Result = NI_DMM_GetStringAttribute($Handle, $AttributeIdentifier, $BufferSize);

Function arguments



Parameter

Variable Type

Description



$Handle

Object

A handle to a NI DMM device created with the NIDMM_Initialize function.



$AttributeIdentifier

String

Pass the ID of an attribute.

Possible values:

· DRIVER SETUP

· SPECIFIC DRIVER PREFIX

· SPECIFIC DRIVER REVISION

· SPECIFIC DRIVER DESCRIPTION

· ID QUERY RESPONSE

· SPECIFIC DRIVER VENDOR

· LOGICAL NAME

· I/O RESOURCE DESCRIPTOR

· INSTRUMENT FIRMWARE REVISION

· INSTRUMENT MANUFACTURER

· INSTRUMENT MODEL

· SERIAL NUMBER

· GROUP CAPABILITIES

· SUPPORTED INSTRUMENT MODELS



$BufferSize

Integer

The size of the returned attribute value.





Return parameters



Parameter

Variable Type

Description



$Result

String

The value of the attribute identifier.





Example(s):

$Value = NI_DMM_GetStringAttribute($Handle, "INSTRUMENT MODEL", 255);





NI_DMM_Initialize

Previous Top Next



* * *



NI_DMM_Initialize



Usage:

$Handle = NI_DMM_Initialize($DeviceName, $IdQuery, $ResetDevice);



Description:

This function requires NI-DMM 2.3 to be installed on the system.

This function completes the following tasks:

· Creates a new instrument driver session.

· Opens a session to the device you specify for the $DeviceName parameter.

· If the IdQuery parameter is set to true, this function queries the instrument ID and checks that it is valid for this instrument driver.

· If the $ResetDevice parameter is set to true, this function resets the instrument to a known state.

· Sends initialization commands to set the instrument to the state necessary for the operation of the instrument driver.

· Returns a session handle that you use to identify the instrument in all subsequent instrument driver function calls.



Remarks:

· This function is tested with a National Instruments device NI PXI-4070.

· This function can be used for all National Instruments digital multimeter types (NI DMM devices).



Result:

$Handle = NI_DMM_Initialize($DeviceName, $IdQuery, $ResetDevice);

Function arguments



Parameter

Variable Type

Description



$DeviceName

String

Contains the resource name of the device to initialize. The resource name is assigned in Measurement & Automation Explorer (MAX).



$IdQuery

Boolean

Specifies whether the driver performs an ID query. When this parameter is set to "true", the driver verifies that the instrument is of a type that this driver supports.



$ResetDevice

Boolean

Specifies whether to reset the instrument during the initialization procedure.





Return parameters



Parameter

Variable Type

Description



$Handle

Object

Returns a handle that you use to identify the instrument in all subsequent instrument driver function calls.





Example(s):

$Handle = NIDMM.Initialize("Dev1", "true", "true");





NI_DMM_Initiate

Previous Top Next



* * *



NI_DMM_Initiate



Usage:

NI_DMM_Initiate($Handle);



Description:

This function requires NI-DMM 2.3 to be installed on the system.

This function initiates the measurement setup with the NI_DMM_ConfigureMeasurement.



Remarks:

· This function is tested with a National Instruments device NI PXI-4070.

· This function can be used for all National Instruments digital multimeter types (NI DMM devices).



Result:

NI_DMM_Initiate($Handle);

Function arguments



Parameter

Variable Type

Description



$Handle

Object

A handle to a NI DMM device created with the NIDMM_Initialize function.





Return parameters



Parameter

Variable Type

Description





Example(s):

NI_DMM_Initiate($Handle);





NI_DMM_Measure2WireResistance

Previous Top Next



* * *



NI_DMM_Measure2WireResistance



Usage:

$Result = NI_DMM_Measure2WireResistance($Handle, $MeasureRange, $Resolution, $MaxMeasTime, $PowerLineFrequency, $AutoZeroMode);



Description:

This function requires NI-DMM 2.3 to be installed on the system.

This function completes the following tasks:

· Configures the common attributes of the measurement: the measure range, the maximum measure time, the resolution and the power line frequency.

· Configures the DMM for Auto Zero.

· After configuration, the function measures the DC voltage present on the DMM instrument using the handle $Handle created with NI_DMM_Initialize.



Remarks:

· This function is tested with a National Instruments device NI PXI-4070.

· This function can be used for all National Instruments digital multimeter types (NI DMM devices).



Result:

$Result = NI_DMM_Measure2WireResistance($Handle, $MeasureRange, $Resolution, $MaxMeasTime, $PowerLineFrequency, $AutoZeroMode);

Function arguments



Parameter

Variable Type

Description



$Handle

Object

A handle to a NI DMM device created with the NIDMM_Initialize function.



$MeasureRange

Double

Specifies the range for the function. For example, you must type in 100 Hz if you are measuring 101 Hz or higher. For all other functions, you must supply a range that exceeds the value that you are measuring. For example, you must type in 10 V if you are measuring 9 V. Range values are coerced up to the closest input range. Refer to the Devices Overview for a list of valid ranges.



Possible options:

· -1: (On) NI-DMM performs an Auto Range before acquiring the measurement.

· -2: (Off) NI-DMM uses the current Auto Range value for all subsequent measurements until the measurement configuration is changed.

· -3: (Once) NI-DMM performs an Auto Range before acquiring the measurement. The Auto Range value is stored and used for all subsequent measurements until the measurement configuration is changed.

· Any other value.



$Resolution

Double

For a noise-free DMM, resolution is the smallest change in an input signal that produces, on average, a change in the output signal.



$MaxMeasTime

Integer

Specifies the maximum time allowed for this function to complete in milliseconds.



$PowerLineFrequency

String

Specifies the powerline frequency. This value is used to select an aperture time to reject power line noise.

Possible values:

· 50 Hz

· 60 Hz



$AutoZeroMode

String

Configures the DMM for Auto Zero. When Auto Zero is on, the DMM internally disconnects the input signal and takes a zero reading. It then subtracts the zero reading from the measurement. This prevents offset voltages present on the input circuitry of the DMM from affecting measurement accuracy. When Auto Zero is off, the DMM does not compensate for zero reading offset. ON enables Auto Zero for each measurement. ONCE enables Auto Zero before the next measurement. The Auto Zero value is stored and used in subsequent measurements until the device is reconfigured. OFF disables Auto Zero. If you set the Auto Zero mode to AUTO, NI-DMM determines whether to enable Auto Zero based on the measurement function that you configure.





Possible values:

· Auto

· On

· Once

· Off





Return parameters



Parameter

Variable Type

Description



$Result

Float

The resulting value is returned as a float.





Example(s):

I applied a 10 kOhm resistor on the NI-DMM device according the 2 wire measure method.





$Result = NI_DMM_Measure2WireResistance($Handle,10000.0,1.0,50,"50 Hz","On");





NI_DMM_Measure4WireResistance

Previous Top Next



* * *



NI_DMM_Measure4WireResistance



Usage:

$Result = NI_DMM_Measure4WireResistance($Handle, $MeasureRange, $Resolution, $MaxMeasTime, $PowerLineFrequency, $AutoZeroMode);



Description:

This function requires NI-DMM 2.3 to be installed on the system.

For precision measurements with resistances below 100 k ohms, the 4-wire mode works more reliably and conveniently than the 2-wire mode. The 4-wire mode requires 4-wire switching and more cabling; however, you may decide the tradeoff is acceptable, depending upon the accuracy versus complexity requirements of your system. Look in the documentation for the hardware connections on the NI DMM device.

This function completes the following tasks:

· Configures the common attributes of the measurement: the measure range, the maximum measure time, the resolution and the power line frequency.

· Configures the DMM for Auto Zero.

· After configuration, the function measures the DC voltage present on the DMM instrument using the handle $Handle created with NI_DMM_Initialize.



Remarks:

· This function is tested with a National Instruments device NI PXI-4070.

· This function can be used for all National Instruments digital multimeter types (NI DMM devices).



Result:

$Result = NI_DMM_Measure4WireResistance($Handle, $MeasureRange, $Resolution, $MaxMeasTime, $PowerLineFrequency, $AutoZeroMode);

Function arguments



Parameter

Variable Type

Description



$Handle

Object

A handle to a NI DMM device created with the NIDMM_Initialize function.



$MeasureRange

Double

Specifies the range for the function. For example, you must type in 100 Hz if you are measuring 101 Hz or higher. For all other functions, you must supply a range that exceeds the value that you are measuring. For example, you must type in 10 V if you are measuring 9 V. Range values are coerced up to the closest input range. Refer to the Devices Overview for a list of valid ranges.





Possible options:

· -1: (On) NI-DMM performs an Auto Range before acquiring the measurement.

· -2: (Off) NI-DMM uses the current Auto Range value for all subsequent measurements until the measurement configuration is changed.

· -3: (Once) NI-DMM performs an Auto Range before acquiring the measurement. The Auto Range value is stored and used for all subsequent measurements until the measurement configuration is changed.

· Any other value.



$Resolution

Double

For a noise-free DMM, resolution is the smallest change in an input signal that produces, on average, a change in the output signal.



$MaxMeasTime

Integer

Specifies the maximum time allowed for this function to complete in milliseconds.



$PowerLineFrequency

String

Specifies the powerline frequency. This value is used to select an aperture time to reject power line noise.

Possible values:

· 50 Hz

· 60 Hz



$AutoZeroMode

String

Configures the DMM for Auto Zero. When Auto Zero is on, the DMM internally disconnects the input signal and takes a zero reading. It then subtracts the zero reading from the measurement. This prevents offset voltages present on the input circuitry of the DMM from affecting measurement accuracy. When Auto Zero is off, the DMM does not compensate for zero reading offset. ON enables Auto Zero for each measurement. ONCE enables Auto Zero before the next measurement. The Auto Zero value is stored and used in subsequent measurements until the device is reconfigured. OFF disables Auto Zero. If you set the Auto Zero mode to AUTO, NI-DMM determines whether to enable Auto Zero based on the measurement function that you configure.





Possible values:

· Auto

· On

· Once

· Off





Return parameters



Parameter

Variable Type

Description



$Result

Float

The resulting value is returned as a float.





Example(s):

I applied a 10 kOhm resistor on the NI-DMM device according the 4 wire measure method.





$Result = NI_DMM_Measure4WireResistance($Handle,10000.0,1.0,50,"50 Hz","On");





NI_DMM_MeasureCurrentAC

Previous Top Next



* * *



NI_DMM_MeasureCurrentAC



Usage:

$Result = NI_DMM_MeasureCurrentAC($Handle, $MeasureRange, $Resolution, $MaxMeasTime, $PowerLineFrequency, $AutoZeroMode);



Description:

This function requires NI-DMM 2.3 to be installed on the system.

This function completes the following tasks:

· Configures the common attributes of the measurement: the measure range, the maximum measure time, the resolution and the power line frequency.

· Configures the DMM for Auto Zero.

· After configuration, the function measures the AC current present on the DMM instrument using the handle $Handle created with NI_DMM_Initialize.



Remarks:

· This function is tested with a National Instruments device NI PXI-4070.

· This function can be used for all National Instruments digital multimeter types (NI DMM devices).



Result:

$Result = NI_DMM_MeasureCurrentAC($Handle, $MeasureRange, $Resolution, $MaxMeasTime, $PowerLineFrequency, $AutoZeroMode);

Function arguments



Parameter

Variable Type

Description



$Handle

Object

A handle to a NI DMM device created with the NIDMM_Initialize function.



$MeasureRange

Double

Specifies the range for the function. For example, you must type in 100 Hz if you are measuring 101 Hz or higher. For all other functions, you must supply a range that exceeds the value that you are measuring. For example, you must type in 10 V if you are measuring 9 V. Range values are coerced up to the closest input range. Refer to the Devices Overview for a list of valid ranges.





Possible options:

· -1: (On) NI-DMM performs an Auto Range before acquiring the measurement.

· -2: (Off) NI-DMM uses the current Auto Range value for all subsequent measurements until the measurement configuration is changed.

· -3: (Once) NI-DMM performs an Auto Range before acquiring the measurement. The Auto Range value is stored and used for all subsequent measurements until the measurement configuration is changed.

· Any other value.



$Resolution

Double

For a noise-free DMM, resolution is the smallest change in an input signal that produces, on average, a change in the output signal.



$MaxMeasTime

Integer

Specifies the maximum time allowed for this function to complete in milliseconds.



$PowerLineFrequency

String

Specifies the powerline frequency. This value is used to select an aperture time to reject power line noise.

Possible values:

· 50 Hz

· 60 Hz



$AutoZeroMode

String

Configures the DMM for Auto Zero. When Auto Zero is on, the DMM internally disconnects the input signal and takes a zero reading. It then subtracts the zero reading from the measurement. This prevents offset voltages present on the input circuitry of the DMM from affecting measurement accuracy. When Auto Zero is off, the DMM does not compensate for zero reading offset. ON enables Auto Zero for each measurement. ONCE enables Auto Zero before the next measurement. The Auto Zero value is stored and used in subsequent measurements until the device is reconfigured. OFF disables Auto Zero. If you set the Auto Zero mode to AUTO, NI-DMM determines whether to enable Auto Zero based on the measurement function that you configure.





Possible values:

· Auto

· On

· Once

· Off





Return parameters



Parameter

Variable Type

Description



$Result

Float

The resulting value is returned as a float.





Example(s):

$Result = NI_DMM_MeasureCurrentAC($Handle,-1,1.0,50,"50 Hz","On");





NI_DMM_MeasureCurrentDC

Previous Top Next



* * *



NI_DMM_MeasureCurrentDC



Usage:

$Result = NI_DMM_MeasureCurrentDC($Handle, $MeasureRange, $Resolution, $MaxMeasTime, $PowerLineFrequency, $AutoZeroMode);



Description:

This function requires NI-DMM 2.3 to be installed on the system.

This function completes the following tasks:

· Configures the common attributes of the measurement: the measure range, the maximum measure time, the resolution and the power line frequency.

· Configures the DMM for Auto Zero.

· After configuration, the function measures the DC current present on the DMM instrument using the handle $Handle created with NI_DMM_Initialize.



Remarks:

· This function is tested with a National Instruments device NI PXI-4070.

· This function can be used for all National Instruments digital multimeter types (NI DMM devices).



Result:

$Result = NI_DMM_MeasureCurrentDC($Handle, $MeasureRange, $Resolution, $MaxMeasTime, $PowerLineFrequency, $AutoZeroMode);

Function arguments



Parameter

Variable Type

Description



$Handle

Object

A handle to a NI DMM device created with the NIDMM_Initialize function.



$MeasureRange

Double

Specifies the range for the function. For example, you must type in 100 Hz if you are measuring 101 Hz or higher. For all other functions, you must supply a range that exceeds the value that you are measuring. For example, you must type in 10 V if you are measuring 9 V. Range values are coerced up to the closest input range. Refer to the Devices Overview for a list of valid ranges.





Possible options:

· -1: (On) NI-DMM performs an Auto Range before acquiring the measurement.

· -2: (Off) NI-DMM uses the current Auto Range value for all subsequent measurements until the measurement configuration is changed.

· -3: (Once) NI-DMM performs an Auto Range before acquiring the measurement. The Auto Range value is stored and used for all subsequent measurements until the measurement configuration is changed.

· Any other value.



$Resolution

Double

For a noise-free DMM, resolution is the smallest change in an input signal that produces, on average, a change in the output signal.



$MaxMeasTime

Integer

Specifies the maximum time allowed for this function to complete in milliseconds.



$PowerLineFrequency

String

Specifies the powerline frequency. This value is used to select an aperture time to reject power line noise.

Possible values:

· 50 Hz

· 60 Hz



$AutoZeroMode

String

Configures the DMM for Auto Zero. When Auto Zero is on, the DMM internally disconnects the input signal and takes a zero reading. It then subtracts the zero reading from the measurement. This prevents offset voltages present on the input circuitry of the DMM from affecting measurement accuracy. When Auto Zero is off, the DMM does not compensate for zero reading offset. ON enables Auto Zero for each measurement. ONCE enables Auto Zero before the next measurement. The Auto Zero value is stored and used in subsequent measurements until the device is reconfigured. OFF disables Auto Zero. If you set the Auto Zero mode to AUTO, NI-DMM determines whether to enable Auto Zero based on the measurement function that you configure.





Possible values:

· Auto

· On

· Once

· Off





Return parameters



Parameter

Variable Type

Description



$Result

Float

The resulting value is returned as a float.





Example(s):

I applied a 10 ohm/25W series resistor (with a PSU = 5V). The current consumption should be 0,5A.





$Result = NI_DMM_MeasureCurrentDC($Handle,1.0,1.0,50,"50 Hz","On");





NI_DMM_MeasureDiode

Previous Top Next



* * *



NI_DMM_MeasureDiode



Usage:

$Result = NI_DMM_MeasureDiode($Handle, $MeasureRange, $Resolution, $MaxMeasTime, $PowerLineFrequency, $AutoZeroMode, $CurrentSource);



Description:

This function requires NI-DMM 2.3 to be installed on the system.

This function completes the following tasks:

· Configures the common attributes of the measurement: the measure range, the maximum measure time, the resolution and the power line frequency.

· Configures the DMM for Auto Zero.

· After configuration, the function measures the voltage drop present on the DMM instrument using the handle $Handle created with NI_DMM_Initialize.



Remarks:

· This function is tested with a National Instruments device NI PXI-4070.

· This function can be used for all National Instruments digital multimeter types (NI DMM devices).



Result:

$Result = NI_DMM_MeasureDiode($Handle, $MeasureRange, $Resolution, $MaxMeasTime, $PowerLineFrequency, $AutoZeroMode, $CurrentSource);

Function arguments



Parameter

Variable Type

Description



$Handle

Object

A handle to a NI DMM device created with the NIDMM_Initialize function.



$MeasureRange

Double

Specifies the range for the function. For example, you must type in 100 Hz if you are measuring 101 Hz or higher. For all other functions, you must supply a range that exceeds the value that you are measuring. For example, you must type in 10 V if you are measuring 9 V. Range values are coerced up to the closest input range. Refer to the Devices Overview for a list of valid ranges.





Possible options:

· -1: (On) NI-DMM performs an Auto Range before acquiring the measurement.

· -2: (Off) NI-DMM uses the current Auto Range value for all subsequent measurements until the measurement configuration is changed.

· -3: (Once) NI-DMM performs an Auto Range before acquiring the measurement. The Auto Range value is stored and used for all subsequent measurements until the measurement configuration is changed.

· Any other value.



$Resolution

Double

For a noise-free DMM, resolution is the smallest change in an input signal that produces, on average, a change in the output signal.



$MaxMeasTime

Integer

Specifies the maximum time allowed for this function to complete in milliseconds.



$PowerLineFrequency

String

Specifies the powerline frequency. This value is used to select an aperture time to reject power line noise.

Possible values:

· 50 Hz

· 60 Hz



$AutoZeroMode

String

Configures the DMM for Auto Zero. When Auto Zero is on, the DMM internally disconnects the input signal and takes a zero reading. It then subtracts the zero reading from the measurement. This prevents offset voltages present on the input circuitry of the DMM from affecting measurement accuracy. When Auto Zero is off, the DMM does not compensate for zero reading offset. ON enables Auto Zero for each measurement. ONCE enables Auto Zero before the next measurement. The Auto Zero value is stored and used in subsequent measurements until the device is reconfigured. OFF disables Auto Zero. If you set the Auto Zero mode to AUTO, NI-DMM determines whether to enable Auto Zero based on the measurement function that you configure.





Possible values:

· Auto

· On

· Once

· Off



$CurrentSource

String

Specifies the current source provided during diode measurements.





Possible values:

· 1 uA

· 10 uA

· 100 uA

· 1 mA





Return parameters



Parameter

Variable Type

Description



$Result

Float

The resulting value is returned as a float.





Example(s):

I applied a diode 1N4002 to the NI DMM device.





$Result = NI_DMM_MeasureDiode($Handle,1.0,1.0,50,"50 Hz","On","1 mA");





NI_DMM_MeasureFrequency

Previous Top Next



* * *



NI_DMM_MeasureFrequency



Usage:

$Result = NI_DMM_MeasureFrequency($Handle, $MeasureRange, $Resolution, $MaxMeasTime, $VoltageRange);



Description:

This function requires NI-DMM 2.3 to be installed on the system.

This function completes the following tasks:

· Configures the common attributes of the measurement: the measure range, the maximum measure time, the resolution and the power line frequency.

· After configuration, the function measures the frequency of the AC signal present on the DMM instrument using the handle $Handle created with NI_DMM_Initialize.



Remarks:

· This function is tested with a National Instruments device NI PXI-4070.

· This function can be used for all National Instruments digital multimeter types (NI DMM devices).



Result:

$Result = NI_DMM_MeasureFrequency($Handle, $MeasureRange, $Resolution, $MaxMeasTime, $VoltageRange);

Function arguments



Parameter

Variable Type

Description



$Handle

Object

A handle to a NI DMM device created with the NIDMM_Initialize function.



$MeasureRange

Double

Specifies the range for the function. For example, you must type in 100 Hz if you are measuring 101 Hz or higher. For all other functions, you must supply a range that exceeds the value that you are measuring. For example, you must type in 10 V if you are measuring 9 V. Range values are coerced up to the closest input range. Refer to the Devices Overview for a list of valid ranges.





Possible options:

· -1: (On) NI-DMM performs an Auto Range before acquiring the measurement.

· -2: (Off) NI-DMM uses the current Auto Range value for all subsequent measurements until the measurement configuration is changed.

· -3: (Once) NI-DMM performs an Auto Range before acquiring the measurement. The Auto Range value is stored and used for all subsequent measurements until the measurement configuration is changed.

· Any other value.



$Resolution

Double

For a noise-free DMM, resolution is the smallest change in an input signal that produces, on average, a change in the output signal.



$MaxMeasTime

Integer

Specifies the maximum time allowed for this function to complete in milliseconds.



$VoltageRange



Sets the expected maximum amplitude of the input signal.





Possible values:

· -1: (On) Configures the DMM to take an Auto Range measurement to calculate the voltage range before each frequency or period measurement.

· -2: (Off) Disables Auto Ranging. The driver sets the voltage range to the last calculated voltage range.

· -3: (Once) NI-DMM performs an Auto Range before acquiring the measurement. The Auto Range value is stored and used for all subsequent measurements until the measurement configuration is changed.

· Any other value.





Return parameters



Parameter

Variable Type

Description



$Result

Float

The resulting value is returned as a float.





Example(s):

I applied a AC voltage of 1.25V (1.25kHz) to the NI DMM device.





$Result = NI_DMM_MeasureFrequency($Handle,1250,0.001,1000,2.0);





NI_DMM_MeasurePeriod

Previous Top Next



* * *



NI_DMM_MeasurePeriod



Usage:

$Result = NI_DMM_MeasurePeriod($Handle, $MeasureRange, $Resolution, $MaxMeasTime, $VoltageRange);



Description:

This function requires NI-DMM 2.3 to be installed on the system.

This function completes the following tasks:

· Configures the common attributes of the measurement: the measure range, the maximum measure time, the resolution and the power line frequency.

· After configuration, the function measures the period of the AC signal present on the DMM instrument using the handle $Handle created with NI_DMM_Initialize.



Remarks:

· This function is tested with a National Instruments device NI PXI-4070.

· This function can be used for all National Instruments digital multimeter types (NI DMM devices).



Result:

$Result = NI_DMM_MeasurePeriod($Handle, $MeasureRange, $Resolution, $MaxMeasTime, $VoltageRange);

Function arguments



Parameter

Variable Type

Description



$Handle

Object

A handle to a NI DMM device created with the NIDMM_Initialize function.



$MeasureRange

Double

Specifies the range for the function. For example, you must type in 100 Hz if you are measuring 101 Hz or higher. For all other functions, you must supply a range that exceeds the value that you are measuring. For example, you must type in 10 V if you are measuring 9 V. Range values are coerced up to the closest input range. Refer to the Devices Overview for a list of valid ranges.





Possible options:

· -1: (On) NI-DMM performs an Auto Range before acquiring the measurement.

· -2: (Off) NI-DMM uses the current Auto Range value for all subsequent measurements until the measurement configuration is changed.

· -3: (Once) NI-DMM performs an Auto Range before acquiring the measurement. The Auto Range value is stored and used for all subsequent measurements until the measurement configuration is changed.

· Any other value.



$Resolution

Double

For a noise-free DMM, resolution is the smallest change in an input signal that produces, on average, a change in the output signal.



$MaxMeasTime

Integer

Specifies the maximum time allowed for this function to complete in milliseconds.



$VoltageRange



Sets the expected maximum amplitude of the input signal.





Possible values:

· -1: (On) Configures the DMM to take an Auto Range measurement to calculate the voltage range before each frequency or period measurement.

· -2: (Off) Disables Auto Ranging. The driver sets the voltage range to the last calculated voltage range.

· -3: (Once) NI-DMM performs an Auto Range before acquiring the measurement. The Auto Range value is stored and used for all subsequent measurements until the measurement configuration is changed.

· Any other value.





Return parameters



Parameter

Variable Type

Description



$Result

Float

The resulting value is returned as a float.





Example(s):

I applied a AC voltage of 1.25V (1.25kHz) to the NI DMM device.





$Result = NIDMM.MeasurePeriod($Handle,0.0008,0.001,1000,2.0);





NI_DMM_MeasureVoltageAC

Previous Top Next



* * *



NI_DMM_MeasureVoltageAC



Usage:

$Result = NIDMM_MeasureVoltageAC($Handle, $MeasureRange, $Resolution, $MaxMeasTime, $PowerLineFrequency, $MinBandWidth, $MaxBandWidth, $AutoZeroMode);



Description:

This function requires NI-DMM 2.3 to be installed on the system.

This function completes the following tasks:

· Configures the common attributes of the measurement: the measure range, the maximum measure time, the resolution and the power line frequency.

· Configures the DMM for Auto Zero.

· After configuration, the function measures the AC voltage present on the DMM instrument using the handle $Handle created with NIDMM.Initialize.



Remarks:

· This function is tested with a National Instruments device NI PXI-4070.

· This function can be used for all National Instruments digital multimeter types (NI DMM devices).



Result:

$Result = NIDMM_MeasureVoltageAC($Handle, $MeasureRange, $Resolution, $MaxMeasTime, $PowerLineFrequency, $MinBandWidth, $MaxBandWidth, $AutoZeroMode);

Function arguments



Parameter

Variable Type

Description



$Handle

Object

A handle to a NI DMM device created with the NIDMM_Initialize function.



$MeasureRange

Double

Specifies the range for the function. For example, you must type in 100 Hz if you are measuring 101 Hz or higher. For all other functions, you must supply a range that exceeds the value that you are measuring. For example, you must type in 10 V if you are measuring 9 V. Range values are coerced up to the closest input range. Refer to the Devices Overview for a list of valid ranges.





Possible options:

· -1: (On) NI-DMM performs an Auto Range before acquiring the measurement.

· -2: (Off) NI-DMM uses the current Auto Range value for all subsequent measurements until the measurement configuration is changed.

· -3: (Once) NI-DMM performs an Auto Range before acquiring the measurement. The Auto Range value is stored and used for all subsequent measurements until the measurement configuration is changed.

· Any other value.



$Resolution

Double

For a noise-free DMM, resolution is the smallest change in an input signal that produces, on average, a change in the output signal.



$MaxMeasTime

Integer

Specifies the maximum time allowed for this function to complete in milliseconds.



$PowerLineFrequency

String

Specifies the powerline frequency. This value is used to select an aperture time to reject power line noise.

Possible values:

· 50 Hz

· 60 Hz



$MinBandWidth

Double

Min Frequency specifies the minimum expected frequency component of the input signal in Hz.



$MaxBandWidth

Double

Max Frequency specifies the maximum expected frequency component of the input signal in Hz within the device



$AutoZeroMode

String

Configures the DMM for Auto Zero. When Auto Zero is on, the DMM internally disconnects the input signal and takes a zero reading. It then subtracts the zero reading from the measurement. This prevents offset voltages present on the input circuitry of the DMM from affecting measurement accuracy. When Auto Zero is off, the DMM does not compensate for zero reading offset. ON enables Auto Zero for each measurement. ONCE enables Auto Zero before the next measurement. The Auto Zero value is stored and used in subsequent measurements until the device is reconfigured. OFF disables Auto Zero. If you set the Auto Zero mode to AUTO, NI-DMM determines whether to enable Auto Zero based on the measurement function that you configure.





Possible values:

· Auto

· On

· Once

· Off





Return parameters



Parameter

Variable Type

Description



$Result

Float

The resulting value is returned as a float.





Example(s):

I applied a AC voltage of 1.25V (1.25kHz) to the NI DMM device.





$Result = NI_DMM_MeasureVoltageAC($Handle,-1.0,0.001,2000,"50 Hz","750","1250","Auto");





NI_DMM_MeasureVoltageAC

Previous Top Next



* * *



NI_DMM_MeasureVoltageAC_DC_Coupled



Usage:

$Result = NI_DMM_Measure_VoltageAC_DC_Coupled($Handle, $MeasureRange, $Resolution, $MaxMeasTime, $PowerLineFrequency, $MinBandWidth, $MaxBandWidth, $AutoZeroMode);



Description:

This function requires NI-DMM 2.3 to be installed on the system.

This function completes the following tasks:

· Configures the common attributes of the measurement: the measure range, the maximum measure time, the resolution and the power line frequency.

· Configures the DMM for Auto Zero.

· After configuration, the function measures the AC voltage present on the DMM instrument using the handle $Handle created with NIDMM.Initialize.



Remarks:

· This function is tested with a National Instruments device NI PXI-4070.

· This function can be used for all National Instruments digital multimeter types (NI DMM devices).



Result:

$Result = NI_DMM_Measure_VoltageAC_DC_Coupled($Handle, $MeasureRange, $Resolution, $MaxMeasTime, $PowerLineFrequency, $MinBandWidth, $MaxBandWidth, $AutoZeroMode);

Function arguments



Parameter

Variable Type

Description



$Handle

Object

A handle to a NI DMM device created with the NIDMM_Initialize function.



$MeasureRange

Double

Specifies the range for the function. For example, you must type in 100 Hz if you are measuring 101 Hz or higher. For all other functions, you must supply a range that exceeds the value that you are measuring. For example, you must type in 10 V if you are measuring 9 V. Range values are coerced up to the closest input range. Refer to the Devices Overview for a list of valid ranges.





Possible options:

· -1: (On) NI-DMM performs an Auto Range before acquiring the measurement.

· -2: (Off) NI-DMM uses the current Auto Range value for all subsequent measurements until the measurement configuration is changed.

· -3: (Once) NI-DMM performs an Auto Range before acquiring the measurement. The Auto Range value is stored and used for all subsequent measurements until the measurement configuration is changed.

· Any other value.



$Resolution

Double

For a noise-free DMM, resolution is the smallest change in an input signal that produces, on average, a change in the output signal.



$MaxMeasTime

Integer

Specifies the maximum time allowed for this function to complete in milliseconds.



$PowerLineFrequency

String

Specifies the powerline frequency. This value is used to select an aperture time to reject power line noise.

Possible values:

· 50 Hz

· 60 Hz



$MinBandWidth

Double

Min Frequency specifies the minimum expected frequency component of the input signal in Hz.



$MaxBandWidth

Double

Max Frequency specifies the maximum expected frequency component of the input signal in Hz within the device



$AutoZeroMode

String

Configures the DMM for Auto Zero. When Auto Zero is on, the DMM internally disconnects the input signal and takes a zero reading. It then subtracts the zero reading from the measurement. This prevents offset voltages present on the input circuitry of the DMM from affecting measurement accuracy. When Auto Zero is off, the DMM does not compensate for zero reading offset. ON enables Auto Zero for each measurement. ONCE enables Auto Zero before the next measurement. The Auto Zero value is stored and used in subsequent measurements until the device is reconfigured. OFF disables Auto Zero. If you set the Auto Zero mode to AUTO, NI-DMM determines whether to enable Auto Zero based on the measurement function that you configure.





Possible values:

· Auto

· On

· Once

· Off





Return parameters



Parameter

Variable Type

Description



$Result

Float

The resulting value is returned as a float.





Example(s):

I applied a AC voltage of 1.25V on a DC level of 2V to the NI DMM device.





$Result = NI_DMM_Measure_VoltageAC_DC_Coupled($Handle,1.0,0.001,1200,"50 Hz","750","1000","Auto");





NI_DMM_MeasureVoltageDC

Previous Top Next



* * *



NI_DMM_MeasureVoltageDC



Usage:

$Result = NIDMM_MeasureVoltageDC($Handle, $MeasureRange, $Resolution, $MaxMeasTime, $PowerLineFrequency, $AutoZeroMode);



Description:

This function requires NI-DMM 2.3 to be installed on the system.

This function completes the following tasks:

· Configures the common attributes of the measurement: the measure range, the maximum measure time, the resolution and the power line frequency.

· Configures the DMM for Auto Zero.

· After configuration, the function measures the DC voltage present on the DMM instrument using the handle $Handle created with NI_DMM_Initialize.



Remarks:

· This function is tested with a National Instruments device NI PXI-4070.

· This function can be used for all National Instruments digital multimeter types (NI DMM devices).



Result:

$Result = NIDMM_MeasureVoltageDC($Handle, $MeasureRange, $Resolution, $MaxMeasTime, $PowerLineFrequency, $AutoZeroMode);

Function arguments



Parameter

Variable Type

Description



$Handle

Object

A handle to a NI DMM device created with the NIDMM_Initialize function.



$MeasureRange

Double

Specifies the range for the function. For example, you must type in 100 Hz if you are measuring 101 Hz or higher. For all other functions, you must supply a range that exceeds the value that you are measuring. For example, you must type in 10 V if you are measuring 9 V. Range values are coerced up to the closest input range. Refer to the Devices Overview for a list of valid ranges.





Possible options:

· -1: (On) NI-DMM performs an Auto Range before acquiring the measurement.

· -2: (Off) NI-DMM uses the current Auto Range value for all subsequent measurements until the measurement configuration is changed.

· -3: (Once) NI-DMM performs an Auto Range before acquiring the measurement. The Auto Range value is stored and used for all subsequent measurements until the measurement configuration is changed.

· Any other value.



$Resolution

Double

For a noise-free DMM, resolution is the smallest change in an input signal that produces, on average, a change in the output signal.



$MaxMeasTime

Integer

Specifies the maximum time allowed for this function to complete in milliseconds.



$PowerLineFrequency

String

Specifies the powerline frequency. This value is used to select an aperture time to reject power line noise.

Possible values:

· 50 Hz

· 60 Hz



$AutoZeroMode

String

Configures the DMM for Auto Zero. When Auto Zero is on, the DMM internally disconnects the input signal and takes a zero reading. It then subtracts the zero reading from the measurement. This prevents offset voltages present on the input circuitry of the DMM from affecting measurement accuracy. When Auto Zero is off, the DMM does not compensate for zero reading offset. ON enables Auto Zero for each measurement. ONCE enables Auto Zero before the next measurement. The Auto Zero value is stored and used in subsequent measurements until the device is reconfigured. OFF disables Auto Zero. If you set the Auto Zero mode to AUTO, NI-DMM determines whether to enable Auto Zero based on the measurement function that you configure.





Possible values:

· Auto

· On

· Once

· Off





Return parameters



Parameter

Variable Type

Description



$Result

Float

The resulting value is returned as a float.





Example(s):

I applied a DC voltage of 5V to the NI DMM device.





$Result = NI_DMM_MeasureVoltageDC($Handle,5.0,1.0,50,"50 Hz","On");





NI_DMM_SetACBandwidth

Previous Top Next



* * *



NI_DMM_SetACBandwidth



Usage:

NI_DMM_SetACBandwidth($Handle, $MinimumFrequency,$MaximumFrequency);



Description:

This function requires NI-DMM 2.3 to be installed on the system.

This function sets the AC Bandwidth of the DMM.



Remarks:

· This function is tested with a National Instruments device NI PCI-4060.

· This function can be used for all National Instruments digital multimeter types (NI DMM devices).



Result:

NI_DMM_SetACBandwidth($Handle, $MinimumFrequency,$MaximumFrequency);

Function arguments



Parameter

Variable Type

Description



$Handle

Object

A handle to a NI DMM device created with the NIDMM_Initialize function.



$MinimumFrequency

Float

Minimum frequency



$MaximumFrequency

Float

Maximum frequency





Return parameters



Parameter

Variable Type

Description





Example(s):

NI_DMM_SetACBandwidth($Handle,100.0,1000.0);





NI_DMM_SetAutoZeroMode

Previous Top Next



* * *



NI_DMM_SetAutoZeroMode



Usage:

NI_DMM_SetAutoZeroMode($Handle,$Mode);



Description:

This function requires NI-DMM 2.3 to be installed on the system.

This function sets the Auto Zero Mode of the DMM.



Remarks:

· This function is tested with a National Instruments device NI PCI-4060.

· This function can be used for all National Instruments digital multimeter types (NI DMM devices).



Result:

NI_DMM_SetAutoZeroMode($Handle,$Mode);

Function arguments



Parameter

Variable Type

Description



$Handle

Object

A handle to a NI DMM device created with the NIDMM_Initialize function.



$AutoZeroMode

String

Configures the DMM for Auto Zero. When Auto Zero is on, the DMM internally disconnects the input signal and takes a zero reading. It then subtracts the zero reading from the measurement. This prevents offset voltages present on the input circuitry of the DMM from affecting measurement accuracy. When Auto Zero is off, the DMM does not compensate for zero reading offset. ON enables Auto Zero for each measurement. ONCE enables Auto Zero before the next measurement. The Auto Zero value is stored and used in subsequent measurements until the device is reconfigured. OFF disables Auto Zero. If you set the Auto Zero mode to AUTO, NI-DMM determines whether to enable Auto Zero based on the measurement function that you configure.



Possible values:

· Auto

· On

· Once

· Off





Return parameters



Parameter

Variable Type

Description





Example(s):

NI_DMM_SetAutoZeroMode($Handle,"Off");





NI_DMM_SetBooleanAttribute

Previous Top Next



* * *



NI_DMM_SetBooleanAttribute



Usage:

$Result = NI_DMM_SetBooleanAttribute($Handle, $AttributeIdentifier, $AttributeValue);



Description:

This function requires NI-DMM 2.3 to be installed on the system.

This function sets the value of a boolean attribute.



Remarks:

· This function is tested with a National Instruments device NI PXI-4070.

· This function can be used for all National Instruments digital multimeter types (NI DMM devices).



Result:

$Result = NI_DMM_SetBooleanAttribute($Handle, $AttributeIdentifier, $AttributeValue);

Function arguments



Parameter

Variable Type

Description



$Handle

Object

A handle to a NI DMM device created with the NIDMM_Initialize function.



$AttributeIdentifier

String

Pass the ID of an attribute.

Possible values:

· CACHE

· INTERCHANGE CHECK

· QUERY INSTRUMENT STATUS

· RANGE CHECK

· RECORD COERCIONS

· SIMULATE



$AttributeValue

Boolean

Pass the value that you want to set the attribute to.

Possible values:

· true

· false





Return parameters



Parameter

Variable Type

Description



$Result

Boolean

The value of the attribute identifier.





Example(s):

$Value = NI_DMM_SetBooleanAttribute($Handle, "RANGE CHECK", "false");





NI_DMM_SetDoubleAttribute

Previous Top Next



* * *



NI_DMM_SetDoubleAttribute



Usage:

NI_DMM_SetDoubleAttribute($Handle, $AttributeIdentifier, $AttributeValue);



Description:

This function requires NI-DMM 2.3 to be installed on the system.

This function gets the value of a double attribute.



Remarks:

· This function is tested with a National Instruments device NI PXI-4070.

· This function can be used for all National Instruments digital multimeter types (NI DMM devices).



Result:

NI_DMM_SetDoubleAttribute($Handle, $AttributeIdentifier, $AttributeValue);

Function arguments



Parameter

Variable Type

Description



$Handle

Object

A handle to a NI DMM device created with the NIDMM_Initialize function.



$AttributeIdentifier

String

Pass the ID of an attribute.

Possible values:

· RANGE

· RESOLUTION DIGITS

· RESOLUTION ABSOLUTE

· AC MAX FREQUENCY

· AC MIN FREQUENCY

· CURRENT SOURCE

· FREQUENCY VOLTAGE RANGE

· INPUT RESISTANCE

· POWERLINE FREQUENCY

· SHUNT VALUE

· TRIGGER DELAY

· SAMPLE INTERVAL

· APERTURE TIME

· SETTLE TIME

· WAVEFORM RATE



$AttributeValue

Float

Pass the value that you want to set the attribute to.





Return parameters



Parameter

Variable Type

Description





Example(s):

$Value = NI_DMM_SetDoubleAttribute($Handle, "RESOLUTION DIGITS", 5.5);





NI_DMM_SetIntegerAttribute

Previous Top Next



* * *



NI_DMM_SetIntegerAttribute



Usage:

NI_DMM_SetIntegerAttribute($Handle, $AttributeIdentifier, $AttributeValue);



Description:

This function requires NI-DMM 2.3 to be installed on the system.

This function gets the value of an integer attribute.



Remarks:

· This function is tested with a National Instruments device NI PXI-4070.

· This function can be used for all National Instruments digital multimeter types (NI DMM devices).



Result:

NI_DMM_SetIntegerAttribute($Handle, $AttributeIdentifier, $AttributeValue);

Function arguments



Parameter

Variable Type

Description



$Handle

Object

A handle to a NI DMM device created with the NIDMM_Initialize function.



$AttributeIdentifier

String

Pass the ID of an attribute.

Possible values:

· FUNCTION

· ADC CALIBRATION

· AUTO ZERO

· DC NOISE REJECTION

· OFFSET COMPENSATED OHMS

· MEASUREMENT COMPLETE DESTINATION

· MEASUREMENT DESTINATION SLOPE

· TRIGGER SLOPE

· TRIGGER SOURCE

· BUFFER SIZE

· LATENCY

· SAMPLE COUNT

· SAMPLE DELAY MODE

· SAMPLE TRIGGER

· SAMPLE TRIGGER SLOPE

· TRIGGER COUNT

· APERTURE TIME UNITS

· NUMBER OF AVERAGES

· OPERATION MODE

· WAVEFORM COUPLING

· WAVEFORM POINTS



$AttributeValue

Integer

Pass the value that you want to set the attribute to.





Return parameters



Parameter

Variable Type

Description



$Result

Boolean

The value of the attribute identifier.





Example(s):

$Value = NI_DMM_SetIntegerAttribute($Handle, "SAMPLE COUNT", 100);





NI_DMM_SetPowerLineFrequency

Previous Top Next



* * *



NI_DMM_SetPowerLineFrequency



Usage:

NI_DMM_SetPowerLineFrequency($Handle, $PowerLineFrequency);



Description:

This function requires NI-DMM 2.3 to be installed on the system.

This function sets the power line frequency of the DMM.



Remarks:

· This function is tested with a National Instruments device NI PCI-4060.

· This function can be used for all National Instruments digital multimeter types (NI DMM devices).



Result:

NI_DMM_SetPowerLineFrequency($Handle, $PowerLineFrequency);

Function arguments



Parameter

Variable Type

Description



$Handle

Object

A handle to a NI DMM device created with the NIDMM_Initialize function.



$PowerLineFrequency

String

Specifies the powerline frequency. This value is used to select an aperture time to reject power line noise.

Possible values:

· 50 Hz

· 60 Hz





Return parameters



Parameter

Variable Type

Description





Example(s):

NI_DMM_SetPowerLineFrequency($Handle,"60 Hz");





SCXI1124DCOut

Previous Top Next



* * *



SCXI1124DCOut

/**************************Usage***************************************************

SCXI1124DCOut($DeviceNameChannel,$DCVoltage,$MaxRange,$MinRange);

/**************************Description*********************************************

This function requires NI-DAQmx 7.x to be installed on the system.

This function generates a DC Voltage on $DeviceNameChannel with the amount of $DCVoltage and a range setting of $MinRange and $MaxRange .

Refer your hardware manual to see values that are allowed.

Out of range settings are caught by this function

Refer to MAX to find the DevicenameChannel.

/**************************Additional Information********************************

* Instructions for Running:

* 1. Select the physical channel which correspond to where your

* signal is to be generated on the SCXI-1124.

* 2. Enter the minimum and maximum current ranges, in Volts.

* 3. Enter a DC Voltage value to generate.

* Note: Just like the minimum and maximum ranges, the data value to

* generate are in units of Volts.

*

* I/O Connections Overview:

* Make sure your signal output terminal matches the text in physical channel

* text box. In this case the signal will output to the ao0 pin on your DAQ

* Device. For more information on the input and output terminals for your

* device, open the NI-DAQmx Help, and refer to the NI-DAQmx Device Terminals

* and Device Considerations books in the table of contents.

/**************************Remarks*********************************************

This function requires NI-DAQmx 7.x to be installed on the system.

This function is tested with NI-SCXI1124

/**************************Result**********************************************

SCXI1124DCOut($DeviceNameChannel,$DCVoltage,$MaxRange,$MinRange);

Function Arguments



Parameter

Variable Type

Description



$DeviceNameChannel

String

The NI DAQmx device name you want to use.



$DCVoltage

String

The NI DAQmx device channel where you want to measure the voltage.



$MaxRange

String

The minimum value expected from the measurement.



$MinRange

String

The maximum value expected from the measurement.





Return Parameters



Parameter

Variable Type

Description





/**************************Examples**********************************************

SCXI1124DCOut("SC1Mod1/a02","4.3","10.0","0.0");

This example generates a Volatge of 4.3V on SC1Mod1/a02.The range has been set between 0 and 10V.





SCXI1124IOut

Previous Top Next



* * *



SCXI1124IOut

/**************************Usage***************************************************

SCXI1124IOut($DeviceNameChannel,$Current,$MaxRange,$MinRange);

/**************************Description*********************************************

This function requires NI-DAQmx 7.x to be installed on the system.

This function generates a current on $DeviceNameChannel with the amount of $Current and a range setting of $MinRange and $MaxRange .

Refer your hardware manual to see values that are allowed.

Out of range settings are caught by this function

Refer to MAX to find the DevicenameChannel.

/**************************Additional Information********************************

* Instructions for Running:

* 1. Select the physical channel which correspond to where your

* signal is to be generated on the SCXI-1124.

* 2. Enter the minimum and maximum current ranges, in amps (not milliamps).

* 3. Enter a current value to generate.

* Note: Just like the minimum and maximum current ranges, the data value to

* generate are in units of amps, not milliamps.

*

* I/O Connections Overview:

* The SCXI-1124 can operate on either an external or internal current source. The

* only difference is in the signal connections. When using the internal current

* source, connect a load between the SUPPLY and ISINK terminals. When

* using an external current source, connect the source and load to the

* ISINK and GND terminals.

* For more information on the input and output terminals

* for your device, open the NI-DAQmx Help, and refer to the NI-DAQmx Device Terminals

* and Device Considerations books in the table of contents.

*

* Tip:

* The output current can be measured by connecting an ammeter in series with

* the current loop. Alternatively, the current can be measured by

* replacing the load with a resistor of known value. By measuring the

* voltage across the resistor and dividing by the resistance, the

* current through the resistor can be calculated (Ohm's law).

/**************************Remarks*********************************************

This function requires NI-DAQmx 7.x to be installed on the system.

This function is tested with NI-SCXI1124

/**************************Result**********************************************

SCXI1124IOut($DeviceNameChannel, $Current, $MinRange, $MaxRange); Function Arguments



Parameter

Variable Type

Description



$DeviceNameChannel

String

The NI DAQmx device name you want to use.



$Current

String

The NI DAQmx device channel where you want to measure the voltage.



$MaxRange

String

The minimum value expected from the measurement.



$MinRange

String

The maximum value expected from the measurement.





Return Parameters



Parameter

Variable Type

Description





/**************************Examples**********************************************

SCXI1124IOut("SC1Mod1/a01","0.020","0.020","0.00");

This example generates a current of 20mA on SC1Mod1/a01.The range has been set between 0 and 20mA.





TDRIVE_ApplyProfileName

Previous Top Next



* * *



TDRIVE_ApplyProfileName

Usage:

TDRIVE_ApplyProfileName($Handle,$ProfileName);

Note: This function supports the TDRIVE TFT Signal Generator From Westar Display Technologies. For more information, see the user's manual provided with the instrument.

Description:

The ApplyProfileNumber function applies a profile already stored in T-Drive with the name specified by the second argument to the function. If the profile is loaded successfully, a PASS is returned to the executive, otherwise an explanation of the failure is displayed, and a failure is returned to the executive.

Function Arguments



Parameter

Variable Type

Description



$Handle

Object

An object pointing to the TDRIVE instrument handle in memory.



$ProfileName

String

The name of the profile to be loaded.





Return Parameters



Parameter

Variable Type

Description



None





TDRIVE_ApplyProfileNumber

Previous Top Next



* * *



TDRIVE_ApplyProfileNumber

Usage:

TDRIVE_ApplyProfileNumber($Handle,$ProfileNumber);

Note: This function supports the TDRIVE TFT Signal Generator From Westar Display Technologies. For more information, see the user's manual provided with the instrument.

Description:

The ApplyProfileNumber function applies a profile already stored in T-Drive with the number specified by the second argument to the function. If the profile is loaded successfully, a PASS is returned to the executive, otherwise an explanation of the failure is displayed, and a failure is returned to the executive.

Function Arguments



Parameter

Variable Type

Description



$Handle

Object

An object pointing to the TDRIVE instrument handle in memory.



$ProfileNumber

Integer

The number of the profile to be loaded.





Return Parameters



Parameter

Variable Type

Description



None





TDRIVE_BacklightBrightness

Previous Top Next



* * *



TDRIVE_BacklightBrightness

Usage:

TDRIVE_BacklightBrightness($Handle,$Brightness);

Note: This function supports the TDRIVE TFT Signal Generator From Westar Display Technologies. For more information, see the user's manual provided with the instrument.

Description:

The TDRIVE_BacklightBrightness function sets the brightness of a baclight to a percentage of the backlight's brightness range. The method of control for the backlight is specified in the DUT profile and can be voltage controlled, resistive controlled, or I2C controlled. FOr example, if the backlight is voltage controlled and can go from 0 to 5V, 50% is 2.5V.

Function Arguments



Parameter

Variable Type

Description



$Handle

Object

An object pointing to the TDRIVE instrument handle in memory.



$Brightness

Integer

The brightness to set the TFT backlight in percent. Allowable values are 0 to 100.





Return Parameters



Parameter

Variable Type

Description



None





TDRIVE_BacklightPower

Previous Top Next



* * *



TDRIVE_BacklightPower

Usage:

TDRIVE_BacklightPower($Handle,$PowerState);

Note: This function supports the TDRIVE TFT Signal Generator From Westar Display Technologies. For more information, see the user's manual provided with the instrument.

Description:

The TDRIVE_BacklightPower function powers a backlight on or off according to the backlight settings in the DUT profile.

Function Arguments



Parameter

Variable Type

Description



$Handle

Object

An object pointing to the TDRIVE instrument handle in memory.



$PowerState

String

Sets the TFT Power state.

Valid values are:

· "ON"

· "OFF"





Return Parameters



Parameter

Variable Type

Description



None





TDRIVE_Bitmap

Previous Top Next



* * *



TDRIVE_Bitmap

Usage:

TDRIVE_Bitmap($Handle,$BitmapName);

Note: This function supports the TDRIVE TFT Signal Generator From Westar Display Technologies. For more information, see the user's manual provided with the instrument.

Description:

The TDRIVE_Bitmap function is used to display a bitmap on the attached display device. The bitmap is accessed via name, and must be loaded unto the TDRIVE prior to calling this function. The Bitmap must be properly sized to the display, otherwise an error will be generated.

Function Arguments



Parameter

Variable Type

Description



$Handle

Object

An object pointing to the TDRIVE instrument handle in memory.



$BitmapName

String

The name of the bitmap to display.





Return Parameters



Parameter

Variable Type

Description



None





TDRIVE_Blink

Previous Top Next



* * *



TDRIVE_Blink

Usage:

TDRIVE_Blink($Handle,$Red1,$Green1,$Blue1,$Red2,$Green2,$Blue2,$EvenFrames,$OddFrames);

Note: This function supports the TDRIVE TFT Signal Generator From Westar Display Technologies. For more information, see the user's manual provided with the instrument.

Description:

The TDRIVE_Blink function causes the display to alternate between two colors. The color and number of frames it displays for each color can be specified.

Function Arguments



Parameter

Variable Type

Description



$Handle

Object

An object pointing to the TDRIVE instrument handle in memory.



$Red1

Integer

Sets the intensity value of the color component for the even frames. Valid values are 0-255.



$Green1

Integer

Sets the intensity value of the color component for the even frames. Valid values are 0-255.



$Blue1

Integer

Sets the intensity value of the color component for the even frames. Valid values are 0-255.



$Red2

Integer

Sets the intensity value of the color component for the odd frames. Valid values are 0-255.



$Green2

Integer

Sets the intensity value of the color component for the odd frames. Valid values are 0-255.



$Blue2

Integer

Sets the intensity value of the color component for the odd frames. Valid values are 0-255.



$EvenFrames

Integer

Specifies the number of frames that the even color is displayed.



$OddFrames

Integer

Specifies the number of frames that the odd color is displayed.





Return Parameters



Parameter

Variable Type

Description



None





TDRIVE_Border

Previous Top Next



* * *



TDRIVE_Border

Usage:

TDRIVE_Border($Handle,$Red1,$Green1,$Blue1,$Red2,$Green2,$Blue2);

Note: This function supports the TDRIVE TFT Signal Generator From Westar Display Technologies. For more information, see the user's manual provided with the instrument.

Description:

The TDRIVE_Border function draws a static boarder on the display. The color of the border and background can be specified.

Function Arguments



Parameter

Variable Type

Description



$Handle

Object

An object pointing to the TDRIVE instrument handle in memory.



$Red1

Integer

Sets the intensity value of the color component for the border. Valid values are 0-255.



$Green1

Integer

Sets the intensity value of the color component for the border. Valid values are 0-255.



$Blue1

Integer

Sets the intensity value of the color component for the border. Valid values are 0-255.



$Red2

Integer

Sets the intensity value of the color component for the background. Valid values are 0-255.



$Green2

Integer

Sets the intensity value of the color component for the background. Valid values are 0-255.



$Blue2

Integer

Sets the intensity value of the color component for the background. Valid values are 0-255.





Return Parameters



Parameter

Variable Type

Description



None





TDRIVE_Checkerboard

Previous Top Next



* * *



TDRIVE_Checkerboard

Usage:

TDRIVE_Checkerboard($Handle,$Red1,$Green1,$Blue1,$Red2,$Green2,$Blue2,$Width,$Height);

Note: This function supports the TDRIVE TFT Signal Generator From Westar Display Technologies. For more information, see the user's manual provided with the instrument.

Description:

The TDRIVE_Checkerboard function draws a checkboard on the display. The colors, height, and width of the secions can be specified.

Function Arguments



Parameter

Variable Type

Description



$Handle

Object

An object pointing to the TDRIVE instrument handle in memory.



$Red1

Integer

Sets the intensity value of the color component for the even sections. Valid values are 0-255.



$Green1

Integer

Sets the intensity value of the color component for the even sections. Valid values are 0-255.



$Blue1

Integer

Sets the intensity value of the color component for the even sections. Valid values are 0-255.



$Red2

Integer

Sets the intensity value of the color component for the odd sections. Valid values are 0-255.



$Green2

Integer

Sets the intensity value of the color component for the odd sections. Valid values are 0-255.



$Blue2

Integer

Sets the intensity value of the color component for the odd sections. Valid values are 0-255.



$Width

Integer

Specifies the width of the sections. Limited to value 1 or 2.



$Height

Integer

Specifies the height of the sections. Limit to value 1 or 2.





Return Parameters



Parameter

Variable Type

Description



None





TDRIVE_Close

Previous Top Next



* * *



TDRIVE_Close

Usage:

TDRIVE_Close($Handle);

Note: This function supports the TDRIVE TFT Signal Generator From Westar Display Technologies. For more information, see the user's manual provided with the instrument.

Description:

Closes the TDRIVE Signal Generator via USB. This function generates a failure if the instrument can't be close, otherwise a PASS is generated and the instrument handle is freed from memory.

Function Arguments



Parameter

Variable Type

Description



$Handle

Object

An object pointing to the TDRIVE instrument handle in memory.





Return Parameters



Parameter

Variable Type

Description



None





TDRIVE_DUTPower

Previous Top Next



* * *



TDRIVE_DUTPower

Usage:

TDRIVE_DUTPower($Handle,$PowerState,$State);

Note: This function supports the TDRIVE TFT Signal Generator From Westar Display Technologies. For more information, see the user's manual provided with the instrument.

Description:

The TDRIVE_DUTPower function powers a TFT module on or off. The TFT can be powered up in the state the T-Drive was last in, or the default state. The $PowerState argument specifies whether the TFT is to be powered up or down. The $State argument specifies which state the T-Drive will be in once the TFT is powered up. "DEFAULT" specifies the default state, in which the TFT is powered up with the first pattern of the default pattern list visible at maximum backflight brightness. If powered in the the last state, the T-Drive maintains the previous pattern list, test pattern, test pattern settings, and backlight brightness.

Function Arguments



Parameter

Variable Type

Description



$Handle

Object

An object pointing to the TDRIVE instrument handle in memory.



$PowerState

String

Sets the TFT Power state.

Valid values are:

· "ON"

· "OFF"



$State

String

Sets the default state to which the TFT is powered up.

Valid values are:

· "DEFAULT"

· "LAST"





Return Parameters



Parameter

Variable Type

Description



None





TDRIVE_Discrete

Previous Top Next



* * *



TDRIVE_Discrete

Usage:

TDRIVE_Discrete($Handle,$Discrete,$Setting);

Note: This function supports the TDRIVE TFT Signal Generator From Westar Display Technologies. For more information, see the user's manual provided with the instrument.

Description:

The Discrete function sets or clears a discrete of the specified bit mask.

Function Arguments



Parameter

Variable Type

Description



$Handle

Object

An object pointing to the TDRIVE instrument handle in memory.



$Discrete

Integer

The discrete line to Toggle, Allowed values are (1,2,3,4,5,6,7,8)



$Setting

String

The Setting For the Discrete Line. Allowed values are:

· "ON"

· "OFF"





Return Parameters



Parameter

Variable Type

Description



None





TDRIVE_FloodField

Previous Top Next



* * *



TDRIVE_FloodField

Usage:

TDRIVE_FloodField($Handle,$Red,$Green,$Blue);

Note: This function supports the TDRIVE TFT Signal Generator From Westar Display Technologies. For more information, see the user's manual provided with the instrument.

Description:

The TDRIVE_FloodField function draws a field of one color on the display.

Function Arguments



Parameter

Variable Type

Description



$Handle

Object

An object pointing to the TDRIVE instrument handle in memory.



$Red

Integer

Sets the intensity value of the color component. Valid values are 0-255.



$Green

Integer

Sets the intensity value of the color component. Valid values are 0-255.



$Blue

Integer

Sets the intensity value of the color component. Valid values are 0-255.





Return Parameters



Parameter

Variable Type

Description



None





TDRIVE_GrayScale

Previous Top Next



* * *



TDRIVE_GrayScale

Usage:

TDRIVE_GrayScale($Handle,$Direction,$Color,$Side);

Note: This function supports the TDRIVE TFT Signal Generator From Westar Display Technologies. For more information, see the user's manual provided with the instrument.

Description:

The TDRIVE_GrayScale function draws a color scale on the display. The color, orientation, and direction of the scale can be specified.

Function Arguments



Parameter

Variable Type

Description



$Handle

Object

An object pointing to the TDRIVE instrument handle in memory.



$Direction

String

Specifies the Direction of the grayscale pattern. "HORIZONTAL" or "VERTICAL" are the allowable values.



$Color

String

Spcifies the color of the scale. Allowable values are "RED","GREEN","BLUE", or "WHITE"



$Side

String

Specifies whether the grayscale starts at the left (darkest area is on the left) or right (darkest area is on the right). Allowable values are "LEFT" or "RIGHT"





Return Parameters



Parameter

Variable Type

Description



None





TDRIVE_Measure

Previous Top Next



* * *



TDRIVE_Measure

Usage:

$result = TDRIVE_Measure($Handle,$Measure);

Note: This function supports the TDRIVE TFT Signal Generator From Westar Display Technologies. For more information, see the user's manual provided with the instrument.

Description:

The TDRIVE_Measure function measures a specified power rail, and stores the value in $result.

Function Arguments



Parameter

Variable Type

Description



$Handle

Object

An object pointing to the TDRIVE instrument handle in memory.



$Measure

String

The measurement you wish to make. Allowed values are:

· "AD_P1_CURRENT" = P1 Current

· "AD_P2_CURRENT" = P2 Current

· "AD_P3_CURRENT" = P3 Current

· "AD_SPARE1" = Spare

· "AD_5VDC" = 5V DC

· "AD_5VDC_REF" = 5V DC Reference

· "AD_TMDS_P1_TESTIN" = TMDS Test In

· "AD_LVDS_P1_TESTIN" = LVDS Test In

· "AD_P1_LDO_IN" = P1 LDO In

· "AD_P2_LDO_IN" = P2 LDO In

· "AD_P3_LDO_IN" = P3 LDO In

· "AD_P1_FUSE" = P1 Fuse

· "AD_P2_FUSE" = P2 Fuse

· "AD_P3_FUSE" = P3 Fuse

· "AD_M5VDC" = -5V DC

· "AD_SPARE0" = Spare

· "AD_3_3VDC" = 3.3V DC

· "AD_M15VDC" = -15V DC

· "AD_15VDC" = 15V DC

· "AD_2_5VDC" = 2.5V DC

· "AD_ANALOG_5VDC" = Analog 5V DC

· "AD_P1_OUT" = P1 Output

· "AD_P2_OUT" = P2 Output

· "AD_P3_OUT" = P3 Output

· "AD_P4_OUT" = P4 Output

· "AD_P1_INTERNAL" = P1 Internal

· "AD_P2_INTERNAL" = P2 Internal

· "AD_P3_INTERNAL" = P3 Internal

· "AD_P4_INTERNAL" = P4 Internal





Return Parameters



Parameter

Variable Type

Description



$result

Float

The returned measurement.





TDRIVE_Open

Previous Top Next



* * *



TDRIVE_Open

Usage:

$Handle = TDRIVE_Open();

Note: This function supports the TDRIVE TFT Signal Generator From Westar Display Technologies. For more information, see the user's manual provided with the instrument.

Description:

Opens the TDRIVE Signal Generator via USB. This function generates a failure if the instrument can't be initialized, otherwise a PASS is generated and the instrument handle is returned.

Function Arguments



Parameter

Variable Type

Description



None





Return Parameters



Parameter

Variable Type

Description



$Handle

Object

Returns a handle to the instrument.





TDRIVE_PixelLine

Previous Top Next



* * *



TDRIVE_PixelLine

Usage:

TDRIVE_PixelLine($Handle,$Red1,$Green1,$Blue1,$Red2,$Green2,$Blue2,$Direction,$Size);

Note: This function supports the TDRIVE TFT Signal Generator From Westar Display Technologies. For more information, see the user's manual provided with the instrument.

Description:

The TDRIVE_PixelLine function draws a field of lines on the display. They can be horizontal or vertical, one or two pixel lines thich, and be a specified color.

Function Arguments



Parameter

Variable Type

Description



$Handle

Object

An object pointing to the TDRIVE instrument handle in memory.



$Red1

Integer

Sets the intensity value of the color component for the even lines. Valid values are 0-255.



$Green1

Integer

Sets the intensity value of the color component for the even lines. Valid values are 0-255.



$Blue1

Integer

Sets the intensity value of the color component for the even lines. Valid values are 0-255.



$Red2

Integer

Sets the intensity value of the color component for the odd lines. Valid values are 0-255.



$Green2

Integer

Sets the intensity value of the color component for the odd lines. Valid values are 0-255.



$Blue2

Integer

Sets the intensity value of the color component for the odd lines. Valid values are 0-255.



$Direction

String

Specifies whether the lines run horizontal or vertical. Zero specifies horizontal and one spcifies vertical. Allowed values are "HORIZONTAL" or "VERTICAL"



$Size

Integer

Specifies the pixel width of the line. Can be 1 or 2.





Return Parameters



Parameter

Variable Type

Description



None





TDRIVE_PixelSelect

Previous Top Next



* * *



TDRIVE_PixelSelect

Usage:

$PixelList = TDRIVE_PixelSelect($Handle,$Red1,$Green1,$Blue1,$Red2,$Green2,$Blue2,$Instructions,$VerticalRes,$HorizontalRes);

Note: This function supports the TDRIVE TFT Signal Generator From Westar Display Technologies. For more information, see the user's manual provided with the instrument.

Description:

The TDRIVE_PixelSelect function can be used to select a list of pixels from a given TFT Panel. The selected pixels are returned as a string to the test executive.

Function Arguments



Parameter

Variable Type

Description



$Handle

Object

An object pointing to the TDRIVE instrument handle in memory.



$Red1

Integer

Sets the intensity value of the color component for the cross-hair lines. Valid values are 0-255.



$Green1

Integer

Sets the intensity value of the color component for the cross-hair lines. Valid values are 0-255.



$Blue1

Integer

Sets the intensity value of the color component for the cross-hair lines. Valid values are 0-255.



$Red2

Integer

Sets the intensity value of the color component for the background. Valid values are 0-255.



$Green2

Integer

Sets the intensity value of the color component for the background. Valid values are 0-255.



$Blue2

Integer

Sets the intensity value of the color component for the background. Valid values are 0-255.



$Instructions

String

Specifies the instructions that will be displayed to the user.



$VerticalRes

Integer

Specifies the number of lines of resolution in the vertical plane



$HorizontalRes

Integer

Specifies the number of lines of resolution in the horizontal plane





Return Parameters



Parameter

Variable Type

Description



$PixelList

String

A list of the pixels that have been selected by the operator.





TDRIVE_StaticRect

Previous Top Next



* * *



TDRIVE_StaticRect

Usage:

TDRIVE_StaticRect($Handle,$Red1,$Green1,$Blue1,$Red2,$Green2,$Blue2,$Width,$Height,$X,$Y,$Center);

Note: This function supports the TDRIVE TFT Signal Generator From Westar Display Technologies. For more information, see the user's manual provided with the instrument.

Description:

The TDRIVE_PixelLine function draws a static rectangle on the display. The position and color of the rectangle and background can be specified.

Function Arguments



Parameter

Variable Type

Description



$Handle

Object

An object pointing to the TDRIVE instrument handle in memory.



$Red1

Integer

Sets the intensity value of the color component for the rectangle. Valid values are 0-255.



$Green1

Integer

Sets the intensity value of the color component for the rectangle. Valid values are 0-255.



$Blue1

Integer

Sets the intensity value of the color component for the rectangle. Valid values are 0-255.



$Red2

Integer

Sets the intensity value of the color component for the background. Valid values are 0-255.



$Green2

Integer

Sets the intensity value of the color component for the background. Valid values are 0-255.



$Blue2

Integer

Sets the intensity value of the color component for the background. Valid values are 0-255.



$Width

Integer

Specifies the Width of the rectangle.



$Height

Integer

Specifies the Height of the rectangle.



$X

Integer

Specifies the position of the left side of the rectangle.



$Y

Integer

Specifies the position of the top of the rectangle.



$Center

Integer

Specifies whether the rectangle is centered. '1' specifies that the rectangle is centered on the display and sized to 30% of the display width and height. The X,Y,Width,and Height parameters are overwritten. '0' Specifies that the rectangle is not centered and sized. The X,Y,Width, and Height parameters are used.





Return Parameters



Parameter

Variable Type

Description



None





TDRIVE_Wedge

Previous Top Next



* * *



TDRIVE_Wedge

Usage:

TDRIVE_Wedge($Handle,$Direction,$Side);

Note: This function supports the TDRIVE TFT Signal Generator From Westar Display Technologies. For more information, see the user's manual provided with the instrument.

Description:

The TDRIVE_Wedge function draws a 4 color wedge on the display. The orientation and direction of the wedge can be specified.

Function Arguments



Parameter

Variable Type

Description



$Handle

Object

An object pointing to the TDRIVE instrument handle in memory.



$Direction

String

Specifies the Direction of the wedge pattern. "HORIZONTAL" or "VERTICAL" are the allowable values.



$Side

String

Specifies whether the color wedge starts at the left (darkest area is on the left) or right (darkest area is on the right). Allowable values are "LEFT" or "RIGHT"





Return Parameters



Parameter

Variable Type

Description



None





MSP430_CloseCom

Previous Top Next



* * *



MSP430_CloseCom

Usage:

MSP430_CloseCom( )

Description:

MSP430 is a in-system gang programmer tool that can be used to program up to 8 MSP430 FLASH devices simultaneously.

CloseCom releases the communications port.

Function Arguments



Parameter

Variable Type

Description



$None

None

None





Return Parameters



Parameter

Variable Type

Description



$ErrorCode

Integer

ErrorCode describing a specific error.





MSP430_EraseImage

Previous Top Next



* * *



MSP430_EraseImage

Usage:

MSP430_EraseImage( )

Description:

MSP430 is a in-system gang programmer tool that can be used to program up to 8 MSP430 FLASH devices simultaneously.

GangEraseImage clears (presets with 0xFF) the image memory at the progr. unit

Function Arguments



Parameter

Variable Type

Description



$None

None

None





Return Parameters



Parameter

Variable Type

Description



$ErrorCode

Integer

ErrorCode describing a specific error.





MSP430_InitCom

Previous Top Next



* * *



MSP430_InitCom

Usage:

MSP430_InitCom($ComPort, $BaudRate)

Description:

MSP430 is a in-system gang programmer tool that can be used to program up to 8 MSP430 FLASH devices simultaneously.

InitCom opens a communications port, sets the baudrate and checks if the GANG430 is present.

Function Arguments



Parameter

Variable Type

Description



$ComPort

String

Communication Port



$BaudRate

Integer

Baud Rate





Return Parameters



Parameter

Variable Type

Description



$ErrorCode

Integer

ErrorCode describing a specific error.





MSP430_LoadImage

Previous Top Next



* * *



MSP430_LoadImage

Usage:

MSP430_LoadImage($Filename,$DeviceName)

Description:

MSP430 is a in-system gang programmer tool that can be used to program up to 8 MSP430 FLASH devices simultaneously.

Writes data from a file either of type TI-txt or of type Intel-hex (auto-detect) into the programmer's image flash memory. It also writes the memory model parameters of the selected device type and the checksums for main and information memory into the programmer's flash system memory

Function Arguments



Parameter

Variable Type

Description



$Filename

String

The full path of the code file



$DeviceName

String

The device name in Gang430.ini





Return Parameters



Parameter

Variable Type

Description



$ErrorCode

Integer

ErrorCode describing a specific error.





MSP430_LoadParameters

Previous Top Next



* * *



MSP430_LoadParameters

Usage:

MSP430_LoadParameters($Flag, $Supply, $VccSettleTime)

Description:

MSP430 is a in-system gang programmer tool that can be used to program up to 8 MSP430 FLASH devices simultaneously.

LoadParameters controls the main process at the programmer unit

Function Arguments



Parameter

Variable Type

Description



$Flag_Erase_Info

String

F_ERASE_INFO- executes erasure of info memory

F_ERASE_MAIN - executes erasure of main memory

F_ERASE_MASS - executes erasure of info and main memory



$Flag_Program_Info

String

F_PROGRAM_INFO - executes programming of info memory

F_PROGRAM_MAIN - executes programming of main memory

F_PROGRAM_MASS - executes programming of info and main memory



$Flag_Erase_Check

Boolean

True - executes erase check of info and main memory



$Flag_Verify

Boolean

True - executes verifaction of info and main memory



$Flag_Blow_Fuse

Boolean

True - executes fuse blowing



$Supply

Integer

Supply voltage in 100mV, max 127, add. F_VCC_OFF= 128



$Vcc_off

String

128 - switches target Vcc off after main process ends



$Vcc_SettleTime

String

In milliseconds, max 65535





Return Parameters



Parameter

Variable Type

Description



$ErrorCode

Integer

ErrorCode describing a specific error.





MSP430_MainProcess

Previous Top Next



* * *



MSP430_MainProcess

Usage:

MSP430_MainProcess($TimeOut )

Description:

MSP430 is a in-system gang programmer tool that can be used to program up to 8 MSP430 FLASH devices simultaneously.

MainProcess executes the main process at the programmer unit

Function Arguments



Parameter

Variable Type

Description



$TimeOut

Integer

Time out in 100 ms





Return Parameters



Parameter

Variable Type

Description



$ErrorCode

Integer

ErrorCode describing a specific error.





MSP430_ReadTargetFile

Previous Top Next



* * *



MSP430_ReadTargetFile

Usage:

MSP430_ReadTargetFile($Target, $Start, $Length, $Filename, $FileType)

Description:

MSP430 is a in-system gang programmer tool that can be used to program up to 8 MSP430 FLASH devices simultaneously.

Reads data from one selectable target into a file

Function Arguments



Parameter

Variable Type

Description



$Target

Integer

The target number 0..7



$Start

Integer

Start of buffer eg.64512



$Length

Integer

Length of buffer eg.1024



$Filename

String

The file



$Filetype

Integer

The file type code:

FILETYPE_AUTO 0

FILETYPE_TI_TXT 1

FILETYPE_INTEL_HEX 2





Return Parameters



Parameter

Variable Type

Description



$ErrorCode

Integer

ErrorCode describing a specific error.





MSP430_SelfTest

Previous Top Next



* * *



MSP430_SelfTest

Usage:

MSP430_SelfTest($TimeOut )

Description:

MSP430 is a in-system gang programmer tool that can be used to program up to 8 MSP430 FLASH devices simultaneously.

Selftest performs a selftest of the programmer unit

Function Arguments



Parameter

Variable Type

Description



$TimeOut

Integer

Time out in 100 ms





Return Parameters



Parameter

Variable Type

Description



$ErrorCode

Integer

ErrorCode describing a specific error.





MSP430_SetSignals

Previous Top Next



* * *



MSP430_SetSignals

Usage:

MSP430_SetSignal($Signal, $Voltage)

Description:

MSP430 is a in-system gang programmer tool that can be used to program up to 8 MSP430 FLASH devices simultaneously.

Sets specified signals on the programmer target connector

Function Arguments



Parameter

Variable Type

Description



$Signals

Integer

Signals determines output signals



$Voltage

Integer

Voltage determines logic high level voltage of signals





Return Parameters



Parameter

Variable Type

Description



$ErrorCode

Integer

ErrorCode describing a specific error.





MSP430_SetVccTarget

Previous Top Next



* * *



MSP430_SetVccTarget

Usage:

MSP430_SetVccTarget($Voltage)

Description:

MSP430 is a in-system gang programmer tool that can be used to program up to 8 MSP430 FLASH devices simultaneously.

Sets the target Vcc voltage at the programmer's target connector pin VCC_MSP

Function Arguments



Parameter

Variable Type

Description



$Voltage

Integer

Target Vcc Voltage





Return Parameters



Parameter

Variable Type

Description



$ErrorCode

Integer

ErrorCode describing a specific error.





MSP_GetResults

Previous Top Next



* * *



MSP430_GetResults

Usage:

$Result0,$Result1,$Result2,$Result4,$Result4 = MSP430_GetResults($Timeout)

Description:

MSP430 is a in-system gang programmer tool that can be used to program up to 8 MSP430 FLASH devices simultaneously.

GetResults returns the result of the previous MainProcess command.

Function Arguments



Parameter

Variable Type

Description



$Timeout

Integer

Timeout in seconds to wait for results.





Return Parameters



Parameter

Variable Type

Description



$Result0

Integer

Result code 0. This byte contains the flags indicating which channels are connected to a target device. LSB is channel 1 and MSB is channel 8.



$Result1

Integer

Result code 1. This byte contains the flags indicating which channels passed the Erase Check operation.



$Result2

Integer

Result code 2. This byte contains the flags indicating which channels passed the Verification operation.



$Result3

Integer

Result code 3. This byte contains the flags indicating which channels passed the Fuse Blow operation.



$Result4

Integer

Result code 4. This byte contains the flags indicating which channels passed all operations.





MSP_GANG_ChangeBaudRate

Previous Top Next



* * *



MSP_GANG_ChangeBaudRate



Usage:

MSP_GANG_ChangeBaudRate($baudRate);



Description:

This function will change the baud rate for the connection to the MSP-GANG programmer.



Remarks

Communication with the MSP-GANG Programmer must already have been opened using the MSP_GANG_InitComm function.





Function arguments



Parameter

Variable Type

Description



$baudRate

Integer

The baud rate to change the connection speed to.





Return parameters



Parameter

Variable Type

Description



None





Example:





// Open communication on COM3.

$startBaud = 9600;

$port = "COM4";



MSP_GANG_InitComm($port, $startBaud);



// Change baud rate to 115200 bps.

$baud = 115200;



MSP_GANG_ChangeBaudRate($baud);





MSP_GANG_CreateGangImage

Previous Top Next



* * *



MSP_GANG_CreateGangImage



Usage:

MSP_GANG_CreateGangImage($imageName);



Description:

This function will convert the loaded code file into an image that can be programmed into the target by the MSP-GANG programmer.



Remarks

Communication with the MSP-GANG Programmer must already have been opened using the MSP_GANG_InitComm function.

The code file must already have been loaded into memory using the MSP_GANG_ReadCodeFile function.





Function arguments



Parameter

Variable Type

Description



$imageName

String

The name of the image.





Return parameters



Parameter

Variable Type

Description



None





Example:





// Open communication on COM3.

$startBaud = 9600;

$port = "COM4";



MSP_GANG_InitComm($port, $startBaud);



// Load a code file.

$codeFile = "C:\\CodeFiles\\MSP_Code_File.hex";



MSP_GANG_ReadCodeFile($codeFile);



// Create an image to be programmed.

$imageName = "BurnImage";



MSP_GANG_CreateGangImage($imageName);





MSP_GANG_GetCodeInfo

Previous Top Next



* * *



MSP_GANG_GetCodeInfo



Usage:

$codeInfo = MSP_GANG_GetCodeInfo($infoType);



Description:

This function will return information about the code that is loaded into the computer memory.



Remarks

Communication with the MSP-GANG Programmer must already have been opened using the MSP_GANG_InitComm function.

The code file must already have been loaded into memory using the MSP_GANG_ReadCodeFile function.





Function arguments



Parameter

Variable Type

Description



$infoType

String

The type of information to return. Valid entries are: CodeSize1

CodeChecksum1

CodeSize2

CodeChecksum2

AppendSize

AppendCheckSum

WholeCodeSize

WholeCodeChecksum

CsprGang





Return parameters



Parameter

Variable Type

Description



$codeInfo

String

The returned information about the loaded code.





Example:





// Open communication on COM3.

$startBaud = 9600;

$port = "COM4";



MSP_GANG_InitComm($port, $startBaud);



// Load a code file.

$codeFile = "C:\\CodeFiles\\MSP_Code_File.hex";



MSP_GANG_ReadCodeFile($codeFile);



// Find the code size and checksum.

$infoType = "CodeSize1";

$returned = MSP_GANG_GetCodeInfo($infoType);

$outStr = "Code Size = " + $returned;

UpdateStatus($outStr);

$infoType = "CodeChecksum1";

$returned = MSP_GANG_GetCodeInfo($infoType);

$outStr = "Code Checksum = " + $returned;

UpdateStatus($outStr);





MSP_GANG_GetProgressStatus

Previous Top Next



* * *



MSP_GANG_GetProgressStatus



Usage:

($status, $tasks, $cumul, $request, $connect, $erased, $blank, $program, $verify, $secure, $vccErr, $jtagInit, $jtagFuse, $wrongMCU, $vtio, $comment) = MSP_GANG_GetProgressStatus();



Description:

This function will return information about the targets after the last process ran.



Remarks

Communication with the MSP-GANG Programmer must already have been opened using the MSP_GANG_InitComm function.

The boolean status arrays contain 8 boolean values representing the 8 targets. Array element 0 is the status for target 1, element 1 for target 2, etc.



Function arguments



Parameter

Variable Type

Description



None





Return parameters



Parameter

Variable Type

Description



$status

String

The status of the last process. This will be: "In Progress", "ACK", "NACK", or "No Status".



$tasks

String

A list of the processes that have run, separated by commas.



$cumul

Boolean Array

The accumulation of the process status for each of the targets.



$request

Boolean Array

Which targets were requested to be processed.



$connect

Boolean Array

Whether each of the targets was successfully connected to.



$erased

Boolean Array

Whether each of the targets was successfully erased.



$blank

Boolean Array

Whether each of the targets passed a blank check test.



$program

Boolean Array

Whether each of the targets was successfully programmed.



$verify

Boolean Array

Whether each of the targets passed a verify code test.



$secure

Boolean Array

Whether each of the targets was successfully secured.



$vccErr

Boolean Array

Whether each of the targets had a VCC error.



$jtagInit

Boolean Array

Whether there was an error when the JTAG was initialized for each of the targets. This data is not valid if JTAG is not the interface being used.



$jtagFuse

Boolean Array

Whether the JTAG fuse was already blown before programming for each of the targets. This data is not valid if JTAG is not the interface being used.



$wrongMCU

Boolean Array

Whether the wrong MCU was specified for each of the targets. Note this data is only valid if there are errors while programming. If there are no errors, this will be the same as $request.



$vtio

Integer

The IO voltage for the programmer.



$comment

String

The comment that is on the programmer screen.





Example:





// Get the progress status.

(status, $tasks, $cumul, $request, $connect, $erased, $blank, $program, $verify, $secure, $vccErr, $jtagInit, $jtagFuse, $wrongMCU, $vtio, $comment) = MSP_GANG_GetProgressStatus();





MSP_GANG_InitComm

Previous Top Next



* * *



MSP_GANG_InitComm



Usage:

MSP_GANG_InitComm($comPort, $baudRate);



Description:

This function will initialize communication with the MSP-GANG programmer.



Remarks

When all programming is complete, communication with the MSP-GANG Programmer must be closed using the MSP_GANG_ReleaseComm function.





Function arguments



Parameter

Variable Type

Description



$comPort

String

The name of the COM port to open.



$baudRate

Integer

The baud rate for communication with the programmer.





Return parameters



Parameter

Variable Type

Description



None





Example:





// Open communication on COM3.

$startBaud = 9600;

$port = "COM4";



MSP_GANG_InitComm($port, $startBaud);





MSP_GANG_InteractiveProcess

Previous Top Next



* * *



MSP_GANG_InteractiveProcess



Usage:

MSP_GANG_InteractiveProcess($timeOut);



Description:

This function will cause the specified function process to run.



Remarks

Communication with the MSP-GANG Programmer must already have been opened using the MSP_GANG_InitComm function.

The functions to perform to program the target(s) must already have been specified using the MSP_GANG_SetProgrammerFunctions function.

The targets to perform the function on must already have been specified using the MSP_GANG_SetProgramTargets, MSP_GANG_SetMCUName and MSP_GANG_SetTargetInterface functions.

If one of the functions to perform is to program the target(s), the code file must already have been loaded into memory using the MSP_GANG_ReadCodeFile function.

The code file must already have been converted to an image using the MSP_GANG_CreateGangImage function.



Function arguments



Parameter

Variable Type

Description



$timeOut

Integer

The time to wait for the functions to complete before generating an error.





Return parameters



Parameter

Variable Type

Description



None





Example:





// Open communication on COM3.

$startBaud = 115200;

$port = "COM4";

MSP_GANG_InitComm($port, $startBaud);



// Set the type of MCU in use.

$mcuName = "MSP430FR5738";

MSP_GANG_SetMCUName($mcuName);



// Set for 3.3V from the programmer with a 10ms settling time.

$level = 3300;

$fromProg = true;

$turnOn = true;

$settle = 10;

MSP_GANG_SetVCC($level, $fromProg, $turnOn, $settle);



// Set to fast SBW without using RST.

$interface = "SBWFAST";

$sbwIO = false;

MSP_GANG_SetTargetInterface($interface, $sbwIO);



// Set to perform functions on targets 1, 5 and 8.

$targets = Array1DCreate("BOOLEAN", 8);

Array1DSetValue($targets, 0, true);

Array1DSetValue($targets, 4, true);

Array1DSetValue($targets, 7, true);

MSP_GANG_SetProgramTargets($targets);



// Set to perform all functions on the targets except for securing them.

$connect = true;

$erase = true;

$blank = true;

$program = true;

$verify = true;

$secure = false;

MSP_GANG_SetProgrammerFunctions($connect, $erase, $blank, $program, $verify, $secure);



// Read a code file into memory.

$filePath = "C:\\code_files\\target_code.hex";

MSP_GANG_ReadCodeFile($filePath);



// Create an image to be programmed.

$imageName = "BurnImage";

MSP_GANG_CreateGangImage($imageName);



// Start the Interactive Process functions with a 20 second timeout.

$timeOut = 20;



MSP_GANG_InteractiveProcess($timeOut);





MSP_GANG_InteractiveProcessBool

Previous Top Next



* * *



MSP_GANG_InteractiveProcessBool



Usage:

($success, $error) = MSP_GANG_InteractiveProcessBool($timeOut);



Description:

This function will cause the specified function process to run and will always pass.



Remarks

Communication with the MSP-GANG Programmer must already have been opened using the MSP_GANG_InitComm function.

The functions to perform to program the target(s) must already have been specified using the MSP_GANG_SetProgrammerFunctions function.

The targets to perform the function on must already have been specified using the MSP_GANG_SetProgramTargets, MSP_GANG_SetMCUName and MSP_GANG_SetTargetInterface functions.

If one of the functions to perform is to program the target(s), the code file must already have been loaded into memory using the MSP_GANG_ReadCodeFile function.

The code file must already have been converted to an image using the MSP_GANG_CreateGangImage function.

This function will not fail the test script. If there is an error, the boolean for success will be false and the error string will contain the description of the error.



Function arguments



Parameter

Variable Type

Description



$timeOut

Integer

The time to wait for the functions to complete before generating an error.





Return parameters



Parameter

Variable Type

Description



$success

Boolean

Whether the interactive process command completed successfully. (true = success, false = failed)



$error

String

The error description. (blank if no error)





Example:





// Open communication on COM3.

$startBaud = 115200;

$port = "COM4";

MSP_GANG_InitComm($port, $startBaud);



// Set the type of MCU in use.

$mcuName = "MSP430FR5738";

MSP_GANG_SetMCUName($mcuName);



// Set for 3.3V from the programmer with a 10ms settling time.

$level = 3300;

$fromProg = true;

$turnOn = true;

$settle = 10;

MSP_GANG_SetVCC($level, $fromProg, $turnOn, $settle);



// Set to fast SBW without using RST.

$interface = "SBWFAST";

$sbwIO = false;

MSP_GANG_SetTargetInterface($interface, $sbwIO);



// Set to perform functions on targets 1, 5 and 8.

$targets = Array1DCreate("BOOLEAN", 8);

Array1DSetValue($targets, 0, true);

Array1DSetValue($targets, 4, true);

Array1DSetValue($targets, 7, true);

MSP_GANG_SetProgramTargets($targets);



// Set to perform all functions on the targets except for securing them.

$connect = true;

$erase = true;

$blank = true;

$program = true;

$verify = true;

$secure = false;

MSP_GANG_SetProgrammerFunctions($connect, $erase, $blank, $program, $verify, $secure);



// Read a code file into memory.

$filePath = "C:\\code_files\\target_code.hex";

MSP_GANG_ReadCodeFile($filePath);



// Create an image to be programmed.

$imageName = "BurnImage";

MSP_GANG_CreateGangImage($imageName);



// Start the Interactive Process functions with a 20 second timeout.

$timeOut = 20;



($success, $error) = MSP_GANG_InteractiveProcessBool($timeOut);





MSP_GANG_ReadCodeFile

Previous Top Next



* * *



MSP_GANG_ReadCodeFile



Usage:

MSP_GANG_ReadCodeFile($filePath);



Description:

This function will load the specified code file into memory.



Remarks

Communication with the MSP-GANG Programmer must already have been opened using the MSP_GANG_InitComm function.

Before the code is programmed into a target, the code must be converted to an image using the MSP_GANG_CreateGangImage function.





Function arguments



Parameter

Variable Type

Description



$filePath

String

The full path to the code file to load into memory.





Return parameters



Parameter

Variable Type

Description



None





Example:





// Read a code file into memory.

$filePath = "C:\\code_files\\target_code.hex";

MSP_GANG_ReadCodeFile($filePath);





MSP_GANG_ReleaseComm

Previous Top Next



* * *



MSP_GANG_ReleaseComm



Usage:

MSP_GANG_ReleaseComm();



Description:

This function will release the Com port used for communication with the MSP-GANG programmer.



Remarks

Communication with the MSP-GANG Programmer must already have been opened using the MSP_GANG_InitComm function.





Function arguments



Parameter

Variable Type

Description



None





Return parameters



Parameter

Variable Type

Description



None





Example:





// Open communication on COM3.

$startBaud = 9600;

$port = "COM4";



MSP_GANG_InitComm($port, $startBaud);



// Close communication.

MSP_GANG_ReleaseComm();





MSP_GANG_SetMCUName

Previous Top Next



* * *



MSP_GANG_SetMCUName



Usage:

MSP_GANG_SetMCUName($mcuName);



Description:

This function will select the type of MCU that will be programmed.



Remarks

Communication with the MSP-GANG Programmer must already have been opened using the MSP_GANG_InitComm function.

The MCU name must already be a known type to the MSP-GANG programmer.





Function arguments



Parameter

Variable Type

Description



$mcuName

String

The name of the MCU to be programmed.





Return parameters



Parameter

Variable Type

Description



None





Example:





// Open communication on COM3.

$startBaud = 9600;

$port = "COM4";



MSP_GANG_InitComm($port, $startBaud);



// Set the type of MCU in use.

$mcuName = "MSP430FR5738";

MSP_GANG_SetMCUName($mcuName);





MSP_GANG_SetProgrammerFunctions

Previous Top Next



* * *



MSP_GANG_SetProgrammerFunctions



Usage:

MSP_GANG_SetProgrammerFunctions($connect, $erase, $blank, $program, $verify, $secure);



Description:

This function will select which functions will be performed on the target(s).



Remarks

Communication with the MSP-GANG Programmer must already have been opened using the MSP_GANG_InitComm function.

At least one function must be selected.





Function arguments



Parameter

Variable Type

Description



$connect

Boolean

Whether to connect to the target(s). A target must be connected to before any other functions are performed.



$erase

Boolean

Whether to erase the target(s).



$blank

Boolean

Whether to perform a blank-check on the target(s).



$program

Boolean

Whether to program the target(s).



$verify

Boolean

Whether to verify the programming of the target(s).



$secure

Boolean

Whether to secure the target(s).





Return parameters



Parameter

Variable Type

Description



None





Example:





// Open communication on COM3.

$startBaud = 9600;

$port = "COM4";



MSP_GANG_InitComm($port, $startBaud);



// Set to perform all functions on the targets except for securing them.

$connect = true;

$erase = true;

$blank = true;

$program = true;

$verify = true;

$secure = false;

MSP_GANG_SetProgrammerFunctions($connect, $erase, $blank, $program, $verify, $secure);





MSP_GANG_SetProgramTargets

Previous Top Next



* * *



MSP_GANG_SetProgramTargets



Usage:

MSP_GANG_SetProgramTargets($targetArray);



Description:

This function will select which targets will have the specified functions performed on them.



Remarks

Communication with the MSP-GANG Programmer must already have been opened using the MSP_GANG_InitComm function.

At least one function must be selected using the MSP_GANG_SetProgrammerFunctions function.

In the boolean array, element 0 is for target slot 1, element 1 is for target slot 2, etc. Up to element 7 representing target slot 8.





Function arguments



Parameter

Variable Type

Description



$targetArray

Boolean Array

An 8 element Boolean array with each element representing one of the potential targets.





Return parameters



Parameter

Variable Type

Description



None





Example:





// Open communication on COM3.

$startBaud = 9600;

$port = "COM4";



MSP_GANG_InitComm($port, $startBaud);



// Set to perform functions on targets 1, 5 and 8.

$targets = Array1DCreate("BOOLEAN", 8);

Array1DSetValue($targets, 0, true);

Array1DSetValue($targets, 4, true);

Array1DSetValue($targets, 7, true);

MSP_GANG_SetProgramTargets($targets);





MSP_GANG_SetTargetInterface

Previous Top Next



* * *



MSP_GANG_SetTargetInterface



Usage:

MSP_GANG_SetTargetInterface($interface, $sbwIO);



Description:

This function will set the target communication interface type.



Remarks

Communication with the MSP-GANG Programmer must already have been opened using the MSP_GANG_InitComm function.





Function arguments



Parameter

Variable Type

Description



$interface

String

The type and speed of the interface to use. Valid entries are: JTAGFAST

JTAGMED

JTAGSLOW

SBWFAST

SBWMED

SBWSLOW





$sbwIO

Boolean

Whether to communicate on SBW through the RST line. This input is ignored for the JTAG interface type.





Return parameters



Parameter

Variable Type

Description



None





Example:





// Open communication on COM3.

$startBaud = 9600;

$port = "COM4";



MSP_GANG_InitComm($port, $startBaud);



// Set to fast SBW without using RST.

$interface = "SBWFAST";

$sbwIO = false;



MSP_GANG_SetTargetInterface($interface, $sbwIO);





MSP_GANG_SetVCC

Previous Top Next



* * *



MSP_GANG_SetVCC



Usage:

MSP_GANG_SetVCC($value, $fromProg, $turnOn, $settleTime);



Description:

This function will set the output voltage to the targets and where the voltage is coming from.



Remarks

Communication with the MSP-GANG Programmer must already have been opened using the MSP_GANG_InitComm function.

If the VCC value is set as 0, then the voltage will not be set and only the other parameters will be used. This allows for turning the output on and off without changing the voltage level.





Function arguments



Parameter

Variable Type

Description



$value

Integer

The voltage level to set for the targets - in millivolts.



$fromProg

Boolean

Whether the voltage is to be supplied by the MSP-GANG programmer. If set to false then an external power supply must provide the voltage to the targets.



$turnOn

Boolean

Whether the voltage is applied to the targets.



$settleTime

Integer

The time to wait for the VCC to settle after applying it to the targets - in milliseconds.





Return parameters



Parameter

Variable Type

Description



None





Example:





// Open communication on COM3.

$startBaud = 9600;

$port = "COM4";



MSP_GANG_InitComm($port, $startBaud);



// Set for 3.3V from the programmer with a 10ms settling time.

$level = 3300;

$fromProg = true;

$turnOn = true;

$settle = 10;



MSP_GANG_SetVCC($level, $fromProg, $turnOn, $settle);





AG53131A_Close

Previous Top Next



* * *



AG53131A_Close

Usage:

AG53131A_Close($Handle);

Description:

This function uses the Agilent IVI Instrument drivers, in order to use the AG53131 functions in JabilTest, you need to have the Agilent COM components installed.

This function closes and released the AG53131A. This should be done at the end of every session using the AG53131A.

Function Arguments



Parameter

Variable Type

Description



$Handle

Object

The COM object representing the instance of the AG53131A.





Return Parameters



Parameter

Variable Type

Description



None





AG53131A_Init

Previous Top Next



* * *



AG53131A_Init

Usage:

$AgInstance = AG53131A_Init($ResourceString,$Reset);

Description:

This function uses the Agilent IVI Instrument drivers, in order to use the AG53131 functions in JabilTest, you need to have the Agilent COM components installed.

This function initializes the AG53131A for operation. If $Reset is set to true, the instrument is reinitialized to it's default setting.

Function Arguments



Parameter

Variable Type

Description



$ResourceString

String

The resource string identifying the instrument. For example, "GPIB0::9::Instr".



$Reset

Boolean

Specifies whether or not to reset the instrument upon initialization





Return Parameters



Parameter

Variable Type

Description



$AgInstance

Object

The COM object representing the instance of the AG53131A.





AG53131A_InputConfig

Previous Top Next



* * *



AG53131A_InputConfig

Usage:

AG53131A_InputConfig($Handle,$InputChannel,$Coupling,$Impedance,$Attenuation,$Filter);

Description:

This function uses the Agilent IVI Instrument drivers, in order to use the AG53131 functions in JabilTest, you need to have the Agilent COM components installed.

This function closes and released the AG53131A. This should be done at the end of every session using the AG53131A.

Example:

AG53131A.InputConfig($Handle,1,"AC","LOW",10,"OFF");



Function Arguments



Parameter

Variable Type

Description



$Handle

Object

The COM object representing the instance of the AG53131A.



$InputChannel

Integer

The channel number to configure



$Coupling

String

The coupling setting for the input. Allowable values are 'AC' or 'DC'.



$Impedance

String

The impedance setting for the input. Allowable values are 'LOW' and 'HIGH', Low impedance sets the input impedance to 50 Ohms, 'HIGH' sets the input impedance to 1 Mega-Ohm.



$Attenuation

Integer

Sets the attenuation setting for the input. Allowable values are '1' and '10'.



$Filter

String

Turns on and off the low pass filter options for the input. Allowable values are 'ON' and 'OFF'



Return Parameters



Parameter

Variable Type

Description



None





AG53131A_MeasureExpectedFreq

Previous Top Next



* * *



AG53131A_MeasureExpectedFreq

Usage:

$Measurement = AG53131A_MeasureExpectedFreq($Handle,$InputChannel,$ExpectedFrequency,$DesiredResolution);

Description:

This function uses the Agilent IVI Instrument drivers, in order to use the AG53131 functions in JabilTest, you need to have the Agilent COM components installed.

This function measures the Frequency on the specified input, with a specified expected frequency, and a desired resolution.

The expected frequency and resolution are entered as strings, for example:

$Measurement = AG53131A.MeasureExpectedFreq($Handle,1,"13 MHZ","0.1 HZ");

Function Arguments



Parameter

Variable Type

Description



$Handle

Object

The COM object representing the instance of the AG53131A.



$InputChannel

Integer

The channel number to measure



$ExpectedFrequency

String

The expected frequency specified as a string containing the numeric expected frequency, as well as an abbrevation for the units, such as "13 Mhz", or "1000 HZ", etc



$DesiredResolution

String

The desired resolution for the measurement specified as a string containing the numeric frequency, as well as an abbreviation for units, such as "0.1 HZ".





Return Parameters



Parameter

Variable Type

Description



$Measurement

Float

The measurement of the frequency in hertz.





AG53131A_MeasureFallTime

Previous Top Next



* * *



AG53131A_MeasureFallTime

Usage:

$Measurement = AG53131A_MeasureFallTime($Handle,$InputChannel);

Description:

This function uses the Agilent IVI Instrument drivers, in order to use the AG53131 functions in JabilTest, you need to have the Agilent COM components installed.

This function measures the Fall Time on the specified input.

Function Arguments



Parameter

Variable Type

Description



$Handle

Object

The COM object representing the instance of the AG53131A.



$InputChannel

Integer

The channel number to measure





Return Parameters



Parameter

Variable Type

Description



$Measurement

Float

The measurement of the fall time in seconds.





AG53131A_MeasureFreq

Previous Top Next



* * *



AG53131A_MeasureFreq

Usage:

$Measurement = AG53131A.MeasureFreq($Handle,$InputChannel);

Description:

This function uses the Agilent IVI Instrument drivers, in order to use the AG53131 functions in JabilTest, you need to have the Agilent COM components installed.

This function measures the Frequency on the specified input.

Function Arguments



Parameter

Variable Type

Description



$Handle

Object

The COM object representing the instance of the AG53131A.



$InputChannel

Integer

The channel number to measure





Return Parameters



Parameter

Variable Type

Description



$Measurement

Float

The measurement of the frequency in hertz.





AG53131A_MeasurePeriod

Previous Top Next



* * *



AG53131A_MeasurePeriod

Usage:

$Measurement = AG53131A_MeasurePeriod($Handle,$InputChannel);

Description:

This function uses the Agilent IVI Instrument drivers, in order to use the AG53131 functions in JabilTest, you need to have the Agilent COM components installed.

This function measures the Period on the specified input.

Function Arguments



Parameter

Variable Type

Description



$Handle

Object

The COM object representing the instance of the AG53131A.



$InputChannel

Integer

The channel number to measure





Return Parameters



Parameter

Variable Type

Description



$Measurement

Float

The measurement of the period in seconds.





AG53131A_MeasurePhase

Previous Top Next



* * *



AG53131A_MeasurePhase

Usage:

$Measurement = AG53131A_MeasurePhase($Handle,$InputChannel1,$InputChannel2);

Description:

This function uses the Agilent IVI Instrument drivers, in order to use the AG53131 functions in JabilTest, you need to have the Agilent COM components installed.

This function measures the phase difference (in degrees) between the two channels specified.

Function Arguments



Parameter

Variable Type

Description



$Handle

Object

The COM object representing the instance of the AG53131A.



$InputChannel1

Integer

The channel number to measure 1



$InputChannel2

Integer

The channel number to measure 2





Return Parameters



Parameter

Variable Type

Description



$Measurement

Float

The measurement of the phase in degrees





AG53131A_MeasureVoltageMax

Previous Top Next



* * *



AG53131A_MeasureVoltageMax

Usage:

$Measurement = AG53131A.MeasureVoltageMax($Handle,$InputChannel);

Description:

This function uses the Agilent IVI Instrument drivers, in order to use the AG53131 functions in JabilTest, you need to have the Agilent COM components installed.

This function measures the maximum voltage on the specified input.

Function Arguments



Parameter

Variable Type

Description



$Handle

Object

The COM object representing the instance of the AG53131A.



$InputChannel

Integer

The channel number to measure





Return Parameters



Parameter

Variable Type

Description



$Measurement

Float

The measurement of the maximum voltage in volts.





AG53131A_MeasureVoltageMin

Previous Top Next



* * *



AG53131A_MeasureVoltageMin

Usage:

$Measurement = AG53131A.MeasureVoltageMin($Handle,$InputChannel);

Description:

This function uses the Agilent IVI Instrument drivers, in order to use the AG53131 functions in JabilTest, you need to have the Agilent COM components installed.

This function measures the minimum voltage on the specified input.

Function Arguments



Parameter

Variable Type

Description



$Handle

Object

The COM object representing the instance of the AG53131A.



$InputChannel

Integer

The channel number to measure





Return Parameters



Parameter

Variable Type

Description



$Measurement

Float

The measurement of the minimum voltage in volts.





AG53131A_MeasureVoltagePTPeak

Previous Top Next



* * *



AG53131A.MeasureVoltagePTPeak

Usage:

$Measurement = AG53131A.MeasureVoltagePTPeak($Handle,$InputChannel);

Description:

This function uses the Agilent IVI Instrument drivers, in order to use the AG53131 functions in JabilTest, you need to have the Agilent COM components installed.

This function measures the peak to peak voltage on the specified input.

Function Arguments



Parameter

Variable Type

Description



$Handle

Object

The COM object representing the instance of the AG53131A.



$InputChannel

Integer

The channel number to measure





Return Parameters



Parameter

Variable Type

Description



$Measurement

Float

The measurement of the peak to peak voltage in volts.





AG53131A_ReadBuffer

Previous Top Next



* * *



AG53131A_ReadBuffer



Usage:

($ItemCount,$Buffer) = AG53131A_ReadBuffer($Handle);



Description:



This function reads the instrument buffer for the responses to any queries that have been submitted to the instrument using the AG53131A_SendCommand function.

This function can be used to leverage any instrument functionality that's not exposed by the other functions in the library.

NOTE: This function uses the Agilent IVI Instrument drivers, in order to use the AG53131 functions in JabilTest, you need to have the Agilent COM components installed.

Function arguments



Parameter

Variable Type

Description



$Handle

Object

The handle of the instrument returned from the initialization function.





Return parameters



Parameter

Variable Type

Description



$ItemCount

Integer

The number of items remaining in the instruments output buffer. These will all be returned using the currently configured delimiter character in the instruments output buffer.



$Buffer

String

The entire pending output buffer of the instrument. The $ItemCount return parameter can be used to determine how many items are contained in the returned output buffer. The items will be seperated by the currently configured delimiter character for the instrument.





Example(s):





$Measurement = AG53131A_MeasureExpectedFreq($Handle,1,"10 Mhz","0.1 Hz");

AG53131A_SendCommand($Handle,":Fetch?");

($ItemCount,$RetData) = AG53131A_ReadBuffer($Handle);

UpdateStatus($ItemCount);

UpdateStatus($RetData);





AG53131A_SendCommand

Previous Top Next



* * *



AG53131A_SendCommand



Usage:

AG53131A_SendCommand($Handle,$Command);



Description:



This function passes a raw SCPI command to to the instrument to control functionality that isn't exposed via the device driver.

NOTE: This function uses the Agilent IVI Instrument drivers, in order to use the AG53131 functions in JabilTest, you need to have the Agilent COM components installed.

Function arguments



Parameter

Variable Type

Description



$Handle

Object

The handle of the instrument returned from the initialization function.



$Command

String

The SCPI Instrument command to send to the instrument.





Return parameters



Parameter

Variable Type

Description



None





Example(s):

AG53131A_SendCommand($Handle,”INIT:CONT ON”); // Set up continuous acquisition





AG53131A_SetTimeout

Previous Top Next



* * *



AG53131A_SetTimeout



Usage:

AG53131A_SendCommand($Handle,$TimeoutMS);



Description:



This function sets the measurement timeout value on the instrument. The timeout value is expressed in milliseconds.

NOTE: This function uses the Agilent IVI Instrument drivers, in order to use the AG53131 functions in JabilTest, you need to have the Agilent COM components installed.

Function arguments



Parameter

Variable Type

Description



$Handle

Object

The handle of the instrument returned from the initialization function.



$TimeoutMS

Integer

The measurement time out value expressed in milliseconds.





Return parameters



Parameter

Variable Type

Description



None





Example(s):

AG53131A_SetTimeout($Handle,5000); // Set measurement timeout to 5 seconds





AG53131A_TriggerConfig

Previous Top Next



* * *



AG53131A_TriggerConfig

Usage:

AG53131A_TriggerConfig($Handle,$InputChannel,$Auto,$TriggerLevel,$TriggerSlope,$Sensitivity);

Description:

This function uses the Agilent IVI Instrument drivers, in order to use the AG53131 functions in JabilTest, you need to have the Agilent COM components installed.

This function measures the peak to peak voltage on the specified input.

Function Arguments



Parameter

Variable Type

Description



$Handle

Object

The COM object representing the instance of the AG53131A.



$InputChannel

Integer

The channel number to measure



$Auto

String

Turns on or off the AUTO trigger setting. Allowable values are:

"ON"

"OFF"



$TriggerLevel

Float

Sets the trigger level of the specified input. In the event that the "AUTO" trigger is turned on, this number specifies the percentage of the signal at which to trigger. In the event that the "AUTO" trigger is turned off, this number specifies the absolute voltage level at which to trigger. Allowable values are:

If AutoTriggering is Enabled:

10 = 10%

20 = 20%

30 = 30%

40 = 40%

50 = 50%

60 = 60%

70 = 70%

80 = 80%

90 = 90%

If Auto-Triggering is Disabled, any voltage level within the acceptable range is permitted.



$TriggerSlope

String

Specifies the trigger slope for the given input channel. Allowable values are:

"NEG" = Trigger on Negative Slope

"POS" = Trigger on Positive Slope



$Sensitivity

String

Specifies the hysterisis function level. Allowable values are:

"LOW"

"MED"

"HIGH"





Return Parameters



Parameter

Variable Type

Description



None





AR7054SA_DCHipotMeasurement

Previous Top Next



* * *



AR7504SA_DC_Hipot_Measurement

Usage:

$Measurement = AR7504SA_DC_Hipot_Measurement($HipotInstance,$Timeout);

Description:

This function uses the Agilent IO Lib and NI-VISA,in order to use the AgilentIOLibs functions in JabilTest, you need to have the Agilent IO Lib and NI-VISA installed.

This function returns a DC dielectric withstand leakage current measurement. In the case of instrument communication failure, or a timeout , a failure is generated by the fuction.

Function Arguments



Parameter

Variable Type

Description



$HipotInstance

Object

The AR7504SAHipotClass representing the instance of the AR7504SA to be operated.



$Timeout

Integer

Timeout (in Second) to wait for a reading before failure.





Return Parameters



Parameter

Variable Type

Description



$Measurement

Float

The DC Hipot leakage current measurement.





AR7054SA_DCHipotSetup

Previous Top Next



* * *



AR7504SA_DC_Hipot_Setup

Usage:

AR7504SA_DC_Hipot_Setup($HipotInstance,$Voltage,$Low_Limit,$High_Limit,$Ramp_Time,$Dwell_Time,$Arc_Sense);

Description:

This function uses the Agilent IO Lib and NI-VISA,in order to use the AgilentIOLibs functions in JabilTest, you need to have the Agilent IO Lib and NI-VISA installed.

This function setup the instrument for DC dielectric withstand measurement. In the case of instrument communication failure, or the setting is beyond the instrument range ,a failure is generated by the function .

Function Arguments



Parameter

Variable Type

Description



$HipotInstance

Object

The AR7504SAHipotClass representing the instance of the AR7504SA to be operated.



$Voltage

Float

The High Voltage apply for the measurement. For AR7504SA the range 0~6000V .



$Low_Limit

Float

The Low Limit for the measurement. For AR7504SA Hipot tester ,the Low Limit is 0~999.9 uA.



$High_Limit

Integer

The High Limit for the measurement. For AR7504SA Hipot tester ,the High Limit is 0~9999 uA.



$Ramp_Time

Float

The Ramp Time for the measurement is the high voltage rise from 0 to the setting value. For AR7504SA Hipot tester is 0.4~999.9 S.



$Dwell_Time

Float

Dwell Time is the duration of applying voltage for the measurement. For AR7504SA Hipot tester is 0.3~999.9 S.



$Arc_Sense

Integer

Arc Sense is the sensitivity for detection the arc. If set 0 the arc sense is off, otherwise is on. For AR7504SA Hipot tester is 0~9 selectable. Value is greater and sensitivity is more higer.





Return Parameters



Parameter

Variable Type

Description



$None





AR7504SAHipot_Close

Previous Top Next



* * *



AR7504SAHipot_Close

Usage:

AR7504SAHipot_Close($HipotInstance);

Description:

This function uses the Agilent IO Lib and NI-VISA,in order to use the AgilentIOLibs functions in JabilTest, you need to have the Agilent IO Lib and NI-VISA installed.

This function close the Associated Research 7504SA Hipot teser and recovers used resources. It does not reset tester or change it’s existing settings.This function returns a passing result if the tester can be closed successfully,otherwise a failure is generated by the script function.

Function Arguments



Parameter

Variable Type

Description



$HipotInstance

Object

The AR7504SAHipotClass representing the instance of the AR7504SA to be closed. Closes the tester and release all resources.





Return Parameters



Parameter

Variable Type

Description



None





AR7504SAHipot_Init

Previous Top Next



* * *



AR7504SAHipot_Init

Usage:

$HipotInstance = AR7504SAHipot_Init($ResourceString);

Description:

This function uses the Agilent IO Lib and NI-VISA,in order to use the AgilentIOLibs functions in JabilTest, you need to have the Agilent IO Lib and NI-VISA installed.

This function initialize the Associated Research 7504SA Hipot teser for operation. It does reset tester and enable all pass,fail,abort,error SRQ setting. It simply grabs an instance of the AR7504SAHipotClass to use in further test script operations.This function returns a passing result if the tester can be initialized successfully,otherwise a failure is generated by the script function.

Function Arguments



Parameter

Variable Type

Description



$ResourceString

String

The resource string identifying the tester. For example,"GPIB0::8".





Return Parameters



Parameter

Variable Type

Description



$HipotInstance

Object

The AR7504SAHipotClass representing the instance of the AR7504SA.





AR7504SA_AC_Hipot_Measurement

Previous Top Next



* * *



AR7504SA_AC_Hipot_Measurement

Usage:

$Measurement = AR7504SA_AC_Hipot_Measurement($HipotInstance,$Timeout);

Description:

This function uses the Agilent IO Lib and NI-VISA,in order to use the AgilentIOLibs functions in JabilTest, you need to have the Agilent IO Lib and NI-VISA installed.

This function returns a AC dielectric withstand leakage current measurement. In the case of instrument communication failure, or a timeout , a failure is generated by the fuction.

Function Arguments



Parameter

Variable Type

Description



$HipotInstance

Object

The AR7504SAHipotClass representing the instance of the AR7504SA to be operated.



$Timeout

Integer

Timeout (in Second) to wait for a reading before failure.





Return Parameters



Parameter

Variable Type

Description



$Measurement

Float

The AC Hipot leakage current measurement.





AR7504SA_AC_Hipot_Setup

Previous Top Next



* * *



AR7504SA_AC_Hipot_Setup

Usage:

AR7504SA_AC_Hipot_Setup($HipotInstance,$Voltage,$Low_Limit,$High_Limit,$Ramp_Time,$Dwell_Time,$Frequency,$Arc_Sense);

Description:

This function uses the Agilent IO Lib and NI-VISA,in order to use the AgilentIOLibs functions in JabilTest, you need to have the Agilent IO Lib and NI-VISA installed.

This function setup the instrument for AC dielectric withstand measurement. In the case of instrument communication failure, or the setting is beyond the instrument range ,a failure is generated by the function .

Function Arguments



Parameter

Variable Type

Description



$HipotInstance

Object

The AR7504SAHipotClass representing the instance of the AR7504SA to be operated.



$Voltage

Float

The High Voltage apply for the measurement. For AR7504SA the range 0~5000V .



$Low_Limit

Float

The Low Limit for the measurement. For AR7504SA Hipot tester ,the Low Limit is 0~9.999 mA.



$High_Limit

Float

The High Limit for the measurement. For AR7504SA Hipot tester ,the High Limit is 0~99.00 mA.



$Ramp_Time

Float

The Ramp Time for the measurement is the high voltage rise from 0 to the setting value. For AR7504SA Hipot tester is 0.1~999.9 S.



$Dwell_Time

Float

Dwell Time is the duration of applying voltage for the measurement. For AR7504SA Hipot tester is 0.3~999.9 S.



$Frequency

Integer

Frequency for the measurement is the AC Voltage frequency. For AR7504SA Hipot 50 or 60Hz selectable.



$Arc_Sense

Integer

Arc Sense is the sensitivity for detection the arc. If set 0 the arc sense is off, otherwise is on. For AR7504SA Hipot tester is 0~9 selectable. Value is greater and sensitivity is more higer.





Return Parameters



Parameter

Variable Type

Description



$None





AR7504SA_GroundBondMeasurement

Previous Top Next



* * *



AR7504SA_GBOND_Measurement

Usage:

($Measurement,$ApplyCurrent) = AR7504SA_GBOND_Measurement($HipotInstance,$Timeout);

Description:

This function uses the Agilent IO Lib and NI-VISA,in order to use the AgilentIOLibs functions in JabilTest, you need to have the Agilent IO Lib and NI-VISA installed.

This function returns a ground bond resistance measurement. In the case of instrument communication failure, or a timeout , a failure is generated by the fuction.

Function Arguments



Parameter

Variable Type

Description



$HipotInstance

Object

The AR7504SAHipotClass representing the instance of the AR7504SA to be operated.



$Timeout

Integer

Timeout (in Second) to wait for a reading before failure.





Return Parameters



Parameter

Variable Type

Description



$Measurement

Float

The Ground Bond Resistance measurement.



$ApplyCurrent

Float

The Current Applied actually for the measurement.If the applied current actually is not in the range of 0.98*Current~1.02*Current the instrument must be caliratiioned.





AR7504SA_GBOND_Setup

Previous Top Next



* * *



AR7504SA_GBOND_Setup

Usage:

AR7504SA_GBOND_Setup($HipotInstance,$Current,$Voltaqge,$Low_Limit,$High_Limit,$DwellTime);

Description:

This function uses the Agilent IO Lib and NI-VISA,in order to use the AgilentIOLibs functions in JabilTest, you need to have the Agilent IO Lib and NI-VISA installed.

This function setup the instrument for ground bond measurement. In the case of instrument communication failure, or the setting is beyond the instrument range ,a failure is generated by the function .

Function Arguments



Parameter

Variable Type

Description



$HipotInstance

Object

The AR7504SAHipotClass representing the instance of the AR7504SA to be operated.



$Current

Float

The Current apply for the measurement. For AR7504SA the range is 3.0~30.0A.



$Voltage

Float

The Voltage apply for the measurement. For AR7504SA the range is 3.0~8.0V.



$Low_Limit

Integer

The Low Limit for the measurement. For AR7504SA Hipot tester ,the Low Limit is 0 to 600 mOhm at Current 3-10A and 0 to 150 mOhm at Current 3-30A.



$High_Limit

Integer

The High Limit for the measurement. For AR7504SA Hipot tester ,the Low Limit is 0 to 600 mOhm at Current 3-10A and 0 to 150 mOhm at Current 3-30A.



$DwellTime

Integer

Dwell Time is the duration of applying voltage and current for the measurement.





Return Parameters



Parameter

Variable Type

Description



$None





AVT_GigE_CameraList

Previous Top Next



* * *



AVT_GigE_CameraList



Usage:

($ConnectedNum,$DataArray) = AVT_GigE_CameraList($ArrayLength);





Description:

This function lists the Allied Vision Technologies cameras currently visible to this system.





Result:

($ConnectedNum,$DataArray) = AVT_GigE_CameraList($ArrayLength);

Function arguments



Parameter

Variable Type

Description



$ArrayLength

Integer

The size of the return array





Return parameters



Parameter

Variable Type

Description



$ConnectedNum

Integer

The number of cameras found



$DataArray

Array

An array containing all camera information:

· Camera name

· A value unique to each camera shipped by Allied Vision Technologies.

· Interface type

· Unique value for each interface or bus

· Camera's serial number





Example(s):

($ConnectedNum,$DataArray) = AVT_GigE_CameraList(1);





AVT_GigE_CaptureFrame

Previous Top Next



* * *



AVT_GigE_CaptureFrame



Usage:

$ErrorCode = AVT_GigE_CaptureFrame($objCamera,$FileName,$Timeout);





Description:

This function captures a frame and saves that frame as a bitmap on the provided location.





Result:

$ErrorCode = AVT_GigE_CaptureFrame($objCamera,$FileName,$Timeout);

Function arguments



Parameter

Variable Type

Description



$objCamera

Integer

The handle to the Allied Vision Technologies GigE camera



$FileName

String

Path and filename of the bitmap file.



$Timeout

Integer

Timeout for frame capture.





Return parameters



Parameter

Variable Type

Description



$ErrorCode

Integer

The execution error code.

Error codes:

· 0: no error

· >0: error (I refer to the API documentation for detailed error code information)





Example(s):

$ErrorCode = AVT_GigE_CaptureFrame($objCamera,"C:\\test.bmp",1000);





AVT_GigE_CloseCamera

Previous Top Next



* * *



AVT_GigE_CloseCamera



Usage:

$ErrorCode = AVT_GigE_CloseCamera($objCamera);





Description:

This function closes the previously opened session.





Result:

$ErrorCode = AVT_GigE_CloseCamera($objCamera);

Function arguments



Parameter

Variable Type

Description



$objCamera

Integer

The handle to the Allied Vision Technologies GigE camera





Return parameters



Parameter

Variable Type

Description



$ErrorCode

Integer

The execution error code.

Error codes:

· 0: no error

· >0: error (I refer to the API documentation for detailed error code information)





Example(s):

$ErrorCode = AVT_GigE_CloseCamera($objCamera);





AVT_GigE_GetAttributeEnum

Previous Top Next



* * *



AVT_GigE_GetAttributeEnum



Usage:

($ErrorCode,$AttributeValue) = AVT_GigE_GetAttributeEnum($objCamera,$AttributeName);





Description:

This function gets the value of a enumeration attribute.





Result:

($ErrorCode,$AttributeValue) = AVT_GigE_GetAttributeEnum($objCamera,$AttributeName);

Function arguments



Parameter

Variable Type

Description



$objCamera

Integer

The handle to the Allied Vision Technologies GigE camera



$AttributeName

String

The name of the camera attribute to get the value. See the list of camera and driver attributes which can be retrieved from www.alliedvisiontec.com





Return parameters



Parameter

Variable Type

Description



$ErrorCode

Integer

The execution error code.

Error codes:

· 0: no error

· >0: error (I refer to the API documentation for detailed error code information)



$AttributeValue

String

The value of the attribute





Example(s):

($ErrorCode,$AttributeValue) = AVT_GigE_GetAttributeEnum($objCamera,"PixelFormat");





AVT_GigE_GetAttributeString

Previous Top Next



* * *



AVT_GigE_GetAttributeString



Usage:

($ErrorCode,$AttributeValue) = AVT_GigE_GetAttributeString($objCamera,$AttributeName);





Description:

This function gets the value of a string attribute.





Result:

($ErrorCode,$AttributeValue) = AVT_GigE_GetAttributeString($objCamera,$AttributeName);

Function arguments



Parameter

Variable Type

Description



$objCamera

Integer

The handle to the Allied Vision Technologies GigE camera



$AttributeName

String

The name of the camera attribute to get the value. See the list of camera and driver attributes which can be retrieved from www.alliedvisiontec.com





Return parameters



Parameter

Variable Type

Description



$ErrorCode

Integer

The execution error code.

Error codes:

· 0: no error

· >0: error (I refer to the API documentation for detailed error code information)



$AttributeValue

String

The value of the attribute





Example(s):

($ErrorCode,$AttributeValue) = AVT_GigE_GetAttributeString($objCamera,"CameraName");





AVT_GigE_GetAttributeUInt32

Previous Top Next



* * *



AVT_GigE_GetAttributeUInt32



Usage:

($ErrorCode,$AttributeValue) = AVT_GigE_GetAttributeUInt32($objCamera,$AttributeName);





Description:

This function gets the value of a UInt32 attribute.





Result:

($ErrorCode,$AttributeValue) = AVT_GigE_GetAttributeUInt32($objCamera,$AttributeName);

Function arguments



Parameter

Variable Type

Description



$objCamera

Integer

The handle to the Allied Vision Technologies GigE camera



$AttributeName

String

The name of the camera attribute to get the value. See the list of camera and driver attributes which can be retrieved from www.alliedvisiontec.com





Return parameters



Parameter

Variable Type

Description



$ErrorCode

Integer

The execution error code.

Error codes:

· 0: no error

· >0: error (I refer to the API documentation for detailed error code information)



$AttributeValue

String

The value of the attribute





Example(s):

($ErrorCode,$AttributeValue) = AVT_GigE_GetAttributeUInt32($objCamera,"AcquisitionFrameCount");





AVT_GigE_OpenCameraByIP

Previous Top Next



* * *



AVT_GigE_OpenCameraByIP



Usage:

($ErrorCode,$objCamera) = AVT_GigE_OpenCameraByIP($IP);





Description:

This function opens a session to the AVT GigE camera using the provided IP address. If an invalid IP address or no IP address is provided, this function returns an error code.





Result:

($ErrorCode,$objCamera) = AVT_GigE_OpenCameraByIP($IP);

Function arguments



Parameter

Variable Type

Description



$IP

String

The IP address of the camera.





Return parameters



Parameter

Variable Type

Description



$ErrorCode

Integer

The execution error code.

Error codes:

· -1: no IP address provided.

· -2: no valid IP address provided.

· -3: no camera detected.

· 0: no error

· >0: error (I refer to the API documentation for detailed error code information)



$objCamera

Object

A reference to the camera which can be used in the other function calls.





Example(s):

($ErrorCode,$objCamera) = AVT_GigE_OpenCameraByIP($IP);





AVT_GigE_OpenCameraBySN

Previous Top Next



* * *



AVT_GigE_OpenCameraBySN



Usage:

($ErrorCode,$objCamera) = AVT_GigE_OpenCameraBySN($SerialNumber);





Description:

This function opens a session to the AVT GigE camera using the provided serial number. If no serial number is provided, this function returns an error code.





Result:

($ErrorCode,$objCamera) = AVT_GigE_OpenCameraBySN($SerialNumber);

Function arguments



Parameter

Variable Type

Description



$SerialNumber

String

The serial number of the camera.





Return parameters



Parameter

Variable Type

Description



$ErrorCode

Integer

The execution error code.

Error codes:

· -1: no serial number provided.

· -2: no camera detected.

· -3: opening camera with provided serial number fails

· 0: no error

· >0: error (I refer to the API documentation for detailed error code information)



$objCamera

Object

A reference to the camera which can be used in the other function calls.





Example(s):

($ErrorCode,$objCamera) = AVT_GigE_OpenCameraBySN($SerialNumber);





AVT_GigE_OpenCameraByUID

Previous Top Next



* * *



AVT_GigE_OpenCameraByUID



Usage:

($ErrorCode,$objCamera) = AVT_GigE_OpenCameraByUID($UID);





Description:

This function opens a session to the AVT GigE camera using the provided unique identifier. If no unique identifier is provided, this function returns an error code.





Result:

($ErrorCode,$objCamera) = AVT_GigE_OpenCameraByUID($UID);

Function arguments



Parameter

Variable Type

Description



$UID

Integer

The unique ID of the camera.





Return parameters



Parameter

Variable Type

Description



$ErrorCode

Integer

The execution error code.

Error codes:

· -1: no camera detected.

· -2: opening camera with provided unique identifier fails

· 0: no error

· >0: error (I refer to the API documentation for detailed error code information)



$objCamera

Object

A reference to the camera which can be used in the other function calls.





Example(s):

($ErrorCode,$objCamera) = AVT_GigE_OpenCameraByUID(123203);





AVT_GigE_SetAttributeEnum

Previous Top Next



* * *



AVT_GigE_SetAttributeEnum



Usage:

$ErrorCode = AVT_GigE_SetAttributeEnum($objCamera,$AttributeName,$AttributeValue);





Description:

This function sets the value of an enumeration attribute.





Result:

$ErrorCode = AVT_GigE_SetAttributeEnum($objCamera,$AttributeName,$AttributeValue);

Function arguments



Parameter

Variable Type

Description



$objCamera

Integer

The handle to the Allied Vision Technologies GigE camera



$AttributeName

String

The name of the camera attribute to set the value.



$AttributeValue

String

The value to set the camera attribute.





Return parameters



Parameter

Variable Type

Description



$ErrorCode

Integer

The execution error code.

Error codes:

· 0: no error

· >0: error (I refer to the API documentation for detailed error code information)





Example(s):

$ErrorCode = AVT_GigE_SetAttributeEnum($objCamera,"PixelFormat",$Format);





AVT_GigE_SetAttributeString

Previous Top Next



* * *



AVT_GigE_SetAttributeString



Usage:

$ErrorCode = AVT_GigE_SetAttributeString($objCamera,$AttributeName,$AttributeValue);





Description:

This function sets the value of a string attribute.





Result:

$ErrorCode = AVT_GigE_SetAttributeString($objCamera,$AttributeName,$AttributeValue);

Function arguments



Parameter

Variable Type

Description



$objCamera

Integer

The handle to the Allied Vision Technologies GigE camera



$AttributeName

String

The name of the camera attribute to set the value.



$AttributeValue

String

The value to set the camera attribute.





Return parameters



Parameter

Variable Type

Description



$ErrorCode

Integer

The execution error code.

Error codes:

· 0: no error

· >0: error (I refer to the API documentation for detailed error code information)





Example(s):

$ErrorCode = AVT_GigE_SetAttributeString($objCamera,"CameraName","TestCamera");





AVT_GigE_SetAttributeUInt32

Previous Top Next



* * *



AVT_GigE_SetAttributeUInt32



Usage:

$ErrorCode = AVT_GigE_SetAttributeUInt32($objCamera,$AttributeName,$AttributeValue);





Description:

This function sets the value of an enumeration attribute.





Result:

$ErrorCode = AVT_GigE_SetAttributeUInt32($objCamera,$AttributeName,$AttributeValue);

Function arguments



Parameter

Variable Type

Description



$objCamera

Integer

The handle to the Allied Vision Technologies GigE camera



$AttributeName

String

The name of the camera attribute to set the value.



$AttributeValue

Integer

The value to set the camera attribute.





Return parameters



Parameter

Variable Type

Description



$ErrorCode

Integer

The execution error code.

Error codes:

· 0: no error

· >0: error (I refer to the API documentation for detailed error code information)





Example(s):

$ErrorCode = AVT_GigE_SetAttributeUInt32($objCamera,"PacketSize",1500);





Aptina_GetOption

Previous Top Next



* * *



Aptina_GetOption



Usage:

$value = Aptina_GetOption($DevWare, $option);





Description:

Returns a DevWare configuration parameter. These are usually items found in the various configuration menus of the program GUI, and are included in a device's .ini file.





See the DevWare COM Interface development guide for a partial list of options. Unknown option names will return a value of "0".





Note:

These API functions require the DevSuite generic software package to be installed.



Function Arguments





Parameter



Variable Type

Description



$DevWare

Object

Handle to DevWare program instance created by the Aptina_Init() function.



$option

String

Name of option to get.





Return Parameters





Parameter



Variable Type

Description



$value

String

Value option was set for. An empty string value or invalid option name will return a value of "0". Note that this could also be a valid integer return value.





Example:

//set numeric option

$value= Aptina_GetOption($DevWare, "RAM Capture MB");

UpdateStatus("\nOption before:");

UpdateStatus($value);

Aptina_SetOption($DevWare, "RAM Capture MB", 69);

$value= Aptina_GetOption($DevWare, "RAM Capture MB");

UpdateStatus("Option after:");

UpdateStatus($value);





//set string option

$value= Aptina_GetOption($DevWare, "VidCap File");

UpdateStatus("\nOption before:");

UpdateStatus($value);

Aptina_SetOption($DevWare, "VidCap File", "C:\\TEST\\TEST.VIDEO");

$value= Aptina_GetOption($DevWare, "VidCap File");

UpdateStatus("Option after:");

UpdateStatus($value);





Aptina_GetState

Previous Top Next



* * *



Aptina_GetState



Usage:

$value = Aptina_GetState($DevWare, $state);





Description:

Returns a DevWare state parameter, which control the image color processing and display. These are the same settings that are programmed with the STATE= command in DevWare .ini files.





See the INI File User’s Guide for a complete list of the STATE variables. Unknown state names will return a value of "0".





Note:

These API functions require the DevSuite generic software package to be installed.



Function Arguments





Parameter



Variable Type

Description



$DevWare

Object

Handle to DevWare program instance created by the Aptina_Init() function.



$state

String

Name of state to get.





Return Parameters





Parameter



Variable Type

Description



$value

String

Value state was set for. An empty string value or invalid state name will return a value of "0". Note that this could also be a valid integer return value.





Example:

//set numeric option

$value= Aptina_GetOption($DevWare, "RAM Capture MB");

UpdateStatus("\nOption before:");

UpdateStatus($value);

Aptina_SetOption($DevWare, "RAM Capture MB", 69);

$value= Aptina_GetOption($DevWare, "RAM Capture MB");

UpdateStatus("Option after:");

UpdateStatus($value);





//set string option

$value= Aptina_GetOption($DevWare, "VidCap File");

UpdateStatus("\nOption before:");

UpdateStatus($value);

Aptina_SetOption($DevWare, "VidCap File", "C:\\TEST\\TEST.VIDEO");

$value= Aptina_GetOption($DevWare, "VidCap File");

UpdateStatus("Option after:");

UpdateStatus($value);





Aptina_Init

Previous Top Next



* * *



Aptina_Init



Usage:

$DevWare = Aptina_Init($deviceNum, $probeForDevices);





Description:

Initializes the DevWare software, closing any currently open instances.





Note:

These API functions require the DevSuite generic software package to be installed.



Function Arguments





Parameter



Variable Type

Description



$deviceNum

Integer

Device number if more than one device is present, otherwise ignored.



$probeForDevices

Boolean

If true, performs a probe for attached devices.





Return Parameters





Parameter



Variable Type

Description



$DevWare

Object

Handle to DevWare program instance.





Example:

$DevWare = Aptina_Init(1, false); //initialize first (and only) device on computer





Aptina_LoadPresets

Previous Top Next



* * *



Aptina_LoadPresets



Usage:

Aptina_LoadPresets($DevWare, $iniFilePath, $presetName);





Description:

Overrides power-on defaults with setting in preset file. More than one group of settings can exist in a single .ini file.





Note:

These API functions require the DevSuite generic software package to be installed.



Function Arguments





Parameter



Variable Type

Description



$DevWare

Object

Handle to DevWare program instance created by the Aptina_Init() function.



$iniFilePath

String

Path and filename of presets file to load for the sensor.



$presetName

String

Name of preset inside the .ini file to load (e.g., "Demo Initialization", "Reset", etc.)





Return Parameters





Parameter



Variable Type

Description



None

--





Example:

$IniPath = "C:\\TEST\\TEST.INI";

$Preset = "Test";

Aptina_LoadPresets($DevWare, $IniPath, $Preset);





Aptina_Quit

Previous Top Next



* * *



Aptina_Quit



Usage:

Aptina_Quit($DevWare);





Description:

Closes the DevWare program and releases all resources.





Note:

These API functions require the DevSuite generic software package to be installed.



Function Arguments





Parameter



Variable Type

Description



$DevWare

Object

Handle to DevWare program instance created by the Aptina_Init() function.





Return Parameters





Parameter



Variable Type

Description



None

--





Example:





function Finalize()

{

UpdateStatus("\n*********************** FINALIZE FUNCTION ***********************");



Aptina_Quit($DevWare);



End;

}





Aptina_SaveCapture

Previous Top Next



* * *



Aptina_SaveCapture



Usage:

Aptina_SaveCapture($DevWare, $fileType, $savePath, $timeoutms);





Description:

Captures an image and saves it to a file in the selected format.





Note:

These API functions require the DevSuite generic software package to be installed.



Function Arguments





Parameter



Variable Type

Description



$DevWare

Object

Handle to DevWare program instance created by the Aptina_Init() function.



$fileType

String

Format to save the image to. The following formats are supported:

· BMP

· TIFF

· PNG

· JPG



$savePath

String

Path and filename to save image to, NOT INCLUDING the file extension.



$timeoutms

Integer

Timeout in ms to wait for the capture of the image, saving the image to the file, or the dismissal of the capture window (returning to live capture) to complete. Each operation has a separate timeout. This value needs to be raised if averaging is turn ON to prevent an error.





Return Parameters





Parameter



Variable Type

Description



None

--





Example:

Aptina_SaveCapture($DevWare, "BMP", "C:\\TEST\\Default_CAP", 15000); //timeout 15s





Aptina_SaveRgbImage

Previous Top Next



* * *



Aptina_SaveRgbImage



Usage:

Aptina_SaveRgbImage($DevWare, $savepath);





Description:

Saves a 32-bit RGB bitmap image to a file. This function only captures a single frame and ignores the averaging state.



To specify a different file format or utilize averaging, use the Aptina_SaveCapture() function.





Note:

These API functions require the DevSuite generic software package to be installed.



Function Arguments





Parameter



Variable Type

Description



$DevWare

Object

Handle to DevWare program instance created by the Aptina_Init() function.



$savePath

String

Path and filename to save image to, INCLUDING the file extension.





Return Parameters





Parameter



Variable Type

Description



None

--





Example:

Aptina_SaveRgbImage($DevWare, "C:\\TEST\\Default_RGB.BMP");





Aptina_SetAveraging

Previous Top Next



* * *



Aptina_SetAveraging



Usage:

Aptina_SetAveraging($DevWare, $averaging, $avgCount, $delayms);





Description:

Turns averaging on/off. When on, several frames are combined into a single imaging when capturing. A large number of frames will require a longer time to acquire.





Note:

These API functions require the DevSuite generic software package to be installed.



Function Arguments





Parameter



Variable Type

Description



$DevWare

Object

Handle to DevWare program instance created by the Aptina_Init() function.



$averaging

Boolean

TRUE turns image averaging on, FALSE turns it off (ignoring all values that follow)



$avgCount

Integer

Number of image frames to average together.



$delayms

Integer

Delay in milliseconds between the frames captured for use in the averaging





Return Parameters





Parameter



Variable Type

Description



None

--





Example:

Aptina_SetAveraging($DevWare, true, 100, 25); //averages 100 frames spaced 25ms apart together





Aptina_SetColorCorrection

Previous Top Next



* * *



Aptina_SetColorCorrection



Usage:

Aptina_SetColorCorrection($DevWare, $colorCorrect, $contrast, $saturation, $gamma, $black);





Description:

Turns SW color correction on/off and sets several basic correction type values for the device.





Note:

These API functions require the DevSuite generic software package to be installed.



Function Arguments





Parameter



Variable Type

Description



$DevWare

Object

Handle to DevWare program instance created by the Aptina_Init() function.



$colorCorrect

Boolean

TRUE turns color correction on, FALSE turns it off (ignoring all values that follow)



$contrast

Integer

Contrast enhancement factor (20 - 40). Actual contrast level is this value / 20 (e.g., the default value of 25 = a contrast enhancement of 1.25)



$saturation

Integer

Saturation boost factor (0 - 20). Actual saturation level is this value / 10. A value of 0 gives a black & white image, while a value of 10 means no boost



$gamma

Integer

Gamma correction level (1 - 125). Actual gamma level is this value / 100 (e.g., the default value of 45 = a gamma correction of 0.45)



$black

Integer

Black correction level (0 - 20). Darkens blacks to enhance image





Return Parameters





Parameter



Variable Type

Description



None

--





Example:

//Color correction HIGH

Aptina_SetColorCorrection($DevWare, true, 40, 20, 125, 20);





//Color correction LOW

Aptina_SetColorCorrection($DevWare, true, 20, 0, 20, 0);





//Color correction OFF, value set to default

Aptina_SetColorCorrection($DevWare, false, 25, 10, 45, 10);





Aptina_SetOption

Previous Top Next



* * *



Aptina_SetOption



Usage:

Aptina_SetOption($DevWare, $option, $value);





Description:

Sets a DevWare program configuration parameter. These are usually items found in the various configuration menus of the program GUI, and are included in a device's .ini file.





See the DevWare COM Interface development guide for a partial list of options. Unknown option names will add new custom options to the .ini file.





Note:

These API functions require the DevSuite generic software package to be installed.



Function Arguments





Parameter



Variable Type

Description



$DevWare

Object

Handle to DevWare program instance created by the Aptina_Init() function.



$option

String

Name of option to set.



$value

String

String or integer value to set the option to.





Return Parameters





Parameter



Variable Type

Description



None

--





Example:

//set numeric option

$value= Aptina_GetOption($DevWare, "RAM Capture MB");

UpdateStatus("\nOption before:");

UpdateStatus($value);

Aptina_SetOption($DevWare, "RAM Capture MB", 69);

$value= Aptina_GetOption($DevWare, "RAM Capture MB");

UpdateStatus("Option after:");

UpdateStatus($value);





//set string option

$value= Aptina_GetOption($DevWare, "VidCap File");

UpdateStatus("\nOption before:");

UpdateStatus($value);

Aptina_SetOption($DevWare, "VidCap File", "C:\\TEST\\TEST.VIDEO");

$value= Aptina_GetOption($DevWare, "VidCap File");

UpdateStatus("Option after:");

UpdateStatus($value);





Aptina_SetState

Previous Top Next



* * *



Aptina_SetState



Usage:

Aptina_SetState($DevWare, $state, $value);





Description:

Sets a DevWare state parameter, which control the image color processing and display. These are the same settings that are programmed with the "STATE=" command in DevWare ini files.





See the INI File User’s Guide for a complete list of the STATE variables. Unknown state names will create a new custom entry in the .ini file.





Note:

These API functions require the DevSuite generic software package to be installed.



Function Arguments





Parameter



Variable Type

Description



$DevWare

Object

Handle to DevWare program instance created by the Aptina_Init() function.



$state

String

Name of state variable to set.



$value

String

String or integer value to set the state to.





Return Parameters





Parameter



Variable Type

Description



None

--





Example:

//set numeric state

$value= Aptina_GetState($DevWare, "Display Zoom");

UpdateStatus("\nState before:");

UpdateStatus($value);

Aptina_SetState($DevWare, "Display Zoom", 150);

$value= Aptina_GetState($DevWare, "Display Zoom");

UpdateStatus("State after:");

UpdateStatus($value);





//set string state

$value= Aptina_GetState($DevWare, "WB Custom");

UpdateStatus("\nState before:");

UpdateStatus($value);

Aptina_SetState($DevWare, "WB Custom", "1 0 1 0 1 0 1 0 1");

$value= Aptina_GetState($DevWare, "WB Custom");

UpdateStatus("State after:");

UpdateStatus($value);





DH_CameraADCControl

Previous Top Next



* * *



DH_CameraADCControl



Usage:

DH_CameraADCControl($Handle, $ADCControlType, $ADCLevel);





Description:

This function is used to set the A/D transition type of the camera.





NOTE: The device Handle is acquired from the function DH_CameraBegin.

Function arguments



Parameter

Variable Type

Description



$Handle

Object

The Handle of the device to be closed.



$ADCControlType

String

The A/D transition type.

Values:

· "ADC_BITS"

· "ADC_BLKLEVEL_CAL"

· "ADC_BLKLEVEL_CAL_REDCHANNEL"

· "ADC_BLKLEVEL_CAL_GREENCHANNEL1"

· "ADC_BLKLEVEL_CAL_GREENCHANNEL2"

· "ADC_BLKLEVEL_CAL_BLUECHANNEL"



$ADCLevel

String

The A/D transition level.

Values:

· "ADC_LEVEL0"

· "ADC_LEVEL1"

· "ADC_LEVEL2"

· "ADC_LEVEL3"





Return parameters



Parameter

Variable Type

Description



None.





Example:

$ADCControlType = "ADC_BITS";

$ADCLevel = "ADC_LEVEL2";

DH_CameraADCControl($Handle, $ADCControlType, $ADCLevel);





DH_CameraAGCControl

Previous Top Next



* * *



DH_CameraAGCControl



Usage:

DH_CameraAGCControl($Handle, $AGCControlType, $GainLevel);





Description:

This function is used to set the Gain of the camera.





NOTE: The device Handle is acquired from the function DH_CameraBegin.

Function arguments



Parameter

Variable Type

Description



$Handle

Object

The Handle of the device to be closed.



$AGCControlType

String

The A/D transition type.

Values:

· "AGC_GAIN_RED_CHANNEL"

· "AGC_GAIN_GREEN_CHANNEL1"

· "AGC_GAIN_GREEN_CHANNEL2"

· "AGC_GAIN_BLUE_CHANNEL"

· "AGC_GAIN"



$GainLevel

Integer

The Gain Value.

Values: 0 to 1023.





Return parameters



Parameter

Variable Type

Description



None.





Example:

$AGCControlType = "ADC_GAIN";

$GainLevel = 50;

DH_CameraAGCControl($Handle, $AGCControlType, $GainLevel);





DH_CameraBegin

Previous Top Next



* * *



DH_CameraBegin



Usage:

$Handle = DH_CameraBegin($deviceNumber);





Description:

This function will initialize the camera driver and return a handle to the driver. This driver must be supplied to all other functions for DaHeng USB cameras.





NOTE: The first camera device number is 1.

Function arguments



Parameter

Variable Type

Description



$deviceNumber

Integer

The device number of the camera to initialize.





Return parameters



Parameter

Variable Type

Description



$Handle

Object

The device handle for all camera functions.





Example:

// Get the first DaHeng Camera Handle

$Handle = DH_CameraBegin(1);





DH_CameraClose

Previous Top Next



* * *



DH_CameraClose



Usage:

DH_CameraClose($Handle);





Description:

This function will close the camera specified by the device Handle.





NOTE: The device Handle is acquired from the function DH_CameraBegin.

Function arguments



Parameter

Variable Type

Description



$Handle

Object

The Handle of the device to be closed.





Return parameters



Parameter

Variable Type

Description



None.





Example:

DH_CameraClose($Handle);





DH_CameraEnableVideoMirror

Previous Top Next



* * *



DH_CameraEnableVideoMirror



Usage:

DH_CameraEnableVideoMirror($Handle, $Direction, $Enable);





Description:

This function is used to set up image mirroring. The camera can mirror the image in the Horizontal, Vertical or Both directions.





NOTE: The device Handle is acquired from the function DH_CameraBegin.

Function arguments



Parameter

Variable Type

Description



$Handle

Object

The Handle of the device to be closed.



$Direction

String

The direction of the mirroring.

Values:

· "FULL"

· "HOR"

· "VERT"



$Enable

Boolean

· Set to "true" for returned images to be mirrored. "false" will turn off mirroring.





Return parameters



Parameter

Variable Type

Description



None.





Example:

$Handle = DH_CameraBegin(1);

DH_CameraEnableVideoMirror($Handle, "FULL", true);





DH_CameraGetBlankingSize

Previous Top Next



* * *



DH_CameraGetBlankingSize



Usage:

($HorMin, $HorMax, $VertMin, $VertMax) = DH_CameraGetBlankingSize($Handle);





Description:

This function is used to get the camera line blanking and field blanking size.





NOTE: The device Handle is acquired from the function DH_CameraBegin.

This function only supports DaHeng's USB cameras and not the Firewire (IEEE 1394 bus) cameras.

All sizes are in pixels.

Function arguments



Parameter

Variable Type

Description



$Handle

Object

The Handle of the device to be closed.





Return parameters



Parameter

Variable Type

Description



$HorMin

Integer

The horizontal minimum line blanking size.



$HorMax

Integer

The horizontal maximum line blanking size.



$VertMin

Integer

The vertical minimum field blanking size.



$VertMax

Integer

The vertical maximum field blanking size.





Example:

$Handle = DH_CameraBegin(1);

($HorMin, $HorMax, $VertMin, $VertMax) = DH_CameraGetBlankingSize($Handle);





DH_CameraSetBlanking

Previous Top Next



* * *



DH_CameraSetBlanking



Usage:

DH_CameraSetBlanking($Handle, $Hor, $Vert);





Description:

This function is used to set line blanking and field blanking.





NOTE: The device Handle is acquired from the function DH_CameraBegin.

This function only supports DaHeng's USB cameras and not the Firewire (IEEE 1394 bus) cameras.

All sizes are in pixels.

The blanking ranges are acquired with the function DH_CameraGetBlankingSize

Function arguments



Parameter

Variable Type

Description



$Handle

Object

The Handle of the device to be closed.



$Hor

Integer

Line (horizontal) Blanking.



$Vert

Integer

Field (vertical) Blanking.





Return parameters



Parameter

Variable Type

Description



None.





Example:

$Handle = DH_CameraBegin(1);

DH_CameraSetBlanking($Handle, $Hor, $Vert);





DH_CameraSetExposureTime

Previous Top Next



* * *



DH_CameraSetExposureTime



Usage:

DH_CameraSetExposureTime($Handle, $ExposureTime, $TimeUnit);





Description:

This function will set the exposure time for the DaHeng camera.





NOTES:

· The device Handle is acquired from the function DH_CameraBegin.

· If using a MicroVisio camera use the function MicroVisio_CameraSetExposureTime.

· If you want to change the exposure time, you must close the camera and re-open it before setting the new exposure time.

Function arguments



Parameter

Variable Type

Description



$Handle

Object

The Handle of the device to be closed.



$ExposureTime

Integer

The Exposure Time to set the camera to.



$TimeUnit

String

The time unit for the exposure time.

Values:

· "us"

· "ms"

· "s"





Return parameters



Parameter

Variable Type

Description



None.





Example:

$ExposureTime = 20;

DH_CameraSetExposureTime($Handle, $ExposureTime, "ms");





DH_CameraSetOutput_Window

Previous Top Next



* * *



DH_CameraSetOuput_Window



Usage:

DH_CameraSetOutput_Window($Handle, $StartX, $StartY, $Width, $Height);





Description:

This function will set the camera Area of Interest (AOI).





NOTE: The device Handle is acquired from the function DH_CameraBegin.

The starting point for the AOI is the top left corner of the area.

The AOI locations are in pixels.

Function arguments



Parameter

Variable Type

Description



$Handle

Object

The Handle of the device to be closed.



$StartX

Integer

The left edge of the AOI.



$StartY

Integer

The top edge of the AOI.



$Width

Integer

The width of the AOI. Counted from $StartX.



$Height

Integer

The height of the AOI. Counted from $StartY.





Return parameters



Parameter

Variable Type

Description



None.





Example:

$DHCameraNum = 1;

$Handle = DH_CameraBegin($DHCameraNum);

$ResolutionMode = "RES_MODE0";

DH_CameraSetResolution($Handle, $ResolutionMode);

$ADCControlType = "ADC_BITS";

$ADCLevel = "ADC_LEVEL2";

DH_CameraADCControl($Handle, $ADCControlType, $ADCLevel);

DH_CameraSetOutput_Window($Handle, 0, 0, 800, 600);

DH_CameraClose($Handle);





DH_CameraSetResolution

Previous Top Next



* * *



DH_CameraSetResolution



Usage:

DH_CameraSetResolution($Handle, $ResolutionMode);





Description:

This function will set the resolution for the DaHeng camera.





There are four resolutions available. For a model HV3110FC camera the modes correspond to the following resolutions:

Mode0: 2048 x 1536

Mode1: 1024 x 768

Mode2: 512 x 384

Mode3: 256 x 192





NOTE: The device Handle is acquired from the function DH_CameraBegin.

Function arguments



Parameter

Variable Type

Description



$Handle

Object

The Handle of the device to be closed.



$ResolutionMode

String

The resolution mode to set.

Values

· "RES_MODE0"

· "RES_MODE1"

· "RES_MODE2"

· "RES_MODE3"





Return parameters



Parameter

Variable Type

Description



None.





Example:

$DHCameraNum = 1;

$Handle = DH_CameraBegin($DHCameraNum);

$ResolutionMode = "RES_MODE0";

DH_CameraSetResolution($Handle, $ResolutionMode);

DH_CameraClose($Handle);





DH_CameraSetShutterTime

Previous Top Next



* * *



DH_CameraSetShutterTime



Usage:

DH_CameraSetShutterTime($Handle, $ShutterTime, $ShutterTimeUnit);





Description:

This function is used to set the shutter time for the camera.





NOTE: The device Handle is acquired from the function DH_CameraBegin.

Function arguments



Parameter

Variable Type

Description



$Handle

Object

The Handle of the device to be closed.



$ShutterTime

Integer

The shutter time.



$ShutterTimeUnit

String

The time unit for the shutter time.

Values:

· "us"

· "ms"

· "s"





Return parameters



Parameter

Variable Type

Description



None.





Example:

$Handle = DH_CameraBegin(1);

DH_CameraSetShutterTime($Handle, 100, "ms");





DH_CameraSetSnapMode

Previous Top Next



* * *



DH_CameraSetSnapMode



Usage:

DH_CameraSetSnapMode($Handle, $SnapMode);





Description:

This function is used to set the snap mode for the camera.





NOTE: The device Handle is acquired from the function DH_CameraBegin.

Function arguments



Parameter

Variable Type

Description



$Handle

Object

The Handle of the device to be closed.



$SnapMode

String

The Snap Mode.

Values:

· "CONTINUTATION"

· "TRIGGER"

· "TRIGGER_EDGE"

· "TRIGGER_LEVEL"





Return parameters



Parameter

Variable Type

Description



None.





Example:

$Handle = DH_CameraBegin(1);

DH_CameraSetSnapMode($Handle, "CONTINUATION");





DH_CameraSetSnapSpeed

Previous Top Next



* * *



DH_CameraSetSnapSpeed



Usage:

DH_CameraSetSnapSpeed($Handle, $SnapSpeed);





Description:

This function will set the snap speed for the DaHeng camera.





DaHeng cameras have two snap speeds: Normal Speed and High Speed.





NOTE: The device Handle is acquired from the function DH_CameraBegin.

Function arguments



Parameter

Variable Type

Description



$Handle

Object

The Handle of the device to be closed.



$SnapSpeed

String

The snap speed to set.

Values:

· "NORMAL_SPEED"

· "HIGH_SPEED"





Return parameters



Parameter

Variable Type

Description



None.





Example:

$DHCameraNum = 1;

$Handle = DH_CameraBegin($DHCameraNum);

$ResolutionMode = "RES_MODE0";

DH_CameraSetResolution($Handle, $ResolutionMode);

$SnapSpeed = "HIGH_SPEED";

DH_CameraSetSnapSpeed($Handle, $SnapSpeed);

DH_CameraClose($Handle);





DH_CameraSnapShot

Previous Top Next



* * *



DH_CameraSnapShot



Usage:

$bitmap = DH_CameraSnapShot($Handle, $Width, $Height);





Description:

This function is used to snap a photo with the DaHeng camera.





The snap is returned as a gray-scale bitmap of size $Width x $Height.





NOTE: The device Handle is acquired from the function DH_CameraBegin.

Function arguments



Parameter

Variable Type

Description



$Handle

Object

The Handle of the device to be closed.



$Width

Integer

The horizontal size of the returned bitmap in pixels.



$Height

Integer

The vertical size of the returned bitmap in pixels.





Return parameters



Parameter

Variable Type

Description



$bitmap

Object

The returned gray-scale bitmap.





Example:

$DHCameraNum = 1;

$Handle = DH_CameraBegin($DHCameraNum);

$ResolutionMode = "RES_MODE0";

DH_CameraSetResolution($Handle, $ResolutionMode);

$ADCControlType = "ADC_BITS";

$ADCLevel = "ADC_LEVEL2";

DH_CameraADCControl($Handle, $ADCControlType, $ADCLevel);

DH_CameraSetOutput_Window($Handle, 0, 0, $Width, $Height);

$bitmap = DH_CameraSnapShot($Handle, $Width, $Height);

DH_CameraClose($Handle);





DH_CameraSnapShot_Color

Previous Top Next



* * *



DH_CameraSnapShot_Color



Usage:

$bitmap = DH_CameraSnapShot_Color($Handle, $Width, $Height);





Description:

This function is used to snap a photo with the DaHeng camera.





The snap is returned as a color bitmap of size $Width x $Height.





NOTE: The device Handle is acquired from the function DH_CameraBegin.

Function arguments



Parameter

Variable Type

Description



$Handle

Object

The Handle of the device to be closed.



$Width

Integer

The horizontal size of the returned bitmap in pixels.



$Height

Integer

The vertical size of the returned bitmap in pixels.





Return parameters



Parameter

Variable Type

Description



$bitmap

Object

The returned color bitmap.





Example:

$DHCameraNum = 1;

$Handle = DH_CameraBegin($DHCameraNum);

$ResolutionMode = "RES_MODE0";

DH_CameraSetResolution($Handle, $ResolutionMode);

$ADCControlType = "ADC_BITS";

$ADCLevel = "ADC_LEVEL2";

DH_CameraADCControl($Handle, $ADCControlType, $ADCLevel);

DH_CameraSetOutput_Window($Handle, 0, 0, $Width, $Height);

$bitmap = DH_CameraSnapShot_Color($Handle, $Width, $Height);

DH_CameraClose($Handle);





MicroVisio_CameraSetExposureTime

Previous Top Next



* * *



MicroVisio_CameraSetExposureTime



Usage:

MicroVisio_CameraSetExposureTime($Handle, $SnapSpeed, $ResMode, $BlankingHor, $ExposureTime, $TimeUnit);





Description:

This function will set the exposure time for the MicroVisio camera.





NOTES:

· The device Handle is acquired from the function DH_CameraBegin.

· If using a DaHen camera use the function DH_CameraSetExposureTime.

· If you want to change the exposure time, you must close the camera and re-open it before setting the new exposure time.

· This function is used for camera models HV1300UC and HV2000UC.

Function arguments



Parameter

Variable Type

Description



$Handle

Object

The Handle of the device to be closed.



$SnapSpeed

String

The snap speed to set the camera to.

Values:

· "NORMAL_SPEED"

· "HIGH_SPEED"



$RedMode

String

The resolution of the image

Values:

· "RES_MODE0"

· "RES_MODE1"

· "RES_MODE2"

· "RES_MODE3"



$BlankingHor

Integer

The horizontal blanking to set the camera to.



$ExposureTime

Integer

The Exposure Time to set the camera to.



$TimeUnit

String

The time unit for the exposure time.

Values:

· "us"

· "ms"

· "s"





Return parameters



Parameter

Variable Type

Description



None.





Example:

$ExposureTime = 20;

$ResolutionMode = "RES_MODE0";

MicroVisio_CameraSetExposureTime($Handle, "HIGH_SPEED", $ResolutionMode, 0, $ExposureTime, "ms");





dPcit_NexeonHD_CaptureImage

Previous Top Next



* * *



dPict_NexeonHD_CaptureImage



Usage:

$Image = dPict_NexeonHD_CaptureImage($DeviceHandle,$Width,$Height,$ColorSpace,$Output,$Filename,$Timeout);



Description:

This function captures a frame from the dPict Nexeon HD PCI with the specified width and height. An optional fourth argument will specify the name of the file to save the bitmap image as.

Function arguments



Parameter

Variable Type

Description



$DeviceHandle

Object

The handle of the device returned from the DekTeck_DTA112_Init function



$Width

Integer

The width (pixels) of the frame



$Height

Integer

The height (pixels) of the frame



$ColorSpace

String

The Image colorspace [RGB16,RGB24,RGB32]



$Output

Bool

Determines if output image will be saved [TRUE,FALSE]



$FileName

String

The Bitmap file name to save the captured image (Optional)



$Timeout

Integer

Timeout length (seconds) to wait for capturing a frame





Return parameters



Parameter

Variable Type

Description



$Image

Object

The Bitmap object created by the capture (Of Type System.Drawing.Bitmap)





Usage Examples

$image = dPict_NexeonHD_CaptureImage($handle,1922,1080,"RGB24",TRUE,C:\\newBitmap.bmp",1);





dPict_NexeonHD_Close

Previous Top Next



* * *



dPict_NexeonHD_Close



Usage:

dPict_NexeonHD_Close($DeviceHandle);





Description:

The close function terminates the software connection to the dPict Nexeon HD PCI card and de-allocates system resources. It detaches the device object from the device hardware.

Function arguments



Parameter

Variable Type

Description



$DeviceHandle

Object

The handle of the device returned from the dPict_NexeonHD_Init function





Return parameters



Parameter

Variable Type

Description



None





Usage Examples

dPict_NexeonHD_Close($handle);





dPict_NexeonHD_Init

Previous Top Next



* * *



dPict_NexeonHD_Init



Usage:

dPict_NexeonHD_Init($DeviceIndex);





Description:

This function establishes a connection to the dPict Nexeon HD PCI card and attaches the device object to the device hardware.





Note: It is generally a good programming habit to close the instrument handle when the program is done using the instrument. This can be done with the dPict_NexeonHD_Close function.

Function arguments



Parameter

Variable Type

Description



$DeviceIndex

Integer

Zero-based index of the device to open





Return parameters



Parameter

Variable Type

Description



$DeviceHandle

Object

The handle of the device





Usage Examples

$DeviceHandle = dPict_NexeonHD_Init(0);





dPict_NexeonHD_SetInput

Previous Top Next



* * *



dPict_NexeonHD_SetInput



Usage:

dPict_NexeonHD_SetInput($DeviceHandle,$Input);





Description:

This function sets the input type of the dPict Nexeon HD PCI.

Function arguments



Parameter

Variable Type

Description



$DeviceHandle

Object

The handle of the device returned from the DekTeck_DTA112_Init function



$Input

String

The input standard [COMPOSITE,COMPONENT, HD, ANALOG]





Return parameters



Parameter

Variable Type

Description



None





Usage Examples

dPict_NexeonHD_SetInput($handle,"COMPOSITE");





EpiphanFrmGrabber_Capture

Previous Top Next



* * *



EpiphanFrmGrabber_Capture



Usage:

$Image = EpiphanFrmGrabber_Capture($Grabber,$SaveToFile,$Filename);



Description:

This function allows the captured image to be stored to the location and filename specified.



Remarks:

This function requires the Epiphan drivers from Epiphan Systems to be installed.

This function is tested with a Epiphan VGA2PCIe device.

Function arguments



Parameter

Variable Type

Description



$Grabber

Object

Handle to the Epiphan Frame Grabber card. Obtained from the EpiphanFrmGrabber_Init function.



$SaveToFile

Boolean

Whether or not to save the image to a file.



$Filename

String

Path and Filename to store the captured image.





Return parameters



Parameter

Variable Type

Description



$Image

Object

The captured image.





Example(s):

$Image = EpiphanFrmGrabber_Capture($Grabber, true, $Filename);





EpiphanFrmGrabber_Close

Previous Top Next



* * *



EpiphanFrmGrabber_Close



Usage:

EpiphanFrmGrabber_Close($Grabber);



Description:

This function closes the session with the Epiphan Frame Capture card and releases any memory or resources allocated to it.



Remarks:

This function requires the Epiphan drivers from Epiphan Systems to be installed.

This function is tested with a Epiphan VGA2PCIe device.

Function arguments



Parameter

Variable Type

Description



$Grabber

Object

Handle to the Epiphan Frame Grabber card. Obtained from the EpiphanFrmGrabber_Init function.





Return parameters



Parameter

Variable Type

Description



None





Example(s):

EpiphanFrmGrabber_Close($Grabber);





EpiphanFrmGrabber_HorizontalShift

Previous Top Next



* * *



EpiphanFrmGrabber_HorizontalShift



Usage:

EpiphanFrmGrabber_HorizontalShift($Grabber,$HorizontalShift);



Description:

This function sets the Horizontal Shift for the Epiphan Video Capture device.



Remarks:

This function requires the Epiphan drivers from Epiphan Systems to be installed.

This function is tested with a Epiphan VGA2PCIe device.

Function arguments



Parameter

Variable Type

Description



$Grabber

Object

Handle to the Epiphan Frame Grabber card. Obtained from the EpiphanFrmGrabber_Init function.



$HorizontalShift

Integer

Horizontal shift (-200 to 200).





Return parameters



Parameter

Variable Type

Description



None





Example(s):

EpiphanFrmGrabber_HorizontalShift($Grabber, 50);





EpiphanFrmGrabber_Init

Previous Top Next



* * *



EpiphanFrmGrabber_SPI_Init



Usage:

$Grabber = EpiphanFrmGrabber_Init($GrabberSerialNo);



Description:

This function configures and returns a handle to the Epiphan Video Capture device.



Remarks:

This function requires the Epiphan drivers from Epiphan Systems to be installed.

This function is tested with a Epiphan VGA2PCIe device.

Function arguments



Parameter

Variable Type

Description



$GrabberSerialNo

String

The Serial Number of the Epiphan card to be used for frame capture.





Return parameters



Parameter

Variable Type

Description



$Grabber

Object

A handle to the Epiphan capture card.





Example(s):

$Grabber = EpiphanFrmGrabber_Init("V2P81036");





EpiphanFrmGrabber_SetGain

Previous Top Next



* * *



EpiphanFrmGrabber_SetGain



Usage:

EpiphanFrmGrabber_SetGain($Grabber,$Gain);



Description:

This function sets the Gain for the capture card.



Remarks:

This function requires the Epiphan drivers from Epiphan Systems to be installed.

This function is tested with a Epiphan VGA2PCIe device.

Function arguments



Parameter

Variable Type

Description



$Grabber

Object

Handle to the Epiphan Frame Grabber card. Obtained from the EpiphanFrmGrabber_Init function.



$Gain

Integer

Gain value (0 to 255).





Return parameters



Parameter

Variable Type

Description



None





Example(s):

EpiphanFrmGrabber_SetGain($Grabber, 42);





EpiphanFrmGrabber_SetOffset

Previous Top Next



* * *



EpiphanFrmGrabber_SetOffset



Usage:

EpiphanFrmGrabber_SetOffset($Grabber,$Offset);



Description:

This function sets the Offset for the Epiphan Video Capture device.



Remarks:

This function requires the Epiphan drivers from Epiphan Systems to be installed.

This function is tested with a Epiphan VGA2PCIe device.

Function arguments



Parameter

Variable Type

Description



$Grabber

Object

Handle to the Epiphan Frame Grabber card. Obtained from the EpiphanFrmGrabber_Init function.



$Offset

Integer

Horizontal shift (0 to 63).





Return parameters



Parameter

Variable Type

Description



None





Example(s):

EpiphanFrmGrabber_SetOffset($Grabber, 25);





EpiphanFrmGrabber_SetPLLAdjustment

Previous Top Next



* * *



EpiphanFrmGrabber_SetPLLAdjustment



Usage:

EpiphanFrmGrabber_SetPLLAdjustment($Grabber,$PLLAdjustment);



Description:

This function sets the PLLAdjustment for the Epiphan Video Capture device.



Remarks:

This function requires the Epiphan drivers from Epiphan Systems to be installed.

This function is tested with a Epiphan VGA2PCIe device.

Function arguments



Parameter

Variable Type

Description



$Grabber

Object

Handle to the Epiphan Frame Grabber card. Obtained from the EpiphanFrmGrabber_Init function.



$PLLAdjustment

Integer

PLL adjustment value (-300 to 300)





Return parameters



Parameter

Variable Type

Description



None





Example(s):

EpiphanFrmGrabber_SetPLLAdjustment($Grabber, 200);





EpiphanFrmGrabber_SetSamplingPhase

Previous Top Next



* * *



EpiphanFrmGrabber_SetSamplingPhase



Usage:

EpiphanFrmGrabber_SetSamplingPhase($Grabber,$SamplingPhase);





Description:

This function sets the Sampling Phase for the Epiphan Video Capture device.



Remarks:

This function requires the Epiphan drivers from Epiphan Systems to be installed.

This function is tested with a Epiphan VGA2PCIe device.

Function arguments



Parameter

Variable Type

Description



$Grabber

Object

Handle to the Epiphan Frame Grabber card. Obtained from the EpiphanFrmGrabber_Init function.



$SamplingPhase

Integer

Sampling Phase value (0 to 31)





Return parameters



Parameter

Variable Type

Description



None





Example(s):

EpiphanFrmGrabber_SetSamplingPhase($Grabber, 15);





EpiphanFrmGrabber_SetVerticalShift

Previous Top Next



* * *



EpiphanFrmGrabber_SetVerticalShift



Usage:

EpiphanFrmGrabber_SetVerticalShift($Grabber,$VerticalShift);



Description:

This function sets the Sampling Phase for the Epiphan Video Capture device.



Remarks:

This function requires the Epiphan drivers from Epiphan Systems to be installed.

This function is tested with a Epiphan VGA2PCIe device.

Function arguments



Parameter

Variable Type

Description



$Grabber

Object

Handle to the Epiphan Frame Grabber card. Obtained from the EpiphanFrmGrabber_Init function.



$VerticalShift

Integer

Vertical Shift value (-35 to 35)





Return parameters



Parameter

Variable Type

Description



None





Example(s):

EpiphanFrmGrabber_SetSamplingPhase($Grabber, -10);





Euresys_CaptureImageToFile

Previous Top Next



* * *



Euresys_CaptureImageToFile



Usage:

Euresys_CaptureImageToFile($Channel,$AcquisitionTimeout,$DestinationFilename);





Description:





This function captures an image from the supplied channel and saves to it the filename specified by the destination filename.

In order to use this function, the channel must be configured, and set to 'Active'.

Function arguments



Parameter

Variable Type

Description



$Channel

Object

The channel object on the Euresys Image Acquisition board to close.



$AcquisitionTimeout

Integer

The timeout limit for acquiring the image. If an acquisition fails in this time, a failure is returned by the function. This argument is supplied in milliseconds.



$DestinationFilename

String

The filename and path to save the image.





Return parameters



Parameter

Variable Type

Description



None





Usage Examples (Entire Euresys Operation)

Euresys_Initialize();

$Channel = Euresys_ConfigureChannel(0,"VID2","NTSC","VIDEO","RGB16");

Euresys_SetChannelState($Channel,"ACTIVE");

Euresys_DisplayImageForm($Channel,"Camera 1");

Euresys_CaptureImageToFile($Channel,1000,"c:\\myfile.bmp");

Euresys_SetChannelState($Channel,"IDLE");

Euresys_CloseChannel($Channel);





Supported Instruments

All Supported Cameras and Euresys Image Acquisition Devices





Euresys_CloseChannel

Previous Top Next



* * *



Euresys_CloseChannel



Usage:

Euresys_CloseChannel($Channel);





Description:





This function closes the image acquisition channel that was previously configured and initialized using the Euresys_ConfigureChannel command.

Function arguments



Parameter

Variable Type

Description



$Channel

Object

The channel object on the Euresys Image Acquisition board to close.





Return parameters



Parameter

Variable Type

Description



None





Usage Examples

Euresys_CloseChannel





Supported Instruments

All Supported Cameras and Euresys Image Acquisition Devices





Euresys_ConfigureChannel

Previous Top Next



* * *



Euresys_ConfigureChannel



Usage:

$Channel = Euresys_ConfigureChannel($BoardNumber,$ConnectorName,$VideoFormat,$AcquisitionMode,$ColorFormat);





Description:





This function configures and initializes a channel on a Euresys framegrabber or image acquisition card.

Before initializing a channel, you should call the Euresys_Initialize() function.

Function arguments



Parameter

Variable Type

Description



$BoardNumber

Integer

The index number of the acquisition board on which you want to configure a channel.



$ConnectorName

String

The connector name on the acquisition board that you wish to initialize. For example, "VID1".



$VideoFormat

String

The video format for the camera connected to the acquisition channel. Allowable values are :

· "NTSC"

· "PAL"



$AcqusitionMode

String

The acquisiton mode of the channel you wish to configure. The allowable values are:

· "VIDEO"

· "SNAPSHOT"



$ColorFormat

String

The color format to configure for the acquisition channel. Supported color format values are:

· "RAW8"

· "RGB24"

· "RGB16"

· "Y8"





Return parameters



Parameter

Variable Type

Description



$Channel

Object

The configured channel object to pass to subsequent euresys functions.





Usage Examples (Entire Euresys Operation)

Euresys_Initialize();

$Channel = Euresys_ConfigureChannel(0,"VID2","NTSC","VIDEO","RGB16");

Euresys_SetChannelState($Channel,"ACTIVE");

Euresys_DisplayImageForm($Channel,"Camera 1");

Euresys_CaptureImageToFile($Channel,1000,"c:\\myfile.bmp");

Euresys_SetChannelState($Channel,"IDLE");

Euresys_CloseChannel($Channel);





Supported Instruments

All Supported Cameras and Euresys Image Acquisition Devices





Euresys_DisplayImageForm

Previous Top Next



* * *



Euresys_DisplayImageForm



Usage:

Euresys_DisplayImageForm($Channel,$WindowTitle);





Description:





This function displays a model Windows form containing a live, continuously updated image from the supplied channel.

This functions blocks script execution until the window form is closed by the user.

Function arguments



Parameter

Variable Type

Description



$Channel

Object

The channel object on the Euresys Image Acquisition board to display.



$WindowTitle

String

The title to display on the Window





Return parameters



Parameter

Variable Type

Description



None





Usage Examples

Euresys_DisplayImageForm($Channel,"Camera 1 Live Image");





Supported Instruments

All Supported Cameras and Euresys Image Acquisition Devices





Euresys_Initialize

Previous Top Next



* * *



Euresys_Initialize



Usage:

Euresys_Initialize();





Description:





This function activates the Euresys image acquisition library. This function should be called before running any other Euresys functions.

Function arguments



Parameter

Variable Type

Description



None





Return parameters



Parameter

Variable Type

Description



None





Usage Examples

Euresys_Initialize();





Supported Instruments

All Supported Cameras and Euresys Image Acquisition Devices





Euresys_SetChannelState

Previous Top Next



* * *



Euresys_SetChannelState



Usage:

Euresys_SetChannelState($Channel,$ChannelState);





Description:





This function sets the specified channel to either an Active or Idle state.

Function arguments



Parameter

Variable Type

Description



$Channel

Object

The channel object on the Euresys Image Acquisition board to set the state.



$ChannelState

String

The desired state of the Euresys Channel. Allowable values are:

· "IDLE"

· "ACTIVE"





Return parameters



Parameter

Variable Type

Description



None





Usage Examples

Euresys_SetChannelState($Channel,"ACTIVE");





Supported Instruments

All Supported Cameras and Euresys Image Acquisition Devices





IMAQ_AddConstant

Previous Top Next



* * *



IMAQ_AddConstant

Usage:

$destimage = IMAQ_AddConstant($sourceimage,$constant);

Description:

This function adds a constant value to each pixel of an image.

Function Arguments



Parameter

Variable Type

Description



$sourceimage

Object

IMAQ source image object.



$constant

Float

Constant value to add to each pixel.





Return Parameters



Parameter

Variable Type

Description



$destimage

Object

Resulting IMAQ image object.





IMAQ.AddImages

Previous Top Next



* * *



IMAQ_AddImages

Usage:

$destimage = IMAQ_AddImages($sourceimage1,$sourceimage2);

Description:

This function adds two images together.

Function Arguments



Parameter

Variable Type

Description



$sourceimage1

Object

IMAQ source image 1 object.



$sourceimage2

Object

IMAQ source image 2 object.





Return Parameters



Parameter

Variable Type

Description



$destimage

Object

Resulting IMAQ image object.





IMAQ_AndConstant

Previous Top Next



* * *



IMAQ_AndConstant

Usage:

$destimage = IMAQ_AndConstant($sourceimage,$constant,$not);

Description:

This function ANDs or NANDs a constant value with each pixel of an image.

Function Arguments



Parameter

Variable Type

Description



$sourceimage

Object

IMAQ source image object.



$constant

Float

Constant value to AND or NAND with each pixel.



$not

Boolean

If True a NAND operation is performed. If False, a AND operation is performed.





Return Parameters



Parameter

Variable Type

Description



$destimage

Object

Resulting IMAQ image object.





IMAQ_AndImages

Previous Top Next



* * *



IMAQ_AndImages

Usage:

$destimage = IMAQ_AndImages($sourceimage1,$sourceimage2,$not);

Description:

This function ANDs or NANDS sourceimage1 and sourceimage2.

Function Arguments



Parameter

Variable Type

Description



$sourceimage1

Object

IMAQ source image 1 object.



$sourceimage2

Object

IMAQ source image 2 object



$not

Boolean

If True, a NAND operation is performed. If False, an AND operation is performed.





Return Parameters



Parameter

Variable Type

Description



$destimage

Object

Resulting IMAQ image object.





IMAQ_Capture

Previous Top Next



* * *



IMAQ_Capture

Usage:

$image = IMAQ_Capture($devicename);

Description:

This function captures in image from the specified IMAQ device.

Function Arguments



Parameter

Variable Type

Description



$devicename

String

Device name of camera. This name is assigned by NI MAX.





Return Parameters



Parameter

Variable Type

Description



$image

Object

IMAQ image object of the captured image.





IMAQ_CaptureAndSaveUsingNoCam

Previous Top Next



* * *



IMAQ_CaptureAndSaveUsingNoCam

Usage:

$image = IMAQ_CaptureAndSaveUsingNoCam($Camfile,$path);

Description: This function captures an image from the NI capture card and save it as a bmp file to the specified location

It will also return back as an Image of the type IMAQ Image Function Arguments



Parameter

Variable Type

Description



$Camfile

String

The file that has been configured to the card as image file



$path

String

The path and filename where the picture needs to be stored.





Return Parameters



Parameter

Variable Type

Description



$image

Object

The captured image as IMAQ image type





Example(s):

$image = IMAQ_CaptureAndSaveUsingNoCam("Img0","c:\\captured.bmp");

This example takes an image supplied to the NI card, without using a real camera, but using the Image file

Img0 that has been set to the card.

The file will be stored as c:\captured.bmp.





IMAQ_CaptureAndSaveUsingNoCamBool

Previous Top Next



* * *



IMAQ_CaptureAndSaveUsingNoCamBool



Usage:

($image, $status) = IMAQ_CaptureAndSaveUsingNoCamBool($Camfile,$path);

Description:

This function captures an image from the NI capture card and save it as a bmp file to the specified location

It will also return back as an Image of the type IMAQ Image and a Boolean status indicating the success or failure of the operation.



Function Arguments



Parameter

Variable Type

Description



$Camfile

String

The file that has been configured to the card as image file



$path

String

The path and filename where the picture needs to be stored.



Return Parameters



Parameter

Variable Type

Description



$image

Object

The captured image as IMAQ image type



$status

Boolean

True if image successfully saved, otherwise false.





Example(s):

$image = IMAQ_CaptureAndSaveUsingNoCam("Img0","c:\\captured.bmp");

This example takes an image supplied to the NI card, without using a real camera, but using the Image file

Img0 that has been set to the card.

The file will be stored as c:\captured.bmp.





IMAQ_CaptureToClipboard

Previous Top Next



* * *



IMAQ_CaptureToClipBoard

Usage:

$Image = IMAQ_CaptureToClipBoard($Device);

Description:

This function copies the captured Imaq Image to the clipboard, so it can be used by any other program.

The Image will also be returned from the function.

Function Arguments



Parameter

Variable Type

Description



$Device

String

The NI interface name of the capture card.





Return Parameters



Parameter

Variable Type

Description



$Image

Object

The captured image





Example(s):

$Image = IMAQ_CaptureToClipBoard("Img0");

This example captures an image via Img0 and stores it into the clipboard.

It also returns it as object $Image.





IMAQ_CaptureUsingNoCam

Previous Top Next



* * *



IMAQ_CaptureUsingNoCam

Usage:

$image = IMAQ_CaptureUsingNoCam($Camfile);

Description: This function captures an image from the NI capture card and

returned this as an Image of the type IMAQ Image Function Arguments



Parameter

Variable Type

Description



$Camfile

String

The file that has been configured to the card as image file





Return Parameters



Parameter

Variable Type

Description



$Image

Object

The captured image as IMAQ image type





Example(s):

$image = IMAQ_CaptureUsingNoCam("Img0");

This example takes an image supplied to the NI card, without using a real camera, but using the Image file

Img0 that has been set to the card.





IMAQ_Cast

Previous Top Next



* * *



IMAQ_Cast

Usage:

$destimage = IMAQ_Cast($sourceimage,$newtype);

Description:

This function casts an image from one type to another.

Function Arguments



Parameter

Variable Type

Description



$sourceimage

Object

Source IMAQ image object.



$newtype

String

New image type. Valid values are:

"U8" = 8 bit unsigned monochrome.

"RGB" = 32 bit RGB.

"HLS" = 32 bit HLS.





Return Parameters



Parameter

Variable Type

Description



$destimage

Object

IMAQ image object cast to the new image type.





IMAQ_ColorBCGTransform

Previous Top Next



* * *



IMAQ_ColorBCGTransform

Usage:

$destimage = IMAQ_ColorBCGTransform($sourceimage,$redbrightness,$redcontrast,$redgamma,$greenbrightness,$greencontrast,$greengamma,$bluebrightnes,$bluecontrast,$bluegamma);

Description:

This function performs a BCG transformation on the specified RGB image.

Function Arguments



Parameter

Variable Type

Description



$sourceimage

Object

IMAQ sourc image object. This image must be a RGB image.



$redbrightness

Float

New red plane brightness value. A value of 128 leaves the brightness unchanged. Values below 128 darken the image, and values above 128 brighten the image.



$redcontrast

Float

New red plane contrast value. A value of 45 leaves the contrast unchanged. Values below 45 decrease the contrast, and values above 45 increase the contrast.



$redgamma

Float

New red plane gamma value. A value of 1.0 is neutral. Values below 1.0 enhance contrast for darker pixels at the expense of brighter pixels. Values above 1.0 enhance contrast for brighter pixels at the expense of darker pixels.



$greenbrightness

Float

New green plane brightness value. A value of 128 leaves the brightness unchanged. Values below 128 darken the image, and values above 128 brighten the image.



$greencontrast

Float

New green plane contrast value. A value of 45 leaves the contrast unchanged. Values below 45 decrease the contrast, and values above 45 increase the contrast.



$greengamma

Float

New green plane brightness value. A value of 128 leaves the brightness unchanged. Values below 128 darken the image, and values above 128 brighten the image.



$bluebrightness

Float

New blue plane brightness value. A value of 128 leaves the brightness unchanged. Values below 128 darken the image, and values above 128 brighten the image.



$bluecontrast

Float

New blue plane contrast value. A value of 45 leaves the contrast unchanged. Values below 45 decrease the contrast, and values above 45 increase the contrast.



$bluegamma

Float

New blue plane brightness value. A value of 128 leaves the brightness unchanged. Values below 128 darken the image, and values above 128 brighten the image.





Return Parameters



Parameter

Variable Type

Description



$destimage

Object

IMAQ image object of the transformed image.





IMAQ_ColorTheshold

Previous Top Next



* * *



IMAQ_ColorThreshold

Usage:

$destimage = IMAQ_ColorThreshold($sourceimage,$plane1min,$plane1max,$plane2min,$plane2max,$plane3min,$plane3max,$newvalue);

Description:

This function thresholds the specified RGB or HSL image.

Function Arguments



Parameter

Variable Type

Description



$sourceimage

Object

IMAQ sourc image object. This image must be a RGB or an HSL image.



$plane1min

Integer

Minimum value for plane 1 pixel range.



$plane1max

Integer

Maximum value for plane 1 pixel range.



$plane2min

Integer

Minimum value for plane 2 pixel range.



$plane2max

Integer

Maximum value for plane 2 pixel range.



$plane3min

Integer

Minimum value for plane 3 pixel range.



$plane3max

Integer

Maximum value for plane 3 pixel range.



$newvalue

Integer

Value for a pixel in U8 destination image if the pixel in all of the planes of the source image fall in the range specified for the plane.





Return Parameters



Parameter

Variable Type

Description



$destimage

Object

IMAQ image object of the thresholded image. Note, the output of a color image threshold operation is a U8 image.





IMAQ_CopyImage

Previous Top Next



* * *



IMAQ_CopyImage

Usage:

$destimage = IMAQ_CopyImage($sourceimage);

Description:

This function produces a copy of an image.

Function Arguments



Parameter

Variable Type

Description



$sourceimage

Object

IMAQ source image object.





Return Parameters



Parameter

Variable Type

Description



$destimage

Object

Resulting IMAQ image object.





IMAQ_ExtractColorPlanes

Previous Top Next



* * *



IMAQ_ExtractColorPlanes

Usage:

$plane1,$plane2,$plane3 = IMAQ_ExtractColorPlanes($sourceimage);

Description:

This function returns a U8 image for each of the three color planes of the source image.

Function Arguments



Parameter

Variable Type

Description



$sourceimage

Object

Source IMAQ image object. This image type must be RGB or HLS.





Return Parameters



Parameter

Variable Type

Description



$plane1

Object

U8 image representing plane 1 (Red for RGB images or Hue for HSL images) of the source image.



$plane2

Object

U8 image representing plane 2 (Green for RGB images or Saturation for HSL images) of the source image.



$plane3

Object

U8 image representing plane 3 (Blue for RGB images or Luminence for HSL images) of the source image.





IMAQ_ExtractSingleColorPlane

Previous Top Next



* * *



IMAQ_ExtractSingleColorPlane

Usage:

$NewImage = IMAQ_ExtractSingleColorPlane($Image, $Type);

Description:

This function extracts a color plane from an IMAQ image and returns it into a new image

Remarks:

This function requires Ni Vision runtime to be installed on the system. Function Arguments



Parameter

Variable Type

Description



$Image

Object

original Image of the type castable to IMAQ image.



$Type

String

Which colorplane to extract.

valid inputs are: BLUE, RED, GREEN, LUMINANCE, INTENSITY, HUE, SATURATION and VALUE

This input is case insensitive





Return Parameters



Parameter

Variable Type

Description



$NewImage

Object

The IMAQ image representing the colorplane extracted





Example(s):

$myNewImage = IMAQ_ExtractSingleColorPlane($image2,"Luminance")

This example will extract the luminance value of $image2 and convert it towards a new image called $myNewImage.





IMAQ_GetColorHistogram

Previous Top Next



* * *



IMAQ_GetColorHistogram

Usage:

$plane1,$plane2,$plane3 = IMAQ_GetColorHistogram($sourceimage,$top,$left,$height,$width);

Description:

This function returns the histogram for each plane of the specified region in a color image.

Function Arguments



Parameter

Variable Type

Description



$sourceimage

Object

Source IMAQ image object. This image type must be RGB or HLS.



$top

Integer

Top edge of the region.



$left

Integer

Left edge of the region.



$height

Integer

Height of the region in pixels.



$width

Integer

Width of the region in pixels.





Return Parameters



Parameter

Variable Type

Description



$plane1

Object

IMAQ histogram object for plane 1 of the image. This is the Red plane of an RGB image or the Hue plane of an HSL image.



$plane2

Object

IMAQ histogram object for plane 2 of the image. This is the Green plane of an RGB image or the Saturation plane of an HSL image.



$plane3

Object

IMAQ histogram object for plane 3 of the image. This is the Blue plane of an RGB image or the Luminance plane of an HSL image.





IMAQ_GetHistogramField

Previous Top Next



* * *



IMAQ_GetHistogramField

Usage:

$fieldvalue = IMAQ_GetHistogramField($histogram,$field);

Description:

This function returns the specified field of a histogram.

Function Arguments



Parameter

Variable Type

Description



$histogram

Object

Histogram object to retrieve the field from



$field

String

Field to return. Value fields are "MIN", "MAX", "MEAN" and "STDDEV".





Return Parameters



Parameter

Variable Type

Description



$fieldvalue

Float

Requested histogram field.





IMAQ_GetMonoHistogram

Previous Top Next



* * *



IMAQ_GetMonoHistogram

Usage:

$histogram = IMAQ_GetMonoHistogram($sourceimage,$top,$left,$height,$width);

Description:

This function returns the histogram of the specified region in a monochrome image.

Function Arguments



Parameter

Variable Type

Description



$sourceimage

Object

Source IMAQ image object. This image type must be a U8 image.



$top

Integer

Top edge of the region.



$left

Integer

Left edge of the region.



$height

Integer

Height of the region in pixels.



$width

Integer

Width of the region in pixels.





Return Parameters



Parameter

Variable Type

Description



$histogram

Object

IMAQ histogram object for U8 image.





IMAQ_GetPixelValue

Previous Top Next



* * *



IMAQ_GetPixelValue

Usage:

$PixelValue = IMAQ_GetPixelValue($SourceImage, $PosX, $PosY);

Description:

This function returns the pixel value of a wanted xy position within an IMAQ picture. Function Arguments



Parameter

Variable Type

Description



$SourceImage

Object

The picture which is IMAQ format.



$PosX

Int

The x axis pixel position



$PosY

Int

The y axis pixel position.





Return Parameters



Parameter

Variable Type

Description



$PixelValue

Float

The returned pixel value of the requested position.





Example(s):

$PixelValue = IMAQ_GetPixelValue($IMaqImage, 120,360 );

Returns the pixel value from pixel at position 120, 360.





IMAQ_GetPixelandSubtract

Previous Top Next



* * *



IMAQ_GetPixelandSubtract

Usage:

$newImage = IMAQ_GetPixelandSubtract($image,$posX,$posY);

Description:

This function gets the color info from a pixel location and subtract this color from the total picture content.

Remarks:

Picture need to be of a IMAQIMAGE castable format. Function Arguments



Parameter

Variable Type

Description



$image

Object

The image to work on, must be from a IMAQIMAGE castable type like .bmp



$posX

Integer

The Pixel at X position



$posY

Integer

The Pixel at Y position.





Return Parameters



Parameter

Variable Type

Description



$newImage

Object

The returned image





Example(s):

$newImage = IMAQ_GetPixelandSubtract($image,10,85);

This example generates takes the color info from pixel at position x=10,y=85 and subtract it from

$image and the new image will be returned as $newImage





IMAQ_GrabPixelRGBValue

Previous Top Next



* * *



IMAQ_GrabPixelRGBValue

Usage:

($Red, $Green, $Blue) = IMAQ_GrabPixelRGBValue($Interface, $PixelXValue, $PixelYValue);

Description:

This function requires National Instruments NI-Imaq 3.1 or later.

You have to define an interface in the MAX explorer. This interface contains the settings:

· Acquisition window: left, top, width, height.

· Frame timeout

· White level

· Image representation

This function opens an interface by name $Interface as specified in Measurement & Automation Explorer (MAX).

The function will return an error when the $Interface is already opened or used.

The function will grab the content on the input and returns the R,G and B value of the requested pixel (according the $PixelXValue and the $PixelYValue).

Remarks:

This function is tested with a NI PCI-1411 device.

Result:

($Red, $Green, $Blue) = IMAQ_GrabPixelRGBValue($Interface, $PixelXValue, $PixelYValue);

Function Arguments



Parameter

Variable Type

Description



$Interface

String

The name of the NI-Imaq interface created in MAX explorer. This interface is saved in a file and contains all the settings for this interface.



$PixelXValue

integer

The X coordinate of the pixel (like in MAX explorer)



$PixelYValue

integer

The Y coordinate of the pixel (like in MAX explorer)





Return Parameters



Parameter

Variable Type

Description



$Red

Integer

The red value of the pixel at $PixelXValue and $PixelYValue.



$Green

Integer

The green value of the pixel at $PixelXValue and $PixelYValue.



$Blue

Integer

The blue value of the pixel at $PixelXValue and $PixelYValue.





Example(s):

In this example I want to have the color values of the pixel at X = 513 and Y = 128. The interface is "PAL". After executing the function, I can validate the values or own value. I'm measuring in a red colorbar.



($Red, $Green, $Blue) = IMAQ_GrabPixelRGBValue("PAL", 513, 128);

NumericLimitTest($Red, 180, 255);

NumericLimitTest($Green, 1, 5);

NumericLimitTest($Blue, 1, 5);





IMAQ_Inverse

Previous Top Next



* * *



IMAQ_Inverse

Usage:

$DestImage = IMAQ_Inverse($SourceImage);

Description:

This function returns the Inverse picture of the provided IMAQ picture. Function Arguments



Parameter

Variable Type

Description



$SourceImage

Object

The picture which is IMAQ format.





Return Parameters



Parameter

Variable Type

Description



$DestImage

Object

The returned inversed IMAQ picture.





Example(s):

$destimage = IMAQ_Inverse($image);

Returns the $destimage as being the reverse of $image. Both are in IMAQ format





IMAQ_LoadImageFromFile

Previous Top Next



* * *



IMAQ_LoadImageFromFile

Usage:

$image = IMAQ.LoadImageFromFile($filename);

Description:

This function loads an image file into an IMAQ image object.

Function Arguments



Parameter

Variable Type

Description



$filename

String

Image file name





Return Parameters



Parameter

Variable Type

Description



$image

Object

IMAQ image object of the specified file.





IMAQ_MonoBCGTransform

Previous Top Next



* * *



IMAQ_MonoBCGTransform

Usage:

$destimage = IMAQ.MonoBCGTransform($sourceimage,$brightness,$contrast,$gamma);

Description:

This function performs a BCG transformation on the specified U8 image.

Function Arguments



Parameter

Variable Type

Description



$sourceimage

Object

IMAQ source image object. This image must be a U8 image.



$brightness

Float

New brightness value. A value of 128 leaves the brightness unchanged. Values below 128 darken the image, and values above 128 brighten the image.



$contrast

Float

New contrast value. A value of 45 leaves the contrast unchanged. Values below 45 decrease the contrast, and values above 45 increase the contrast.



$gamma

Float

New gamma value. A value of 1.0 is neutral. Values below 1.0 enhance contrast for darker pixels at the expense of brighter pixels. Values above 1.0 enhance contrast for brighter pixels at the expense of darker pixels.





Return Parameters



Parameter

Variable Type

Description



$destimage

Object

IMAQ image object of the transformed image.





IMAQ_MonoThreshold

Previous Top Next



* * *



IMAQ_MonoThreshold

Usage:

$destimage = IMAQ_MonoThreshold($sourceimage,$minvalue,$maxvalue,$usenew,$newvalue);

Description:

This function thresholds the specified U8 image.

Function Arguments



Parameter

Variable Type

Description



$sourceimage

Object

IMAQ source image object. This image must be a U8 image.



$minvalue

Integer

Minimum value for pixel range.



$maxvalue

Integer

Maximum value for pixel range.



$usenew

Boolean

Use new value flag. If this parameter is True all pixels in range are set to the new value. If this parameter is False, all pixels in range are left unchanged. Pixels outside of the range are set to 0.



$newvalue

Integer

New value for pixels in range if $usenew is True.





Return Parameters



Parameter

Variable Type

Description



$destimage

Object

IMAQ image object of the thresholded image.





IMAQ_OCR_Reading

Previous Top Next



* * *



IMAQ_OCR_Reading

Usage:

$TheAnswer = IMAQ_OCR_Reading($Image,$ABCfilename,$LeftPos,$TopPos,$WidthPos,$HeightPos);

Description:

This function will read Text out of a Picture. NI software needs to be installed. Vision runtime engine This function will in fact shrink the image to the ROI (region of interest) which is determined by $LeftPos,$TopPos,$WidthPos and $HeigthPos. And then do a read out of the text inside that shrinked image. In order to be able to have a good read out, an ABC file needs to be generated by the vision software from NI, in order to supply towards this function. Function Arguments



Parameter

Variable Type

Description



$Image

Object

The image in which you need to read text.Only images which are castable towards an CWIMAQImage are allowed. e.g. .bmp



$ABCfilename

String

Path and file name of the ABC file needed to translate the reading to text.



$LeftPos

Integer

The Left value of the window to what the image will be cropped.





$TopPos

Integer

The Top value of the window to what the image will be cropped.



$WidthPos

Integer

The Width value of the window to what the image will be cropped.



$HeigthPos

Integer

The Heighth value of the window to what the image will be cropped.





Return Parameters



Parameter

Variable Type

Description



$TheAnswer

String

The text that was read out of the to ROI 'shrinked' image





Example(s):

$TheAnswer = IMAQ_OCR_Reading($image,"c:\\visionoef\\menuOCR.abc",150,105,80,18);

This example Reads text inside the $image picture, by shrinking the image to the supplied dimensions of the ROI and reading all the data it recognizes while using the menuOCR.abc file.





IMAQ_OCR_Reading2

Previous Top Next



* * *



IMAQ_OCR_Reading2

Usage:

$TheAnswer = IMAQ_OCR_Reading2($Image,$ABCfilename,$LeftPos,$TopPos,$WidthPos,$HeightPos);

Description:

This function will read Text out of a Picture. NI software needs to be installed. Vision runtime engine This function will use the ROI to locate the position where the text will be read out. Imaq_OCR_Reading2, will not shrink the picture to the ROI as the function IMAQ_OCR_Reading does. The ROI is determined by $LeftPos,$TopPos,$WidthPos and $HeigthPos. Text will be read out directly in the ROI. In order to be able to have a good read out, an ABC file needs to be generated by the vision software from NI, in order to supply towards this function. Function Arguments



Parameter

Variable Type

Description



$Image

Object

The image in which you need to read text.Only images which are castable towards an CWIMAQImage are allowed. e.g. .bmp



$ABCfilename

String

Path and file name of the ABC file needed to translate the reading to text.



$LeftPos

Integer

The Left value of the ROI window.





$TopPos

Integer

The Top value of the ROI window.



$WidthPos

Integer

The Width value of the ROI window.



$HeigthPos

Integer

The Height value of the ROI window.





Return Parameters



Parameter

Variable Type

Description



$TheAnswer

String

The text that was read out, in the ROI





Example(s):

$TheAnswer = IMAQ_OCR_Reading2($image,"c:\\visionoef\\menuOCR.abc",150,105,80,18);

This example Reads text inside the $image picture, by by using the ROI supplied to the function menuOCR.abc file is used to translate the readings into text.





IMAQ_ReadFromClipBoard

Previous Top Next



* * *



IMAQ_ReadFromClipBoard

Usage:

$Image = IMAQ_ReadFromClipBoard($Device);

Description:

This function Reads the Imaq Image from the clipboard,

Which was placed into the clipboard by the function IMAQ_CaptureToClipBoard Function Arguments



Parameter

Variable Type

Description



$Device

String

The NI interface name of the capture card.





Return Parameters



Parameter

Variable Type

Description



$Image

Object

The Imaq Image read from the ClipBoard





Example(s):

$Image = IMAQ_ReadFromClipBoard("Img0");

This example loads the $Image object from to the clipboard.

Img0 is the interface or camfile of the NI capture card which was used to store the function into the clipboard in the first place.





IMAQ_ReplaceColorPlanes

Previous Top Next



* * *



IMAQ_ReplaceColorPlanes

Usage:

$destination = IMAQ.ReplaceColorPlanes($plane1,$plane2,$plane3,$colorspace);

Description:

This function replaces the three U8 images representing the three color planes in the destination image.

Function Arguments



Parameter

Variable Type

Description



$plane1

Object

U8 image representing plane 1 of the color image (Red plane for RGB images or Hue plane for HSL images).



$plane2

Object

U8 image representing plane 2 of the color image (Green plane for RGB images or Saturation plane for HSL images).



$plane3

Object

U8 image representing plane 3 of the color image (Blue plane for RGB images or Luminence plane for HSL images).



$colorspace

String

Color space of destination image. Must be "RGB" or "HSL".





Return Parameters



Parameter

Variable Type

Description



$destination

Object

Color image containing the information from the three color planes. The color space of this image will be what was specified above.





IMAQ_Resample

Previous Top Next



* * *



IMAQ_Resample

Usage:

$destimage = IMAQ_Resample($sourceimage,$method,$newWidth,$newHeight);

Description:

This function performs a resample operation on an image.

Function Arguments



Parameter

Variable Type

Description



$sourceimage

Object

IMAQ source image object.



$method

Integer

Resample Method

0 = BiLinear

1 = Cubic

2 = Quadratic

3 = Zero Order



$newWidth

Integer

New width for image.



$newHeight

Integer

New height for image.





Return Parameters



Parameter

Variable Type

Description



$destimage

Object

Resulting IMAQ image object.





IMAQ_SubtractConstant

Previous Top Next



* * *



IMAQ_SubtractConstant

Usage:

$destimage = IMAQ_SubtractConstant($sourceimage,$constant);

Description:

This function subtracts a constant value from each pixel of an image.

Function Arguments



Parameter

Variable Type

Description



$sourceimage

Object

IMAQ source image object.



$constant

Float

Constant value to subtract from each pixel.





Return Parameters



Parameter

Variable Type

Description



$destimage

Object

Resulting IMAQ image object.





IMAQ_SubtractImages

Previous Top Next



* * *



IMAQ_SubtractImages

Usage:

$destimage = IMAQ_SubtractImages($sourceimage1,$sourceimage2);

Description:

This function subtracts sourceimage2 from sourceimage1.

Function Arguments



Parameter

Variable Type

Description



$sourceimage1

Object

IMAQ source image 1 object.



$sourceimage2

Object

IMAQ source image 2 object





Return Parameters



Parameter

Variable Type

Description



$destimage

Object

Resulting IMAQ image object.





IMAQ_VisionGoldenTemplate

Previous Top Next



* * *



IMAQ_VisionGoldenTemplate

Usage:

$Errors = IMAQ_VisionGoldenTemplate($Image,$GoldenTemplate,$pathGoldenTemplate,$Angle,$Scale,$X,$Y,$BrigthThreshHold,$DarkThreshHold,$EdgeThicknessToIgnore,$ErrorWidth,$ErrorHeigth);

Description:

This function needs the NI Vision Runtime to be installed on the system.

This functions can be used to compare an image with a previous defined golden template.

It is used to detects differences between 2 images of the type IMAQIMAGE

Additional parameters can be set, to allow some differences on bright, dark and edge thickness. Also Error Width and Height can be used to specify a minimum size of an error to be detected.

Remarks:

Vision Developments needs NI Vision Assistant to create goldentemplates and other parameters. .

Result: Function Arguments



Parameter

Variable Type

Description



$Image

Object

This is the Image which you want to compare.Needs to be a IMAQIMAGE castable image, e.g. bmp



$GoldenTemplate

Object

This is the goldentemplate image .png file, generated via Vision Assistant



$PathGoldenTemplate

String

Path + extension of the goldentemplate file



$Angle

Integer

The rotate angle of the window to be validated



$Scale

Integer

The scale factor



$X

Float

Height of the comparision area



$Y

Float

Width of the comparision area



$BrigthThreshHold

Double

ThreshHold for detecting bright errors



$DarkThreshHold

Double

ThreshHold for detecting dark errors



$EdgeThicknessToIgnore

Double

A certain thickness of edges to ignore



$ErrorWidth

Integer

Min of error pixels to count as an error



$ErrorHeigth

Integer

Min of error pixels to count as an error





Return Parameters



Parameter

Variable Type

Description



$Errors

Integer

Number of mismatches





Example(s):

$myErrors = IMAQ_VisionGoldenTemplate($myNewImage ,$image1,$pathwithExtension,0,100,$X,$Y,30,30,1,5,5);

Remark: It might be needed to cast you image to a Luminance type before using the IMAQ_VisionGoldenTemplate

This depends on the development in the vision assistant and the technique that is used. Example: $myNewImage = IMAQ_ExtractSingleColorPlane($image2,"Luminance")





IMAQ_WriteBMPFile

Previous Top Next



* * *



IMAQ_WriteBMPFile

Usage:

IMAQ_WriteBMPFile($image,$filename);

Description:

This function writes the specified IMAQ image object to the specified BMP file.

Function Arguments



Parameter

Variable Type

Description



$image

Object

IMAQ image object to write to the file



$filename

String

File name for the image.





Return Parameters



Parameter

Variable Type

Description



$none





IMAQ1394.Capture

Previous Top Next



* * *



IMAQ1394.Capture

Usage:

$image = IMAQ1394.Capture($cameraobject,$framecount,$frameindex);

Description:

This function captures an image from an IEEE1394 camera

Function Arguments



Parameter

Variable Type

Description



$cameraobject

Object

Camera object returned by IMAQ1394_OpenCamera.



$framecount

Integer

Number of frames to capture.



$frameindex

Integer

Frame number to return to script.





Return Parameters



Parameter

Variable Type

Description



$image

Object

IMAQ image object of the specified frame.





IMAQ1394.CloseCamera

Previous Top Next



* * *



IMAQ1394.CloseCamera

Usage:

IMAQ1394.CloseCamera($cameraobject);

Description:

This function closes a session with an IEEE1394 camera.

Function Arguments



Parameter

Variable Type

Description



$cameraobject

Object

Camera object returned by IMAQ1394_OpenCamera.





Return Parameters



Parameter

Variable Type

Description



$none





IMAQ1394.GetCameraAttribute

Previous Top Next



* * *



IMAQ1394.GetCameraAttribute

Usage:

$attributevalue = IMAQ1394.GetCameraAttribute($cameraobject,$attributenumber);

Description:

This function gets the specified attribute of an IEEE1394 camera.

Function Arguments



Parameter

Variable Type

Description



$cameraobject

Object

Camera object returned by IMAQ1394_OpenCamera.



$attributenumber

Integer

Index of attribute to set. Valid values will depend on the camera being used.





Return Parameters



Parameter

Variable Type

Description



$attributevalue

Integer

Value of attribute.





IMAQ1394.OpenCamera

Previous Top Next



* * *



IMAQ1394.OpenCamera

Usage:

$cameraobject = IMAQ1394.OpenCamera($devicename);

Description:

This function opens a session with the specified IEEE1394 camera.

Function Arguments



Parameter

Variable Type

Description



$devicename

String

Name of camera. This name is assigned by NI MAX





Return Parameters



Parameter

Variable Type

Description



$cameraobject

Object

An instance of a camera object is returned to the script.





IMAQ1394.SetCameraAttribute

Previous Top Next



* * *



IMAQ1394.SetCameraAttribute

Usage:

IMAQ1394.SetCameraAttribute($cameraobject,$attributenumber,$attributevalue);

Description:

This function sets the specified attribute of an IEEE1394 camera to the specified value..

Function Arguments



Parameter

Variable Type

Description



$cameraobject

Object

Camera object returned by IMAQ1394_OpenCamera.



$attributenumber

Integer

Index of attribute to set. Valid values will depend on the camera being used.



$attributevalue

Integer

Value for attribute.





Return Parameters



Parameter

Variable Type

Description



$none





ScanWorks_CallAction

Previous Top Next



* * *



ScanWorks_CallAction

Usage:

ScanWorks_CallAction($ProjectName,$DesignName,$MappingName,$ActionName);

Description:

Note: This function requires for the Scanworks package to be installed on the test station. This function merely calls the existing COM server that is part of the scanworks package.

This function is used to run a specific action in a scanworks project, and retrieve a diagnosis. The script will generate a failing result if any of the supplied parameters (Project, Design, Mapping Name, Action Name) can't be found in the Scanworks environment. A passing result is generated in the event of a successful action.

Function Arguments



Parameter

Variable Type

Description



$ProjectName

String

The name of the Scanworks project to load.



$DesignName

String

The name of the design in the supplied Scanworks project.



$MappingName

String

The name of the mapping name in the supplied Scanworks project.



$ActionName

String

The name of the action in the supplied Scanworks project.





Return Parameters



Parameter

Variable Type

Description



None





ScanWorks_Connect

Previous Top Next



* * *



ScanWorks_Connect





Usage:

ScanWorks_Connect();

Description:

Note: This function requires for the Scanworks package to be installed on the test station. This function merely calls the existing COM server that is part of the scanworks package.

This function is used establish connection for a scanworks project. A passing result is generated in the event of a successful action.

Function Arguments



Parameter

Variable Type

Description



$N/A

N/A

No Arguments are required for this function





Return Parameters



Parameter

Variable Type

Description



None





ScanWorks_Disconnect

Previous Top Next



* * *



ScanWorks_Disconnect





Usage:

ScanWorks_Disconnect();

Description:

Note: This function requires for the Scanworks package to be installed on the test station. This function merely calls the existing COM server that is part of the scanworks package.

This function is used Tear down connection for a scanworks project. A passing result is generated in the event of a successful action.

Function Arguments



Parameter

Variable Type

Description



$N/A

N/A

No Arguments are required for this function





Return Parameters



Parameter

Variable Type

Description



None





Scanworks_RunSequence

Previous Top Next



* * *



ScanWorks_RunSequence



Usage:

ScanWorks_RunSequence($ProjectName,$DesignName,$SequenceName);



Note: This function requires for the Scanworks package to be installed before it can be used. This function calls the existing COM server that is part of the Scanworks package.



Description:

This function executes the sequence specified. If the function fails and a summary report is available, it will be dropped as the failure message to the report writer collection.





Before this function can be used, the ScanWorks instance must first be opened using the ScanWorks_Connect function. After this function has been completed, the Scanworks instance should be closed using the Scanworks_Disconnect function.

Function Arguments



$ProjectName

String

The name of the project name to load which contains the sequence to be executed.



$DesignName

String

The name of the design name to load which contains the sequence to be executed.



$SequenceName

String

The name of the sequence to execute.





Return parameters



Parameter

Variable Type

Description



None





Scanworks_RunSequenceBOOL

Previous Top Next



* * *



ScanWorks_RunSequenceBOOL



Usage:

$TestPassed = ScanWorks_RunSequenceBOOL($ProjectName,$DesignName,$SequenceName);



Note: This function requires for the Scanworks package to be installed before it can be used. This function calls the existing COM server that is part of the Scanworks package.



Description:

This function executes the sequence specified. If the function fails and a summary report is available, it will be dropped as the failure message to the report writer collection. This function will always return a passing result, regardless of the test status. The pass/fail information in this function is returned as a boolean variable back to the test script.





Before this function can be used, the ScanWorks instance must first be opened using the ScanWorks_Connect function. After this function has been completed, the Scanworks instance should be closed using the ScanWorks_Disconnect function.

Function Arguments



$ProjectName

String

The name of the project name to load which contains the sequence to be executed.



$DesignName

String

The name of the design name to load which contains the sequence to be executed.



$SequenceName

String

The name of the sequence to execute.





Return parameters



Parameter

Variable Type

Description



$TestPassed

Boolean

A boolean variable indicating if the test passed or failed. If the test fails to execute properly, this value will also be set as a failing result.





Scanworks_RunTest

Previous Top Next



* * *



ScanWorks_RunTest

Usage:

ScanWorks_RunTest($ProjectName,$DesignName,$MappingName,$ActionName);

Description:

Note: This function requires for the Scanworks package to be installed on the test station. This function merely calls the existing COM server that is part of the scanworks package.

This function is used to run a specific action in a scanworks project, and retrieve a diagnosis. The script will generate a failing result if any of the supplied parameters (Project, Design, Mapping Name, Action Name) can't be found in the Scanworks environment. A passing result is generated in the event of a successful action.

Function Arguments



Parameter

Variable Type

Description



$ProjectName

String

The name of the Scanworks project to load.



$DesignName

String

The name of the design in the supplied Scanworks project.



$MappingName

String

The name of the mapping name in the supplied Scanworks project.



$ActionName

String

The name of the action in the supplied Scanworks project.





Return Parameters



Parameter

Variable Type

Description



None





Scanworks_RunTestBool

Previous Top Next



* * *



ScanWorks_RunTestBool

Usage:

$Result = ScanWorks_RunTestBool($ProjectName,$DesignName,$MappingName,$ActionName);

Description:

Note: This function requires for the Scanworks package to be installed on the test station. This function merely calls the existing COM server that is part of the scanworks package.

This function is used to run a specific action in a scanworks project, and retrieve a diagnosis. The script will generate a false if any of the supplied parameters (Project, Design, Mapping Name, Action Name) can't be found in the Scanworks environment. A boolean result is generated in the event of a successful action. In the event that the test was successful, a TRUE value is returned, otherwise a FALSE value is returned from the function.

Note: This test will always generate a passing result. The result of the test must be determined from the returned boolean value, and then acted upon.

Function Arguments



Parameter

Variable Type

Description



$ProjectName

String

The name of the Scanworks project to load.



$DesignName

String

The name of the design in the supplied Scanworks project.



$MappingName

String

The name of the mapping name in the supplied Scanworks project.



$ActionName

String

The name of the action in the supplied Scanworks project.





Return Parameters



Parameter

Variable Type

Description



$Result

Boolean

The result of the test.

"TRUE" indicates a passing test

"FALSE" indicates a test failure





Corelis_GetFailedUUT

Previous Top Next



* * *



Corelis_GetFailedUUT



Usage:





$FailedUUTList = Corelis_GetFailedUUT();





Description:





All the Corelis functions require the Corelis Scan Express Runner software and the dongle to be installed in the system. Corelis_InitHardware() and Corelis_LoadTestPlan() functions need to be called prior to calling this function.





This function returns the failed UUTs.



Function Arguments



Parameter

Variable Type

Description



None

N/A





Return Parameters



Parameter

Variable Type

Description



$FailedUUTList

Char

The function returns NULL if there are no failed UUTs (or Corelis_InitHardware was not called). Otherwise, it returns a pointer to a character array containing the failed UUTs separated by commas. For example, a return value of "1,3,5" means UUT 1, 3, and 5 failed.





Corelis_GetNumUUT

Previous Top Next



* * *



Corelis_GetNumUUT



Usage:





$NumUUT = Corelis_GetNumUUT();





Description:





All the Corelis functions require the Corelis Scan Express Runner software and the dongle to be installed in the system. Corelis_InitHardware() and Corelis_LoadTestPlan() functions need to be called prior to calling this function.





This function returns the maximum number of UUTs that can be tested with regard to the number of TAPs available on the current controller and the number of TAPs per UUT.



Function Arguments



Parameter

Variable Type

Description



None

N/A





Return Parameters



Parameter

Variable Type

Description



$NumUUT

Integer

An integer value representing the number of UUTs configured for gang testing.





Corelis_GetTestStepCount

Previous Top Next



* * *



Corelis_GetTestStepCount



Usage:





$TestStepCount = Corelis_GetTestStepCount();





Description:





All the Corelis functions require the Corelis Scan Express Runner software and the dongle to be installed in the system. Corelis_InitHardware() and Corelis_LoadTestPlan() functions need to be called prior to calling this function.





This function returns the total number of Test Steps in the Test Plan.



Function Arguments



Parameter

Variable Type

Description



None

N/A





Return Parameters



Parameter

Variable Type

Description



$TestStepCount

Integer

An integer value representing the total number of Test Steps in the Test Plan.





GetTestStepName

Previous Top Next



* * *



Corelis_GetTestStepName



Usage:





$TestStepNumber = Corelis_GetTestStepName();





Description:





All the Corelis functions require the Corelis Scan Express Runner software and the dongle to be installed in the system. Corelis_InitHardware() and Corelis_LoadTestPlan() functions need to be called prior to calling this function.





This function returns the name of a specified Test Step in the Test Plan.



Function Arguments



Parameter

Variable Type

Description



None

N/A





Return Parameters



Parameter

Variable Type

Description



$TestStepNumber

Integer

An integer value representing the Test Step number.





Corelis_InitHardware

Previous Top Next



* * *



Corelis_InitHardware



Usage:





$CorelisInstallPath = New("String","C:\\Program Files\\ScanExpress Runner v6\\");

Corelis_InitHardware($CorelisInstallPath);





Description:





All the Corelis functions require the Corelis Scan Express Runner software and the dongle to be installed in the system.





This function performs a dongle check to verify permission to run the ScanExpressRunner.dll. This function must be called before any other function is called.



Function Arguments



Parameter

Variable Type

Description



ScanExpressInstallPath

String

The path to the directory where Scan Express software is installed.



Return Parameters



Parameter

Variable Type

Description



None





Corelis_InitHardware

Previous Top Next



* * *



Corelis_LoadTestPlan



Usage:





$CorelisTestPlanFile = New("String", "C:\\Program Files\\ScanExpress Runner v6\\Tutorial\\ScanPlus Demo Board\\ScanPlus Demo Board.tsp");

$CorelisControllerString = New("String","USB-1149.1/E,42,87,1,2,,,");





Corelis_LoadTestPlan($CorelisTestPlanFile,$CorelisControllerString);





Description:





All the Corelis functions require the Corelis Scan Express Runner software and the dongle to be installed in the system. Corelis_InitHardware() needs to be called prior to calling this function.





The function loads a Test Plan (*.tsp) file to be executed.

Function Arguments



Parameter

Variable Type

Description



CorelisTestPlanFile

String

The full path and filename of the Test Plan to be processed.



CorelisControllerString

String

The controller string for the controller installed in the tester, please consult the Corelis documentation.



Return Parameters



Parameter

Variable Type

Description



None





Corelis_InitHardware

Previous Top Next



* * *



Corelis_RunTestPlan



Usage:





Corelis_RunTestPlan();





Description:





All the Corelis functions require the Corelis Scan Express Runner software and the dongle to be installed in the system. Corelis_InitHardware() and Corelis_LoadTestPlan() functions need to be called prior to calling this function.





This function runs a Test Plan based on a set of controller parameters.



Function Arguments



Parameter

Variable Type

Description



None

N/A





Return Parameters



Parameter

Variable Type

Description



None





Corelis_RunTestPlan_Nofail

Previous Top Next



* * *



Corelis_RunTestPlan_Nofail



Usage:





Corelis_RunTestPlan_Nofail();





Description:





All the Corelis functions require the Corelis Scan Express Runner software and the dongle to be installed in the system. Corelis_InitHardware() and Corelis_LoadTestPlan() functions need to be called prior to calling this function. The function will not fail. The function Corelis_GetFailedUUT() needs to be called to determine if any UUT has failed.





This function runs a Test Plan based on a set of controller parameters.



Function Arguments



Parameter

Variable Type

Description



None

N/A





Return Parameters



Parameter

Variable Type

Description



None





Corelis_SetCurrentUUT

Previous Top Next



* * *



Corelis_SetCurrentUUT



Usage:





Corelis_SetCurrentUUT($CurrentUUT);





Description:





All the Corelis functions require the Corelis Scan Express Runner software and the dongle to be installed in the system. Corelis_InitHardware(), Corelis_LoadTestPlan(), and SetNumUUT functions need to be called prior to calling this function.





This function selects the specified UUT as the current UUT so that the test can be run on a single target with detailed diagnostics.



Function Arguments



Parameter

Variable Type

Description



$CurrentUUT

integer

The unit number of the UUT to be tested. If 0, all UUTs will be tested at the same time in gang test mode.



Return Parameters



Parameter

Variable Type

Description



None

N/A





Corelis_SetNumUUT

Previous Top Next



* * *



Corelis_SetNumUUT



Usage:





$Status = Corelis_SetNumUUT($Count, $MaxValue);

Corelis_SetNumUUT($Count, $MaxValue);





Description:





All the Corelis functions require the Corelis Scan Express Runner software and the dongle to be installed in the system. Corelis_InitHardware(), Corelis_LoadTestPlan(), and SetNumUUT functions need to be called prior to calling this function.





This function sets the number of UUTs configured for gang testing.



Function Arguments



Parameter

Variable Type

Description



$Count

integer

The number of UUTs to configure for gang testing.



$MaxValue

integer

A pointer to an integer value where the function returns the maximum number of UUTs that can be tested with the current controller and connected ScanTAPs.



Return Parameters



Parameter

Variable Type

Description



$Status

Char

The function returns NULL if the specified number of UUTs is not greater than the maximum number of UUTs that can be tested for the current controller and connected ScanTAPs; otherwise it returns a pointer to a character array containing an error message.





Introduction

Previous Top Next



* * *



The Corelis ScanExpress Library is a wrapper for the Corelis ScanExpress automation DLL that is supplied with the Corelis software. This Jabil Test Library has been tested with Version 6.01 of ScanExpress Runner. Although several functions are supported (as outlined in this help file) there are three main ones that will be used as the primary interface. These are:

· Corelis_InitHardware($CorelisInstallPath);

· Corelis_LoadTestPlan($CorelisTestPlanFile,$CorelisControllerString);

· Corelis_RunTestPlan();



In order to decrease test time the Corelis_InitHardware() and Corelis_LoadTestPlan() functions could be executed using the JabilTest Initialization Script.





Here is a sample script





SetFinalizeFunction("Cleanup");

call InitializeVariables();

call TestCase1();

End;





function InitializeVariables()

{

//look at possibly getting the path and controller settings form the registry...

$CorelisInstallPath = New("String","C:\\Program Files\\ScanExpress Runner v6\\");

$CorelisTestPlanFile = New("String", "C:\\Program Files\\ScanExpress Runner v6\\Tutorial\\ScanPlus Demo Board\\ScanPlus Demo Board.tsp");

$CorelisControllerString = New("String","USB-1149.1/E,42,87,1,2,,,");

return;

}





function TestCase1()

{

Corelis_InitHardware($CorelisInstallPath);

Corelis_GenerateIndividualExecutionLog("LOGTYPE_NONE");

Corelis_LoadTestPlan($CorelisTestPlanFile,$CorelisControllerString);



$TestStepCount = Corelis_GetTestStepCount();

$Message = "There are: "+ $TestStepCount + " test Steps in the test plan";

UpdateStatus($Message);



$TestStepList = Corelis_GetTestStepList();

$Message = "The test plan has the following test steps: " + $TestStepList;

UpdateStatus($Message);





Corelis_RunTestPlan();

return;

}





JT37x7_Close

Previous Top Next



* * *



JT37X7_Close

Usage:

JT37X7_Close($Handle);

Description:

This function requires JTAG technologies drivers to be installed on the system.

This function closes the JT37x7 driver. Always close the driver when it is no longer needed.

The only parameter is the $Handle that was created with JT37x7_Initialize.





Remarks:

This function is tested with a JT3707/PCI device.





Result:

JT37X7_Close($Handle);

Function Arguments



Parameter

Variable Type

Description



$Handle

Object

Instrument handle





Return Parameters



Parameter

Variable Type

Description





Example(s):

JT37X7_Close($Handle);





JT37X7_Initialize

Previous Top Next



* * *



JT37X7_Initialize

Usage:

$Handle = JT37X7_Initialize($Interface, $Voltage, $TapMask, $OutputVoltTap1, $OutputVoltTap2, $OutputVoltTap3, $OutputVoltTap4, $ThresholdVoltTap1, $ThresholdVoltTap2, $ThresholdVoltTap3, $ThresholdVoltTap4, $InfoVisible);

Description:

This function requires JTAG technologies drivers to be installed on the system.

This function opens the JT37x7 driver which is specified by the $interface parameter and controller number, and returns an $Handle.

The first parameter is a string that specifies the interface type of the JT37x7 controller which will be used. Possible values are:

· "PCI", "PCI0" ... "PCI31"

· "USB", "USB0" ... "USB126"

· "FW", "FW0" ... "FW63"

· "ETH192.168.1.20" or any other IP address.

The JT2147 QuadPod system will be activated and switches the activity indicator LED on the POD to the colour green.

The SCSI-II type cable cannot be swapped after the POD is activated.

If the POD system PF2137 is used, the function will apply the voltage level $Voltage to the TAP's.

If the POD system JT2147 is used, the function will apply the voltage level $OutputVoltTap1 and threshold level $ThresholdVoltTap1 to TAP1.

If the POD system JT2147 is used, the function will apply the voltage level $OutputVoltTap2 and threshold level $ThresholdVoltTap2 to TAP2.

If the POD system JT2147 is used, the function will apply the voltage level $OutputVoltTap3 and threshold level $ThresholdVoltTap3 to TAP3.

If the POD system JT2147 is used, the function will apply the voltage level $OutputVoltTap4 and threshold level $ThresholdVoltTap4 to TAP4.

Remarks:

This function is tested with a JT3707/PCI device.

Result:

$Handle = JT37X7.Initialize($Interface, $Voltage, $TapMask, $OutputVoltTap1, $OutputVoltTap2, $OutputVoltTap3, $OutputVoltTap4, $ThresholdVoltTap1, $ThresholdVoltTap2, $ThresholdVoltTap3, $ThresholdVoltTap4, $InfoVisible);

Function Arguments



Parameter

Variable Type

Description



$Interface

String

The name of the JT37x7 interface. Possible values:

· "PCI", "PCI0" ... "PCI31"

· "USB", "USB0" ... "USB126"

· "FW", "FW0" ... "FW63"

· "ETH192.168.1.20" or any other IP address.



$Voltage

String

The PF2137 TAPPOD voltage level if used. Possible values:

· "3V3"

· "5V"

· Every other value will cause an error.



$TapMask

String

Specifies the TAPs for this voltage levels setting. Possible values:

· "TAP1"

· "TAP2"

· "TAP3"

· "TAP4"



$OutputVoltTap1

Integer

This is the output voltage in tenth of a volt for TAP1. This value has to be between 15 and 36.



$OutputVoltTap2

Integer

This is the output voltage in tenth of a volt for TAP2. This value has to be between 15 and 36.



$OutputVoltTap3

Integer

This is the output voltage in tenth of a volt for TAP3. This value has to be between 15 and 36.



$OutputVoltTap4

Integer

This is the output voltage in tenth of a volt for TAP4. This value has to be between 15 and 36.



$ThresholdVoltTap1

Integer

This is the input threshold in tenth of a volt for TAP1. This value has to be between 0 and 18.



$ThresholdVoltTap2

Integer

This is the input threshold in tenth of a volt for TAP2. This value has to be between 0 and 18.



$ThresholdVoltTap3

Integer

This is the input threshold in tenth of a volt for TAP3. This value has to be between 0 and 18.



$ThresholdVoltTap4

Integer

This is the input threshold in tenth of a volt for TAP4. This value has to be between 0 and 18.



$InfoVisible

Boolean

With this parameter on true, you will receive a lot of execution information on this function. With this parameter on false, there is no screen output.





Return Parameters



Parameter

Variable Type

Description



$Handle

Object

Instrument handle that can be used for all the execution steps.





Example(s):

$Handle = JT37X7_Initialize("PCI0", "5V", "TAP1, TAP2-TAP3-TAP4", 36, 36, 36, 36, 15, 15, 15, 15, "false");

$Handle = JT37X7_Initialize("PCI0", "5V", "TAP1", 36, 36, 36, 36, 15, 15, 15, 15, "false");





Previous Top Next



* * *



JT37X7_ProgramBool



Usage:

$BoolResult = JT37X7_ProgramBool($Handle, $ProgramParameters);



Description:

This function requires at least the JTAG software CD7 to be installed on the system.

This function executes an action generated with the JTAG Technologies FlashProg Manager.



Result:

$BoolResult = JT37X7_ProgramBool($Handle, $ProgramParameters);

Function arguments



Parameter

Variable Type

Description



$Handle

Object

The instrument handle you obtain from JT37X7_Initialize that identifies a particular instrument's session.



$ProgramParameters

Array

This parameter contains all the programming options available for the user to set.

The user has to create an string array in the script and has to fill that array with the correct information as described here:

· Array[0, 0]: the path and file name of the BSX file

· Array[0, 1]: the path and file name of the image file to program. This file will be loaded into the JTAG controller memory.

· Array[0, 2]: specifies the start address of the image data in the image memory of the controller.

· Array[0, 3]: specifies the length of the image data in the image memory of the controller.

· Array[0, 4]: Specifies the start address in the target.

· Array[0, 5]: First byte in the image file that is loaded. (File offset)

· Array[0, 6]: Specifies the source of the frequency. Valid values:

1. "CLK INT": frequency generated by controller.

2. "CLK EXT": external frequency applied.

· Array[0, 7]: specifies the value of the frequency at which an application is executed.





Return parameters



Parameter

Variable Type

Description



$BoolResult

Boolean

· True: Test passed.

· False: Test failed.





Remarks:

· This function is tested with JT37x7/TSI controller.

· When there occurs an error during the execution of the low level JTAG functions, JabilTest while fail and return the error message.

· When the program action fails, JabilTest will fail.

· The function will verify if the given parameter are correct, otherwise JabilTest fails and returns the error message.

· This function does next extra actions to avoid user errors:

· Check if the used BSX file (program parameter element [0, 0]) is existing on the system.

· Check if the used BSX file is generated with the JTAG Technologies FlashProg manager tool.

· Check if the used frequency source (program parameter element [0, 6]) is valid.

· Check if the used image file (program parameter element [0, 1]) is existing on the system.

· If the program length (program parameter element [0, 3]) is equal to 0, the function will automatically use the file size as program length.

· This function has to be used with the controller type JT3717 or JT3727. The function detects which controller is connected and fails if the wrong controller type is used.

· This function will check if the generated BSX file is valid to use with the connected TAPPOD.





Example(s):





$ProgramParameters = ArrayCreate("String", 1, 10);

ArraySetValue($ProgramParameters, 0, 0, "C:\\boards\\IBO2\\Wr_multi.bsx");

ArraySetValue($ProgramParameters, 0, 1, "C:\\boards\\IBO2\\ibo2.bin");

ArraySetValue($ProgramParameters, 0, 2, "0");

ArraySetValue($ProgramParameters, 0, 3, "0");

ArraySetValue($ProgramParameters, 0, 4, "0");

ArraySetValue($ProgramParameters, 0, 5, "0");

ArraySetValue($ProgramParameters, 0, 6, "CLK INT");

ArraySetValue($ProgramParameters, 0, 7, "20000");





call ProgramBool();





function ProgramBool()

{

$Counter = New("Integer", 0);

Label ProgramBoolRetry:





$Counter = Add($Counter, 1);

$Boolean = NumericComparison($Counter, 20, "==");

ScriptIf($Boolean, "GOTO", "ProgramBoolFailed", "");



$ResultBool = JT37X7_ProgramBool($Handle, $ProgramParameters);

ScriptIf($ResultBool, "GOTO", "ProgramBoolPassed", "ProgramBoolRetry");





Label ProgramBoolFailed:

Fail("JT37X7_Program failed");

return;





Label ProgramBoolPassed:

return;

}





JT37X7_RunFlash

Previous Top Next



* * *



JT37X7_RunFlash

Usage:

JT37X7_RunFlash($Controller, $Interface, $Tap, $Voltage, $Threshold, $GenFile, $AplFile, $CnnFile, $ImageFileType, $ImageFile, $ImageStartRange, $ImageProgramRange, $ExecuteFrequency, $ErrorDirectory, $ErrorFilename, $InfoVisible);

Description:

This function requires JTAG technologies drivers to be installed on the system. Make sure that the JT37x7 controller is closed, otherwise run JT37x7_Close.

This function programs a device (FLASH/SEEPROM) using the GEN, APL and CNN file.

Remarks:

This function is tested with a JT3707/PCI device.

This function can only be used with the JT3707 device.

Make sure to close all the opened handles before executing this function.

Result:

JT3707_RunFlash($Controller, $Interface, $Tap, $Voltage, $Threshold, $GenFile, $AplFile, $CnnFile, $ImageFileType, $ImageFile, $ImageStartRange, $ImageProgramRange, $ExecuteFrequency, $ErrorDirectory, $ErrorFilename, $InfoVisible);

Function Arguments



Parameter

Variable Type

Description



$Controller

String

This parameter specifies which Sfl controller DLL has to be used.

Possible values are:

· "3705"

· "3710"

· "37x7"



$Interface

String

This parameter specifies the used interface. Possible values are:

· "PCI", "PCI0" ... "PCI31"

· "USB", "USB0" ... "USB126"

· "FW", "FW0" ... "FW63"

· "ETH192.168.1.20" or any other IP address.



$Tap

Integer

This parameter specifies which TAP to use during execution.



$Voltage

Integer

This parameter specifies the voltage level in tenth of a volt. Possible values are:

· 33

· 50



$Threshold

Integer

This parameter specifies the threshold voltage level in tenth of a volt. Value range is between 0 and 41.



$GenFile

String

This parameter specifies the general data file that is used for the flash programming action.



$AplFile

String

This parameter specifies the application data file that is used for the flash programming action.



$CnnFile

String

This parameter specifies the connection data file that is used for the flash programming action. This parameter is optional. You have to use it if the boundary scan test developer has used a CON file during development.



$ImageFileType

String

This parameter specifies the type of the image data file to program. Possible values are:

· "BIN"

· "HEX"

· "SREC"



$ImageFile

String

This parameter specifies the the image data file to program.



$ImageStartRange

Integer

This parameter specifies the start address of the specified image data file.



$ImageProgramRange

Integer

This parameter specifies the number of bytes of the image data file that are programmed into the device.



$ExecuteFrequency

Integer

This parameter specifies the scan frequency in kHz.



$InfoVisible

Boolean

With this parameter on true, you will receive a lot of execution information on this function. With this parameter on false, there is no screen output.



$ErrorLogDirectory

String

The error directory. This is the place where all the error files will be logged of a failed program action.



$LogFile

String

The error filename.





Return Parameters



Parameter

Variable Type

Description





Example(s):

JT37X7_RunFlash("37x7","PCI0",1,33,15,"C:\\_bart_\\IBO2\\7203.gen","C:\\_bart_\\IBO2\\7203_Wr_multi(EEPROM_ST_M24C64).apl","","BIN","C:\\_bart_\\ibo2.bin",0,10,4000,$RvmLogDirectory,"bart","false");





JT37X7_RunJpf

Previous Top Next



* * *



JT37X7_RunJpf



Usage:

JT37X7_RunJpf($JtagController, $Tap, $Voltage, $ThresholdVoltage, $Parameters, $SerialNumber, $InfoVisible);



Description:

This function requires at least the JTAG software CD7 to be installed on the system.

This function programs PLD devices using JPF files. JPF files describe PLD programming actions in the JTAG Programming Format and have been compiled from PRG, GEN, (optionally) CON and SVF (serial vector format) files.



Remarks:

· This function is tested with a JTAG PCI-3707 card.

· When there occurs an error during the execution of the low level JTAG functions, JabilTest while fail and return the error message.

· The function will verify if the given parameter exists, otherwise JabilTest fails and returns the error message.



Result:

JT37X7_RunJpf($JtagController, $Tap, $Voltage, $ThresholdVoltage, $Parameters, $SerialNumber, $InfoVisible);

Function arguments



Parameter

Variable Type

Description



$JtagController

String

This parameter is a string that specifies the interface used in your system.



$Tap

Integer

This parameter specifies the TAP number you want to use to program the PLD.



$Voltage

Integer

This parameter specifies the output voltage level in tenths of a volt for the TAP and the I/O output pins on the selected TAPPOD. Supported are all values between 15 and 36.



$ThresholdVoltage

Integer

This parameter specifies the threshold level in tenths of a volt for the TAP and the I/O input pins on the selected TAP. Supported are all values between 0 and 41.



$Parameters

Array

This parameter contains all the programming options available for the user to set.

The user has to create an array in the script and has to fill that array with the correct information as described here:

· Array[0, 0]: the path and file name of the JPF file

· Array[0, 1]: the frequency (kHz) used during programming execution. The frequency will be changed if a command in JPF file defines a frequency lower than this value. When this parameter is 0, the frequency value is not changed by JPF file execution.

· Array[0, 2]: 23 bit operation definition. The user has to use the hex value for this parameter. (without 0x prefix) If this value is 0, the compiler operations are used. Next bits supported by JPF compilers, operations executed in defined order:

1. JPF_USERCODE = 0x01 : this programming instruction reads the user code which has been entered in the selected PLD.

2. JPF_READBACK = 0x02 : this programming instruction will enable the contents of the selected PLD to be read. The return data is saved in the file specified in the elementj Array[0, 5]

3. JPF_ERASE = 0x04 : this programming instruction erases the contents of the selected PLD.

4. JPF_BLANK_CHECK = 0x08 : this programming instruction verifies whether the device has been erased completely.

5. JPF_PROGRAM = 0x10 : this programming instruction downloads the programming code into the selected PLD.

6. JPF_VERIFY = 0x20 : this programming instruction compares the contents of the selected PLD against the contents of the input file with the programming code.

7. JPF_SECURITY = 0x40 : this programming instruction sets the security fuses. Security fuses are commonly used mechanisms in PLDs to disable, for instance, the possibility of reading back the input program pattern into a part.

8. IMPORTANT: The programming operation you specify must have been manually marked in the input SVF file as follows //!ACTION <action_type> (example. //!ACTION PROGRAM). If no action statements were entered, the compiled SVF file will be executed completely, irrespective of the programming operations you select.

· Array[0, 3] : this parameter contains the programming flags:

1. JPF_USE_GANGING = 0x10

· Array[0, 4] : This parameter is an ordered list of tester taps to be used. Multiple target boards can be programmed simultaneously, depending on the number of TAPs for one target.

· Array[0, 5] : This parameter is a string containing the path and file name of the result file.This file contains a log with information about the result of the test expressed in terms of TAPs and Bscan cells.



$SerialNumber

String

This parameter is a string containing the serial identity of the active target board.



$InfoVisible

Boolean

This parameter enables the program to write extra information to the screen.





Return parameters



Parameter

Variable Type

Description





Example(s):





$Parameters = ArrayCreate("String", 1, 10);

ArraySetValue($Parameters, 0, 0, "C:\\boards\\ss\\sony_119\\jabil.jpf");

ArraySetValue($Parameters, 0, 1, "800");

ArraySetValue($Parameters, 0, 2, "0");

ArraySetValue($Parameters, 0, 3, "0");

ArraySetValue($Parameters, 0, 4, "0");

ArraySetValue($Parameters, 0, 5, "jabil.err");

JT37X7_RunJpf("pci0", 1, 33, 15, $Parameters, $SerialNumber, "true");





$Parameters = ArrayCreate("String", 1, 10);

ArraySetValue($Parameters, 0, 0, "C:\\boards\\ss\\sony_119\\jabil.jpf");

ArraySetValue($Parameters, 0, 1, "800");

ArraySetValue($Parameters, 0, 2, "0");

ArraySetValue($Parameters, 0, 3, "0");

ArraySetValue($Parameters, 0, 4, "0");

ArraySetValue($Parameters, 0, 5, "jabil.err");

JT37X7_RunJpf("pci0", 1, 33, 15, $Parameters, "123456", "true");





JT37X7_RunTest

Previous Top Next



* * *



JT37X7_RunTest

Usage:

JT37X7_RunTest($Handle, $BstDirectory, $ActionName, $TestFrequency, $RvmLogDirectory, $RvmLogFormat, $InfoVisible);



Description:

This function requires JTAG technologies drivers to be installed on the system.

This function executes a BSX file (generated with the JTAG technologies software). If the test fails, there will be created an error file (RVM file). The JT37x7 controller while be closed after a failure.

Remarks:

This function is tested with a JT3707/PCI device.

Result:

JT37X7_RunTest($Handle, $BstDirectory, $ActionName, $TestFrequency, $RvmLogDirectory, $RvmLogFile, $InfoVisible);

Function Arguments



Parameter

Variable Type

Description



$Handle

Object

Instrument handle created with JT37x7_Initialize.



$BstDirectory

String

The boundary scan file directory.



$ActionName

String

The boundary scan file to execute (BSX file).



$TestFrequency

Integer

The boundary scan test frequency (in kHz). When you enter 0, the test will use the frequency from the BSX file. During boundary scan test generation, the developer can apply a frequency that is saved into the BSX file.



$RvmLogDirectory

String

The RVM directory. This is the place where all the error files will be logged of a failed test.



$RvmLogFile

String

The RVM filename.



$InfoVisible

Boolean

With this parameter on true, you will receive a lot of execution information on this function. With this parameter on false, there is no screen output.





Return Parameters



Parameter

Variable Type

Description





Example(s):

JT37X7_RunTest($Handle, "C:\\_bart_\\IBO2", "capture", 1000, "C:\\rvm", "error", "false"); Another way of using this function:



$BstDirectory = New("String","C:\\_bart_\\IBO2");

$RvmLogDirectory = New("String","C:\\RVM");

($month,$day,$year,$hour,$minutes,$seconds,$dayname) = SystemTime();

...

$ActionName = New("String","capture");

call RunBstTest();

...

function RunBstTest()

{

$RvmLogFormat = StringCat($SerialNumber, "_");

$RvmLogFormat = StringCat($RvmLogFormat, $ActionName);

$RvmLogFormat = StringCat($RvmLogFormat, "_");

$RvmLogFormat = StringCat($RvmLogFormat, $day);

$RvmLogFormat = StringCat($RvmLogFormat, "-");

$RvmLogFormat = StringCat($RvmLogFormat, $month);

$RvmLogFormat = StringCat($RvmLogFormat, "-");

$RvmLogFormat = StringCat($RvmLogFormat, $year);

JT37X7_RunTest($Handle, $BstDirectory,$ActionName, 1000,$RvmLogDirectory,$RvmLogFormat,"false");

return;

}





JT37X7_RunTest2

Previous Top Next



* * *



JT37x7_RunTest2

Usage:

JT37X7_RunTest2($Handle, $BstDirectory, $ActionName, $TestFrequency, $RvmLogDirectory, $RvmLogFormat, $InfoVisible);

Description:

This function requires JTAG technologies drivers to be installed on the system.

This function executes a BSX file (generated with the JTAG technologies software).

Remarks:

This function is tested with a JT3707/PCI device.

Result:

JT37X7_RunTest2($Handle, $BstDirectory, $ActionName, $TestFrequency, $RvmLogDirectory, $RvmLogFile, $InfoVisible);

Function Arguments



Parameter

Variable Type

Description



$Handle

Object

Instrument handle created with JT37x7_Initialize.



$BstDirectory

String

The boundary scan file directory.



$ActionName

String

The boundary scan file to execute (BSX file).



$TestFrequency

Integer

The boundary scan test frequency (in kHz). When you enter 0, the test will use the frequency from the BSX file. During boundary scan test generation, the developer can apply a frequency that is saved into the BSX file.



$RvmLogDirectory

String

The RVM directory. This is the place where all the error files will be logged of a failed test.



$RvmLogFile

String

The RVM filename.



$InfoVisible

Boolean

With this parameter on true, you will receive a lot of execution information on this function. With this parameter on false, there is no screen output.





Return Parameters



Parameter

Variable Type

Description





Example(s):

JT37X7_RunTest2($Handle, "C:\\_bart_\\IBO2", "capture", 1000, "C:\\rvm", "error", "false"); Another way of using this function:



$BstDirectory = New("String","C:\\_bart_\\IBO2");

$RvmLogDirectory = New("String","C:\\RVM");

($month,$day,$year,$hour,$minutes,$seconds,$dayname) = SystemTime();

...

$ActionName = New("String","capture");

call RunBstTest();

...

function RunBstTest()

{

$RvmLogFormat = StringCat($SerialNumber, "_");

$RvmLogFormat = StringCat($RvmLogFormat, $ActionName);

$RvmLogFormat = StringCat($RvmLogFormat, "_");

$RvmLogFormat = StringCat($RvmLogFormat, $day);

$RvmLogFormat = StringCat($RvmLogFormat, "-");

$RvmLogFormat = StringCat($RvmLogFormat, $month);

$RvmLogFormat = StringCat($RvmLogFormat, "-");

$RvmLogFormat = StringCat($RvmLogFormat, $year);

JT37X7_RunTest2($Handle, $BstDirectory,$ActionName, 1000,$RvmLogDirectory,$RvmLogFormat,"false");

return;

}





JT37X7_RunTestBool

Previous Top Next



* * *



JT37x7_RunTestBool

Usage:

$BoolValue = JT37X7_RunTestBool($Handle, $BstDirectory, $ActionName, $TestFrequency, $RvmLogDirectory, $RvmLogFormat, $InfoVisible);

Description:

This function requires JTAG technologies drivers to be installed on the system.

This function executes a BSX file (generated with the JTAG technologies software).

Remarks:

This function is tested with a JT3707/PCI device.

Result:

$BoolValue = JT37X7_RunTestBool($Handle, $BstDirectory, $ActionName, $TestFrequency, $RvmLogDirectory, $RvmLogFile, $InfoVisible);

Function Arguments



Parameter

Variable Type

Description



$Handle

Object

Instrument handle created with JT37x7_Initialize.



$BstDirectory

String

The boundary scan file directory.



$ActionName

String

The boundary scan file to execute (BSX file).



$TestFrequency

Integer

The boundary scan test frequency (in kHz). When you enter 0, the test will use the frequency from the BSX file. During boundary scan test generation, the developer can apply a frequency that is saved into the BSX file.



$RvmLogDirectory

String

The RVM directory. This is the place where all the error files will be logged of a failed test.



$RvmLogFile

String

The RVM filename.



$InfoVisible

Boolean

With this parameter on true, you will receive a lot of execution information on this function. With this parameter on false, there is no screen output.





Return Parameters



Parameter

Variable Type

Description



$BoolValue

Boolean

True: Test passed.

False: Test failed.





Example(s):

$BoolValue = JT37X7_RunTestBool($Handle, "C:\\_bart_\\IBO2", "capture", 1000, "C:\\rvm", "error", "false");





FEASA_Acquire

Previous Top Next



* * *



FEASA_Acquire

Usage:

FEASA_Acquire($comPort);

Description:

Issues the FEASA Acquire command to sample all LED Sensors for the color and intensity values. The first parameter to this functon is a SerialPort object which first must be created by using the SerialOpen function. The SerialOpen function should be passed the parameters (57600,8,"N",1) for communication with the FEASA LED Analyzer. After issuing the FEASA_Acquire command, all the LED measurements for each specific port can be read back using the FEASA_Query command. If the unit returns a successful response, a PASS result is generated, otherwise a FAIL result is returned from this function.

For more information about the FEASA LED Analyzer, consult their website at http://www.feasa.ie/.

Function Arguments



Parameter

Variable Type

Description



$comPort

Object

An instance of the SerialPort object to be used for communicating with the FEASA LED Analyzer





Return Parameters



Parameter

Variable Type

Description



None





FEASA.Query

Previous Top Next



* * *



FEASA_Query

Usage:

($RedValue,$BlueValue,$Greenvalue,$IntensityValue) = FEASA_Query($comPort,$LEDSensor);

Description:

Issues the FEASA Query command to to return the values measured for a particular LED sensor. Before using the FEASA_Query command, you first must issue the FEASA.Acquire command to sample all the LED data into the units buffer. In the event of a succesful query operation, a PASS result is returned from the function, otherwise a FAIL result is returned. After sampling all the LED values, they can be independently evaluated by using the NumericLimitTest function.

For more information about the FEASA LED Analyzer, consult their website at http://www.feasa.ie/.

Function Arguments



Parameter

Variable Type

Description



$comPort

Object

An instance of the SerialPort object to be used for communicating with the FEASA LED Analyzer



$LEDSensor

Integer

The LED Sensor to query for parametric measurement. Valid values are 1-20.





Return Parameters



Parameter

Variable Type

Description



$RedValue

Integer

The 8-bit value representing the RED component of the LED measurement.



$BlueValue

Integer

The 8-bit value representing the BLUE component of the LED measurement.



$GreenValue

Integer

The 8-bit value representing the GREEN component of the LED measurement.



$Intensity

Integer

The 16-bit value representing the Intensity of the LED measurement.





MDA_GetLowLimitDbl

Previous Top Next



* * *





Usage:

$TestLoLimit = Mda_GetLowLimitDbl($MdaCurrentStep);

Description:

This function uses the Checksum TR10 EMS software.

This function returns data from the MDA test results.

Note: This function requires the installation of version 6.0 or greater of the National Instruments CVI run-time to function correctly.

Function Arguments



Parameter

Variable Type

Description



$MdaCurrentStep

Integer

The test step number to index to.





Return Parameters



Parameter

Variable Type

Description



$TestLoLimit

Double

The low limit of the indexed test step.





Mda_ExeVisemsToTest

Previous Top Next



* * *



Usage:

Mda_ExeVisemsToTest($MdaExecutable, $MdaProgramFile, $MdaTestWindow, WaitStartTime);

Description:

This function uses the Checksum TR10 EMS software.

This function returns data from the MDA test results.

Note: This function requires the installation of version 6.0 or greater of the National Instruments CVI run-time to function correctly.

Function Arguments



Parameter

Variable Type

Description



$MdaExecutable

String

The complete path with executable name of checksum executable. (i.e. "c:\\checksum\visems.exe" )



$MdaProgramFile

String

The test program spec file. (i.e. "Y86801-307-A.spec" )



$MdaTestWindow

Boolean

Determine if the MDA test program will be brought to the front.



$WaitStartTime

Integer

Waiting time before launching executable.





Return Parameters



Parameter

Variable Type

Description



None





Mda_GetAllTestSteps

Previous Top Next



* * *



Usage:

$MdaTestSteps = Mda_GetAllTestSteps();

Description:

This function uses the Checksum TR10 EMS software.

This function returns data from the MDA test results.

Note: This function requires the installation of version 6.0 or greater of the National Instruments CVI run-time to function correctly.

Function Arguments



Parameter

Variable Type

Description



None





Return Parameters



Parameter

Variable Type

Description



$MdaTestSteps

Integer

The total number of test steps ran





Mda_GetHighLimitDbl

Previous Top Next



* * *



Usage:

$TestHiLimit = Mda_GetHighLimitDbl($MdaCurrentStep);

Description:

This function uses the Checksum TR10 EMS software.

This function returns data from the MDA test results.

Note: This function requires the installation of version 6.0 or greater of the National Instruments CVI run-time to function correctly.

Function Arguments



Parameter

Variable Type

Description



$MdaCurrentStep

Integer

The test step number to index to.





Return Parameters



Parameter

Variable Type

Description



$TestHiLimit

Double

The hi limit of the indexed test step.





Mda_GetHighLimitStr

Previous Top Next



* * *



Usage:

$TestHiLimit = Mda_GetHighLimitStr($MdaCurrentStep);

Description:

This function uses the Checksum TR10 EMS software.

This function returns data from the MDA test results.

Note: This function requires the installation of version 6.0 or greater of the National Instruments CVI run-time to function correctly.

Function Arguments



Parameter

Variable Type

Description



$MdaCurrentStep

Integer

The test step number to index to.





Return Parameters



Parameter

Variable Type

Description



$TestHiLimit

String

The hi limit of the indexed test step.





Mda_GetLowLimitStr

Previous Top Next



* * *



Usage:

$TestLoLimit = Mda_GetLowLimitStr($MdaCurrentStep);

Description:

This function uses the Checksum TR10 EMS software.

This function returns data from the MDA test results.

Note: This function requires the installation of version 6.0 or greater of the National Instruments CVI run-time to function correctly.

Function Arguments



Parameter

Variable Type

Description



$MdaCurrentStep

Integer

The test step number to index to.





Return Parameters



Parameter

Variable Type

Description



$TestLoLimit

String

The low limit of the indexed test step.





Mda_GetMeasuredValueDbl

Previous Top Next



* * *



Usage:

$TestValue = Mda_GetMeasuredValueDbl($MdaCurrentStep);

Description:

This function uses the Checksum TR10 EMS software.

This function returns data from the MDA test results.

Note: This function requires the installation of version 6.0 or greater of the National Instruments CVI run-time to function correctly.

Function Arguments



Parameter

Variable Type

Description



$MdaCurrentStep

Integer

The test step number to index to.





Return Parameters



Parameter

Variable Type

Description



$TestValue

Double

The value measured from the indexed test step.





Mda_GetMeasuredValueStr

Previous Top Next



* * *



Usage:

$TestValue = Mda_GetMeasuredValueStr($MdaCurrentStep);

Description:

This function uses the Checksum TR10 EMS software.

This function returns data from the MDA test results.

Note: This function requires the installation of version 6.0 or greater of the National Instruments CVI run-time to function correctly.

Function Arguments



Parameter

Variable Type

Description



$MdaCurrentStep

Integer

The test step number to index to.





Return Parameters



Parameter

Variable Type

Description



$TestValue

String

The value measured of the indexed test step.





Mda_GetPassFailFlag

Previous Top Next



* * *



Usage:

$PassFlag = Mda_GetPassFailFlag($MdaCurrentStep);

Description:

This function uses the Checksum TR10 EMS software.

This function returns data from the MDA test results.

Note: This function requires the installation of version 6.0 or greater of the National Instruments CVI run-time to function correctly.

Function Arguments



Parameter

Variable Type

Description



$MdaCurrentStep

Integer

The test step number to index to.





Return Parameters



Parameter

Variable Type

Description



$PassFlag

Boolean

The test result of the indexed test step.





Mda_GetTestTitleStr

Previous Top Next



* * *



Usage:

$TestName = Mda_GetTestTitleStr($MdaCurrentStep);

Description:

This function uses the Checksum TR10 EMS software.

This function returns data from the MDA test results.

Note: This function requires the installation of version 6.0 or greater of the National Instruments CVI run-time to function correctly.

Function Arguments



Parameter

Variable Type

Description



$MdaCurrentStep

Integer

The test step number to index to.





Return Parameters



Parameter

Variable Type

Description



$TestName

String

The test label of the indexed test step.





Mda_MdaTestComplete

Previous Top Next



* * *



Usage:

$MdaComplete = Mda_MdaTestComplete($MdaProgramFile);

Description:

This function uses the Checksum TR10 EMS software.

This function returns data from the MDA test results.

Note: This function requires the installation of version 6.0 or greater of the National Instruments CVI run-time to function correctly.

Function Arguments



Parameter

Variable Type

Description



$MdaProgramFile

String

The test program spec file. (i.e. "Y86801-307-A.spec" )





Return Parameters



Parameter

Variable Type

Description



$MdaComplete

Boolean

Status has testing completed.





AgNA_Abort

Previous Top Next



* * *



AgNA_Abort



Usage:

AgNA_Abort($AgNA_Handle);



Description:

This function requires Agilent network analyzer IVI drivers to be installed on the system.

Aborts all sweeps on all channels.



Result:

AgNA_Abort($AgNA_Handle);

Function arguments



Parameter

Variable Type

Description



$AgNA_Handle

object

The object representing the instance of the Agilent network analyzer.





Return parameters



Parameter

Variable Type

Description





Example(s):

AgNA_Abort($AgNA_Handle);





AgNA_Cal_CollectData

Previous Top Next



* * *



AgNA_Cal_CollectData



Usage:

AgNA_Cal_CollectData($AgNA_Handle, $channelNum, $measurementType, $responsePort, $stimulusPort);





Description:

Performs a calibration measurement. OPEN, SHORT, and LOAD measurements are one port cals and the stimulus and response ports are the same. Use the AgNA_Cal_SetMethod() function to select a calibration type before performing these measurements.





Equivalent SCPI commands

:SENSe{[1]|2|3|4}:CORRection:COLLect[:ACQuire]:{OPEN|SHORt|THRU|LOAD|ISOLation} <numeric 1>[,<numeric2>]



Function Arguments



Parameter

Variable Type

Description



$AgNA_Handle

Object

Handle to instrument created with the AgNA_Init() function.



$channelNum

Integer

Channel to calibrate.



$measurementType

String

Calibration measurement type:

OPEN

SHORT

THRU

LOAD

ISOLATION



$responsePort

Integer

Response port (e.g., S[2]1, the response on port 2 due to a stimulus on port 1)



$stimulusPort

Integer

Stimulus port (e.g., S2[1], port 1 stimulates a response on port 2)





Return Parameters



Parameter

Variably Type

Description



None

--





Example:

//perform measurements for OPEN & THRU cal types

OperatorPrompt("Connect SHORT standard to port 1.", "OK");

AgNA_Cal_CollectData($AgNA_Handle,1, "SHORT", 1, 1);

AgNA_WaitForOperationComplete($AgNA_Handle, 3000);

OperatorPrompt("Connect THRU standard between ports 1 and 2.", "OK");

AgNA_Cal_CollectData($AgNA_Handle,1, "THRU", 2, 1);

AgNA_WaitForOperationComplete($AgNA_Handle, 3000);





AgNA_Cal_Save

Previous Top Next



* * *



AgNA_Cal_Save



Usage:

AgNA_Cal_Save($AgNA_Handle, $channelNum);





Description:

From the measured calibration data, calculates and saves the calibration coefficients depending on the selected calibration type.





Equivalent SCPI commands

:SENSe{[1]|2|3|4}:CORRection:COLLect:SAVE



Function Arguments



Parameter

Variable Type

Description



$AgNA_Handle

Object

Handle to instrument created with the AgNA_Init() function.



$channelNum

Integer

Channel to save calibration data to.





Return Parameters



Parameter

Variably Type

Description



None

--





Example:

//calculate and store cal coefficients to channel 1

AgNA_Cal_Save($AgNA_Handle,1);

AgNA_WaitForOperationComplete($AgNA_Handle, 3000);





AgNA_Cal_SetCalKit

Previous Top Next



* * *



AgNA_Cal_SetCalKit



Usage:

AgNA_Cal_SetCalKit($AgNA_Handle, $channelNum, $calkitNum);





Description:

Set the cal kit to use for calibration measurements. Each instrument will have a different set of cal kits programmed into it. You can add custom cal kit definitions, or load new ones using the disk provided with the cal kit.





Equivalent SCPI commands

:SENSe{[1]|2|3|4}:CORRection:COLLect:CKIT[:SELect] <numeric>



Function Arguments



Parameter

Variable Type

Description



$AgNA_Handle

Object

Handle to instrument created with the AgNA_Init() function.



$channelNum

Integer

Channel to save calibration data to.



$calkitNum

Integer

# of cal kit to use (#1 starts at top, goes down list to #10). Check the cal kit menu on the instrument to see the names of the cal kits.





Return Parameters



Parameter

Variably Type

Description



None

--





Example:

//set cal kit for channel 1 to first kit in list

AgNA_Cal_SetCalKit($E5062A,1, 1);





AgNA_Cal_SetMethod

Previous Top Next



* * *



AgNA_Cal_SetMethod



Usage:

AgNA_Cal_SetMethod($AgNA_Handle, $channelNum, $methodType, $responsePort, $stimulusPort);





Description:

Selects the calibration type. This will affect how the calibration coefficients are calculated, as well as which measurements using the AgNA_Cal_CollectData() function are necessary for a complete cal. SOLT1, OPEN, and SHORT methods use the same stimulus and response ports.





Equivalent SCPI commands

:SENSe{[1]|2|3|4}:CORRection:COLLect:METHod:{SOLT1|SOLT2|OPEN|SHORT|THRU|ERES} <numeric 1>[,<numeric 2>]



Function Arguments



Parameter

Variable Type

Description



$AgNA_Handle

Object

Handle to instrument created with the AgNA_Init() function.



$channelNum

Integer

Channel to calibrate.



$methodType

String

Calibration method:

SOLT1 – 1 port reflect (short-open-load)

SOLT2 – 2 port full (short-open-load-thru)

OPEN – 1 port open response

SHORT – 1 port short response

THRU – 2 port thru response

ERES – enhanced response



$responsePort

Integer

Response port (e.g., S[2]1, the response on port 2 due to a stimulus on port 1)



$stimulusPort

Integer

Stimulus port (e.g., S2[1], port 1 stimulates a response on port 2)





Return Parameters



Parameter

Variably Type

Description



None

--





Example:

UpdateStatus("\nCalibrating out cables for 1-stimulus port NA setup (S21 response on CH1)");

AgNA_Cal_SetCalKit($E5062A, 1, 1); //set cal kit

AgNA_Cal_SetMethod($E5062A, 1, "ERES", 2, 1); //select calibration method





//perform measurements for selected cal type - OPEN, SHORT, THRU, LOAD

$timeout = 3000;

OperatorPrompt("Connect SHORT standard to port 1.", "OK");

AgNA_Cal_CollectData($AgNA_Handle, 1, "SHORT", 1, 1);

AgNA_WaitForOperationComplete($AgNA_Handle, $timeout);

OperatorPrompt("Connect OPEN standard to port 1.", "OK");

AgNA_Cal_CollectData($AgNA_Handle, 1, "OPEN", 1, 1);

AgNA_WaitForOperationComplete($AgNA_Handle, $timeout);

OperatorPrompt("Connect LOAD standard to port 1.", "OK");

AgNA_Cal_CollectData($AgNA_Handle, 1, "LOAD", 1, 1);

AgNA_WaitForOperationComplete($AgNA_Handle, $timeout);

OperatorPrompt("Connect thru standard between port 2 and port 1.", "OK");

AgNA_Cal_CollectData($AgNA_Handle, 1, "THRU", 2, 1);

AgNA_WaitForOperationComplete($AgNA_Handle, $timeout);



//calculate and store cal coefficients

AgNA_Cal_Save($AgNA_Handle, 1);

AgNA_WaitForOperationComplete($AgNA_Handle, $timeout);



//save the cal state into slot 2

$state02 = "STATE02.STA";

AgNA_SaveState($AgNA_Handle, $state02);

AgNA_WaitForOperationComplete($AgNA_Handle, $timeout);



OperatorPrompt("Calibration cables have been calibrated out. Calibration data stored in State #2.","OK");





AgNA_Chan_GetChannelName

Previous Top Next



* * *



AgNA_Chan_GetChannelName



Usage:

AgNA_Chan_GerChannelName($AgNA_Handle, $channelNum);





Description:

Returns the name of the specified channel number. Channel names are used by several functions to reference the channel.





Function Arguments



Parameter

Variable Type

Description



$AgNA_Handle

Object

Handle to instrument created with the AgNA_Init() function.



$channelNum

Integer

Channel to retrieve name of.





Return Parameters



Parameter

Variably Type

Description



$channelName

String

Name of channel.





Example:

//get NetAn’s internal name for channel #1

$Channel1 = AgNA_Chan_GetChannelName($AgNA_Handle, 1);





AgNA_Chan_Meas_Create

Previous Top Next



* * *



AgNA_Chan_Meas_Create



Usage:

AgNA_Chan_Meas_Create($AgNA_Handle,$ChannelName,$MeasurementName,$ReceiverPort,$SourcePort);



Description:

This function requires Agilent network analyzer IVI drivers to be installed on the system.

This function creates a new measurement with specified Source and Receiver port values.



Result:

AgNA_Chan_Meas_Create($AgNA_Handle,$ChannelName,$MeasurementName,$ReceiverPort,$SourcePort);

Function arguments



Parameter

Variable Type

Description



$AgNA_Handle

object

The object representing the instance of the Agilent network analyzer.



$ChannelName

string

The name of the channel.



$MeasurementName

string

The name of the measurement.



$ReceiverPort

integer

The instrument receiver port value.



$SourcePort

integer

The instrument source port value.





Return parameters



Parameter

Variable Type

Description





Example(s):

// This example creates an S21 measurement.

AgNA_Chan_Meas_Create($AgNA_Handle,"Channel1","Measurement1",2,1);





AgNA_Chan_Meas_Delete

Previous Top Next



* * *



AgNA_Chan_Meas_Delete



Usage:

AgNA_Chan_Meas_Delete($AgNA_Handle, $channelName, $measurementName);



Description:

This function deletes a measurement for the specified channel.





Remarks:

This function requires Agilent Network Analyzer IVI drivers to be installed on the system.



Function arguments



Parameter

Variable Type

Description



$AgNA_Handle

Object

The object representing the instance of the Agilent Network Analyzer.



$channelName

String

The name of the channel.



$measurementName

String

The name of the measurement.





Return parameters



Parameter

Variable Type

Description



None





Example:





// Delete one measurement.

$channel = "Channel1";

$measName = "Measurement1";



AgNA_Chan_Meas_Delete($agHandle, $channel, $measName);





AgNA_Chan_Meas_GetTraceName

Previous Top Next



* * *



AgNA_Chan_Meas_GetTraceName



Usage:

AgNA_Chan_Meas_GetTraceName($AgNA_Handle, $channelNum,$traceNum);





Description:

Returns the name of the specified trace (measurement) number. Trace names are used by several functions to reference the trace.



Function Arguments



Parameter

Variable Type

Description



$AgNA_Handle

Object

Handle to instrument created with the AgNA_Init() function.



$channelNum

Integer

Channel #.



$traceNum

Integer

Trace #.





Return Parameters



Parameter

Variably Type

Description



$traceName

String

Name of trace.





Example:

//get NetAn’s internal name for trace #1 of channel #1

$Trace1 = AgNA_Chan_Meas_GetTraceName($AgNA_Handle, 1, 1);





AgNA_Chan_Meas_Marker_Activate

Previous Top Next



* * *



AgNA_Chan_Meas_Marker_Activate



Usage:

AgNA_Chan_Meas_Marker_Activate($AgNA_Handle,$ChannelName,$MeasurementName,$MarkerName);



Description:

This function requires Agilent network analyzer IVI drivers to be installed on the system.

This function activates the selected marker of the measurement on a channel.



Result:

AgNA_Chan_Meas_Marker_Activate($AgNA_Handle,$ChannelName,$MeasurementName,$MarkerName);

Function arguments



Parameter

Variable Type

Description



$AgNA_Handle

object

The object representing the instance of the Agilent network analyzer.



$ChannelName

string

The name of the channel where you want to activate the marker.



$MeasurementName

string

The name of the measurement where you want to activate the marker.



$MarkerName

string

The name of the marker to activate.





Return parameters



Parameter

Variable Type

Description





Example(s):

AgNA_Chan_Meas_Marker_Activate($AgNA_Handle,"Channel1","Measurement1","Marker1");





AgNA_Chan_Meas_Marker_GetProperty

Previous Top Next



* * *



AgNA_Chan_Meas_Marker_GetProperty



Usage:

$PropertyValue = AgNA_Chan_Meas_Marker_GetProperty($AgNA_Handle,$ChannelName,$MeasurementName,$MarkerName,$Property);



Description:

This function requires Agilent network analyzer IVI drivers to be installed on the system.

This function sets a selected property of a channel measurement marker to the provided value.



Result:

$PropertyValue = AgNA_Chan_Meas_Marker_GetProperty($AgNA_Handle,$ChannelName,$MeasurementName,$MarkerName,$Property);

Function arguments



Parameter

Variable Type

Description



$AgNA_Handle

object

The object representing the instance of the Agilent network analyzer.



$ChannelName

string

The name of the channel.



$MeasurementName

string

The name of the measurement.



$MarkerName

string

The name of the marker.



$Property

string

The marker property you want to get the value.

Valid values:

· BANDWIDTH_THRESHOLD (double)

· ENABLED (boolean)

· PEAK_EXCURSION (double)

· STIMULUS (double)

· TARGET_VALUE (double)

· TRACK_ENABLED (boolean)





Return parameters



Parameter

Variable Type

Description



$PropertyValue

object

The value of the property.





Example(s):

$PropertyValue = AgNA_Chan_Meas_Marker_SetProperty($AgNAObj,"Channel1","Measurement1","Marker1","enabled");





AgNA_Chan_Meas_QueryValue

Previous Top Next



* * *



AgNA_Chan_Meas_Marker_QueryValue



Usage:

($RealValue,$ImaginaryValue) = AgNA_Chan_Meas_Marker_QueryValue($AgNA_Handle,$ChannelName,$MeasurementName,$MarkerName);



Description:

This function requires Agilent network analyzer IVI drivers to be installed on the system.

This function queries the marker position value and returns the real dB value.



Result:

($RealValue,$ImaginaryValue) = AgNA_Chan_Meas_Marker_QueryValue($AgNA_Handle,$ChannelName,$MeasurementName,$MarkerName);

Function arguments



Parameter

Variable Type

Description



$AgNA_Handle

object

The object representing the instance of the Agilent network analyzer.



$ChannelName

string

The name of the channel.



$MeasurementName

string

The name of the measurement.



$MarkerName

string

The name of the marker.





Return parameters



Parameter

Variable Type

Description



$RealValue

float

Real data part.



$ImaginaryValue

float

Imaginary data part.





Example(s):

($RealValue,$ImaginaryValue) = AgNA_Chan_Meas_Marker_QueryValue($AgNA_Handle,"Channel1","Measurement1","Marker1");





AgNA_Chan_Meas_Marker_Search

Previous Top Next



* * *



AgNA_Chan_Meas_Marker_Search



Usage:

AgNA_Chan_Meas_Marker_Search($AgNA_Handle,$ChannelName,$MeasurementName,$MarkerName,$MarkerSearchType);



Description:

This function requires Agilent network analyzer IVI drivers to be installed on the system.

This function moves the marker to the maximum,minimum,.... value of that measurement.



Result:

AgNA_Chan_Meas_Marker_Search($AgNA_Handle,$ChannelName,$MeasurementName,$MarkerName,$MarkerSearchType);

Function arguments



Parameter

Variable Type

Description



$AgNA_Handle

object

The object representing the instance of the Agilent network analyzer.



$ChannelName

string

The name of the channel.



$MeasurementName

string

The name of the measurement.



$MarkerName

string

The name of the marker.



$MarkerSearchType

string

The marker search type.

Valid values:

· MINIMUM

· MAXIMUM

· PEAK

· PEAK_LEFT

· PEAK_RIGHT

· TARGET

· TARGET_LEFT

· TARGET_RIGHT





Return parameters



Parameter

Variable Type

Description





Example(s):

AgNA_Chan_Meas_Marker_Search($AgNA_Handle,"Channel1","Measurement1","Marker1","MINIMUM");





AgNA_Chan_Meas_Marker_SetProperty

Previous Top Next



* * *



AgNA_Chan_Meas_Marker_SetProperty



Usage:

AgNA_Chan_Meas_Marker_SetProperty($AgNA_Handle,$ChannelName,$MeasurementName,$MarkerName,$Property,$PropertyValue);



Description:

This function requires Agilent network analyzer IVI drivers to be installed on the system.

This function sets a selected property of a channel measurement marker to the provided value.



Result:

AgNA_Chan_Meas_Marker_SetProperty($AgNA_Handle,$ChannelName,$MeasurementName,$MarkerName,$Property,$PropertyValue);

Function arguments



Parameter

Variable Type

Description



$AgNA_Handle

object

The object representing the instance of the Agilent network analyzer.



$ChannelName

string

The name of the channel.



$MeasurementName

string

The name of the measurement.



$MarkerName

string

The name of the marker.



$Property

string

The marker property you want to update.

Valid values:

· BANDWIDTH_THRESHOLD (double)

· ENABLED (boolean)

· PEAK_EXCURSION (double)

· STIMULUS (double)

· TARGET_VALUE (double)

· TRACK_ENABLED (boolean)



$PropertyValue

object

The property value for the corresponding property.





The property BANDWIDTH_THRESHOLD: This turns on and sets markers 1 through 4 to calculate filter bandwidth. The value sets the point below the maximum bandwidth peak that establishes the bandwidth of a filter. For example, if you want to determine the filter bandwidth 3 db below the bandpass peak value, set value to -3.0.

The property ENABLED: Turns the specified marker ON or OFF. Validate values are true or false.

The property PEAK_EXCURSION: Sets amplitude peak excursion for the specified marker. The Excursion value determines what is considered a 'peak'. This command applies to marker peak searches (Next peak, Peak Right, Peak Left).

The property STIMULUS: Sets the marker's X-axis value (frequency, power, or time).

The property TARGET_VALUE: Sets the target value for the specified marker when doing target searches.

The property TRACK_ENABLED: Sets the tracking capability for the specified marker. The tracking function finds the selected search function every sweep. Validate values are true or false.





Return parameters



Parameter

Variable Type

Description





Example(s):

AgNA_Chan_Meas_Marker_SetProperty($AgNAObj,"Channel1","Measurement1","Marker1","enabled",true);





AgNA_Chan_Meas_SetProperty

Previous Top Next



* * *



AgNA_Chan_Meas_SetProperty



Usage:

AgNA_Chan_Meas_SetProperty($AgNA_Handle,$ChannelName,$MeasurementName,$Property,$PropertyValue);



Description:

This function requires Agilent network analyzer IVI drivers to be installed on the system.

This function sets a selected property of a channel measurement to the provided value.



Result:

AgNA_Chan_Meas_SetProperty($AgNA_Handle,$ChannelName,$MeasurementName,$Property,$PropertyValue);

Function arguments



Parameter

Variable Type

Description



$AgNA_Handle

object

The object representing the instance of the Agilent network analyzer.



$ChannelName

string

The name of the channel.



$MeasurementName

string

The name of the measurement.



$Property

string

The channel measurement property you want to update.

Valid values:

· DISPLAY_FORMAT (string)

· SMOOTHING (boolean)

· SMOOTHING_APERTURE (double)

· TRACE_MATH (string)



$PropertyValue

object

The property value for the corresponding property.





The property DISPLAY_FORMAT: the display format for the measurement. Valid values: GROUP_DELAY, IMAG, LIN_MAG, LOG_MAG, PHASE, P_LINEAR, P_LOGARITHMIC, POLAR, P_PHASE, REAL, S_ADMITTANCE, S_COMPLEX, S_LINEAR, S_LOGARITHMIC, SMITH, SWR, U_PHASE

The property SMOOTHING: Enables/Disables smoothing on measurement. Valid values: true, false.

The property SMOOTHING_APERTURE: Sets the value of smooting aperture for the measurement.

The property TRACE_MATH: Sets the mathematical operation to be performed on the trace.





Return parameters



Parameter

Variable Type

Description





Example(s):

AgNA_Chan_Meas_SetProperty($AgNAObj,"Channel1","Measurement1","DISPLAY_FORMAT","LOG_MAG");





AgNA_Chan_Meas_Trace_AutoScale

Previous Top Next



* * *



AgNA_Chan_Meas_Trace_AutoScale



Usage:

AgNA_Chan_Meas_Trace_AutoScale($AgNA_Handle,$ChannelName,$MeasurementName);



Description:

This function requires Agilent network analyzer IVI drivers to be installed on the system.

This function performs an auto scale on the selected channel measurement.



Result:

AgNA_Chan_Meas_Trace_AutoScale($AgNA_Handle,$ChannelName,$MeasurementName);

Function arguments



Parameter

Variable Type

Description



$AgNA_Handle

object

The object representing the instance of the Agilent network analyzer.



$ChannelName

string

The name of the channel.



$MeasurementName

string

The name of the measurement.





Return parameters



Parameter

Variable Type

Description





Example(s):

AgNA_Chan_Meas_Trace_AutoScale($AgNA_Handle,"Channel1","Measurement1");





AgNA_Chan_Meas_Trace_SetProperty

Previous Top Next



* * *



AgNA_Chan_Meas_Trace_SetProperty



Usage:

AgNA_Chan_Meas_Trace_SetProperty($AgNA_Handle,$ChannelName,$MeasurementName,$Property,$PropertyValue);



Description:

This function requires Agilent network analyzer IVI drivers to be installed on the system.

This function sets a selected property of a channel measurement trace to the provided value.



Result:

AgNA_Chan_Meas_Trace_SetProperty($AgNA_Handle,$ChannelName,$MeasurementName,$Property,$PropertyValue);

Function arguments



Parameter

Variable Type

Description



$AgNA_Handle

object

The object representing the instance of the Agilent network analyzer.



$ChannelName

string

The name of the channel.



$MeasurementName

string

The name of the measurement.



$Property

string

The channel measurement trace property you want to update.

Valid values:

· REFERENCE_VALUE (double)

· REFERENCE_POSITION (double)

· Y_SCALE (double)



$PropertyValue

object

The property value for the corresponding property.





The property REFERENCE_VALUE: sets the reference value for the trace.

The property REFERENCE_POSITION: sets the reference position for the trace.

The property Y_SCALE: sets the Y scale for the trace.





Return parameters



Parameter

Variable Type

Description





Example(s):

AgNA_Chan_Meas_Trace_SetProperty($AgNAObj,"Channel1","Measurement1","REFERENCE_VALUE",-24.0);

AgNA_Chan_Meas_Trace_SetProperty($AgNAObj,"Channel1","Measurement1","REFERENCE_POSITION",5.0);

AgNA_Chan_Meas_Trace_SetProperty($AgNAObj,"Channel1","Measurement1","Y_SCALE",2.0);





AgNA_Chan_SetProperty

Previous Top Next



* * *



AgNA_Chan_SetProperty



Usage:

AgNA_Chan_SetProperty($AgNA_Handle,$ChannelName,$Property,$PropertyValue);



Description:

This function requires Agilent network analyzer IVI drivers to be installed on the system.

This function sets a selected property of a channel to the provided value.



Result:

AgNA_Chan_SetProperty($AgNA_Handle,$ChannelName,$Property,$PropertyValue);

Function arguments



Parameter

Variable Type

Description



$AgNA_Handle

object

The object representing the instance of the Agilent network analyzer.



$ChannelName

string

The name of the channel.



$Property

string

The channel property you want to update.

Valid values:

· AVERAGING (boolean)

· AVERAGING_FACTOR (integer)

· CORRECTION (boolean)

· CW_FREQUENCY (double)

· IF_BANDWIDTH (double)

· POINTS (integer)

· PORT_EXTENSION_STATUS (boolean)

· SWEEP_TIME (double)

· SWEEP_TIME_AUTO (boolean)

· SWEEP_TYPE (string)

· TRIGGER_MODE (string)



$PropertyValue

object

The property value for the corresponding property.





The property AVERAGING: this turns the trace averaging on or off.

The property AVERAGING_FACTOR: Sets the number of measurement sweeps to combine for an average.

The property CORRECTION: Sets the correction state for all measurements on the channel.

The property CW_FREQUENCY: Sets the Continuous Wave frequency.

The property IF_BANDWIDTH: Sets the bandwidth of the digital IF filter to be used in the measurement.

The property POINTS: Sets the number of data points for the measurement.

The property PORT_EXTENSION_STATUS: Turns port extensions ON or OFF.

The property SWEEP_TIME: Sets the time, the analyzer takes to complete one sweep.

The property SWEEP_TYPE: Sets the sweep type of channel. Valid values: CW_TIME, LIN_FREQUENCY, LOG_FREQUENCY, POWER, SEGMENT.

The property TRIGGER_MODE: Sets the trigger mode for the specified channel. Valid values: CONTINUOUS, HOLD.





Return parameters



Parameter

Variable Type

Description





Example(s):

AgNA_Chan_SetProperty($AgNAObj,"Channel1","DISPLAY_FORMAT","LOG_MAG");





AgNA_Chan_Stimulus_ConfigureCenterSpan

Previous Top Next



* * *



AgNA_Chan_Stimulus_ConfigureCenterSpan



Usage:

AgNA_Chan_Stimulus_ConfigureCenterSpan($AgNA_Handle,$ChannelName,$MeasurementName,$CenterValue,$SpanValue);



Description:

This function requires Agilent network analyzer IVI drivers to be installed on the system.

Sets the sweep range for the channel using center and span value of the frequencies.



Result:

AgNA_Chan_Stimulus_ConfigureCenterSpan($AgNA_Handle,$ChannelName,$MeasurementName,$CenterValue,$SpanValue);

Function arguments



Parameter

Variable Type

Description



$AgNA_Handle

object

The object representing the instance of the Agilent network analyzer.



$ChannelName

string

The name of the channel.



$MeasurementName

string

THIS ARGUMENT IS NOT NECESSARY FOR THIS FUNCTION. Use a blank or dummy value.



$CenterValue

double

The center frequency value of the sweep for the channel



$SpanValue

double

The span value of the sweep for the channel





Return parameters



Parameter

Variable Type

Description





Example(s):

AgNA_Chan_Stimulus_ConfigureCenterSpan($AgNA_Handle,"Channel1", "",63870000,5000000);





AgNA_Chan_Stimulus_ConfigureStartStop

Previous Top Next



* * *



AgNA_Chan_Stimulus_ConfigureStartStop



Usage:

AgNA_Chan_Stimulus_ConfigureStartStop($AgNA_Handle,$ChannelName,$MeasurementName,$StartValue,$StopValue);



Description:

This function requires Agilent network analyzer IVI drivers to be installed on the system.

Sets the sweep range for the channel using start and stop value of the frequencies.



Result:

AgNA_Chan_Stimulus_ConfigureStartStop($AgNA_Handle,$ChannelName,$MeasurementName,$StartValue,$StopValue);

Function arguments



Parameter

Variable Type

Description



$AgNA_Handle

object

The object representing the instance of the Agilent network analyzer.



$ChannelName

string

The name of the channel.



$MeasurementName

string

THIS ARGUMENT IS NOT NECESSARY FOR THIS FUNCTION. Use a blank or dummy value.



$StartValue

double

The start value of the sweep range of channel.



$StopValue

double

The stop value of the sweep range of channel.





Return parameters



Parameter

Variable Type

Description





Example(s):

AgNA_Chan_Stimulus_ConfigureStartStop($AgNAObj,"Channel1","",61370000,66370000);





AgNA_Clear

Previous Top Next



* * *



AgNA_Clear



Usage:

AgNA_Clear($AgNA_Handle);



Description:

This function requires Agilent network analyzer IVI drivers to be installed on the system.

Clear event registers and error que.



Result:

AgNA_Clear($AgNA_Handle);

Function arguments



Parameter

Variable Type

Description



$AgNA_Handle

object

The object representing the instance of the Agilent network analyzer.





Return parameters



Parameter

Variable Type

Description





Example(s):

AgNA_Clear($AgNA_Handle);





AgNA_Close

Previous Top Next



* * *



AgNA_Close



Usage:

AgNA_Close($AgNA_Handle);



Description:

This function requires Agilent network analyzer IVI drivers to be installed on the system.

Closes the I/O session to the instrument.



Result:

AgNA_Close($AgNA_Handle);

Function arguments



Parameter

Variable Type

Description



$AgNA_Handle

object

The object representing the instance of the Agilent network analyzer.





Return parameters



Parameter

Variable Type

Description





Example(s):

AgNA_Close($AgNA_Handle);





AgNA_Disable

Previous Top Next



* * *



AgNA_Disable



Usage:

AgNA_Disable($AgNA_Handle);



Description:

This function requires Agilent network analyzer IVI drivers to be installed on the system.

Quickly places the instrument in a state where it has no, or minimal, effect on the external system to which it is connected. This state is not necessarily a known state.



Result:

AgNA_Disable($AgNA_Handle);

Function arguments



Parameter

Variable Type

Description



$AgNA_Handle

object

The object representing the instance of the Agilent network analyzer.





Return parameters



Parameter

Variable Type

Description





Example(s):

AgNA_Disable($AgNA_Handle);





AgNA_FetchFormattedData

Previous Top Next



* * *



AgNA_FetchFormattedData



Usage:

AgNA_FetchFormattedData($AgNA_Handle, $channelName,$measurementName);





Description:

Returns measurement data in the current format as set by the Measurement.Format property. Smith and Polar formats are not supported.





Equivalent SCPI commands

:CALCulate{[1]|2|3|4}[:SELected]:DATA:FDATa?



Function Arguments



Parameter

Variable Type

Description



$AgNA_Handle

Object

Handle to instrument created with the AgNA_Init() function.



$channelName

String

Name of channel trace exists on (usually "Channel1" - "Channel4")



$measurementName

String

Name of measurement (trace) to save





Return Parameters



Parameter

Variably Type

Description



$traceData

Array

Array of Float trace values in whatever format instrument is currently set to.





Example:

//grab trace data of trace #1 of channel #1

$lossArray = AgNA_FetchFormattedData($AgNA_Handle,$Channel1,$Trace1);





AgNA_Init

Previous Top Next



* * *



AgNA_Init



Usage:

$AgNA_Handle = AgNA_Init($ResourceName,$ID_Query,$Reset,$OptionString);



Description:

This function requires Agilent network analyzer IVI drivers to be installed on the system.

Opens the I/O session to the instrument. Driver methods and properties that access the instrument are only accessible after this function is called. This function optionally performs a Reset and queries the instrument to validate the instrument model.



Result:

$AgNA_Handle = AgNA_Init($ResourceName,$ID_Query,$Reset,$OptionString);

Function arguments



Parameter

Variable Type

Description



$ResourceName

string

An IVI logical name or an instrument specific string that identifies the address of the instrument, such as a VISA resource descriptor string.



$ID_Query

boolean

Specifies whether to verify the ID of the instrument.



$Reset

boolean

Specifies whether to reset the instrument.



$OptionString

string

The user can use the OptionsString parameter to specify the initial values of certain IVI inherent attributes for the session. The format of an assignment in the OptionsString parameteris 'Name=Value', where Name is one of: RangeCheck, QuerytInstrStatus, Cache, Simulate, RecordCoercions, InterchangeCheck,or DriverSetup. Value is either true or false except for DriverSetup. If the Options String parameter contains an assignment for the Driver Setup attribute, the Initialize function assumes that everything following 'DriverSetup=' is part of the assignment.





Return parameters



Parameter

Variable Type

Description



$AgNA_Handle

object

The object representing the instance of the Agilent network analyzer.





Example(s):

$AgNAObj = AgNA_Init("GPIB0",true,true,"Simulate=true, DriverSetup= Model=E5062A");





AgNA_Limit_AddLine

Previous Top Next



* * *



AgNA_Limit_AddLine



Usage:

AgNA_Limit_AddLine($AgNA_Handle, $channelNum, $traceNum, $limitTypeVal, $beginXVal, $endXVal, $beginYVal, $endYVal);





Description:

Creates a limit line segment of the selected type using provided start and stop points.





Equivalent SCPI commands

:CALCulate{[1]|2|3|4}:PARameter{[1]|2|3|4}:SELect

:CALCulate{[1]|2|3|4}[:SELected]:LIMit:DATA <numeric 1>,…,<numeric 1+(N×5)>



Function Arguments



Parameter

Variable Type

Description



$AgNA_Handle

Object

Handle to instrument created with the AgNA_Init() function.



$channelNum

Integer

Channel number to create limit line on.



$traceNum

String

Trace number on the channel selected to create limit line on.



$limitTypeVal

String

Type of limit line:

OFF

MINIMUM

MAXIMUM



$beginXVal

Float

Start frequency



$endXVal

Float

Stop frequency



$beginYVal

Float

Y-value at start frequency (units depends on display mode).



$endYVal

Float

Y-value at stop frequency (units depends on display mode).





Return Parameters



Parameter

Variably Type

Description



None

--





Example:

//add a limit line on trace 1 of CH1 from 500MHz to 2GHz with a maximum value allowed of 10dB

AgNA_Limit_AddLine($AgNA_Handle, 1, 1, "MAXIMUM", 0.500, 2, 10, 10);





AgNA_Limit_DeleteAll

Previous Top Next



* * *



AgNA_Limit_DeleteAll



Usage:

AgNA_Limit_DeleteAll($AgNA_Handle, $channelNum, $traceNum);





Description:

Deletes all limit lines for selected trace.





Equivalent SCPI commands

:CALCulate{[1]|2|3|4}:PARameter{[1]|2|3|4}:SELect

:CALCulate{[1]|2|3|4}[:SELected]:LIMit[:STATe] {OFF|0}



Function Arguments



Parameter

Variable Type

Description



$AgNA_Handle

Object

Handle to instrument created with the AgNA_Init() function.



$channelNum

Integer

Channel number.



$traceNum

String

Trace number on the channel selected.





Return Parameters



Parameter

Variably Type

Description



None

--





Example:

AgNA_Limit_DeleteAll($AgNA_Handle, 1, 1); //delete all limit lines on trace 1 of CH1





AgNA_Limit_Enable

Previous Top Next



* * *



AgNA_Limit_Enable



Usage:

AgNA_Limit_Enable($AgNA_Handle, $channelNum, $traceNum, $limitEnable);





Description:

Turns limit testing on/off.





Equivalent SCPI commands

:CALCulate{[1]|2|3|4}:PARameter{[1]|2|3|4}:SELect

:CALCulate{[1]|2|3|4}[:SELected]:LIMit[:STATe] {ON|OFF|1|0}



Function Arguments



Parameter

Variable Type

Description



$AgNA_Handle

Object

Handle to instrument created with the AgNA_Init() function.



$channelNum

Integer

Channel number.



$traceNum

String

Trace number on the channel selected.



$limitEnable

Boolean

State of limit testing.





Return Parameters



Parameter

Variably Type

Description



None

--





Example:

AgNA_Limit_Enable($AgNA_Handle, 1, 1, true); //turn on limit test for trace 1 of CH1





AgNA_Limit_FailCount

Previous Top Next



* * *



AgNA_Limit_FailCount



Usage:

$numFailures = AgNA_Limit_FailCount($AgNA_Handle, $channelNum, $traceNum);





Description:

Returns the # of points failing the limit test for the selected trace.





Equivalent SCPI commands

:CALCulate{[1]|2|3|4}:PARameter{[1]|2|3|4}:SELect

:CALCulate{[1]|2|3|4}[:SELected]:LIMit:REPort:POINts?



Function Arguments



Parameter

Variable Type

Description



$AgNA_Handle

Object

Handle to instrument created with the AgNA_Init() function.



$channelNum

Integer

Channel number.



$traceNum

String

Trace number on the channel selected.





Return Parameters



Parameter

Variably Type

Description



$numFailures

Integer

Number of points failing the limit test for the specified trace.





Example:

//check # points failing limit test on trace 1 of CH1

$numPointsFailing = AgNA_Limit_FailCount($AgNA_Handle, 1, 1);

$measurementUnits = "Failing points";

$measurementName = "VSWR measurement";

$VSWR_points_failing_LL = 0;

$VSWR_points_failing_UL = 10; /allow up to 10 failing points

RecordMeasurementWithLimits($measurementName,$numPointsFailing,$measurementUnits,$ParametricMeasurement,$VSWR_points_failing_LL,$VSWR_points_failing_UL,$FailOnLimits);





AgNA_Limit_IsPassing

Previous Top Next



* * *



AgNA_Limit_IsPassing



Usage:

$limitTestPass = AgNA_Limit_IsPassing($AgNA_Handle, $channelNum, $traceNum);





Description:

Returns the status of the limit test for selected trace.





Equivalent SCPI commands

:CALCulate{[1]|2|3|4}:PARameter{[1]|2|3|4}:SELect

:CALCulate{[1]|2|3|4}[:SELected]:LIMit:FAIL?



Function Arguments



Parameter

Variable Type

Description



$AgNA_Handle

Object

Handle to instrument created with the AgNA_Init() function.



$channelNum

Integer

Channel number.



$traceNum

String

Trace number on the channel selected.





Return Parameters



Parameter

Variably Type

Description



$limitTestPass

Boolean

Status of limit test.





Example:

//check limit test pass/fail status of trace 1 on CH1

$limitTestPassing = AgNA_Limit_IsPassing($AgNA_Handle, 1, 1);

RecordMeasurementPassFail("Limit test", $limitTestPassing, " ", $ParametricMeasurement, $limitTestPassing);





AgNA_Limit_LineDisplay

Previous Top Next



* * *



AgNA_Limit_LineDisplay



Usage:

AgNA_Limit_LineDisplay($AgNA_Handle, $channelNum, $traceNum, $lineDisplayEnable);





Description:

Turns limit line display on/off.





Equivalent SCPI commands

:CALCulate{[1]|2|3|4}:PARameter{[1]|2|3|4}:SELect

:CALCulate{[1]|2|3|4}[:SELected]:LIMit:DISPlay[:STATe] {ON|OFF|1|0}



Function Arguments



Parameter

Variable Type

Description



$AgNA_Handle

Object

Handle to instrument created with the AgNA_Init() function.



$channelNum

Integer

Channel number.



$traceNum

String

Trace number on the channel selected.



$lineDisplayEnable

Boolean

State of line display.





Return Parameters



Parameter

Variably Type

Description



None

--





Example:

AgNA_Limit_ LineDisplay($AgNA_Handle, 1, 1, true); //turn on limit line display for trace 1 of CH1





AgNA_Preset

Previous Top Next



* * *



AgNA_Preset



Usage:

AgNA_Preset($AgNA_Handle);



Description:

This function requires Agilent network analyzer IVI drivers to be installed on the system.

Defaults bits in most of the enable and transition registers. It presets all the Transition Filters, Enable Registers, and the Error/Event Queue Enable.



Result:

AgNA_Preset($AgNA_Handle);

Function arguments



Parameter

Variable Type

Description



$AgNA_Handle

object

The object representing the instance of the Agilent network analyzer.





Return parameters



Parameter

Variable Type

Description





Example(s):

AgNA_Preset($AgNA_Handle);





AgNA_RecallState

Previous Top Next



* * *



AgNA_RecallState



Usage:

AgNA_RecallState($AgNA_Handle, $stateName);





Description:

Recalls the specified instrument state file (file with the .STA extension saved with the AgNA_SaveState() function). If you want to specify a file on the floppy disk drive, you need to add “A:” at the beginning of the file name. When you use directory names and file name, separate them with “/” (slash) or “\” (backslash). If the specified file does not exist, an error occurs and the command is ignored. (No query).





Equivalent SCPI commands

:MMEMory:LOAD[:STATe] <string>



Function Arguments



Parameter

Variable Type

Description



$AgNA_Handle

Object

Handle to instrument created with the AgNA_Init() function.



$stateName

String

Filename of state to load.





Return Parameters



Parameter

Variably Type

Description



None

--





Example:

//load the cal state saved in slot 1

AgNA_RecallState($AgNA_Handle, "STATE01");





AgNA_Reset

Previous Top Next



* * *



AgNA_Reset



Usage:

AgNA_Reset($AgNA_Handle);



Description:

This function requires Agilent network analyzer IVI drivers to be installed on the system.

Places the instrument in a known state and configures instrument options on which the IVI specific driver depends.



Result:

AgNA_Reset($AgNA_Handle);

Function arguments



Parameter

Variable Type

Description



$AgNA_Handle

object

The object representing the instance of the Agilent network analyzer.





Return parameters



Parameter

Variable Type

Description





Example(s):

AgNA_Reset($AgNA_Handle);





AgNA_ResetWithDefaults

Previous Top Next



* * *



AgNA_ResetWithDefaults



Usage:

AgNA_ResetWithDefaults($AgNA_Handle);



Description:

This function requires Agilent network analyzer IVI drivers to be installed on the system.

Does the equivalent of Reset and then, disables class extension capability groups, sets attributes to initial values defined by class specs, and configures the driver to option string settings used when Initialize was last executed.



Result:

AgNA_ResetWithDefaults($AgNA_Handle);

Function arguments



Parameter

Variable Type

Description



$AgNA_Handle

object

The object representing the instance of the Agilent network analyzer.





Return parameters



Parameter

Variable Type

Description





Example(s):

AgNA_ResetWithDefaults($AgNA_Handle);





AgNA_SCPI_Read

Previous Top Next



* * *



AgNA_SCPI_Read



Usage:

$Data = AgNA_SCPI_Read($AgNA_Handle);



Description:

This function requires Agilent network analyzer IVI drivers to be installed on the system.

Retrieves string from instrument. Used to get the response from a SCPI query sent with the AgNA_SCPI_Write function.



Result:

$Data = AgNA_SCPI_Read($AgNA_Handle);

Function arguments



Parameter

Variable Type

Description



$AgNA_Handle

object

The object representing the instance of the Agilent network analyzer.





Return parameters



Parameter

Variable Type

Description



$Data

string

Return string from instrument.





Example(s):

$Data = AgNA_SCPI_Read($AgNA_Handle);





AgNA_SCPI_Write

Previous Top Next



* * *



AgNA_SCPI_Write



Usage:

AgNA_SCPI_Write($AgNA_Handle,$Data,$FlushAndEnd);



Description:

This function requires Agilent network analyzer IVI drivers to be installed on the system.

Sends a string directly to instrument. Used to communicate with and control instrument using SCPI commands.



Result:

AgNA_SCPI_Write($AgNA_Handle,$Data,$FlushAndEnd);

Function arguments



Parameter

Variable Type

Description



$AgNA_Handle

object

The object representing the instance of the Agilent network analyzer.



$Data

string

SCPI command to write to the instrument.



$FlushAndEnd

boolean

Flush and end





Return parameters



Parameter

Variable Type

Description





Example(s):

AgNA_SCPI_Write($AgNA_Handle,"RST",true); // Reset instrument

AgNA_SCPI_Write($AgNAObj,"SOUR1:POW:ATT 0",true); // Set power ranges





AgNA_SaveState

Previous Top Next



* * *



AgNA_SaveState



Usage:

AgNA_SaveState($AgNA_Handle, $stateName);





Description:

Saves the instrument state (data to be saved specified with the :MMEM:STOR:STYP command) into a file. Filename will automatically add the .STA file extension, if missing. Default directory is the D: drive. If you want to specify a file on the floppy disk drive, you need to add “A:” at the beginning of the file name. When you use directory names and file name, separate them with “/” (slash) or “\” (backslash). Notice that if a file with the specified file name exists, its contents are overwritten. (No query).





Equivalent SCPI commands

:MMEMory:STORe[:STATe] <string>



Function Arguments



Parameter

Variable Type

Description



$AgNA_Handle

Object

Handle to instrument created with the AgNA_Init() function.



$stateName

String

Filename to save state to.





Return Parameters



Parameter

Variably Type

Description



None

--





Example:

//save the cal state into slot 1

$state01 = "STATE01.STA";

AgNA_SaveState($AgNA_Handle, $state01);





AgNA_SetTimeout

Previous Top Next



* * *



AgNA_SetTimeout



Usage:

AgNA_SetTimeout($AgNA_Handle, $timeoutms);





Description:

Sets the instrument communication timeout value, in ms. Raise this if some commands are throwing IO timeout errors.



Function Arguments



Parameter

Variable Type

Description



$AgNA_Handle

Object

Handle to instrument created with the AgNA_Init() function.



$timeoutms

Integer

Instrument communication timeout in ms.





Return Parameters



Parameter

Variably Type

Description



None

--





Example:

AgNA_SetTimeout($AgNA_Handle, 5000); //set command timeout to 5s





AgNA_SetTriggerSource

Previous Top Next



* * *



AgNA_SetTriggerSource



Usage:

AgNA_SetTriggerSource($AgNA_Handle, $sourceString);





Description:

Selects trigger source from one of four sources - internal, external, manual (front panel) or bus (programmatic).





Equivalent SCPI commands

:TRIGger[:SEQuence]:SOURce {INTernal|EXTernal|MANual|BUS}



Function Arguments



Parameter

Variable Type

Description



$AgNA_Handle

Object

Handle to instrument created with the AgNA_Init() function.



$sourceString

String

Trigger source. Valid values are:

? INTERNAL

? EXTERNAL

? MANUAL

? BUS





Return Parameters



Parameter

Variably Type

Description



None

--





Example:

//set trigger source to internal (automatic) stimulus

AgNA_SetTriggerSource($AgNA_Handle, "INTERNAL");





AgNA_TriggerSweep

Previous Top Next



* * *



AgNA_TriggerSweep



Usage:

AgNA_TriggerSweep ($AgNA_Handle, $channelName,$timeoutms);





Description:

This will trigger the sweeps on a channel. Method does not return until sweep complete or timeout value exceeded.





Equivalent SCPI commands

:TRIGger[:SEQuence]:SINGle ; *WAI



Function Arguments



Parameter

Variable Type

Description



$AgNA_Handle

Object

Handle to instrument created with the AgNA_Init() function.



$channelName

String

Name of channel to perform sweep on (usually "Channel1" - "Channel4")



$timeoutms

Integer

Timeout in ms - time function will wait for sweep to complete.





Return Parameters



Parameter

Variably Type

Description



None

--





Example:

//start a sweep on channel #1; wait a maximum of 5 seconds for sweep to complete

AgNA_TriggerSweep($AgNA_Handle,$Channel1,5000);





AgNA_WaitForOperationComplete

Previous Top Next



* * *



AgNA_WaitForOperationComplete



Usage:

AgNA_WaitForOperationComplete($AgNA_Handle, $timeoutms);





Description:

Waits for the execution of all commands sent before this command to be completed.





Equivalent SCPI commands

*WAI



Function Arguments



Parameter

Variable Type

Description



$AgNA_Handle

Object

Handle to instrument created with the AgNA_Init() function.



$timeoutms

Integer

Timeout in ms - time function will wait for pending operations to complete.





Return Parameters



Parameter

Variably Type

Description



None

--





Example:

AgNA_WaitForOperationComplete($AgNA_Handle, 5000); //wait 5s for any pending operations





AgDSO1000A_AutoScale

Previous Top Next



* * *



AgDSO1000A_AutoScale



Usage:

$ErrorCode = AgDSO1000A_AutoScale($Handle);



Description:

This function requires Agilent IO Libraries Suite (Agilent VISA-COM) to be installed on the system.

Auto scales the oscilloscope settings according to the input signals.



Remarks:

· This function is tested with the Agilent DSO1022A.

· All 1000 Series oscilloscope models can be controlled by this library.



Result:

$ErrorCode = AgDSO1000A_AutoScale($Handle);

Function arguments



Parameter

Variable Type

Description



$Handle

Object

The handle of the instrument created by the initialization function.





Return parameters



Parameter

Variable Type

Description



$ErrorCode

Integer

The return value of the function execution.

Values:

· $ErrorCode == 0 : successful

· $ErrorCode <> 0 : an error occurred.





Example(s):

$ErrorCode = AgDSO1000A_AutoScale($Handle);





AgDSO1000A_ClearStatus

Previous Top Next



* * *



AgDSO1000A_ClearStatus



Usage:

$ErrorCode = AgDSO1000A_ClearStatus($Handle);



Description:

This function requires Agilent IO Libraries Suite (Agilent VISA-COM) to be installed on the system.

Clears all status and error registers.of the oscilloscope.



Remarks:

· This function is tested with the Agilent DSO1022A.

· All 1000 Series oscilloscope models can be controlled by this library.



Result:

$ErrorCode = AgDSO1000A_ClearStatus($Handle);

Function arguments



Parameter

Variable Type

Description



$Handle

Object

The handle of the instrument created by the initialization function.





Return parameters



Parameter

Variable Type

Description



$ErrorCode

Integer

The return value of the function execution.

Values:

· $ErrorCode == 0 : successful

· $ErrorCode <> 0 : an error occurred.





Example(s):

$ErrorCode = AgDSO1000A_ClearStatus($Handle);





AgDSO1000A_Close

Previous Top Next



* * *



AgDSO1000A_Close



Usage:

AgDSO1000A_Close($Handle);



Description:

This function requires Agilent IO Libraries Suite (Agilent VISA-COM) to be installed on the system.

Closes the session to the specified device.



Remarks:

· This function is tested with the Agilent DSO1022A.

· All 1000 Series oscilloscope models can be controlled by this library.



Result:

AgDSO1000A_Close($Handle);

Function arguments



Parameter

Variable Type

Description



$Handle

Object

The handle of the instrument created by the initialization function.





Return parameters



Parameter

Variable Type

Description





Example(s):

AgDSO1000A_Close($Handle);





AgDSO1000A_CounterEnable

Previous Top Next



* * *



AgDSO1000A_CounterEnable



Usage:

$ErrorCode = AgDSO1000A_CounterEnable($Handle,$OnOff);



Description:

This function requires Agilent IO Libraries Suite (Agilent VISA-COM) to be installed on the system.

Turns the hardware frequency counter on or off.



Remarks:

· This function is tested with the Agilent DSO1022A.

· All 1000 Series oscilloscope models can be controlled by this library.



Result:

$ErrorCode = AgDSO1000A_CounterEnable($Handle,$OnOff);

Function arguments



Parameter

Variable Type

Description



$Handle

Object

The handle of the instrument created by the initialization function.



$OnOff

Boolean

Specifies whether the hardware counter needs to be enabled or not.

Values:

· true : hardware counter enabled

· true : hardware counter disabled





Return parameters



Parameter

Variable Type

Description



$ErrorCode

Integer

The return value of the function execution.

Values:

· $ErrorCode == 0 : successful

· $ErrorCode <> 0 : an error occurred.





Example(s):

$ErrorCode = AgDSO1000A_CounterEnable($Handle,true);

$ErrorCode = AgDSO1000A_CounterEnable($Handle,false);





AgDSO1000A_Init

Previous Top Next



* * *



AgDSO1000A_Init



Usage:

($Handle,$ErrorCode) = AgDSO1000A_Init($ResourceString);



Description:

This function requires Agilent IO Libraries Suite (Agilent VISA-COM) to be installed on the system.

Opens a session to the specified device using the interface and address specified in the variable ResourceString.



Remarks:

· This function is tested with the Agilent DSO1022A.

· All 1000 Series oscilloscope models can be controlled by this library.



Result:

($Handle,$ErrorCode) = AgDSO1000A_Init($ResourceString);

Function arguments



Parameter

Variable Type

Description



$ResourceString

String

The VISA address of the oscilloscope. Get the VISA address from the Agilent Connection Expert installed with the Agilent IO Libraries Suite.





Return parameters



Parameter

Variable Type

Description



$Handle

Object

A handle to the instrument



$ErrorCode

Integer

The return value of the function execution.

Values:

· $ErrorCode == 0 : successful

· $ErrorCode <> 0 : an error occurred.





Example(s):

($Handle,$ErrorCode) = AgDSO1000A_Init("USB0::0x0957::0x0588::CN49424291::0::INSTR");





AgDSO1000A_LoadSystemSetup

Previous Top Next



* * *



AgDSO1000A_LoadSystemSetup



Usage:

$ErrorCode = AgDSO1000A_LoadSystemSetup($Handle,$BinFile);



Description:

This function requires Agilent IO Libraries Suite (Agilent VISA-COM) to be installed on the system.

Sets up the oscilloscope as defined by the data in the binary file. The binary file can be crreated using the function AgDSO1000A_SaveSystemSetup.



Remarks:

· This function is tested with the Agilent DSO1022A.

· All 1000 Series oscilloscope models can be controlled by this library.



Result:

$ErrorCode = AgDSO1000A_LoadSystemSetup($Handle,$BinFile);

Function arguments



Parameter

Variable Type

Description



$Handle

Object

The handle of the instrument created by the initialization function.



$BinFile

String

The path and name of the binary setup file to load to the oscilloscope.





Return parameters



Parameter

Variable Type

Description



$ErrorCode

Integer

The return value of the function execution.

Values:

· $ErrorCode == 0 : successful

· $ErrorCode <> 0 : an error occurred.





Example(s):

$ErrorCode = AgDSO1000A_LoadSystemSetup($Handle,"C:\\27MHz.stp");





AgDSO1000A_Lock

Previous Top Next



* * *



AgDSO1000A_Lock



Usage:

$ErrorCode = AgDSO1000A_Lock($Handle);



Description:

This function requires Agilent IO Libraries Suite (Agilent VISA-COM) to be installed on the system.

Disables the front panel of the oscilloscope.



Remarks:

· This function is tested with the Agilent DSO1022A.

· All 1000 Series oscilloscope models can be controlled by this library.



Result:

$ErrorCode = AgDSO1000A_Lock($Handle);

Function arguments



Parameter

Variable Type

Description



$Handle

Object

The handle of the instrument created by the initialization function.





Return parameters



Parameter

Variable Type

Description



$ErrorCode

Integer

The return value of the function execution.

Values:

· $ErrorCode == 0 : successful

· $ErrorCode <> 0 : an error occurred.





Example(s):

$ErrorCode = AgDSO1000A_Lock($Handle);





AgDSO1000A_ManualCursorAPosX

Previous Top Next



* * *



AgDSO1000A_ManualCursorAPosX



Usage:

$ErrorCode = AgDSO1000A_ManualCursorAPosX($Handle,$Position);



Description:

This function requires Agilent IO Libraries Suite (Agilent VISA-COM) to be installed on the system.

Sets the manual cursor A horizontal position.



Remarks:

· This function is tested with the Agilent DSO1022A.

· All 1000 Series oscilloscope models can be controlled by this library.



Result:

$ErrorCode = AgDSO1000A_ManualCursorAPosX($Handle,$Position);

Function arguments



Parameter

Variable Type

Description



$Handle

Object

The handle of the instrument created by the initialization function.



$Position

Integer

The horizontal position.





Return parameters



Parameter

Variable Type

Description



$ErrorCode

Integer

The return value of the function execution.

Values:

· $ErrorCode == 0 : successful

· $ErrorCode <> 0 : an error occurred.





Example(s):

$ErrorCode = AgDSO1000A_ManualCursorAPosX($Handle,15);





AgDSO1000A_ManualCursorType

Previous Top Next



* * *



AgDSO1000A_ManualCursorType



Usage:

$ErrorCode = AgDSO1000A_ManualCursorType($Handle,$CursorType);



Description:

This function requires Agilent IO Libraries Suite (Agilent VISA-COM) to be installed on the system.

Selects between horizontal and vertical measurement manual cursors.



Remarks:

· This function is tested with the Agilent DSO1022A.

· All 1000 Series oscilloscope models can be controlled by this library.



Result:

$ErrorCode = AgDSO1000A_ManualCursorType($Handle,$CursorType);

Function arguments



Parameter

Variable Type

Description



$Handle

Object

The handle of the instrument created by the initialization function.



$CursorType

String

The cursor type to use.

Values:

· AMPLITUDE : Selects vertical measurement manual cursors.

· TIME : Selects horizontal measurement manual cursors.





Return parameters



Parameter

Variable Type

Description



$ErrorCode

Integer

The return value of the function execution.

Values:

· $ErrorCode == 0 : successful

· $ErrorCode <> 0 : an error occurred.





Example(s):

$ErrorCode = AgDSO1000A_ManualCursorType($Handle,"AMPLITUDE");





AgDSO1000A_QueryNumber

Previous Top Next



* * *



AgDSO1000A_QueryNumber



Usage:

$ErrorCode = AgDSO1000A_QueryNumber($Handle,$Command);



Description:

This function requires Agilent IO Libraries Suite (Agilent VISA-COM) to be installed on the system.

Queries the measurement using the measurement command.



Remarks:

· This function is tested with the Agilent DSO1022A.

· All 1000 Series oscilloscope models can be controlled by this library.



Result:

$ErrorCode = AgDSO1000A_QueryNumber($Handle,$Command);

Function arguments



Parameter

Variable Type

Description



$Handle

Object

The handle of the instrument created by the initialization function.



$Command

String

A measure command defined by the IEEE 488.2 standard.

I refer to the Agilent 1000 Series Oscilloscopes programmer's guide for the complete command set.





Return parameters



Parameter

Variable Type

Description



$Result

Float

The measurement value.

If an error occurs, the value zero is returned.





Example(s):

$Result = AgDSO1000A_QueryNumber($Handle,":MEASure:VMIN?");

$result = AgDSO1000A_QueryNumber($ScopeHandle,":MEASure:PDELay? CHANnel2,CHANnel1");





AgDSO1000A_QueryString

Previous Top Next



* * *



AgDSO1000A_QueryString



Usage:

$ErrorCode = AgDSO1000A_QueryString($Handle,$Command);



Description:

This function requires Agilent IO Libraries Suite (Agilent VISA-COM) to be installed on the system.

Queries the string using the measurement command.



Remarks:

· This function is tested with the Agilent DSO1022A.

· All 1000 Series oscilloscope models can be controlled by this library.



Result:

$ErrorCode = AgDSO1000A_QueryString($Handle,$Command);

Function arguments



Parameter

Variable Type

Description



$Handle

Object

The handle of the instrument created by the initialization function.



$Command

String

A measure command defined by the IEEE 488.2 standard.

I refer to the Agilent 1000 Series Oscilloscopes programmer's guide for the complete command set.





Return parameters



Parameter

Variable Type

Description



$Result

Float

The measurement value.

If an error occurs, an empty string is returned.





Example(s):

$Data = AgDSO1000A_QueryString($ScopeHandle,"*IDN?");





AgDSO1000A_Reset

Previous Top Next



* * *



AgDSO1000A_Reset



Usage:

$ErrorCode = AgDSO1000A_Reset($Handle);



Description:

This function requires Agilent IO Libraries Suite (Agilent VISA-COM) to be installed on the system.

Places the oscilloscope in the factory default setup state.

The reset conditions are:

Acquire Menu

Mode: Normal



Analog Channel Menu

Channel 1: On

Channel 2: Off

Channel 3: Off

Channel 4: Off

Volts/division: 100 mV/div

Offset: 0.00

Coupling: DC

Probe attenuation: 10X

Invert: Off

BW limit: Off

Units: Volts





Cursor Menu

Cursors: Off





Display Menu

Infinite persistence: Off

Grid: Grid and coordinates displayed.

Vectors: On





Quick Meas Menu

Source: Channel 1





Run Control

Scope is running





Time Base Menu

Main time/division: 1 us/div

Main time base delay: 0.00 s

Zoom time/division: 500 ns/div

Zoom time base delay: 0.00 s

Mode: Y-T





Trigger Menu

Type: Edge

Sweep: Auto

Coupling: DC

Source Channel: 1

Level: 0.0 V

Slope: Rising

HF Reject: Off

Holdoff: 100 ns





Remarks:

· This function is tested with the Agilent DSO1022A.

· All 1000 Series oscilloscope models can be controlled by this library.



Result:

$ErrorCode = AgDSO1000A_Reset($Handle);

Function arguments



Parameter

Variable Type

Description



$Handle

Object

The handle of the instrument created by the initialization function.





Return parameters



Parameter

Variable Type

Description



$ErrorCode

Integer

The return value of the function execution.

Values:

· $ErrorCode == 0 : successful

· $ErrorCode <> 0 : an error occurred.





Example(s):

$ErrorCode = AgDSO1000A_Reset($Handle);





AgDSO1000A_SaveSystemSetup

Previous Top Next



* * *



AgDSO1000A_SaveSystemSetup



Usage:

$ErrorCode = AgDSO1000A_SaveSystemSetup($Handle,$BinFile);



Description:

This function requires Agilent IO Libraries Suite (Agilent VISA-COM) to be installed on the system.

Gets the oscilloscope setup and saves it in the binary file.



Remarks:

· This function is tested with the Agilent DSO1022A.

· All 1000 Series oscilloscope models can be controlled by this library.



Result:

$ErrorCode = AgDSO1000A_SaveSystemSetup($Handle,$BinFile);

Function arguments



Parameter

Variable Type

Description



$Handle

Object

The handle of the instrument created by the initialization function.



$BinFile

String

The path and name of the binary setup file to save the oscilloscope settings.





Return parameters



Parameter

Variable Type

Description



$ErrorCode

Integer

The return value of the function execution.

Values:

· $ErrorCode == 0 : successful

· $ErrorCode <> 0 : an error occurred.





Example(s):

$ErrorCode = AgDSO1000A_SaveSystemSetup($Handle,$BinFile);





AgDSO1000A_SetCursorMode

Previous Top Next



* * *



AgDSO1000A_SetCursorMode



Usage:

$ErrorCode = AgDSO1000A_SetCursorMode($Handle,$CursorMode);



Description:

This function requires Agilent IO Libraries Suite (Agilent VISA-COM) to be installed on the system.

Sets the cursor mode.



Remarks:

· This function is tested with the Agilent DSO1022A.

· All 1000 Series oscilloscope models can be controlled by this library.



Result:

$ErrorCode = AgDSO1000A_SetCursorMode($Handle,$CursorMode);

Function arguments



Parameter

Variable Type

Description



$Handle

Object

The handle of the instrument created by the initialization function.



$CursorMode

String

The cursor mode to use.

Values:

· OFF : Turns off cursors.

· MANUAL : turns on the manual cursor mode

· TRACK : turns on the tracking cursor mode

· AUTO : turns on the mode where cursors for the latest automatic measurement are displayed.





Return parameters



Parameter

Variable Type

Description



$ErrorCode

Integer

The return value of the function execution.

Values:

· $ErrorCode == 0 : successful

· $ErrorCode <> 0 : an error occurred.





Example(s):

$ErrorCode = AgDSO1000A_SetCursorMode($Handle,"OFF");





AgDSO1000A_Unlock

Previous Top Next



* * *



AgDSO1000A_Unlock



Usage:

$ErrorCode = AgDSO1000A_Unlock($Handle);



Description:

This function requires Agilent IO Libraries Suite (Agilent VISA-COM) to be installed on the system.

Enables the front panel of the oscilloscope.



Remarks:

· This function is tested with the Agilent DSO1022A.

· All 1000 Series oscilloscope models can be controlled by this library.



Result:

$ErrorCode = AgDSO1000A_Unlock($Handle);

Function arguments



Parameter

Variable Type

Description



$Handle

Object

The handle of the instrument created by the initialization function.





Return parameters



Parameter

Variable Type

Description



$ErrorCode

Integer

The return value of the function execution.

Values:

· $ErrorCode == 0 : successful

· $ErrorCode <> 0 : an error occurred.





Example(s):

$ErrorCode = AgDSO1000A_Unlock($Handle);





AgDSO1000A_WriteCommand

Previous Top Next



* * *



AgDSO1000A_WriteCommand



Usage:

$ErrorCode = AgDSO1000A_WriteCommand($Handle,$Command);



Description:

This function requires Agilent IO Libraries Suite (Agilent VISA-COM) to be installed on the system.

Sets the cursor mode.



Remarks:

· This function is tested with the Agilent DSO1022A.

· All 1000 Series oscilloscope models can be controlled by this library.



Result:

$ErrorCode = AgDSO1000A_WriteCommand($Handle,$Command);

Function arguments



Parameter

Variable Type

Description



$Handle

Object

The handle of the instrument created by the initialization function.



$Command

String

A command defined by the IEEE 488.2 standard.

I refer to the Agilent 1000 Series Oscilloscopes programmer's guide for the complete command set.





Return parameters



Parameter

Variable Type

Description



$ErrorCode

Integer

The return value of the function execution.

Values:

· $ErrorCode == 0 : successful

· $ErrorCode <> 0 : an error occurred.





Example(s):

$ErrorCode = AgDSO1000A_WriteCommand($Handle,":CHANnel1:SCALe 1");





DSO6102A_Close

Previous Top Next



* * *



DSO6102A_Close

Usage:

DSO6102A_Close($AgInstance);

Description:

This function uses the Agilent IVI Instrument drivers, in order to use the DSO6102A functions in JabilTest, you need to have the Agilent COM components installed.

This function closes the DSO6102A and recovers used resources. It does not reset the unit or change it's existing settings. This function returns a passing result if the instrument can be closed successfully, otherwise a failure is generated by the script function.

Function Arguments



Parameter

Variable Type

Description



$AgInstance

Object

The COM Object representing the instance of the DSO6102A to be closed. Closing the instrument releases all resources.





Return Parameters



Parameter

Variable Type

Description



None





DSO6102A_ConfigureChannel

Previous Top Next



* * *



DSO6102A_ConfigureChannel

Usage:

DSO6102A_ConfigureChannel($AgInstance,$ChannelNumber,$Range,$Offset,$Coupling,$ProbeAtten,$Enabled);

Description:

This function uses the Agilent IVI Instrument drivers, in order to use the DSO6102A functions in JabilTest, you need to have the Agilent COM components installed.

This function configures the specified channel. In the case of instrument communication failure, or an invalid channel specified, a failure is generated by the function.

Function Arguments



Parameter

Variable Type

Description



$AgInstance

Object

The COM Object representing the instance of the DSO6102A to be used.



$ChannelNumber

String

The channel on which to take the measurement.



$Range

Float

The full screen range for the channel.



$Offset

Float

The offset for the channel.



$Coupling

String

The input coupling for the channel. AC or DC.



$ProbeAtten

Float

The input probe attenuation for the channel



$Enabled

Boolean

The enable/disable state for the channel.





Return Parameters



Parameter

Variable Type

Description



None





DSO6102A_ConfigureEdgeTrigger

Previous Top Next



* * *



DSO6102A_ConfigureEdgeTrigger

Usage:

DSO6102A_ConfigureEdgeTrigger($AgInstance,$SourceChannel,$Level,$Slope,$Coupling,$Holdoff);

Description:

This function uses the Agilent IVI Instrument drivers, in order to use the DSO6102A functions in JabilTest, you need to have the Agilent COM components installed.

This function configures the scope for edge triggering. In the case of instrument communication failure, or an invalid channel specified, a failure is generated by the function.

Function Arguments



Parameter

Variable Type

Description



$AgInstance

Object

The COM Object representing the instance of the DSO6102A to be used.



$SourceChannel

String

The trigger source channel



$Level

Float

The trigger level.



$Slope

String

The trigger slope. RISING or FALLING.



$Coupling

String

The trigger coupling. AC or DC.



$Holdoff

Float

The triggering holdoff time.





Return Parameters



Parameter

Variable Type

Description



None





DSO6102A_ConfigureRecord

Previous Top Next



* * *



DSO6102A_ConfigureRecord

Usage:

DSO6102A_ConfigureRecord($AgInstance,$TimePerRecord,$MinNumberOfPoints,$StartTime);

Description:

This function uses the Agilent IVI Instrument drivers, in order to use the DSO6102A functions in JabilTest, you need to have the Agilent COM components installed.

This function configures the record. In the case of instrument communication failure, a failure is generated by the function.

Function Arguments



Parameter

Variable Type

Description



$AgInstance

Object





$TimePerRecord

Float

The full screen time of the sweep in seconds.



$MinNumberOfPoints

Int

The minimum number of point in the record.



$StartTime

Float

The start time relative to the trigger point for the record.





Return Parameters



Parameter

Variable Type

Description



None





DSO6102A_Init

Previous Top Next



* * *



DSO6102A_Init

Usage:

$AgInstance = DSO6102A_Init($ResourceString);

Description:

This function uses the Agilent IVI Instrument drivers, in order to use the DSO6102A functions in JabilTest, you need to have the Agilent COM components installed.

This function initializes the DSO6102A for operation. It does not reset the unit or change it's existing settings. It simply grabs an instance of the COM component to use in further test script operations. This function returns a passing result if the instrument can be initialized successfully, otherwise a failure is generated by the script function.

Function Arguments



Parameter

Variable Type

Description



$ResourceString

String

The resource string identifying the instrument. For example, "GPIB0::9::Instr".





Return Parameters



Parameter

Variable Type

Description



$AgInstance

Object

The COM object representing the instance of the DSO6102A.





DSO6102A_MeasureP2P

Previous Top Next



* * *



DSO6102A_MeasureP2P

Usage:

$Measurement = DSO6102A_MeasureP2P($AgInstance,$ChannelNumber);

Description:

This function uses the Agilent IVI Instrument drivers, in order to use the DSO6102A functions in JabilTest, you need to have the Agilent COM components installed.

This function takes a peak to peak voltage measurement on the specified channel and returns the measurement. In the case of instrument communication failure, or an invalid channel specified, a failure is generated by the function.

Function Arguments



Parameter

Variable Type

Description



$AgInstance

Object

The COM Object representing the instance of the DSO6102A to be used.



$ChannelNumber

String

The channel on which to take the measurement.





Return Parameters



Parameter

Variable Type

Description



$Measurement

Float

The peak to peak voltage measurement from the specified channel.





DSO6102A_MeasurePeriod

Previous Top Next



* * *



DSO6102A_MeasurePeriod

Usage:

$Measurement = DSO6102A_MeasurePeriod($AgInstance,$ChannelNumber);

Description:

This function uses the Agilent IVI Instrument drivers, in order to use the DSO6102A functions in JabilTest, you need to have the Agilent COM components installed.

This function takes a Period measurement on the specified channel and returns the measurement. In the case of instrument communication failure, or an invalid channel specified, a failure is generated by the function.

Function Arguments



Parameter

Variable Type

Description



$AgInstance

Object

The COM Object representing the instance of the DSO6102A to be used.



$ChannelNumber

String

The channel on which to take the measurement.





Return Parameters



Parameter

Variable Type

Description



$Measurement

Float

The Period measurement from the specified channel.





DS06102A_ConfigureAverage

Previous Top Next



* * *



DSO6102A_ConfigureAverage

Usage:

DSO6102A_ConfigureAverage($AgInstance,$Averages);

Description:

This function uses the Agilent IVI Instrument drivers, in order to use the DSO6102A functions in JabilTest, you need to have the Agilent COM components installed.

This function configures the scope for averaging.

Function Arguments



Parameter

Variable Type

Description



$AgInstance

Object

The COM Object representing the instance of the DSO6102A to be closed. Closing the instrument releases all resources.



$Averages

Integer

The number of average samples.





Return Parameters



Parameter

Variable Type

Description



None





DSO6102a_MeasureAverage

Previous Top Next



* * *



DSO6102A_MeasureAverageUsage:

$Measurement = DSO6102A_MeasureAverage($AgInstance,$ChannelNumber);

Description:

This function uses the Agilent IVI Instrument drivers, in order to use the DSO6102A functions in JabilTest, you need to have the Agilent COM components installed.

This function takes an average voltage measurement on the specified channel and returns the measurement. In the case of instrument communication failure, or an invalid channel specified, a failure is generated by the function.



Function Arguments



Parameter

Variable Type

Description



$AgInstance

Object

The COM Object representing the instance of the DSO6102A to be closed. Closing the instrument releases all resources.



$ChannelNumber

String

The channel on which to take the measurement.





Return Parameters



Parameter

Variable Type

Description



$Measurement

Float

The average voltage measurement from the specified channel.





A546XX_AcquisitionType

Previous Top Next



* * *



A546XX_AquisitionType



Usage:

A546XX_AquisitionType ($A546XX_handle, $type)





Description:

Specifies how the oscilloscope acquires data and fills the waveform record.

Equivalent instrument command: :ACQuire:TYPE <NORMal | AVERage | HRESolution | PEAK>

Function arguments



Parameter

Variable Type

Description



$A546XX_handle

Object

Handle created by the A546XX_Initialize() function.



$type

String

Selects the type of data acquisition that is to take place. Valid values:

· “NORMAL” - sets the oscilloscope in the normal mode.

· “AVERAGE” - sets the oscilloscope in the averaging mode. The # of averages is set by the A546XX_AverageCount function.

· “HIRES” - sets the oscilloscope in the high-resolution mode (also known as smoothing). This mode is used to reduce noise at slower sweep speeds where the digitizer samples faster than needed to fill memory for the displayed time range. For example, if the digitizer samples at 200 MSa/s, but the effective sample rate is 1 MSa/s (because of a slower sweep speed), only 1 out of every 200 samples needs to be stored. Instead of storing one sample (and throwing others away), the 200 samples are averaged together to provide the value for one display point. The slower the sweep speed, the greater the number of samples that are averaged together for each display point. This command is functionally equivalent to “AVERAGE” with a count of 1.

· “PEAKDETECT” - sets the oscilloscope in the peak detect mode.

· “ENVELOPE” - sets the oscilloscope to the envelope acquisition mode. Not applicable to currently-supported models.





Return parameters



Parameter

Variable Type

Description



None

-

-





A546XX_AquisitionRecordTime

Previous Top Next



* * *



A546XX_AquisitionRecordTime



Usage:

A546XX_AquisitionRecordTime($A546XX_handle, $timePerRecord)





Description:

The length of time in seconds that corresponds to the record length.

Equivalent instrument command: :TIMebase:RANGe <range_value>

Function arguments



Parameter

Variable Type

Description



$A546XX_handle

Object

Handle created by the A546XX_Initialize() function.



$timePerRecord

Float

Length of the full-scale horizontal time in seconds for the main window. The range is 10 times the current time-per-division setting.

Valid ranges are 10ns through 500s.





Return parameters



Parameter

Variable Type

Description



None

-

-





A546XX_AquisitionStartTime

Previous Top Next



* * *



A546XX_AquisitionStartTime



Usage:

A546XX_AquisitionStartTime($A546XX_handle, $startTime)





Description:

The length of time from the trigger event to the first point in the waveform record in seconds.

Equivalent instrument command: : TIMebase:POSition <pos_value>

Function arguments



Parameter

Variable Type

Description



$A546XX_handle

Object

Handle created by the A546XX_Initialize() function.



$startTime

Float

The horizontal position in the delayed view of the main sweep. The main sweep range and the main sweep horizontal position determine the range for this command. The value for this command must keep the delayed view window within the main sweep range.





Return parameters



Parameter

Variable Type

Description



None

-

-





A546XX_AverageCount

Previous Top Next



* * *



A546XX_AverageCount



Usage:

A546XX_AverageCount($A546XX_handle, $numAverages)





Description:

When A546XX_AquisitionType is set to “AVERAGE”, this sets the number of values to be averaged for each time bucket before the acquisition is considered to be complete for that time bucket.

Equivalent instrument command: :ACQuire:COUNt <count>

Function arguments



Parameter

Variable Type

Description



$A546XX_handle

Object

Handle created by the A546XX_Initialize() function.



$numAverages

Float

Number of averages. Valid ranges are any value from 1 (smoothing) to 65536.





Return parameters



Parameter

Variable Type

Description



None

-

-





A546XX_InitiateAcquisition

Previous Top Next



* * *



A546XX_InitiateAquisition



Usage:

A546XX_InitiateAquisition($A546XX_handle)





Description:

Initiates a waveform acquisition. After you call this function, the oscilloscope leaves the Idle state and waits for a trigger. The oscilloscope acquires a waveform for each channel you have enabled (If no channels are displayed, all channels are acquired).

Equivalent instrument command: :DIGitize;*OPC?

Function arguments



Parameter

Variable Type

Description



$A546XX_handle

Object

Handle created by the A546XX_Initialize() function.





Return parameters



Parameter

Variable Type

Description



None

-

-





A546XX_SetHorzScale

Previous Top Next



* * *



A546XX_SetHorzScale



Usage:

A546XX_SetHorzScale($A546XX_handle, $secsPerDiv)





Description:

Sets the horizontal scale or units per division for the main window (1/10th the full acquisition range).

Equivalent instrument command: :TIMebase:SCALe <scale_value>

Function arguments



Parameter

Variable Type

Description



$A546XX_handle

Object

Handle created by the A546XX_Initialize() function.



$secsPerDiv

Float

Seconds per division.

Valid ranges are 1ns through 50s.





Return parameters



Parameter

Variable Type

Description



None

-

-





A546XX_ChannelConfig

Previous Top Next



* * *



A546XX_ChannelConfig



Usage:

A546XX_ChannelConfig($A546XX_handle, $chanNum, $range, $offset, $coupling, $probeAtten, $enabled)





Description:

Configures the most common properties of the channel (range, offset, coupling, probe attenuation, and enable) at once.

Equivalent instrument command: :CHANnel<n>:RANGe <range>;

:CHANnel<n>:OFFSet <offset>;

:CHANnel<n>:COUPling <coupling>;

:CHANnel<n>:PROBe <attenuation>;

:CHANnel<n>:DISPlay <1 | 0>

Function arguments



Parameter

Variable Type

Description



$A546XX_handle

Object

Handle created by the A546XX_Initialize() function.



$chanNum

Integer

The channel # to configure.

Valid ranges are 1 - 4.



$range

Float

The absolute value in Volts of the full-scale input range for a channel.

Valid range is 16mV to 40V (using 1:1 probe attenuation)



$offset

Float

The location of the center of the range that the Vertical Range attribute specifies for the selected channel. The value is with respect to ground and is in volts.

Valid range varies with the value set by the $range setting. If you set the offset to a value outside of the legal range, the offset value is automatically set to the nearest legal value. Legal values are affected by the probe attenuation setting.



$coupling

String

How the oscilloscope couples the input signal for the channel.

Valid values:

· “AC”

· “DC”

· “GND”



$probeAtten

Float

The attenuation factor of the connected probe. If the oscilloscope is auto sensing the probe attenuation, setting this attribute to a positive value configures the oscilloscope to use the specified manual probe attenuation.

A setting of zero will use the auto sensing value.



$enabled

Boolean

If True, the oscilloscope acquires a waveform for the channel.





Return parameters



Parameter

Variable Type

Description



None

-

-





Example(s):

A546XX_ChannelConfig($A546XX_handle, 1, 20, 0, "AC", 0, "TRUE");





A546XX_ChannelEnabled

Previous Top Next



* * *



A546XX_ChannelEnabled



Usage:

A546XX_ChannelEnabled($A546XX_handle, $chanNum, $enabled)





Description:

If True, the oscilloscope acquires a waveform for the channel.

Equivalent instrument command: :CHANnel<n>:DISPlay <0 | 1>

Function arguments



Parameter

Variable Type

Description



$A546XX_handle

Object

Handle created by the A546XX_Initialize() function.



$chanNum

Integer

The channel # to enable/disable.

Valid ranges are 1 - 4.



$enabled

Boolean

Controls display of the specified channel.





Return parameters



Parameter

Variable Type

Description



None

-

-





A546XX_ChannelLabel

Previous Top Next



* * *



A546XX_ChannelLabel



Usage:

A546XX_ChannelLabel($A546XX_handle, $chanNum, $chanLabel)





Description:

The label to be displayed for a specific channel when such labels are enabled.

Equivalent instrument command: :CHANnel<n>:LABel <string>

Function arguments



Parameter

Variable Type

Description



$A546XX_handle

Object

Handle created by the A546XX_Initialize() function.



$chanNum

Integer

The channel # to label.

Valid ranges are 1 - 4.



$chanLabel

String

Label strings are six characters or less, and may contain any commonly used ASCII characters. Labels with more than 6 characters are truncated to six characters. Lower case characters are converted to upper case.





Return parameters



Parameter

Variable Type

Description



None

-

-





A546XX_ChannelRange

Previous Top Next



* * *



A546XX_ChannelRange



Usage:

A546XX_ChannelRange($A546XX_handle, $chanNum, $chanRange)





Description:

The absolute value in Volts of the full-scale input range for a channel (equals 8 times the volts per division setting). If the probe attenuation is changed, the range value is multiplied by the probe attenuation factor.

Equivalent instrument command: :CHANnel<n>:RANGe <range>

Function arguments



Parameter

Variable Type

Description



$A546XX_handle

Object

Handle created by the A546XX_Initialize() function.



$chanNum

Integer

The channel # to set the range for.

Valid ranges are 1 - 4.



$chanRange

Float

The channel range defines the full-scale vertical axis of the selected channel. When using 1:1 probe attenuation, the range can be set to any value from:

· 16 mV to 40 V





Return parameters



Parameter

Variable Type

Description



None

-

-





A546XX_SetVertScale

Previous Top Next



* * *



A546XX_SetVertScale



Usage:

A546XX_SetVertScale($A546XX_handle, $chanNum, $voltsPerDiv)





Description:

Sets the vertical scale, or units per division, of the selected channel. If the probe attenuation is changed, the scale value is multiplied by the probe's attenuation factor.

Equivalent instrument command: :CHANnel<n>:RANGe <range>

Function arguments



Parameter

Variable Type

Description



$A546XX_handle

Object

Handle created by the A546XX_Initialize() function.



$chanNum

Integer

The channel # to set the scale for.

Valid ranges are 1 - 4.



$voltsPerDiv

Float

Volts per division. When using 1:1 probe attenuation, legal values for the scale range from:

· 2mV to 5V





Return parameters



Parameter

Variable Type

Description



None

-

-





A546XX_DisplayErase

Previous Top Next



* * *



A546XX_DisplayErase



Usage:

A546XX_DisplayErase ($A546XX_handle)





Description:

Clears the display and resets all associated measurements. If the oscilloscope is stopped, all currently displayed data is erased. If the oscilloscope is running, all the data in active channels and functions is erased.

Equivalent instrument command: :CDISplay

Function arguments



Parameter

Variable Type

Description



$A546XX_handle

Object

Handle created by the A546XX_Initialize() function.





Return parameters



Parameter

Variable Type

Description



None

-

-





A546XX_Simulate

Previous Top Next



* * *



A546XX_Simulate



Usage:

A546XX_Simulate($A546XX_handle, $sim)





Description:

If True, the driver does not perform I/O to the instrument, and returns simulated values for output parameters. Used for testing when instrument is not available.

Function arguments



Parameter

Variable Type

Description



$A546XX_handle

Object

Handle created by the A546XX_Initialize() function.



$sim

Boolean

Simulate status.





Return parameters



Parameter

Variable Type

Description



None

-

-





A546XX_Close

Previous Top Next



* * *



A546XX_Close



Usage:

A546XX_Close($A546XX_handle)





Description:

Closes the I/O session to the instrument. Driver methods and properties that access the instrument are not accessible after Close is called.

Function arguments



Parameter

Variable Type

Description



$A546XX_handle

Object

Handle created by the A546XX_Initialize() function.





Return parameters



Parameter

Variable Type

Description



None

-

-





A546XX_Initialize

Previous Top Next



* * *



A546XX_Initialize



Usage:

$A546XX_handle = A546XX_Initialize($resourceName,$IDQuery, $resetDevice, $optionString)





Description:

Creates a new IVI instrument driver session.

Function arguments



Parameter

Variable Type

Description



$resourceName

String

Opens a session to the specified device using the interface and address you specify for the resourceName parameter.



$IDQuery

Boolean

Valid values are True or False.

Specifies whether to verify the ID of the instrument.



$resetDevice

Boolean

Valid values are True or False.

Specifies whether to reset the instrument.



$optionString

String

The user can use the $optionString parameter to specify the initial values of certain IVI inherent attributes for the session. The format of an assignment in the $optionString parameter is 'Name=Value', where Name is one of:





· RangeCheck

· QuerytInstrStatus

· Cache

· Simulate

· RecordCoercions

· InterchangeCheck

· DriverSetup





Value is either true or false except for DriverSetup. If the Options String parameter contains an assignment for the Driver Setup attribute, the Initialize function assumes that everything following 'DriverSetup=' is part of the assignment.





Return parameters



Parameter

Variable Type

Description



$A546XX_handle

Object

Returns a handle that you use to identify the instrument in all subsequent instrument driver function calls.





Example(s):

$A546XX_handle = A546XX_Initialize("USB0::1689::871::C051871::0::INSTR", False, True, "RangeCheck=true,QueryInstrStatus=true");





A546XX_AutoScale

Previous Top Next



* * *



A546XX_AutoScale



Usage:

A546XX_AutoScale($A546XX_handle)





Description:

Performs an auto-setup on the instrument.

Equivalent instrument command: :AUToscale

Function arguments



Parameter

Variable Type

Description



$A546XX_handle

Object

Handle created by the A546XX_Initialize() function.





Return parameters



Parameter

Variable Type

Description



None

-

-





A546XX_FetchWaveformMeasurement

Previous Top Next



* * *



A546XX_FetchWaveformMeasurement



Usage:

$measurement = A546XX_FetchWaveformMeasurement($A546XX_handle, $chanNum, $function)





Description:

Fetches a specified waveform measurement for a specific channel from a previously initiated waveform acquisition.

Function arguments



Parameter

Variable Type

Description



$A546XX_handle

Object

Handle created by the A546XX_Initialize() function.



$chanNum

Integer

The channel # to take a measurement from.

Valid ranges are 1 - 4.



$function

String

Measurement to perform. Valid measurements are:

· "AMPLITUDE" – The VOLTAGE_HIGH less the VOLTAGE_LOW in volts over the entire waveform.

· “DELAY” – This measure the delay between any two user specified edges. The edges can be from the same waveform or different waveform. Currently only valid between channels 1 and 2.

· “DUTYCYCLENEG” - The ratio of the WIDTH_NEG to the PERIOD of an integer number of cycles in the waveform expressed as a percentage.

· “DUTYCYCLEPOS” - The ratio of the WIDTH_POS width to the PERIOD of an integer number of cycles in the waveform expressed as a percentage.

· “FALLTIME” – The length of time for a falling edge of the signal to fall from the high reference level to the low reference level. The units are seconds.

· “FREQUENCY” – The frequency of one complete cycle in the waveform. The units are hertz.

· “FREQUENCYCOUNTER” – The High precision frequency measurement made with an internal frequency counter.

· “OVERSHOOT” – The relative waveform distortion which follows an edge transition.

· “PERIOD” – The length of time of one complete cycle in the waveform. The units are seconds.

· “PHASE” – This measures the relative phase of one waveform with respect to the period on another waveform. Currently only valid between channels 1 and 2.

· “PRESHOOT” – The relative waveform distortion which precedes an edge transition.

· “RISETIME” – The length of time for a rising edge of the signal to rise from the low reference level to the high reference level. The units are seconds.

· “TIMEATMAX” – The time of the maximum amplitude found in the entire waveform. The units are seconds.

· “TIMEATMIN” – The time of the minimum amplitude found in the entire waveform. The units are seconds.

· “TIMEATVALUE” – This returns the Time at the vertical value specified by the A546XX_TimeAtValueConfig function.

· “TIMEOFEDGE” – This returns the Time at the edge crossing specified by the A546XX_TimeOfEdgeConfig function.

· “VALUEATTIME” – This returns the Value at the time specified by the A546XX_ValueAtTimeConfig function.

· “VOLTAGEAVG” – The arithmetic average in volts measured over the entire waveform. The units are volts. Note: The oscilloscope automatically switches between this and Voltage Cycle Average.

· “VOLTCYCLEAVG” – The arithmetic average in volts over an integer number of cycles in the waveform. The units are volts. Note: The oscilloscope automatically switches between this and Voltage Average.

· “VOLTCYCLERMS” – The true Root Mean Square voltage over an integer number of cycles in the waveform. The units are volts. The oscilloscope automatically switches between this and Voltage RMS if there is a cyclic waveform on the screen.

· “VOLTHIGH” – The voltage that corresponds to 100% when using the reference levels. The oscilloscope calculates this value using either the min/max or histogram methods. The units are Volts.

· “VOLTLOW” – The voltage that corresponds to 0% when using the reference levels. The oscilloscope calculates this value using either the min/max or histogram methods. The units are Volts.

· “VOLTMAX” – The maximum amplitude found in the entire waveform. The units are volts.

· “VOLTMIN” – The minimum amplitude found in the entire waveform. The units are volts.

· “VOLTPKTOPK” – Peak-to-Peak voltage; the absolute difference between the VOLTAGE_MAX and the VOLTAGE_MIN. The units are volts.

· “VOLTRMS” – The true Root Mean Square voltage of the entire waveform. The units are volts.Note: The oscilloscope automatically switches between this and Voltage Cycle RMS.

· “WIDTHNEG” – The length of time between the mid reference level points of a negative pulse in the waveform. The units are seconds.

· “WIDTHPOS” - The length of time between the mid reference level points of a positive pulse in the waveform. The units are seconds.





Return parameters



Parameter

Variable Type

Description



$measurement

Float

Measured/calculated value returned by function.





A546XX_ReadWaveformMeasurement

Previous Top Next



* * *



A546XX_ReadWaveformMeasurement



Usage:

$measurement = A546XX_ReadWaveformMeasurement($A546XX_handle, $chanNum, $function, $timeout)





Description:

Initiates a waveform acquisition, and returns a specified waveform measurement from a specific channel.

Function arguments



Parameter

Variable Type

Description



$A546XX_handle

Object

Handle created by the A546XX_Initialize() function.



$chanNum

Integer

The channel # to take a measurement from.

Valid ranges are 1 - 4.



$function

String

Measurement to perform. Valid measurements are:

· "AMPLITUDE" – The VOLTAGE_HIGH less the VOLTAGE_LOW in volts over the entire waveform.

· “DELAY” – This measure the delay between any two user specified edges. The edges can be from the same waveform or different waveform. Currently only valid between channels 1 and 2.

· “DUTYCYCLENEG” - The ratio of the WIDTH_NEG to the PERIOD of an integer number of cycles in the waveform expressed as a percentage.

· “DUTYCYCLEPOS” - The ratio of the WIDTH_POS width to the PERIOD of an integer number of cycles in the waveform expressed as a percentage.

· “FALLTIME” – The length of time for a falling edge of the signal to fall from the high reference level to the low reference level. The units are seconds.

· “FREQUENCY” – The frequency of one complete cycle in the waveform. The units are hertz.

· “FREQUENCYCOUNTER” – The High precision frequency measurement made with an internal frequency counter.

· “OVERSHOOT” – The relative waveform distortion which follows an edge transition.

· “PERIOD” – The length of time of one complete cycle in the waveform. The units are seconds.

· “PHASE” – This measures the relative phase of one waveform with respect to the period on another waveform. Currently only valid between channels 1 and 2.

· “PRESHOOT” – The relative waveform distortion which precedes an edge transition.

· “RISETIME” – The length of time for a rising edge of the signal to rise from the low reference level to the high reference level. The units are seconds.

· “TIMEATMAX” – The time of the maximum amplitude found in the entire waveform. The units are seconds.

· “TIMEATMIN” – The time of the minimum amplitude found in the entire waveform. The units are seconds.

· “TIMEATVALUE” – This returns the Time at the vertical value specified by the A546XX_TimeAtValueConfig function.

· “TIMEOFEDGE” – This returns the Time at the edge crossing specified by the A546XX_TimeOfEdgeConfig function.

· “VALUEATTIME” – This returns the Value at the time specified by the A546XX_ValueAtTimeConfig function.

· “VOLTAGEAVG” – The arithmetic average in volts measured over the entire waveform. The units are volts. Note: The oscilloscope automatically switches between this and Voltage Cycle Average.

· “VOLTCYCLEAVG” – The arithmetic average in volts over an integer number of cycles in the waveform. The units are volts. Note: The oscilloscope automatically switches between this and Voltage Average.

· “VOLTCYCLERMS” – The true Root Mean Square voltage over an integer number of cycles in the waveform. The units are volts. The oscilloscope automatically switches between this and Voltage RMS if there is a cyclic waveform on the screen.

· “VOLTHIGH” – The voltage that corresponds to 100% when using the reference levels. The oscilloscope calculates this value using either the min/max or histogram methods. The units are Volts.

· “VOLTLOW” – The voltage that corresponds to 0% when using the reference levels. The oscilloscope calculates this value using either the min/max or histogram methods. The units are Volts.

· “VOLTMAX” – The maximum amplitude found in the entire waveform. The units are volts.

· “VOLTMIN” – The minimum amplitude found in the entire waveform. The units are volts.

· “VOLTPKTOPK” – Peak-to-Peak voltage; the absolute difference between the VOLTAGE_MAX and the VOLTAGE_MIN. The units are volts.

· “VOLTRMS” – The true Root Mean Square voltage of the entire waveform. The units are volts.Note: The oscilloscope automatically switches between this and Voltage Cycle RMS.

· “WIDTHNEG” – The length of time between the mid reference level points of a negative pulse in the waveform. The units are seconds.

· “WIDTHPOS” - The length of time between the mid reference level points of a positive pulse in the waveform. The units are seconds.



$timeout

Boolean

Sets instrument-specific values for timeout times. TRUE for immediate timeout times or FALSE for infinite timeout times.





Return parameters



Parameter

Variable Type

Description



$measurement

Float

Measured/calculated value returned by function.





A546XX_TimeAtValueConfig

Previous Top Next



* * *



A546XX_TimeAtValueConfig



Usage:

A546XX_TimeAtValueConfig($A546XX_handle, $value, $occurrence, $slope)





Description:

Configures instrument-specific options for the TimeAtValue measurement.

Equivalent instrument command: :MEASure:TVALue? <value>

Function arguments



Parameter

Variable Type

Description



$A546XX_handle

Object

Handle created by the A546XX_Initialize() function.



$value

Float

The voltage for the TimeAtValue measurement.



$occurrence

Integer

The occurrence count for the TimeAtValue measurement.



$slope

String

The edge slope for a TimeAtValue measurement.

Valid values:

· “POSITIVE”

· “NEGATIVE”





Return parameters



Parameter

Variable Type

Description



None

-

-





A546XX_TimeOfEdgeConfig

Previous Top Next



* * *



A546XX_TimeOfEdgeConfig



Usage:

A546XX_TimeOfEdgeConfig($A546XX_handle, $occurrence, $slope)





Description:

Configures instrument-specific options for the TimeOfEdge measurement.

Equivalent instrument command: :MEASure:TEDGe?<slope><occurrence>

Function arguments



Parameter

Variable Type

Description



$A546XX_handle

Object

Handle created by the A546XX_Initialize() function.



$occurrence

Integer

The occurrence count for the TimeAtEdge measurement.



$slope

String

The edge slope for a TimeAtEdge measurement.

Valid values:

· “POSITIVE”

· “NEGATIVE”





Return parameters



Parameter

Variable Type

Description



None

-

-





A546XX_ValueAtTimeConfig

Previous Top Next



* * *



A546XX_ValueAtTimeConfig



Usage:

A546XX_ValueAtTimeConfig($A546XX_handle, $time)





Description:

Configures instrument-specific options for the ValueAtTime measurement.

Equivalent instrument command: :MEASure:VTIMe? <time >





Function arguments



Parameter

Variable Type

Description



$A546XX_handle

Object

Handle created by the A546XX_Initialize() function.



$time

Float

The time (in seconds) used to make the ValueAtTime measurement.





Return parameters



Parameter

Variable Type

Description



None

-

-





A546XX_RefLevel

Previous Top Next



* * *



A546XX_RefLevel



Usage:

A546XX_RefLevel($A546XX_handle, $low, $mid, $high)





Description:

Configures the low, mid, and high reference levels for waveform measurements.

Equivalent instrument command: :MEAS:DEF THR, <Low>,<Mid>,<High>

Function arguments



Parameter

Variable Type

Description



$A546XX_handle

Object

Handle created by the A546XX_Initialize() function.



$low

Float

The low reference level the oscilloscope uses for waveform measurements.



$mid

Float

The middle reference level the oscilloscope uses for waveform measurements.



$high

Float

The high reference level the oscilloscope uses for waveform measurements.





Return parameters



Parameter

Variable Type

Description



None

-

-





A546XX_Clear

Previous Top Next



* * *



A546XX_Clear



Usage:

A546XX_Clear($A546XX_handle)





Description:

Clears all event registers and error queue. The enable registers are unaffected.

Equivalent instrument command: *CLS

Function arguments



Parameter

Variable Type

Description



$A546XX_handle

Object

Handle created by the A546XX_Initialize() function.





Return parameters



Parameter

Variable Type

Description



None

-

-





Supported Instruments Oscilloscopes

Previous Top Next



* * *



Supported Instruments





5000 series 6000 series 7000 series

DSO5012A MSO6012A MSO7032A

DSO5014A DSO6012A DSO7032A

DSO5032A MSO6014A MSO7034A

DSO5034A - tested DSO6014A DSO7034A

DSO5052A DSO6014L MSO7052A

DSO5054A MSO6032A DSO7052A

54621A DSO6032A MSO7054A

54621D MSO6034A DSO7054A

54622A DSO6034A MSO7102A

54622D DSO6034L DSO7102A

54624A MSO6052A MSO7104A

54641A DSO6052A DSO7104A

54641D MSO6054A

54642A DSO6054A

54642D DSO6054L

MSO6102A

DSO6102A

MSO6104A

DSO6104A

DSO6104L





Driver version





IVI-COM Driver Version 1.3.8.0





A546XX_OPC

Previous Top Next



* * *



A546XX_OPC



Usage:

A546XX_OPC($A546XX_handle, $timeout)





Description:

Does not return until previously started operations complete or $timeout milliseconds of time have expired. Use after an operation that takes a variable amount of time instead of a Sleep() function.

Equivalent instrument command: *OPC | *WAI

Function arguments



Parameter

Variable Type

Description



$A546XX_handle

Object

Handle created by the A546XX_Initialize() function.



$timeout

Integer

How long to wait, in milliseconds, for all the operations started in the instrument to complete.





Return parameters



Parameter

Variable Type

Description



None

-

-





Example(s):

A546XX_OPC($A546XX_handle, 10000);





A546XX_RecallState

Previous Top Next



* * *



A546XX_RecallState



Usage:

A546XX_RecallState($A546XX_handle, $memloc)





Description:

Restore the instrument to a state previously stored in the instrument's internal memory.

Equivalent instrument command: *RCL <Identifier>

Function arguments



Parameter

Variable Type

Description



$A546XX_handle

Object

Handle created by the A546XX_Initialize() function.



$memloc

Integer

A # which identifies which one of many internal memory locations was used to store the instrument's state.

Valid registers are 0 – 9.





Return parameters



Parameter

Variable Type

Description



None

-

-





A546XX_SCPI_Read

Previous Top Next



* * *



A546XX_SCPI_Read

Usage:

$message = A546XX_SCPI_Read($A546XX_handle)



Description:

Retrieves string from instrument. Used to get the response from a SCPI query sent with the A546XX_SCPI_Write function.

Function arguments



Parameter

Variable Type

Description



$A546XX_handle

Object

Handle created by the A546XX_Initialize() function.





Return parameters



Parameter

Variable Type

Description



$message

String

Return string from instrument.





A546XX_SCPI_Write

Previous Top Next



* * *



A546XX_SCPI_Write



Usage:

A546XX_SCPI_Write($A546XX_handle, $command)





Description:

Sends a string directly to instrument. Used to communicate with and control instrument using SCPI commands.

Function arguments



Parameter

Variable Type

Description



$A546XX_handle

Object

Handle created by the A546XX_Initialize() function.



$command

String

SCPI command to send to instrument. See "SCPI Command Reference" from Agilent for a list of valid commands.





Return parameters



Parameter

Variable Type

Description



None

-

-





Example(s):





A546XX_SCPI_Write($InstrHandle, "*RST"); //resets device





A546XX_SaveState

Previous Top Next



* * *



A546XX_SaveState



Usage:

A546XX_SaveState($A546XX_handle, $memloc)





Description:

Save the instrument's state the instrument's internal memory.

Equivalent instrument command: *SAV <Identifier>

Function arguments



Parameter

Variable Type

Description



$A546XX_handle

Object

Handle created by the A546XX_Initialize() function.



$memloc

Integer

A # which identifies which one of many internal memory locations is to be used to store the instrument's state.

Valid registers are 0 – 9.





Return parameters



Parameter

Variable Type

Description



None

-

-





A546XX_EdgeSource

Previous Top Next



* * *



A546XX_TrigEdgeSource



Usage:

A546XX_TrigEdgeSource($A546XX_handle, $trigSource [, $overrideString] )





Description:

The source the oscilloscope monitors for the trigger event.

Equivalent instrument command: : TRIGger:EDGE:SOURce <Source>

Function arguments



Parameter

Variable Type

Description



$A546XX_handle

Object

Handle created by the A546XX_Initialize() function.



$trigSource

String

Source of trigger.

Valid values:

· “CHAN1”

· “CHAN2”

· "CHAN3"

· "CHAN4"

· “EXT”

· “LINE”

· "OVERRIDE"1





1Used to manually specify a SCPI string for command



$overrideString

String

Optional string sent when OVERRIDE source is specified.





Return parameters



Parameter

Variable Type

Description



None

-

-





Ex : A546XX_TrigEdgeSource($A546XX_handle, "CHAN1");





Ex: A546XX_TrigEdgeSource($A546XX_handle, "OVERRIDE", "UserChannel1");





A546XX_TrigCont

Previous Top Next



* * *



A546XX_TrigCont



Usage:

A546XX_TrigCont($A546XX_handle, $continuous)





Description:

If True, the oscilloscope continuously initiates waveform acquisition.

Equivalent instrument command: :RUN

Function arguments



Parameter

Variable Type

Description



$A546XX_handle

Object

Handle created by the A546XX_Initialize() function.



$continuous

Boolean

Turns continuous mode on when True, off when False.





Return parameters



Parameter

Variable Type

Description



None

-

-





A546XX_TrigCoupling

Previous Top Next



* * *



A546XX_TrigCoupling



Usage:

A546XX_TrigCoupling($A546XX_handle, $couplingType)





Description:

How the oscilloscope couples the trigger source.

Equivalent instrument command: :TRIGger:COUPling

Function arguments



Parameter

Variable Type

Description



$A546XX_handle

Object

Handle created by the A546XX_Initialize() function.



$couplingType

String

How to couple to the trigger source.

Valid values:

· “AC”

· “DC”

· "HFREJECT"

· "LFREJECT"

· "NOISEREJECT"

· “TV”





Return parameters



Parameter

Variable Type

Description



None

-

-





A546XX_TrigEdgeSlope

Previous Top Next



* * *



A546XX_TrigEdgeSlope



Usage:

A546XX_TrigEdgeSlope($A546XX_handle, $trigSlope)





Description:

Whether a rising or a falling edge triggers the oscilloscope.

Equivalent instrument command: :TRIGger:EDGE:SLOPe <Slope>

Function arguments



Parameter

Variable Type

Description



$A546XX_handle

Object

Handle created by the A546XX_Initialize() function.



$trigSlope

String

Slope type that causes trigger.

Valid values:

· “NEGATIVE”

· “POSITIVE”

· "EITHER"1

· "ALTERNATE" 2





1Not supported by 5000 series.

2 Triggers will occur alternately on the rising and falling edges.





Return parameters



Parameter

Variable Type

Description



None

-

-





A546XX_TrigHoldoff

Previous Top Next



* * *



A546XX_TrigHoldoff



Usage:

A546XX_TrigHoldoff($A546XX_handle, $holdoff)





Description:

The length of time to wait after detecting a trigger before enabling the trigger subsystem again.

Equivalent instrument command: :TRIGger:HOLDoff <holdoff_time>

Function arguments



Parameter

Variable Type

Description



$A546XX_handle

Object

Handle created by the A546XX_Initialize() function.



$holdoff

Float

Wait time.

Valid ranges are 60ns to 10s.





Return parameters



Parameter

Variable Type

Description



None

-

-





A546XX_TrigLevel

Previous Top Next



* * *



A546XX_TrigLevel



Usage:

A546XX_TrigLevel($A546XX_handle, $trigLevel)





Description:

The voltage threshold for the trigger sub-system.

Equivalent instrument command: :TRIGger:LEVel <Level>

Function arguments



Parameter

Variable Type

Description



$A546XX_handle

Object

Handle created by the A546XX_Initialize() function.



$trigLevel

Float

Voltage level of trigger.





Return parameters



Parameter

Variable Type

Description



None

-

-





A546XX_Reset

Previous Top Next



* * *



A546XX_Reset



Usage:

A546XX_Reset($A546XX_handle)





Description:

Places the instrument in a known state and configures instrument options on which the IVI specific driver depends (for example, enabling/disabling headers). For an IEEE 488.2 instrument, Reset sends the command string *RST to the instrument.

Equivalent instrument command: *RST

Function arguments



Parameter

Variable Type

Description



$A546XX_handle

Object

Handle created by the A546XX_Initialize() function.





Return parameters



Parameter

Variable Type

Description



None

-

-





LeCroyDSO_CaptureScopeImageToFile

Previous Top Next



* * *



LeCroyDSO_CaptureScopeImageToFile



Usage:

$status = LeCroyDSO_CaptureScopeImageToFile($lecroyObject, $imageFormat, $pathAndFileName);



Description:

This function transfers a screen image from the instrument and stores it in a file on the PC.



Remarks:

· This function requires the LeCroy Digital Storage Oscilloscope ActiveX libraries (activeDSO) to be installed on the system.

· Communication with the instrument must already have been established using the LeCroyDSO_Connect function.



Function arguments



Parameter

Variable Type

Description



$lecroyObject

Object

The handle of the instrument returned from the LeCroyDSO_Connect function.



$imageFormat

String

The file format for the image. Select BMP, TIFF, JPG, etc. If the selected format is not supported, the image will be stored as a bitmap.



$pathAndFileName

String

The path AND file name for the image file.





Return parameters



Parameter

Variable Type

Description



$status

Boolean

The return status of the function.





Example(s):

// Connect to the instrument.

$scope = "IP:10.1.1.2";

$lecroyObject = LeCroyDSO_Connect($scope);





// Get and save the screen image.

$imageFormat = "JPG";

$pathAndFileName = "C:\Images\ScopeImage.jpg";

LeCroyDSO_CaptureScopeImageToFile($lecroyObject, $imageFormat, $pathAndFileName);





LeCroyDSO_Connect

Previous Top Next



* * *



LeCroyDSO_Connect



Usage:

$lecroyObject = LeCroyDSO_Connect($lecroyAddress);



Description:

This function creates a connection to the LeCroy instrument via IP, GPIB or serial port.



Remarks:

· This function requires the LeCroy Digital Storage Oscilloscope ActiveX libraries (activeDSO) to be installed on the system.



Function arguments



Parameter

Variable Type

Description



$lecroyAddress

String

The GPIB,IP, or RS232 address of the Lecroy scope. Prefix with either GPIB: IP: COM1: etc. Note that you must use a colon between the connection type and the actual address.





Return parameters



Parameter

Variable Type

Description



$lecroyObject

Object

The ActiveDSO object for use in other functions.





Example(s):

// Connect to the instrument.

$scope = "IP:10.1.1.2";

$lecroyObject = LeCroyDSO_Connect($scope);





LeCroyDSO_DeviceClear

Previous Top Next



* * *



LeCroyDSO_DeviceClear



Usage:

$status = LeCroyDSO_DeviceClear($lecroyObject, $rebootDevice);



Description:

This function will send a device clear signal to the instrument.



Remarks:

· This function requires the LeCroy Digital Storage Oscilloscope ActiveX libraries (activeDSO) to be installed on the system.

· Any unread response in the device's output buffer will be cleared.



Function arguments



Parameter

Variable Type

Description



$lecroyObject

Object

The handle of the instrument returned from the LeCroyDSO_Connect function.



$rebootDevice

Boolean

If this argument is true then the instrument will reboot. This can take up to 20 seconds to complete depending on the instrument.





Return parameters



Parameter

Variable Type

Description



$status

Boolean

The return status of the function.





Example(s):

// Connect to the instrument.

$scope = "IP:10.1.1.2";

$lecroyObject = LeCroyDSO_Connect($scope);





// Clear and reboot the instrument.

$status = LeCroyDSO_DeviceClear($lecroyObject, true);





LeCroyDSO_Disconnect

Previous Top Next



* * *



LeCroyDSO_Disconnect



Usage:

$status = LeCroyDSO_Disconnect($lecroyObject);



Description:

This function will perform necessary termination functions and disconnect from the instrument.





Remarks:

· This function requires the LeCroy Digital Storage Oscilloscope ActiveX libraries (activeDSO) to be installed on the system.



Function arguments



Parameter

Variable Type

Description



$lecroyObject

Object

The handle of the instrument returned from the LeCroyDSO_Connect function.





Return parameters



Parameter

Variable Type

Description



$status

Boolean

The return status of the function.





Example(s):

// Connect to the instrument.

$scope = "IP:10.1.1.2";

$lecroyObject = LeCroyDSO_Connect($scope);





// Work with the instrument here.





// Disconnect from the instrument.

$status = LeCroyDSO_Disconnect($lecroyObject);





LeCroyDSO_GetAllProperties

Previous Top Next



* * *



LeCroyDSO_GetAllProperties



Usage:

($prop1, $prop2, $prop3, ... , $prop9) = LeCroyDSO_GetAllProperties($lecroyObject);



Description:

This function will return all of the properties of the connected instrument.



Remarks:

· This function requires the LeCroy Digital Storage Oscilloscope ActiveX libraries (activeDSO) to be installed on the system.

· This was tested on a Waverunner Oscilloscope. Other instruments may not return all of the properties. Check the instrument manual for number of properties and order.



Function arguments



Parameter

Variable Type

Description



$lecroyObject

Object

The handle of the instrument returned from the LeCroyDSO_Connect function.





Return parameters



Parameter

Variable Type

Description



$prop1, $prop2, $prop3, ... , $prop9

String

Each property returned as a string.





Example(s):

// Connect to the instrument.

$scope = "IP:10.1.1.2";

$lecroyObject = LeCroyDSO_Connect($scope);





// Clear and reboot the instrument.

($prop1, $prop2, $prop3, $prop4, $prop5, $prop6, $prop7, $prop8, $prop9) = LeCroyDSO_GetAllProperties($lecroyObject);





// The properties of a LeCroy Waverunner oscilloscope are returned in the following order:

// BinTransferSupport

// BytesRead

// ConnectionType

// DeviceModel

// ErrorFlag

// ErrorString

// NumberOfChannels

// ScreenType

// SerialNumber





LeCroyDSO_GetByteWaveform

Previous Top Next



* * *



LeCroyDSO_GetByteWaveform



Usage:

$waveform = LeCroyDSO_GetByteWaveform($lecroyObject, $traceName, $maxBytes, $arrayChosen);



Description:

This function will read a raw 8-bit waveform from the instrument into a Byte array.





Remarks:

· This function requires the LeCroy Digital Storage Oscilloscope ActiveX libraries (activeDSO) to be installed on the system.

· The trace name may vary depending on the instrument. Check the manual for valid trace names.



Function arguments



Parameter

Variable Type

Description



$lecroyObject

Object

The handle of the instrument returned from the LeCroyDSO_Connect function.



$traceName

String

The name of the trace to return. Typical trace names include: C1, C2, C3, C4, M1, M2, M3, M4, TA, TB, TC, TD TD, F1, Z1, ...



$maxBytes

Integer

The maximum number of bytes to read.



$arrayChosen

Integer

For dual array waveform: 0 = first array, 1 = second array.





Return parameters



Parameter

Variable Type

Description



$waveform

Array

The array of bytes representing the selected waveform.





Example(s):

// Connect to the instrument.

$scope = "IP:10.1.1.2";

$lecroyObject = LeCroyDSO_Connect($scope);





// Return the first 100 bytes of channel 1.

$traceName = "C1";

$maxBytes = 100;

$arrayChosen = 0;

$waveform = LeCroyDSO_GetByteWaveform($lecroyObject, $traceName, $maxBytes, $arrayChosen);





LeCroyDSO_GetCommaDelimString

Previous Top Next



* * *



LeCroyDSO_GetCommaDelimString



Usage:

$returnData = LeCroyDSO_GetCommaDelimString($lecroyObject, $commandString, $index);





Description:

This function will send a command to the instrument, read the result and return the specified element from the comma delimited string the instrument sends back.





Remarks:

· This function requires the LeCroy Digital Storage Oscilloscope ActiveX libraries (activeDSO) to be installed on the system.

· The command string can be SCPI VB Script commands as outlined in the instrument command reference manual.



Function arguments



Parameter

Variable Type

Description



$lecroyObject

Object

The handle of the instrument returned from the LeCroyDSO_Connect function.



$commandString

String

The command string to send to the instrument.



$index

Integer

The element number to return. The first element is 0.





Return parameters



Parameter

Variable Type

Description



$returnData

String

The element returned from the string.





Example(s):

// Connect to the instrument.

$scope = "IP:10.1.1.2";

$lecroyObject = LeCroyDSO_Connect($scope);





// Return the amplitude of the signal on channel 1 of a Waverunner oscilloscope.

$commandString = "CH1:AMPL?";

$index = 1;

$returnData = LeCroyDSO_GetCommaDelimString($lecroyObject, $commandString, $index);





// For example, if the instrument returned: AMPL,1.02V,OK

// This function would return 1.02V





LeCroyDSO_GetIntegerWaveform

Previous Top Next



* * *



LeCroyDSO_GetIntegerWaveform



Usage:

$waveform = LeCroyDSO_GetIntegerWaveform($lecroyObject, $traceName, $maxInts, $arrayChosen);



Description:

This function will read a raw 16-bit waveform from the instrument into an integer array.





Remarks:

· This function requires the LeCroy Digital Storage Oscilloscope ActiveX libraries (activeDSO) to be installed on the system.

· The trace name may vary depending on the instrument. Check the manual for valid trace names.

· The waveforms read by this function cannot be sent back to the instrument.



Function arguments



Parameter

Variable Type

Description



$lecroyObject

Object

The handle of the instrument returned from the LeCroyDSO_Connect function.



$traceName

String

The name of the trace to return. Typical trace names include: C1, C2, C3, C4, M1, M2, M3, M4, TA, TB, TC, TD TD, F1, Z1, ...



$maxInts

Integer

The maximum number of integers to read.



$arrayChosen

Integer

For dual array waveform: 0 = first array, 1 = second array.





Return parameters



Parameter

Variable Type

Description



$waveform

Array

The array of integers representing the selected waveform.





Example(s):

// Connect to the instrument.

$scope = "IP:10.1.1.2";

$lecroyObject = LeCroyDSO_Connect($scope);





// Return the first 100 integers of channel 1.

$traceName = "C1";

$maxInts = 100;

$arrayChosen = 0;

$waveform = LeCroyDSO_GetIntegerWaveform($lecroyObject, $traceName, $maxInts, $arrayChosen);





LeCroyDSO_GetNativeWaveform

Previous Top Next



* * *



LeCroyDSO_GetNativeWaveform



Usage:

$waveform = LeCroyDSO_GetNativeWaveform($lecroyObject, $traceName, $maxBytes, $xferAsWords, $blockName);





Description:

This function will read a waveform from the instrument in its native binary form.





Remarks:

· This function requires the LeCroy Digital Storage Oscilloscope ActiveX libraries (activeDSO) to be installed on the system.

· The trace name may vary depending on the instrument. Check the manual for valid trace names.



Function arguments



Parameter

Variable Type

Description



$lecroyObject

Object

The handle of the instrument returned from the LeCroyDSO_Connect function.



$traceName

String

The name of the trace to return. Typical trace names include: C1, C2, C3, C4, M1, M2, M3, M4, TA, TB, TC, TD TD, F1, Z1, ...



$maxBytes

Integer

The maximum number of bytes to read.



$xferAsWords

Boolean

Set true to transmit data as 16-bit words, false to transfer as 8-bit bytes.



$blockName

String

The name of the block of data to return. Valid names:

· DESC

· TEXT

· TIME

· DAT1

· DAT2

· ALL





Return parameters



Parameter

Variable Type

Description



$waveform

Array

The array of bytes or integers representing the selected waveform.





Example(s):

// Connect to the instrument.

$scope = "IP:10.1.1.2";

$lecroyObject = LeCroyDSO_Connect($scope);





// Return the first 100 bytes of channel 1.

$traceName = "C1";

$maxBytes = 100;

$xferAsWords = true;

$blockName = "ALL";

$waveform = LeCroyDSO_GetNativeWaveform($lecroyObject, $traceName, $maxBytes, $xferAsWords, $blockName);





LeCroyDSO_GetParameterValue

Previous Top Next



* * *



LeCroyDSO_GetParameterValue



Usage:

$paramValue = LeCroyDSO_GetParameterValue($lecroyObject);



Description:

This function must be called after the LeCroyDSO_WriteString function as it will not take a command string. Essentially it will perform the same task as the LeCroyDSO_GetCommaDelimString, but only return the value at index 1.



Remarks:

· This function requires the LeCroy Digital Storage Oscilloscope ActiveX libraries (activeDSO) to be installed on the system.



Function arguments



Parameter

Variable Type

Description



$lecroyObject

Object

The handle of the instrument returned from the LeCroyDSO_Connect function.





Return parameters



Parameter

Variable Type

Description



$paramValue

String

The value at index 1 of the return string.





Example(s):

// Connect to the instrument.

$scope = "IP:10.1.1.2";

$lecroyObject = LeCroyDSO_Connect($scope);





// Send query to the instrument.

$query = "CH1:AMPL?";

$status = LeCroyDSO_WriteString($lecroyObject, $query, true);





// Get the returned value.

$paramValue = LeCroyDSO_GetParameterValue($lecroyObject);





LeCroyDSO_GetScaledWaveform

Previous Top Next



* * *



LeCroyDSO_GetScaledWaveform



Usage:

$waveform = LeCroyDSO_GetScaledWaveform($lecroyObject, $traceName, $maxInts, $arrayChosen);



Description:

This function will read a scaled 16-bit waveform from the instrument into an array.





Remarks:

· This function requires the LeCroy Digital Storage Oscilloscope ActiveX libraries (activeDSO) to be installed on the system.

· The trace name may vary depending on the instrument. Check the manual for valid trace names.



Function arguments



Parameter

Variable Type

Description



$lecroyObject

Object

The handle of the instrument returned from the LeCroyDSO_Connect function.



$traceName

String

The name of the trace to return. Typical trace names include: C1, C2, C3, C4, M1, M2, M3, M4, TA, TB, TC, TD TD, F1, Z1, ...



$maxInts

Integer

The maximum number of integers to read.



$arrayChosen

Integer

For dual array waveform: 0 = first array, 1 = second array.





Return parameters



Parameter

Variable Type

Description



$waveform

Array

The array of integers representing the selected waveform.





Example(s):

// Connect to the instrument.

$scope = "IP:10.1.1.2";

$lecroyObject = LeCroyDSO_Connect($scope);





// Return the first 100 integers of channel 1.

$traceName = "C1";

$maxInts = 100;

$arrayChosen = 0;

$waveform = LeCroyDSO_GetScaledWaveform($lecroyObject, $traceName, $maxInts, $arrayChosen);





LeCroyDSO_GetScaledWaveformWithTimes

Previous Top Next



* * *



LeCroyDSO_GetScaledWaveformWithTimes



Usage:

$waveform = LeCroyDSO_GetScaledWaveformWithTimes($lecroyObject, $traceName, $maxInts, $arrayChosen);



Description:

This function will read a scaled 16-bit waveform from the instrument into an array with the time and amplitude for each point.





Remarks:

· This function requires the LeCroy Digital Storage Oscilloscope ActiveX libraries (activeDSO) to be installed on the system.

· The trace name may vary depending on the instrument. Check the manual for valid trace names.



Function arguments



Parameter

Variable Type

Description



$lecroyObject

Object

The handle of the instrument returned from the LeCroyDSO_Connect function.



$traceName

String

The name of the trace to return. Typical trace names include: C1, C2, C3, C4, M1, M2, M3, M4, TA, TB, TC, TD TD, F1, Z1, ...



$maxInts

Integer

The maximum number of integers to read.



$arrayChosen

Integer

For dual array waveform: 0 = first array, 1 = second array.





Return parameters



Parameter

Variable Type

Description



$waveform

Array

The array of integers representing the selected waveform.





Example(s):

// Connect to the instrument.

$scope = "IP:10.1.1.2";

$lecroyObject = LeCroyDSO_Connect($scope);





// Return the first 1000 points of channel 1.

$traceName = "C1";

$maxInts = 1000;

$arrayChosen = 0;

$waveform = LeCroyDSO_GetScaledWaveformWithTimes($lecroyObject, $traceName, $maxInts, $arrayChosen);





LeCroyDSO_ReadBinary

Previous Top Next



* * *



LeCroyDSO_ReadBinary



Usage:

$data = LeCroyDSO_ReadBinary($lecroyObject, $maxBytes);



Description:

This function must be called after the LeCroyDSO_WriteString function as it will not take a command string. This function will read a binary response from the instrument.





Remarks:

· This function requires the LeCroy Digital Storage Oscilloscope ActiveX libraries (activeDSO) to be installed on the system.



Function arguments



Parameter

Variable Type

Description



$lecroyObject

Object

The handle of the instrument returned from the LeCroyDSO_Connect function.



$maxBytes

Integer

The maximum number of bytes to read.





Return parameters



Parameter

Variable Type

Description



$data

Integer

That data returned from the function converted to an integer.





Example(s):

// Connect to the instrument.

$scope = "IP:10.1.1.2";

$lecroyObject = LeCroyDSO_Connect($scope);





// Return the first 5 bytes.

$maxBytes = 5;

$waveform = LeCroyDSO_ReadBinary($lecroyObject, $maxBytes);





LeCroyDSO_ReadString

Previous Top Next



* * *



LeCroyDSO_ReadString



Usage:

$returnString = LeCroyDSO_ReadBinary($lecroyObject, $maxStringLength);



Description:

This function will read a string response from the instrument.





Remarks:

· This function requires the LeCroy Digital Storage Oscilloscope ActiveX libraries (activeDSO) to be installed on the system.

· If there are more characters to be read than the indicated $maxStringLength, the remaining characters will be left unread in the instrument buffer.

· You need to execute a command with LeCroyDSO_WriteString before executing this function. Otherwise, you will get a null or the results from the last command.



Function arguments



Parameter

Variable Type

Description



$lecroyObject

Object

The handle of the instrument returned from the LeCroyDSO_Connect function.



$maxStringLength

Integer

The maximum number of bytes to read.





Return parameters



Parameter

Variable Type

Description



$returnString

String

That data returned from the function converted to an integer.





Example(s):

// Connect to the instrument.

$scope = "IP:10.1.1.2";

$lecroyObject = LeCroyDSO_Connect($scope);





// Get the results from a PK-PK command from a Waverunner o'scope.

$command = "CH1:VPP?";

LeCroyDSO_WriteString($lecroyObject, $command, true);





// Return the first 5 bytes.

$maxStringLength = 5;

$waveform = LeCroyDSO_ReadString($lecroyObject, $maxStringLength);





LeCroyDSO_RefreshImage

Previous Top Next



* * *



LeCroyDSO_RefreshImage



Usage:

$status = LeCroyDSO_RefreshImage($lecroyObject);



Description:

This function will update the control's image with the current contents of the instrument's display.



Remarks:

· This function requires the LeCroy Digital Storage Oscilloscope ActiveX libraries (activeDSO) to be installed on the system.



Function arguments



Parameter

Variable Type

Description



$lecroyObject

Object

The handle of the instrument returned from the LeCroyDSO_Connect function.





Return parameters



Parameter

Variable Type

Description



$status

Boolean

The return status of the function.





Example(s):

// Connect to the instrument.

$scope = "IP:10.1.1.2";

$lecroyObject = LeCroyDSO_Connect($scope);





// Update the Image

$status = LeCroyDSO_RefreshImage($lecroyObject);





LeCroyDSO_SetRemoteMode

Previous Top Next



* * *



LeCroyDSO_SetRemoteMode



Usage:

$status = LeCroyDSO_SetRemoteMode($lecroyObject, $remoteMode);



Description:

This function will set the instrument into remote or local mode.





Remarks:

· This function requires the LeCroy Digital Storage Oscilloscope ActiveX libraries (activeDSO) to be installed on the system.



Function arguments



Parameter

Variable Type

Description



$lecroyObject

Object

The handle of the instrument returned from the LeCroyDSO_Connect function.



$remoteMode

Integer

The mode to set the instrument to: 0 = Local Mode, 1 = Remote Mode.





Return parameters



Parameter

Variable Type

Description



$status

Boolean

The return status of the function.





Example(s):

// Connect to the instrument.

$scope = "IP:10.1.1.2";

$lecroyObject = LeCroyDSO_Connect($scope);





// Set instrument to remote mode

$status = LeCroyDSO_SetRemoteMode($lecroyObject, 1);





LeCroyDSO_SetWaveformTransfer

Previous Top Next



* * *



LeCroyDSO_SetWaveformTransfer



Usage:

$status = LeCroyDSO_SetWaveformTransfer($lecroyObject, $firstIndexPoint, $sparsingFactor, $segmentNumber);



Description:

This function will configure various parameters that control the transfer of waveforms from the instrument to the PC.





Remarks:

· This function requires the LeCroy Digital Storage Oscilloscope ActiveX libraries (activeDSO) to be installed on the system.



Function arguments



Parameter

Variable Type

Description



$lecroyObject

Object

The handle of the instrument returned from the LeCroyDSO_Connect function.



$firstIndexPoint

Integer

The index of the first point to transfer (0 = first point).



$sparsingFactor

Integer

The sparsing factor (0 = all points, 2 = skip every other point).



$segmentNumber

Integer

Segment number to transfer (0 = all segments).





Return parameters



Parameter

Variable Type

Description



$status

Boolean

The return status of the function.





Example(s):

// Connect to the instrument.

$scope = "IP:10.1.1.2";

$lecroyObject = LeCroyDSO_Connect($scope);





// Set instrument to start at index 10, transfer all points of all segments.

$firstIndexPoint = 10;

$sparsingFactor = 0;

$segmentNumber = 0;

$status = LeCroyDSO_SetWaveformTransfer($lecroyObject, $firstIndexPoint, $sparsingFactor, $segmentNumber);





LeCroyDSO_TransferFile

Previous Top Next



* * *



LeCroyDSO_TransferFile



Usage:

$status = LeCroyDSO_TransferFile($lecroyObject, $remoteDevice, $destinationFileWithPath, $sourceFileWithPath);





Description:

This function will transfer a file from the PC to a mass storage device on the instrument.





Remarks:

· This function requires the LeCroy Digital Storage Oscilloscope ActiveX libraries (activeDSO) to be installed on the system.



Function arguments



Parameter

Variable Type

Description



$lecroyObject

Object

The handle of the instrument returned from the LeCroyDSO_Connect function.



$remoteDevice

String

The device name on the instrument. Choices:

· CARD

· HDD

· FLPY



$destinationFileWithPath

String

The name and path of the destination file on the instrument.



$sourceFileWithPath

String

The name and path of the source file on the PC.





Return parameters



Parameter

Variable Type

Description



$status

Boolean

The return status of the function.





Example(s):

// Connect to the instrument.

$scope = "IP:10.1.1.2";

$lecroyObject = LeCroyDSO_Connect($scope);





// Send a file from the PC to the Instrument.

$device = "HDD";

$dest = "D:\\dso\\dest.txt";

$source = "C:\\pc\\src.txt";

$status = LeCroyDSO_TransferFile($lecroyObject, $device, $dest, $source);





LeCroyDSO_TransferFileToPC

Previous Top Next



* * *



LeCroyDSO_TransferFileToPC



Usage:

$status = LeCroyDSO_TransferFileToPC($lecroyObject, $remoteDevice, $remoteFilePath, $localFilePath);





Description:

This function will transfer a file from a mass storage device on the instrument to the PC.





Remarks:

· This function requires the LeCroy Digital Storage Oscilloscope ActiveX libraries (activeDSO) to be installed on the system.



Function arguments



Parameter

Variable Type

Description



$lecroyObject

Object

The handle of the instrument returned from the LeCroyDSO_Connect function.



$remoteDevice

String

The device name on the instrument. Choices:

· CARD

· HDD

· FLPY



$remoteFilePath

String

The name and path of the source file on the instrument.



$localFilePath

String

The name and path of the destination file on the PC.





Return parameters



Parameter

Variable Type

Description



$status

Boolean

The return status of the function.





Example(s):

// Connect to the instrument.

$scope = "IP:10.1.1.2";

$lecroyObject = LeCroyDSO_Connect($scope);





// Send a file from the Instrument to the PC.

$device = "HDD";

$remoteFile = "D:\\dso\\remotefile.txt";

$localFile = "C:\\pc\\localfile.txt";

$status = LeCroyDSO_TransferFileToPC($lecroyObject, $device, $remoteFile, $localFile);





LeCroyDSO_WriteBinary

Previous Top Next



* * *



LeCroyDSO_WriteBinary



Usage:

$status = LeCroyDSO_WriteBinary($lecroyObject, $binaryData, $numBytes, $eoi);





Description:

This function will send a binary data block to the instrument with or without a terminating EOI (End or Identity).





Remarks:

· This function requires the LeCroy Digital Storage Oscilloscope ActiveX libraries (activeDSO) to be installed on the system.



Function arguments



Parameter

Variable Type

Description



$lecroyObject

Object

The handle of the instrument returned from the LeCroyDSO_Connect function.



$binaryData

Object

Byte Array, Data Array to send to the device.



$numBytes

Integer

The number of bytes to send.



$eoi

Boolean

Whether to terminate the send with EOI.





Return parameters



Parameter

Variable Type

Description



$status

Boolean

The return status of the function.





Example(s):

// Connect to the instrument.

$scope = "IP:10.1.1.2";

$lecroyObject = LeCroyDSO_Connect($scope);





//Request the waveform data for Channel 1.

LeCroyDSO_WriteString("CHDR OFF;MSIZ 500;C1:WF? ALL", true);

//Read Channel 1 data.

$waveForm = LeCroyDSO_ReadBinary(2000);

//Prepare the DSO to receive a waveform in M2.

LeCroyDSO_WriteString("M2:WF ", false);

//Send the waveform, terminate with EOI.

LeCroyDSO_WriteBinary($lecroyObject, $waveForm, 2000, true);





LeCroyDSO_WriteString

Previous Top Next



* * *



LeCroyDSO_WriteString



Usage:

$status = LeCroyDSO_WriteBinary($lecroyObject, $command, $eoi);





Description:

This function will send a string command to the instrument.





Remarks:

· This function requires the LeCroy Digital Storage Oscilloscope ActiveX libraries (activeDSO) to be installed on the system.

· Commands can be sent in SCPI or VBS syntax. See the instrument manual for a list of available commands.

The syntax for VBS commands can be found using LeCroy's Xstream browser. Please refer to the automation manual for details as this library is extensive and offers tremendous flexibility. For queries you MUST use the variable Return in the command. The LeCroy libraries will only return a value to this variable. It can be retrieved with the LecroyDSO_ReadString function.

Function arguments



Parameter

Variable Type

Description



$lecroyObject

Object

The handle of the instrument returned from the LeCroyDSO_Connect function.



$command

String

Text string to send to the instrument.



$eoi

Boolean

Whether to send EOI at the end of the command. If $eoi is true, the instrument will start to interpret the command immediately. This is normally the desired behavior.





Return parameters



Parameter

Variable Type

Description



$status

Boolean

The return status of the function.





Example(s):

// Connect to the instrument.

$scope = "IP:10.1.1.2";

$lecroyObject = LeCroyDSO_Connect($scope);





//Send a command with SCPI syntax setting CH 1 to 5 volts per division.

$status = LeCroyDSO_WriteString($lecroyObject, ”CH1:VDIV = 5”, true);





//Send a command with VBS syntax setting CH 1 to 5 volts per division.

$status = LeCroyDSO_WriteString($lecroyObject, ”VBS app.channel1.voltsdiv = 5”, true);





//Send a command with VBS syntax querying Channel one’s volts per div.

$status = LeCroyDSO_WriteString($lecroyObject, ”VBS? Return = app.channel1.voltsdiv”, true);

$voltsPerDiv = LeCroyDSO_ReadString($lecroyObject, $maxStringLength);





LeCWJ300A_AutoSetup

Previous Top Next



* * *



LeCWJ300A_AutoSetup



Usage:

LeCWJ300A_AutoSetup($Handle);



Description:

This function requires the LeCroy Digital Storage Oscilloscope ActiveX libraries (activeDSO) to be installed on the system.



This function performs and automatic setup on the oscilloscope.





Remarks:

· Automatic Setup will clear out any user specified setups on the oscilloscope.



Function arguments



Parameter

Variable Type

Description



$Handle

Object

The handle of the instrument returned from the initialization function.





Return parameters



Parameter

Variable Type

Description



None





Example(s):

LeCWJ300A_AutoSetup($Handle);





LeCWJ300A_ChannelCouple

Previous Top Next



* * *



LeCWJ300A_ChannelCouple



Usage:

LeCWJ300A_ChannelCouple($Handle, $channelName, $coupleType);



Description:

This function requires the LeCroy Digital Storage Oscilloscope ActiveX libraries (activeDSO) to be installed on the system.



This function sets the coupling mode for the specified channel on the oscilloscope.





Remarks:

· Some coupling modes are not available on all models in the WaveJet 300A series.

· The coupling mode and channel names are not case sensitive. Upper or lower case will work.

· Channels 3 and 4 are not available on all models in the WaveJet 300A series.



Function arguments



Parameter

Variable Type

Description



$Handle

Object

The handle of the instrument returned from the initialization function.



$channelName

String

The name of the channel to set the vertical resolution of.

Values: CH1, CH2, CH3, CH4



$coupleType

String

The coupling mode for the specified channel.

Values: AC1M, GND, DC1M, DC50





Return parameters



Parameter

Variable Type

Description



None





Example(s):

LeCWJ300A_ChannelCouple($Handle, "CH1", "AC1M");





LeCWJ300A_ChannelVertical

Previous Top Next



* * *



LeCWJ300A_ChannelVertical



Usage:

LeCWJ300A_ChannelVertical($Handle, $channelName, $resolution, $unit);



Description:

This function requires the LeCroy Digital Storage Oscilloscope ActiveX libraries (activeDSO) to be installed on the system.



This function sets the vertical resolution for the specified channel on the screen of the oscilloscope.





Remarks:

· The resolution is set in volts / division.

· The units and channel names are not case sensitive. Upper or lower case will work.

· Channels 3 and 4 are not available on all models in the WaveJet 300A series.



Function arguments



Parameter

Variable Type

Description



$Handle

Object

The handle of the instrument returned from the initialization function.



$channelName

String

The name of the channel to set the vertical resolution of.

Values: CH1, CH2, CH3, CH4



$resolution

Integer

The number of units for each vertical division on the screen. Must be a whole number.



$unit

String

The voltage units to use for the vertical divisions.

Values: uV, mV, V





Return parameters



Parameter

Variable Type

Description



None





Example(s):

LeCWJ300A_ChannelVertical($Handle, "CH1", 500, "mV");





LeCWJ300A_Close

Previous Top Next



* * *



LeCWJ300A_Close



Usage:

LeCWJ300A_Close($Handle);



Description:

This function requires the LeCroy Digital Storage Oscilloscope ActiveX libraries (activeDSO) to be installed on the system.



This function closes and releases the instrument driver session. It also deallocates any memory resources the driver uses.





Remarks:

· After closing, communications must be re-initialized before any more commands can be sent.



Function arguments



Parameter

Variable Type

Description



$Handle

Object

The handle of the instrument returned from the initialization function.





Return parameters



Parameter

Variable Type

Description



None





Example(s):

LeCWJ300A_Close($Handle);





LeCWJ300A_HorizResolution

Previous Top Next



* * *



LeCWJ300A_HorizResolution



Usage:

LeCWJ300A_HorizResolution($Handle, $resolution, $unit);



Description:

This function requires the LeCroy Digital Storage Oscilloscope ActiveX libraries (activeDSO) to be installed on the system.



This function sets the horizontal resolution (timebase) for the screen of the oscilloscope.





Remarks:

· The resolution is set in time / division.

· The units are not case sensitive. Upper or lower case will work.



Function arguments



Parameter

Variable Type

Description



$Handle

Object

The handle of the instrument returned from the initialization function.



$resolution

Integer

The number of units for each horizontal division on the screen. Must be a whole number.



$unit

String

The time units to use for the horizontal divisions.

Values: NS, US, MS, S





Return parameters



Parameter

Variable Type

Description



None





Example(s):

LeCWJ300A_HorizResolution($Handle, 10, "ms");





LeCWJ300A_Init

Previous Top Next



* * *



LeCWJ300A_Init



Usage:

$Handle = LeCWJ300A_Init(COM#, $baudRate, $dataBits, $parity, $stopBits);

$Handle = LeCWJ300A_Init(GPIB[#], $GPIBAddress);

$Handle = LeCWJ300A_Init(IP, $IPAddress);



Description:

This function requires the LeCroy Digital Storage Oscilloscope ActiveX libraries (activeDSO) to be installed on the system.



This function opens the instrument for communication.





Remarks:

· This function was tested with a LeCroy WaveJet 324A oscilloscope.

· All WaveJet 300A series oscilloscopes can be controlled with this library.

· Different arguments are used depending on type of communication bus:

· Serial Port

· GPIB bus

· Ethernet.





Serial Bus: Function arguments



Parameter

Variable Type

Description



COM#

String

The COM port number the instrument is connected to. Replace the "#" with the number.



$baudRate

String

The baud rate of the serial port.

Values: 300, 1200, 2400, 4800, 9600, 19200, 57600, 115000



$dataBits

String

The number of data bits in the data.

Values: 7, 8



$parity

String

The parity of the data.

Values: N, O, E



$stopBits

String

The number of stop bits for the data.

Values: 1, 1.5, 2





GBIP Bus: Function arguments



Parameter

Variable Type

Description



GPIB[#]

String

The GPIB bus to connect to. The # is the bus number and is optional if there is only one GPIB adapter.



$GPIBAddress

String

The bus address of the oscilloscope.





Ethernet: Function arguments



Parameter

Variable Type

Description



IP

String

Informs the driver to use an ethernet connection.



$IPAddress

String

The IP address of the oscilloscope.

Format: aaa.bbb.ccc.ddd





Return parameters



Parameter

Variable Type

Description



$Handle

Object

Returns a session handle that is used to identify the device in all subsequent function calls.





Example(s):

$Handle = LeCWJ300A_Init("COM6", "19200", "8", "N", "1");

$Handle = LeCWJ300A_Init("GPIB1", "14");

$Handle = LeCWJ300A_Init("IP", "192.168.10.5");





LeCWJ300A_MeasureAuto

Previous Top Next



* * *



LeCWJ300A_MeasureAuto



Usage:

LeCWJ300A_MeasureAuto($Handle, $autoMeasureStatus);



Description:

This function requires the LeCroy Digital Storage Oscilloscope ActiveX libraries (activeDSO) to be installed on the system.



This function turns on or off the automatic measurement display on the oscilloscope.





Remarks:

· The automatic measurement status is not case sensitive. Upper or lower case will work.

· Setting up a measurement or stopping all measurements (using the LeCWJ300A_MeasureSelect command) will also change whether the automatic measurement display is visible.



Function arguments



Parameter

Variable Type

Description



$Handle

Object

The handle of the instrument returned from the initialization function.



$autoMeasureStatus

String

The setting of the auto measurement display visibility.

Values: OFF, ON





Return parameters



Parameter

Variable Type

Description



None





Example(s):

LeCWJ300A_MeasureAuto($Handle, "ON");





LeCWJ300A_MeasureRead

Previous Top Next



* * *



LeCWJ300A_MeasureRead



Usage:

$Reading = LeCWJ300A_MeasureRead($Handle, $measurementLetter);



Description:

This function requires the LeCroy Digital Storage Oscilloscope ActiveX libraries (activeDSO) to be installed on the system.



This function returns one automatic measurement value from the oscilloscope.





Remarks:

· The measurement letter is not case sensitive. Upper or lower case will work.

· The measurements are set up using the LeCWJ300A_MeasureSelect command.

· The units of the measurement depend on the type of measurement and are not returned.



Function arguments



Parameter

Variable Type

Description



$Handle

Object

The handle of the instrument returned from the initialization function.



$measurementLetter

String

The letter of the automatic measurement to return the value from.





Return parameters



Parameter

Variable Type

Description



$Reading

Float

The value of the automatic measurement in floating point mode.





Example(s):

$Reading = LeCWJ300A_MeasureRead($Handle, "A");





LeCWJ300A_MeasureSelect

Previous Top Next



* * *



LeCWJ300A_MeasureSelect



Usage:

LeCWJ300A_MeasureSelect($Handle, $measureLetter, $channelName, $measureType);



Description:

This function requires the LeCroy Digital Storage Oscilloscope ActiveX libraries (activeDSO) to be installed on the system.



This function sets up one automatic measurement on the oscilloscope.





Remarks:

· The measurement letter, channel name and measurement type are not case sensitive. Upper or lower case will work.

· The measurement unit is specific to the type of measurement being made and will not be returned.

· A maximum of four measurements can be set up.

· Defining an automatic measurement will automatically turn on the measurements display on the oscilloscope screen.

· If all measurements are set to OFF, the measurements display on the oscilloscope screen will be turned off.

· Turning off a channel will also clear any measurements that are made on that channel.

· Once a measurement is set up, its value can be read using the LeCWJ300A_MeasureRead command.

· Channels 3 and 4 are not available on all models in the WaveJet 300A series.



Function arguments



Parameter

Variable Type

Description



$Handle

Object

The handle of the instrument returned from the initialization function.



$tmeasureLetter

String

The letter to assign this measurement to.

Values: A, B, C, D



$channelName

String

The channel to use for the defined measurement.

Also used to turn a measurement OFF.

Values: OFF, CH1, CH2, CH3, CH4, MATH



$measureType

String

What to measure on the specified channel.

Values: MAX, MIN, P-P, VRMS, CVRMS, VMEAN, CVMEAN, TOP, BASE, T-B, +OSHOT, -OSHOT, TR20-80, TF80-20, TR10-90, TF90-10, FREQ, PERIOD, +PULSE, -PULSE, +WIDTH, -WIDTH, DUTY, INTEGRAL, SKEW, DELTAT





Return parameters



Parameter

Variable Type

Description



None





Example(s):

LeCWJ300A_MeasureSelect($Handle, "A", "CH1", "FREQ");

LeCWJ300A_MeasureSelect($Handle, "A", "OFF", "MIN");





LeCWJ300A_Reset

Previous Top Next



* * *



LeCWJ300A_Reset



Usage:

LeCWJ300A_Reset($Handle);



Description:

This function requires the LeCroy Digital Storage Oscilloscope ActiveX libraries (activeDSO) to be installed on the system.



This function resets the oscilloscope.





Remarks:

· Resetting the oscilloscope will lose all current settings.



Function arguments



Parameter

Variable Type

Description



$Handle

Object

The handle of the instrument returned from the initialization function.





Return parameters



Parameter

Variable Type

Description



None





Example(s):

LeCWJ300A_Reset($Handle);





LeCWJ300A_StringRead

Previous Top Next



* * *



LeCWJ300A_StringRead



Usage:

$Reading = LeCWJ300A_StringRead($Handle);



Description:

This function requires the LeCroy Digital Storage Oscilloscope ActiveX libraries (activeDSO) to be installed on the system.



This function returns one string from the oscilloscope.





Remarks:

· A previous command must have been sent to cause the oscilloscope to send a string. Use the LeCWJ300A_StringWrite function to send a command.





Function arguments



Parameter

Variable Type

Description



$Handle

Object

The handle of the instrument returned from the initialization function.





Return parameters



Parameter

Variable Type

Description



$Reading

String

The string read from the oscilloscope.





Example(s):

$Reading = LeCWJ300A_MeasureRead($Handle);





LeCWJ300A_StringWrite

Previous Top Next



* * *



LeCWJ300A_StringWrite



Usage:

LeCWJ300A_StringWrite($Handle, $writeString);



Description:

This function requires the LeCroy Digital Storage Oscilloscope ActiveX libraries (activeDSO) to be installed on the system.



This function sends a string to the oscilloscope.





Remarks:

· The string must be correctly formatted for the oscilloscope.

· If the string is a command that will return data, use the LeCWJ300A_StringRead function to get the data.



Function arguments



Parameter

Variable Type

Description



$Handle

Object

The handle of the instrument returned from the initialization function.



$writeString

String

The string to send to the oscilloscope.





Return parameters



Parameter

Variable Type

Description



None





Example(s):

LeCWJ300A_StringWrite($Handle, "*IDN?");





LeCWJ300A_TraceMode

Previous Top Next



* * *



LeCWJ300A_TraceMode



Usage:

LeCWJ300A_TraceMode($Handle, $channelName, $traceMode);



Description:

This function requires the LeCroy Digital Storage Oscilloscope ActiveX libraries (activeDSO) to be installed on the system.



This function turns the specified trace OFF or ON on the oscilloscope display.





Remarks:

· The channel name and trace mode are not case sensitive. Upper or lower case will work.

· Turning off a channel that has automatic measurements performed on it will also turn off those automatic measurements.

· Channels 3 and 4 are not available on all models in the WaveJet 300A series.

Function arguments



Parameter

Variable Type

Description



$Handle

Object

The handle of the instrument returned from the initialization function.



$channelName

String

The channel name of the trace to turn off.

Values: CH1, CH2, CH3, CH4, MATH



$traceMode

String

The mode for the specified channel trace on the display.

Values: OFF, ON





Return parameters



Parameter

Variable Type

Description



None





Example(s):

LeCWJ300A_TraceMode($Handle, "CH2", "OFF");





LeCWJ300A_TriggerCouple

Previous Top Next



* * *



LeCWJ300A_TriggerCouple



Usage:

LeCWJ300A_TriggerCouple($Handle, $triggerCouple);



Description:

This function requires the LeCroy Digital Storage Oscilloscope ActiveX libraries (activeDSO) to be installed on the system.



This function sets the trigger coupling on the oscilloscope.





Remarks:

· The trigger coupling is not case sensitive. Upper or lower case will work.



Function arguments



Parameter

Variable Type

Description



$Handle

Object

The handle of the instrument returned from the initialization function.



$triggerCouple

String

The coupling mode for the trigger.

Values: AC, DC, HF, LF





Return parameters



Parameter

Variable Type

Description



None





Example(s):

LeCWJ300A_TriggerCouple($Handle, "AC");





LeCWJ300A_TriggerLevel

Previous Top Next



* * *



LeCWJ300A_TriggerLevel



Usage:

LeCWJ300A_TriggerLevel($Handle, $triggerLevel, $triggerUnit);



Description:

This function requires the LeCroy Digital Storage Oscilloscope ActiveX libraries (activeDSO) to be installed on the system.



This function sets the trigger level on the oscilloscope.





Remarks:

· The trigger units are not case sensitive. Upper or lower case will work.



Function arguments



Parameter

Variable Type

Description



$Handle

Object

The handle of the instrument returned from the initialization function.



$triggerLevel

Integer

The voltage level to set the trigger to. Must be a whole number.



$triggerUnit

String

The voltage units to use for the trigger level.

Values: uV, mV, V





Return parameters



Parameter

Variable Type

Description



None





Example(s):

LeCWJ300A_TriggerLevel($Handle, 2, "V");





LeCWJ300A_TriggerMode

Previous Top Next



* * *



LeCWJ300A_TriggerMode



Usage:

LeCWJ300A_TriggerMode($Handle, $triggerMode);



Description:

This function requires the LeCroy Digital Storage Oscilloscope ActiveX libraries (activeDSO) to be installed on the system.



This function sets the trigger mode on the oscilloscope.





Remarks:

· The trigger mode is not case sensitive. Upper or lower case will work.



Function arguments



Parameter

Variable Type

Description



$Handle

Object

The handle of the instrument returned from the initialization function.



$triggerMode

String

The mode for the trigger.

Values: AUTO, NORMAL, SINGLE, STOP





Return parameters



Parameter

Variable Type

Description



None





Example(s):

LeCWJ300A_TriggerMode($Handle, "NORMAL");





LeCWJ300A_TriggerType

Previous Top Next



* * *



LeCWJ300A_TriggerType



Usage:

LeCWJ300A_TriggerType($Handle, $triggerType);



Description:

This function requires the LeCroy Digital Storage Oscilloscope ActiveX libraries (activeDSO) to be installed on the system.



This function sets the trigger type on the oscilloscope.





Remarks:

· The trigger type is not case sensitive. Upper or lower case will work.



Function arguments



Parameter

Variable Type

Description



$Handle

Object

The handle of the instrument returned from the initialization function.



$triggerType

String

The type for the trigger.

Values: EDGE, PULSE, PERIOD, COUNT, TV





Return parameters



Parameter

Variable Type

Description



None





Example(s):

LeCWJ300A_TriggerType($Handle, "EDGE");





NI-SCOPE

Previous Top Next



* * *



For any application you write, you must open a session to establish communication with the digitizer by using Initialize. When your program finishes, you must close the session with Close.



Initialize sets the driver and digitizer to a known state. This function may take a significant amount of time compared to all other NI-SCOPE functions, so you should not include it in a loop when repeatedly acquiring data. Ideally, your program should call Initialize one time. If the reset parameter is set to TRUE, the digitizer resets to the default state, which may include resetting relays and resetting time stamp counters.





Resetting the digitizer may cause wear on the relays, so you should reset only when necessary.





Close is essential for freeing resources, including deallocating memory, destroying threads, and freeing operating system resources. You should close every session that you initialize, even if an error occurs during the program. While debugging your application, it is common to abort execution before you reach Close. While aborting the execution should not cause problems, NI does not recommend doing so.





Acquisition Functions

Previous Top Next



* * *



You can acquire data by calling either a Read function or a Fetch function. The Read functions are the easiest way to acquire data from your digitizer. They initiate an acquisition, wait for it to complete, and retrieve the data.



Fetch functions assume that the acquisition has already been initiated. Both Read and Fetch functions accept a timeout parameter and a number of points to retrieve. They will efficiently sleep while waiting for the number of requested points to be acquired.





Using a Fetch function in conjunction with the acquisition status function allows you to perform other operations while waiting for the acquisition to finish. When acquisition status reports the operation is complete, you can call the Fetch function with any timeout value to retrieve the data.





You must use Fetch functions to acquire binary data because Read functions allow retrieval of scaled data only. Fetching binary data is faster and requires less user memory than fetching scaled data.





If you want to use a software trigger to start the acquisition, you must use a Fetch function because Read functions block until the operation is complete.





NI_Scope_Abort

Previous Top Next



* * *



NI_Scope_Abort



Usage:

$ErrorCode = NI_Scope_Abort($NI_ScopeHandle);



Description:

This function requires NI Scope drivers to be installed on the system.

This function aborts an acquisition and returns the digitizer to the Idle state. Call this function if the digitizer times out waiting for a trigger.



Remarks:

· This function is tested with a NI PCI-5122 device.

· When there occurs an error during the execution of the low level NI-Scope functions, Jabil Test will fail and return the error message.

· The function will verify if the given parameter exists, otherwise Jabil Test fails and returns the error message.



Result:

$ErrorCode = NI_Scope_Abort($NI_ScopeHandle);

Function arguments



Parameter

Variable Type

Description



$NI_ScopeHandle

Object

The instrument handle you obtain from NI_Scope_Initialize that identifies a particular instrument's session.





Return parameters



Parameter

Variable Type

Description



$ErrorCode

Integer

Reports the status of this operation. To obtain a text description of the status code, call NI_Scope_ErrorMessage. To obtain additional information concerning the error condition, use NI_Scope_GetError and NI_Scope_ClearError. The general meaning of the status code is as:

· 0: success

· Positive value: warning

· Negative value: errors





Example(s):

$ErrorCode = NI_Scope_Abort($NI_ScopeHandle);





NI_Scope_AcquisitionStatus

Previous Top Next



* * *



NI_Scope_AcquisitionStatus



Usage:

($ErrorCode, $acquisitionStatus, $Status) = NI_Scope_AcquisitionStatus($NI_ScopeHandle);



Description:

This function requires NI Scope drivers to be installed on the system.

This function returns the status information about the acquisition.



Remarks:

· This function is tested with a NI PCI-5122 device.

· When there occurs an error during the execution of the low level NI-Scope functions, Jabil Test will fail and return the error message.

· The function will verify if the given parameter exists, otherwise Jabil Test fails and returns the error message.



Result:

($ErrorCode, $acquisitionStatus, $Status) = NI_Scope_AcquisitionStatus($NI_ScopeHandle);

Function arguments



Parameter

Variable Type

Description



$NI_ScopeHandle

Object

The instrument handle you obtain from NI_Scope_Initialize that identifies a particular instrument's session.





Return parameters



Parameter

Variable Type

Description



$ErrorCode

Integer

Reports the status of this operation. To obtain a text description of the status code, call NI_Scope_ErrorMessage. To obtain additional information concerning the error condition, use NI_Scope_GetError and NI_Scope_ClearError. The general meaning of the status code is as:

· 0: success

· Positive value: warning

· Negative value: errors



$Status

Integer

· 1 (means acquisition completed)

· 0 (means acquisition in progress)

-1 (means acquisition status unknown)



$acquisitionStatus

String

Is the status of the acquisition.

Possible return values:

· Acquisition completed

· Acquisition in progress

· Acquisition status unknown





Example(s):

($ErrorCode,$Status, $acquisitionStatus) = NI_Scope_AcquisitionStatus($NI_ScopeHandle);





NI_Scope_Commit

Previous Top Next



* * *



NI_Scope_Commit



Usage:

$ErrorCode = NI_Scope_Commit($NI_ScopeHandle);



Description:

This function requires NI Scope drivers to be installed on the system.

This function commits to hardware all the parameter settings associated with the task. Use this function if you want a parameter change to be immediately reflected in the hardware. This function is supported for the NI 5122/5124 only.



Remarks:

· This function is tested with a NI PCI-5122 device.

· When there occurs an error during the execution of the low level NI-Scope functions, Jabil Test will fail and return the error message.

· The function will verify if the given parameter exists, otherwise Jabil Test fails and returns the error message.



Result:

$ErrorCode = NI_Scope_Commit($NI_ScopeHandle);

Function arguments



Parameter

Variable Type

Description



$NI_ScopeHandle

Object

The instrument handle you obtain from NI_Scope_Initialize that identifies a particular instrument's session.





Return parameters



Parameter

Variable Type

Description



$ErrorCode

Integer

Reports the status of this operation. To obtain a text description of the status code, call NI_Scope_ErrorMessage. To obtain additional information concerning the error condition, use NI_Scope_GetError and NI_Scope_ClearError. The general meaning of the status code is as:

· 0: success

· Positive value: warning

· Negative value: errors





Example(s):

$ErrorCode = NI_Scope_Commit($NI_ScopeHandle);





NI_Scope_ConfigureAcquisitionRecord

Previous Top Next



* * *



NI_Scope_ConfigureAcquisitionRecord



Usage:

$ErrorCode = NI_Scope_ConfigureAcquisitionRecord($NI_ScopeHandle, $TimePerRecord, $MinNumPoints, $AcquisitionStartTime);



Description:

This function requires NI Scope drivers to be installed on the system.

This function configures the most commonly configured attributes of the instrument acquisition subsystem.



Remarks:

· This function is tested with a NI PCI-5122 device.

· When there occurs an error during the execution of the low level NI-Scope functions, Jabil Test will fail and return the error message.

· The function will verify if the given parameter exists, otherwise Jabil Test fails and returns the error message.



Result:

$ErrorCode = NI_Scope_ConfigureAcquisitionRecord($NI_ScopeHandle, $TimePerRecord, $MinNumPoints, $AcquisitionStartTime);

Function arguments



Parameter

Variable Type

Description



$NI_ScopeHandle

Object

The instrument handle you obtain from NI_Scope_Initialize that identifies a particular instrument's session.



$timePerRecord

Double

Specifies the time per record in seconds.



$minNumPoints

Integer

Pass the minimum number of points you require in the record for each channel. Call NI_Scope_ActualRecordLength to obtain the actual record length used.



$acquisitionStartTime

Double

Specifies the position of the first point in the waveform record relative to the trigger event.





Return parameters



Parameter

Variable Type

Description



$ErrorCode

Integer

Reports the status of this operation. To obtain a text description of the status code, call NI_Scope_ErrorMessage. To obtain additional information concerning the error condition, use NI_Scope_GetError and NI_Scope_ClearError. The general meaning of the status code is as:

· 0: success

· Positive value: warning

· Negative value: errors





Example(s):

$timePerRecord = New("Float", 1.0);

$minNumPoints = New("Integer", 6000);

$acquisitionStartTime = New("Float", 0.0);

$ErrorCode = NI_Scope_ConfigureAcquisitionRecord($NI_ScopeHandle, $timePerRecord, $minNumPoints, $acquisitionStartTime);





NI_Scope_Fetch

Previous Top Next



* * *



NI_Scope_Fetch



Usage:

($ErrorCode, $WaveForms, $NumberOfWaveforms, $WaveFormsInfo) = NI_Scope_Fetch($NI_ScopeHandle, $measureChannel, $measureTimeOut, $ActualRecordLength);



Description:

This function requires NI Scope drivers to be installed on the system.

Returns the waveform from a previously initiated acquisition that the digitizer acquires for the specified channel. This function returns scaled voltage waveforms. This function may return multiple waveforms depending on the number of channels, the acquisition type, and the number of records you specify.

Unlike Read functions, Fetch functions (NI_Scope_Fetch and NI_Scope_FetchMeasurement) acquire data asynchronously. That means these functions store data on your digitizer until you need it, which frees up your computer to perform other tasks and allows for better system performance. However, fetching requires additional functions that initiate waveform acquisitions and query your board to see if the acquisition is complete.



To fetch data, write a program that follows these general steps:

· Create a new instrument session using NI_Scope_Initialize.

· Configure your digitizer with NI-SCOPE Configuration functions.

· Call NI_Scope_ActualRecordLength to find the actual number of points your digitizer acquires for each channel.

· Call NI_Scope_InitiateAcquisition to initiate a waveform acquisition. Data will be acquired simultaneously on all enabled channels.

· Call NI_Scope_AcquisitionStatus in a loop to check if the acquisition is complete or in progress. This step is useful if you want to perform other tasks during the acquisition. The Fetch functions can also accept a timeout to force NI-SCOPE to wait until the acquisition is complete.

· Call the Fetch function you need. You can call multiple fetches if you are acquiring data from more than one channel or measurement.

· Call NI_Scope_Close to close the current session.





Remarks:

· This function is tested with a NI PCI-5122 device.

· When there occurs an error during the execution of the low level NI-Scope functions, Jabil Test will fail and return the error message.

· The function will verify if the given parameter exists, otherwise Jabil Test fails and returns the error message.



Result:

($ErrorCode, $WaveForms, $NumberOfWaveforms, $WaveFormsInfo) = NI_Scope_Fetch($NI_ScopeHandle, $measureChannel, $measureTimeOut, $ActualRecordLength);

Function arguments



Parameter

Variable Type

Description



$NI_ScopeHandle

Object

The instrument handle you obtain from NI_Scope_Initialize that identifies a particular instrument's session.



$measureChannel

String

The channel you will acquire data from; it may be a single channel, such as "0" or "1", or a list of channels such as "0,1".



$measureTimeOut

Double

The time to wait in seconds for data to be acquired. Using 0 for this parameter tells NI-SCOPE to fetch whatever is currently available.



$ActualRecordLength

Integer

The maximum number of samples to fetch for each waveform. If the acquisition finishes with fewer points than requested, partial data will be returned.





Return parameters



Parameter

Variable Type

Description



$ErrorCode

Integer

Reports the status of this operation. To obtain a text description of the status code, call NI_Scope_ErrorMessage. To obtain additional information concerning the error condition, use NI_Scope_GetError and NI_Scope_ClearError. The general meaning of the status code is as:

· 0: success

· Positive value: warning

· Negative value: errors



$WaveForms

Array

Returns an array whose length is the numSamples times number of waveforms. Call NI_Scope_ActualNumWfms to determine the number of waveforms.

NI-SCOPE returns this data sequentially, so all record 0 waveforms are first.

For example, with a channel list of 0,1, you would have the following index values:

· index 0 = record 0, channel 0

· index x = record 0, channel 1

· index 2x = record 1, channel 0

· index 3x = record 1, channel 1

· Where x = the record length

Call NI_Scope_ActualNumWfms to determine the number of waveforms. Call NI_Scope_ActualMeasWfmSize to determine the size of each waveform.



$NumberOfWaveforms

Integer

Returns the number of records times the number of channels



$WaveFormsInfo

Array

Returns an array of structures with the following timing and scaling information about each waveform:

· relativeInitialX: the time (in seconds) from the trigger to the first sample in the fetched waveform

· absoluteInitialX: timestamp (in seconds) of the first fetched sample that is comparable between records and acquisitions; your digitizer must support continuous acquisition

· xIncrement: the time between points in the acquired waveform in seconds

· actualSamples: the actual number of samples fetched and placed in the waveform array

· gain: the gain factor of the given channel; useful for scaling binary data with the following formula: voltage = binary data * gain factor + offset

· offset: the offset factor of the given channel; useful for scaling binary data with the following formula: voltage = binary data * gain factor + offset





Call NI_Scope_ActualNumWfms to determine the size of this array. Call NI_Scope_GetWaveformInfo to get the value of the returned structure.





Example(s):

($ErrorCode, $WaveForms, $NumberOfWaveforms, $WaveFormsInfo) = NI_Scope_Fetch($NI_ScopeHandle, "0", 1.0, 2000);





NI_Scope_GetMeasureData

Previous Top Next



* * *



NI_Scope_GetMeasureData



Usage:

($MeasureData, $ArrayOffsetMeasurePosition, $ArrayOffsetMeasureDuration, $NumberRecords, $RecordLength, $HorizontalTimePerRecord, $SampleRate, $ReferencePosition) = NI_Scope_Analyze($NI_ScopeHandle, $WaveForms, $Index, $StartMeasurePosition , $MeasureDuration);



Description:

This function requires NI Scope drivers to be installed on the system.

This function gets a specific part of a waveform array and returns that part as an array. That array can then be analyzed. (get the mean value of the array, get the maximum value of the array, get the minimum value of the array, filtering, ...)



Remarks:

· This function is tested with a NI PCI-5122 device.

· When there occurs an error during the execution of the low level NI-Scope functions, Jabil Test will fail and return the error message.

· The function will verify if the given parameter exists, otherwise Jabil Test fails and returns the error message.



Result:

($MeasureData, $ArrayOffsetMeasurePosition, $ArrayOffsetMeasureDuration, $NumberRecords, $RecordLength, $HorizontalTimePerRecord, $SampleRate, $ReferencePosition) = NI_Scope_Analyze($NI_ScopeHandle, $WaveForms, $Index, $StartMeasurePosition , $MeasureDuration);

Function arguments



Parameter

Variable Type

Description



$NI_ScopeHandle

Object

The instrument handle you obtain from NI_Scope_Initialize that identifies a particular instrument's session.



$WaveForms

Array

The fetched waveform data returned from NI_Scope_Fetch or other acquisition functions. This array should be of the type Double[]. If not, Jabil Test will return an error.



$Index

Integer

The fetched waveform is returned sequentially. This means that all record 0 waveforms are first. For example, with a channel list 0,1, you would have the following index values:

index 0 = record 0, channel 0

index x = record 0, channel 1

index 2x = record 1, channel 0

index 3x = record 1, channel 1

where x is the record length



$StartMeasurePosition

Float

The start measure position in the fetched waveform.

Unit: Seconds.



$MeasureDuration

Float

The measure duration of the fetched waveform.

Unit: Seconds.





Return parameters



Parameter

Variable Type

Description



$MeasureData

Array

An array containing the selected array range of the fetched waveform.



$ArrayOffsetMeasurePosition

Integer

The waveform index number of the start measure position.



$ArrayOffsetMeasureDuration

Integer

The array length of the measure duration



$NumberRecords

Integer

Returns the number of records the digitizer acquires.



$RecordLength

Integer

Returns the actual number of points the digitizer acquires



$HorizontalTimePerRecord

Float

Specifies the length of time that corresponds to the record length.

Unit: seconds.



$SampleRate

Float

Returns the sampling rate for the acquisition.



$ReferencePosition

Float

Returns the position of the Reference Event in the waveform record as a percentage of the record.





Example(s):

($MeasureData, $ArrayOffsetMeasurePosition, $ArrayOffsetMeasureDuration, $NumberRecords, $RecordLength, $HorizontalTimePerRecord, $SampleRate, $ReferencePosition) = NI_Scope_Analyze($NI_ScopeHandle, $WaveForms, 0, 0.000000, 0.000040);





NI_Scope_GetWaveformInfo

Previous Top Next



* * *



NI_Scope_GetWaveformInfo



Usage:

$Result = NI_Scope_GetWaveformInfo($WaveformIndex, $WaveformInfo, $WaveformInfoElement);



Description:

This function requires NI Scope drivers to be installed on the system.

This function get the needed value out of the WaveformInfo structure returned from a fetch or a read function.



Remarks:

· This function is tested with a NI PCI-5122 device.

· When there occurs an error during the execution of the low level NI-Scope functions, Jabil Test will fail and return the error message.

· The function will verify if the given parameter exists, otherwise Jabil Test fails and returns the error message.



Result:

$Result = NI_Scope_GetWaveformInfo($WaveformIndex, $WaveformInfo, $WaveformInfoElement);

Function arguments



Parameter

Variable Type

Description



$WaveformIndex

Integer

The waveform index where you want to get the element value from. The size of the WaveformInfo object is returned by the function NI_Scope_Fetch. You also can get the size by NI_Scope_ActualNumWfms.



$WaveformInfo

Object

This object is returned by a fetch or read function. This object is of the type struct niScopeWfmInfo. This structure is containing:

· relativeInitialX: the time (in seconds) from the trigger to the first sample in the fetched waveform

· absoluteInitialX: timestamp (in seconds) of the first fetched sample that is comparable between records and acquisitions; your digitizer must support continuous acquisition

· xIncrement: the time between points in the acquired waveform in seconds

· actualSamples: the actual number of samples fetched and placed in the waveform array

· gain: the gain factor of the given channel; useful for scaling binary data with the following formula: voltage = binary data * gain factor + offset

· offset: the offset factor of the given channel; useful for scaling binary data with the following formula: voltage = binary data * gain factor + offset



$WaveformInfoElement

String

The element of the structure to retrieve the value.





Return parameters



Parameter

Variable Type

Description



$Result

String

Contains the value of the structure element.





Example(s):

$gain = NI_Scope_GetWaveformInfo(0, $WaveFormsInfo, "gain");





NI_Scope_InitiateAcquisition

Previous Top Next



* * *



NI_Scope_InitiateAcquisition



Usage:

$ErrorCode = NI_Scope_InitiateAcquisition($NI_ScopeHandle);



Description:

This function requires NI Scope drivers to be installed on the system.

Initiates a waveform acquisition.

After calling this function, the digitizer leaves the Idle state and waits for a trigger. The digitizer acquires a waveform for each channel you enable with NI_Scope_ConfigureVertical.

Initiate Acquisition tells the digitizer to start acquiring data. During this function, the hardware is programmed with the configuration that you have chosen, and the digitizer begins sampling data and storing it to onboard memory. First, the digitizer samples the requested number of pretrigger points, ignoring any triggers that may occur. After the requested number of pretrigger points are stored, the digitizer waits for a trigger. While waiting, it continues to sample and store data into the circular, onboard memory. The trigger signals the digitizer to sample the exact number of posttrigger samples that you requested. After the posttrigger points are stored, the digitizer either stops sampling data or restarts this process for the next record. The digitizer stores the memory location of the first posttrigger sample, which allows it to calculate where the first pretrigger sample is located in memory when you fetch the waveform.



Remarks:

· This function is tested with a NI PCI-5122 device.

· When there occurs an error during the execution of the low level NI-Scope functions, Jabil Test will fail and return the error message.

· The function will verify if the given parameter exists, otherwise Jabil Test fails and returns the error message.



Result:

$ErrorCode = NI_Scope_InitiateAcquisition($NI_ScopeHandle);

Function arguments



Parameter

Variable Type

Description



$NI_ScopeHandle

Object

The instrument handle you obtain from NI_Scope_Initialize that identifies a particular instrument's session.





Return parameters



Parameter

Variable Type

Description



$ErrorCode

Integer

Reports the status of this operation. To obtain a text description of the status code, call NI_Scope_ErrorMessage. To obtain additional information concerning the error condition, use NI_Scope_GetError and NI_Scope_ClearError. The general meaning of the status code is as:

· 0: success

· Positive value: warning

· Negative value: errors





Example(s):

$ErrorCode = NI_Scope_InitiateAcquisition($NI_ScopeHandle);





NI_Scope_Read

Previous Top Next



* * *



NI_Scope_Read



Usage:

($ErrorCode, $WaveForms, $NumberOfWaveforms, $WaveFormsInfo) = NI_Scope_Read($NI_ScopeHandle, $measureChannel, $measureTimeOut, $ActualRecordLength);



Description:

This function requires NI Scope drivers to be installed on the system.

This function initiates an acquisition, waits for it to complete, and retrieves the data. The process is similar to calling NI_Scope_InitiateAcquisition, NI_Scope_AcquisitionStatus, and NI_Scope_Fetch. The only difference is that with NI_Scope_Read, you enable all channels specified with channelList before the acquisition; in the other method, you enable the channels with NI_Scope_ConfigureVertical.

This function may return multiple waveforms depending on the number of channels, the acquisition type, and the number of records you specify.



Remarks:

· This function is tested with a NI PCI-5122 device.

· When there occurs an error during the execution of the low level NI-Scope functions, Jabil Test will fail and return the error message.

· The function will verify if the given parameter exists, otherwise Jabil Test fails and returns the error message.



Result:

($ErrorCode, $WaveForms, $NumberOfWaveforms, $WaveFormsInfo) = NI_Scope_Read($NI_ScopeHandle, $measureChannel, $measureTimeOut, $ActualRecordLength);

Function arguments



Parameter

Variable Type

Description



$NI_ScopeHandle

Object

The instrument handle you obtain from NI_Scope_Initialize that identifies a particular instrument's session.



$measureChannel

String

The channel you will acquire data from; it may be a single channel, such as "0" or "1", or a list of channels such as "0,1".



$measureTimeOut

Double

The time to wait in seconds for data to be acquired. Using 0 for this parameter tells NI-SCOPE to fetch whatever is currently available.



$ActualRecordLength

Integer

The maximum number of samples to fetch for each waveform. If the acquisition finishes with fewer points than requested, partial data will be returned.





Return parameters



Parameter

Variable Type

Description



$ErrorCode

Integer

Reports the status of this operation. To obtain a text description of the status code, call NI_Scope_ErrorMessage. To obtain additional information concerning the error condition, use NI_Scope_GetError and NI_Scope_ClearError. The general meaning of the status code is as:

· 0: success

· Positive value: warning

· Negative value: errors



$WaveForms

Array

Returns an array whose length is the numSamples times number of waveforms. Call NI_Scope_ActualNumWfms to determine the number of waveforms.

NI-SCOPE returns this data sequentially, so all record 0 waveforms are first.

For example, with a channel list of 0,1, you would have the following index values:

· index 0 = record 0, channel 0

· index x = record 0, channel 1

· index 2x = record 1, channel 0

· index 3x = record 1, channel 1

· Where x = the record length

Call NI_Scope_ActualNumWfms to determine the number of waveforms. Call NI_Scope_ActualMeasWfmSize to determine the size of each waveform.



$NumberOfWaveforms

Integer

Returns the number of records times the number of channels



$WaveFormsInfo

Array

Returns an array of structures with the following timing and scaling information about each waveform:

· relativeInitialX: the time (in seconds) from the trigger to the first sample in the fetched waveform

· absoluteInitialX: timestamp (in seconds) of the first fetched sample that is comparable between records and acquisitions; your digitizer must support continuous acquisition

· xIncrement: the time between points in the acquired waveform in seconds

· actualSamples: the actual number of samples fetched and placed in the waveform array

· gain: the gain factor of the given channel; useful for scaling binary data with the following formula: voltage = binary data * gain factor + offset

· offset: the offset factor of the given channel; useful for scaling binary data with the following formula: voltage = binary data * gain factor + offset





Call NI_Scope_ActualNumWfms to determine the size of this array.





Example(s):

($ErrorCode, $WaveForms, $NumberOfWaveforms, $WaveFormsInfo) = NI_Scope_Read($NI_ScopeHandle, "0", 5.0, 6000);





NI_Scope_CalSelfCalibrate

Previous Top Next



* * *



NI_Scope_CalSelfCalibrate



Usage:

$ErrorCode = NI_Scope_CalSelfCalibrate($NI_ScopeHandle, $channelName, $Options);



Description:

This function requires NI Scope drivers to be installed on the system.

This function self-calibrates the digitizer. To verify that your digitizer supports self-calibration, refer to Features Supported by Device.



For the NI 5114/5122/5124/5922, if the self-calibration is performed successfully in a regular session, the calibration constants are immediately stored in the self-calibration area of the EEPROM. If the self-calibration is performed in an external calibration session, the calibration constants take effect immediately for the duration of the session. However, they are not stored in the EEPROM until NI_Scope_CalEnd is called with action set to action store and no errors occur.



Remarks:

· This function is tested with a NI PCI-5122 device.

· When there occurs an error during the execution of the low level NI-Scope functions, Jabil Test will fail and return the error message.

· The function will verify if the given parameter exists, otherwise Jabil Test fails and returns the error message.



Result:

$ErrorCode = NI_Scope_CalSelfCalibrate($NI_ScopeHandle, $channelName, $Options);

Function arguments



Parameter

Variable Type

Description



$NI_ScopeHandle

Object

The instrument handle you obtain from NI_Scope_Initialize that identifies a particular instrument's session.



$channelName

String

This parameter is ignored.



$Options

String

Possible values:

· SELF CALIBRATION

· RESTORE FACTORY CALIBRATION





Return parameters



Parameter

Variable Type

Description



$ErrorCode

Integer

Reports the status of this operation. To obtain a text description of the status code, call NI_Scope_ErrorMessage. To obtain additional information concerning the error condition, use NI_Scope_GetError and NI_Scope_ClearError. The general meaning of the status code is as:

· 0: success

· Positive value: warning

· Negative value: errors





Example(s):

$ErrorCode = NI_Scope_CalSelfCalibrate($NI_ScopeHandle, "0", "SELF CALIBRATION");





Configuration Functions

Previous Top Next



* * *



Use the Configuration functions to set up your acquisition. Using these functions, you can set triggers, input impedance, DC offset, vertical range, sampling rate, and much more. NI-SCOPE can also automatically configure your device settings with the Auto Setup function.



You can use the Configuration functions to configure the following settings and parameters:

· Acquisition type

· Vertical settings

· Horizontal settings

· Configuring triggers





NI_Scope_ActualMeasWfmSize

Previous Top Next



* * *



NI_Scope_ActualMeasWfmSize



Usage:

($ErrorCode, $MeasWaveformSize) = NI_Scope_ActualMeasWfmSize($NI_ScopeHandle, $ArrayMeasurementFunction);



Description:

This function requires NI Scope drivers to be installed on the system.

This function returns the total available size of an array measurement acquisition.



Remarks:

· This function is tested with a NI PCI-5122 device.

· When there occurs an error during the execution of the low level NI-Scope functions, Jabil Test will fail and return the error message.

· The function will verify if the given parameter exists, otherwise Jabil Test fails and returns the error message.



Result:

($ErrorCode, $MeasWaveformSize) = NI_Scope_ActualMeasWfmSize($NI_ScopeHandle, $ArrayMeasurementFunction);

Function arguments



Parameter

Variable Type

Description



$NI_ScopeHandle

Object

The instrument handle you obtain from NI_Scope_Initialize that identifies a particular instrument's session.



$ArrayMeasurementFunction

String

The array measurement to perform:

· NO MEASUREMENT

· LAST ACQ HISTORGRAM

· MULTI ACQ TIME HISTOGRAM

· MULTI ACQ VOLTAGE HISTOGRAM

· BLACKMAN WINDOW

· HANNING WINDOW

· FLAT TOP WINDOW

· TRIANGLE WINDOW

· HAMMING WINDOW

· BESSEL FILTER

· WINDOWED FIR FILTER

· BUTTERWORTH FILTER

· CHEBYSHEV FILTER

· ADD CHANNELS

· MULTIPLY CHANNELS

· DIVIDE CHANNELS

· SUBTRACT CHANNELS

· DERIVATIVE

· MULTI ACQ AVERAGE

· ARRAY INTEGRAL

· INVERSE

· ARRAY GAIN

· ARRAY OFFSET

· FFT AMP SPECTRUM DB

· FFT PHASE SPECTRUM

· FFT AMP SPECTRUM VOLTS RMS

· POLYNOMIAL INTERPOLATION





Return parameters



Parameter

Variable Type

Description



$ErrorCode

Integer

Reports the status of this operation. To obtain a text description of the status code, call NI_Scope_ErrorMessage. To obtain additional information concerning the error condition, use NI_Scope_GetError and NI_Scope_ClearError. The general meaning of the status code is as:

· 0: success

· Positive value: warning

· Negative value: errors



$ActualRecordLength

Integer

Returns the actual number of points the digitizer acquires for each channel.





Example(s):

$ArrayMeasurementFunction = New(String, "no measurement");



($ErrorCode, $MeasWaveformSize) = NI_Scope_ActualMeasWfmSize($NI_ScopeHandle, $ArrayMeasurementFunction);





NI_Scope_ActualNumWfms

Previous Top Next



* * *



NI_Scope_ActualNumWfms



Usage:

($ErrorCode, $numWfms) = NI_Scope_ActualNumWfms($NI_ScopeHandle, $channelName);



Description:

This function requires NI Scope drivers to be installed on the system.

This function helps you to declare appropriately sized waveforms.



Remarks:

· This function is tested with a NI PCI-5122 device.

· When there occurs an error during the execution of the low level NI-Scope functions, Jabil Test will fail and return the error message.

· The function will verify if the given parameter exists, otherwise Jabil Test fails and returns the error message.



Result:

($ErrorCode, $numWfms) = NI_Scope_ActualNumWfms($NI_ScopeHandle, $channelName);

Function arguments



Parameter

Variable Type

Description



$NI_ScopeHandle

Object

The instrument handle you obtain from NI_Scope_Initialize that identifies a particular instrument's session.



$channelName

String

The channel to acquire data from; it may be a single channel, such as "0" or "1" or a list of channels such as "0,1".





Return parameters



Parameter

Variable Type

Description



$ErrorCode

Integer

Reports the status of this operation. To obtain a text description of the status code, call NI_Scope_ErrorMessage. To obtain additional information concerning the error condition, use NI_Scope_GetError and NI_Scope_ClearError. The general meaning of the status code is as:

· 0: success

· Positive value: warning

· Negative value: errors



$numWfms

Integer

Returns the number of records times the number of channels; if you are operating in DDC mode (NI 5620/5621 only), this value is multiplied by two.





Example(s):

($ErrorCode, $numWfms) = NI_Scope_ActualNumWfms($NI_ScopeHandle, "0");





NI_Scope_ActualRecordLength

Previous Top Next



* * *



NI_Scope_ActualRecordLength



Usage:

($ErrorCode, $ActualRecordLength) = NI_Scope_ActualRecordLength($NI_ScopeHandle);



Description:

This function requires NI Scope drivers to be installed on the system.

This function returns the actual number of points the digitizer acquires for each channel. After configuring the digitizer for an acquisition, call this function to determine the size of the waveforms that the digitizer acquires. The value is equal to or greater than the minimum number of points specified in any of the Configure Horizontal functions.



Remarks:

· This function is tested with a NI PCI-5122 device.

· When there occurs an error during the execution of the low level NI-Scope functions, Jabil Test will fail and return the error message.

· The function will verify if the given parameter exists, otherwise Jabil Test fails and returns the error message.



Result:

($ErrorCode, $ActualRecordLength) = NI_Scope_ActualRecordLength($NI_ScopeHandle);

Function arguments



Parameter

Variable Type

Description



$NI_ScopeHandle

Object

The instrument handle you obtain from NI_Scope_Initialize that identifies a particular instrument's session.





Return parameters



Parameter

Variable Type

Description



$ErrorCode

Integer

Reports the status of this operation. To obtain a text description of the status code, call NI_Scope_ErrorMessage. To obtain additional information concerning the error condition, use NI_Scope_GetError and NI_Scope_ClearError. The general meaning of the status code is as:

· 0: success

· Positive value: warning

· Negative value: errors



$ActualRecordLength

Integer

Returns the actual number of points the digitizer acquires for each channel.





Example(s):

($ErrorCode, $ActualRecordLength) = NI_Scope_ActualRecordLength($NI_ScopeHandle);





NI_Scope_SampleMode

Previous Top Next



* * *



NI_Scope_SampleMode



Usage:

($ErrorCode, $sampleMode) = NI_Scope_SampleMode($NI_ScopeHandle);



Description:

This function requires NI Scope drivers to be installed on the system.

This function returns the sample mode the oscilloscope is currently using.



Remarks:

· This function is tested with a NI PCI-5122 device.

· When there occurs an error during the execution of the low level NI-Scope functions, Jabil Test will fail and return the error message.

· The function will verify if the given parameter exists, otherwise Jabil Test fails and returns the error message.



Result:

($ErrorCode, $sampleMode) = NI_Scope_SampleMode($NI_ScopeHandle);

Function arguments



Parameter

Variable Type

Description



$NI_ScopeHandle

Object

The instrument handle you obtain from NI_Scope_Initialize that identifies a particular instrument's session.





Return parameters



Parameter

Variable Type

Description



$ErrorCode

Integer

Reports the status of this operation. To obtain a text description of the status code, call NI_Scope_ErrorMessage. To obtain additional information concerning the error condition, use NI_Scope_GetError and NI_Scope_ClearError. The general meaning of the status code is as:

· 0: success

· Positive value: warning

· Negative value: errors



$sampleMode

String

Returns the sample mode the digitizer is currently using. Possible values:

· Real time sample mode: Indicates that the digitizer is using real-time sampling.

· Equivalent time sample mode: Indicates that the digitizer is using equivalent-time sampling.





Example(s):

($ErrorCode, $sampleMode) = NI_Scope_SampleMode($NI_ScopeHandle);





NI_Scope_SampleRate

Previous Top Next



* * *



NI_Scope_SampleRate



Usage:

($ErrorCode, $sampleRate) = NI_Scope_SampleRate($NI_ScopeHandle);



Description:

This function requires NI Scope drivers to be installed on the system.

This function returns the effective sample rate of the acquired waveform using the current configuration in samples per second.



Remarks:

· This function is tested with a NI PCI-5122 device.

· When there occurs an error during the execution of the low level NI-Scope functions, Jabil Test will fail and return the error message.

· The function will verify if the given parameter exists, otherwise Jabil Test fails and returns the error message.



Result:

($ErrorCode, $sampleRate) = NI_Scope_SampleRate($NI_ScopeHandle);

Function arguments



Parameter

Variable Type

Description



$NI_ScopeHandle

Object

The instrument handle you obtain from NI_Scope_Initialize that identifies a particular instrument's session.





Return parameters



Parameter

Variable Type

Description



$ErrorCode

Integer

Reports the status of this operation. To obtain a text description of the status code, call NI_Scope_ErrorMessage. To obtain additional information concerning the error condition, use NI_Scope_GetError and NI_Scope_ClearError. The general meaning of the status code is as:

· 0: success

· Positive value: warning

· Negative value: errors



$sampleRate

Double

Returns the effective sample rate of the acquired waveform the digitizer acquires for each channel.





Example(s):

($ErrorCode, $sampleRate) = NI_Scope_SampleRate($NI_ScopeHandle);





NI_Scope_ConfigureHorizontalTiming

Previous Top Next



* * *



NI_Scope_ConfigureHorizontalTiming



Usage:

$ErrorCode = NI_Scope_ConfigureHorizontalTiming($NI_ScopeHandle, $minSampleRate, $minNumPts, $refPosition, $numRecords, $enforceRealTime);



Description:

This function requires NI Scope drivers to be installed on the system.

This function configures the common properties of the horizontal subsystem for a multirecord acquisition in terms of minimum sample rate.



The horizontal timing parameters apply to all enabled channels of the digitizer, which means that both channels of a two-channel digitizer sample the same amount of data at the same rate. Some digitizers support acquiring multirecords. multirecord acquisitions allow you to acquire multiple, triggered waveforms very quickly. Because the triggering and timing are done in hardware, multirecord acquisitions eliminate the possibility of the operating system interrupting your program and causing the digitizer to miss triggers. To find out if your digitizer supports multirecord acquisitions, refer to Features Supported by Device. The horizontal settings include the num records, sample rate, min record length, and reference position parameters.



Remarks:

· This function is tested with a NI PCI-5122 device.

· When there occurs an error during the execution of the low level NI-Scope functions, Jabil Test will fail and return the error message.

· The function will verify if the given parameter exists, otherwise Jabil Test fails and returns the error message.



Result:

$ErrorCode = NI_Scope_ConfigureHorizontalTiming($NI_ScopeHandle, $minSampleRate, $minNumPts, $refPosition, $numRecords, $enforceRealTime);

Function arguments



Parameter

Variable Type

Description



$NI_ScopeHandle

Object

The instrument handle you obtain from NI_Scope_Initialize that identifies a particular instrument's session.



$minSampleRate

Double

The sampling rate for the acquisition. The sample rate parameter is the frequency at which digitized samples are stored. This parameter is rounded up to the next legal sampling rate that your device supports. If the enforce realtime parameter is set to TRUE, the sampling rate must be set lower than the maximum real-time sampling rate of the digitizer, so data can be digitized at the requested rate. If you set the enforce realtime parameter to FALSE, NI-SCOPE allows you to specify sampling rates higher than the maximum real-time sampling rate of the digitizer. When you do this, NI-SCOPE enters random interleaved sampling (RIS) mode, where it acquires multiple waveforms at the maximum real-time sampling rate and reconstructs a periodic waveform.

Unit : Hertz (Samples / Second)



$minNumPts

Integer

The minimum number of points you need in the record for each channel. Call NI_Scope_ActualRecordLength to obtain the actual record length used.

The min record length parameter is the minimum number of samples to store for each record in the acquisition. This parameter can also be rounded up. NI-SCOPE maintains a constant time per record, which is the min record length divided by the requested sampling rate. Because the sampling rate is rounded up to a legal value, the min record length can also be rounded up. You can fetch this resulting actual record length by calling Actual Record Length. Similarly, you can call Sample Rate to find the true sample rate used or Actual Sample Mode to determine if NI-SCOPE is using RIS or real-time sampling.



$refPosition

Double

The position of the Reference Event in the waveform record specified as a percentage.

The reference position parameter determines the number of pretrigger versus posttrigger points that are stored. Reference position is expressed as a percent of the record, from 0 to 100. For example, a 0% reference position means that you have the actual record length points stored after the trigger occurs, while 100% reference position means that all the samples are stored before the trigger.

Valid Range: 0.0 - 100.0



$numRecords

Integer

This parameter allows you to configure a multirecord acquisition. For a single record acquisition, set this parameter to 1.



$enforceRealTime

Boolean

Indicates whether the digitizer enforces real-time measurements or allows equivalent-time (RIS) measurements. Not all digitizers support RIS. Refer to Features Supported by Device

Valid values:

· True : Allow real-time acquisitions only

· False : Allow real-time and equivalent-time acquisitions





Return parameters



Parameter

Variable Type

Description



$ErrorCode

Integer

Reports the status of this operation. To obtain a text description of the status code, call NI_Scope_ErrorMessage. To obtain additional information concerning the error condition, use NI_Scope_GetError and NI_Scope_ClearError. The general meaning of the status code is as:

· 0: success

· Positive value: warning

· Negative value: errors





Example(s):

$sampleRate = New("Float", 100000000);

$numPts = New("Integer", 6000);

$refPosition = New("Float", 1.0);

$numRecords = New("Integer", 1);

$enforceRealTime = New("Boolean", "TRUE");



$ErrorCode = NI_Scope_ConfigureHorizontalTiming($NI_ScopeHandle, $sampleRate, $numPts, $refPosition, $numRecords, $enforceRealTime);





NI_Scope_AutoSetup

Previous Top Next



* * *



NI_Scope_AutoSetup



Usage:

$ErrorCode = NI_Scope_AutoSetup($NI_ScopeHandle);



Description:

This function requires NI Scope drivers to be installed on the system.

This function automatically configures the instrument. When you call this function, the digitizer senses the input signal and automatically configures many of the instrument settings. If no signal is found on any analog input channel, Jabil Test will fail. A channel is considered to have a signal present if the signal is at least 10% of the smallest vertical range available for that channel.



The following settings are changed: General



Acquisition mode

Normal



Reference clock

Internal





Vertical



Vertical coupling

AC (DC for NI 5621)



Vertical bandwidth

Full



Vertical range

Changed by auto setup



Vertical offset

0 V



Probe attenuation

Unchanged by auto setup



Input impedance

Unchanged by auto setup





Horizontal



Sample rate

Changed by auto setup



Min record length

Changed by auto setup



Enforce realtime

True



Number of Records

Changed to 1





Triggering



Trigger mode

Edge if signal present, otherwise immediate



Trigger channel

Lowest numbered channel with a signal present



Trigger slope

Positive



Trigger coupling

DC



Reference position

50%



Trigger level

50% of signal on trigger channel



Trigger delay

0



Trigger holdoff

0



Trigger output

None





Remarks:

· This function is tested with a NI PCI-5122 device.

· When there occurs an error during the execution of the low level NI-Scope functions, Jabil Test will fail and return the error message.

· The function will verify if the given parameter exists, otherwise Jabil Test fails and returns the error message.



Result:

$ErrorCode = NI_Scope_AutoSetup($NI_ScopeHandle);

Function arguments



Parameter

Variable Type

Description



$NI_ScopeHandle

Object

The instrument handle you obtain from NI_Scope_Initialize that identifies a particular instrument's session.





Return parameters



Parameter

Variable Type

Description



$ErrorCode

Integer

Reports the status of this operation. To obtain a text description of the status code, call NI_Scope_ErrorMessage. To obtain additional information concerning the error condition, use NI_Scope_GetError and NI_Scope_ClearError. The general meaning of the status code is as:

· 0: success

· Positive value: warning

· Negative value: errors





Example(s):

$ErrorCode = NI_Scope_AutoSetup($NI_ScopeHandle);





NI_Scope_ConfigureAcquisition

Previous Top Next



* * *



NI_Scope_ConfigureAcquisition



Usage:

$ErrorCode = NI_Scope_ConfigureAcquisition($NI_ScopeHandle, $acquisitionType);



Description:

This function requires NI Scope drivers to be installed on the system.

This function configures how the oscilloscope acquires data.



Remarks:

· This function is tested with a NI PCI-5122 device.

· When there occurs an error during the execution of the low level NI-Scope functions, Jabil Test will fail and return the error message.

· The function will verify if the given parameter exists, otherwise Jabil Test fails and returns the error message.



Result:

$ErrorCode = NI_Scope_ConfigureAcquisition($NI_ScopeHandle, $acquisitionType);

Function arguments



Parameter

Variable Type

Description



$NI_ScopeHandle

Object

The instrument handle you obtain from NI_Scope_Initialize that identifies a particular instrument's session.



$acquisitionType

String

Specify the resolution the oscilloscope uses when acquiring data.

· NORMAL : Sets the oscilloscope to normal resolution mode. The oscilloscope can use real-time sampling or equivalent-time sampling.

· FLEXIBLE RESOLUTION MODE : Sets the oscilloscope to flexible resolution mode if supported. The oscilloscope uses different hardware configurations to change the resolution depending on the sampling rate used.

· DDC MODE : Sets the acquisition mode to DDC (NI 5620 only)





Return parameters



Parameter

Variable Type

Description



$ErrorCode

Integer

Reports the status of this operation. To obtain a text description of the status code, call NI_Scope_ErrorMessage. To obtain additional information concerning the error condition, use NI_Scope_GetError and NI_Scope_ClearError. The general meaning of the status code is as:

· 0: success

· Positive value: warning

· Negative value: errors





Example(s):

acquisitionType = New("String", "normal");

$ErrorCode = NI_Scope_ConfigureAcquisition($NI_ScopeHandle, $acquisitionType);





NI_Scope_AdjustSampleClockRelativeDelay

Previous Top Next



* * *



NI_Scope_AdjustSampleClockRelativeDelay



Usage:

$ErrorCode = NI_Scope_AdjustSampleClockRelativeDelay($NI_ScopeHandle, $Delay);



Description:

This function requires NI Scope drivers to be installed on the system.

This function configures the relative sample clock delay (in seconds) when using the internal clock. Each time this function is called, the sample clock is delayed by the specified amount of time.



Remarks:

· This function is tested with a NI PCI-5122 device.

· When there occurs an error during the execution of the low level NI-Scope functions, Jabil Test will fail and return the error message.

· The function will verify if the given parameter exists, otherwise Jabil Test fails and returns the error message.



Result:

$ErrorCode = NI_Scope_AdjustSampleClockRelativeDelay($NI_ScopeHandle, $Delay);

Function arguments



Parameter

Variable Type

Description



$NI_ScopeHandle

Object

The instrument handle you obtain from NI_Scope_Initialize that identifies a particular instrument's session.



$Delay

Float

The amount of time in seconds to delay the sample clock. This is a relative value, so repeated calls to this function delays the sample clock by this amount every time.





Return parameters



Parameter

Variable Type

Description



$ErrorCode

Integer

Reports the status of this operation. To obtain a text description of the status code, call NI_Scope_ErrorMessage. To obtain additional information concerning the error condition, use NI_Scope_GetError and NI_Scope_ClearError. The general meaning of the status code is as:

· 0: success

· Positive value: warning

· Negative value: errors





Example(s):

$Delay = New("Float", 0.0);





$ErrorCode = NI_Scope_AdjustSampleClockRelativeDelay($NI_ScopeHandle, $Delay);





NI_Scope_ConfigureClock

Previous Top Next



* * *



NI_Scope_ConfigureClock



Usage:

$ErrorCode = NI_Scope_ConfigureClock($NI_ScopeHandle, $InputClockSource, $OutputClockSource, $ClockSyncPulseSource, $MasterEnabled);



Description:

This function requires NI Scope drivers to be installed on the system.

This function configures the attributes for synchronizing the digitizer to a reference or sending the digitizer's reference clock output to be used as a synchronizing clock for other digitizers.



Remarks:

· This function is tested with a NI PCI-5122 device.

· When there occurs an error during the execution of the low level NI-Scope functions, Jabil Test will fail and return the error message.

· The function will verify if the given parameter exists, otherwise Jabil Test fails and returns the error message.



Result:

$ErrorCode = NI_Scope_ConfigureClock($NI_ScopeHandle, $InputClockSource, $OutputClockSource, $ClockSyncPulseSource, $MasterEnabled);

Function arguments



Parameter

Variable Type

Description



$NI_ScopeHandle

Object

The instrument handle you obtain from NI_Scope_Initialize that identifies a particular instrument's session.



$InputClockSource

String

Specifies the input source for the reference clock to which the 100 MHz sample clock is phase-locked.

Possible values:

· NO SOURCE

· RTSI CLOCK

· PFI 1

· PFI 2

· PXI CLOCK

· EXTERNAL

· CLOCK IN



$OutputClockSource

String

Specifies the output source for the reference clock to which another scope's sample clock can be phased-locked. Possible values:

· NO SOURCE

· RTSI CLOCK

· PFI 0

· PFI 1

· PFI 2

· RTSI 0

· RTSI 1

· RTSI 2

· RTSI 3

· RTSI 4

· RTSI 5

· RTSI 6

· CLOCK OUT



$ClockSyncPulseSource

String

For the NI 5102, specifies the line on which the sample clock is sent or received. For the NI 5112/5620/5621/5911, specifies the line on which the one time sync pulse is sent or received. This line should be the same for all devices to be synchronized. Possible values:

· NO SOURCE

· RTSI 0

· RTSI 1

· RTSI 2

· RTSI 3

· RTSI 4

· RTSI 5

· RTSI 6

· PFI 1

· PFI 2



$MasterEnabled

Boolean

Specifies whether you want the device to be a master or a slave. The master device is typically the originator of the trigger signal and clock sync pulse.





Return parameters



Parameter

Variable Type

Description



$ErrorCode

Integer

Reports the status of this operation. To obtain a text description of the status code, call NI_Scope_ErrorMessage. To obtain additional information concerning the error condition, use NI_Scope_GetError and NI_Scope_ClearError. The general meaning of the status code is as:

· 0: success

· Positive value: warning

· Negative value: errors





Example(s):

$InputClockSource = New("String", "NO SOURCE");

$OutputClockSource = New("String", "NO SOURCE");

$ClockSyncPulseSource = New("String", "NO SOURCE");

$MasterEnabled = New("Boolean", "FALSE");





$ErrorCode = NI_Scope_ConfigureClock($NI_ScopeHandle, $InputClockSource, $OutputClockSource, $ClockSyncPulseSource, $MasterEnabled);





NI_Scope_ConfigureTriggerOutput

Previous Top Next



* * *



NI_Scope_ConfigureTriggerOutput



Usage:

$ErrorCode = NI_Scope_ConfigureTriggerOutput($NI_ScopeHandle, $triggerEvent, $TriggerOutput);



Description:

This function requires NI Scope drivers to be installed on the system.

This function configures the digitizer to generate a signal pulse that other digitizers can detect when configured for digital triggering.



Remarks:

· This function is tested with a NI PCI-5122 device.

· When there occurs an error during the execution of the low level NI-Scope functions, Jabil Test will fail and return the error message.

· The function will verify if the given parameter exists, otherwise Jabil Test fails and returns the error message.



Result:

$ErrorCode = NI_Scope_ConfigureTriggerOutput($NI_ScopeHandle, $triggerEvent, $TriggerOutput);

Function arguments



Parameter

Variable Type

Description



$NI_ScopeHandle

Object

The instrument handle you obtain from NI_Scope_Initialize that identifies a particular instrument's session.



$triggerEvent

String

Specifies the condition in which this device generates a digital pulse. Possible values:

· NO EVENT

· START TRIGGER

· STOP TRIGGER

· END OF ACQUISITION

· END OF RECORD



$TriggerOutput

String

Specifies the hardware signal line on which the digital pulse is generated. Possible values:

· NONE

· RTSI 0

· RTSI 1

· RTSI 2

· RTSI 3

· RTSI 4

· RTSI 5

· RTSI 6

· PFI 0

· PFI 1

· PFI 2

· PXI STAR





Return parameters



Parameter

Variable Type

Description



$ErrorCode

Integer

Reports the status of this operation. To obtain a text description of the status code, call NI_Scope_ErrorMessage. To obtain additional information concerning the error condition, use NI_Scope_GetError and NI_Scope_ClearError. The general meaning of the status code is as:

· 0: success

· Positive value: warning

· Negative value: errors





Example(s):

$triggerEvent = New("String", "NO EVENT");

$TriggerOutput = New("String", "NONE");



$ErrorCode = NI_Scope_ConfigureTriggerOutput($NI_ScopeHandle, $triggerEvent, $TriggerOutput);





NI_Scope_ExportSignal

Previous Top Next



* * *



NI_Scope_ExportSignal



Usage:

$ErrorCode = NI_Scope_ExportSignal($NI_ScopeHandle, $signal, $signalIdentifier, $outputTerminal);



Description:

This function requires NI Scope drivers to be installed on the system.

This function configures the digitizer to generate a signal that other devices can detect when configured for digital triggering or sharing clocks. The signal parameter specifies what condition causes the digitizer to generate the signal. The outputTerminal parameter specifies where to send the signal on the hardware.

In cases where multiple instances of a particular signal exist, use the parameter signalIdentifier to specify which instance to control. For normal signals, only one instance exists and you should leave this parameter set to the empty string. You can call this function multiple times and set each available line to a different signal.

To unprogram a specific line on device, call this function with the signal you no longer want to export and set outputTerminal to none.



Remarks:

· This function is tested with a NI PCI-5122 device.

· When there occurs an error during the execution of the low level NI-Scope functions, Jabil Test will fail and return the error message.

· The function will verify if the given parameter exists, otherwise Jabil Test fails and returns the error message.



Result:

$ErrorCode = NI_Scope_ExportSignal($NI_ScopeHandle, $signal, $signalIdentifier, $outputTerminal);

Function arguments



Parameter

Variable Type

Description



$NI_ScopeHandle

Object

The instrument handle you obtain from NI_Scope_Initialize that identifies a particular instrument's session.





Return parameters



Parameter

Variable Type

Description



$ErrorCode

Integer

Reports the status of this operation. To obtain a text description of the status code, call NI_Scope_ErrorMessage. To obtain additional information concerning the error condition, use NI_Scope_GetError and NI_Scope_ClearError. The general meaning of the status code is as:

· 0: success

· Positive value: warning

· Negative value: errors





Example(s):

$signal = New("String", "START TRIGGER");

$signalIdentifier = New("String", "test case");

$outputTerminal = New("String", "RTSI 0");





$ErrorCode = NI_Scope_ExportSignal($NI_ScopeHandle, $signal, $signalIdentifier, $outputTerminal);





NI_Scope_ConfigureEdgeTriggerSource

Previous Top Next



* * *



NI_Scope_ConfigureEdgeTriggerSource



Usage:

$ErrorCode = NI_Scope_ConfigureEdgeTriggerSource($NI_ScopeHandle, $triggerSource, $triggerLevel, $triggerSlope);



Description:

This function requires NI Scope drivers to be installed on the system.

This function sets the edge triggering attributes. An edge trigger occurs when the trigger signal specified with the source parameter passes through the voltage threshold specified with the level parameter and has the slope specified with the slope parameter.

This function affects instrument behavior only if the triggerType is edge trigger. Set the trigger type and trigger coupling before calling this function.

If the trigger source is one of the analog input channels, you must configure the vertical range, vertical offset, vertical coupling, probe attenuation, and the maximum input frequency before calling this function.



Remarks:

· This function is tested with a NI PCI-5122 device.

· When there occurs an error during the execution of the low level NI-Scope functions, Jabil Test will fail and return the error message.

· The function will verify if the given parameter exists, otherwise Jabil Test fails and returns the error message.



Result:

$ErrorCode = NI_Scope_ConfigureEdgeTriggerSource($NI_ScopeHandle, $triggerSource, $triggerLevel, $triggerSlope);

Function arguments



Parameter

Variable Type

Description



$NI_ScopeHandle

Object

The instrument handle you obtain from NI_Scope_Initialize that identifies a particular instrument's session.



$triggerSource

String

Pass the source you want the instrument to monitor for a trigger.



$triggerLevel

Double

Pass the voltage threshold you want the instrument to use for edge triggering. The digitizer triggers when the trigger signal passes through the threshold you specify with this parameter and has the slope you specify with the Slope parameter.

Units: volts



$triggerSlope

String

Specify whether you want a rising edge or a falling edge passing through the Trigger Level to trigger the instrument.

Possible values:

· NEGATIVE

· POSITIVE





Return parameters



Parameter

Variable Type

Description



$ErrorCode

Integer

Reports the status of this operation. To obtain a text description of the status code, call NI_Scope_ErrorMessage. To obtain additional information concerning the error condition, use NI_Scope_GetError and NI_Scope_ClearError. The general meaning of the status code is as:

· 0: success

· Positive value: warning

· Negative value: errors





Example(s):

$triggerSource = New("String", "VAL_EXTERNAL");

$triggerLevel = New("Float", -0.3);

$triggerSlope = New("String", "negative");

$ErrorCode = NI_Scope_ConfigureEdgeTriggerSource($NI_ScopeHandle, $triggerSource, $triggerLevel, $triggerSlope);





NI_Scope_ConfigureRefLevels

Previous Top Next



* * *



NI_Scope_ConfigureRefLevels



Usage:

$ErrorCode = NI_Scope_ConfigureRefLevels($NI_ScopeHandle, $unit, $low, $mid, $high);



Description:

This function requires NI Scope drivers to be installed on the system.

This function configures the reference levels for all channels of the digitizer.



Remarks:

· This function is tested with a NI PCI-5122 device.

· When there occurs an error during the execution of the low level NI-Scope functions, Jabil Test will fail and return the error message.

· The function will verify if the given parameter exists, otherwise Jabil Test fails and returns the error message.



Result:

$ErrorCode = NI_Scope_ConfigureRefLevels($NI_ScopeHandle, $unit, $low, $mid, $high);

Function arguments



Parameter

Variable Type

Description



$NI_ScopeHandle

Object

The instrument handle you obtain from NI_Scope_Initialize that identifies a particular instrument's session.



$unit

String

Specifies the units of the reference levels.

Possible values:

· PERCENT

· VOLTAGE



$low

Double

Pass the low reference you want the digitizer to use for waveform measurements.



$mid

Double

Pass the mid reference you want the digitizer to use for waveform measurements.



$high

Double

Pass the high reference you want the digitizer to use for waveform measurements.





Return parameters



Parameter

Variable Type

Description



$ErrorCode

Integer

Reports the status of this operation. To obtain a text description of the status code, call NI_Scope_ErrorMessage. To obtain additional information concerning the error condition, use NI_Scope_GetError and NI_Scope_ClearError. The general meaning of the status code is as:

· 0: success

· Positive value: warning

· Negative value: errors





Example(s):

$unit = New("String", "PERCENT");

$low = New("Float", 10.0);

$mid = New("Float", 20.0);

$high = New("Float", 30.0);

$ErrorCode = NI_Scope_ConfigureRefLevels($NI_ScopeHandle, $unit, $low, $mid, $high);





NI_Scope_ConfigureTVTriggerLineNumber

Previous Top Next



* * *



NI_Scope_ConfigureTVTriggerLineNumber



Usage:

$ErrorCode = NI_Scope_ConfigureTVTriggerLineNumber($NI_ScopeHandle, $lineNumber);



Description:

This function requires NI Scope drivers to be installed on the system.

This function configures the TV line upon which the instrument triggers. The line number is absolute and not relative to the field of the TV signal.

This function affects instrument behavior only if the trigger type is set to TV trigger and the TV trigger event is set to line number. Call NI_Scope_ConfigureTVTriggerSource to set the TV trigger event before calling this function.



Remarks:

· This function is tested with a NI PCI-5122 device.

· When there occurs an error during the execution of the low level NI-Scope functions, Jabil Test will fail and return the error message.

· The function will verify if the given parameter exists, otherwise Jabil Test fails and returns the error message.



Result:

$ErrorCode = NI_Scope_ConfigureTVTriggerLineNumber($NI_ScopeHandle, $lineNumber);

Function arguments



Parameter

Variable Type

Description



$NI_ScopeHandle

Object

The instrument handle you obtain from NI_Scope_Initialize that identifies a particular instrument's session.



$lineNumber

Integer

Specify the line number of the signal you want to trigger off of. The valid ranges of the attribute depend on the signal format configured.





Return parameters



Parameter

Variable Type

Description



$ErrorCode

Integer

Reports the status of this operation. To obtain a text description of the status code, call NI_Scope_ErrorMessage. To obtain additional information concerning the error condition, use NI_Scope_GetError and NI_Scope_ClearError. The general meaning of the status code is as:

· 0: success

· Positive value: warning

· Negative value: errors





Example(s):

$lineNumber = New("Integer", 42);

$ErrorCode = NI_Scope_ConfigureTVTriggerLineNumber($NI_ScopeHandle, $lineNumber);





NI_Scope_ConfigureTVTriggerSource

Previous Top Next



* * *



NI_Scope_ConfigureTVTriggerSource



Usage:

$ErrorCode = NI_Scope_ConfigureTVTriggerSource($NI_ScopeHandle, $triggerSource, $signalFormat, $triggerEvent, $polarity);



Description:

This function requires NI Scope drivers to be installed on the system.

Configures the instrument for TV triggering. It configures the TV signal format, the event, and the signal polarity. Call the NI_Scope_ConfigureTrigger and NI_Scope_ConfigureTriggerCoupling functions to set the trigger type and trigger coupling before calling this function.



Remarks:

· This function is tested with a NI PCI-5122 device.

· When there occurs an error during the execution of the low level NI-Scope functions, Jabil Test will fail and return the error message.

· The function will verify if the given parameter exists, otherwise Jabil Test fails and returns the error message.



Result:

$ErrorCode = NI_Scope_ConfigureTVTriggerSource($NI_ScopeHandle, $triggerSource, $signalFormat, $triggerEvent, $polarity);

Function arguments



Parameter

Variable Type

Description



$NI_ScopeHandle

Object

The instrument handle you obtain from NI_Scope_Initialize that identifies a particular instrument's session.



$triggerSource

String

Specifies the source the digitizer monitors for the trigger event. Trigger sources vary for each digitizer model. Valid values:

· 0

· 1

· VAL_EXTERNAL



$signalFormat

String

Specifies the Video/TV signal format. Possible values:

· NTSC

· PAL

· SECAM

· M_PAL

· 480I_59_94_FIELDS_PER_SECOND

· 480I_60_FIELDS_PER_SECOND

· 480P_59_94_FRAMES_PER_SECOND

· 480P_60_FRAMES_PER_SECOND

· 576I_50_FIELDS_PER_SECOND

· 576P_50_FRAMES_PER_SECOND

· 720P_50_FRAMES_PER_SECOND

· 720P_59_94_FRAMES_PER_SECOND

· 720P_60_FRAMES_PER_SECOND

· 1080I_50_FIELDS_PER_SECOND

· 1080I_59_94_FIELDS_PER_SECOND

· 1080I_60_FIELDS_PER_SECOND

· 1080P_24_FRAMES_PER_SECOND



$triggerEvent

String

Video/TV event to trigger off of. Possible values:

· FIELD1

· FIELD2

· ANY FIELD

· ANY LINE

· LINE NUMBER



$triggerPolarity

String

Specifies the polarity of the video signal to trigger off of.

Possible values:

· NEGATIVE

· POSITIVE





Return parameters



Parameter

Variable Type

Description



$ErrorCode

Integer

Reports the status of this operation. To obtain a text description of the status code, call NI_Scope_ErrorMessage. To obtain additional information concerning the error condition, use NI_Scope_GetError and NI_Scope_ClearError. The general meaning of the status code is as:

· 0: success

· Positive value: warning

· Negative value: errors





Example(s):

$triggerSource = New("String", "0");

$signalFormat = New("String", "pal");

$triggerEvent = New("String", "line number");

$polarity = New("String", "negative");

$ErrorCode = NI_Scope_ConfigureTVTriggerSource($NI_ScopeHandle, $triggerSource, $signalFormat, $triggerEvent, $polarity);





NI_Scope_ConfigureTrigger

Previous Top Next



* * *



NI_Scope_ConfigureTrigger



Usage:

$ErrorCode = NI_Scope_ConfigureTrigger($NI_ScopeHandle, $triggerType, $triggerHoldOff);



Description:

This function requires NI Scope drivers to be installed on the system.

This function configures the common attributes of the trigger subsystem.

When you use NI_Scope_ReadWaveform, the instrument waits for a trigger. You specify the type of trigger for which the instrument waits with the Trigger Type parameter.

If the instrument requires multiple waveform acquisitions to build a complete waveform, it waits for the length of time you specify with the holdoff parameter to elapse since the previous trigger. The instrument then waits for the next trigger.



Remarks:

· This function is tested with a NI PCI-5122 device.

· When there occurs an error during the execution of the low level NI-Scope functions, Jabil Test will fail and return the error message.

· The function will verify if the given parameter exists, otherwise Jabil Test fails and returns the error message.



Result:

$ErrorCode = NI_Scope_ConfigureTrigger($NI_ScopeHandle, $triggerType, $triggerHoldOff);

Function arguments



Parameter

Variable Type

Description



$NI_ScopeHandle

Object

The instrument handle you obtain from NI_Scope_Initialize that identifies a particular instrument's session.



$triggerType

String

Specifies the type of trigger for which the digitizer waits. Possible values:

· TV

· EDGE

· IMMEDIATE



$triggerHoldOff

String

Specifies the trigger holdoff, which is the length of time that elapses before the digitizer waits for the next trigger.





Return parameters



Parameter

Variable Type

Description



$ErrorCode

Integer

Reports the status of this operation. To obtain a text description of the status code, call NI_Scope_ErrorMessage. To obtain additional information concerning the error condition, use NI_Scope_GetError and NI_Scope_ClearError. The general meaning of the status code is as:

· 0: success

· Positive value: warning

· Negative value: errors





Example(s):

$triggerType = New("String", "IMMEDIATE");

$triggerHoldOff = New("Float", 0.0);



$ErrorCode = NI_Scope_ConfigureTrigger($NI_ScopeHandle, $triggerType, $triggerHoldOff);





NI_Scope_ConfigureTriggerCoupling

Previous Top Next



* * *



NI_Scope_ConfigureTriggerCoupling



Usage:

$ErrorCode = NI_Scope_ConfigureTriggerCoupling($NI_ScopeHandle, $triggerCoupling);



Description:

This function requires NI Scope drivers to be installed on the system.

This function sets the trigger coupling attribute.



Remarks:

· This function is tested with a NI PCI-5122 device.

· When there occurs an error during the execution of the low level NI-Scope functions, Jabil Test will fail and return the error message.

· The function will verify if the given parameter exists, otherwise Jabil Test fails and returns the error message.



Result:

$ErrorCode = NI_Scope_ConfigureTriggerCoupling($NI_ScopeHandle, $triggerCoupling);

Function arguments



Parameter

Variable Type

Description



$NI_ScopeHandle

Object

The instrument handle you obtain from NI_Scope_Initialize that identifies a particular instrument's session.



$triggerCoupling

Integer

Specifies how you want the digitizer to couple the trigger signal.

Possible values:

· AC

· DC

· HF REJECT

· LF REJECT

AC PLUS HF REJECT





Return parameters



Parameter

Variable Type

Description



$ErrorCode

Integer

Reports the status of this operation. To obtain a text description of the status code, call NI_Scope_ErrorMessage. To obtain additional information concerning the error condition, use NI_Scope_GetError and NI_Scope_ClearError. The general meaning of the status code is as:

· 0: success

· Positive value: warning

· Negative value: errors





Example(s):

$triggerCoupling = New("String", "dc");

$ErrorCode = NI_Scope_ConfigureTriggerCoupling($NI_ScopeHandle, $triggerCoupling);





NI_Scope_ConfigureTriggerDigital

Previous Top Next



* * *



NI_Scope_ConfigureTriggerDigital



Usage:

$ErrorCode = NI_Scope_ConfigureTriggerDigital($NI_ScopeHandle, $triggerSource, $triggerPolarity, $triggerHoldOff, $triggerDelay);



Description:

This function requires NI Scope drivers to be installed on the system.

A digital trigger occurs on either a rising edge or falling edge of a digital signal. Digital triggering is possible on the RTSI lines, PFI lines, and the PXI Star Trigger line.



Remarks:

· This function is tested with a NI PCI-5122 device.

· When there occurs an error during the execution of the low level NI-Scope functions, Jabil Test will fail and return the error message.

· The function will verify if the given parameter exists, otherwise Jabil Test fails and returns the error message.



Result:

$ErrorCode = NI_Scope_ConfigureTriggerDigital($NI_ScopeHandle, $triggerSource, $triggerLevel, $triggerPolarity, $triggerCoupling, $triggerHoldOff, $triggerDelay);

Function arguments



Parameter

Variable Type

Description



$NI_ScopeHandle

Object

The instrument handle you obtain from NI_Scope_Initialize that identifies a particular instrument's session.



$triggerSource

String

Specifies the source the digitizer monitors for the trigger event. Trigger sources vary for each digitizer model. Valid values:

· 0

· 1

· VAL_IMMEDIATE

· VAL_EXTERNAL

· VAL_SW_TRIG_FUNC

· VAL_RTSI_0

· VAL_RTSI_1

· VAL_RTSI_2

· VAL_RTSI_3

· VAL_RTSI_4

· VAL_RTSI_5

· VAL_RTSI_6

· VAL_PFI_0

· VAL_PFI_1

· VAL_PFI_2

· VAL_PXI_STAR



$triggerPolarity

String

Specifies the polarity of the video signal sync. Possible values:

· NEGATIVE

· POSITIVE



$triggerHoldOff

Double

Specifies the length of time (in seconds) the digitizer waits after detecting a trigger before enabling the trigger subsystem to detect another trigger. This attribute affects instrument operation only when the digitizer requires multiple acquisitions to build a complete waveform. The digitizer requires multiple waveform acquisitions when it uses equivalent-time sampling or when the digitizer is configured for a multirecord acquisition through a call to NI_Scope_ConfigureHorizontalTiming.

Unit : Seconds.

Valid range : 0.0 – 171.8



$triggerDelay

Double

Specifies the trigger delay time in seconds. The trigger delay time is the length of time the digitizer waits after receiving the trigger. The event that occurs when the trigger delay elapses is the Reference Event.

Unit : Seconds.

Valid range : 0.0 – 171.8





Return parameters



Parameter

Variable Type

Description



$ErrorCode

Integer

Reports the status of this operation. To obtain a text description of the status code, call NI_Scope_ErrorMessage. To obtain additional information concerning the error condition, use NI_Scope_GetError and NI_Scope_ClearError. The general meaning of the status code is as:

· 0: success

· Positive value: warning

· Negative value: errors





Example(s):

$triggerSource = New("String", "0");

$triggerPolarity = New("String", "negative");

$triggerHoldOff = New("Float", 0.0);

$triggerDelay = New("Float", 0.0);





$ErrorCode = NI_Scope_ConfigureTriggerDigital($NI_ScopeHandle, $triggerSource, $triggerPolarity, $triggerHoldOff, $triggerDelay);





NI_Scope_ConfigureTriggerEdge

Previous Top Next



* * *



NI_Scope_ConfigureTriggerEdge



Usage:

$ErrorCode = NI_Scope_ConfigureTriggerEdge($NI_ScopeHandle, $triggerSource, $triggerLevel, $triggerPolarity, $triggerCoupling, $triggerHoldOff, $triggerDelay);



Description:

This function requires NI Scope drivers to be installed on the system.

An edge trigger occurs when a signal crosses a trigger threshold that you specify. You can specify the slope as either positive (on the rising edge) or negative (on the falling edge) to the trigger. Edge triggering is possible on all analog trigger channels, such as 0, 1, or the external trigger channel.





Remarks:

· This function is tested with a NI PCI-5122 device.

· When there occurs an error during the execution of the low level NI-Scope functions, Jabil Test will fail and return the error message.

· The function will verify if the given parameter exists, otherwise Jabil Test fails and returns the error message.



Result:

$ErrorCode = NI_Scope_ConfigureTriggerEdge($NI_ScopeHandle, $triggerSource, $triggerLevel, $triggerPolarity, $triggerCoupling, $triggerHoldOff, $triggerDelay);

Function arguments



Parameter

Variable Type

Description



$NI_ScopeHandle

Object

The instrument handle you obtain from NI_Scope_Initialize that identifies a particular instrument's session.



$triggerSource

String

The trigger source. Valid trigger sources vary depending on your digitizer. Possible values:

· 0

· 1

· VAL_IMMEDIATE

· VAL_EXTERNAL

· VAL_SW_TRIG_FUNC

· VAL_RTSI_0

· VAL_RTSI_1

· VAL_RTSI_2

· VAL_RTSI_3

· VAL_RTSI_4

· VAL_RTSI_5

· VAL_RTSI_6

· VAL_PFI_0

· VAL_PFI_1

· VAL_PFI_2

· VAL_PXI_STAR



$triggerLevel

Double

The voltage threshold for the trigger.



$triggerPolarity

String

Specifies whether you want a rising edge or a falling edge to trigger. Possible values:

· NEGATIVE

· POSITIVE



$triggerCoupling

String

Specifies how you want the digitizer to couple the trigger signal. Possible values:

· AC

· DC

· HF REJECT

· LF REJECT

· AC PLUS HF REJECT



$triggerHoldOff

Double

Specifies the length of time the digitizer waits after detecting a trigger before enabling NI-SCOPE to detect another trigger. Use the trigger holdoff to skip a specific number of frames between acquisitions. For example, to acquire a specific line number multiple times and repeat the same chroma phase, skip 1 frame in M-NTSC (35 ms < holdoff < 60 ms), 3 frames in PAL (121 ms < holdoff < 159 ms) and 5 frames in SECAM (201 ms < holdoff < 239 ms).



$triggerDelay

Double

Specifies how long the digitizer waits after receiving the trigger to start acquiring data.





Return parameters



Parameter

Variable Type

Description



$ErrorCode

Integer

Reports the status of this operation. To obtain a text description of the status code, call NI_Scope_ErrorMessage. To obtain additional information concerning the error condition, use NI_Scope_GetError and NI_Scope_ClearError. The general meaning of the status code is as:

· 0: success

· Positive value: warning

· Negative value: errors





Example(s):

$triggerSource = New("String", "0");

$triggerLevel = New("Float", -0.3);

$triggerPolarity = New("String", "negative");

$triggerCoupling = New("String", "dc");

$triggerHoldOff = New("Float", 0.0);

$triggerDelay = New("Float", 0.0);



$ErrorCode = NI_Scope_ConfigureTriggerEdge($NI_ScopeHandle, $triggerSource, $triggerLevel, $triggerPolarity, $triggerCoupling, $triggerHoldOff, $triggerDelay);





NI_Scope_ConfigureTriggerHysteresis

Previous Top Next



* * *



NI_Scope_ConfigureTriggerHysteresis



Usage:

$ErrorCode = NI_Scope_ConfigureTriggerHysteresis($NI_ScopeHandle, $triggerSource, $level, $hysteresisLevel, $triggerSlope, $triggerCoupling, $triggerHoldOff, $triggerDelay);



Description:

This function requires NI Scope drivers to be installed on the system.

Configures common properties for analog hysteresis triggering. This kind of trigger specifies an additional value, specified in the hysteresis parameter, that a signal must pass through before a trigger can occur. This additional value acts as a kind of buffer zone that keeps noise from triggering an acquisition.

Hysteresis triggers eliminate incorrect triggers caused by noisy signals. For example, if your signal contains two rising edges of different amplitudes, you can use hysteresis triggering to trigger on one of the edges. Although NI-SCOPE uses a default amount of hysteresis for edge triggering, which is typically 2.5% of the vertical range, you can override that value by setting your own hysteresis values. The Configure Trigger Hysteresis function or VI allows you to choose the trigger coupling, trigger level, hysteresis value, and trigger slope.

Hysteresis triggering is possible on all analog trigger channels, such as 0, 1, or the external trigger input.



A positive slope hysteresis trigger is generated when the signal crosses below the voltage specified by the trigger level parameter minus the hysteresis value, and then crosses the trigger level.





A negative slope hysteresis trigger is generated when a signal crosses above the voltage specified by the trigger level parameter plus the hysteresis value, and then crosses the trigger level.





Remarks:

· This function is tested with a NI PCI-5122 device.

· When there occurs an error during the execution of the low level NI-Scope functions, Jabil Test will fail and return the error message.

· The function will verify if the given parameter exists, otherwise Jabil Test fails and returns the error message.



Result:

$ErrorCode = NI_Scope_ConfigureTriggerHysteresis($NI_ScopeHandle, $triggerSource, $level, $hysteresisLevel, $triggerSlope, $triggerCoupling, $triggerHoldOff, $triggerDelay);





Function arguments



Parameter

Variable Type

Description



$NI_ScopeHandle

Object

The instrument handle you obtain from NI_Scope_Initialize that identifies a particular instrument's session.



$triggerSource

String

The trigger source. Valid trigger sources vary depending on your digitizer. Possible values:

· 0

· 1

· VAL_IMMEDIATE

· VAL_EXTERNAL

· VAL_SW_TRIG_FUNC

· VAL_RTSI_0

· VAL_RTSI_1

· VAL_RTSI_2

· VAL_RTSI_3

· VAL_RTSI_4

· VAL_RTSI_5

· VAL_RTSI_6

· VAL_PFI_0

· VAL_PFI_1

· VAL_PFI_2

· VAL_PXI_STAR



$level

Double

The voltage threshold for the trigger.



$hysteresisLevel

Double

The size of the hysteresis window on either side of the level in volts. The digitizer triggers when the trigger signal passes through the hysteresis value you specify with this parameter, has the slope you specify with slope, and passes through the level.



$triggerSlope

String

Specifies the polarity of the video signal sync. Possible values:

· NEGATIVE

· POSITIVE



$triggerCoupling

String

Specifies how you want the digitizer to couple the trigger signal. Possible values:

· AC

· DC

· HF REJECT

· LF REJECT

· AC PLUS HF REJECT



$triggerHoldOff

Double

Specifies the length of time the digitizer waits after detecting a trigger before enabling NI-SCOPE to detect another trigger. Use the trigger hold off to skip a specific number of frames between acquisitions. For example, to acquire a specific line number multiple times and repeat the same chroma phase, skip 1 frame in M-NTSC (35 ms < holdoff < 60 ms), 3 frames in PAL (121 ms < holdoff < 159 ms) and 5 frames in SECAM (201 ms < holdoff < 239 ms).



$triggerDelay

Double

Specifies how long the digitizer waits after receiving the trigger to start acquiring data.





Return parameters



Parameter

Variable Type

Description



$ErrorCode

Integer

Reports the status of this operation. To obtain a text description of the status code, call NI_Scope_ErrorMessage. To obtain additional information concerning the error condition, use NI_Scope_GetError and NI_Scope_ClearError. The general meaning of the status code is as:

· 0: success

· Positive value: warning

· Negative value: errors





Example(s):

$triggerSource = New("String", "0");

$level = New("Float", -0.3);

$hysteresisLevel = New("Float", 0.3);

$triggerSlope= New("String", "negative");

$triggerCoupling = New("String", "ac");

$triggerHoldOff = New("Float", 0.0);

$triggerDelay = New("Float", 0.0);

$ErrorCode = NI_Scope_ConfigureTriggerHysteresis($NI_ScopeHandle, $triggerSource, $level, $hysteresisLevel, $triggerSlope, $triggerCoupling, $triggerHoldOff, $triggerDelay);





NI_Scope_ConfigureTriggerImmediate

Previous Top Next



* * *



NI_Scope_ConfigureTriggerImmediate



Usage:

$ErrorCode = NI_Scope_ConfigureTriggerImmediate($NI_ScopeHandle);



Description:

This function requires NI Scope drivers to be installed on the system.



This function configures common properties for immediate triggering. Immediate triggering means the digitizer triggers itself. There is no external signal that triggers the acquisition. The acquisition simply begins immediately after being configured by the driver software.



Remarks:

· This function is tested with a NI PCI-5122 device.

· When there occurs an error during the execution of the low level NI-Scope functions, Jabil Test will fail and return the error message.

· The function will verify if the given parameter exists, otherwise Jabil Test fails and returns the error message.



Result:

$ErrorCode = NI_Scope_ConfigureTriggerImmediate($NI_ScopeHandle);

Function arguments



Parameter

Variable Type

Description



$NI_ScopeHandle

Object

The instrument handle you obtain from NI_Scope_Initialize that identifies a particular instrument's session.





Return parameters



Parameter

Variable Type

Description



$ErrorCode

Integer

Reports the status of this operation. To obtain a text description of the status code, call NI_Scope_ErrorMessage. To obtain additional information concerning the error condition, use NI_Scope_GetError and NI_Scope_ClearError. The general meaning of the status code is as:

· 0: success

· Positive value: warning

· Negative value: errors





Example(s):

$ErrorCode = NI_Scope_ConfigureTriggerImmediate($NI_ScopeHandle);





NI_Scope_ConfigureTriggerSoftware

Previous Top Next



* * *



NI_Scope_ConfigureTriggerSoftware



Usage:

$ErrorCode = NI_Scope_ConfigureTriggerSoftware($NI_ScopeHandle, $triggerHoldOff, $triggerDelay);



Description:

This function requires NI Scope drivers to be installed on the system.

This function configures common properties for software triggering.



Remarks:

· This function is tested with a NI PCI-5122 device.

· When there occurs an error during the execution of the low level NI-Scope functions, Jabil Test will fail and return the error message.

· The function will verify if the given parameter exists, otherwise Jabil Test fails and returns the error message.

Result:

$ErrorCode = NI_Scope_ConfigureTriggerSoftware($NI_ScopeHandle, $triggerHoldOff, $triggerDelay);

Function arguments



Parameter

Variable Type

Description



$NI_ScopeHandle

Object

The instrument handle you obtain from NI_Scope_Initialize that identifies a particular instrument's session.



$triggerHoldOff

Double

Specifies the length of time (in seconds) the digitizer waits after detecting a trigger before enabling the trigger subsystem to detect another trigger. This attribute affects instrument operation only when the digitizer requires multiple acquisitions to build a complete waveform. The digitizer requires multiple waveform acquisitions when it uses equivalent-time sampling or when the digitizer is configured for a multirecord acquisition through a call to NI_Scope_ConfigureHorizontalTiming.

Unit : Seconds.



$triggerDelay

Double

Specifies the trigger delay time in seconds. The trigger delay time is the length of time the digitizer waits after receiving the trigger. The event that occurs when the trigger delay elapses is the Reference Event.

Unit : Seconds.

Valid range : 0.0 – 171.8





Return parameters



Parameter

Variable Type

Description



$ErrorCode

Integer

Reports the status of this operation. To obtain a text description of the status code, call NI_Scope_ErrorMessage. To obtain additional information concerning the error condition, use NI_Scope_GetError and NI_Scope_ClearError. The general meaning of the status code is as:

· 0: success

· Positive value: warning

· Negative value: errors





Example(s):

$triggerHoldOff = New("Float", 0.0);

$triggerDelay = New("Float", 0.0);

$ErrorCode = NI_Scope_ConfigureTriggerSoftware($NI_ScopeHandle, $triggerHoldOff, $triggerDelay);





NI_Scope_ConfigureTriggerVideo

Previous Top Next



* * *



NI_Scope_ConfigureTriggerVideo



Usage:

$ErrorCode = NI_Scope_ConfigureTriggerVideo($NI_ScopeHandle, $triggerSource, $enableDCRestore, $signalFormat, $triggerEvent, $lineNumber, $triggerPolarity, $triggerCoupling, $triggerHoldOff, $triggerDelay);



Description:

This function requires NI Scope drivers to be installed on the system.

Configures the common properties for video triggering, including the signal format, TV event, line number, polarity, and enable DC restore. A video trigger occurs when the digitizer finds a valid video signal sync.



The NI 5122/5124 includes a mode for triggering on NTSC, PAL, and SECAM format video signals. The NI 5122/5124 supports triggering on any line, a specific line number, or a specific field. The NI 5122/5124 supports negative trigger polarity in video mode, which means that the synchronization pulses must go to a negative voltage with respect to the back porch level. Using a vertical range that is too high may cause the digitizer to not trigger correctly on the video signal. NI 5122/5124 digitizers support DC restoration, which adjusts the back porch level of the video signal to 0 V. DC restore is performed on the digital data, rather than with an analog clamping circuit. When using DC restore, set the input voltage range to approximately twice the expected signal amplitude to prevent signal clipping as the amplitude and offset of the video signal change. DC restore measures the voltage of the back porch during the interval between the end of the color burst and before the start of the active line, then subtracts this value from the signal for the remainder of the active video line. Excess noise on the back porch portion of the video signal may cause inconsistent level restoration between lines.





Remarks:

· This function is tested with a NI PCI-5122 device.

· When there occurs an error during the execution of the low level NI-Scope functions, Jabil Test will fail and return the error message.

· The function will verify if the given parameter exists, otherwise Jabil Test fails and returns the error message.



Result:

$ErrorCode = NI_Scope_ConfigureTriggerVideo($NI_ScopeHandle, $triggerSource, $enableDCRestore, $signalFormat, $triggerEvent, $lineNumber, $triggerPolarity, $triggerCoupling, $triggerHoldOff, $triggerDelay);

Function arguments



Parameter

Variable Type

Description



$NI_ScopeHandle

Object

The instrument handle you obtain from NI_Scope_Initialize that identifies a particular instrument's session.



$triggerSource

String

The trigger source. Valid trigger sources vary depending on your digitizer. Possible values:

· "0"

· "1"

· "VAL_IMMEDIATE"

· "VAL_EXTERNAL"

· "VAL_SW_TRIG_FUNC"

· "VAL_RTSI_0"

· "VAL_RTSI_1"

· "VAL_RTSI_2"

· "VAL_RTSI_3"

· "VAL_RTSI_4"

· "VAL_RTSI_5"

· "VAL_RTSI_6"

· "VAL_PFI_0"

· "VAL_PFI_1"

· "VAL_PFI_2"

· "VAL_PXI_STAR"



$enableDCRestore

Boolean

Offsets each video line so the clamping level (the portion of the video line between the end of the color burst and the beginning of the active image) is moved to zero volt.



$signalFormat

String

Specifies the type of video signal sync the digitizer should look for. Possible values:

· NTSC

· PAL

· SECAM

· M_PAL

· 480I_59_94_FIELDS_PER_SECOND

· 480I_60_FIELDS_PER_SECOND

· 480P_59_94_FRAMES_PER_SECOND

· 480P_60_FRAMES_PER_SECOND

· 576I_50_FIELDS_PER_SECOND

· 576P_50_FRAMES_PER_SECOND

· 720P_50_FRAMES_PER_SECOND

· 720P_59_94_FRAMES_PER_SECOND

· 720P_60_FRAMES_PER_SECOND

· 1080I_50_FIELDS_PER_SECOND

· 1080I_59_94_FIELDS_PER_SECOND

· 1080I_60_FIELDS_PER_SECOND

· 1080P_24_FRAMES_PER_SECOND



$triggerEvent

String

Specifies the TV event you want to trigger on. You can trigger on a specific or on the next coming line or field of the signal. Possible values:

· FIELD1

· FIELD2

· ANY FIELD

· ANY LINE

· LINE NUMBER



$lineNumber

Double

Selects the line number to trigger on. The line number range covers an entire frame.



$triggerPolarity

String

Specifies the polarity of the video signal sync. Possible values:

· NEGATIVE

· POSITIVE



$triggerCoupling

String

Specifies how you want the digitizer to couple the trigger signal. Possible values:

· AC

· DC

· HF REJECT

· LF REJECT

· AC PLUS HF REJECT



$triggerHoldOff

Double

Specifies the length of time the digitizer waits after detecting a trigger before enabling NI-SCOPE to detect another trigger. Use the trigger holdoff to skip a specific number of frames between acquisitions. For example, to acquire a specific line number multiple times and repeat the same chroma phase, skip 1 frame in M-NTSC (35 ms < holdoff < 60 ms), 3 frames in PAL (121 ms < holdoff < 159 ms) and 5 frames in SECAM (201 ms < holdoff < 239 ms).



$triggerDelay

Double

Specifies how long the digitizer waits after receiving the trigger to start acquiring data.





Return parameters



Parameter

Variable Type

Description



$ErrorCode

Integer

Reports the status of this operation. To obtain a text description of the status code, call NI_Scope_ErrorMessage. To obtain additional information concerning the error condition, use NI_Scope_GetError and NI_Scope_ClearError. The general meaning of the status code is as:

· 0: success

· Positive value: warning

· Negative value: errors





Example(s):

$triggerSource = New("String", "0");

$enableDCRestore = New("Boolean", "TRUE");

$signalFormat = New("String", "pal");

$triggerEvent = New("String", "line number");

$lineNumber = New("Integer", 25);

$triggerPolarity = New("String", "negative");

$triggerCoupling = New("String", "dc");

$triggerHoldOff = New("Float", 0.0);

$triggerDelay = New("Float", 0.0);

$ErrorCode = NI_Scope_ConfigureTriggerVideo($NI_ScopeHandle, $triggerSource, $enableDCRestore, $signalFormat, $triggerEvent, $lineNumber, $triggerPolarity, $triggerCoupling, $triggerHoldOff, $triggerDelay);





NI_Scope_ConfigureTriggerWindow

Previous Top Next



* * *



NI_Scope_ConfigureTriggerWindow



Usage:

$ErrorCode = NI_Scope_ConfigureTriggerWindow($NI_ScopeHandle, $triggerSource, $lowLevel, $highLevel, $windowMode, $triggerCoupling, $triggerHoldOff, $triggerDelay);



Description:

This function requires NI Scope drivers to be installed on the system.

A window trigger occurs when a signal either enters or leaves a window you specify with the window mode parameters in the function. Window triggering is possible on all analog trigger channels, such as 0, 1, or the external trigger input.

Configures common properties for analog window triggering. A window trigger occurs when a signal enters or leaves a window you specify with the high level or low level parameters.

The following figure shows an entering window trigger.





The following figure shows a leaving window trigger.





Remarks:

· This function is tested with a NI PCI-5122 device.

· When there occurs an error during the execution of the low level NI-Scope functions, Jabil Test will fail and return the error message.

· The function will verify if the given parameter exists, otherwise Jabil Test fails and returns the error message.



Result:

$ErrorCode = NI_Scope_ConfigureTriggerWindow($NI_ScopeHandle, $triggerSource, $lowLevel, $highLevel, $windowMode, $triggerCoupling, $triggerHoldOff, $triggerDelay);

Function arguments



Parameter

Variable Type

Description



$NI_ScopeHandle

Object

The instrument handle you obtain from NI_Scope_Initialize that identifies a particular instrument's session.



$triggerSource

String

The trigger source. Valid trigger sources vary depending on your digitizer. Possible values:

· 0

· 1

· VAL_IMMEDIATE

· VAL_EXTERNAL

· VAL_SW_TRIG_FUNC

· VAL_RTSI_0

· VAL_RTSI_1

· VAL_RTSI_2

· VAL_RTSI_3

· VAL_RTSI_4

· VAL_RTSI_5

· VAL_RTSI_6

· VAL_PFI_0

· VAL_PFI_1

· VAL_PFI_2

· VAL_PXI_STAR



$lowWindowLevel

Double

Passes the voltage threshold you want the digitizer to use for low triggering.



$highWindowLevel

Double

Passes the voltage threshold you want the digitizer to use for high triggering.



$windowMode

String

Specifies whether you want the trigger to occur when the signal enters or leaves a window. Possible values:

· "ENTERING WINDOW"

· "LEAVING WINDOW"



$triggerCoupling

String

Specifies how you want the digitizer to couple the trigger signal. Possible values:

· AC

· DC

· HF REJECT

· LF REJECT

· AC PLUS HF REJECT



$triggerHoldOff

Double

Specifies the length of time the digitizer waits after detecting a trigger before enabling NI-SCOPE to detect another trigger. Use the trigger hold off to skip a specific number of frames between acquisitions. For example, to acquire a specific line number multiple times and repeat the same chroma phase, skip 1 frame in M-NTSC (35 ms < holdoff < 60 ms), 3 frames in PAL (121 ms < holdoff < 159 ms) and 5 frames in SECAM (201 ms < holdoff < 239 ms).



$triggerDelay

Double

Specifies how long the digitizer waits after receiving the trigger to start acquiring data.





Return parameters



Parameter

Variable Type

Description



$ErrorCode

Integer

Reports the status of this operation. To obtain a text description of the status code, call NI_Scope_ErrorMessage. To obtain additional information concerning the error condition, use NI_Scope_GetError and NI_Scope_ClearError. The general meaning of the status code is as:

· 0: success

· Positive value: warning

· Negative value: errors





Example(s):

$triggerSource = New("String", "0");

$lowLevel = New("Float", -0.3);

$highLevel = New("Float", 0.2);

$windowMode = New("String", "entering window");

$triggerCoupling = New("String", "ac");

$triggerHoldOff = New("Float", 0.0);

$triggerDelay = New("Float", 0.0);

$ErrorCode = NI_Scope_ConfigureTriggerWindow($NI_ScopeHandle, $triggerSource, $lowLevel, $highLevel, $windowMode, $triggerCoupling, $triggerHoldOff, $triggerDelay);





NI_Scope_SendSWTrigger

Previous Top Next



* * *



NI_Scope_SendSWTrigger



Usage:

$ErrorCode = NI_Scope_SendSWTrigger($NI_ScopeHandle);



Description:

This function requires NI Scope drivers to be installed on the system.

Sends a command to trigger the digitizer. Call this function after you call NI_Scope_ConfigureTriggerSoftware.



Remarks:

· This function is tested with a NI PCI-5122 device.

· When there occurs an error during the execution of the low level NI-Scope functions, Jabil Test will fail and return the error message.

· The function will verify if the given parameter exists, otherwise Jabil Test fails and returns the error message.



Result:

$ErrorCode = NI_Scope_SendSWTrigger($NI_ScopeHandle);

Function arguments



Parameter

Variable Type

Description



$NI_ScopeHandle

Object

The instrument handle you obtain from NI_Scope_Initialize that identifies a particular instrument's session.





Return parameters



Parameter

Variable Type

Description



$ErrorCode

Integer

Reports the status of this operation. To obtain a text description of the status code, call NI_Scope_ErrorMessage. To obtain additional information concerning the error condition, use NI_Scope_GetError and NI_Scope_ClearError. The general meaning of the status code is as:

· 0: success

· Positive value: warning

· Negative value: errors





Example(s):

$ErrorCode = NI_Scope_SendSWTrigger($NI_ScopeHandle);





NI_Scope_SendSoftwareTriggerEdge

Previous Top Next



* * *



NI_Scope_SendSoftwareTriggerEdge



Usage:

$ErrorCode = NI_Scope_SendSoftwareTriggerEdge($NI_ScopeHandle, $triggerName);



Description:

This function requires NI Scope drivers to be installed on the system.

Sends the selected trigger to the digitizer. Call this function if you called NI_Scope_ConfigureTriggerSoftware when you want the Reference trigger to occur. You can also call this function to override a misused edge, digital, or hysteresis trigger.



Remarks:

· This function is tested with a NI PCI-5122 device.

· When there occurs an error during the execution of the low level NI-Scope functions, Jabil Test will fail and return the error message.

· The function will verify if the given parameter exists, otherwise Jabil Test fails and returns the error message.



Result:

$ErrorCode = NI_Scope_SendSoftwareTriggerEdge($NI_ScopeHandle, $triggerName);

Function arguments



Parameter

Variable Type

Description



$NI_ScopeHandle

Object

The instrument handle you obtain from NI_Scope_Initialize that identifies a particular instrument's session.



$triggerName

String

Specifies the type of trigger to send to the digitizer. Possible values:

· START TRIGGER

· ARM REFERENCE TRIGGER

· REFERENCE TRIGGER

· ADVANCE TRIGGER





Return parameters



Parameter

Variable Type

Description



$ErrorCode

Integer

Reports the status of this operation. To obtain a text description of the status code, call NI_Scope_ErrorMessage. To obtain additional information concerning the error condition, use NI_Scope_GetError and NI_Scope_ClearError. The general meaning of the status code is as:

· 0: success

· Positive value: warning

· Negative value: errors





Example(s):

$triggerName = New("String", "START TRIGGER");

$ErrorCode = NI_Scope_SendSoftwareTriggerEdge($NI_ScopeHandle, $triggerName);





NI_Scope_ConfigureChanCharacteristics

Previous Top Next



* * *



NI_Scope_ConfigureChanCharacteristics



Usage:

$ErrorCode = NI_Scope_ConfigureChanCharacteristics($NI_ScopeHandle, $channelName, $inputImpedance, $maxInputFrequency);



Description:

This function requires NI Scope drivers to be installed on the system.

Configures the attributes input impedance and the bandwidth that control the electrical characteristics of the channel.



Remarks:

· This function is tested with a NI PCI-5122 device.

· When there occurs an error during the execution of the low level NI-Scope functions, Jabil Test will fail and return the error message.

· The function will verify if the given parameter exists, otherwise Jabil Test fails and returns the error message.



Result:

$ErrorCode = NI_Scope_ConfigureChanCharacteristics($NI_ScopeHandle, $channelName, $inputImpedance, $maxInputFrequency);

Function arguments



Parameter

Variable Type

Description



$NI_ScopeHandle

Object

The instrument handle you obtain from NI_Scope_Initialize that identifies a particular instrument's session.



$channelName

String

The name of the channel to configure.



$inputImpedance

String

The input impedance parameter allows you to switch between 50 Ω and 1 MΩ input impedance, depending on your digitizer. The allowed vertical ranges may vary depending on the input impedance. If you measure a signal from a 50 Ω output function generator, set the digitizer for 50 Ω input to match your source. Impedance matching becomes much more important with higher frequency signals to avoid reflections of the signal that may distort your measurements. Alternatively, if you probe a circuit, it is best to use the high impedance setting on the digitizer to avoid changing the characteristics of the circuit.

Possible values:

· 50 OHM

· 1 MEGA OHM



$maxInputFrequency

Double

The max input frequency parameter sets the –3 dB cutoff frequency for a hardware analog filter. Setting this parameter to zero uses the default bandwidth of the digitizer. The filter attenuates signals greater than the cutoff frequency, which is useful for minimizing high-frequency noise when sampling at lower rates. For example, if you sample at 100 MS/s, you can resolve frequencies up to 50 MHz according to the Nyquist theorem. Any noise in the signal above 50 MHz, such as harmonics of the input signal, are aliased onto a frequency below 50 MHz. The solution is to filter this noise before the signal is digitized. This hardware filter is not available in all digitizers.





Return parameters



Parameter

Variable Type

Description



$ErrorCode

Integer

Reports the status of this operation. To obtain a text description of the status code, call NI_Scope_ErrorMessage. To obtain additional information concerning the error condition, use NI_Scope_GetError and NI_Scope_ClearError. The general meaning of the status code is as:

· 0: success

· Positive value: warning

· Negative value: errors





Example(s):

$channelName = New("String", "0");

$inputImpedance = New("String", "50 ohm");

$maxInputFrequency = New("Float", 0.0);

$ErrorCode = NI_Scope_ConfigureChanCharacteristics($NI_ScopeHandle, $channelName, $inputImpedance, $maxInputFrequency);





NI_Scope_ConfigureChannel

Previous Top Next



* * *



NI_Scope_ConfigureChannel



Usage:

$ErrorCode = NI_Scope_ConfigureChannel($NI_ScopeHandle, $channelName, $voltageRange, $DCOffset, $verticalCoupling, $probeAttenuation, $channelEnabled);



Description:

This function requires NI Scope drivers to be installed on the system.

This function configures the most commonly configured attributes of the instrument's channel subsystem.



Remarks:

· This function is tested with a NI PCI-5122 device.

· When there occurs an error during the execution of the low level NI-Scope functions, Jabil Test will fail and return the error message.

· The function will verify if the given parameter exists, otherwise Jabil Test fails and returns the error message.



Result:

$ErrorCode = NI_Scope_ConfigureChannel($NI_ScopeHandle, $channelName, $voltageRange, $DCOffset, $verticalCoupling, $probeAttenuation, $channelEnabled);

Function arguments



Parameter

Variable Type

Description



$NI_ScopeHandle

Object

The instrument handle you obtain from NI_Scope_Initialize that identifies a particular instrument's session.



$channelName

String

The name of the digitizer channel to configure.



$voltageRange

Double

Specifies the absolute value of the input range for a channel in volts. For example, to acquire a sine wave that spans between –5 and +5 V, set this attribute to 10.0 V.



Configure Vertical adjusts the vertical range for the digitizer. The vertical range is the full-scale (peak-to-peak) voltage range at the probe or the input to the digitizer. For example, a 10 V vertical range means the digitizer can measure a signal between –5 V and 5 V. The signal may be clipped if it exceeds this range, which means the analog-to-digital converter (ADC) is saturated, so all values above 5 V or below –5 V are mapped to approximately 5 V or –5 V, respectively. For optimum resolution, choose the smallest vertical range that completely covers your input signal and avoids clipping. For example, if your signal is 2 Vp-p and your vertical range is 10 Vp-p, you are only using one-fifth of the range of the ADC. With an 8-bit digitizer, you have 256 unique voltage levels, but if you only use one-fifth of the range, you only have 51 unique voltage levels. This results in a noisy signal from the quantization of the ADC.



$DCOffset

Double

Selects the DC offset added to the specified channel(s).



$verticalCoupling

String

Specifies how the digitizer couples the input signal for the channel. When input coupling changes, the input stage takes a finite amount of time to settle.



When you need to measure a small AC signal on top of a large DC component, you can use AC-coupling by setting the vertical coupling parameter in the Configure Vertical function. AC-coupling rejects any DC component in your signal before it is digitized. Activating AC-coupling inserts a capacitor in series with the input.

Valid values :

· "AC"

· "DC"

· "GND"



$probeAttenuation

Double

Specifies the probe attenuation for the input channel. For example, for a 10:1 probe, set this attribute to 10.0.



Probe attenuation scales your data to compensate for the attenuation of the probe. The voltage measured by the digitizer is multiplied by the probe attenuation parameter in the Configure Vertical function. The vertical range parameter is the voltage range you want after the probe compensation scaling. For example, if your probe attenuation is 10 and your vertical range is 10 V, the digitizer is set to measure a 1 Vp-p signal. The data returned with the Fetch function is 10 Vp-p.

Valid Values: Any positive real number. Typical values are 1, 10, and 100.



$channelEnabled

Boolean

Specifies whether the digitizer acquires a waveform for the channel.

· True : Acquire data on this channel.

· False : Do not acquire data on this channel.





Return parameters



Parameter

Variable Type

Description



$ErrorCode

Integer

Reports the status of this operation. To obtain a text description of the status code, call NI_Scope_ErrorMessage. To obtain additional information concerning the error condition, use NI_Scope_GetError and NI_Scope_ClearError. The general meaning of the status code is as:

· 0: success

· Positive value: warning

· Negative value: errors





Example(s):

$channelName = New("String", "0");

$voltageRange = New("Float", 2.0);

$DCOffset = New("Float", 0.0);

$verticalCoupling = New("String", "dc");

$probeAttenuation = New("Float", 1.0);

$channelEnabled = New("Boolean", "TRUE");





$ErrorCode = NI_Scope_ConfigureChannel($NI_ScopeHandle, $channelName, $voltageRange, $DCOffset, $verticalCoupling, $probeAttenuation, $channelEnabled);





NI_Scope_ConfigureVertical

Previous Top Next



* * *



NI_Scope_ConfigureVertical



Usage:

$ErrorCode = NI_Scope_ConfigureVertical($NI_ScopeHandle, $channelName, $verticalRange, $verticalOffset, $verticalCoupling, $probeAttenuation, $enabled);



Description:

This function requires NI Scope drivers to be installed on the system.

Configures the most commonly configured attributes of the digitizer vertical subsystem, such as the range, offset, coupling, probe attenuation, and the channel.

The Configure Vertical function is necessary in almost every program because it allows you to enable a channel. By default, all channels are disabled. To acquire data, you must enable a channel either with Configure Vertical or a Read function. As a convenience, Read functions automatically enable the channels passed into them.



Remarks:

· This function is tested with a NI PCI-5122 device.

· When there occurs an error during the execution of the low level NI-Scope functions, Jabil Test will fail and return the error message.

· The function will verify if the given parameter exists, otherwise Jabil Test fails and returns the error message.



Result:

$ErrorCode = NI_Scope_ConfigureVertical($NI_ScopeHandle, $channelName, $verticalRange, $verticalOffset, $verticalCoupling, $probeAttenuation, $enabled);

Function arguments



Parameter

Variable Type

Description



$NI_ScopeHandle

Object

The instrument handle you obtain from NI_Scope_Initialize that identifies a particular instrument's session.



$channelName

String

The name of the digitizer channel to configure.



$verticalRange

Double

Specifies the absolute value of the input range for a channel in volts. For example, to acquire a sine wave that spans between –5 and +5 V, set this attribute to 10.0 V.



Configure Vertical adjusts the vertical range for the digitizer. The vertical range is the full-scale (peak-to-peak) voltage range at the probe or the input to the digitizer. For example, a 10 V vertical range means the digitizer can measure a signal between –5 V and 5 V. The signal may be clipped if it exceeds this range, which means the analog-to-digital converter (ADC) is saturated, so all values above 5 V or below –5 V are mapped to approximately 5 V or –5 V, respectively. For optimum resolution, choose the smallest vertical range that completely covers your input signal and avoids clipping. For example, if your signal is 2 Vp-p and your vertical range is 10 Vp-p, you are only using one-fifth of the range of the ADC. With an 8-bit digitizer, you have 256 unique voltage levels, but if you only use one-fifth of the range, you only have 51 unique voltage levels. This results in a noisy signal from the quantization of the ADC.



$verticalOffset

Double

Specifies the location of the center of the range with respect to ground in volts. For example, to acquire a sine wave that spans between 0.0 and 10.0 V, set this attribute to 5.0 V.

The vertical offset parameter in the Configure Vertical function adjusts the middle of your vertical range. For example, if you set the vertical offset to 2 V with a vertical range of 10 V, your signal must be between –3 V and 7 V. Vertical offset allows you to adjust the range when analyzing signals with a DC offset. By centering the vertical offset on the DC level of your signal, you can use a smaller vertical range and optimize the resolution of your measurement.



$verticalCoupling

String

Specifies how the digitizer couples the input signal for the channel. When input coupling changes, the input stage takes a finite amount of time to settle.



When you need to measure a small AC signal on top of a large DC component, you can use AC-coupling by setting the vertical coupling parameter in the Configure Vertical function. AC-coupling rejects any DC component in your signal before it is digitized. Activating AC-coupling inserts a capacitor in series with the input.

Valid values :

· AC

· DC

· GND



$probeAttenuation

Double

Specifies the probe attenuation for the input channel. For example, for a 10:1 probe, set this attribute to 10.0.



Probe attenuation scales your data to compensate for the attenuation of the probe. The voltage measured by the digitizer is multiplied by the probe attenuation parameter in the Configure Vertical function. The vertical range parameter is the voltage range you want after the probe compensation scaling. For example, if your probe attenuation is 10 and your vertical range is 10 V, the digitizer is set to measure a 1 Vp-p signal. The data returned with the Fetch function is 10 Vp-p.

Valid Values: Any positive real number. Typical values are 1, 10, and 100.



$enabled

Boolean

Specifies whether the digitizer acquires a waveform for the channel.

· True : Acquire data on this channel.

· False : Do not acquire data on this channel.





Return parameters



Parameter

Variable Type

Description



$ErrorCode

Integer

Reports the status of this operation. To obtain a text description of the status code, call NI_Scope_ErrorMessage. To obtain additional information concerning the error condition, use NI_Scope_GetError and NI_Scope_ClearError. The general meaning of the status code is as:

· 0: success

· Positive value: warning

· Negative value: errors





Example(s):





$measureChannel = New("String", "0");

$verticalRange = New("Float", 2.0);

$verticalOffset = New("Float", 0.0);

$verticalCoupling = New("String", "ac");

$probeAttenuation = New("Float", 1.0);

$channelEnabled = New("Boolean", "TRUE");

$ErrorCode = NI_Scope_ConfigureVertical($NI_ScopeHandle, $measureChannel, $verticalRange, $verticalOffset, $verticalCoupling, $probeAttenuation, $channelEnabled);





NI_Scope_ClearError

Previous Top Next



* * *



NI_Scope_ClearError



Usage:

$ErrorCode = NI_Scope_ClearError($NI_ScopeHandle);



Description:

This function requires NI Scope drivers to be installed on the system.

Clears the error information for the current execution thread and the IVI session you specify.



Remarks:

· This function is tested with a NI PCI-5122 device.

· When there occurs an error during the execution of the low level NI-Scope functions, Jabil Test will fail and return the error message.

· The function will verify if the given parameter exists, otherwise Jabil Test fails and returns the error message.



Result:

$ErrorCode = NI_Scope_ClearError($NI_ScopeHandle);

Function arguments



Parameter

Variable Type

Description



$NI_ScopeHandle

Object

The instrument handle you obtain from NI_Scope_Initialize that identifies a particular instrument's session.





Return parameters



Parameter

Variable Type

Description



$ErrorCode

Integer

Reports the status of this operation. To obtain a text description of the status code, call NI_Scope_ErrorMessage. To obtain additional information concerning the error condition, use NI_Scope_GetError and NI_Scope_ClearError. The general meaning of the status code is as:

· 0: success

· Positive value: warning

· Negative value: errors





Example(s):

$ErrorCode = NI_Scope_ClearError($NI_ScopeHandle);





NI_Scope_ErrorHandler

Previous Top Next



* * *



NI_Scope_ErrorHandler



Usage:

($ErrorCode, $ErrorMessage, $ErrorSource) = NI_Scope_ErrorHandler($NI_ScopeHandle, $ErrorCode);



Description:

This function requires NI Scope drivers to be installed on the system.

This function takes the error code returned by NI-SCOPE functions and returns the interpretation as a user-readable string.



Remarks:

· This function is tested with a NI PCI-5122 device.

· When there occurs an error during the execution of the low level NI-Scope functions, Jabil Test will fail and return the error message.

· The function will verify if the given parameter exists, otherwise Jabil Test fails and returns the error message.



Result:

($ErrorCode, $ErrorMessage, $ErrorSource) = NI_Scope_ErrorHandler($NI_ScopeHandle, $ErrorCode);

Function arguments



Parameter

Variable Type

Description



$NI_ScopeHandle

Object

The instrument handle you obtain from NI_Scope_Initialize that identifies a particular instrument's session.



$ErrorCode

Integer

The error code that is returned from any of the instrument driver functions.





Return parameters



Parameter

Variable Type

Description



$ErrorCode

Integer

Reports the status of this operation. To obtain a text description of the status code, call NI_Scope_ErrorHandler. To obtain additional information concerning the error condition, use NI_Scope_ErrorHandler and NI_Scope_ClearError. The general meaning of the status code is as:

· 0: success

· Positive value: warning

· Negative value: errors



$ErrorMessage

String

Returns the interpreted error code as a user-readable string.



$ErrorSource

String

Returns the interpreted error code as a user-readable string.





Example(s):

($ErrorCode, $ErrorMessage, $ErrorSource) = NI_Scope_ErrorHandler($NI_ScopeHandle, $ErrorCode);





NI_Scope_ErrorMessage

Previous Top Next



* * *



NI_Scope_ErrorMessage



Usage:

($ErrorCode, $ErrorMessage) = NI_Scope_ErrorMessage($NI_ScopeHandle, $ErrorCode);



Description:

This function requires NI Scope drivers to be installed on the system.

This function takes the error code returned by NI-SCOPE functions and returns the interpretation as a user-readable string.



Remarks:

· This function is tested with a NI PCI-5122 device.

· When there occurs an error during the execution of the low level NI-Scope functions, Jabil Test will fail and return the error message.

· The function will verify if the given parameter exists, otherwise Jabil Test fails and returns the error message.



Result:

($ErrorCode, $ErrorMessage) = NI_Scope_ErrorMessage($NI_ScopeHandle, $ErrorCode);

Function arguments



Parameter

Variable Type

Description



$NI_ScopeHandle

Object

The instrument handle you obtain from NI_Scope_Initialize that identifies a particular instrument's session.



$ErrorCode

Integer

The error code that is returned from any of the instrument driver functions.





Return parameters



Parameter

Variable Type

Description



$ErrorCode

Integer

Reports the status of this operation. To obtain a text description of the status code, call NI_Scope_ErrorMessage. To obtain additional information concerning the error condition, use NI_Scope_ErrorMessage and NI_Scope_ClearError. The general meaning of the status code is as:

· 0: success

· Positive value: warning

· Negative value: errors



$ErrorMessage

String

Returns the interpreted error code as a user-readable string.





Example(s):

($ErrorCode, $ErrorMessage) = NI_Scope_ErrorMessage($NI_ScopeHandle, $ErrorCode);





NI_Scope_GetError

Previous Top Next



* * *



NI_Scope_GetError



Usage:

($ErrorCode, $functionErrorCode, $ErrorMessage) = NI_Scope_GetError($NI_ScopeHandle);



Description:

This function requires NI Scope drivers to be installed on the system.

This function reads an error code and message from the error queue. National Instruments digitizers do not contain an error queue. Errors are reported as they occur. Therefore, this function does not detect errors.



Remarks:

· This function is tested with a NI PCI-5122 device.

· When there occurs an error during the execution of the low level NI-Scope functions, Jabil Test will fail and return the error message.

· The function will verify if the given parameter exists, otherwise Jabil Test fails and returns the error message.



Result:

($ErrorCode, $functionErrorCode, $ErrorMessage) = NI_Scope_GetError($NI_ScopeHandle);

Function arguments



Parameter

Variable Type

Description



$NI_ScopeHandle

Object

The instrument handle you obtain from NI_Scope_Initialize that identifies a particular instrument's session.





Return parameters



Parameter

Variable Type

Description



$ErrorCode

Integer

Reports the status of this operation. To obtain a text description of the status code, call NI_Scope_ErrorMessage. To obtain additional information concerning the error condition, use NI_Scope_GetError and NI_Scope_ClearError. The general meaning of the status code is as:

· 0: success

· Positive value: warning

· Negative value: errors



$functionErrorCode

Integer

Pass the Error Code that is returned from any of the instrument driver functions.



$ErrorMessage

String

Pass the Error Code that is returned from any of the instrument driver functions.





Example(s):

($ErrorCode, $functionErrorCode, $ErrorMessage) = NI_Scope_GetError($NI_ScopeHandle);





NI_Scope_AddWaveformProcessing

Previous Top Next



* * *



NI_Scope_AddWaveformProcessing



Usage:

$ErrorCode = NI_Scope_AddWaveformProcessing($NI_ScopeHandle, $channelList, $ArrayMeasurementFunction);



Description:

This function requires NI Scope drivers to be installed on the system.

This function adds one measurement to the list of processing steps that are completed before the measurement. The processing is added on a per channel basis, and the processing measurements are completed in the same order they are registered. The processing measurements are streamed, so the result of the first processing step is used as the input for the next step. The processing is done before any other measurements.



Remarks:

· This function is tested with a NI PCI-5122 device.

· When there occurs an error during the execution of the low level NI-Scope functions, Jabil Test will fail and return the error message.

· The function will verify if the given parameter exists, otherwise Jabil Test fails and returns the error message.



Result:

$ErrorCode = NI_Scope_AddWaveformProcessing($NI_ScopeHandle, $channelList, $ArrayMeasurementFunction);

Function arguments



Parameter

Variable Type

Description



$NI_ScopeHandle

Object

The instrument handle you obtain from NI_Scope_Initialize that identifies a particular instrument's session.



$channelList

String

The channel name you want to add a processing function to



$ArrayMeasurementFunction

String

The array measurement to add:

· NO MEASUREMENT

· LAST ACQ HISTORGRAM

· MULTI ACQ TIME HISTOGRAM

· MULTI ACQ VOLTAGE HISTOGRAM

· BLACKMAN WINDOW

· HANNING WINDOW

· FLAT TOP WINDOW

· TRIANGLE WINDOW

· HAMMING WINDOW

· BESSEL FILTER

· WINDOWED FIR FILTER

· BUTTERWORTH FILTER

· CHEBYSHEV FILTER

· ADD CHANNELS

· MULTIPLY CHANNELS

· DIVIDE CHANNELS

· SUBTRACT CHANNELS

· DERIVATIVE

· MULTI ACQ AVERAGE

· ARRAY INTEGRAL

· INVERSE

· ARRAY GAIN

· ARRAY OFFSET

· FFT AMP SPECTRUM DB

· FFT PHASE SPECTRUM

· FFT AMP SPECTRUM VOLTS RMS

· POLYNOMIAL INTERPOLATION





Return parameters



Parameter

Variable Type

Description



$ErrorCode

Integer

Reports the status of this operation. To obtain a text description of the status code, call NI_Scope_ErrorMessage. To obtain additional information concerning the error condition, use NI_Scope_GetError and NI_Scope_ClearError. The general meaning of the status code is as:

· 0: success

· Positive value: warning

· Negative value: errors





Example(s):

$channelList = New(String, "0");

$ArrayMeasurementFunction = New(String, "NO MEASUREMENT");





$ErrorCode = NI_Scope_AddWaveformProcessing($NI_ScopeHandle, $channelList, $ArrayMeasurementFunction);





NI_Scope_ClearWaveformMeasurementStats

Previous Top Next



* * *



NI_Scope_ClearWaveformMeasurementStats



Usage:

$ErrorCode = NI_Scope_ClearWaveformMeasurementStats($NI_ScopeHandle, $channelName, $measurementFunction);



Description:

This function requires NI Scope drivers to be installed on the system.

This function clears the waveform stats on the channel and measurement you specify.

Every time a measurement is called, the statistics information is updated, including the min, max, mean, standard deviation, and number of updates. This information is fetched with NI_Scope_FetchMeasurementStats. The multi-acquisition array measurements are also cleared with this function.





Remarks:

· This function is tested with a NI PCI-5122 device.

· When there occurs an error during the execution of the low level NI-Scope functions, Jabil Test will fail and return the error message.

· The function will verify if the given parameter exists, otherwise Jabil Test fails and returns the error message.



Result:

$ErrorCode = NI_Scope_ClearWaveformMeasurementStats($NI_ScopeHandle, $channelName, $measurementFunction);

Function arguments



Parameter

Variable Type

Description



$NI_ScopeHandle

Object

The instrument handle you obtain from NI_Scope_Initialize that identifies a particular instrument's session.



$channelName

String

The channel for the measurements you want to clear, such as 0 or 1.



$measurementFunction

String

The scalar measurement or array measurement to clear the stats for. Possible values:

· AC ESTIMATE

· DC ESTIMATE

· FFT AMPLITUDE

· VOLTAGE CYCLE RMS

· VOLTAGE RMS

· VOLTAGE AVERAGE

· VOLTAGE CYCLE AVERAGE

· AREA

· INTEGRAL

· CYCLE AREA

· VOLTAGE MIN

· VOLTAGE LOW

· VOLTAGE MAX

· VOLTAGE HIGH

· VOLTAGE PEAK TO PEAK

· VOLTAGE AMPLITUDE

· VOLTAGE BASE

· VOLTAGE TOP

· VOLTAGE BASE TO TOP

· OVERSHOOT

· PRESHOOT

· LOW REF VOLTAGE

· MID REF VOLTAGE

· HIGH REF VOLTAGE

· FALL TIME

· DUTY CYCLE POS

· DUTY CYCLE NEG

· FALL SLEW RATE

· RISE TIME

· WIDTH NEG

· RISE SLEW RATE

· WIDTH POS

· PHASE DELAY

· TIME DELAY

· AVERAGE FREQUENCY

· FFT FREQUENCY

· AVERAGE PERIOD

· FREQUENCY

· PERIOD

· TIME HISTOGRAM HITS

· TIME HISTOGRAM MEAN PLUS 3 STDEV

· TIME HISTOGRAM MAX

· TIME HISTOGRAM MEDIAN

· TIME HISTOGRAM MEAN

· TIME HISTOGRAM MIN

· TIME HISTOGRAM PEAK TO PEAK

· TIME HISTOGRAM MODE

· TIME HISTOGRAM MEAN PLUS STDEV

· TIME HISTOGRAM NEW HITS

· TIME HISTOGRAM MEAN PLUS 2 STDEV

· TIME HISTOGRAM STDEV

· VOLTAGE HISTOGRAM HITS

· VOLTAGE HISTOGRAM MEAN PLUS 3 STDEV

· VOLTAGE HISTOGRAM MAX

· VOLTAGE HISTOGRAM MEDIAN

· VOLTAGE HISTOGRAM MEAN

· VOLTAGE HISTOGRAM MIN

· VOLTAGE HISTOGRAM PEAK TO PEAK

· VOLTAGE HISTOGRAM MODE

· VOLTAGE HISTOGRAM MEAN PLUS STDEV

· VOLTAGE HISTOGRAM NEW HITS

· VOLTAGE HISTOGRAM MEAN PLUS 2 STDEV

· VOLTAGE HISTOGRAM STDEV

· NO MEASUREMENT

· LAST ACQ HISTORGRAM

· MULTI ACQ TIME HISTOGRAM

· MULTI ACQ VOLTAGE HISTOGRAM

· BLACKMAN WINDOW

· HANNING WINDOW

· FLAT TOP WINDOW

· TRIANGLE WINDOW

· HAMMING WINDOW

· BESSEL FILTER

· WINDOWED FIR FILTER

· BUTTERWORTH FILTER

· CHEBYSHEV FILTER

· ADD CHANNELS

· MULTIPLY CHANNELS

· DIVIDE CHANNELS

· SUBTRACT CHANNELS

· DERIVATIVE

· MULTI ACQ AVERAGE

· ARRAY INTEGRAL

· INVERSE

· ARRAY GAIN

· ARRAY OFFSET

· FFT AMP SPECTRUM DB

· FFT PHASE SPECTRUM

· FFT AMP SPECTRUM VOLTS RMS

· POLYNOMIAL INTERPOLATION

· ALL MEASUREMENTS





Return parameters



Parameter

Variable Type

Description



$ErrorCode

Integer

Reports the status of this operation. To obtain a text description of the status code, call NI_Scope_ErrorMessage. To obtain additional information concerning the error condition, use NI_Scope_GetError and NI_Scope_ClearError. The general meaning of the status code is as:

· 0: success

· Positive value: warning

· Negative value: errors





Example(s):

$channelName = New(String, "0");

$measurementFunction = New(String, "ALL MEASUREMENTS");

$ErrorCode = NI_Scope_ClearWaveformMeasurementStats($NI_ScopeHandle, $channelName, $measurementFunction);





NI_Scope_ClearWaveformProcessing

Previous Top Next



* * *



NI_Scope_ClearWaveformProcessing



Usage:

$ErrorCode = NI_Scope_ClearWaveformProcessing($NI_ScopeHandle, $channelList);



Description:

This function requires NI Scope drivers to be installed on the system.

This function clears the list of processing steps assigned to the given channel. The processing is added with the NI_Scope_AddWaveformProcessing function, where the processing steps are completed in the same order in which they are registered. The processing measurements are streamed, so the result of the first processing step is used as the input for the next step. The processing is also done before any other measurements.



Remarks:

· This function is tested with a NI PCI-5122 device.

· When there occurs an error during the execution of the low level NI-Scope functions, Jabil Test will fail and return the error message.

· The function will verify if the given parameter exists, otherwise Jabil Test fails and returns the error message.



Result:

$ErrorCode = NI_Scope_ClearWaveformProcessing($NI_ScopeHandle, $channelList);

Function arguments



Parameter

Variable Type

Description



$NI_ScopeHandle

Object

The instrument handle you obtain from NI_Scope_Initialize that identifies a particular instrument's session.



$channelList

String

The channel name you want to add a processing function to





Return parameters



Parameter

Variable Type

Description



$ErrorCode

Integer

Reports the status of this operation. To obtain a text description of the status code, call NI_Scope_ErrorMessage. To obtain additional information concerning the error condition, use NI_Scope_GetError and NI_Scope_ClearError. The general meaning of the status code is as:

· 0: success

· Positive value: warning

· Negative value: errors





Example(s):

$channelList = New("String", "0");

$ErrorCode = NI_Scope_ClearWaveformProcessing($NI_ScopeHandle, $channelList);





NI_Scope_FetchMeasurement

Previous Top Next



* * *



NI_Scope_FetchMeasurement



Usage:

($ErrorCode, $resultArray, $numWfms) = NI_Scope_FetchMeasurement($NI_ScopeHandle, $channelName, $timeOut, $scalarMeasureType);



Description:

This function requires NI Scope drivers to be installed on the system.

This function fetches a waveform from the digitizer and performs the specified waveform measurement.

Unlike Read functions, Fetch functions (NI_Scope_Fetch and NI_Scope_FetchMeasurement) acquire data asynchronously. That means these functions store data on your digitizer until you need it, which frees up your computer to perform other tasks and allows for better system performance. However, fetching requires additional functions that initiate waveform acquisitions and query your board to see if the acquisition is complete.

To fetch data, write a program that follows these general steps:

· Create a new instrument session using NI_Scope_Initialize.

· Configure your digitizer with NI-SCOPE Configuration functions.

· Call NI_Scope_ActualRecordLength to find the actual number of points your digitizer acquires for each channel.

· Call NI_Scope_InitiateAcquisition to initiate a waveform acquisition. Data will be acquired simultaneously on all enabled channels.

· Call NI_Scope_AcquisitionStatus in a loop to check if the acquisition is complete or in progress. This step is useful if you want to perform other tasks during the acquisition. The Fetch functions can also accept a timeout to force NI-SCOPE to wait until the acquisition is complete.

· Call the Fetch function you need. You can call multiple fetches if you are acquiring data from more than one channel or measurement.

· Call NI_Scope_Close to close the current session.



Remarks:

· This function is tested with a NI PCI-5122 device.

· When there occurs an error during the execution of the low level NI-Scope functions, Jabil Test will fail and return the error message.

· The function will verify if the given parameter exists, otherwise Jabil Test fails and returns the error message.



Result:

($ErrorCode, $resultArray, $numWfms) = NI_Scope_FetchMeasurement($NI_ScopeHandle, $channelName, $timeOut, $scalarMeasureType);

Function arguments



Parameter

Variable Type

Description



$NI_ScopeHandle

Object

The instrument handle you obtain from NI_Scope_Initialize that identifies a particular instrument's session.



$measureChannel

String

The channel you will acquire data from; it may be a single channel, such as "0" or "1", or a list of channels such as "0,1".



$measureTimeOut

Double

The time to wait in seconds for data to be acquired. Using 0 for this parameter tells NI-SCOPE to fetch whatever is currently available.



$scalarMeasureType

String

The scalar measurement to be performed (see below for more information). Possible values:

· AC ESTIMATE

· DC ESTIMATE

· FFT AMPLITUDE

· VOLTAGE CYCLE RMS

· VOLTAGE RMS

· VOLTAGE AVERAGE

· VOLTAGE CYCLE AVERAGE

· AREA

· INTEGRAL

· CYCLE AREA

· VOLTAGE MIN

· VOLTAGE LOW

· VOLTAGE MAX

· VOLTAGE HIGH

· VOLTAGE PEAK TO PEAK

· VOLTAGE AMPLITUDE

· VOLTAGE BASE

· VOLTAGE TOP

· VOLTAGE BASE TO TOP

· OVERSHOOT

· PRESHOOT

· LOW REF VOLTAGE

· MID REF VOLTAGE

· HIGH REF VOLTAGE

· FALL TIME

· DUTY CYCLE POS

· DUTY CYCLE NEG

· FALL SLEW RATE

· RISE TIME

· WIDTH NEG

· RISE SLEW RATE

· WIDTH POS

· PHASE DELAY

· TIME DELAY

· AVERAGE FREQUENCY

· FFT FREQUENCY

· AVERAGE PERIOD

· FREQUENCY

· PERIOD

· TIME HISTOGRAM HITS

· TIME HISTOGRAM MEAN PLUS 3 STDEV

· TIME HISTOGRAM MAX

· TIME HISTOGRAM MEDIAN

· TIME HISTOGRAM MEAN

· TIME HISTOGRAM MIN

· TIME HISTOGRAM PEAK TO PEAK

· TIME HISTOGRAM MODE

· TIME HISTOGRAM MEAN PLUS STDEV

· TIME HISTOGRAM NEW HITS

· TIME HISTOGRAM MEAN PLUS 2 STDEV

· TIME HISTOGRAM STDEV

· VOLTAGE HISTOGRAM HITS

· VOLTAGE HISTOGRAM MEAN PLUS 3 STDEV

· VOLTAGE HISTOGRAM MAX

· VOLTAGE HISTOGRAM MEDIAN

· VOLTAGE HISTOGRAM MEAN

· VOLTAGE HISTOGRAM MIN

· VOLTAGE HISTOGRAM PEAK TO PEAK

· VOLTAGE HISTOGRAM MODE

· VOLTAGE HISTOGRAM MEAN PLUS STDEV

· VOLTAGE HISTOGRAM NEW HITS

· VOLTAGE HISTOGRAM MEAN PLUS 2 STDEV

· VOLTAGE HISTOGRAM STDEV





Return parameters



Parameter

Variable Type

Description



$ErrorCode

Integer

Reports the status of this operation. To obtain a text description of the status code, call NI_Scope_ErrorMessage. To obtain additional information concerning the error condition, use NI_Scope_GetError and NI_Scope_ClearError. The general meaning of the status code is as:

· 0: success

· Positive value: warning

· Negative value: errors



$resultArray

Array

Contains an array of all measurements acquired; call NI_Scope_ActualNumWfms to determine the array length.



$numWfms

Integer

Returns the number of records times the number of channels.





Extra information of the scalar measurement types:

RMS Voltage Measurements



Measurement

Description

Units



AC Estimate

The DC estimate is subtracted from the waveform, and a Hanning window is applied to give a "processed waveform." The RMS voltage is calculated with the following equation:

sqrt ( [Σ processed waveform[i]^2] / [numPoints × enbw × cg^2] ),

where the equivalent noise bandwidth (enbw) for the Hanning window is 1.5, and the coherent gain (cg) is 0.5.

This algorithm minimizes the effect of a noninteger number of waveform cycles in the measurement, which could arbitrarily increase or decrease the RMS value.

Volts

RMS



Voltage Cycle RMS

The number of points in a period is calculated using the equation:

pointsPerPeriod = int (period / dt + 0.5),

where dt is the time between two points and int is a function that returns the integer portion of a floating-point number.

Volts

RMS



FFT Amplitude

The FFT amplitude spectrum is calculated using a split-radix real FFT, and the maximum amplitude is returned. If the input waveform size is not a power of two, the waveform is zero-padded to the next higher power of two. For best results, verify that your actual record length is a power of 2.

Volts

RMS



Voltage RMS

Determined by the following True RMS equation:

Voltage RMS = sqrt ( (Σ waveform[i]^2) / numPoints)

Volts

RMS





DC Voltage Measurements



Measurement

Description

Units



Voltage Average

Determined by the following equation:





Voltage Average = Σ waveform[i] / numPoints

Volts





Area Measurements



Measurement

Description

Units



Area

Determined by the following equation:

area = voltage average × numPoints × delta time between two points

Volt x seconds



Integral

Numerical integration is done using Simpson's rule.

Volt x seconds



Cycle area

Determined by the following equation:

Cycle area = voltage cycle average × pointsPerPeriod × dt

where pointsPerPeriod is defined in the voltage cycle average description.

Volt x seconds





Voltage Extrema Measurements



Measurement

Description

Units



Voltage Minimum

The waveform is searched for the minimum point.

Volts



Voltage Low

The last acquisition histogram method is used where the voltage low result is the voltage of the histogram bin with the maximum number of hits below 40% of the voltage peak-to-peak value of the waveform. This calculation is useful for ignoring the overshoot and preshoot on square waves.

Volts



Voltage Maximum

The waveform is searched for its maximum point.

Volts



Voltage High

The last histogram method is used where the voltage high result is the voltage of the histogram bin with the maximum number of hits above 60% of the voltage peak-to-peak value of the waveform. This calculation is useful for ignoring the overshoot and preshoot on square waves.

Volts



Voltage Peak to Peak

The maximum voltage minus the minimum voltage.

Volts



Voltage Amplitude

The voltage high minus the voltage low.

Volts



Voltage Base

If the histogram bin corresponding to voltage low has over 5% of the total hits, the voltage low result is returned. Otherwise, the voltage minimum calculation is returned. This allows using the voltage base to get a reasonable answer for either a square wave (ignoring the overshoot and preshoot) or a triangle wave (where a histogram fails).

Volts



Voltage Top

If the histogram bin corresponding to voltage high has over 5% of the total hits, the voltage high result is returned. Otherwise, the voltage maximum calculation is returned. This allows using the voltage top to get a reasonable answer for either a square wave (ignoring the overshoot and preshoot) or a triangle wave (where a histogram fails).

Volts



Voltage Base to Base

Voltage top minus voltage base.

Volts



Overshoot

The measurement is done on the first edge of the waveform. If two edges exist, the algorithm finds the time interval from the first edge until one half the time to the second edge. The local maxima and minima are found in this interval. If only one edge is present in the waveform, the local maximum and minimum is found between the first edge and the end of the waveform.

If the first edge is positive sloped, overshoot = 100 × (local maximum – voltage high) / voltage amplitude.





If the first edge is negative sloped, overshoot = 100 × (voltage low – local minimum) / voltage amplitude.



Volts



Preshoot

The measurement is done on the second edge of the waveform if two edges exist. The algorithm finds the time interval from the middle time between the two edges until the second edge. The local maxima and minima are found in this interval. If only one edge is present in the waveform, the local maximum and minimum are found from the start of the waveform to the first edge.

If the edge is negative sloped, preshoot = 100 × (local maximum – voltage high) / voltage amplitude.





If the edge is positive sloped, preshoot = 100 × (voltage low – local minimum) / voltage amplitude.



Volts





Reference Level Measurements



Measurement

Description

Units



Low-Reference Voltage

The voltage corresponding to the low reference level.

Volts



Mid-Reference Voltage

The voltage corresponding to the mid reference level.

Volts



High-Reference Voltage

The voltage corresponding to the high reference level.

Volts





Time Measurements



Measurement

Description

Units



Fall Time

The time span in seconds from when the waveform crosses the high reference level until it crosses the low reference level. The measurement starts at the left edge of the waveform and finds all high reference level crossings until a low reference level crossing. The final high reference level crossing is used in the calculation.



Seconds



Positive Duty Cycle

The positive width divided by the period times 100.

Percentage



Fall Slew Rate

The low reference voltage minus the high reference voltage is divided by the fall-time calculation. The result is always negative.

Volts/Second



Rise Time

The time span from when the waveform crosses the low reference level until it crosses the high reference level in seconds. The measurement starts at the left edge of the waveform and finds all low reference level crossings until a high reference level crossing. The final low reference level crossing is used in the calculation.



Seconds



Negative Width

The time difference between the first two mid reference level crossings, where the slopes are negative and positive, respectively. A digital hysteresis is used when finding the crosspoints.

Seconds



Rising Slew Rate

The high reference voltage minus the low reference voltage is divided by the rise-time calculation.

Volts/Second



Positive Width

The time difference in seconds between the first two mid reference level crossings, where the slopes are positive and negative respectively. A digital hysteresis is used when finding the crosspoints.

Seconds



Negative Duty Cycle

The negative width divided by the period times 100.

Percentage





Two-channel Measurements (scalar)



Measurement

Description

Units



Phase Delay

The time delay divided by the period (of the waveform on the channel specified by the measurement function) times 360 degrees.

Degrees



Time Delay

The time delay is the time between two edges with the same slope. The mid reference level is stored on a per channel basis, and mid reference levels do not need to be the same. All reference levels use a digital hysteresis.

Seconds





Period and Frequency Measurements



Measurement

Description

Units



Frequency

1.0 divided by the period.

Hertz



Period

Finds the time between the first and third mid reference level crosspoints in seconds. A hysteresis window is applied when finding crosspoints. The mid reference level is 50% by default.

Seconds



Average Frequency

1.0 divided by the average period.

Hertz



Average Period

Up to 256 mid reference level crossings are found on the waveform, using a digital hysteresis. The time difference between the last crossing and the first crossing is divided by the number of periods found in the waveform. The last crossing is defined as the last crossing in the waveform with the same slope as the first crossing, so an integer number of periods exist in the waveform.

Seconds



FFT Frequency

The FFT amplitude spectrum is calculated using a split-radix real FFT, and the frequency corresponding to the maximum amplitude is returned. If the input waveform size is not a power of two, the waveform is zero padded to the next higher power of two. The frequency resolution is sampling rate / number of points. The DC bin of the FFT is ignored when searching for the maximum amplitude, so the FFT frequency should ignore any DC offsets. However, the zero padding used in the FFT measurement can introduce other low-frequency components if the waveform has a large DC offset. To eliminate the effects of zero-padding, verify that your actual record length is a power of 2.

Hertz





Time Histogram Measurements



Measurement

Description

Units



Hits

Number of points in the histogram.

-



New Hits

Number of points added to the histogram by the most recent acquisition.

-



Maximum

The highest bin value with at least one hit.

Seconds



Minimum

The lowest bin value with at least one hit.

Seconds



Mean

Histogram Mean = [ Σ (bin hits × bin value) ] / total hits.

The bin value is the center time value of the histogram bin.

Seconds



Median

The bin value where half the histogram hits are above it and half the histogram hits are below.

Seconds



Mode

The bin value with the most hits. If there is a tie, the lower time value is returned.

Seconds



Peak-to-Peak

Histogram maximum minus the histogram minimum.

Seconds



Mean Plus 2 Standard Deviations

The percentage of hits in the histogram between the mean minus two times the standard deviation and the mean plus two times the standard deviation. The percentage is returned in the range 0–100.

Percentage



Mean Plus 3 Standard Deviations

The percentage of hits in the histogram between the mean minus three times the standard deviation and the mean plus three times the standard deviation. The percentage is returned in the range 0–100.

Percentage



Standard Deviation



Seconds





Voltage Histogram Measurements



Measurement

Description

Units



Hits

Number of points in the histogram.

-



New Hits

Number of points added to the histogram by the most recent acquisition.

-



Maximum

The highest bin value with at least one hit.

Seconds



Minimum

The lowest bin value with at least one hit.

Seconds



Mean

Histogram Mean = [ Σ (bin hits × bin value) ] / total hits.

The bin value is the center time value of the histogram bin.

Seconds



Median

The bin value where half the histogram hits are above it and half the histogram hits are below.

Seconds



Mode

The bin value with the most hits. If there is a tie, the lower voltage value is returned.

Seconds



Peak-to-Peak

Histogram maximum minus the histogram minimum.

Seconds



Standard Deviation





Seconds



Mean Plus 2 Standard Deviations

The percentage of hits in the histogram between the mean minus two times the standard deviation and the mean plus two times the standard deviation. The percentage is returned in the range 0–100.

Percentage



Mean Plus 3 Standard Deviations

The percentage of hits in the histogram between the mean minus three times the standard deviation and the mean plus three times the standard deviation. The percentage is returned in the range 0–100.

Percentage





Example(s):

$channelName = New("String", "0,1");

$timeOut = New("Float", 5.0);

$measureType = New("String", "FREQUENCY");

($ErrorCode, $resultArray, $numWfms) = NI_Scope_FetchMeasurement($NI_ScopeHandle, $channelName, $timeOut, $measureType);

// Get desired array value

$result = ArrayGetValue($resultArray, 0, 0);

UpdateStatus($result);

$result = ArrayGetValue($resultArray, 0, 1);

UpdateStatus($result);





NI_Scope_ReadMeasurement

Previous Top Next



* * *



NI_Scope_ReadMeasurement



Usage:

($ErrorCode, $resultArray) = NI_Scope_ReadMeasurement($NI_ScopeHandle, $measureChannel, $measureTimeOut, $scalarMeasureType);



Description:

This function requires NI Scope drivers to be installed on the system.

This function initiates an acquisition, waits for it to complete, and performs the specified waveform measurement for a single channel and record or for multiple channels and records.

Many of the measurements use the low, mid, and high reference levels.



Remarks:

· This function is tested with a NI PCI-5122 device.

· When there occurs an error during the execution of the low level NI-Scope functions, Jabil Test will fail and return the error message.

· The function will verify if the given parameter exists, otherwise Jabil Test fails and returns the error message.



Result:

($ErrorCode, $resultArray) = NI_Scope_ReadMeasurement($NI_ScopeHandle, $measureChannel, $measureTimeOut, $scalarMeasureType);

Function arguments



Parameter

Variable Type

Description



$NI_ScopeHandle

Object

The instrument handle you obtain from NI_Scope_Initialize that identifies a particular instrument's session.



$measureChannel

String

The channel you will acquire data from; it may be a single channel, such as "0" or "1", or a list of channels such as "0,1".



$measureTimeOut

Double

The time to wait in seconds for data to be acquired. Using 0 for this parameter tells NI-SCOPE to fetch whatever is currently available.



$scalarMeasureType

String

The scalar measurement to be performed (see below for more information). Possible values:

· "AC ESTIMATE"

· "DC ESTIMATE"

· "FFT AMPLITUDE"

· "VOLTAGE CYCLE RMS"

· "VOLTAGE RMS"

· "VOLTAGE AVERAGE"

· "VOLTAGE CYCLE AVERAGE"

· "AREA"

· "INTEGRAL"

· "CYCLE AREA"

· "VOLTAGE MIN"

· "VOLTAGE LOW"

· "VOLTAGE MAX"

· "VOLTAGE HIGH"

· "VOLTAGE PEAK TO PEAK"

· "VOLTAGE AMPLITUDE"

· "VOLTAGE BASE"

· "VOLTAGE TOP"

· "VOLTAGE BASE TO TOP"

· "OVERSHOOT"

· "PRESHOOT"

· "LOW REF VOLTAGE"

· "MID REF VOLTAGE"

· "HIGH REF VOLTAGE"

· "FALL TIME"

· "DUTY CYCLE POS"

· "DUTY CYCLE NEG"

· "FALL SLEW RATE"

· "RISE TIME"

· "WIDTH NEG"

· "RISE SLEW RATE"

· "WIDTH POS"

· "PHASE DELAY"

· "TIME DELAY"

· "AVERAGE FREQUENCY"

· "FFT FREQUENCY"

· "AVERAGE PERIOD"

· "FREQUENCY"

· "PERIOD"

· "TIME HISTOGRAM HITS"

· "TIME HISTOGRAM MEAN PLUS 3 STDEV"

· "TIME HISTOGRAM MAX"

· "TIME HISTOGRAM MEDIAN"

· "TIME HISTOGRAM MEAN"

· "TIME HISTOGRAM MIN"

· "TIME HISTOGRAM PEAK TO PEAK"

· "TIME HISTOGRAM MODE"

· "TIME HISTOGRAM MEAN PLUS STDEV"

· "TIME HISTOGRAM NEW HITS"

· "TIME HISTOGRAM MEAN PLUS 2 STDEV"

· "TIME HISTOGRAM STDEV"

· "VOLTAGE HISTOGRAM HITS"

· "VOLTAGE HISTOGRAM MEAN PLUS 3 STDEV"

· "VOLTAGE HISTOGRAM MAX"

· "VOLTAGE HISTOGRAM MEDIAN"

· "VOLTAGE HISTOGRAM MEAN"

· "VOLTAGE HISTOGRAM MIN"

· "VOLTAGE HISTOGRAM PEAK TO PEAK"

· "VOLTAGE HISTOGRAM MODE"

· "VOLTAGE HISTOGRAM MEAN PLUS STDEV"

· "VOLTAGE HISTOGRAM NEW HITS"

· "VOLTAGE HISTOGRAM MEAN PLUS 2 STDEV"

· "VOLTAGE HISTOGRAM STDEV"





Return parameters



Parameter

Variable Type

Description



$ErrorCode

Integer

Reports the status of this operation. To obtain a text description of the status code, call NI_Scope_ErrorMessage. To obtain additional information concerning the error condition, use NI_Scope_GetError and NI_Scope_ClearError. The general meaning of the status code is as:

· 0: success

· Positive value: warning

· Negative value: errors



$resultArray

Array

Contains an array of all measurements acquired; call NI_Scope_ActualNumWfms to determine the array length.





Extra information of the scalar measurement types:

RMS Voltage Measurements



Measurement

Description

Units



AC Estimate

The DC estimate is subtracted from the waveform, and a Hanning window is applied to give a "processed waveform." The RMS voltage is calculated with the following equation:

sqrt ( [Σ processed waveform[i]^2] / [numPoints × enbw × cg^2] ),

where the equivalent noise bandwidth (enbw) for the Hanning window is 1.5, and the coherent gain (cg) is 0.5.

This algorithm minimizes the effect of a noninteger number of waveform cycles in the measurement, which could arbitrarily increase or decrease the RMS value.

Volts

RMS



Voltage Cycle RMS

The number of points in a period is calculated using the equation:

pointsPerPeriod = int (period / dt + 0.5),

where dt is the time between two points and int is a function that returns the integer portion of a floating-point number.

Volts

RMS



FFT Amplitude

The FFT amplitude spectrum is calculated using a split-radix real FFT, and the maximum amplitude is returned. If the input waveform size is not a power of two, the waveform is zero-padded to the next higher power of two. For best results, verify that your actual record length is a power of 2.

Volts

RMS



Voltage RMS

Determined by the following True RMS equation:

Voltage RMS = sqrt ( (Σ waveform[i]^2) / numPoints)

Volts

RMS





DC Voltage Measurements



Measurement

Description

Units



Voltage Average

Determined by the following equation:





Voltage Average = Σ waveform[i] / numPoints

Volts





Area Measurements



Measurement

Description

Units



Area

Determined by the following equation:

area = voltage average × numPoints × delta time between two points

Volt x seconds



Integral

Numerical integration is done using Simpson's rule.

Volt x seconds



Cycle area

Determined by the following equation:

Cycle area = voltage cycle average × pointsPerPeriod × dt

where pointsPerPeriod is defined in the voltage cycle average description.

Volt x seconds





Voltage Extrema Measurements



Measurement

Description

Units



Voltage Minimum

The waveform is searched for the minimum point.

Volts



Voltage Low

The last acquisition histogram method is used where the voltage low result is the voltage of the histogram bin with the maximum number of hits below 40% of the voltage peak-to-peak value of the waveform. This calculation is useful for ignoring the overshoot and preshoot on square waves.

Volts



Voltage Maximum

The waveform is searched for its maximum point.

Volts



Voltage High

The last histogram method is used where the voltage high result is the voltage of the histogram bin with the maximum number of hits above 60% of the voltage peak-to-peak value of the waveform. This calculation is useful for ignoring the overshoot and preshoot on square waves.

Volts



Voltage Peak to Peak

The maximum voltage minus the minimum voltage.

Volts



Voltage Amplitude

The voltage high minus the voltage low.

Volts



Voltage Base

If the histogram bin corresponding to voltage low has over 5% of the total hits, the voltage low result is returned. Otherwise, the voltage minimum calculation is returned. This allows using the voltage base to get a reasonable answer for either a square wave (ignoring the overshoot and preshoot) or a triangle wave (where a histogram fails).

Volts



Voltage Top

If the histogram bin corresponding to voltage high has over 5% of the total hits, the voltage high result is returned. Otherwise, the voltage maximum calculation is returned. This allows using the voltage top to get a reasonable answer for either a square wave (ignoring the overshoot and preshoot) or a triangle wave (where a histogram fails).

Volts



Voltage Base to Base

Voltage top minus voltage base.

Volts



Overshoot

The measurement is done on the first edge of the waveform. If two edges exist, the algorithm finds the time interval from the first edge until one half the time to the second edge. The local maxima and minima are found in this interval. If only one edge is present in the waveform, the local maximum and minimum is found between the first edge and the end of the waveform.

If the first edge is positive sloped, overshoot = 100 × (local maximum – voltage high) / voltage amplitude.





If the first edge is negative sloped, overshoot = 100 × (voltage low – local minimum) / voltage amplitude.



Volts



Preshoot

The measurement is done on the second edge of the waveform if two edges exist. The algorithm finds the time interval from the middle time between the two edges until the second edge. The local maxima and minima are found in this interval. If only one edge is present in the waveform, the local maximum and minimum are found from the start of the waveform to the first edge.

If the edge is negative sloped, preshoot = 100 × (local maximum – voltage high) / voltage amplitude.





If the edge is positive sloped, preshoot = 100 × (voltage low – local minimum) / voltage amplitude.



Volts





Reference Level Measurements



Measurement

Description

Units



Low-Reference Voltage

The voltage corresponding to the low reference level.

Volts



Mid-Reference Voltage

The voltage corresponding to the mid reference level.

Volts



High-Reference Voltage

The voltage corresponding to the high reference level.

Volts





Time Measurements



Measurement

Description

Units



Fall Time

The time span in seconds from when the waveform crosses the high reference level until it crosses the low reference level. The measurement starts at the left edge of the waveform and finds all high reference level crossings until a low reference level crossing. The final high reference level crossing is used in the calculation.



Seconds



Positive Duty Cycle

The positive width divided by the period times 100.

Percentage



Fall Slew Rate

The low reference voltage minus the high reference voltage is divided by the fall-time calculation. The result is always negative.

Volts/Second



Rise Time

The time span from when the waveform crosses the low reference level until it crosses the high reference level in seconds. The measurement starts at the left edge of the waveform and finds all low reference level crossings until a high reference level crossing. The final low reference level crossing is used in the calculation.



Seconds



Negative Width

The time difference between the first two mid reference level crossings, where the slopes are negative and positive, respectively. A digital hysteresis is used when finding the crosspoints.

Seconds



Rising Slew Rate

The high reference voltage minus the low reference voltage is divided by the rise-time calculation.

Volts/Second



Positive Width

The time difference in seconds between the first two mid reference level crossings, where the slopes are positive and negative respectively. A digital hysteresis is used when finding the crosspoints.

Seconds



Negative Duty Cycle

The negative width divided by the period times 100.

Percentage





Two-channel Measurements (scalar)



Measurement

Description

Units



Phase Delay

The time delay divided by the period (of the waveform on the channel specified by the measurement function) times 360 degrees.

Degrees



Time Delay

The time delay is the time between two edges with the same slope. The mid reference level is stored on a per channel basis, and mid reference levels do not need to be the same. All reference levels use a digital hysteresis.

Seconds





Period and Frequency Measurements



Measurement

Description

Units



Frequency

1.0 divided by the period.

Hertz



Period

Finds the time between the first and third mid reference level crosspoints in seconds. A hysteresis window is applied when finding crosspoints. The mid reference level is 50% by default.

Seconds



Average Frequency

1.0 divided by the average period.

Hertz



Average Period

Up to 256 mid reference level crossings are found on the waveform, using a digital hysteresis. The time difference between the last crossing and the first crossing is divided by the number of periods found in the waveform. The last crossing is defined as the last crossing in the waveform with the same slope as the first crossing, so an integer number of periods exist in the waveform.

Seconds



FFT Frequency

The FFT amplitude spectrum is calculated using a split-radix real FFT, and the frequency corresponding to the maximum amplitude is returned. If the input waveform size is not a power of two, the waveform is zero padded to the next higher power of two. The frequency resolution is sampling rate / number of points. The DC bin of the FFT is ignored when searching for the maximum amplitude, so the FFT frequency should ignore any DC offsets. However, the zero padding used in the FFT measurement can introduce other low-frequency components if the waveform has a large DC offset. To eliminate the effects of zero-padding, verify that your actual record length is a power of 2.

Hertz





Time Histogram Measurements



Measurement

Description

Units



Hits

Number of points in the histogram.

-



New Hits

Number of points added to the histogram by the most recent acquisition.

-



Maximum

The highest bin value with at least one hit.

Seconds



Minimum

The lowest bin value with at least one hit.

Seconds



Mean

Histogram Mean = [ Σ (bin hits × bin value) ] / total hits.

The bin value is the center time value of the histogram bin.

Seconds



Median

The bin value where half the histogram hits are above it and half the histogram hits are below.

Seconds



Mode

The bin value with the most hits. If there is a tie, the lower time value is returned.

Seconds



Peak-to-Peak

Histogram maximum minus the histogram minimum.

Seconds



Mean Plus 2 Standard Deviations

The percentage of hits in the histogram between the mean minus two times the standard deviation and the mean plus two times the standard deviation. The percentage is returned in the range 0–100.

Percentage



Mean Plus 3 Standard Deviations

The percentage of hits in the histogram between the mean minus three times the standard deviation and the mean plus three times the standard deviation. The percentage is returned in the range 0–100.

Percentage



Standard Deviation



Seconds





Voltage Histogram Measurements



Measurement

Description

Units



Hits

Number of points in the histogram.

-



New Hits

Number of points added to the histogram by the most recent acquisition.

-



Maximum

The highest bin value with at least one hit.

Seconds



Minimum

The lowest bin value with at least one hit.

Seconds



Mean

Histogram Mean = [ Σ (bin hits × bin value) ] / total hits.

The bin value is the center time value of the histogram bin.

Seconds



Median

The bin value where half the histogram hits are above it and half the histogram hits are below.

Seconds



Mode

The bin value with the most hits. If there is a tie, the lower voltage value is returned.

Seconds



Peak-to-Peak

Histogram maximum minus the histogram minimum.

Seconds



Standard Deviation



Seconds



Mean Plus 2 Standard Deviations

The percentage of hits in the histogram between the mean minus two times the standard deviation and the mean plus two times the standard deviation. The percentage is returned in the range 0–100.

Percentage



Mean Plus 3 Standard Deviations

The percentage of hits in the histogram between the mean minus three times the standard deviation and the mean plus three times the standard deviation. The percentage is returned in the range 0–100.

Percentage





Example(s):

$channelName = New("String", "0,1");

$timeOut = New("Float", 5.0);

$measureType = New("String", "FREQUENCY");

($ErrorCode, $resultArray) = NI_Scope_ReadMeasurement($NI_ScopeHandle, $channelName, $timeOut, $measureType);

($ErrorCode, $numWfms) = NI_Scope_ActualNumWfms($NI_ScopeHandle, $channelName);

UpdateStatus($numWfms);

// Get desired array value

$result = ArrayGetValue($resultArray, 0, 0);

UpdateStatus($result);

$result = ArrayGetValue($resultArray, 0, 1);

UpdateStatus($result);





NI_Scope_Close

Previous Top Next



* * *



NI_Scope_Close



Usage:

$ErrorCode = NI_Scope_Close($NI_ScopeHandle);



Description:

This function requires NI Scope drivers to be installed on the system.

This function closes the session and deallocates any resources the session used. Closing the session is important because it releases any temporary buffers that were created to transfer data between the digitizer and the host memory.



Remarks:

· This function is tested with a NI PCI-5122 device.

· When there occurs an error during the execution of the low level NI-Scope functions, Jabil Test will fail and return the error message.

· The function will verify if the given parameter exists, otherwise Jabil Test fails and returns the error message.



Result:

$ErrorCode = NI_Scope_Close($NI_ScopeHandle);

Function arguments



Parameter

Variable Type

Description



$NI_ScopeHandle

Object

The instrument handle you obtain from NI_Scope_Initialize that identifies a particular instrument's session.





Return parameters



Parameter

Variable Type

Description



$ErrorCode

Integer

Reports the status of this operation. To obtain a text description of the status code, call NI_Scope_ErrorMessage. To obtain additional information concerning the error condition, use NI_Scope_GetError and NI_Scope_ClearError. The general meaning of the status code is as:

· 0: success

· Positive value: warning

· Negative value: errors





Example(s):

$ErrorCode = NI_Scope_Close($NI_ScopeHandle);





NI_Scope_Initialize

Previous Top Next



* * *



NI_Scope_Initialize



Usage:

($ErrorCode, $NI_ScopeHandle) = NI_Scope_Initialize($resourceName, $IDQuery, $resetDevice);



Description:

This function requires NI Scope drivers to be installed on the system.

Because you can have multiple digitizers connected to your computer, you must tell NI-SCOPE which digitizer to communicate with by opening a session to the digitizer with an Initialize function. A session establishes a connection between the digitizer and your application. After this connection is established, the digitizer can transmit data to your application. Sessions allow the driver to cache previous settings, which greatly improves performance.



Remarks:

· This function is tested with a NI PCI-5122 device.

· When you run your application, you must use the resource name assigned by Measurement & Automation Explorer (MAX). Find or set the resource name for your digitizer by launching MAX and selecting Devices and Interfaces.

· Setting the ID Query parameter to TRUE has no effect with NI-SCOPE. NI-SCOPE automatically verifies that the digitizer you initialize is a type it supports therefore, setting this parameter to TRUE is not necessary.

· Setting the Reset Device parameter to TRUE resets the digitizer during initialization.

· When there occurs an error during the execution of the low level NI-Scope functions, Jabil Test will fail and return the error message.



Result:

($ErrorCode, $NI_ScopeHandle) = NI_Scope_Initialize($resourceName, $IDQuery, $resetDevice);

Function arguments



Parameter

Variable Type

Description



$resourceName

String

Specifies the resource name of the device to initialize. This value has to be the same as the name in the Measurement & Automation Explorer.



$IDQuery

Boolean

Specify whether you want NI-SCOPE to perform an ID query.

When you set this parameter to true, NI-SCOPE verifies that the device you initialize is a type that it supports. When you set this parameter to false, the function initializes the device without performing an ID query.

Valid values :

True : Perform ID query.

False : Do not perform ID query.



$resetDevice

Boolean

Specify whether you want to reset the device during the initialization procedure.

Valid values :

True : Reset the device.

False : Do not reset the device.





Return parameters



Parameter

Variable Type

Description



$ErrorCode

Integer

Reports the status of this operation. To obtain a text description of the status code, call NI_Scope_ErrorMessage. To obtain additional information concerning the error condition, use NI_Scope_GetError and NI_Scope_ClearError. The general meaning of the status code is as:

· 0: success

· Positive value: warning

· Negative value: errors



$NI_ScopeHandle

Object

Returns a session handle that you can use to identify the device in all subsequent NI-SCOPE function calls.





Example(s):

($ErrorCode, $NI_ScopeHandle) = NI_Scope_Initialize("Dev1", "false", "false");





NI_Scope_InitializeWithOptions

Previous Top Next



* * *



NI_Scope_InitializeWithOptions



Usage:

($ErrorCode, $NI_ScopeHandle) = NI_Scope_InitializeWithOptions($resourceName, $IDQuery, $resetDevice, $options);



Description:

This function requires NI Scope drivers to be installed on the system.

Because you can have multiple digitizers connected to your computer, you must tell NI-SCOPE which digitizer to communicate with by opening a session to the digitizer with an Initialize function. A session establishes a connection between the digitizer and your application. After this connection is established, the digitizer can transmit data to your application. Sessions allow the driver to cache previous settings, which greatly improves performance.



Remarks:

· This function is tested with a NI PCI-5122 device.

· When you run your application, you must use the resource name assigned by Measurement & Automation Explorer (MAX). Find or set the resource name for your digitizer by launching MAX and selecting Devices and Interfaces.

· Setting the ID Query parameter to TRUE has no effect with NI-SCOPE. NI-SCOPE automatically verifies that the digitizer you initialize is a type it supports therefore, setting this parameter to TRUE is not necessary.

· Setting the Reset Device parameter to TRUE resets the digitizer during initialization.

· When there occurs an error during the execution of the low level NI-Scope functions, Jabil Test will fail and return the error message.



Result:

($ErrorCode, $NI_ScopeHandle) = NI_Scope_InitializeWithOptions($resourceName, $IDQuery, $resetDevice, $options);

Function arguments



Parameter

Variable Type

Description



$resourceName

String

Specifies the resource name of the device to initialize. This value has to be the same as the name in the Measurement & Automation Explorer.



$IDQuery

Boolean

Specify whether you want NI-SCOPE to perform an ID query.

When you set this parameter to true, NI-SCOPE verifies that the device you initialize is a type that it supports. When you set this parameter to false, the function initializes the device without performing an ID query.

Valid values :

True : Perform ID query.

False : Do not perform ID query.



$resetDevice

Boolean

Specify whether you want to reset the device during the initialization procedure.

Valid values :

True : Reset the device.

False : Do not reset the device.



$options

String

Specifies initialization commands, like:

· RangeCheck

· QueryInstrStatus

· Cache

· Simulate





Default value: "Simulate=0,RangeCheck=1,QueryInstrStatus=1,Cache=1"





1 means true, 0 means fails.





Return parameters



Parameter

Variable Type

Description



$ErrorCode

Integer

Reports the status of this operation. To obtain a text description of the status code, call NI_Scope_ErrorMessage. To obtain additional information concerning the error condition, use NI_Scope_GetError and NI_Scope_ClearError. The general meaning of the status code is as:

· 0: success

· Positive value: warning

· Negative value: errors



$NI_ScopeHandle

Object

Returns a session handle that you can use to identify the device in all subsequent NI-SCOPE function calls.





Example(s):

($ErrorCode, $NI_ScopeHandle) = NI_Scope_InitializeWithOptions("Dev1", "false", "false", "Simulate=0,RangeCheck=1,QueryInstrStatus=1,Cache=1");





Fetch PAL colorbar

Previous Top Next



* * *



//**************************************************************************************************************************************//

// REQUIREMENTS

//**************************************************************************************************************************************//

// National Instruments NI-Scope drivers are installed on the PC

// National Instruments PCI-5122 (configured as Dev2 in MAX explorer)

// Apply a PAL color bar to CH0 of the scope card.

//**************************************************************************************************************************************//

// GENERAL SETTINGS

//**************************************************************************************************************************************//

UpdateStatus("**************************************************");

SetProductName("National Instruments Scope Jabil Test functions");

UpdateStatus("**************************************************");

SetFinalizeFunction("CleanUpTest");

UpdateStatus("**************************************************");

call ScopeInitialize();

//**************************************************************************************************************************************//

// Doing the Tests-> Calling the Test Functions

//**************************************************************************************************************************************//

UpdateStatus("**************************************************");

UpdateStatus("Starting Actual Tests");

UpdateStatus("**************************************************");



//*** Utility Functions ***//

//~ call ScopeReset();

//~ call ScopeResetDevice();

//~ call ScopeResetWithDefaults();

call ScopeSelfTest();

call ScopeRevision();

call ScopeAcquisitionStatus();

call ScopeRevisionQuery();





//*** FETCH PAL colorbar CH0 ***//

call ScopeFetchPalColorBar_Ch0_1Rec();

call ScopeWaveformInfo();

End;

//**************************************************************************************************************************************//

// TEST FUNCTIONS

//**************************************************************************************************************************************//

//-------------------------------------------------------------------------------------------------------//

function ScopeInitialize()

//-------------------------------------------------------------------------------------------------------//

{

UpdateStatus("**************************************************");

$TestName = New("String","ScopeInitialize");

UpdateStatus($TestName);

$GroupName = New("String","Initialize -> ");

$GroupName = StringCat($GroupName, $TestName);

SetTestName($GroupName);

UpdateStatus("**************************************************");

$MaxIdentifier = New("String", "Dev2"); //NI PCI-5122 identifier in MAX explorer

$IdQuery = New("Boolean", "FALSE");

$ResetDevice = New("Boolean", "TRUE");

($ErrorCode, $NI_ScopeHandle) = NI_Scope_Initialize($MaxIdentifier, $IdQuery, $ResetDevice);

call ScopeErrorCheck();

return;

}

//-------------------------------------------------------------------------------------------------------//

function ScopeReset()

//-------------------------------------------------------------------------------------------------------//

{

UpdateStatus("**************************************************");

$TestName = New("String","ScopeReset");

UpdateStatus($TestName);

$GroupName = New("String","Utility -> ");

$GroupName = StringCat($GroupName, $TestName);

SetTestName($GroupName);

UpdateStatus("**************************************************");

$ErrorCode = NI_Scope_Reset($NI_ScopeHandle);

call ScopeErrorCheck();

return;

}

//-------------------------------------------------------------------------------------------------------//

function ScopeResetDevice()

//-------------------------------------------------------------------------------------------------------//

{

UpdateStatus("**************************************************");

$TestName = New("String","ScopeResetDevice");

UpdateStatus($TestName);

$GroupName = New("String","Utility -> ");

$GroupName = StringCat($GroupName, $TestName);

SetTestName($GroupName);

UpdateStatus("**************************************************");

$ErrorCode = NI_Scope_ResetDevice($NI_ScopeHandle);

call ScopeErrorCheck();

return;

}

//-------------------------------------------------------------------------------------------------------//

function ScopeResetWithDefaults()

//-------------------------------------------------------------------------------------------------------//

{

UpdateStatus("**************************************************");

$TestName = New("String","ScopeResetWithDefaults");

UpdateStatus($TestName);

$GroupName = New("String","Utility -> ");

$GroupName = StringCat($GroupName, $TestName);

SetTestName($GroupName);

UpdateStatus("**************************************************");

$ErrorCode = NI_Scope_ResetWithDefaults($NI_ScopeHandle);

call ScopeErrorCheck();

return;

}

//-------------------------------------------------------------------------------------------------------//

function ScopeRevisionQuery()

//-------------------------------------------------------------------------------------------------------//

{

UpdateStatus("**************************************************");

$TestName = New("String","ScopeRevisionQuery");

UpdateStatus($TestName);

$GroupName = New("String","Utility -> ");

$GroupName = StringCat($GroupName, $TestName);

SetTestName($GroupName);

UpdateStatus("**************************************************");

($ErrorCode, $instrumentDriverRevision, $firmwareRevision) = NI_Scope_RevisionQuery($NI_ScopeHandle);

RecordMeasurement("Instrument driver revision", $instrumentDriverRevision, "", "true");

RecordMeasurement("firmware revision", $firmwareRevision, "", "true");

call ScopeErrorCheck();

return;

}

//-------------------------------------------------------------------------------------------------------//

function ScopeRevision()

//-------------------------------------------------------------------------------------------------------//

{

UpdateStatus("**************************************************");

$TestName = New("String","ScopeRevision");

UpdateStatus($TestName);

$GroupName = New("String","Utility -> ");

$GroupName = StringCat($GroupName, $TestName);

SetTestName($GroupName);

UpdateStatus("**************************************************");

($ErrorCode, $instrumentDriverRevision, $firmwareRevision) = NI_Scope_RevisionQuery($NI_ScopeHandle);

call ScopeErrorCheck();





$result = StringContains($instrumentDriverRevision, "NI-SCOPE 3.");





ScriptIf($result, "GOTO", "ScopeRevisionPassed", "ScopeRevisionFailed");

Label ScopeRevisionPassed:

$resultInteger = New("Integer", 0);

RecordMeasurementWithLimits($TestName, $resultInteger, "N/A", "true", 0, 0, "true");

return;

Label ScopeRevisionFailed:

$resultInteger = New("Integer", -1);

RecordMeasurementWithLimits($TestName, $resultInteger, "N/A", "true", 0, 0, "true");

return;

}

//-------------------------------------------------------------------------------------------------------//

function ScopeSelfTest()

//-------------------------------------------------------------------------------------------------------//

{

UpdateStatus("**************************************************");

$TestName = New("String","ScopeSelfTest");

UpdateStatus($TestName);

$GroupName = New("String","Utility -> ");

$GroupName = StringCat($GroupName, $TestName);

SetTestName($GroupName);

UpdateStatus("**************************************************");



($ErrorCode, $SelfTestResult, $SelfTestString) = NI_Scope_SelfTest($NI_ScopeHandle);

call ScopeErrorCheck();

RecordMeasurement($TestName, $SelfTestString, "", "true");

RecordMeasurementWithLimits($TestName, $SelfTestResult, "N/A", "true", 0, 0, "true");

return;

}

//-------------------------------------------------------------------------------------------------------//

function ScopeAcquisitionStatus()

//-------------------------------------------------------------------------------------------------------//

{

UpdateStatus("**************************************************");

$TestName = New("String","ScopeAcquisitionStatus");

UpdateStatus($TestName);

$GroupName = New("String","Utility -> ");

$GroupName = StringCat($GroupName, $TestName);

SetTestName($GroupName);

UpdateStatus("**************************************************");

($ErrorCode, $iAcquisitionStatus, $AcquisitionStatus) = NI_Scope_AcquisitionStatus($NI_ScopeHandle);

call ScopeErrorCheck();

UpdateStatus($AcquisitionStatus);

RecordMeasurementWithLimits($TestName, $iAcquisitionStatus, "N/A", "true", 1, 1, "true");

return;

}

//-------------------------------------------------------------------------------------------------------//

function ScopeClose()

//-------------------------------------------------------------------------------------------------------//

{

UpdateStatus("**************************************************");

$TestName = New("String","ScopeClose");

UpdateStatus($TestName);

$GroupName = New("String","Initialize -> ");

$GroupName = StringCat($GroupName, $TestName);

SetTestName($GroupName);

UpdateStatus("**************************************************");

NI_Scope_Close($NI_ScopeHandle);

return;

}

//-------------------------------------------------------------------------------------------------------//

function ScopeFetchPalColorBar_Ch0_1Rec()

//-------------------------------------------------------------------------------------------------------//

{

UpdateStatus("**************************************************");

$TestName = New("String","ScopeFetchPalColorBar_Ch0_1Rec");

UpdateStatus($TestName);

$GroupName = New("String","Fetch -> ");

$GroupName = StringCat($GroupName, $TestName);

SetTestName($GroupName);

UpdateStatus("**************************************************");

// Vertical settings

$measureChannel = New("String", "0");

$verticalRange = New("Float", 2.0);

$verticalOffset = New("Float", 0.0);

$verticalCoupling = New("String", "DC");

$probeAttenuation = New("Float", 1.0);

$channelEnabled = New("Boolean", "TRUE");

$ErrorCode = NI_Scope_ConfigureVertical($NI_ScopeHandle, $measureChannel, $verticalRange, $verticalOffset, $verticalCoupling, $probeAttenuation, $channelEnabled);

call ScopeErrorCheck();

// Horizontal settings

$sampleRate = New("Float", 100000000);

$numPts = New("Integer", 6000);

$refPosition = New("Float", 10.0);

$numRecords = New("Integer", 1);

$enforceRealTime = New("Boolean", "TRUE");

$ErrorCode = NI_Scope_ConfigureHorizontalTiming($NI_ScopeHandle, $sampleRate, $numPts, $refPosition, $numRecords, $enforceRealTime);

call ScopeErrorCheck();

//~ // Configure trigger video

$triggerSource = New("String", "0");

$enableDCRestore = New("Boolean", "TRUE");

$signalFormat = New("String", "PAL");

$triggerEvent = New("String", "line number");

$lineNumber = New("Integer", 25);

$triggerPolarity = New("String", "negative");

$triggerCoupling = New("String", "DC");

$triggerHoldOff = New("Float", 0.0);

$triggerDelay = New("Float", 0.0);

$ErrorCode = NI_Scope_ConfigureTriggerVideo($NI_ScopeHandle, $triggerSource, $enableDCRestore, $signalFormat, $triggerEvent, $lineNumber, $triggerPolarity, $triggerCoupling, $triggerHoldOff, $triggerDelay);

call ScopeErrorCheck();

// Initiate acquistion

$ErrorCode = NI_Scope_InitiateAcquisition($NI_ScopeHandle);

call ScopeErrorCheck();

// Get record length

$TestName = New("String","NI_Scope_ActualRecordLength");

($ErrorCode, $ActualRecordLength) = NI_Scope_ActualRecordLength($NI_ScopeHandle);

call ScopeErrorCheck();

//~ RecordMeasurement("Actual record length", $ActualRecordLength, "", "true");

// Measure

$TestName = New("String","NI_Scope_Fetch");

$measureTimeOut = New("Float", 1.0);

($ErrorCode, $WaveForms, $NumberOfWaveforms, $WaveFormsInfo) = NI_Scope_Fetch($NI_ScopeHandle, $measureChannel, $measureTimeOut, $ActualRecordLength);

call ScopeErrorCheck();

// Get Waveform information structure

call ScopeWaveformInfo();

//~ RecordMeasurement("Number of waveforms", $NumberOfWaveforms, "", "true");

// Validate the WHITE level

$WaveformIndex = New("Integer", 0);

$MeasurePosition = New("Float", 0.0000105);

$MeasureDuration = New("Float", 0.0000050);

$TestName = New("String", "WHITE");

$LL = New("Float", 0.63);

$HL = New("Float", 0.77);

$Unit = New("String", "V");

call AnalysisMean();

// Validate the SYNC level

$WaveformIndex = New("Integer", 0);

$TestName = New("String", "SYNC");

$MeasurePosition = New("Float", 0.0000005);

$MeasureDuration = New("Float", 0.000003);

$LL = New("Float", -0.330);

$HL = New("Float", -0.270);

$Unit = New("String", "V");

call AnalysisMean();

//Validate the BURST level

$WaveformIndex = New("Integer", 0);

$TestName = New("String", "BURST");

$WaveformIndex = New("Integer", 0);

$MeasurePosition = New("Float", 0.000006);

$MeasureDuration = New("Float", 0.0000012);

$LL = New("Float", 0.270);

$HL = New("Float", 0.330);

$Unit = New("String", "V");

call AnalysisPkPk();

//Validate the CHROMA level

$WaveformIndex = New("Integer", 0);

$TestName = New("String", "CHROMA");

$WaveformIndex = New("Integer", 0);

$MeasurePosition = New("Float", 0.000025);

$MeasureDuration = New("Float", 0.000004);

$LL = New("Float", 0.598);

$HL = New("Float", 0.730);

$Unit = New("String", "V");

call AnalysisPkPk();

//Disable scope

NI_Scope_Disable($NI_ScopeHandle);

return;

}

//**************************************************************************************************************************************//

// GENERAL FUNCTIONS

//**************************************************************************************************************************************//

//-------------------------------------------------------------------------------------------------------//

function AnalysisMean()

//-------------------------------------------------------------------------------------------------------//

{

//Analyze

($MeasureRange, $ArrayOffsetMeasurePosition, $ArrayOffsetMeasureDuration, $NumberOfRecords, $RecordLength, $HorizontalTimePerRecord, $SampleRate, $ReferencePosition) = NI_Scope_GetMeasureData($NI_ScopeHandle, $WaveForms, $WaveformIndex, $MeasurePosition, $MeasureDuration);





RecordMeasurement("Array offset measure position", $ArrayOffsetMeasurePosition, "", "true");

RecordMeasurement("Array offset measure duration", $ArrayOffsetMeasureDuration, "", "true");

RecordMeasurement("Number of records", $NumberOfRecords, "", "true");

RecordMeasurement("Record length", $RecordLength, "", "true");

RecordMeasurement("Horizontal time per record", $HorizontalTimePerRecord, "", "true");

RecordMeasurement("Sample rate", $SampleRate, "", "true");

RecordMeasurement("Reference position", $ReferencePosition, "", "true");

return;

}

//-------------------------------------------------------------------------------------------------------//

function AnalysisPkPk()

//-------------------------------------------------------------------------------------------------------//

{

// Analyze

($MeasureRange, $ArrayOffsetMeasurePosition, $ArrayOffsetMeasureDuration, $NumberOfRecords, $RecordLength, $HorizontalTimePerRecord, $SampleRate, $ReferencePosition) = NI_Scope_GetMeasureData($NI_ScopeHandle, $WaveForms, $WaveformIndex, $MeasurePosition, $MeasureDuration);

RecordMeasurement("Array offset measure position", $ArrayOffsetMeasurePosition, "", "true");

RecordMeasurement("Array offset measure duration", $ArrayOffsetMeasureDuration, "", "true");

RecordMeasurement("Number of records", $NumberOfRecords, "", "true");

RecordMeasurement("Record length", $RecordLength, "", "true");

RecordMeasurement("Horizontal time per record", $HorizontalTimePerRecord, "", "true");

RecordMeasurement("Sample rate", $SampleRate, "", "true");

RecordMeasurement("Reference position", $ReferencePosition, "", "true");

return;

}

//-------------------------------------------------------------------------------------------------------//

function ScopeWaveformInfo()

//-------------------------------------------------------------------------------------------------------//

{

// Loop

$Counter = New("Integer", 0);

Label ScopeWaveformInfo_Loop:





// Get the GAIN parameter out of the structure WaveformInfo

$gain = NI_Scope_GetWaveformInfo($Counter, $WaveFormsInfo, "gain");

$Text = StringCat("GAIN waveform ", $Counter);

RecordMeasurement($Text, $gain, "", "true");

// Get the relativeInitialX parameter out of the structure WaveformInfo

$relativeInitialX = NI_Scope_GetWaveformInfo($Counter, $WaveFormsInfo, "relativeInitialX");

$Text = StringCat("relativeInitialX waveform ", $Counter);

RecordMeasurement($Text, $relativeInitialX, "", "true");

// Get the absoluteInitialX parameter out of the structure WaveformInfo

$absoluteInitialX = NI_Scope_GetWaveformInfo($Counter, $WaveFormsInfo, "absoluteInitialX");

$Text = StringCat("absoluteInitialX waveform ", $Counter);

RecordMeasurement($Text, $absoluteInitialX, "", "true");

// Get the xIncrement parameter out of the structure WaveformInfo

$xIncrement = NI_Scope_GetWaveformInfo($Counter, $WaveFormsInfo, "xIncrement");

$Text = StringCat("xIncrement waveform ", $Counter);

RecordMeasurement($Text, $xIncrement, "", "true");

// Get the actualSamples parameter out of the structure WaveformInfo

$actualSamples = NI_Scope_GetWaveformInfo($Counter, $WaveFormsInfo, "actualSamples");

$Text = StringCat("actualSamples waveform ", $Counter);

RecordMeasurement($Text, $actualSamples, "", "true");

// Get the offset parameter out of the structure WaveformInfo

$offset = NI_Scope_GetWaveformInfo($Counter, $WaveFormsInfo, "offset");

$Text = StringCat("offset waveform ", $Counter);

RecordMeasurement($Text, $offset, "", "true");





// Loop

$Counter = Add($Counter,1);

$Boolean = NumericComparison($Counter, $NumberOfWaveforms, "==");

ScriptIf($Boolean, "GOTO", "ScopeWaveformInfo_End", "ScopeWaveformInfo_Loop");





Label ScopeWaveformInfo_End:

return;

}

//-------------------------------------------------------------------------------------------------------//

function ScopeErrorCheck()

//-------------------------------------------------------------------------------------------------------//

{

$BooleanValue = NumericComparison($ErrorCode, 0, "!=");





ScriptIf($BooleanValue, "GOTO", "", "ScopeErrorCheck4_End");



($FunctionErrorCode, $ErrorMessage) = NI_Scope_ErrorHandler($NI_ScopeHandle,$ErrorCode);

UpdateStatus($FunctionErrorCode);

UpdateStatus($ErrorMessage);

RecordMeasurementWithLimits($TestName, $ErrorCode, "-", "true", 0, 0, "true");





Label ScopeErrorCheck4_End:

return;

}

//**************************************************************************************************************************************//

// FLOW CONTROL FUNCTIONS

//**************************************************************************************************************************************//

//-------------------------------------------------------------------------------------------------------//

function CleanUpTest()

//-------------------------------------------------------------------------------------------------------//UpdateStatus("**************************************************");

SetTestName("Cleanup"); // Set Tars Label

UpdateStatus("**************************************************");

UpdateStatus("Clean up Function is started...........");

call ScopeClose();

End;

//-------------------------------------------------------------------------------------------------------//

function InitializeTest()

//-------------------------------------------------------------------------------------------------------//

{

UpdateStatus("**************************************************");

SetTestName("Initialize test"); // Set Tars Label

UpdateStatus("**************************************************");





return;

}





FetchMeasurement sinus waveform

Previous Top Next



* * *



//**************************************************************************************************************************************//

// REQUIREMENTS

//**************************************************************************************************************************************//

// National Instruments NI-Scope drivers are installed on the PC

// National Instruments PCI-5122 (configured as Dev2 in MAX explorer)

// Apply a sinus waveform 2Vpkpk - 11kHz to CH1 of the scope card.

//**************************************************************************************************************************************//

// GENERAL SETTINGS

//**************************************************************************************************************************************//

UpdateStatus("**************************************************");

SetProductName("National Instruments Scope Jabil Test functions");

UpdateStatus("**************************************************");

SetFinalizeFunction("CleanUpTest");

UpdateStatus("**************************************************");

call ScopeInitialize();

//**************************************************************************************************************************************//

// Doing the Tests-> Calling the Test Functions

//**************************************************************************************************************************************//

UpdateStatus("**************************************************");

UpdateStatus("Starting Actual Tests");

UpdateStatus("**************************************************");



//*** Utility Functions ***//

//~ call ScopeReset();

//~ call ScopeResetDevice();

//~ call ScopeResetWithDefaults();

call ScopeSelfTest();

call ScopeRevision();

call ScopeAcquisitionStatus();

call ScopeRevisionQuery();





//*** FETCH sinus wave 2Vpkpk 11kHz CH1 ***//

call ScopeFetchSinusWaveCh1();

call ScopeFetchMeasurementSinusWaveCh1();





call ScopeClose();





End;

//**************************************************************************************************************************************//

// TEST FUNCTIONS

//**************************************************************************************************************************************//

//-------------------------------------------------------------------------------------------------------//

function ScopeInitialize()

//-------------------------------------------------------------------------------------------------------//

{

UpdateStatus("**************************************************");

$TestName = New("String","ScopeInitialize");

UpdateStatus($TestName);

$GroupName = New("String","Initialize -> ");

$GroupName = StringCat($GroupName, $TestName);

SetTestName($GroupName);

UpdateStatus("**************************************************");

$MaxIdentifier = New("String", "Dev2"); //NI PCI-5122 identifier in MAX explorer

$IdQuery = New("Boolean", "FALSE");

$ResetDevice = New("Boolean", "TRUE");

($ErrorCode, $NI_ScopeHandle) = NI_Scope_Initialize($MaxIdentifier, $IdQuery, $ResetDevice);

call ScopeErrorCheck();

return;

}

//-------------------------------------------------------------------------------------------------------//

function ScopeReset()

//-------------------------------------------------------------------------------------------------------//

{

UpdateStatus("**************************************************");

$TestName = New("String","ScopeReset");

UpdateStatus($TestName);

$GroupName = New("String","Utility -> ");

$GroupName = StringCat($GroupName, $TestName);

SetTestName($GroupName);

UpdateStatus("**************************************************");

$ErrorCode = NI_Scope_Reset($NI_ScopeHandle);

call ScopeErrorCheck();

return;

}

//-------------------------------------------------------------------------------------------------------//

function ScopeResetDevice()

//-------------------------------------------------------------------------------------------------------//

{

UpdateStatus("**************************************************");

$TestName = New("String","ScopeResetDevice");

UpdateStatus($TestName);

$GroupName = New("String","Utility -> ");

$GroupName = StringCat($GroupName, $TestName);

SetTestName($GroupName);

UpdateStatus("**************************************************");

$ErrorCode = NI_Scope_ResetDevice($NI_ScopeHandle);

call ScopeErrorCheck();

return;

}

//-------------------------------------------------------------------------------------------------------//

function ScopeResetWithDefaults()

//-------------------------------------------------------------------------------------------------------//

{

UpdateStatus("**************************************************");

$TestName = New("String","ScopeResetWithDefaults");

UpdateStatus($TestName);

$GroupName = New("String","Utility -> ");

$GroupName = StringCat($GroupName, $TestName);

SetTestName($GroupName);

UpdateStatus("**************************************************");

$ErrorCode = NI_Scope_ResetWithDefaults($NI_ScopeHandle);

call ScopeErrorCheck();

return;

}

//-------------------------------------------------------------------------------------------------------//

function ScopeRevisionQuery()

//-------------------------------------------------------------------------------------------------------//

{

UpdateStatus("**************************************************");

$TestName = New("String","ScopeRevisionQuery");

UpdateStatus($TestName);

$GroupName = New("String","Utility -> ");

$GroupName = StringCat($GroupName, $TestName);

SetTestName($GroupName);

UpdateStatus("**************************************************");

($ErrorCode, $instrumentDriverRevision, $firmwareRevision) = NI_Scope_RevisionQuery($NI_ScopeHandle);

RecordMeasurement("Instrument driver revision", $instrumentDriverRevision, "", "true");

RecordMeasurement("firmware revision", $firmwareRevision, "", "true");

call ScopeErrorCheck();

return;

}

//-------------------------------------------------------------------------------------------------------//

function ScopeRevision()

//-------------------------------------------------------------------------------------------------------//

{

UpdateStatus("**************************************************");

$TestName = New("String","ScopeRevision");

UpdateStatus($TestName);

$GroupName = New("String","Utility -> ");

$GroupName = StringCat($GroupName, $TestName);

SetTestName($GroupName);

UpdateStatus("**************************************************");

($ErrorCode, $instrumentDriverRevision, $firmwareRevision) = NI_Scope_RevisionQuery($NI_ScopeHandle);

call ScopeErrorCheck();





$result = StringContains($instrumentDriverRevision, "NI-SCOPE 3.");





ScriptIf($result, "GOTO", "ScopeRevisionPassed", "ScopeRevisionFailed");

Label ScopeRevisionPassed:

$resultInteger = New("Integer", 0);

RecordMeasurementWithLimits($TestName, $resultInteger, "N/A", "true", 0, 0, "true");

return;

Label ScopeRevisionFailed:

$resultInteger = New("Integer", -1);

RecordMeasurementWithLimits($TestName, $resultInteger, "N/A", "true", 0, 0, "true");

return;

}

//-------------------------------------------------------------------------------------------------------//

function ScopeSelfTest()

//-------------------------------------------------------------------------------------------------------//

{

UpdateStatus("**************************************************");

$TestName = New("String","ScopeSelfTest");

UpdateStatus($TestName);

$GroupName = New("String","Utility -> ");

$GroupName = StringCat($GroupName, $TestName);

SetTestName($GroupName);

UpdateStatus("**************************************************");



($ErrorCode, $SelfTestResult, $SelfTestString) = NI_Scope_SelfTest($NI_ScopeHandle);

call ScopeErrorCheck();

RecordMeasurement($TestName, $SelfTestString, "", "true");

RecordMeasurementWithLimits($TestName, $SelfTestResult, "N/A", "true", 0, 0, "true");

return;

}

//-------------------------------------------------------------------------------------------------------//

function ScopeAcquisitionStatus()

//-------------------------------------------------------------------------------------------------------//

{

UpdateStatus("**************************************************");

$TestName = New("String","ScopeAcquisitionStatus");

UpdateStatus($TestName);

$GroupName = New("String","Utility -> ");

$GroupName = StringCat($GroupName, $TestName);

SetTestName($GroupName);

UpdateStatus("**************************************************");

($ErrorCode, $iAcquisitionStatus, $AcquisitionStatus) = NI_Scope_AcquisitionStatus($NI_ScopeHandle);

call ScopeErrorCheck();

UpdateStatus($AcquisitionStatus);

RecordMeasurementWithLimits($TestName, $iAcquisitionStatus, "N/A", "true", 1, 1, "true");

return;

}

//-------------------------------------------------------------------------------------------------------//

function ScopeClose()

//-------------------------------------------------------------------------------------------------------//

{

UpdateStatus("**************************************************");

$TestName = New("String","ScopeClose");

UpdateStatus($TestName);

$GroupName = New("String","Initialize -> ");

$GroupName = StringCat($GroupName, $TestName);

SetTestName($GroupName);

UpdateStatus("**************************************************");

NI_Scope_Close($NI_ScopeHandle);

return;

}

//-------------------------------------------------------------------------------------------------------//

function ScopeFetchSinusWaveCh1()

//-------------------------------------------------------------------------------------------------------//

{

UpdateStatus("**************************************************");

$TestName = New("String","ScopeFetchSinusWaveCh1");

UpdateStatus($TestName);

$GroupName = New("String","Fetch -> ");

$GroupName = StringCat($GroupName, $TestName);

SetTestName($GroupName);

UpdateStatus("**************************************************");

// Vertical settings

$measureChannel = New("String", "1");

$verticalRange = New("Float", 2.0);

$verticalOffset = New("Float", 0.0);

$verticalCoupling = New("String", "DC");

$probeAttenuation = New("Float", 1.0);

$channelEnabled = New("Boolean", "TRUE");

$ErrorCode = NI_Scope_ConfigureVertical($NI_ScopeHandle, $measureChannel, $verticalRange, $verticalOffset, $verticalCoupling, $probeAttenuation, $channelEnabled);

call ScopeErrorCheck();

// Horizontal settings

$sampleRate = New("Float", 100000);

$numPts = New("Integer", 5000);

$refPosition = New("Float", 10.0);

$numRecords = New("Integer", 1);

$enforceRealTime = New("Boolean", "TRUE");

$ErrorCode = NI_Scope_ConfigureHorizontalTiming($NI_ScopeHandle, $sampleRate, $numPts, $refPosition, $numRecords, $enforceRealTime);

call ScopeErrorCheck();

// Configure trigger edge

$triggerSource = New("String", "1");

$triggerLevel = New("Float", -0.300);

$triggerPolarity = New("String", "negative");

$triggerCoupling = New("String", "DC");

$triggerHoldOff = New("Float", 0.0);

$triggerDelay = New("Float", 0.0);

$ErrorCode = NI_Scope_ConfigureTriggerEdge($NI_ScopeHandle, $triggerSource, $triggerLevel, $triggerPolarity, $triggerCoupling, $triggerHoldOff, $triggerDelay);

call ScopeErrorCheck();

// Initiate acquistion

$ErrorCode = NI_Scope_InitiateAcquisition($NI_ScopeHandle);

call ScopeErrorCheck();

// Get record length

$TestName = New("String","NI_Scope_ActualRecordLength");

($ErrorCode, $ActualRecordLength) = NI_Scope_ActualRecordLength($NI_ScopeHandle);

call ScopeErrorCheck();

//~ RecordMeasurement("Actual record length", $ActualRecordLength, "", "true");

//Get the actual sampling rate

($ErrorCode, $SamplingRate) = NI_Scope_SampleRate($NI_ScopeHandle);

call ScopeErrorCheck();

//~ RecordMeasurement("Actual sampling rate", $SamplingRate, "", "true");

//Measure

$TestName = New("String","NI_Scope_Fetch");

$measureTimeOut = New("Float", 1.0);

($ErrorCode, $WaveForms, $NumberOfWaveforms, $WaveFormsInfo) = NI_Scope_Fetch($NI_ScopeHandle, $measureChannel, $measureTimeOut, $ActualRecordLength);

call ScopeErrorCheck();

//~ RecordMeasurement("Number of waveforms", $NumberOfWaveforms, "", "true");

//Validate the sinus wave peak to peak level

$TestName = New("String", "P2P");

$WaveformIndex = New("Integer", 0);

$MeasurePosition = New("Float", 0.0);

$MeasureDuration = New("Float", 0.042);

$LL = New("Float", 1.95);

$HL = New("Float", 2.05);

$Unit = New("String", "V");

call AnalysisPkPk();





//Disable scope

NI_Scope_Disable($NI_ScopeHandle);

return;

}

//-------------------------------------------------------------------------------------------------------//

function ScopeFetchMeasurementSinusWaveCh1()

//-------------------------------------------------------------------------------------------------------//

{

UpdateStatus("**************************************************");

$TestName = New("String","ScopeFetchMeasurementSinusWaveCh1");

UpdateStatus($TestName);

$GroupName = New("String","Fetch -> ");

$GroupName = StringCat($GroupName, $TestName);

SetTestName($GroupName);

UpdateStatus("**************************************************");

//Vertical settings

$measureChannel = New("String", "1");

$verticalRange = New("Float", 2.0);

$verticalOffset = New("Float", 0.0);

$verticalCoupling = New("String", "dc");

$probeAttenuation = New("Float", 1.0);

$channelEnabled = New("Boolean", "TRUE");

$ErrorCode = NI_Scope_ConfigureVertical($NI_ScopeHandle, $measureChannel, $verticalRange, $verticalOffset, $verticalCoupling, $probeAttenuation, $channelEnabled);

call ScopeErrorCheck();

//Horizontal settings

$sampleRate = New("Float", 100000);

$numPts = New("Integer", 6000);

$refPosition = New("Float", 10.0);

$numRecords = New("Integer", 2);

$enforceRealTime = New("Boolean", "TRUE");

$ErrorCode = NI_Scope_ConfigureHorizontalTiming($NI_ScopeHandle, $sampleRate, $numPts, $refPosition, $numRecords, $enforceRealTime);

call ScopeErrorCheck();

//Trigger settings

$triggerSource = New("String", "1");

//~ $triggerLevel = New("Float", 0.5);

$triggerLevel = New("Float", 0.0);

//~ $triggerPolarity = New("String", "negative");

$triggerPolarity = New("String", "positive");

$triggerCoupling = New("String", "dc");

$triggerHoldOff = New("Float", 0.0);

$triggerDelay = New("Float", 0.0);

$ErrorCode = NI_Scope_ConfigureTriggerEdge($NI_ScopeHandle, $triggerSource, $triggerLevel, $triggerPolarity, $triggerCoupling, $triggerHoldOff, $triggerDelay);

call ScopeErrorCheck();

//Initiate acquistion

$ErrorCode = NI_Scope_InitiateAcquisition($NI_ScopeHandle);

call ScopeErrorCheck();

//Validate

$measureType = New("String", "VOLTAGE PEAK TO PEAK");

$LL = New("Float", 1.95);

$HL = New("Float", 2.05);

$Unit = New("String", "V");

call CheckFetchMeasurement();

//Validate

$measureType = New("String", "VOLTAGE TOP");

$LL = New("Float", 0.95);

$HL = New("Float", 1.05);

$Unit = New("String", "V");

call CheckFetchMeasurement();

//Validate

$measureType = New("String", "VOLTAGE BASE");

$LL = New("Float", -1.05);

$HL = New("Float", -0.95);

$Unit = New("String", "V");

call CheckFetchMeasurement();

//Validate

$measureType = New("String", "VOLTAGE MIN");

$LL = New("Float", -1.05);

$HL = New("Float", -0.95);

$Unit = New("String", "V");

call CheckFetchMeasurement();

//Validate

$measureType = New("String", "VOLTAGE MAX");

$LL = New("Float", 0.95);

$HL = New("Float", 1.05);

$Unit = New("String", "V");

call CheckFetchMeasurement();

//Validate

$measureType = New("String", "AC ESTIMATE");

$LL = New("Float", 0.700);

$HL = New("Float", 0.720);

$Unit = New("String", "V");

call CheckFetchMeasurement();

//Validate

$measureType = New("String", "DC ESTIMATE");

$LL = New("Float", -0.1);

$HL = New("Float", 0.5);

$Unit = New("String", "V");

call CheckFetchMeasurement();

//Validate

$measureType = New("String", "VOLTAGE CYCLE RMS");

$LL = New("Float", 0.700);

$HL = New("Float", 0.720);

$Unit = New("String", "V");

call CheckFetchMeasurement();

//Validate

$measureType = New("String", "FFT AMPLITUDE");

$LL = New("Float", 0.660);

$HL = New("Float", 0.800);

$Unit = New("String", "V");

call CheckFetchMeasurement();

//Validate

$measureType = New("String", "VOLTAGE RMS");

$LL = New("Float", 0.700);

$HL = New("Float", 0.720);

$Unit = New("String", "V");

call CheckFetchMeasurement();

//Validate

$measureType = New("String", "VOLTAGE AVERAGE");

$LL = New("Float", -0.1);

$HL = New("Float", 0.5);

$Unit = New("String", "V");

call CheckFetchMeasurement();

//Validate

$measureType = New("String", "VOLTAGE CYCLE AVERAGE");

$LL = New("Float", -0.1);

$HL = New("Float", 0.5);

$Unit = New("String", "V");

call CheckFetchMeasurement();

//Validate

$measureType = New("String", "AREA");

$LL = New("Float", -0.1);

$HL = New("Float", 0.1);

$Unit = New("String", "V");

call CheckFetchMeasurement();

//Validate

$measureType = New("String", "INTEGRAL");

$LL = New("Float", -0.1);

$HL = New("Float", 0.1);

$Unit = New("String", "V");

call CheckFetchMeasurement();

//Validate

$measureType = New("String", "LOW REF VOLTAGE");

$LL = New("Float", -0.810);

$HL = New("Float", -0.790);

$Unit = New("String", "V");

call CheckFetchMeasurement();

//Validate

$measureType = New("String", "MID REF VOLTAGE");

$LL = New("Float", -0.1);

$HL = New("Float", 0.5);

$Unit = New("String", "V");

call CheckFetchMeasurement();

//Validate

$measureType = New("String", "HIGH REF VOLTAGE");

$LL = New("Float", 0.790);

$HL = New("Float", 0.810);

$Unit = New("String", "V");

call CheckFetchMeasurement();

//Validate

$measureType = New("String", "frequency");

$LL = New("Float", 10980);

$HL = New("Float", 11020);

$Unit = New("String", "Hz");

call CheckFetchMeasurement();

//Validate

$measureType = New("String", "rise time");

$unit = New("String", "VOLTAGE");

$low = New("Float", 0.0);

$mid = New("Float", 0.5);

$high = New("Float", 1.0);

$LL = New("Float", 20);

$HL = New("Float", 25);

$Unit = New("String", "us");

call CheckFetchMeasurementRiseTime();

// Disable scope

NI_Scope_Disable($NI_ScopeHandle);

return;

}

//**************************************************************************************************************************************//

// GENERAL FUNCTIONS

//**************************************************************************************************************************************//

//-------------------------------------------------------------------------------------------------------//

function AnalysisMean()

//-------------------------------------------------------------------------------------------------------//

{

//Analyze

($MeasureRange, $ArrayOffsetMeasurePosition, $ArrayOffsetMeasureDuration, $NumberOfRecords, $RecordLength, $HorizontalTimePerRecord, $SampleRate, $ReferencePosition) = NI_Scope_GetMeasureData($NI_ScopeHandle, $WaveForms, $WaveformIndex, $MeasurePosition, $MeasureDuration);

RecordMeasurement("Array offset measure position", $ArrayOffsetMeasurePosition, "", "true");

RecordMeasurement("Array offset measure duration", $ArrayOffsetMeasureDuration, "", "true");

RecordMeasurement("Number of records", $NumberOfRecords, "", "true");

RecordMeasurement("Record length", $RecordLength, "", "true");

RecordMeasurement("Horizontal time per record", $HorizontalTimePerRecord, "", "true");

RecordMeasurement("Sample rate", $SampleRate, "", "true");

RecordMeasurement("Reference position", $ReferencePosition, "", "true");

return;

}

//-------------------------------------------------------------------------------------------------------//

function AnalysisPkPk()

//-------------------------------------------------------------------------------------------------------//

{

// Analyze

($MeasureRange, $ArrayOffsetMeasurePosition, $ArrayOffsetMeasureDuration, $NumberOfRecords, $RecordLength, $HorizontalTimePerRecord, $SampleRate, $ReferencePosition) = NI_Scope_GetMeasureData($NI_ScopeHandle, $WaveForms, $WaveformIndex, $MeasurePosition, $MeasureDuration);

RecordMeasurement("Array offset measure position", $ArrayOffsetMeasurePosition, "", "true");

RecordMeasurement("Array offset measure duration", $ArrayOffsetMeasureDuration, "", "true");

RecordMeasurement("Number of records", $NumberOfRecords, "", "true");

RecordMeasurement("Record length", $RecordLength, "", "true");

RecordMeasurement("Horizontal time per record", $HorizontalTimePerRecord, "", "true");

RecordMeasurement("Sample rate", $SampleRate, "", "true");

RecordMeasurement("Reference position", $ReferencePosition, "", "true");

return;

}

//-------------------------------------------------------------------------------------------------------//

function CheckFetchMeasurement()

//-------------------------------------------------------------------------------------------------------//

{

//Measure

$measureTimeOut = New("Float", 1.0);

($ErrorCode, $resultArray) = NI_Scope_FetchMeasurement($NI_ScopeHandle, $measureChannel, $measureTimeOut, $measureType);

call ScopeErrorCheck();

//~ $Length = ArrayGetLength($resultArray);

//~ RecordMeasurement("Length of result array", $Length, "", "true");

//Get desired array value: index 0

$result = ArrayGetValue($resultArray, 0, 0);

UpdateStatus($result);

//Validate array value: index 0 (record numbers = 2)

RecordMeasurementWithLimits($measureType, $result, $Unit, "true", $LL, $HL, "true");

//Get desired array value: index 1 (record numbers = 2)

$result = ArrayGetValue($resultArray, 0, 1);

UpdateStatus($result);

//Validate array value: index 1

RecordMeasurementWithLimits($measureType, $result, $Unit, "true", $LL, $HL, "true");

return;

}

//-------------------------------------------------------------------------------------------------------//

function CheckFetchMeasurementRiseTime()

//-------------------------------------------------------------------------------------------------------//

{

//Configure reference levels

NI_Scope_ConfigureRefLevels($NI_ScopeHandle, $unit, $low, $mid, $high);

//Measure

$measureTimeOut = New("Float", 1.0);

($ErrorCode, $resultArray) = NI_Scope_FetchMeasurement($NI_ScopeHandle, $measureChannel, $measureTimeOut, $measureType);

call ScopeErrorCheck();

//~ $Length = ArrayGetLength($resultArray);

//~ RecordMeasurement("Length of result array", $Length, "", "true");

//Get desired array value: index 0

$result = ArrayGetValue($resultArray, 0, 0);

$result = $result * 1000000;

UpdateStatus($result);

//Validate array value: index 0 (record numbers = 2)

RecordMeasurementWithLimits($measureType, $result, $Unit, "true", $LL, $HL, "true");

//Get desired array value: index 1 (record numbers = 2)

$result = ArrayGetValue($resultArray, 0, 1);

$result = $result * 1000000;

UpdateStatus($result);

//Validate array value: index 1

RecordMeasurementWithLimits($measureType, $result, $Unit, "true", $LL, $HL, "true");

return;

}

//-------------------------------------------------------------------------------------------------------//

function ScopeWaveformInfo()

//-------------------------------------------------------------------------------------------------------//

{

// Loop

$Counter = New("Integer", 0);

Label ScopeWaveformInfo_Loop:





// Get the GAIN parameter out of the structure WaveformInfo

$gain = NI_Scope_GetWaveformInfo($Counter, $WaveFormsInfo, "gain");

$Text = StringCat("GAIN waveform ", $Counter);

RecordMeasurement($Text, $gain, "", "true");

// Get the relativeInitialX parameter out of the structure WaveformInfo

$relativeInitialX = NI_Scope_GetWaveformInfo($Counter, $WaveFormsInfo, "relativeInitialX");

$Text = StringCat("relativeInitialX waveform ", $Counter);

RecordMeasurement($Text, $relativeInitialX, "", "true");

// Get the absoluteInitialX parameter out of the structure WaveformInfo

$absoluteInitialX = NI_Scope_GetWaveformInfo($Counter, $WaveFormsInfo, "absoluteInitialX");

$Text = StringCat("absoluteInitialX waveform ", $Counter);

RecordMeasurement($Text, $absoluteInitialX, "", "true");

// Get the xIncrement parameter out of the structure WaveformInfo

$xIncrement = NI_Scope_GetWaveformInfo($Counter, $WaveFormsInfo, "xIncrement");

$Text = StringCat("xIncrement waveform ", $Counter);

RecordMeasurement($Text, $xIncrement, "", "true");

// Get the actualSamples parameter out of the structure WaveformInfo

$actualSamples = NI_Scope_GetWaveformInfo($Counter, $WaveFormsInfo, "actualSamples");

$Text = StringCat("actualSamples waveform ", $Counter);

RecordMeasurement($Text, $actualSamples, "", "true");

// Get the offset parameter out of the structure WaveformInfo

$offset = NI_Scope_GetWaveformInfo($Counter, $WaveFormsInfo, "offset");

$Text = StringCat("offset waveform ", $Counter);

RecordMeasurement($Text, $offset, "", "true");





// Loop

$Counter = Add($Counter,1);

$Boolean = NumericComparison($Counter, $NumberOfWaveforms, "==");

ScriptIf($Boolean, "GOTO", "ScopeWaveformInfo_End", "ScopeWaveformInfo_Loop");





Label ScopeWaveformInfo_End:

return;

}

//-------------------------------------------------------------------------------------------------------//

function ScopeErrorCheck()

//-------------------------------------------------------------------------------------------------------//

{

$BooleanValue = NumericComparison($ErrorCode, 0, "!=");





ScriptIf($BooleanValue, "GOTO", "", "ScopeErrorCheck4_End");



($FunctionErrorCode, $ErrorMessage) = NI_Scope_ErrorHandler($NI_ScopeHandle,$ErrorCode);

UpdateStatus($FunctionErrorCode);

UpdateStatus($ErrorMessage);

RecordMeasurementWithLimits($TestName, $ErrorCode, "-", "true", 0, 0, "true");





Label ScopeErrorCheck4_End:

return;

}

//**************************************************************************************************************************************//

// FLOW CONTROL FUNCTIONS

//**************************************************************************************************************************************//

//-------------------------------------------------------------------------------------------------------//

function CleanUpTest()

//-------------------------------------------------------------------------------------------------------//

UpdateStatus("**************************************************");

SetTestName("Cleanup"); // Set Tars Label

UpdateStatus("**************************************************");

UpdateStatus("Clean up Function is started...........");

//~ call ScopeClose();

End;

//-------------------------------------------------------------------------------------------------------//

function InitializeTest()

//-------------------------------------------------------------------------------------------------------//

{

UpdateStatus("**************************************************");

SetTestName("Initialize test"); // Set Tars Label

UpdateStatus("**************************************************");





return;

}





Simulation mode

Previous Top Next



* * *



//**************************************************************************************************************************************//

// REQUIREMENTS

//**************************************************************************************************************************************//

// National Instruments NI-Scope drivers are installed on the PC

//**************************************************************************************************************************************//

// GENERAL SETTINGS

//**************************************************************************************************************************************//

UpdateStatus("**************************************************");

SetProductName("National Instruments Scope Jabil Test functions");

UpdateStatus("**************************************************");

SetFinalizeFunction("CleanUpTest");

UpdateStatus("**************************************************");

call ScopeInitializeWithOptions();

//**************************************************************************************************************************************//

// Doing the Tests-> Calling the Test Functions

//**************************************************************************************************************************************//

UpdateStatus("**************************************************");

UpdateStatus("Starting Actual Tests");

UpdateStatus("**************************************************");



//*** Utility Functions ***//

call ScopeReset();

call ScopeResetDevice();

call ScopeResetWithDefaults();

call ScopeSelfTest();

call ScopeRevision();

call ScopeAcquisitionStatus();

call ScopeRevisionQuery();





//*** Acquisition Functions ***//

call FetchSimulateSignal1RecordCh0();

call FetchSimulateSignal5RecordCh0();

call FetchSimulateSignal1RecordCh0Ch1();

call ScopeFetchMeasurementSimulateSignal1RecordCh0();





call ScopeClose();





End;

//**************************************************************************************************************************************//

// TEST FUNCTIONS

//**************************************************************************************************************************************//

//-------------------------------------------------------------------------------------------------------//

function ScopeInitializeWithOptions()

//-------------------------------------------------------------------------------------------------------//

{

UpdateStatus("**************************************************");

$TestName = New("String","ScopeInitializeWithOptions");

UpdateStatus($TestName);

$GroupName = New("String","Initialize -> ");

$GroupName = StringCat($GroupName, $TestName);

SetTestName($GroupName);

UpdateStatus("**************************************************");

$MaxIdentifier = New("String", "DAQ::1");

$IdQuery = New("Boolean", "FALSE");

$ResetDevice = New("Boolean", "FALSE");

$OptionString = New("String", "Simulate = 1, DriverSetup = Model:5122; BoardType:PCI");

($ErrorCode, $NI_ScopeHandle) = NI_Scope_InitializeWithOptions($MaxIdentifier, $IdQuery, $ResetDevice, $OptionString);

call ScopeErrorCheck();

return;

}

//-------------------------------------------------------------------------------------------------------//

function ScopeReset()

//-------------------------------------------------------------------------------------------------------//

{

UpdateStatus("**************************************************");

$TestName = New("String","ScopeReset");

UpdateStatus($TestName);

$GroupName = New("String","Utility -> ");

$GroupName = StringCat($GroupName, $TestName);

SetTestName($GroupName);

UpdateStatus("**************************************************");

$ErrorCode = NI_Scope_Reset($NI_ScopeHandle);

call ScopeErrorCheck();

return;

}

//-------------------------------------------------------------------------------------------------------//

function ScopeResetDevice()

//-------------------------------------------------------------------------------------------------------//

{

UpdateStatus("**************************************************");

$TestName = New("String","ScopeResetDevice");

UpdateStatus($TestName);

$GroupName = New("String","Utility -> ");

$GroupName = StringCat($GroupName, $TestName);

SetTestName($GroupName);

UpdateStatus("**************************************************");

$ErrorCode = NI_Scope_ResetDevice($NI_ScopeHandle);

call ScopeErrorCheck();

return;

}

//-------------------------------------------------------------------------------------------------------//

function ScopeResetWithDefaults()

//-------------------------------------------------------------------------------------------------------//

{

UpdateStatus("**************************************************");

$TestName = New("String","ScopeResetWithDefaults");

UpdateStatus($TestName);

$GroupName = New("String","Utility -> ");

$GroupName = StringCat($GroupName, $TestName);

SetTestName($GroupName);

UpdateStatus("**************************************************");

$ErrorCode = NI_Scope_ResetWithDefaults($NI_ScopeHandle);

call ScopeErrorCheck();

return;

}

//-------------------------------------------------------------------------------------------------------//

function ScopeRevisionQuery()

//-------------------------------------------------------------------------------------------------------//

{

UpdateStatus("**************************************************");

$TestName = New("String","ScopeRevisionQuery");

UpdateStatus($TestName);

$GroupName = New("String","Utility -> ");

$GroupName = StringCat($GroupName, $TestName);

SetTestName($GroupName);

UpdateStatus("**************************************************");

($ErrorCode, $instrumentDriverRevision, $firmwareRevision) = NI_Scope_RevisionQuery($NI_ScopeHandle);

RecordMeasurement("Instrument driver revision", $instrumentDriverRevision, "", "true");

RecordMeasurement("firmware revision", $firmwareRevision, "", "true");

call ScopeErrorCheck();

return;

}

//-------------------------------------------------------------------------------------------------------//

function ScopeRevision()

//-------------------------------------------------------------------------------------------------------//

{

UpdateStatus("**************************************************");

$TestName = New("String","ScopeRevision");

UpdateStatus($TestName);

$GroupName = New("String","Utility -> ");

$GroupName = StringCat($GroupName, $TestName);

SetTestName($GroupName);

UpdateStatus("**************************************************");

($ErrorCode, $instrumentDriverRevision, $firmwareRevision) = NI_Scope_RevisionQuery($NI_ScopeHandle);

call ScopeErrorCheck();





$result = StringContains($instrumentDriverRevision, "NI-SCOPE 3.");





ScriptIf($result, "GOTO", "ScopeRevisionPassed", "ScopeRevisionFailed");

Label ScopeRevisionPassed:

$resultInteger = New("Integer", 0);

RecordMeasurementWithLimits($TestName, $resultInteger, "N/A", "true", 0, 0, "true");

return;

Label ScopeRevisionFailed:

$resultInteger = New("Integer", -1);

RecordMeasurementWithLimits($TestName, $resultInteger, "N/A", "true", 0, 0, "true");

return;

}

//-------------------------------------------------------------------------------------------------------//

function ScopeSelfTest()

//-------------------------------------------------------------------------------------------------------//

{

UpdateStatus("**************************************************");

$TestName = New("String","ScopeSelfTest");

UpdateStatus($TestName);

$GroupName = New("String","Utility -> ");

$GroupName = StringCat($GroupName, $TestName);

SetTestName($GroupName);

UpdateStatus("**************************************************");



($ErrorCode, $SelfTestResult, $SelfTestString) = NI_Scope_SelfTest($NI_ScopeHandle);

call ScopeErrorCheck();

RecordMeasurement($TestName, $SelfTestString, "", "true");

RecordMeasurementWithLimits($TestName, $SelfTestResult, "N/A", "true", 0, 0, "true");

return;

}

//-------------------------------------------------------------------------------------------------------//

function ScopeAcquisitionStatus()

//-------------------------------------------------------------------------------------------------------//

{

UpdateStatus("**************************************************");

$TestName = New("String","ScopeAcquisitionStatus");

UpdateStatus($TestName);

$GroupName = New("String","Utility -> ");

$GroupName = StringCat($GroupName, $TestName);

SetTestName($GroupName);

UpdateStatus("**************************************************");

($ErrorCode, $iAcquisitionStatus, $AcquisitionStatus) = NI_Scope_AcquisitionStatus($NI_ScopeHandle);

call ScopeErrorCheck();

UpdateStatus($AcquisitionStatus);

RecordMeasurementWithLimits($TestName, $iAcquisitionStatus, "N/A", "true", 1, 1, "true");

return;

}

//-------------------------------------------------------------------------------------------------------//

function ScopeClose()

//-------------------------------------------------------------------------------------------------------//

{

UpdateStatus("**************************************************");

$TestName = New("String","ScopeClose");

UpdateStatus($TestName);

$GroupName = New("String","Initialize -> ");

$GroupName = StringCat($GroupName, $TestName);

SetTestName($GroupName);

UpdateStatus("**************************************************");

NI_Scope_Close($NI_ScopeHandle);

return;

}

//-------------------------------------------------------------------------------------------------------//

function ScopeFetchMeasurementSimulateSignal1RecordCh0()

//-------------------------------------------------------------------------------------------------------//

{

UpdateStatus("**************************************************");

$TestName = New("String","ScopeFetchMeasurementSimulateSignal1RecordCh0");

UpdateStatus($TestName);

$GroupName = New("String","Fetch -> ");

$GroupName = StringCat($GroupName, $TestName);

SetTestName($GroupName);

UpdateStatus("**************************************************");

//Vertical settings

$measureChannel = New("String", "0");

$verticalRange = New("Float", 20.0);

$verticalOffset = New("Float", 0.0);

$verticalCoupling = New("String", "dc");

$probeAttenuation = New("Float", 1.0);

$channelEnabled = New("Boolean", "TRUE");

$ErrorCode = NI_Scope_ConfigureVertical($NI_ScopeHandle, $measureChannel, $verticalRange, $verticalOffset, $verticalCoupling, $probeAttenuation, $channelEnabled);

call ScopeErrorCheck();

//Horizontal settings

$sampleRate = New("Float", 100000);

$numPts = New("Integer", 6000);

$refPosition = New("Float", 10.0);

$numRecords = New("Integer", 2);

$enforceRealTime = New("Boolean", "TRUE");

$ErrorCode = NI_Scope_ConfigureHorizontalTiming($NI_ScopeHandle, $sampleRate, $numPts, $refPosition, $numRecords, $enforceRealTime);

call ScopeErrorCheck();

//Trigger settings

$triggerSource = New("String", "0");

$triggerLevel = New("Float", 0.5);

$triggerPolarity = New("String", "negative");

$triggerCoupling = New("String", "dc");

$triggerHoldOff = New("Float", 0.0);

$triggerDelay = New("Float", 0.0);

$ErrorCode = NI_Scope_ConfigureTriggerEdge($NI_ScopeHandle, $triggerSource, $triggerLevel, $triggerPolarity, $triggerCoupling, $triggerHoldOff, $triggerDelay);

call ScopeErrorCheck();

//Initiate acquistion

$ErrorCode = NI_Scope_InitiateAcquisition($NI_ScopeHandle);

call ScopeErrorCheck();

//Validate

$measureType = New("String", "VOLTAGE PEAK TO PEAK");

$LL = New("Float", 19.0);

$HL = New("Float", 20.0);

$Unit = New("String", "V");

call CheckFetchMeasurement();

//Validate

$measureType = New("String", "VOLTAGE TOP");

$LL = New("Float", 9);

$HL = New("Float", 11);

$Unit = New("String", "V");

call CheckFetchMeasurement();

//Validate

$measureType = New("String", "VOLTAGE BASE");

$LL = New("Float", -11);

$HL = New("Float", -9);

$Unit = New("String", "V");

call CheckFetchMeasurement();

//Validate

$measureType = New("String", "VOLTAGE MIN");

$LL = New("Float", -11);

$HL = New("Float", -9);

$Unit = New("String", "V");

call CheckFetchMeasurement();

//Validate

$measureType = New("String", "VOLTAGE MAX");

$LL = New("Float", 9);

$HL = New("Float", 11);

$Unit = New("String", "V");

call CheckFetchMeasurement();

//Validate

$measureType = New("String", "AC ESTIMATE");

$LL = New("Float", 6);

$HL = New("Float", 7);

$Unit = New("String", "V");

call CheckFetchMeasurement();

//Validate

$measureType = New("String", "DC ESTIMATE");

$LL = New("Float", -0.1);

$HL = New("Float", 0.5);

$Unit = New("String", "V");

call CheckFetchMeasurement();

//Validate

$measureType = New("String", "VOLTAGE CYCLE RMS");

$LL = New("Float", 6);

$HL = New("Float", 7);

$Unit = New("String", "V");

call CheckFetchMeasurement();

//Validate

$measureType = New("String", "FFT AMPLITUDE");

$LL = New("Float", 5);

$HL = New("Float", 6);

$Unit = New("String", "V");

call CheckFetchMeasurement();

//Validate

$measureType = New("String", "VOLTAGE RMS");

$LL = New("Float", 6);

$HL = New("Float", 7);

$Unit = New("String", "V");

call CheckFetchMeasurement();

//Validate

$measureType = New("String", "VOLTAGE AVERAGE");

$LL = New("Float", -0.1);

$HL = New("Float", 0.5);

$Unit = New("String", "V");

call CheckFetchMeasurement();

//Validate

$measureType = New("String", "VOLTAGE CYCLE AVERAGE");

$LL = New("Float", -0.1);

$HL = New("Float", 0.5);

$Unit = New("String", "V");

call CheckFetchMeasurement();

//Validate

$measureType = New("String", "AREA");

$LL = New("Float", -0.1);

$HL = New("Float", 0.1);

$Unit = New("String", "V");

call CheckFetchMeasurement();

//Validate

$measureType = New("String", "INTEGRAL");

$LL = New("Float", -0.1);

$HL = New("Float", 0.1);

$Unit = New("String", "V");

call CheckFetchMeasurement();

//Validate

$measureType = New("String", "LOW REF VOLTAGE");

$LL = New("Float", -8);

$HL = New("Float", -7);

$Unit = New("String", "V");

call CheckFetchMeasurement();

//Validate

$measureType = New("String", "MID REF VOLTAGE");

$LL = New("Float", -0.1);

$HL = New("Float", 0.5);

$Unit = New("String", "V");

call CheckFetchMeasurement();

//Validate

$measureType = New("String", "HIGH REF VOLTAGE");

$LL = New("Float", 7.5);

$HL = New("Float", 8.5);

$Unit = New("String", "V");

call CheckFetchMeasurement();

// Disable scope

NI_Scope_Disable($NI_ScopeHandle);

return;

}

//-------------------------------------------------------------------------------------------------------//

function FetchSimulateSignal1RecordCh0()

//-------------------------------------------------------------------------------------------------------//

{

UpdateStatus("**************************************************");

$TestName = New("String","FetchSimulateSignal1RecordCh0");

UpdateStatus($TestName);

$GroupName = New("String","Fetch -> ");

$GroupName = StringCat($GroupName, $TestName);

SetTestName($GroupName);

UpdateStatus("**************************************************");

//Vertical settings

$TestName = New("String","NI_Scope_ConfigureVertical");

$measureChannel = New("String", "0");

$verticalRange = New("Float", 20.0);

$verticalOffset = New("Float", 0.0);

$verticalCoupling = New("String", "dc");

$probeAttenuation = New("Float", 1.0);

$channelEnabled = New("Boolean", "TRUE");

$ErrorCode = NI_Scope_ConfigureVertical($NI_ScopeHandle, $measureChannel, $verticalRange, $verticalOffset, $verticalCoupling, $probeAttenuation, $channelEnabled);

call ScopeErrorCheck();

//Horizontal settings

$TestName = New("String","NI_Scope_ConfigureHorizontalTiming");

$sampleRate = New("Float", 20000000);

$numPts = New("Integer", 1000);

$refPosition = New("Float", 10.0);

$numRecords = New("Integer", 1);

$enforceRealTime = New("Boolean", "TRUE");

$ErrorCode = NI_Scope_ConfigureHorizontalTiming($NI_ScopeHandle, $sampleRate, $numPts, $refPosition, $numRecords, $enforceRealTime);

call ScopeErrorCheck();

//Trigger settings

$TestName = New("String","NI_Scope_ConfigureTriggerEdge");

$triggerSource = New("String", "0");

$triggerLevel = New("Float", 0.5);

$triggerPolarity = New("String", "negative");

$triggerCoupling = New("String", "dc");

$triggerHoldOff = New("Float", 0.0);

$triggerDelay = New("Float", 0.0);

$ErrorCode = NI_Scope_ConfigureTriggerEdge($NI_ScopeHandle, $triggerSource, $triggerLevel, $triggerPolarity, $triggerCoupling, $triggerHoldOff, $triggerDelay);

call ScopeErrorCheck();

//Execute autosetup

//~ $ErrorCode = NI_Scope_AutoSetup($NI_ScopeHandle);

call ScopeErrorCheck();

//Initiate acquistion

$TestName = New("String","NI_Scope_InitiateAcquisition");

$ErrorCode = NI_Scope_InitiateAcquisition($NI_ScopeHandle);

//Get the actual record length

$TestName = New("String","NI_Scope_ActualRecordLength");

($ErrorCode, $ActualRecordLength) = NI_Scope_ActualRecordLength($NI_ScopeHandle);

call ScopeErrorCheck();

RecordMeasurement("Actual record length", $ActualRecordLength, "", "true");

//Get the actual sampling rate

($ErrorCode, $SamplingRate) = NI_Scope_SampleRate($NI_ScopeHandle);

call ScopeErrorCheck();

RecordMeasurement("Actual sampling rate", $SamplingRate, "", "true");

//Fetch

$TestName = New("String","NI_Scope_Fetch");

$measureTimeOut = New("Float", 1.0);

($ErrorCode, $WaveForms, $NumberOfWaveforms, $WaveFormsInfo) = NI_Scope_Fetch($NI_ScopeHandle, $measureChannel, $measureTimeOut, $ActualRecordLength);

call ScopeErrorCheck();

RecordMeasurement("Number of waveforms", $NumberOfWaveforms, "", "true");

//Analyze

$MeasureDuration = $ActualRecordLength/$SamplingRate;

UpdateStatus($MeasureDuration);

//~ ($MeasureRange, $ArrayOffsetMeasurePosition, $ArrayOffsetMeasureDuration, $NumberOfRecords, $RecordLength, $HorizontalTimePerRecord, $SampleRate, $ReferencePosition) = NI_Scope_GetMeasureData($NI_ScopeHandle, $WaveForms, 0, 0.000000, $MeasureDuration);

($MeasureRange, $ArrayOffsetMeasurePosition, $ArrayOffsetMeasureDuration, $NumberOfRecords, $RecordLength, $HorizontalTimePerRecord, $SampleRate, $ReferencePosition) = NI_Scope_GetMeasureData($NI_ScopeHandle, $WaveForms, 0, 0.000000, 0.000040);

//Validate

RecordMeasurement("Array offset measure position", $ArrayOffsetMeasurePosition, "", "true");

RecordMeasurement("Array offset measure duration", $ArrayOffsetMeasureDuration, "", "true");

return;

}

//-------------------------------------------------------------------------------------------------------//

function FetchSimulateSignal5RecordCh0()

//-------------------------------------------------------------------------------------------------------//

{

UpdateStatus("**************************************************");

$TestName = New("String","FetchSimulateSignal5RecordCh0");

UpdateStatus($TestName);

$GroupName = New("String","Fetch -> ");

$GroupName = StringCat($GroupName, $TestName);

SetTestName($GroupName);

UpdateStatus("**************************************************");

//Vertical settings

$TestName = New("String","NI_Scope_ConfigureVertical");

$measureChannel = New("String", "0");

$verticalRange = New("Float", 20.0);

$verticalOffset = New("Float", 0.0);

$verticalCoupling = New("String", "dc");

$probeAttenuation = New("Float", 1.0);

$channelEnabled = New("Boolean", "TRUE");

$ErrorCode = NI_Scope_ConfigureVertical($NI_ScopeHandle, $measureChannel, $verticalRange, $verticalOffset, $verticalCoupling, $probeAttenuation, $channelEnabled);

call ScopeErrorCheck();

//Horizontal settings

$TestName = New("String","NI_Scope_ConfigureHorizontalTiming");

$sampleRate = New("Float", 20000000);

$numPts = New("Integer", 1000);

$refPosition = New("Float", 10.0);

$numRecords = New("Integer", 5);

$enforceRealTime = New("Boolean", "TRUE");

$ErrorCode = NI_Scope_ConfigureHorizontalTiming($NI_ScopeHandle, $sampleRate, $numPts, $refPosition, $numRecords, $enforceRealTime);

call ScopeErrorCheck();

//Trigger settings

$TestName = New("String","NI_Scope_ConfigureTriggerEdge");

$triggerSource = New("String", "0");

$triggerLevel = New("Float", 0.5);

$triggerPolarity = New("String", "negative");

$triggerCoupling = New("String", "dc");

$triggerHoldOff = New("Float", 0.0);

$triggerDelay = New("Float", 0.0);

$ErrorCode = NI_Scope_ConfigureTriggerEdge($NI_ScopeHandle, $triggerSource, $triggerLevel, $triggerPolarity, $triggerCoupling, $triggerHoldOff, $triggerDelay);

call ScopeErrorCheck();

//Execute autosetup

//~ $ErrorCode = NI_Scope_AutoSetup($NI_ScopeHandle);

call ScopeErrorCheck();

//Initiate acquistion

$TestName = New("String","NI_Scope_InitiateAcquisition");

$ErrorCode = NI_Scope_InitiateAcquisition($NI_ScopeHandle);

//Get the actual record length

$TestName = New("String","NI_Scope_ActualRecordLength");

($ErrorCode, $ActualRecordLength) = NI_Scope_ActualRecordLength($NI_ScopeHandle);

call ScopeErrorCheck();

RecordMeasurement("Actual record length", $ActualRecordLength, "", "true");

//Get the actual sampling rate

($ErrorCode, $SamplingRate) = NI_Scope_SampleRate($NI_ScopeHandle);

call ScopeErrorCheck();

RecordMeasurement("Actual sampling rate", $SamplingRate, "", "true");

//Fetch

$TestName = New("String","NI_Scope_Fetch");

$measureTimeOut = New("Float", 1.0);

($ErrorCode, $WaveForms, $NumberOfWaveforms, $WaveFormsInfo) = NI_Scope_Fetch($NI_ScopeHandle, $measureChannel, $measureTimeOut, $ActualRecordLength);

call ScopeErrorCheck();

RecordMeasurement("Number of waveforms", $NumberOfWaveforms, "", "true");

//Analyze

$MeasureDuration = $ActualRecordLength/$SamplingRate;

UpdateStatus($MeasureDuration);

//~ ($MeasureRange, $ArrayOffsetMeasurePosition, $ArrayOffsetMeasureDuration) = NI_Scope_GetMeasureData($NI_ScopeHandle, $WaveForms, 0, 0.000000, $MeasureDuration);

($MeasureRange, $ArrayOffsetMeasurePosition, $ArrayOffsetMeasureDuration, $NumberOfRecords, $RecordLength, $HorizontalTimePerRecord, $SampleRate, $ReferencePosition) = NI_Scope_GetMeasureData($NI_ScopeHandle, $WaveForms, 4, 0.000000, 0.000040);

//Validate

RecordMeasurement("Array offset measure position", $ArrayOffsetMeasurePosition, "", "true");

RecordMeasurement("Array offset measure duration", $ArrayOffsetMeasureDuration, "", "true");

return;

}

//-------------------------------------------------------------------------------------------------------//

function FetchSimulateSignal1RecordCh0Ch1()

//-------------------------------------------------------------------------------------------------------//

{

UpdateStatus("**************************************************");

$TestName = New("String","FetchSimulateSignal1RecordCh0Ch1");

UpdateStatus($TestName);

$GroupName = New("String","Fetch -> ");

$GroupName = StringCat($GroupName, $TestName);

SetTestName($GroupName);

UpdateStatus("**************************************************");

//Vertical settings

$TestName = New("String","NI_Scope_ConfigureVertical");

$measureChannel = New("String", "0,1");

$verticalRange = New("Float", 20.0);

$verticalOffset = New("Float", 0.0);

$verticalCoupling = New("String", "dc");

$probeAttenuation = New("Float", 1.0);

$channelEnabled = New("Boolean", "TRUE");

$ErrorCode = NI_Scope_ConfigureVertical($NI_ScopeHandle, $measureChannel, $verticalRange, $verticalOffset, $verticalCoupling, $probeAttenuation, $channelEnabled);

call ScopeErrorCheck();

//Horizontal settings

$TestName = New("String","NI_Scope_ConfigureHorizontalTiming");

$sampleRate = New("Float", 20000000);

$numPts = New("Integer", 1000);

$refPosition = New("Float", 10.0);

$numRecords = New("Integer", 1);

$enforceRealTime = New("Boolean", "TRUE");

$ErrorCode = NI_Scope_ConfigureHorizontalTiming($NI_ScopeHandle, $sampleRate, $numPts, $refPosition, $numRecords, $enforceRealTime);

call ScopeErrorCheck();

//Trigger settings

$TestName = New("String","NI_Scope_ConfigureTriggerEdge");

$triggerSource = New("String", "0");

$triggerLevel = New("Float", 0.5);

$triggerPolarity = New("String", "negative");

$triggerCoupling = New("String", "dc");

$triggerHoldOff = New("Float", 0.0);

$triggerDelay = New("Float", 0.0);

$ErrorCode = NI_Scope_ConfigureTriggerEdge($NI_ScopeHandle, $triggerSource, $triggerLevel, $triggerPolarity, $triggerCoupling, $triggerHoldOff, $triggerDelay);

call ScopeErrorCheck();

//Execute autosetup

//~ $ErrorCode = NI_Scope_AutoSetup($NI_ScopeHandle);

call ScopeErrorCheck();

//Initiate acquistion

$TestName = New("String","NI_Scope_InitiateAcquisition");

$ErrorCode = NI_Scope_InitiateAcquisition($NI_ScopeHandle);

//Get the actual record length

$TestName = New("String","NI_Scope_ActualRecordLength");

($ErrorCode, $ActualRecordLength) = NI_Scope_ActualRecordLength($NI_ScopeHandle);

call ScopeErrorCheck();

RecordMeasurement("Actual record length", $ActualRecordLength, "", "true");

//Get the actual sampling rate

($ErrorCode, $SamplingRate) = NI_Scope_SampleRate($NI_ScopeHandle);

call ScopeErrorCheck();

RecordMeasurement("Actual sampling rate", $SamplingRate, "", "true");

//Fetch

$TestName = New("String","NI_Scope_Fetch");

$measureTimeOut = New("Float", 1.0);

($ErrorCode, $WaveForms, $NumberOfWaveforms, $WaveFormsInfo) = NI_Scope_Fetch($NI_ScopeHandle, $measureChannel, $measureTimeOut, $ActualRecordLength);

call ScopeErrorCheck();

RecordMeasurement("Number of waveforms", $NumberOfWaveforms, "", "true");

//Analyze

($MeasureRange, $ArrayOffsetMeasurePosition, $ArrayOffsetMeasureDuration, $NumberOfRecords, $RecordLength, $HorizontalTimePerRecord, $SampleRate, $ReferencePosition) = NI_Scope_GetMeasureData($NI_ScopeHandle, $WaveForms, 1, 0.000000, 0.000040);

//Validate

RecordMeasurement("Array offset measure position", $ArrayOffsetMeasurePosition, "", "true");

RecordMeasurement("Array offset measure duration", $ArrayOffsetMeasureDuration, "", "true");

return;

}

//**************************************************************************************************************************************//

// GENERAL FUNCTIONS

//**************************************************************************************************************************************//

//-------------------------------------------------------------------------------------------------------//

function AnalysisMean()

//-------------------------------------------------------------------------------------------------------//

{

//Analyze

($MeasureRange, $ArrayOffsetMeasurePosition, $ArrayOffsetMeasureDuration, $NumberOfRecords, $RecordLength, $HorizontalTimePerRecord, $SampleRate, $ReferencePosition) = NI_Scope_GetMeasureData($NI_ScopeHandle, $WaveForms, $WaveformIndex, $MeasurePosition, $MeasureDuration);

RecordMeasurement("Array offset measure position", $ArrayOffsetMeasurePosition, "", "true");

RecordMeasurement("Array offset measure duration", $ArrayOffsetMeasureDuration, "", "true");

RecordMeasurement("Number of records", $NumberOfRecords, "", "true");

RecordMeasurement("Record length", $RecordLength, "", "true");

RecordMeasurement("Horizontal time per record", $HorizontalTimePerRecord, "", "true");

RecordMeasurement("Sample rate", $SampleRate, "", "true");

RecordMeasurement("Reference position", $ReferencePosition, "", "true");

return;

}

//-------------------------------------------------------------------------------------------------------//

function AnalysisPkPk()

//-------------------------------------------------------------------------------------------------------//

{

// Analyze

($MeasureRange, $ArrayOffsetMeasurePosition, $ArrayOffsetMeasureDuration, $NumberOfRecords, $RecordLength, $HorizontalTimePerRecord, $SampleRate, $ReferencePosition) = NI_Scope_GetMeasureData($NI_ScopeHandle, $WaveForms, $WaveformIndex, $MeasurePosition, $MeasureDuration);

RecordMeasurement("Array offset measure position", $ArrayOffsetMeasurePosition, "", "true");

RecordMeasurement("Array offset measure duration", $ArrayOffsetMeasureDuration, "", "true");

RecordMeasurement("Number of records", $NumberOfRecords, "", "true");

RecordMeasurement("Record length", $RecordLength, "", "true");

RecordMeasurement("Horizontal time per record", $HorizontalTimePerRecord, "", "true");

RecordMeasurement("Sample rate", $SampleRate, "", "true");

RecordMeasurement("Reference position", $ReferencePosition, "", "true");

return;

}

//-------------------------------------------------------------------------------------------------------//

function CheckFetchMeasurement()

//-------------------------------------------------------------------------------------------------------//

{

//Measure

$measureTimeOut = New("Float", 1.0);

($ErrorCode, $resultArray) = NI_Scope_FetchMeasurement($NI_ScopeHandle, $measureChannel, $measureTimeOut, $measureType);

call ScopeErrorCheck();

//~ $Length = ArrayGetLength($resultArray);

//~ RecordMeasurement("Length of result array", $Length, "", "true");

//Get desired array value: index 0

$result = ArrayGetValue($resultArray, 0, 0);

UpdateStatus($result);

//Validate array value: index 0 (record numbers = 2)

RecordMeasurementWithLimits($measureType, $result, $Unit, "true", $LL, $HL, "true");

//Get desired array value: index 1 (record numbers = 2)

$result = ArrayGetValue($resultArray, 0, 1);

UpdateStatus($result);

//Validate array value: index 1

RecordMeasurementWithLimits($measureType, $result, $Unit, "true", $LL, $HL, "true");

return;

}

//-------------------------------------------------------------------------------------------------------//

function CheckFetchMeasurementRiseTime()

//-------------------------------------------------------------------------------------------------------//

{

//Configure reference levels

NI_Scope_ConfigureRefLevels($NI_ScopeHandle, $unit, $low, $mid, $high);

//Measure

$measureTimeOut = New("Float", 1.0);

($ErrorCode, $resultArray) = NI_Scope_FetchMeasurement($NI_ScopeHandle, $measureChannel, $measureTimeOut, $measureType);

call ScopeErrorCheck();

//~ $Length = ArrayGetLength($resultArray);

//~ RecordMeasurement("Length of result array", $Length, "", "true");

//Get desired array value: index 0

$result = ArrayGetValue($resultArray, 0, 0);

$result = $result * 1000000;

UpdateStatus($result);

//Validate array value: index 0 (record numbers = 2)

RecordMeasurementWithLimits($measureType, $result, $Unit, "true", $LL, $HL, "true");

//Get desired array value: index 1 (record numbers = 2)

$result = ArrayGetValue($resultArray, 0, 1);

$result = $result * 1000000;

UpdateStatus($result);

//Validate array value: index 1

RecordMeasurementWithLimits($measureType, $result, $Unit, "true", $LL, $HL, "true");

return;

}

//-------------------------------------------------------------------------------------------------------//

function ScopeWaveformInfo()

//-------------------------------------------------------------------------------------------------------//

{

// Loop

$Counter = New("Integer", 0);

Label ScopeWaveformInfo_Loop:





// Get the GAIN parameter out of the structure WaveformInfo

$gain = NI_Scope_GetWaveformInfo($Counter, $WaveFormsInfo, "gain");

$Text = StringCat("GAIN waveform ", $Counter);

RecordMeasurement($Text, $gain, "", "true");

// Get the relativeInitialX parameter out of the structure WaveformInfo

$relativeInitialX = NI_Scope_GetWaveformInfo($Counter, $WaveFormsInfo, "relativeInitialX");

$Text = StringCat("relativeInitialX waveform ", $Counter);

RecordMeasurement($Text, $relativeInitialX, "", "true");

// Get the absoluteInitialX parameter out of the structure WaveformInfo

$absoluteInitialX = NI_Scope_GetWaveformInfo($Counter, $WaveFormsInfo, "absoluteInitialX");

$Text = StringCat("absoluteInitialX waveform ", $Counter);

RecordMeasurement($Text, $absoluteInitialX, "", "true");

// Get the xIncrement parameter out of the structure WaveformInfo

$xIncrement = NI_Scope_GetWaveformInfo($Counter, $WaveFormsInfo, "xIncrement");

$Text = StringCat("xIncrement waveform ", $Counter);

RecordMeasurement($Text, $xIncrement, "", "true");

// Get the actualSamples parameter out of the structure WaveformInfo

$actualSamples = NI_Scope_GetWaveformInfo($Counter, $WaveFormsInfo, "actualSamples");

$Text = StringCat("actualSamples waveform ", $Counter);

RecordMeasurement($Text, $actualSamples, "", "true");

// Get the offset parameter out of the structure WaveformInfo

$offset = NI_Scope_GetWaveformInfo($Counter, $WaveFormsInfo, "offset");

$Text = StringCat("offset waveform ", $Counter);

RecordMeasurement($Text, $offset, "", "true");





// Loop

$Counter = Add($Counter,1);

$Boolean = NumericComparison($Counter, $NumberOfWaveforms, "==");

ScriptIf($Boolean, "GOTO", "ScopeWaveformInfo_End", "ScopeWaveformInfo_Loop");





Label ScopeWaveformInfo_End:

return;

}

//-------------------------------------------------------------------------------------------------------//

function ScopeErrorCheck()

//-------------------------------------------------------------------------------------------------------//

{

$BooleanValue = NumericComparison($ErrorCode, 0, "!=");





ScriptIf($BooleanValue, "GOTO", "", "ScopeErrorCheck4_End");



($FunctionErrorCode, $ErrorMessage) = NI_Scope_ErrorHandler($NI_ScopeHandle,$ErrorCode);

UpdateStatus($FunctionErrorCode);

UpdateStatus($ErrorMessage);

RecordMeasurementWithLimits($TestName, $ErrorCode, "-", "true", 0, 0, "true");





Label ScopeErrorCheck4_End:

return;

}

//**************************************************************************************************************************************//

// FLOW CONTROL FUNCTIONS

//**************************************************************************************************************************************//

//-------------------------------------------------------------------------------------------------------//

function CleanUpTest()

//-------------------------------------------------------------------------------------------------------//

UpdateStatus("**************************************************");

SetTestName("Cleanup"); // Set Tars Label

UpdateStatus("**************************************************");

UpdateStatus("Clean up Function is started...........");

//~ call ScopeClose();

End;

//-------------------------------------------------------------------------------------------------------//

function InitializeTest()

//-------------------------------------------------------------------------------------------------------//

{

UpdateStatus("**************************************************");

SetTestName("Initialize test"); // Set Tars Label

UpdateStatus("**************************************************");





return;

}





NI_Scope_ClearInterchangeWarnings

Previous Top Next



* * *



NI_Scope_ClearInterchangeWarnings



Usage:

$ErrorCode = NI_Scope_ClearInterchangeWarnings($NI_ScopeHandle);



Description:

This function requires NI Scope drivers to be installed on the system.

This function clears the list of current interchange warnings.



Remarks:

· This function is tested with a NI PCI-5122 device.

· When there occurs an error during the execution of the low level NI-Scope functions, Jabil Test will fail and return the error message.

· The function will verify if the given parameter exists, otherwise Jabil Test fails and returns the error message.



Result:

$ErrorCode = NI_Scope_ClearInterchangeWarnings($NI_ScopeHandle);

Function arguments



Parameter

Variable Type

Description



$NI_ScopeHandle

Object

The instrument handle you obtain from NI_Scope_Initialize that identifies a particular instrument's session.





Return parameters



Parameter

Variable Type

Description



$ErrorCode

Integer

Reports the status of this operation. To obtain a text description of the status code, call NI_Scope_ErrorMessage. To obtain additional information concerning the error condition, use NI_Scope_GetError and NI_Scope_ClearError. The general meaning of the status code is as:

· 0: success

· Positive value: warning

· Negative value: errors





Example(s):

$ErrorCode = NI_Scope_ClearInterchangeWarnings($NI_ScopeHandle);





NI_Scope_Disable

Previous Top Next



* * *



NI_Scope_Disable



Usage:

$ErrorCode = NI_Scope_Disable($NI_ScopeHandle);



Description:

This function requires NI Scope drivers to be installed on the system.

Aborts any current operation, opens data channel relays, and releases RTSI and PFI lines. Places the instrument in a quiescent state where it has minimal or no impact on the system to which it is connected. If a measurement is in progress when Disable is called, the measurement is aborted.



Remarks:

· This function is tested with a NI PCI-5122 device.

· When there occurs an error during the execution of the low level NI-Scope functions, Jabil Test will fail and return the error message.

· The function will verify if the given parameter exists, otherwise Jabil Test fails and returns the error message.



Result:

$ErrorCode = NI_Scope_Disable($NI_ScopeHandle);

Function arguments



Parameter

Variable Type

Description



$NI_ScopeHandle

Object

The instrument handle you obtain from NI_Scope_Initialize that identifies a particular instrument's session.





Return parameters



Parameter

Variable Type

Description



$ErrorCode

Integer

Reports the status of this operation. To obtain a text description of the status code, call NI_Scope_ErrorMessage. To obtain additional information concerning the error condition, use NI_Scope_GetError and NI_Scope_ClearError. The general meaning of the status code is as:

· 0: success

· Positive value: warning

· Negative value: errors





Example(s):

$ErrorCode = NI_Scope_Disable($NI_ScopeHandle);





NI_Scope_GetChannelName

Previous Top Next



* * *



NI_Scope_GetChannelName



Usage:

($ErrorCode, $channelString) = NI_Scope_GetChannelName($NI_ScopeHandle, $index);



Description:

This function requires NI Scope drivers to be installed on the system.

This function returns the channel string that is in the channel table at an index you specify.



Remarks:

· This function is tested with a NI PCI-5122 device.

· When there occurs an error during the execution of the low level NI-Scope functions, Jabil Test will fail and return the error message.

· The function will verify if the given parameter exists, otherwise Jabil Test fails and returns the error message.



Result:

($ErrorCode, $channelString) = NI_Scope_GetChannelName($NI_ScopeHandle, $index);

Function arguments



Parameter

Variable Type

Description



$NI_ScopeHandle

Object

The instrument handle you obtain from NI_Scope_Initialize that identifies a particular instrument's session.



$index

Integer

A 1-based index into the channel table.





Return parameters



Parameter

Variable Type

Description



$ErrorCode

Integer

Reports the status of this operation. To obtain a text description of the status code, call NI_Scope_ErrorMessage. To obtain additional information concerning the error condition, use NI_Scope_GetError and NI_Scope_ClearError. The general meaning of the status code is as:

· 0: success

· Positive value: warning

· Negative value: errors



$channelString

String

Returns the channel string that is in the channel table at the index you specify. Do not modify the contents of the channel string.





Example(s):

($ErrorCode, $channelString) = NI_Scope_GetChannelName($NI_ScopeHandle, $index);





NI_Scope_ProbeCompensationSignalStart

Previous Top Next



* * *



NI_Scope_ProbeCompensationSignalStart



Usage:

$ErrorCode = NI_Scope_ProbeCompensationSignalStart($NI_ScopeHandle);



Description:

This function requires NI Scope drivers to be installed on the system.

Starts the 1 kHz square wave output on PFI 1 for probe compensation.



Remarks:

· This function is tested with a NI PCI-5122 device.

· When there occurs an error during the execution of the low level NI-Scope functions, Jabil Test will fail and return the error message.

· The function will verify if the given parameter exists, otherwise Jabil Test fails and returns the error message.



Result:

$ErrorCode = NI_Scope_ProbeCompensationSignalStart($NI_ScopeHandle);

Function arguments



Parameter

Variable Type

Description



$NI_ScopeHandle

Object

The instrument handle you obtain from NI_Scope_Initialize that identifies a particular instrument's session.





Return parameters



Parameter

Variable Type

Description



$ErrorCode

Integer

Reports the status of this operation. To obtain a text description of the status code, call NI_Scope_ErrorMessage. To obtain additional information concerning the error condition, use NI_Scope_GetError and NI_Scope_ClearError. The general meaning of the status code is as:

· 0: success

· Positive value: warning

· Negative value: errors





Example(s):

$ErrorCode = NI_Scope_ProbeCompensationSignalStart($NI_ScopeHandle);





NI_Scope_ProbeCompensationSignalStop

Previous Top Next



* * *



NI_Scope_ProbeCompensationSignalStop



Usage:

$ErrorCode = NI_Scope_ProbeCompensationSignalStop($NI_ScopeHandle);



Description:

This function requires NI Scope drivers to be installed on the system.

Stops the 1 kHz square wave output on PFI 1 for probe compensation.



Remarks:

· This function is tested with a NI PCI-5122 device.

· When there occurs an error during the execution of the low level NI-Scope functions, Jabil Test will fail and return the error message.

· The function will verify if the given parameter exists, otherwise Jabil Test fails and returns the error message.



Result:

$ErrorCode = NI_Scope_ProbeCompensationSignalStop($NI_ScopeHandle);

Function arguments



Parameter

Variable Type

Description



$NI_ScopeHandle

Object

The instrument handle you obtain from NI_Scope_Initialize that identifies a particular instrument's session.





Return parameters



Parameter

Variable Type

Description



$ErrorCode

Integer

Reports the status of this operation. To obtain a text description of the status code, call NI_Scope_ErrorMessage. To obtain additional information concerning the error condition, use NI_Scope_GetError and NI_Scope_ClearError. The general meaning of the status code is as:

· 0: success

· Positive value: warning

· Negative value: errors





Example(s):

$ErrorCode = NI_Scope_ProbeCompensationSignalStop($NI_ScopeHandle);





NI_Scope_Reset

Previous Top Next



* * *



NI_Scope_Reset



Usage:

$ErrorCode = NI_Scope_Reset($NI_ScopeHandle);



Description:

This function requires NI Scope drivers to be installed on the system.

Resets the digitizer to its default state. Refer to your device documentation for the default state.



Remarks:

· This function is tested with a NI PCI-5122 device.

· When there occurs an error during the execution of the low level NI-Scope functions, Jabil Test will fail and return the error message.

· The function will verify if the given parameter exists, otherwise Jabil Test fails and returns the error message.



Result:

$ErrorCode = NI_Scope_Reset($NI_ScopeHandle);

Function arguments



Parameter

Variable Type

Description



$NI_ScopeHandle

Object

The instrument handle you obtain from NI_Scope_Initialize that identifies a particular instrument's session.





Return parameters



Parameter

Variable Type

Description



$ErrorCode

Integer

Reports the status of this operation. To obtain a text description of the status code, call NI_Scope_ErrorMessage. To obtain additional information concerning the error condition, use NI_Scope_GetError and NI_Scope_ClearError. The general meaning of the status code is as:

· 0: success

· Positive value: warning

· Negative value: errors





Example(s):

$ErrorCode = NI_Scope_Reset($NI_ScopeHandle);





NI_Scope_ResetDevice

Previous Top Next



* * *



NI_Scope_ResetDevice



Usage:

$ErrorCode = NI_Scope_ResetDevice($NI_ScopeHandle);



Description:

This function requires NI Scope drivers to be installed on the system.

Performs a hard reset of the device. Acquisition stops, all routes are released, RTSI and PFI lines are tri-stated, hardware is configured to its default state, and all session attributes are reset to their default state.



Remarks:

· This function is tested with a NI PCI-5122 device.

· When there occurs an error during the execution of the low level NI-Scope functions, Jabil Test will fail and return the error message.

· The function will verify if the given parameter exists, otherwise Jabil Test fails and returns the error message.



Result:

$ErrorCode = NI_Scope_ResetDevice($NI_ScopeHandle);

Function arguments



Parameter

Variable Type

Description



$NI_ScopeHandle

Object

The instrument handle you obtain from NI_Scope_Initialize that identifies a particular instrument's session.





Return parameters



Parameter

Variable Type

Description



$ErrorCode

Integer

Reports the status of this operation. To obtain a text description of the status code, call NI_Scope_ErrorMessage. To obtain additional information concerning the error condition, use NI_Scope_GetError and NI_Scope_ClearError. The general meaning of the status code is as:

· 0: success

· Positive value: warning

· Negative value: errors





Example(s):

$ErrorCode = NI_Scope_ResetDevice($NI_ScopeHandle);





NI_Scope_ResetInterchangeCheck

Previous Top Next



* * *



NI_Scope_ResetInterchangeCheck



Usage:

$ErrorCode = NI_Scope_ResetInterchangeCheck($NI_ScopeHandle);



Description:

This function requires NI Scope drivers to be installed on the system.

When developing a complex test system that consists of multiple test modules, it is generally a good idea to design the test modules so that they can run in any order. To do so requires ensuring that each test module completely configures the state of each instrument it uses.

If a particular test module does not completely configure the state of an instrument, the state of the instrument depends on the configuration from a previously executed test module.

If you execute the test modules in a different order, the behavior of the instrument and therefore the entire test module is likely to change.

This change in behavior is generally instrument-specific and represents an interchangeability problem. You can use this function to test for such cases. After you call this function, the interchangeability checking algorithms in the specific driver ignore all previous configuration operations.

By calling this function at the beginning of a test module, you can determine whether the test module has dependencies on the operation of previously executed test modules.

This function does not clear the interchangeability warnings from the list of previously recorded interchangeability warnings. If you want to guarantee that NI_Scope_GetNextInterchangeWarning only returns those interchangeability warnings that are generated after calling this function, you must clear the list of interchangeability warnings.

You can clear the interchangeability warnings list by repeatedly calling NI_Scope_GetNextInterchangeWarning until no more interchangeability warnings are returned. If you are not interested in the content of those warnings, you can call NI_Scope_ClearInterchangeWarnings.



Remarks:

· This function is tested with a NI PCI-5122 device.

· When there occurs an error during the execution of the low level NI-Scope functions, Jabil Test will fail and return the error message.

· The function will verify if the given parameter exists, otherwise Jabil Test fails and returns the error message.



Result:

$ErrorCode = NI_Scope_ResetInterchangeCheck($NI_ScopeHandle);

Function arguments



Parameter

Variable Type

Description



$NI_ScopeHandle

Object

The instrument handle you obtain from NI_Scope_Initialize that identifies a particular instrument's session.





Return parameters



Parameter

Variable Type

Description



$ErrorCode

Integer

Reports the status of this operation. To obtain a text description of the status code, call NI_Scope_ErrorMessage. To obtain additional information concerning the error condition, use NI_Scope_GetError and NI_Scope_ClearError. The general meaning of the status code is as:

· 0: success

· Positive value: warning

· Negative value: errors





Example(s):

$ErrorCode = NI_Scope_ResetInterchangeCheck($NI_ScopeHandle);





NI_Scope_ResetWithDefaults

Previous Top Next



* * *



NI_Scope_ResetWithDefaults



Usage:

$ErrorCode = NI_Scope_ResetWithDefaults($NI_ScopeHandle);



Description:

This function requires NI Scope drivers to be installed on the system.

Performs a software reset of the device, returning it to the default state and applying any initial default settings



Remarks:

· This function is tested with a NI PCI-5122 device.

· When there occurs an error during the execution of the low level NI-Scope functions, Jabil Test will fail and return the error message.

· The function will verify if the given parameter exists, otherwise Jabil Test fails and returns the error message.



Result:

$ErrorCode = NI_Scope_ResetWithDefaults($NI_ScopeHandle);

Function arguments



Parameter

Variable Type

Description



$NI_ScopeHandle

Object

The instrument handle you obtain from NI_Scope_Initialize that identifies a particular instrument's session.





Return parameters



Parameter

Variable Type

Description



$ErrorCode

Integer

Reports the status of this operation. To obtain a text description of the status code, call NI_Scope_ErrorMessage. To obtain additional information concerning the error condition, use NI_Scope_GetError and NI_Scope_ClearError. The general meaning of the status code is as:

· 0: success

· Positive value: warning

· Negative value: errors





Example(s):

$ErrorCode = NI_Scope_ResetWithDefaults($NI_ScopeHandle);





NI_Scope_RevisionQuery

Previous Top Next



* * *



NI_Scope_RevisionQuery



Usage:

($ErrorCode, $instrumentDriverRevision, $firmwareRevision) = NI_Scope_RevisionQuery($NI_ScopeHandle);



Description:

This function requires NI Scope drivers to be installed on the system.

Returns the revision numbers of the instrument driver and instrument firmware.



Remarks:

· This function is tested with a NI PCI-5122 device.

· When there occurs an error during the execution of the low level NI-Scope functions, Jabil Test will fail and return the error message.

· The function will verify if the given parameter exists, otherwise Jabil Test fails and returns the error message.



Result:

($ErrorCode, $InstrumentDriverRevision, $FirmwareRevision) = NI_Scope_RevisionQuery($NI_ScopeHandle);

Function arguments



Parameter

Variable Type

Description



$NI_ScopeHandle

Object

The instrument handle you obtain from NI_Scope_Initialize that identifies a particular instrument's session.





Return parameters



Parameter

Variable Type

Description



$ErrorCode

Integer

Reports the status of this operation. To obtain a text description of the status code, call NI_Scope_ErrorMessage. To obtain additional information concerning the error condition, use NI_Scope_GetError and NI_Scope_ClearError. The general meaning of the status code is as:

· 0: success

· Positive value: warning

· Negative value: errors



$instrumentDriverRevision

String

Returns the instrument driver software revision numbers.



$firmwareRevision

String

Returns the instrument firmware revision numbers.





Example(s):

($ErrorCode, $instrumentDriverRevision, $firmwareRevision) = NI_Scope_RevisionQuery($NI_ScopeHandle);





StringCompare($instrumentDriverRevision, "Driver: NI-SCOPE 2.90, Model: NI PCI-5122, Compiler: MSVC 7.10, Engine: IVI 2.03, Compiler: MSVC 6.00, Components: VISA-Spec 3.00");





StringCompare($firmwareRevision, "Product code: x28D0, product revision: 3, total memory bytes: 67108864, product serial: x00E39399, calibration map: 2, DFC FPGA: xDFCA00F6, mem 0 FPGA: x50419, mem 1 FPGA: x50419.\n");





NI_Scope_SelfTest

Previous Top Next



* * *



NI_Scope_SelfTest



Usage:

($ErrorCode, $SelfTestResult, $selfTestMessage) = NI_Scope_SelfTest($NI_ScopeHandle);



Description:

This function requires NI Scope drivers to be installed on the system.

Runs the instrument self-test routine and returns the test result(s).



Remarks:

· This function is tested with a NI PCI-5122 device.

· When there occurs an error during the execution of the low level NI-Scope functions, Jabil Test will fail and return the error message.

· The function will verify if the given parameter exists, otherwise Jabil Test fails and returns the error message.



Result:

($ErrorCode, $SelfTestResult, $selfTestMessage) = NI_Scope_SelfTest($NI_ScopeHandle);

Function arguments



Parameter

Variable Type

Description



$NI_ScopeHandle

Object

The instrument handle you obtain from NI_Scope_Initialize that identifies a particular instrument's session.





Return parameters



Parameter

Variable Type

Description



$ErrorCode

Integer

Reports the status of this operation. To obtain a text description of the status code, call NI_Scope_ErrorMessage. To obtain additional information concerning the error condition, use NI_Scope_GetError and NI_Scope_ClearError. The general meaning of the status code is as:

· 0: success

· Positive value: warning

· Negative value: errors



$SelfTestResult

Integer

This control contains the value returned from the instrument self-test.



$selfTestMessage

String

Returns the self-test response string from the instrument.





Example(s):

($ErrorCode, $SelfTestResult, $SelfTestString) = NI_Scope_SelfTest($NI_ScopeHandle);



NumericLimitTest($SelfTestResult, 0, 0);





StringCompare($SelfTestString, "Scope Self Tests PASSED.");





TEKDPO4K_AutoProbeSenseValue

Previous Top Next



* * *



TEKDPO4K_AutoProbeSenseValue



Usage:

$Attenuation = TEKDPO4K_AutoProbeSenseValue($Handle,$ChannelName)

Description:



The function returns the probe attenuation value the oscilloscope senses.





Note: If you disable the automatic probe sense capability, this function returns the manual probe attenuation setting.





Requirements:

· This function requires the TekDPO4K IVI Driver as well as the National Instruments IVI Compliance Package to to be installed before using the instrument driver.

· This function requires NI-VISA version 3.5 or higher.



Function arguments



Parameter

Variable Type

Description



$Handle

Object

The handle of the instrument returned from the initialization function.



$ChannelName

String

The name of the channel to configure. Allowable values are:

· "CH1"

· "CH2"

· "CH3" (For 4 Channel Scopes)

· "CH4" (For 4 Channel Scopes)

· "REF1" Reference 1

· "REF2" Reference 2

· "REF3" Reference 3

· "REF4" Reference 4

· "MATH" Math





Return parameters



Parameter

Variable Type

Description



$Attenuation

Float

The attenuation level of the probe determined via the Oscilloscope's Autoprobe sensor. If Probe Autosense is disabled, this function returns the manual probe attenuation value.





TEKDPO4K_AutoSetup

Previous Top Next



* * *



TEKDPO4K_AutoSetup



Usage:

TEKDPO4K_AutoSetup($Handle);



Description:



This function automatically configures the instrument. When you call this function, the oscilloscope senses the input signal and automatically configures many of the instrument settings. The settings no longer match the cache values for the corresponding attributes. Therefore, this function invalidates all attribute cache values.This Function auto sets all active channels.





NOTE: After Running Autosetup, you must pause the script for a few moments while the settings are applied. This function returns immediately after sending the autoscale command, and doesn't wait for it's completion.





Requirements:

· This function requires the TekDPO4K IVI Driver as well as the National Instruments IVI Compliance Package to to be installed before using the instrument driver.

· This function requires NI-VISA version 3.5 or higher.



Function arguments



Parameter

Variable Type

Description



$Handle

Object

The handle of the instrument returned from the initialization function.





Return parameters



Parameter

Variable Type

Description



None





Example(s):

TEKDPO4K_AutoSetup($Handle);





TEKDPO4K_Close

Previous Top Next



* * *



TEKDPO4K_Close



Usage:

TEKDPO4K_Close($Handle);



Description:



This function closes and releases the instrument driver session. It also deallocates any memory resources the driver uses.





Requirements:

· This function requires the TekDPO4K IVI Driver as well as the National Instruments IVI Compliance Package to to be installed before using the instrument driver.

· This function requires NI-VISA version 3.5 or higher.



Function arguments



Parameter

Variable Type

Description



$Handle

Object

The handle of the instrument returned from the initialization function.





Return parameters



Parameter

Variable Type

Description



None





Example(s):

TEKDPO4K_Close($Handle)





TEKDPO4K_ConfigureAcquisitionRecord

Previous Top Next



* * *



TEKDPO4K_ConfigureAcqusitionRecord



Usage:

TEKDPO4K_ConfigureAcquisitionRecord($Handle,$TimePerRecord,$MinRecordLength,$AcquisitonStartTime);



Description:



This function configures the common attributes of the acquisition subsystem. These attributes are the time per record, minimum record length, and acquisition start time.





Requirements:

· This function requires the TekDPO4K IVI Driver as well as the National Instruments IVI Compliance Package to to be installed before using the instrument driver.

· This function requires NI-VISA version 3.5 or higher.



Function arguments



Parameter

Variable Type

Description



$Handle

Object

The handle of the instrument returned from the initialization function.



$TimePerRecord

String

The time duration that corresponds to the record length. This is the horizontal time period.



$MinRecordLength

Integer

The minimum number of points you require in the waveform record for each channel.



$AcquisitionStartTime

Float

The length of time from the trigger event to the first point in the waveform record. If the value is positive, the first point in the waveform occurs after the trigger event. If the value is negative, the first point in the waveform occurs before the trigger event.





Return parameters



Parameter

Variable Type

Description



None





Example(s):

TEKDPO4K_ConfigureAcquisitionRecord(0.000000001,10000,0);





TEKDPO4K_ConfigureAcquisitionType

Previous Top Next



* * *



TEKDPO4K_ConfigureAcquisitionType



Usage:

TEKDPO4K_ConfigureAcquisitionType($Handle,$AcquisitionType);



Description:



This function configures how the oscilloscope acquires data and fills the waveform record.



When you configure the acquisition type to Normal, HiRes or Average, the oscilloscope acquires only one waveform. To retrieve the waveform, you should use tkdpo4k_ReadWaveform or tkdpo4k_FetchWaveform functions.



When you configure the acquisition type to Envelope or Peak Detect, the oscilloscope acquires minimum and maximum waveforms.





Requirements:

· This function requires the TekDPO4K IVI Driver as well as the National Instruments IVI Compliance Package to to be installed before using the instrument driver.

· This function requires NI-VISA version 3.5 or higher.



Function arguments



Parameter

Variable Type

Description



$Handle

Object

The handle of the instrument returned from the initialization function.



$AcquisitionType

String

The acquisition type to configure. Allowable values are:

· "NORMAL"

· "HIRES"

· "PEAKDETECT"

· "ENVELOPE"

· "AVERAGE"





Return parameters



Parameter

Variable Type

Description



None





Example(s):

TEKDPO4K_ConfigureNumAverages($TekScope,256);





TEKDPO4K_ConfigureChannel

Previous Top Next



* * *



TEKDPO4K_ConfigureChannel



Usage:

TEKDPO4K_ConfigureChannel($Handle,$ChannelName,$VerticalRange,$VerticalOffset,$VerticalCoupling,$ProbeAttenuation,$ChannelEnabled);



Description:



This function configures the common attributes of the channel subsystem for a particular channel. These attributes are the vertical range, vertical offset, coupling, probe attenuation, and channel enabled.





Requirements:

· This function requires the TekDPO4K IVI Driver as well as the National Instruments IVI Compliance Package to to be installed before using the instrument driver.

· This function requires NI-VISA version 3.5 or higher.



Function arguments



Parameter

Variable Type

Description



$Handle

Object

The handle of the instrument returned from the initialization function.



$ChannelName

String

The name of the channel to configure. Allowable values are:

· "CH1"

· "CH2"

· "CH3" (For 4 Channel Scopes)

· "CH4" (For 4 Channel Scopes)



$VerticalRange

Float

The value of the input range for the specified channel. To measure a sine wave that spans between 0 and 10 volts, pass 10.0 as the value of this parameter.



$VerticalOffset

Float

The location of the center of the range that you specify with the vertical range parameter. Express the value relative to ground.



$VerticalCoupling

String

Sets the coupling mode. Allowable values are:

· "AC"

· "DC"

· "GROUND"



$ProbeAttenuation

Float

Passes the scaling factor by which the probe you attach to the channel attenuates the input. For example, when you use a 10:1 probe, set this parameter to 10.0.



$ChannelEnabled

Boolean

Specifies whether you want the oscillscope to acquire a waveform for the channel when you call the read measurement function.





Return parameters



Parameter

Variable Type

Description



None





Example(s):





TEKDPO4K_ConfigureChannel($Handle,"CH1",10.0,0,"GROUND",1.0,"TRUE");





TEKDPO4K_ConfigureChannelCharacteristics

Previous Top Next



* * *



TEKDPO4K_ConfigureChannelCharacteristics



Usage:

TEKDPO4K_ConfigureChannelCharacteristics($Handle,$ChannelName,$InputImpedance,MaxInputFrequency);



Description:



This function configures the electrical characteristics of the channel subsystem for a particular channel. These attributes are the input impedance, and channel bandwidth.





Requirements:

· This function requires the TekDPO4K IVI Driver as well as the National Instruments IVI Compliance Package to to be installed before using the instrument driver.

· This function requires NI-VISA version 3.5 or higher.



Function arguments



Parameter

Variable Type

Description



$Handle

Object

The handle of the instrument returned from the initialization function.



$ChannelName

String

The name of the channel to configure. Allowable values are:

· "CH1"

· "CH2"

· "CH3" (For 4 Channel Scopes)

· "CH4" (For 4 Channel Scopes)



$InputImpedance

Float

The input impedance of the channel measured in OHMS. Valid values are:

· 50

· 1000000





$MaxFrequency

Float

The maximum input frequency of the channel in Hertz. Any AC component above this frequency will be rolled off by a minimum of 3 Db.





Return parameters



Parameter

Variable Type

Description



None





Example(s):





TEKDPO4K_ConfigureChannelCharacteristics($Handle,"CH1",50,20000000);





TEKDPO4K_ConfigureEdgeTriggerSource

Previous Top Next



* * *



TEKDPO4K_ConfigureEdgeTriggerSource



Usage:

TEKDPO4K_ConfigureEdgeTriggerSource($Handle,$ChannelSource,$TriggerVolts,$TriggerSlope);



Description:



This function configures the edge trigger. An edge trigger occurs when the trigger signal passes through the voltage threshold that you specify with the trigger level parameter, and has the slope that you specify with the trigger slope parameter.





If the current trigger mode is not set to "EDGE" mode, then this function has no effect on the trigger operation.





Requirements:

· This function requires the TekDPO4K IVI Driver as well as the National Instruments IVI Compliance Package to to be installed before using the instrument driver.

· This function requires NI-VISA version 3.5 or higher.



Function arguments



Parameter

Variable Type

Description



$Handle

Object

The handle of the instrument returned from the initialization function.



$ChannelSource

Integer

The name of the channel to use for a trigger. Allowable values are:

· "CH1"

· "CH2"

· "CH3" (For 4 Channel Scopes)

· "CH4" (For 4 Channel Scopes)



$TriggerVoltage

Float

The trigger voltage threshold.



$TriggerSlope

String

The slope for the trigger. Allowable values are:

· "RISING"

· "FALLING"





Return parameters



Parameter

Variable Type

Description



None





Example(s):

TEKDPO4K_ConfigureEdgeTriggerSource($TekScope,"CH1","2.5","RISING");





TEKDPO4K_ConfigureInitiateContinuous

Previous Top Next



* * *



TEKDPO4K_ConfigureInitiateContinuous



Usage:

TEKDPO4K_ConfigureInitiateContinuous($Handle,$Enabled);



Description:

This function configures the oscilloscope to perform a continuous acquisition.



Function arguments



Parameter

Variable Type

Description



$Handle

Object

The handle of the instrument returned from the initialization function.



$Enabled

Boolean

If this variable is set to true, the scope will acquire continuously, otherwise the scope is set to the idle mode.





Return parameters



Parameter

Variable Type

Description



None





Example(s):

TEKDPO4K_ConfigureInitiateContinuous($Handle,"TRUE");





TEKDPO4K_ConfigureNumAverages

Previous Top Next



* * *



TEKDPO4K_ConfigureNumAverages



Usage:

TEKDPO4K_ConfigureNumAverages($Handle,$NumAverages);



Description:



This function configures the number of waveforms that the oscilloscope acquires and averages. After the oscilloscope acquires as many waveforms as you specify, it returns to the idle state.





This function only takes affect if the acquisition mode of the scope is set to "Averaging".





Requirements:

· This function requires the TekDPO4K IVI Driver as well as the National Instruments IVI Compliance Package to to be installed before using the instrument driver.

· This function requires NI-VISA version 3.5 or higher.



Function arguments



Parameter

Variable Type

Description



$Handle

Object

The handle of the instrument returned from the initialization function.



$NumAverages

Integer

The number of samples to average. This must be a power of 2 value between 2 and 512 (ex. 2,4,8,16...etc)





Return parameters



Parameter

Variable Type

Description



None





Example(s):

TEKDPO4K_ConfigureNumAverages($TekScope,256);





TEKDPO4K_ConfigureReferenceLevels

Previous Top Next



* * *



TEKDPO4K_ConfigureReferenceLevels



Usage:

TEKDPO4K_ConfigureReferenceLevels($Handle,$LowRefLevel,$MidRefLevel,$HighRefLevel);



Description:



This function configures the reference levels for waveform measurements. You must call this function before you call the TEKDPO4K_ReadWaveFormMeasurement function if you want to measure rise time, fall time, width negative, width positive, duty cycle negative, or duty cycle positive parameters.





Requirements:

· This function requires the TekDPO4K IVI Driver as well as the National Instruments IVI Compliance Package to to be installed before using the instrument driver.

· This function requires NI-VISA version 3.5 or higher.



Function arguments



Parameter

Variable Type

Description



$Handle

Object

The handle of the instrument returned from the initialization function.



$LowRefLevel

Float

The low reference level percentage you want the scope to use for waveform measurements.



$MidRefLevel

Float

The middle reference level percentage you want the scope to use for waveform measurements.



$HighRefLevel

Float

The high reference level percentage you want the scope to use for waveform measurements.





Return parameters



Parameter

Variable Type

Description



None





Example(s):

TEKDPO4K_ConfigureReferenceLevels($Handle,10,50,75);





TEKDPO4K_ConfigureTrigger

Previous Top Next



* * *



TEKDPO4K_ConfigureTrigger



Usage:

TEKDPO4K_ConfigureTrigger($Handle,$TriggerType,$TriggerHoldoff);



Description:



This function configures the common attributes of the trigger subsystem. These attributes are the trigger type and holdoff.



When you call tkdpo4k_ReadWaveform, tkdpo4k_ReadWaveformMeasurement, tkdpo4k_ReadMinMaxWaveform, or tkdpo4k_InitiateAcquisition, the oscilloscope waits for a trigger. You specify the type of trigger for which the oscilloscope waits with the Trigger Type parameter.



If the oscilloscope requires multiple waveform acquisitions to build a complete waveform, it waits for the length of time you specify with the Holdoff parameter to elapse since the previous trigger. The oscilloscope then waits for the next trigger. Once the oscilloscope acquires a complete waveform, it returns to the Idle state.



Note: After you call this function, you must call the trigger configuration function that corresponds to the Trigger Type you select to completely specify the trigger. For example, if you set the Trigger Type to TKDPO4K_VAL_EDGE_TRIGGER, you use the tkdpo4k_ConfigureEdgeTriggerSource function to completely specify the trigger.





Requirements:

· This function requires the TekDPO4K IVI Driver as well as the National Instruments IVI Compliance Package to to be installed before using the instrument driver.

· This function requires NI-VISA version 3.5 or higher.



Function arguments



Parameter

Variable Type

Description



$Handle

Object

The handle of the instrument returned from the initialization function.



$TriggerType

String

The trigger type to use. Allowable values are:

· "EDGE"

· "AC_LINE"

· "TV"

· "RUNT"

· "GLITCH"

· "TRANSITION"

· "PATTERN"

· "STATE"

· "SETHOLD"

· "CAN"

· "I2C"

· "SPI"



$TriggerHoldOff

Float

The length of time that you want the oscilloscope to wait after it detects a trigger until the oscilloscope enables the trigger subsystem to detect another trigger.





Return parameters



Parameter

Variable Type

Description



None





Example(s):

TEKDPO4K_ConfigureTrigger($TekScope","EDGE",0.00001);





TEKDPO4K_ConfigureTriggerModifier

Previous Top Next



* * *



TEKDPO4K_ConfigureTriggerModifier



Usage:

TEKDPO4K_ConfigureTriggerMode($Handle,$TriggerModifier);



Description:



This function configures the oscilloscope trigger modifier. The allowable values are "NONE" and "AUTO".





Requirements:

· This function requires the TekDPO4K IVI Driver as well as the National Instruments IVI Compliance Package to to be installed before using the instrument driver.

· This function requires NI-VISA version 3.5 or higher.



Function arguments



Parameter

Variable Type

Description



$Handle

Object

The handle of the instrument returned from the initialization function.



$TriggerModifier

String

The trigger modifier to apply to the trigger settings:

· "NONE" = The Trigger Mode is set to Normal

· "AUTO" = The Trigger Mode is set to Auto Triggering (continuous acquisition)





Return parameters



Parameter

Variable Type

Description



None





Example(s):

TEKDPO4K_ConfigureTriggerModifier($Handle,”NONE”);





TEKDPO4K_Init

Previous Top Next



* * *



TEKDPO4K_Init



Usage:

$Handle = TEKDPO4K_Init($resourceName, $resetDevice);



Description:

This function opens and optionally resets the instrument for communication.



Notes:

· These functions work with the Tektronix 2k, 3k and 4k series oscilloscopes.





Requirements:

· This function requires the TekDPO4K IVI Driver as well as the National Instruments IVI Compliance Package to to be installed before using the instrument driver.

· This function requires NI-VISA version 3.5 or higher.



Function arguments



Parameter

Variable Type

Description



$resourceName

String

Specifies the resource name of the device to initialize.



$resetDevice

Boolean

Specify whether you want to reset the device during the initialization procedure.

Valid values :

True : Reset the device.

False : Do not reset the device.





Return parameters



Parameter

Variable Type

Description



$Handle

Object

Returns a session handle that you can use to identify the device in all subsequent function calls.





Example(s):

$Handle = TEKDPO4K_Init("GPIB0::0:Instr","TRUE");





TEKDPO4K_ReadDelayMeasurement

Previous Top Next



* * *



TEKDPO4K_ReadDelayMeasurement



Usage:

$Measurement = TEKDPO4K_ReadDelayMeasurement($Handle,$ChannelFrom,$ChannelTo);



Description:



This function initiates an acquisition on the channels that you enable with the ConfigureChannel function. It then waits for the acquisition to complete, obtains a waveform measurement on the channel you specify, and returns the measurement value. This function returns the measured delay from one channel to another as specified in the function arguments.



Notes:



(1) You must configure the appropriate reference levels and trigger level before you call this function.





Requirements:

· This function requires the TekDPO4K IVI Driver as well as the National Instruments IVI Compliance Package to to be installed before using the instrument driver.

· This function requires NI-VISA version 3.5 or higher.



Function arguments



Parameter

Variable Type

Description



$Handle

Object

The handle of the instrument returned from the initialization function.



$ChannelFrom

String

The name of the channel to measure from. Allowable values are:

· "CH1"

· "CH2"

· "CH3" (For 4 Channel Scopes)

· "CH4" (For 4 Channel Scopes)

· "REF1" Reference 1

· "REF2" Reference 2

· "REF3" Reference 3

· "REF4" Reference 4

· "MATH" Math



$ChannelTo

String

The name of the channel to measure to. Allowable values are:

· "CH1"

· "CH2"

· "CH3" (For 4 Channel Scopes)

· "CH4" (For 4 Channel Scopes)

· "REF1" Reference 1

· "REF2" Reference 2

· "REF3" Reference 3

· "REF4" Reference 4

· "MATH" Math





Return parameters



Parameter

Variable Type

Description



$Measurement

Float

The requested measurement.





Example(s):





$Measurement = TEKDPO4K_ReadDelayMeasurement($Handle,"CH1","CH2");





TEKDPO4K_ReadPhaseMeasurement

Previous Top Next



* * *



TEKDPO4K_ReadPhaseMeasurement



Usage:

$Measurement = TEKDPO4K_ReadPhaseMeasurement($Handle,$ChannelFrom,$ChannelTo);



Description:



This function initiates an acquisition on the channels that you enable with the ConfigureChannel function. It then waits for the acquisition to complete, obtains a waveform measurement on the channel you specify, and returns the measurement value. This function returns the measured phase difference from one channel to another as specified in the function arguments.



Notes:



(1) You must configure the appropriate reference levels and trigger level before you call this function.





Requirements:

· This function requires the TekDPO4K IVI Driver as well as the National Instruments IVI Compliance Package to to be installed before using the instrument driver.

· This function requires NI-VISA version 3.5 or higher.



Function arguments



Parameter

Variable Type

Description



$Handle

Object

The handle of the instrument returned from the initialization function.



$ChannelFrom

String

The name of the channel to measure from. Allowable values are:

· "CH1"

· "CH2"

· "CH3" (For 4 Channel Scopes)

· "CH4" (For 4 Channel Scopes)

· "REF1" Reference 1

· "REF2" Reference 2

· "REF3" Reference 3

· "REF4" Reference 4

· "MATH" Math



$ChannelTo

String

The name of the channel to measure to. Allowable values are:

· "CH1"

· "CH2"

· "CH3" (For 4 Channel Scopes)

· "CH4" (For 4 Channel Scopes)

· "REF1" Reference 1

· "REF2" Reference 2

· "REF3" Reference 3

· "REF4" Reference 4

· "MATH" Math





Return parameters



Parameter

Variable Type

Description



$Measurement

Float

The requested measurement.





Example(s):





$Measurement = TEKDPO4K_ReadPhaseMeasurement($Handle,"CH1","CH2");





TEKDPO4K_ReadWaveformData

Previous Top Next



* * *



TEKDPO4K_ReadWaveformData



Usage:

($ActualPoints,$InitialX,$XIncrement,$MeasureArray) = TEKDPO4K_ReadWaveformData($Handle,$ChannelName,$WaveFormSize,$MaxTimeOut)

Description:



This function initiates an acquisition on the channels that you enable with the ConfigureChannel function. It then waits for the acquisition to complete, and returns the raw waveform data sampled by the scope into a two dimensional array.





The first dimension of the array contains the X (Time) coordinates of the sampled data, whereas the second dimension of the array contains the Y (Voltage) coordinates of the sampled data.





If the number of requested sample points can't be aquired in the time duration specified by the $MaxTimeOut parameter, the function will return a failure.



Notes:

The data contained in the returned two dimension array can be accessed and manipulated by using the functions contained the Array function library.





Special Notes:

The NI instrument driver that this function uses is not compatible with the Agilent IO Library USB driver due to a bug in the way it handles the NI VISA LOCK STATE... if you are using the Oscilloscope via USB and have the Agilent IO Libraries installed, you'll need to use the TekDPO4K_ReadWaveformDataRaw command to access this functionality.





Requirements:

· This function requires the TekDPO4K IVI Driver as well as the National Instruments IVI Compliance Package to to be installed before using the instrument driver.

· This function requires NI-VISA version 3.5 or higher.



Function arguments



Parameter

Variable Type

Description



$Handle

Object

The handle of the instrument returned from the initialization function.



$ChannelName

String

The name of the channel to configure. Allowable values are:

· "CH1"

· "CH2"

· "CH3" (For 4 Channel Scopes)

· "CH4" (For 4 Channel Scopes)

· "REF1" Reference 1

· "REF2" Reference 2

· "REF3" Reference 3

· "REF4" Reference 4

· "MATH" Math



$WaveformSize

Integer

The desired number of points to sample



$MaxTimeout

Integer

The timeout in milliseconds to wait for the measurement sample acquisition to complete before failing.





Return parameters



Parameter

Variable Type

Description



$ActualPoints

Integer

The number of actual points that were sampled during the requested operation.



$InitialX

Float

The initial X starting point for the data contained in the array. (X is time based data)



$XIncrement

Float

The time increment in seconds between each sample of X.



$MeasureArray

Array

This variable contains a two-dimension array of Floating point numbers specifying the time and voltage dimensions in seconds, and volts respectively.





Example(s):





$Scope = TEKDPO4K_Init("USB0::0x0699::0x0401::C020195::INSTR","TRUE");

TEKDPO4K_AutoSetup($Scope);

Sleep(2);

($NumSamples,$InitialX,$XIncrement,$MeasureArray) = TEKDPO4K_ReadWaveformData($Scope,"CH1",15000,1000);

UpdateStatus($NumSamples);

UpdateStatus($InitialX);

UpdateStatus($XIncrement);

UpdateStatus($MeasureArray);





TEKDPO4K_ReadWaveFormDataRaw

Previous Top Next



* * *



TEKDPO4K_ReadWaveformDataRaw



Usage:

($InitialX,$XIncrement,$MeasureArray) = TEKDPO4K_ReadWaveformDataRaw($Handle,$ChannelName,$WaveFormSize)

Description:



This function initiates an acquisition on the channels that you enable with the ConfigureChannel function. It then waits for the acquisition to complete, and returns the raw waveform data sampled by the scope into a two dimensional array.





The first dimension of the array contains the X (Time) coordinates of the sampled data, whereas the second dimension of the array contains the Y (Voltage) coordinates of the sampled data.



Notes:

The data contained in the returned two dimension array can be accessed and manipulated by using the functions contained the Array function library.





Special Notes:

This function is a re-implementation of the TEKDPO4K_ReadWaveformData command. This version of the function uses raw SCPI commands instead of the National Instruments driver provided for this instrument. This function was added due to a compatibility problem with the Agilent IO Library which prevents this function from operating correctly when the Agilent IO library is installed alongside of the NI VISA stack. If the Agilent IO Libraries aren't installed on your tester, you should use the TEKDPO4K_ReadWaveformData instead due to the enhanced error checking provided by the high-level instrument driver.





Requirements:

· This function requires the TekDPO4K IVI Driver as well as the National Instruments IVI Compliance Package to to be installed before using the instrument driver.

· This function requires NI-VISA version 3.5 or higher.



Function arguments



Parameter

Variable Type

Description



$Handle

Object

The handle of the instrument returned from the initialization function.



$ChannelName

String

The name of the channel to configure. Allowable values are:

· "CH1"

· "CH2"

· "CH3" (For 4 Channel Scopes)

· "CH4" (For 4 Channel Scopes)

· "REF1" Reference 1

· "REF2" Reference 2

· "REF3" Reference 3

· "REF4" Reference 4

· "MATH" Math



$WaveformSize

Integer

The desired number of points to sample





Return parameters



Parameter

Variable Type

Description



$InitialX

Float

The initial X starting point for the data contained in the array. (X is time based data)



$XIncrement

Float

The time increment in seconds between each sample of X.



$MeasureArray

Array

This variable contains a two-dimension array of Floating point numbers specifying the time and voltage dimensions in seconds, and volts respectively.





Example(s):





$Scope = TEKDPO4K_Init("USB0::0x0699::0x0401::C020195::INSTR","TRUE");

TEKDPO4K_AutoSetup($Scope);

Sleep(2);

($InitialX,$XIncrement,$MeasureArray) = TEKDPO4K_ReadWaveformDataRaw($Scope,"CH1",15000);

UpdateStatus($InitialX);

UpdateStatus($XIncrement);

UpdateStatus($MeasureArray);





TEKDPO4K_ReadWaveformMeasurement

Previous Top Next



* * *



TEKDPO4K_ReadWaveformMeasurement



Usage:

$Measurement = TEKDPO4K_ReadWaveformMeasurement($Handle,$ChannelName,$MeasurementFunction,$MaximumTimeout);



Description:



This function initiates an acquisition on the channels that you enable with the ConfigureChannel function. It then waits for the acquisition to complete, obtains a waveform measurement on the channel you specify, and returns the measurement value. You specify a particular

measurement type, such as rise time, frequency, and voltage peak-to-peak.



Notes:



(1) You must configure the appropriate reference levels before you call this function to take a rise time, fall time, width negative, width positive, duty cycle negative, or duty cycle positive measurement.





Requirements:

· This function requires the TekDPO4K IVI Driver as well as the National Instruments IVI Compliance Package to to be installed before using the instrument driver.

· This function requires NI-VISA version 3.5 or higher.



Function arguments



Parameter

Variable Type

Description



$Handle

Object

The handle of the instrument returned from the initialization function.



$ChannelName

String

The name of the channel to configure. Allowable values are:

· "CH1"

· "CH2"

· "CH3" (For 4 Channel Scopes)

· "CH4" (For 4 Channel Scopes)

· "REF1" Reference 1

· "REF2" Reference 2

· "REF3" Reference 3

· "REF4" Reference 4

· "MATH" Math



$MeasurementFunction

String

The measurement function to perform:

· "RISETIME";

· "FALLTIME"

· "FREQUENCY"

· "PERIOD"

· "VOLTAGE_RMS"

· "VOLTAGE_P2P"

· "VOLTAGE_MAX"

· "VOLTAGE_MIN"

· "VOLTAGE_HIGH"

· "VOLTAGE_LOW"

· "VOLTAGE_AVERAGE"

· "WIDTH_NEGATIVE"

· "WIDTH_POSITIVE"

· "DUTYCYCLE_NEGATIVE"

· "DUTYCYCLE_POSITIVE"

· "AMPLITUDE"

· "VOLTAGE_CYCLE_RMS"

· "VOLTAGE_CYCLE_AVERAGE"

· "POSITIVE_OVERSHOOT"

· "NEGATIVE_OVERSHOOT"

· "TIMING BURST WIDTH"

· "AREA"

· "CYCLE_AREA"

· "CROSS_NEGATIVE"

· "CROSS_POSITIVE"



$MaximumTimeout

Integer

The timeout in milliseconds to wait for the measurement to complete before failing.





Return parameters



Parameter

Variable Type

Description



$Measurement

Float

The requested measurement.





Example(s):





$Measurement = TEKDPO4K_ReadWaveFormMeasurement($Handle,"CH1","FREQUENCY",1000);





TEKDPO4K_SendCommand

Previous Top Next



* * *



TEKDPO4K_SendCommand



Usage:

TEKDPO4K_SendCommand($Handle,$Command);



Description:



This function passes a raw SCPI command to to the instrument to control functionality that isn't exposed via the device driver.

NOTE: This function validates that the command was sent and received by the instrument successfully, but it doesn't validate that the command sent was valid, or processed successfully.





Requirements:

· This function requires the TekDPO4K IVI Driver as well as the National Instruments IVI Compliance Package to to be installed before using the instrument driver.

· This function requires NI-VISA version 3.5 or higher.



Function arguments



Parameter

Variable Type

Description



$Handle

Object

The handle of the instrument returned from the initialization function.





Return parameters



Parameter

Variable Type

Description



None





Example(s):

TEKDPO4K_SendCommand($Handle,”TRIGGER:A:MODE NORMAL”);





TEKDPO4K_SetVerticalScale

Previous Top Next



* * *



TEKDPO4K_SetVerticalScale



Usage:

TEKDPO4K_SetVerticalScale($Handle,$ChannelName,$VerticalScale);



Description:



This function allows configuring the vertical scale of the specified channel to any arbitrary value. The TEKDPO4K_ConfigureChannel function will only set the vertical scale to default increments.





Requirements:

· This function requires the TekDPO4K IVI Driver as well as the National Instruments IVI Compliance Package to to be installed before using the instrument driver.

· This function requires NI-VISA version 3.5 or higher.



Function arguments



Parameter

Variable Type

Description



$Handle

Object

The handle of the instrument returned from the initialization function.



$ChannelName

String

The name of the channel to configure. Allowable values are:

· "CH1"

· "CH2"

· "CH3" (For 4 Channel Scopes)

· "CH4" (For 4 Channel Scopes)



$VerticalScale

Float

The desired value of the vertical scale for the specified channel (specified in Volts).





Return parameters



Parameter

Variable Type

Description



None





Example(s):

TEKDPO4K_SetVerticalScale($Handle,"CH1",3);

TEKDPO4K_ConfigureChannel($Handle,"CH1",10.0,0,"GROUND",1.0,"TRUE");





TDS2012_Abort

Previous Top Next



* * *



TDS2012_Abort



Usage:

$status = TDS2012_Abort($TDS2012_handle)





Description:





This function aborts an acquisition and returns the oscilloscope to the Idle state. You initiate an acquisition with the TDS2012_ReadWaveformMeasurement, and TDS2012_InitiateAcquisition functions.



Function arguments



Parameter

Variable Type

Description



$TDS2012B_handle

Object

Handle created by the TDS2012_Initialize() function used in all subsequent driver calls.





Return parameters



Parameter

Variable Type

Description



$status

Integer

returns 0 (zero) if no errors





TDS2012_AcquisitionStatus

Previous Top Next



* * *



TDS2012_AcquisitionStatus



Usage:

($status,$acquisitionStatus) = TDS2012_AcquisitionStatus($TDS2012_handle)





Description:





This function returns whether an acquisition is in progress, complete, or if the status is unknown.



Function arguments



Parameter

Variable Type

Description



$TDS2012B_handle

Object

Handle created by the TDS2012_Initialize() function used in all subsequent driver calls.





Return parameters



Parameter

Variable Type

Description



$status

Integer

returns 0 (zero) if no errors



$acquisitionStatus

String

Valid values are as follows:

“ACQUIRING” - currently acquiring a waveform.

“COMPLETED” - acquisition is complete.

“UNKNOWN” - cannot determine the status of the acquisition.





TDS2012_AutoSetup

Previous Top Next



* * *



TDS2012_AutoSetup



Usage:

$status = TDS2012_AutoSetup($TDS2012B_handle)





Description:





Automatically configures the instrument.





Function arguments



Parameter

Variable Type

Description



$TDS2012B_handle

Object

Handle created by the TDS2012_Initialize() function used in all subsequent driver calls.





Return parameters



Parameter

Variable Type

Description



$status

Integer

returns 0 (zero) if no errors





TDS2012_ChannelDisable

Previous Top Next



* * *



TDS2012_ChannelDisable



Usage:

$status = TDS2012_ChannelDisable($TDS2012_handle, $channelName)





Description:





Disables the selected channel.





Function arguments



Parameter

Variable Type

Description



$TDS2012B_handle

Object

Handle created by the TDS2012_Initialize() function used in all subsequent driver calls.



$channelName

String

The channel name you want to disable:

· “CH1” – channel 1

· “CH2” – channel 2





Return parameters



Parameter

Variable Type

Description



$status

Integer

returns 0 (zero) if no errors





TDS2012_ChannelEnable

Previous Top Next



* * *



TDS2012_ChannelEnable



Usage:

$status = TDS2012_ChannelEnable($TDS2012_handle, $channelName)





Description:





Enables the selected channel.





Function arguments



Parameter

Variable Type

Description



$TDS2012B_handle

Object

Handle created by the TDS2012_Initialize() function used in all subsequent driver calls.



$channelName

String

The channel name you want to enable:

· “CH1” – channel 1

· “CH2” – channel 2





Return parameters



Parameter

Variable Type

Description



$status

Integer

returns 0 (zero) if no errors





TDS2012_Close

Previous Top Next



* * *



TDS2012_Close



Usage:

TDS2012_Close($TDS2012_handle)





Description:





Closes the instrument IO session. After calling TDS2012_Close(), you cannot use the instrument again until you call TDS2012_Initialize().





Function arguments



Parameter

Variable Type

Description



$TDS2012B_handle

Object

Handle created by the TDS2012_Initialize() function used in all subsequent driver calls.





Return parameters



Parameter

Variable Type

Description



None

-

-





TDS2012_ConfigureAcquisitionType

Previous Top Next



* * *



TDS2012_ConfigureAcquisitionType



Usage:

$status = TDS2012_ConfigureAcquisitionType($TDS2012_handle, $acquisitionType)





Description:





This function configures how the oscilloscope acquires data and fills the waveform record.





Function arguments



Parameter

Variable Type

Description



$TDS2012B_handle

Object

Handle created by the TDS2012_Initialize() function used in all subsequent driver calls.



$acquisitionType

String

· “NORMAL” – set to normal acquisition mode.

· “AVERAGE” - Sets the oscilloscope to the average acquisition mode. The oscilloscope acquires multiple waveforms and calculates an average value for each point in the waveform record. You specify the number of waveforms the oscilloscope acquires with the TDS2012_ConfigureNumAverages().





Return parameters



Parameter

Variable Type

Description



$status

Integer

returns 0 (zero) if no errors





TDS2012_ConfigureChannel

Previous Top Next



* * *



TDS2012_ConfigureChannel



Usage:

$status = TDS2012_ConfigureChannel($TDS2012_handle, $channelName, $verticalRange, $verticalOffset, $verticalCoupling, $probeAttenutation, $channelEnable)





Description:





This function configures the common attributes of the oscilloscope's channel subsystem for a particular channel.





Function arguments



Parameter

Variable Type

Description



$TDS2012B_handle

Object

Handle created by the TDS2012_Initialize() function used in all subsequent driver calls.



$channelName

String

The channel name you want to configure:

· “CH1” – channel 1

· “CH2” – channel 2



$verticalRange

Float

The value of the input range the oscilloscope uses for the channel. For example, to acquire a sine wave that spans between -10.0 and 10.0 volts, pass 20.0 as the value of this parameter.





Units: volts

Valid Range: The probe attenuation determines the valid range for this parameter.

The valid range is as follows:

(20e-3 * PA) to (50 * PA) volts

Where 'PA' is probe attenuation.

Resolution: The driver coerces the value you specify to a 1-2-5 step.

Example Ranges:

X1 Probe:

20.0e-3 to 50.0 volts

X10 Probe:

200.0e-3 to 500 volts

X100 Probe:

2.0 to 5000 volts



$verticalOffset

Float

Pass the location of the center of the range that you specify with the Vertical Range parameter. Express the value relative to ground. Units: volts (usually set to 0.0)





$verticalCoupling

String

Specify how you want the oscilloscope to couple the input signal for the channel. Valid values are as follows:

· "AC"

· "DC"

· "GROUND"



$probeAttenuation

String

The scaling factor by which the probe you attach to the channel attenuates the input.

Valid Values:

· “1X“ - Sets the manual probe attenuation to 1.0.

· “10X” - Sets the manual probe attenuation to 10.0.

· “100X” - Sets the manual probe attenuation to 100.0.



$channelEnable

Boolean

Valid values are "TRUE" or "FALSE".

Specify whether you want the oscilloscope to acquire a waveform or measurement for the channel when you call the TDS2012_InitiateAcquisition().





Return parameters



Parameter

Variable Type

Description



$status

Integer

returns 0 (zero) if no errors





TDS2012_ConfigureNumAverages

Previous Top Next



* * *



TDS2012_ConfigureNumAverages



Usage:

$status – TDS2012_ConfigureNumAverages($TDS2012_handle, $numAverages)





Description:





This function configures the number of waveforms that the oscilloscope acquires and averages.



Function arguments



Parameter

Variable Type

Description



$TDS2012B_handle

Object

Handle created by the TDS2012_Initialize() function used in all subsequent driver calls.



$numAverages

Integer

The number of waveforms you want the oscilloscope to acquire and to average. Valid values are: 4, 16, 64, 128.





Return parameters



Parameter

Variable Type

Description



$status

Integer

returns 0 (zero) if no errors





TDS2012_ConfigureRefLevels

Previous Top Next



* * *



TDS2012_ConfigureRefLevels



Usage:

$status = TDS2012_ConfigureRefLevels($TDS2012B_handle, $proximal, $mesial, $distal)





Description:





Sets the reference levels on the waveform to make the measurements.



Function arguments



Parameter

Variable Type

Description



$TDS2012B_handle

Object

Handle created by the TDS2012_Initialize() function used in all subsequent driver calls.



$proximal

Integer

Value normally set to 10 which sets the reference to 10% of the lower endpoint of the waveform.



$mesial

Integer

Value normally set to 50 which sets the reference to 50% of the midpoint of the waveform.



$distal

Integer

Value normally set to 90 which set the reference to 90% of the upper endpoint of the waveform.





Return parameters



Parameter

Variable Type

Description



$status

Integer

returns 0 (zero) if no errors.





TDS2012_FetchWaveformMeasurement

Previous Top Next



* * *



TDS2012_FetchWaveformMeasurement



Usage:

($status,$measurement) =

TDS2012_FetchWaveformMeasurement($TDS2012B_handle, $channel, $function)





Description:





Returns the measurement for the selected function.



Function arguments



Parameter

Variable Type

Description



$TDS2012B_handle

Object

Handle created by the TDS2012_Initialize() function used in all subsequent driver calls.



$channel

String

Selects the channel

· “CH1” = channel 1

· “CH2” for channel 2.



$function

String

Variable to select the measurement function as follows:

· “FREQUENCY”: The number of cycles that occur in one second.

· “PERIOD”: The time it takes for the first complete signal cycle to occur.

· “VRMS”: Obtains the true Root Mean Square voltage for one cycle of a periodic signal.

· “VPP”: The absolute difference between the maximum and minimum amplitudes.

· “VAVG”: Calculate the Arithmetic mean over the entire waveform.

· “RISE_TIME”: The time between 10% and 90% of the first rising edge of the waveform.

· “FALL_TIME”: The time between 90% and 10% of the first falling edge of the waveform.

· “WIDTH_POS”: The time between the first rising edge and the next falling edge at 50% of the waveform level.

· “WIDTH_NEG”: The time between the first falling edge and the next rising edge at 50% of the waveform level.

· “VMAX”: The maximum voltage.

· “VMIN”: The minimum voltage.





Return parameters



Parameter

Variable Type

Description



$status

Integer

returns 0 (zero) if no errors.



$measurement

Float

Returns the measured value.





TDS2012_Initialize

Previous Top Next



* * *



TDS2012_Initialize



Usage:

$TDS2012B_handle = TDS2012_Initialize($resourceName,$IDQuery, $resetDevice)





Description:





Creates a new IVI instrument driver session. .



Function arguments



Parameter

Variable Type

Description



$resourceName

String

Opens a session to the specified device using the interface and address you specify for the Resource Name parameter.



$IDQuery

Boolean

Valid values are "TRUE" or "FALSE".

If the ID Query parameter is set to “TRUE”, this function queries the instrument ID and checks that it is valid for this instrument driver."FALSE" does not check.



$resetDevice

Boolean

Valid values are "TRUE" or "FALSE".

If the Reset parameter is set to “TRUE”, this function resets the instrument to a known state. "FALSE" does not reset the device.





Return parameters



Parameter

Variable Type

Description



$TDS2012B_handle

Object

Returns a handle that you use to identify the instrument in all subsequent instrument driver function calls.





Example(s):

$TDS2012B_handle = TDS2012_Initialize("USB0::1689::871::C051871::0::INSTR","FALSE","TRUE");





TDS2012_InitiateAquisition

Previous Top Next



* * *



TDS2012_InitiateAcquisition



Usage:

$status = TDS2012_InitiateAcquisition($TDS2012_handle)





Description:





This function initiates a waveform acquisition. After you call this function, the oscilloscope leaves the Idle state and waits for a trigger. The oscilloscope acquires a waveform for each channel you have enabled with the TDS2012_ConfigureChannel().





Function arguments



Parameter

Variable Type

Description



$TDS2012B_handle

Object

Handle created by the TDS2012_Initialize() function used in all subsequent driver calls.





Return parameters



Parameter

Variable Type

Description



$status

Integer

returns 0 (zero) if no errors.





TDS2012_ReadWaveformMeasurement

Previous Top Next



* * *



TDS2012_ReadWaveformMeasurement



Usage:

($status,$measurement) =

TDS2012_ReadWaveformMeasurement($TDS2012B_handle, $channel, $function, $maxTime)





Description:





Returns the measurement for the selected function within an allocated time.





Function arguments



Parameter

Variable Type

Description



$TDS2012B_handle

Object

Handle created by the TDS2012_Initialize() function used in all subsequent driver calls.



$channel

String

Selects the channel

· “CH1” = channel 1

· “CH2” for channel 2.



$function

String

Variable to select the measurement function as follows:

· “FREQUENCY”: The number of cycles that occur in one second.

· “PERIOD”: The time it takes for the first complete signal cycle to occur.

· “VRMS”: Obtains the true Root Mean Square voltage for one cycle of a periodic signal.

· “VPP”: The absolute difference between the maximum and minimum amplitudes.

· “VAVG”: Calculate the Arithmetic mean over the entire waveform.

· “RISE_TIME”: The time between 10% and 90% of the first rising edge of the waveform.

· “FALL_TIME”: The time between 90% and 10% of the first falling edge of the waveform.

· “WIDTH_POS”: The time between the first rising edge and the next falling edge at 50% of the waveform level.

· “WIDTH_NEG”: The time between the first falling edge and the next rising edge at 50% of the waveform level.

· “VMAX”: The maximum voltage.

· “VMIN”: The minimum voltage.





$maxTime

Integer

The maximum length of time in which to allow the read waveform measurement operation to complete. Valid range is 0 – 5000 milliseconds. 5000 milliseconds is normal.





Return parameters



Parameter

Variable Type

Description



$status

Integer

returns 0 (zero) if no errors.



$measurement

Float

Returns the measured value.





TDS2012_SendSWTrigger

Previous Top Next



* * *



TDS2012_SendSWTrigger



Usage:

$status = TDS2012_SendSWTrigger($TDS2012_handle)





Description:





This function sends a command to trigger the oscilloscope.



Function arguments



Parameter

Variable Type

Description



$TDS2012B_handle

Object

Handle created by the TDS2012_Initialize() function used in all subsequent driver calls.





Return parameters



Parameter

Variable Type

Description



$status

Integer

returns 0 (zero) if no errors





TDS2012_SetBandwidthLimit

Previous Top Next



* * *





TDS2012_SetBandwidthLimit



Usage:

$status = TDS2012_SetBandwidthLimit($TDS2012_handle, $channelName, $bandwidthLimit)





Description:





Sets the bandwidth setting of the specified oscilloscope channel.





Function arguments



Parameter

Variable Type

Description



$TDS2012B_handle

Object

Handle created by the TDS2012_Initialize() function used in all subsequent driver calls.



$channelName

String

The channel name you want to configure:

? “CH1” - channel 1

? “CH2” - channel 2



$bandwidthLimit

Boolean

Status of the channel's bandwidth setting:

true - sets the channel bandwidth to 20 MHz.

false - sets the channel bandwidth to the full bandwidth of the

oscilloscope (100MHz).





Return parameters



Parameter

Variable Type

Description



$status

Integer

returns 0 (zero) if no errors





TDS2012_SetHorzScale

Previous Top Next



* * *



TDS2012_SetHorzScale



Usage:

$status = TDS2012_SetHorzScale($TDS2012_handle, $scale)



Description:





Sets the horizontal scale in s/div. The value will automatically be coerced to the next highest valid setting.





Example:





$status = TDS2012_SetHorzScale($TDSHandle, 7E-6);





Sets the scope to 10μs per division (next valid setting above 7μs/div). $status will be 0 on a successful run.





Function arguments



Parameter

Variable Type

Description



$TDS2012B_handle

Object

Handle created by the TDS2012_Initialize() function used in all subsequent driver calls.



$scale

Float

The horizontal time scale in seconds/division.





Return parameters



Parameter

Variable Type

Description



$status

Integer

returns 0 (zero) if no errors





TDS2012_SetTriggerLevel

Previous Top Next



* * *



TDS2012_SetTriggerLevel



Usage:

TDS2012_SetTriggerLevel($TDS2012B_handle, $TriggerLevel) ;



Description:

Sets the trigger voltage level.

Function arguments



Parameter

Variable Type

Description



$TDS2012B_handle

Object

Handle created by the TDS2012_Initialize() function used in all subsequent driver calls.



$TriggerLevel

Float

Specifies the desired trigger level in volts.





Return parameters



Parameter

Variable Type

Description



None





Usage Example:





TDS2012_SetTriggerLevel($Handle,4.25);





C152_Close

Previous Top Next



* * *



C152_Close



Usage:

C152_Close();





Description:

This function is used to close the C152 card and release its resources, and should be called at the end of the application.



Function arguments



Parameter

Variable Type

Description



None.





Return parameters



Parameter

Variable Type

Description



None.





Example :

C152_Close();





C152_ConfigFromFile

Previous Top Next



* * *



C152_ConfigFromFile



Usage:

C152_ConfigFromFile();





Description:

This function is used to load the configuration of the C152 card from a configuration file. Use Adlink's Motion Creator program to test and configure the C152. After saving the configuration, the file will exist in the user's system directory as C152.ini.





Function arguments



Parameter

Variable Type

Description



None.





Return parameters



Parameter

Variable Type

Description



None.





Example

C152_Initial(0,0);

C152_ConfigFromFile();





C152_EmergencyStop

Previous Top Next



* * *



C152_EmergencyStop



Usage:

C152_EmergencyStop($AxisNo);





Description:

Immediately stop the axis.





NOTE:

· Stops the controller output to the axis. Motion may continue due to inertia of the motor.

Function arguments



Parameter

Variable Type

Description



$AxisNo

Integer

The axis to stop motion of.





Return parameters



Parameter

Variable Type

Description



None.





Example

C152_EmergencyStop(0);





C152_GetGpioInput

Previous Top Next



* * *



C152_GetGpioInput



Usage:

$digitalStatus = C152_GetGpioInput($iCardID);





Description:

The C152 has 4 digital input channels. This function will get the digital input status.



Function arguments



Parameter

Variable Type

Description



$iCardID

Integer

Card ID.





Return parameters



Parameter

Variable Type

Description



$digitalStatus

Integer

The digital status of the 4 digital input channels.





Example

$digitalStatus = C152_GetGpioInput(0);





C152_GetPosition

Previous Top Next



* * *



C152_GetPosition



Usage:

$fPos = C152_GetPosition($AxisNo);





Description:

Get the value of the feedback position counter.





Function arguments



Parameter

Variable Type

Description



$AxisNo

Integer

Axis Number.





Return parameters



Parameter

Variable Type

Description



$fPos

Float

Position Counter.





Example

$fPos = C152_GetPosition($AxisNo);





C152_Initial

Previous Top Next



* * *



C152_Initial



Usage:

C152_Initial($iCardID, $iManualID);





Description:

This function is used to initialize a C152 card without assigning the hardware resources. All C152 cards must be initialized by this function before calling other functions in the application. By setting the parameter “ iManual_ID”, the user can choose the type of ID that is assigned manually or automatic.





Function arguments



Parameter

Variable Type

Description



$iCardID

Integer

Card ID.



$iManualID

Integer

Manual ID.

0 = configure card automatically.





Return parameters



Parameter

Variable Type

Description



None.





Example:

C152_Initial(0,0);





C152_MotionDone

Previous Top Next



* * *



C152_MotionDone



Usage:

$motionStatus = C152_MotionDone($AxisNo);





Description:

This function returns the motion status of the specified axis of the C152. The return code is:

0 Normal stopped condition

1 Waiting for DR

2 Waiting for CSTA input

3 Waiting for an internal synchronous signal

4 Waiting for another axis to stop

5 Waiting for a completion of ERC timer

6 Waiting for a completion of direction change timer

7 Correcting backlash

8 Wait PA/PB

9 At FA speed

10 At FL speed

11 Accelerating

12 At FH speed

13 Decelerating

14 Wait INP

15 Others (Controlling Start)

16 SALM

17 SPEL

18 SMEL

19 SEMG

20 SSTP

21 SERC

Function arguments



Parameter

Variable Type

Description



$AxisNo

Integer

Axis Number.





Return parameters



Parameter

Variable Type

Description



$motionStatus

Integer

The motion status of the C152.





Example

$motionStatus = C152_MotionDone(0);





C152_SetPosition

Previous Top Next



* * *



C152_SetPosition



Usage:

C152_SetPosition($AxisNo, $Position);





Description:

This function is used to change the feedback position counter to the specified value.





NOTE:

· The value to be set will be scaled by the move ratio. If the move ratio is 0.5, the set value will be twice the given value.

Function arguments



Parameter

Variable Type

Description



$AxisNo

Integer

Axis Number.



$Position

Float

The number to set the feedback position counter to.





Return parameters



Parameter

Variable Type

Description



None.





Example

C152_SetPosition(0, 2000);





C152_SetTrMoveAll

Previous Top Next



* * *



C152_SetTrMoveAll



Usage:

C152_SetTrMoveAll($TotalAxes, $AxisArray, $DistanceArray, $StrVelArray, $MaxVelArray, $TaccArray, $TdecArray);





Description:

Sets up a simultaneous, multi-axis operation using trapezoidal profiles. All specified axes will be set to start and stop moving at the same time. The axes to move are specified in $AxisArray and the number of axes to move must be specified in $TotalAxes.





NOTE:

· $TotalAxes specifies the number of axes to move and the size of each of the arrays in the other parameters must equal $TotalAxes.

· This function only sets up the move parameters. The axes do not move until the function C152_StartMoveAll is run.

· The function C152_StopMoveAll is used to stop the motion of all the axes.

· To move only one axis at a time use C152_StartTrMove or C152_StartSrMove.





Function arguments



Parameter

Variable Type

Description



$TotalAxes

Integer

The number of axes to move simultaneously.



$AxisArray

Integer Array

The axes to be moved.



$DistanceArray

Float Array

The distance to move each axis.



$StrVelArray

Float Array

The starting velocity for each axis.



$MaxVelArray

Float Array

The constant velocity for each axis.



$TaccArray

Float Array

The acceleration time for each axis.



$TdecArray

Float Array

The deceleration time for each axis.





Return parameters



Parameter

Variable Type

Description



None.





Example

// Set up the Axis array to move axes 0, 2 and 3.

$AxisArray = Array1DCreate("INTEGER", 3);

Array1DSetValue($AxisArray, 0, 0);

Array1DSetValue($AxisArray, 1, 2);

Array1DSetValue($AxisArray, 2, 3);





// Set up the distance array.

$DistanceArray = Array1DCreate("FLOAT", 3);

Array1DSetValue($DistanceArray, 0, 2000);

Array1DSetValue($DistanceArray, 1, 500);

Array1DSetValue($DistanceArray, 2, 1200);





// Set up the starting velocity array.

$StrVelArray = Array1DCreate("FLOAT", 3);

Array1DSetValue($StrVelArray, 0, 8000);

Array1DSetValue($StrVelArray, 1, 8000);

Array1DSetValue($StrVelArray, 2, 8000);





// Set up the maximum (constant) velocity array.

$MaxVelArray = Array1DCreate("FLOAT", 3);

Array1DSetValue($MaxVelArray, 0, 25000);

Array1DSetValue($MaxVelArray, 1, 25000);

Array1DSetValue($MaxVelArray, 2, 25000);





// Set up the acceleration array.

$TaccArray = Array1DCreate("FLOAT", 3);

Array1DSetValue($TaccArray, 0, 0.2);

Array1DSetValue($TaccArray, 1, 0.2);

Array1DSetValue($TaccArray, 2, 0.2);





// Set up the deceleration array.

$TdecArray = Array1DCreate("FLOAT", 3);

Array1DSetValue($TdecArray, 0, 0.8);

Array1DSetValue($TdecArray, 1, 0.8);

Array1DSetValue($TdecArray, 2, 0.8);





// Tell the controller what we want to move.

C152_SetTrMoveAll(3, $AxisArray, $DistanceArray, $StrVelArray, $MaxVelArray, $TaccArray, $TdecArray);





C152_StartMoveAll

Previous Top Next



* * *



C152_StartMoveAll



Usage:

C152_StartMoveAll($FirstAxis);





Description:

Starts a simultaneous multi-axis operation.





NOTE:

· The multi-axis operation must have already been defined using C152_SetTrMoveAll.

· The function C152_StopMoveAll is used to stop the motion of all the axes.





Function arguments



Parameter

Variable Type

Description



$FirstAxis

Integer

The first axis in a previously set up multi-axis move.





Return parameters



Parameter

Variable Type

Description



None.





Example

C152_StartMoveAll(0);





C152_StartSrMove

Previous Top Next



* * *



C152_StartSrMove



Usage:

C152_StartSrMove($AxisNo, $Dist, $StrVel, $MaxVel, $Tacc, $Tdec, $STacc, $STdec);





Description:

Begin a relative S-curve profile move. This function causes the axis to accelerate from a starting velocity (StrVel), rotate at constant velocity (MaxVel), and decelerate to stop at the relative distance with an S-curve profile. The acceleration (Tacc) and deceleration (Tdec) time is specified independently.





NOTE:

· This function does not wait for motion completion, but immediately returns control to the program.





Function arguments



Parameter

Variable Type

Description



$AxisNo

Integer

Axis Number



$Dist

Float

Distance of the Move



$StrVel

Float

Starting Velocity



$MaxVel

Float

Constant Velocity



$Tacc

Float

Acceleration time



$Tdec

Float

Deceleration time



STacc

Float

S-Curve acceleration time



STdec

Float

S-Curve deceleration time





Return parameters



Parameter

Variable Type

Description



None.





Example:

// Set Motor from the place 0 to $Position, Start Velocity:8000, Maximum Velocity:25000

// Accel Time:0.2 , Decel Time: 0.8, S-Curve Accel Time: 0.4, S-Curve Decel Time: 0.6

C152_StartSrMove(0, $Postion, 8000, 25000, 0.2, 0.8, 0.4, 0.6);

C152_StopMoveAll(0);

// Wait for motor to come to a stop.

SleepMilliseconds(3000);





C152_StartTrMove

Previous Top Next



* * *



C152_StartTrMove



Usage:

C152_StartTrMove($AxisNo, $Dist, $StrVel, $MaxVel, $Tacc, $Tdec);





Description:

Begin a relative trapezoidal profile move. This function causes the axis to accelerate from a starting velocity (StrVel), rotate at constant velocity (MaxVel), and decelerate to stop at the relative distance with a trapezoidal profile. The acceleration (Tacc) and deceleration (Tdec) time is specified independently.





NOTE:

· This function does not wait for motion completion, but immediately returns control to the program.

· Velocity parameters are in pulses per second.

· Acceleration times are in seconds.





Function arguments



Parameter

Variable Type

Description



$AxisNo

Integer

Axis Number.



$Dist

Float

Distance of the Move



$StrVel

Float

Starting Velocity in pulses per second



$MaxVel

Float

Constant Velocity in pulses per second



$Tacc

Float

Acceleration time in seconds



$Tdec

Float

Deceleration time in seconds





Return parameters



Parameter

Variable Type

Description



None.





Example:

//Set Motor from the place 0 to $Position, Start Velocity:8000, Maximum Velocity:25000

// Accel Time:0.2 , Decel Time: 0.8

C152_StartTrMove(0,$Position, 8000, 25000, 0.2, 0.8);

C152_StopMoveAll(0);

// Wait for motor to come to a stop.

SleepMilliseconds(3000);





C152_StopMove

Previous Top Next



* * *



C152_StopMove



Usage:

C152_StopMove($AxisNo, $Tdec);





Description:

Decelerate the axis to stop.





NOTE:

· Stops the controller output to the axis. Motion may continue due to inertia of the motor.

Function arguments



Parameter

Variable Type

Description



$AxisNo

Integer

The axis to stop motion of.



$Tdec

Float

The deceleration time.





Return parameters



Parameter

Variable Type

Description



None.





Example

C152_StopMove(0, 0.8);





C152_StopMoveAll

Previous Top Next



* * *



C152_StopMoveAll



Usage:

C152_StopMoveAll($AxisNo);





Description:

Stop the axes.





NOTE:

· If a simultaneous multi-axis operation was defined using C152_SetTrMoveAll and started using C152_StartMoveAll this function will stop ALL axes from moving starting at $AxisNo.





Function arguments



Parameter

Variable Type

Description



$AxisNo

Integer

The first axis in a previously set up multi-axis move.





Return parameters



Parameter

Variable Type

Description



None.





Example

C152_StopMoveAll(0);





C154_Close

Previous Top Next



* * *



C154_Close



Usage:



C154_Close();





Description:





This function will close the C-154 card and release its resources. This should be called at the end of the test script.

Function arguments



Parameter

Variable Type

Description



None.





Return parameters



Parameter

Variable Type

Description



None.





Example:

C154_Close();





C154_ConfigFromFile

Previous Top Next



* * *



C154_ConfigFromFile



Usage:



C154_ConfigFromFile();





Description:





This function will load the MPC-154 configuration from file.





Note:

· The user should use the Adlink Motion Creator program to configure and test the MPC-154 card.

· The Motion Creator program will store the configuration in the system directory as C154.ini.

Function arguments



Parameter

Variable Type

Description



None.





Return parameters



Parameter

Variable Type

Description



None.





Example:

C154_Initial(0, 0);

C154_ConfigFromFile();





C154_EmgStop

Previous Top Next



* * *



C154_EmgStop



Usage:



C154_Initial($firstAxis);





Description:





This function will stop all motion on all axes starting from the specified one.





Note:

· Motion will stop when a preset move (trapezoidal or S-curve), manual move, or home return function is being performed.

Function arguments



Parameter

Variable Type

Description



$firstAxis

Integer

The number of the first axis to stop motion on. All succeeding axes will stop as well.





Return parameters



Parameter

Variable Type

Description



None.





Example:

C154_EmgStop(0);





C154_GetGpioInput

Previous Top Next



* * *



C154_GetGpioInput



Usage:





$digitalStatus = C154_GetGpioInput($iCardID);





Description:





The MPC-154 card has 4 digital input channels. This function will get the digital input status.

Function arguments



Parameter

Variable Type

Description



$iCardID

Integer

Card ID.





Return parameters



Parameter

Variable Type

Description



$digitalStatus

Integer

The digital status of the 4 digital input channels.





Example:

$digitalStatus = C154_GetGpioInput(0);





C154_GetIOStatus

Previous Top Next



* * *



C154_GetIOStatus



Usage:

$IOStatus = C154_GetIOStatus($axisNo);





Description:

This function will return the I/O status for the specified axis.





Note:

The I/O status is bit encoded according to the following table:

Bit

Name

Description



0

RDY

RDY pin input



1

ALM

Alarm signal



2

+EL

Positive Limit Switch



3

-EL

Negative Limit Switch



4

ORG

Origin Switch



5

DIR

DIR output



6

EMG

EMG status



7





8

ERC

ERC pin output



9

EZ

Index signal



10

CLR

Clear signal



11





12

SD

Slow Down signal input



13

INP

In-Position signal input



14

SVON

Servo-ON output status





Function arguments



Parameter

Variable Type

Description



$axusNo

Integer

Axis number to return the status of.





Return parameters



Parameter

Variable Type

Description



$IOStatus

Integer

The bit encoded status for the axis.





Example:

$status = C154_GetIOStatus(0);

// If the return is "0000000000000100" the Positive Limit switch is on.





C154_GetPosition

Previous Top Next



* * *



C154_GetPosition



Usage:

$positionCount = C154_GetPosition($axisNo);





Description:

This function will return the value of the feedback position counter for the specified axis.

Function arguments



Parameter

Variable Type

Description



$axisNo

Integer

The axis number to return the position counter of.





Return parameters



Parameter

Variable Type

Description



$positionCount

Integer

The value of the feedback position counter.





Example:

$axisNo = 0;

$positionCount = C154_GetPosition($axisNo);





C154_Initial

Previous Top Next



* * *



C154_Initial



Usage:



C154_Initial($cardID, $manualID);





Description:





This function will initialize a C-154 card without assigning any hardware resources. All C-154 cards must be initialized by this function before using any other functions.





Note:

· Setting $manulID selects whether the card's ID is assigned manually or automatically.

Function arguments



Parameter

Variable Type

Description



$cardID

Integer

The card ID that will be assigned if the selection if for manual ID.



$manualID

Integer

Specifies whether the card's ID is assigned automatically or manually.





Return parameters



Parameter

Variable Type

Description



$Handle

Object

Returns the handle to the instrument to use in following instrument control functions.





Example:

C154_Initial(0, 0);





C154_MotionDone

Previous Top Next



* * *



C154_MotionDone



Usage:

$motionStatus = C154_MotionDone($AxisNo);





Description:

This function returns the motion status of the specified axis of the MPC-154. The return code is:

0 Normal stopped condition

1 Waiting for DR

2 Waiting for CSTA input

3 Waiting for an internal synchronous signal

4 Waiting for another axis to stop

5 Waiting for a completion of ERC timer

6 Waiting for a completion of direction change timer

7 Correcting backlash

8 Wait PA/PB

9 At FA speed

10 At FL speed

11 Accelerating

12 At FH speed

13 Decelerating

14 Wait INP

15 Others (Controlling Start)

16 SALM

17 SPEL

18 SMEL

19 SEMG

20 SSTP

21 SERC

Function arguments



Parameter

Variable Type

Description



$AxisNo

Integer

Axis Number.





Return parameters



Parameter

Variable Type

Description



$motionStatus

Integer

The motion status of the C152.





Example:

$motionStatus = C154_MotionDone(0);





C154_SdStop

Previous Top Next



* * *



C154_SdStop



Usage:

C154_SdStop($AxisNo, $decelTime);





Description:

This function will cause the specified axis to decelerate to stop in the specified time.

Function arguments



Parameter

Variable Type

Description



$AxisNo

Integer

Axis Number to stop.



$decelTime

Float

The number of seconds to decelerate from current speed to stop.





Return parameters



Parameter

Variable Type

Description



None.





Example:

$axisNo = 0;

$decelTime = 0.2;

C152_SdStop($axisNo, $decelTime);





C154_SetPosition

Previous Top Next



* * *



C154_SetPosition



Usage:

C154_SetPosition($AxisNo, $Position);





Description:

This function is used to change the feedback position counter to the specified value.





NOTE:

· The value to be set will be scaled by the move ratio. If the move ratio is 0.5, the set value will be twice the given value.

Function arguments



Parameter

Variable Type

Description



$AxisNo

Integer

Axis Number.



$Position

Float

The number to set the feedback position counter to.





Return parameters



Parameter

Variable Type

Description



None.





Example

$axisNo = 0;

$positionVal = 2000;

C154_SetPosition($axisNo, $positionVal);





C154_SetTrMoveAll

Previous Top Next



* * *



C154_SetTrMoveAll



Usage:

C154_SetTrMoveAll($TotalAxes, $AxisArray, $DistanceArray, $StrVelArray, $MaxVelArray, $TaccArray, $TdecArray);





Description:

Sets up a simultaneous, multi-axis operation using trapezoidal profiles. All specified axes will be set to start and stop moving at the same time. The axes to move are specified in $AxisArray and the number of axes to move must be specified in $TotalAxes.





NOTE:

· $TotalAxes specifies the number of axes to move and the size of each of the arrays in the other parameters must equal $TotalAxes.

· This function only sets up the move parameters. The axes do not move until the function C154_StartMoveAll is run.

· The function C154_StopMoveAll is used to stop the motion of all the axes.

· To move only one axis at a time use C154_StartTrMove or C154_StartSrMove.





Function arguments



Parameter

Variable Type

Description



$TotalAxes

Integer

The number of axes to move simultaneously.



$AxisArray

Integer Array

The axes to be moved.



$DistanceArray

Float Array

The distance to move each axis.



$StrVelArray

Float Array

The starting velocity for each axis.



$MaxVelArray

Float Array

The constant velocity for each axis.



$TaccArray

Float Array

The acceleration time for each axis.



$TdecArray

Float Array

The deceleration time for each axis.





Return parameters



Parameter

Variable Type

Description



None.





Example:

// Set up the Axis array to move axes 0, 2 and 3.

$AxisArray = Array1DCreate("INTEGER", 3);

Array1DSetValue($AxisArray, 0, 0);

Array1DSetValue($AxisArray, 1, 2);

Array1DSetValue($AxisArray, 2, 3);





// Set up the distance array.

$DistanceArray = Array1DCreate("FLOAT", 3);

Array1DSetValue($DistanceArray, 0, 2000);

Array1DSetValue($DistanceArray, 1, 500);

Array1DSetValue($DistanceArray, 2, 1200);





// Set up the starting velocity array.

$StrVelArray = Array1DCreate("FLOAT", 3);

Array1DSetValue($StrVelArray, 0, 8000);

Array1DSetValue($StrVelArray, 1, 8000);

Array1DSetValue($StrVelArray, 2, 8000);





// Set up the maximum (constant) velocity array.

$MaxVelArray = Array1DCreate("FLOAT", 3);

Array1DSetValue($MaxVelArray, 0, 25000);

Array1DSetValue($MaxVelArray, 1, 25000);

Array1DSetValue($MaxVelArray, 2, 25000);





// Set up the acceleration array.

$TaccArray = Array1DCreate("FLOAT", 3);

Array1DSetValue($TaccArray, 0, 0.2);

Array1DSetValue($TaccArray, 1, 0.2);

Array1DSetValue($TaccArray, 2, 0.2);





// Set up the deceleration array.

$TdecArray = Array1DCreate("FLOAT", 3);

Array1DSetValue($TdecArray, 0, 0.8);

Array1DSetValue($TdecArray, 1, 0.8);

Array1DSetValue($TdecArray, 2, 0.8);





// Tell the controller what we want to move.

C154_SetTrMoveAll(3, $AxisArray, $DistanceArray, $StrVelArray, $MaxVelArray, $TaccArray, $TdecArray);





C154_StartMoveAll

Previous Top Next



* * *



C154_StartMoveAll



Usage:

C154_StartMoveAll($FirstAxis);





Description:

Starts a simultaneous multi-axis operation.





NOTE:

· The multi-axis operation must have already been defined using C154_SetTrMoveAll.

· The function C154_StopMoveAll is used to stop the motion of all the axes.





Function arguments



Parameter

Variable Type

Description



$FirstAxis

Integer

The first axis in a previously set up multi-axis move.





Return parameters



Parameter

Variable Type

Description



None.





Example:

C154_StartMoveAll(0);





C154_StartSrMove

Previous Top Next



* * *



C154_StartSrMove



Usage:

C154_StartSrMove($AxisNo, $Dist, $StrVel, $MaxVel, $Tacc, $Tdec, $STacc, $STdec);





Description:

Begin a relative S-curve profile move. This function causes the axis to accelerate from a starting velocity (StrVel), rotate at constant velocity (MaxVel), and decelerate to stop at the relative distance with an S-curve profile. The acceleration (Tacc) and deceleration (Tdec) time is specified independently.





NOTE:

· This function does not wait for motion completion, but immediately returns control to the program.

Function arguments



Parameter

Variable Type

Description



$AxisNo

Integer

Axis Number



$Dist

Float

Distance of the Move



$StrVel

Float

Starting Velocity



$MaxVel

Float

Constant Velocity



$Tacc

Float

Acceleration time



$Tdec

Float

Deceleration time



STacc

Float

S-Curve acceleration time



STdec

Float

S-Curve deceleration time





Return parameters



Parameter

Variable Type

Description



None.





Example:

// Set Motor from the place 0 to $Position, Start Velocity:8000, Maximum Velocity:25000

// Accel Time:0.2 , Decel Time: 0.8, S-Curve Accel Time: 0.4, S-Curve Decel Time: 0.6

C154_StartSrMove(0, $Postion, 8000, 25000, 0.2, 0.8, 0.4, 0.6);

C154_StopMoveAll(0);

// Wait for motor to come to a stop.

SleepMilliseconds(3000);





C154_StartTrMove

Previous Top Next



* * *



C154_StartTrMove



Usage:

C154_StartTrMove($AxisNo, $Dist, $StrVel, $MaxVel, $Tacc, $Tdec);





Description:

Begin a relative trapezoidal profile move. This function causes the axis to accelerate from a starting velocity (StrVel), rotate at constant velocity (MaxVel), and decelerate to stop at the relative distance with a trapezoidal profile. The acceleration (Tacc) and deceleration (Tdec) time is specified independently.





NOTE:

· This function does not wait for motion completion, but immediately returns control to the program.

· Velocity parameters are in pulses per second.

· Acceleration times are in seconds.

Function arguments



Parameter

Variable Type

Description



$AxisNo

Integer

Axis Number.



$Dist

Float

Distance of the Move



$StrVel

Float

Starting Velocity in pulses per second



$MaxVel

Float

Constant Velocity in pulses per second



$Tacc

Float

Acceleration time in seconds



$Tdec

Float

Deceleration time in seconds





Return parameters



Parameter

Variable Type

Description



None.





Example:

//Set Motor from the place 0 to $Position, Start Velocity:8000, Maximum Velocity:25000

// Accel Time:0.2 , Decel Time: 0.8

C154_StartTrMove(0, $Position, 8000, 25000, 0.2, 0.8);

C154_StopMoveAll(0);

// Wait for motor to come to a stop.

SleepMilliseconds(3000);





C154_StartTrMoveXY

Previous Top Next



* * *



C154_StartTrMoveXY



Usage:

C154_StartTrMoveXY($cardID, $DistX, $DistY, $strVel, $maxVel, $Tacc, $Tdec);





Description:

This function starts a relative 2-axis linear interpolation for X & Y with a trapezoidal profile





NOTE:

· This function does not wait for motion completion, but immediately returns control to the program.

· Velocity parameters are in pulses per second.

· Acceleration times are in seconds.

Function arguments



Parameter

Variable Type

Description



$cardID

Integer

The ID of the card to perform the move.



$DistX

Float

Distance of the Move of axis 0.



$DistY

Float

Distance of the Move of axis 1.



$strVel

Float

Starting Velocity.



$maxVel

Float

Constant velocity.



$Tacc

Float

Acceleration time in seconds.



$Tdec

Float

Deceleration time in seconds.





Return parameters



Parameter

Variable Type

Description



None.





Example:

//Set Motor from the place 0 to $PositionX, $PositionY, Start Velocity:8000, Maximum Velocity:25000

// Accel Time:0.2 , Decel Time: 0.8

C154_StartTrMove(0, $PositionX, $PositionY, 8000, 25000, 0.2, 0.8);

C154_StopMoveAll(0);

// Wait for motor to come to a stop.

SleepMilliseconds(3000);





C154_StopMoveAll

Previous Top Next



* * *



C154_StopMoveAll



Usage:

C154_StopMoveAll($AxisNo);





Description:

Stop movement in all axes, starting with the specified one.





NOTE:

· If a simultaneous multi-axis operation was started with C154_StartSrMove, C154_StartTrMove or defined using C154_SetTrMoveAll and started using C154_StartMoveAll this function will stop ALL axes from moving starting at $AxisNo.





Function arguments



Parameter

Variable Type

Description



$AxisNo

Integer

The first axis in a previously set up multi-axis move.





Return parameters



Parameter

Variable Type

Description



None.





Example:

C154_StopMoveAll(0);





C154_TestArray

Previous Top Next



* * *



C154_TestArray



Usage:

$Added = C154_TestArray($axisArray);





Description:

Adds the elements of the $axisArray.

Function arguments



Parameter

Variable Type

Description



$axisArray

Array

A one dimensional array of integers.





Return parameters



Parameter

Variable Type

Description



$Added

Integer

The sum of all of the elements in the array.





Example

C154_TestArray($axisArray);





Epos_ActivateHomingMode

Previous Top Next



* * *



Epos_ActivateHomingMode



Usage:

$ErrorCode = Epos_ActivateHomingMode($Handle,$NodeId);





Description:

This function activates the homing mode.





Result:

$ErrorCode = Epos_ActivateHomingMode($Handle,$NodeId);

Function arguments



Parameter

Variable Type

Description



$Handle

Integer

The handle of the opened device using the function Epos_OpenDevice



$NodeId

Integer

Node ID of the addressed device. ID is given from hardware switches or the layer setting services (LSS).





Return parameters



Parameter

Variable Type

Description



$ErrorCode

Integer

The result of the executed function.

When 0 is returned, no error is occurred.





Example(s):

$ErrorCode = Epos_ActivateHomingMode($Handle,1);





Epos_ActivatePositionMode

Previous Top Next



* * *



Epos_ActivatePositionMode



Usage:

$ErrorCode = Epos_ActivatePositionMode($Handle,$NodeId);





Description:

This function activates the position mode.





Result:

$ErrorCode = Epos_ActivatePositionMode($Handle,$NodeId);

Function arguments



Parameter

Variable Type

Description



$Handle

Integer

The handle of the opened device using the function Epos_OpenDevice



$NodeId

Integer

Node ID of the addressed device. ID is given from hardware switches or the layer setting services (LSS).





Return parameters



Parameter

Variable Type

Description



$ErrorCode

Integer

The result of the executed function.

When 0 is returned, no error is occurred.





Example(s):

$ErrorCode = Epos_ActivatePositionMode($Handle,1);





Epos_ClearFault

Previous Top Next



* * *



Epos_ClearFault



Usage:

$ErrorCode = Epos_ClearFault($Handle,$NodeId);





Description:

This function changes the device state from fault state to disable state.





Result:

$ErrorCode = Epos_ClearFault($Handle,$NodeId);

Function arguments



Parameter

Variable Type

Description



$Handle

Integer

The handle of the opened device using the function Epos_OpenDevice



$NodeId

Integer

Node ID of the addressed device. ID is given from hardware switches or the layer setting services (LSS).





Return parameters



Parameter

Variable Type

Description



$ErrorCode

Integer

The result of the executed function.

When 0 is returned, no error is occurred.





Example(s):

$ErrorCode = Epos_ClearFault($Handle,1);





Epos_CloseDevice

Previous Top Next



* * *



Epos_CloseDevice



Usage:

$ErrorCode = Epos_CloseDevice($Handle);





Description:

This function closes the opened port.





Result:

$ErrorCode = Epos_CloseDevice($Handle);

Function arguments



Parameter

Variable Type

Description



$Handle

Integer

The handle of the opened device using the function Epos_OpenDevice





Return parameters



Parameter

Variable Type

Description



$ErrorCode

Integer

The result of the executed function.

When 0 is returned, no error is occurred.





Example(s):

$ErrorCode = Epos_CloseDevice($Handle);





Epos_DigitalInputConfiguration

Previous Top Next



* * *



Epos_DigitalInputConfiguration



Usage:

$ErrorCode = Epos_DigitalInputConfiguration($Handle,$NodeId,$DigitalInputNb,$Configuration,$Mask,$Polarity,$ExecutionMask);





Description:

This function sets the parameter for one digital input.





Result:

$ErrorCode = Epos_DigitalInputConfiguration($Handle,$NodeId,$DigitalInputNb,$Configuration,$Mask,$Polarity,$ExecutionMask);

Function arguments



Parameter

Variable Type

Description



$Handle

Integer

The handle of the opened device using the function Epos_OpenDevice



$NodeId

Integer

Node ID of the addressed device. ID is given from hardware switches or the layer setting services (LSS).



$DigitalInputNb

Integer

Number of digital input



$Configuration

String

Configures which functionality will be assigned to digital input,

Possible values:

· DRIVE ENABLE

· GENERAL PURPOSE A

· GENERAL PURPOSE B

· GENERAL PURPOSE C

· GENERAL PURPOSE D

· GENERAL PURPOSE E

· GENERAL PURPOSE F

· GENERAL PURPOSE G

· GENERAL PURPOSE H

· GENERAL PURPOSE I

· GENERAL PURPOSE J

· HOME SWITCH

· NEGATIVE LIMIT SWITCH

· POSITION MARKER

· POSITIVE LIMIT SWITCH

· QUICK STOP



$Mask

Bool

If true, functionality state will be displayed. if false, not displayed.



$Polarity

Bool

If true, low active. If false, high active.



$ExecutionMask

Bool

If true, set the error routine (only for positive and negative switch).





Return parameters



Parameter

Variable Type

Description



$ErrorCode

Integer

The result of the executed function.

When 0 is returned, no error is occurred.





Example(s):

$ErrorCode = Epos_DigitalInputConfiguration($EposHandle,$Node,4,"HOME SWITCH",true,true,true);





Epos_FindHome

Previous Top Next



* * *



Epos_FindHome



Usage:

$ErrorCode = Epos_FindHome($Handle,$NodeId,$HomingMethod);





Description:

This function finds the home of your system.





Result:

$ErrorCode = Epos_FindHome($Handle,$NodeId,$HomingMethod);

Function arguments



Parameter

Variable Type

Description



$Handle

Integer

The handle of the opened device using the function Epos_OpenDevice



$NodeId

Integer

Node ID of the addressed device. ID is given from hardware switches or the layer setting services (LSS).



$HomingMethod

String

The homing method to be used.

Possible values:

· ACTUAL POSITION

· CURRENT THRESHOLD NEGATIVE SPEED

· CURRENT THRESHOLD NEGATIVE SPEED AND INDEX

· CURRENT THRESHOLD POSITIVE SPEED

· CURRENT THRESHOLD POSITIVE SPEED AND INDEX

· HOME SWITCH NEGATIVE SPEED

· HOME SWITCH NEGATIVE SPEED AND INDEX

· HOME SWITCH POSITIVE SPEED

· HOME SWITCH POSITIVE SPEED AND INDEX

· INDEX NEGATIVE SPEED

· INDEX POSITIVE SPEED

· NEGATIVE LIMIT SWITCH

· NEGATIVE LIMIT SWITCH AND INDEX

· POSITIVE LIMIT SWITCH

· POSITIVE LIMIT SWITCH AND INDEX





Return parameters



Parameter

Variable Type

Description



$ErrorCode

Integer

The result of the executed function.

When 0 is returned, no error is occurred.





Example(s):

$ErrorCode = Epos_FindHome($EposHandle,$Node,"HOME SWITCH POSITIVE SPEED");





Epos_GetErrorInfo

Previous Top Next



* * *



Epos_GetErrorInfo



Usage:

($ErrorCode,$ErrorString) = Epos_GetErrorInfo($ErrorCode);





Description:

This function returns the error information about the executed function from a received error code.





Result:

($ErrorCode,$ErrorString) = Epos_GetErrorInfo($ErrorCode);

Function arguments



Parameter

Variable Type

Description



$ErrorCode

Integer

The supplied error code to retrieve the error message.





Return parameters



Parameter

Variable Type

Description



$ErrorCode

Integer

The result of the executed function.

When 0 is returned, no error is occurred.



$ErrorString

String

Error string





Example(s):

($ErrorCode,$ErrorString) = Epos_GetErrorInfo($ErrorCode);





Epos_GetPositionIs

Previous Top Next



* * *



Epos_GetPositionIs



Usage:

($ErrorCode,$Position) = Epos_GetPositionIs($Handle,$NodeId);





Description:

This function returns the position actual value.





Result:

($ErrorCode,$Position) = Epos_GetPositionIs($Handle,$NodeId);

Function arguments



Parameter

Variable Type

Description



$Handle

Integer

The handle of the opened device using the function Epos_OpenDevice



$NodeId

Integer

Node ID of the addressed device. ID is given from hardware switches or the layer setting services (LSS).





Return parameters



Parameter

Variable Type

Description



$ErrorCode

Integer

The result of the executed function.

When 0 is returned, no error is occurred.



$Position

Integer

Position actual value





Example(s):

($ErrorCode,$Position) = Epos_GetPositionIs($Handle,$NodeId);





Epos_GetPositionMust

Previous Top Next



* * *



Epos_GetPositionMust



Usage:

($ErrorCode,$Position) = Epos_GetPositionMust($Handle,$NodeId);





Description:

This function returns the position demand value.





Result:

($ErrorCode,$Position) = Epos_GetPositionMust($Handle,$NodeId);

Function arguments



Parameter

Variable Type

Description



$Handle

Integer

The handle of the opened device using the function Epos_OpenDevice



$NodeId

Integer

Node ID of the addressed device. ID is given from hardware switches or the layer setting services (LSS).





Return parameters



Parameter

Variable Type

Description



$ErrorCode

Integer

The result of the executed function.

When 0 is returned, no error is occurred.



$Position

Integer

Position demand value





Example(s):

($ErrorCode,$Position) = Epos_GetPositionMust($Handle,$NodeId);





Epos_OpenDevice

Previous Top Next



* * *



Epos_OpenDevice



Usage:

($ErrorCode,$Handle) = Epos_OpenDevice($DeviceName,$ProtocolStackName,$InterfaceName,$PortName);





Description:

This function opens the port for sending and receiving commands. This function opens interfaces with the RS232, the USB and with CANopen boards.





Result:

($ErrorCode,$Handle) = Epos_OpenDevice($DeviceName,$ProtocolStackName,$InterfaceName,$PortName);

Function arguments



Parameter

Variable Type

Description



$DeviceName

String

The name of the connected device.

Allowed values:

· EPOS

· EPOS2



$ProtocolStackName

String

The name of used bus system.

Allowed values:

· MAXON_RS232

· MAXON SERIAL V2

· CANopen



$InterfaceName

String

The name of the used interface. I refer to the device documentation for detailed information.



$PortName

String

The name of the used port. I refer to the device documentation for detailed information.





Return parameters



Parameter

Variable Type

Description



$ErrorCode

Integer

The result of the executed function.

When 0 is returned, no error is occurred.



$Handle

Integer

The handle to the opened device.





Example(s):

($ErrorCode,$Handle) = Epos_OpenDevice("EPOS","MAXON_RS232","RS232","COM1");





Epos_ResetDevice

Previous Top Next



* * *



Epos_ResetDevice



Usage:

($ErrorCode,$Position) = Epos_ResetDevice($Handle,$NodeId);





Description:

This function is used to send the NMT service "Reset Node". It is a command without acknowledge.





Result:

($ErrorCode,$Position) = Epos_ResetDevice($Handle,$NodeId);

Function arguments



Parameter

Variable Type

Description



$Handle

Integer

The handle of the opened device using the function Epos_OpenDevice



$NodeId

Integer

Node ID of the addressed device. ID is given from hardware switches or the layer setting services (LSS).





Return parameters



Parameter

Variable Type

Description



$ErrorCode

Integer

The result of the executed function.

When 0 is returned, no error is occurred.



$Position

Integer

Position actual value





Example(s):

($ErrorCode,$Position) = Epos_ResetDevice($Handle,$NodeId);





Epos_SetDisableState

Previous Top Next



* * *



Epos_SetDisableState



Usage:

$ErrorCode = Epos_SetDisableState($Handle,$NodeId);





Description:

This function changes the device to disable state.





Result:

$ErrorCode = Epos_SetDisableState($Handle,$NodeId);

Function arguments



Parameter

Variable Type

Description



$Handle

Integer

The handle of the opened device using the function Epos_OpenDevice



$NodeId

Integer

Node ID of the addressed device. ID is given from hardware switches or the layer setting services (LSS).





Return parameters



Parameter

Variable Type

Description



$ErrorCode

Integer

The result of the executed function.

When 0 is returned, no error is occurred.





Example(s):

$ErrorCode = Epos_SetDisableState($Handle,$NodeId);





Epos_SetEnableState

Previous Top Next



* * *



Epos_SetEnableState



Usage:

$ErrorCode = Epos_SetEnableState($Handle,$NodeId);





Description:

This function changes the device to enable state.





Result:

$ErrorCode = Epos_SetEnableState($Handle,$NodeId);

Function arguments



Parameter

Variable Type

Description



$Handle

Integer

The handle of the opened device using the function Epos_OpenDevice



$NodeId

Integer

Node ID of the addressed device. ID is given from hardware switches or the layer setting services (LSS).





Return parameters



Parameter

Variable Type

Description



$ErrorCode

Integer

The result of the executed function.

When 0 is returned, no error is occurred.





Example(s):

$ErrorCode = Epos_SetEnableState($Handle,$NodeId);





Epos_SetHomingParameter

Previous Top Next



* * *



Epos_SetHomingParameter



Usage:

$ErrorCode = Epos_SetHomingParameter($Handle,$NodeId,$HomingAcceleration,$SpeedSwitch,$SpeedIndex,$HomeOffset,$CurrentThreshold,$HomePosition);





Description:

This function writes all homing parameters.





Result:

$ErrorCode = Epos_SetHomingParameter($Handle,$NodeId,$HomingAcceleration,$SpeedSwitch,$SpeedIndex,$HomeOffset,$CurrentThreshold,$HomePosition);

Function arguments



Parameter

Variable Type

Description



$Handle

Integer

The handle of the opened device using the function Epos_OpenDevice



$NodeId

Integer

Node ID of the addressed device. ID is given from hardware switches or the layer setting services (LSS).



$HomingAcceleration

Integer

Acceleration for homing profile



$SpeedSwitch

Integer

Speed during search for switch



$SpeedIndex

Integer

Speed during search for index signal



$HomeOffset

Integer

Home offset after homing



$CurrentThreshold

Integer

Current threshold for homing method



$HomePosition

Integer

Assign the current Homing position with this value





Return parameters



Parameter

Variable Type

Description



$ErrorCode

Integer

The result of the executed function.

When 0 is returned, no error is occurred.





Example(s):

$ErrorCode = Epos_SetHomingParameter($EposHandle,$Node,100,29,10,0,500,0);





Epos_SetMaxAcceleration

Previous Top Next



* * *



Epos_SetMaxAcceleration



Usage:

$ErrorCode = Epos_SetMaxAcceleration($Handle,$NodeId,$MaxAcceleration);





Description:

This function writes the maximal allowed acceleration/deceleration.





Result:

$ErrorCode = Epos_SetMaxAcceleration($Handle,$NodeId,$MaxAcceleration);

Function arguments



Parameter

Variable Type

Description



$Handle

Integer

The handle of the opened device using the function Epos_OpenDevice



$NodeId

Integer

Node ID of the addressed device. ID is given from hardware switches or the layer setting services (LSS).



$MaxAcceleration

Integer

This value is the limit of the other acceleration/ deceleration objects.





Return parameters



Parameter

Variable Type

Description



$ErrorCode

Integer

The result of the executed function.

When 0 is returned, no error is occurred.





Example(s):

($ErrorCode,$Position) = Epos_SetEnableState($Handle,$NodeId);





Epos_SetMaxFollowingError

Previous Top Next



* * *



Epos_SetMaxFollowingError



Usage:

$ErrorCode = Epos_SetMaxFollowingError($Handle,$NodeId,$MaxFollowingError);





Description:

This function writes the maximal allowed following error parameter.





Result:

$ErrorCode = Epos_SetMaxFollowingError($Handle,$NodeId,$MaxFollowingError);

Function arguments



Parameter

Variable Type

Description



$Handle

Integer

The handle of the opened device using the function Epos_OpenDevice



$NodeId

Integer

Node ID of the addressed device. ID is given from hardware switches or the layer setting services (LSS).



$MaxAcceleration

Integer

Maximal allowed difference of position actual value to position demand value.





Return parameters



Parameter

Variable Type

Description



$ErrorCode

Integer

The result of the executed function.

When 0 is returned, no error is occurred.





Example(s):

$ErrorCode = Epos_SetMaxFollowingError($Handle,$NodeId,$MaxFollowingError);





Epos_SetMaxProfileVelocity

Previous Top Next



* * *



Epos_SetMaxProfileVelocity



Usage:

$ErrorCode = Epos_SetMaxProfileVelocity($Handle,$NodeId,$MaxProfileVelocity);





Description:

This function writes the maximal allowed velocity.





Result:

$ErrorCode = Epos_SetMaxProfileVelocity($Handle,$NodeId,$MaxProfileVelocity);

Function arguments



Parameter

Variable Type

Description



$Handle

Integer

The handle of the opened device using the function Epos_OpenDevice



$NodeId

Integer

Node ID of the addressed device. ID is given from hardware switches or the layer setting services (LSS).



$MaxProfileVelocity

Integer

This value is used as velocity limit in a position (or velocity) move.





Return parameters



Parameter

Variable Type

Description



$ErrorCode

Integer

The result of the executed function.

When 0 is returned, no error is occurred.





Example(s):

$ErrorCode = Epos_SetMaxProfileVelocity($Handle,$NodeId,$MaxProfileVelocity);





Epos_SetOperationMode

Previous Top Next



* * *



Epos_SetOperationMode



Usage:

$ErrorCode = Epos_SetOperationMode($Handle,$NodeId,$OperationMode);





Description:

This function sets the operation mode.





Result:

$ErrorCode = Epos_SetOperationMode($Handle,$NodeId,$OperationMode);

Function arguments



Parameter

Variable Type

Description



$Handle

Integer

The handle of the opened device using the function Epos_OpenDevice



$NodeId

Integer

Node ID of the addressed device. ID is given from hardware switches or the layer setting services (LSS).



$OperationMode

String

The operation mode.

Allowed values:

· CURRENT MODE

· HOMING MODE

· INTERPOLATED POSITION MODE

· MASTER ENCODER MODE

· POSITION MODE

· PROFILE POSITION MODE

· PROFILE VELOCITY MODE

· STEP DIRECTION MODE

· VELOCITY MODE





Return parameters



Parameter

Variable Type

Description



$ErrorCode

Integer

The result of the executed function.

When 0 is returned, no error is occurred.





Example(s):

$ErrorCode = Epos_SetOperationMode($Handle,1,"POSITION MODE");





Epos_SetPositionMust

Previous Top Next



* * *



Epos_SetPositionMust



Usage:

$ErrorCode = Epos_SetPositionMust($Handle,$NodeId,$PositionMust);





Description:

This function sets the position demand value.





Result:

$ErrorCode = Epos_SetPositionMust($Handle,$NodeId,$PositionMust);

Function arguments



Parameter

Variable Type

Description



$Handle

Integer

The handle of the opened device using the function Epos_OpenDevice



$NodeId

Integer

Node ID of the addressed device. ID is given from hardware switches or the layer setting services (LSS).



$PositionMust

Integer

Position demand value





Return parameters



Parameter

Variable Type

Description



$ErrorCode

Integer

The result of the executed function.

When 0 is returned, no error is occurred.





Example(s):

$ErrorCode = Epos_SetPositionMust($EposHandle,$Node,$PositionMust);





Epos_StopHoming

Previous Top Next



* * *



Epos_StopHoming



Usage:

$ErrorCode = Epos_StopHoming($Handle,$NodeId);





Description:

This function interrupts homing.





Result:

$ErrorCode = Epos_StopHoming($Handle,$NodeId);

Function arguments



Parameter

Variable Type

Description



$Handle

Integer

The handle of the opened device using the function Epos_OpenDevice



$NodeId

Integer

Node ID of the addressed device. ID is given from hardware switches or the layer setting services (LSS).





Return parameters



Parameter

Variable Type

Description



$ErrorCode

Integer

The result of the executed function.

When 0 is returned, no error is occurred.





Example(s):

$ErrorCode = Epos_StopHoming($Handle,$NodeId);





IBootControl

Previous Top Next



* * *



IBootControl

Usage:

IBootControl($IpAddress,$Command,$Port);

Description:

This function allows for remote control of the iBoot remote power cycle unit created by DataProbe Industries. The iBoot is a low-cost single outlet power-cycle relay with a built in web-server for remote control. In order to use the IBootControl function, the default password of the iBoot unit must be 'PASS'. This is the default shipping password of the iBoot units. Assuming that the command is successfully sent, this function generates a passing result. In the event that the command is not received correctly, a failing result is generated.

Example:

IBootControl("192.168.1.254","ON",80); Function Arguments



Parameter

Variable Type

Description



$IpAddress

String

The string in dotted quad notation representing the IP Address of the IBoot unit. For example "192.168.1.254"



$Command

String

The command to send to the IBoot unit. Valid Commands are:

· "ON" = Turns on the IBoot Unit.

· "OFF" = Turns off the IBoot Unit.

· "CYCLE" = Changes the State of the IBoot Unit.



$Port

Integer

The TCP/IP Port on which to send the iBoot commands. By Default, this is port 80.





Return Parameters



Parameter

Variable Type

Description



None





IPALControl

Previous Top Next



* * *



IPALControl

Usage:

IPALControl($IpAddress,$Password,$PortNumber$DesiredState);

Description:

This function allows for remote control of the iPAL remote power cycle unit created by DataProbe Industries. The iPAL is an 8 outlet power-cycle relay with a built in web-server for remote control. In order to use the IPALControl function, the unit must be configured with an IP Address Assuming that the command is successfully sent, this function generates a passing result. In the event that the command is not received correctly, a failing result is generated.

Example:

IPALControl("192.168.1.100","PASS",1,"ON")

Function Arguments



Parameter

Variable Type

Description



$IpAddress

String

The string in dotted quad notation representing the IP Address of the IBoot unit. For example "192.168.1.254"



$Password

String

The password set on the device



$PortNumber

Integer

The Port to turn on or off. Valid values are 1-8.



$DesiredState

String

The command to send to the IBoot unit. Valid Commands are:

· "ON" = Turns on the Port

· "OFF" = Turns off the Port





Return Parameters



Parameter

Variable Type

Description



None





A661XX_Close

Previous Top Next



* * *



A661XXA_Close

Usage:

A66101A_Close($Handle);



Description:

Closes the I/O session to the instrument. Driver methods and properties that access the instrument are not accessible after Close is called.

Function Arguments



Parameter

Variable Type

Description



$Handle

Object

Handle of the instrument.





Return Parameters



Parameter

Variable Type

Description



None

None

None





A661XXA_ConfigureCurrentLimit

Previous Top Next



* * *



A661XXA_ConfigureCurrentLimit

Usage:

A66101A_ConfigureCurrentLimit($Handle, $Limit_Enable, $Limit);

Description:

Specifies the output current limit value and enables or disables the overcurrent protection (OCP) function

Function Arguments



Parameter

Variable Type

Description



$Handle

Object

Handle of the instrument



$Limit_Enable

String

This enables or disables the power module overcurrent protection (OCP) function. If "Regulate", Agilent661xxCurrentLimitRegulate is selected for which the output regulates at the current limit value when the current limit is reached. If "Trip", Agilent661xxCurrentLimitTrip is selected for which the output shuts down when the current limit is reached.



$Limit

Double

Specifies the current limit value.





Return Parameters



Parameter

Variable Type

Description



None

None

None





A661XXA_DisplayProperties

Previous Top Next



* * *



A661XXA_DisplayProperties

Usage:

A66101A_DisplayProperties($Handle, $Enable);

Description:

If True, the insturment updates the display. If False, the instrument does not update the display.\

Function Arguments



Parameter

Variable Type

Description



$Handle

Object

Handle of the instrument



$Enable

Boolean

If True, the insturment updates the display. If False, the instrument does not update the display.





Return Parameters



Parameter

Variable Type

Description



None

None

None





A661XXA_Initialize

Previous Top Next



* * *



A661XXA_Initialize

Usage:

$Handle = A66XXA_Initialize($ResourceName, $IdQurey, $Reset, $OptionalString);

Description:

Opens the I/O session to the instrument. Driver methods and properties that access the instrument are only accessible after Initialize is called. Initialize optionally performs a Reset and queries the instrument to validate the instrument model.

This function returns the instrument handle.

Function Arguments



Parameter

Variable Type

Description



$ResourceName

String

GPIB address of the instrument



$IdQuery

Boolean

Specifies whether to verify the ID of the instrument.



$Reset

Boolean

Specifies whether to reset the instrument.



$OptionalString

String

Specifies the initial values of certain IVI inherent attributes for the session.The format of an assignment in the OptionString parameter is "Name=Value", where Name is one of the option string names in the table below.





Name

Allowed Values



RangeCheck

true or false



QuerytInstrStatus

true or false



Cache

true or false



Simulate

true or false



RecordCoercions

true or false



InterchangeCheck

true or false



DriverSetup

any string





Return Parameters



Parameter

Variable Type

Description



$Handle

Object

Instrument handle





A661XXA_List_Properties

Previous Top Next



* * *



A661XXA_List_Properties

Usage:

A66101A_List_Properties($Handle, $CurrentMode,$Step,$VoltageMode);



Description:

Sets up the List Properties of the power supply module.

Function Arguments



Parameter

Variable Type

Description



$Handle

Object

Handle of the instrument



$CurrentMode

String

If "Fixed", Agilent661xxListModeFixed is selected which prevents the output from being controlled by lists. If "List", Agilent661xxListModeList is selected which allows the output to be controlled by lists.



$Step

String

If "Auto", Agilent661xxListStepAuto is selected which causes the list to sequence through all of points in the list in response to a single trigger. If "Once", Agilent661xxListStepOnce is selected which causes the list to advance one point per trigger. The list will remain at the point until the next trigger occurs.



$VoltageMode

String

If "Fixed", Agilent661xxListModeFixed is selected which prevents the output from being controlled by lists.If "List", Agilent661xxListModeList is selected which allows the output to be controlled by lists.





Return Parameters



Parameter

Variable Type

Description



None

None

None





A6611XXA_Measure_Current

Previous Top Next



* * *



A661XXA_Measure_Current

Usage:

$Current = A66101A_Measure_Current($Handle);

Description:

Measures the output current and returns the measured value.

Function Arguments



Parameter

Variable Type

Description



$Handle

Object

Handle of the instrument.





Return Parameters



Parameter

Variable Type

Description



$Current

Double

Measured current value in Amps





A6611XXA_Measure_Voltage

Previous Top Next



* * *



A661XXA_Measure_Voltage

Usage:

$Voltage = A66101A_Measure_Voltage($Handle);

Description:

Measures the output current and returns the measured value.

Function Arguments



Parameter

Variable Type

Description



$Handle

Object

Handle of the instrument.





Return Parameters



Parameter

Variable Type

Description



$Voltage

Double

Measured voltage value in volts





A661X_Output_Properties

Previous Top Next



* * *



A661XXA_Output_Properties

Usage:

A66101A_Output_Properties($Handle, $Power_Supply_Enable, $Relay_Enable, $Relay_Polarity, $Voltage_Level);

Description:

Sets the output properties.

Function Arguments



Parameter

Variable Type

Description



$Handle

Object

Handle of the instrument



$Power_Supply_Enable

Boolean

Specifies whether the power module output is enabled or disabled.



$Relay_Enable

Boolean

Specifies the current limit value.



$Relay_Polarity

Boolean

Specifies the output relay polarity. This command is valid only if the power module is configured for the optional relay connector



$Voltage_Level

Double

Specifies the output voltage level. The units are volts.





Return Parameters



Parameter

Variable Type

Description



None

None

None





A661XXA_SetupList

Previous Top Next



* * *



A661XXA_SetupList

Usage:

A66101A_SetupList($Handle, $WhichList, $TrigSource, $ListCount, $ListPoints, $DwellPoints, $ListStep);

Description:

Configures the power supply module to execute a list on the next trigger signal. Downloads the dwell, voltage, and current list to the module. The following steps are required to set up a list:

Enable the voltage list function

Enable the current list function

Specify the number of voltage output levels (points)

Specify the number of current output levels (points)

Specify the time duration of each output level (dwell)

Specify the times the list is repeated (count)

Specify what will trigger the list (source)

Select the way the list will response to triggers (step)

Function Arguments



Parameter

Variable Type

Description



$Handle

Object

Handle of the instrument



$WhichList

String

If "Voltage", Agilent661xxListTypeVoltage is selected which selects the Voltage list. If "Current", Agilent661xxListTypeCurrent is selected which selects the current list.



$TrigSource

String

If "Immediate", Agilent661xxTriggerSourceImmediate is selected which executes an immediate trigger.

If "External", Agilent661xxTriggerSourceExternal is selected which triggers on a mainframe trigger in signal.

If "Hold", Agilent661xxTriggerSourceHold is selected which does not respond to any triggers except Immediate Triggers.

If "Link", Agilent661xxTriggerSourceLink is selected which triggers on internal power module event as specified by Agilent661xxTriggeredLinkEnum.

If "TTLT", Agilent661xxTriggerSourceTTLT is selected which triggers on a Mainframe Trigger Out signal.



$ListCount

Long Integer

The number of times the list is executed before it is completed. Values range from 1 through 9.9E37. Any number greater than 65534 causes the list to be executed indefinitely.



$ListPoints

Array

An array that specifies the values in a voltage or current list. Up to 20 values can be entered in a list. The array of list points are given as String with each value seperated by a ";"



$DwellPoints

Array

An array that specifies the dwell values in the list. The dwell time is the time interval that the output remains at the programmed voltage or current. Up to 20 dwell values can be entered in a list. The array of dwell points are given as String with each value seperated by a ";"



$ListStep

String

If "Auto", Agilent661xxListStepAuto is selected which causes the list to sequence through all of points in the list in response to a single trigger.

If "Once", Agilent661xxListStepOnce is selected which causes the list to advance one point per trigger. The list will remain at the point until the next trigger occurs.





Return Parameters



Parameter

Variable Type

Description



None

None

None





A661XXA_SetupOutputSequence

Previous Top Next



* * *



A661XXA_SetupOutputSequence

Usage:

A66101A_SetupOutputSequence($Handle, $Trigger, $Delay, $Voltage, $Current);



Description:

Creates an output programming sequence for multiple power supply modules. This method must be programmed once for each module to be sequenced. However, only one module must be designated as a Trigger Module. This module will be the one that initiates the output sequencing upon receiving a bus trigger.

Function Arguments



Parameter

Variable Type

Description



$Handle

Object

Handle of the instrument



$Trigger

Boolean

If set to True, it designates this module as the Trigger module. All other modules in the sequence must be set to False.



$Delay

Double

Specifies the delay time from receipt of a trigger signal to the start of the output Voltage and Current change.



$Voltage

Double

The triggered voltage value.



$Current

Double

The triggered current value.





Return Parameters



Parameter

Variable Type

Description



None

None

None





A661XXA_Voltage_Protection

Previous Top Next



* * *



A661XXA_Voltage_Protection

Usage:

A661XXA_Voltage_Protection($Handle);

Description:

Calibrates the power module overvoltage protection (OVP) circuit. The power module output must be enabled and operating in the constant voltage (CV) mode. Can only be used in calibration mode.

Function Arguments



Parameter

Variable Type

Description



$Handle

Object

Handle of the instrument.





Return Parameters



Parameter

Variable Type

Description



None

None

None





E343XA_CheckCurrentProtection

Previous Top Next



* * *



E343XA_CheckCurrentProtection

Usage:

($Current,$State,$TripState) = E343XA_CheckCurrentProtection($Handle);

Description:

This function controls the Agilent E343x Series of power supplies. In order to use these function the VXI pnp driver for the instrument must be installed on the system running Jabil Test. The latest version of this driver can be downloaded from Agilent.

This function checks the status of the current protection settings on the E343XA Power Supply.

Function Arguments



Parameter

Variable Type

Description



$Handle

Object

A handle to the E343XA created with the E343XA_Init function.





Return Parameters



Parameter

Variable Type

Description



$Current

Float

The present current level that is set to trip the over current protection



$State

Boolean

The present state of the current protection setting. If current protection is turned on, 'TRUE' is returned. Otherwise 'FALSE' is returned.



$TripState

Boolean

Returns whether or not the power supply over current protection has been tripped. If the protection is tripped 'TRUE' is returned, otherwise 'FALSE' is returned.





E343XA_CheckVoltageProtection

Previous Top Next



* * *



E343XA_CheckVoltageProtection

Usage:

($Voltage,$State,$TripState) = E343XA_CheckVoltageProtection($Handle);

Description:

This function controls the Agilent E343x Series of power supplies. In order to use these function the VXI pnp driver for the instrument must be installed on the system running Jabil Test. The latest version of this driver can be downloaded from Agilent.

This function checks the status of the current protection settings on the E343XA Power Supply.

Function Arguments



Parameter

Variable Type

Description



$Handle

Object

A handle to the E343XA created with the E343XA_Init function.





Return Parameters



Parameter

Variable Type

Description



$Voltage

Float

The present voltage level that is set to trip the over voltage protection



$State

Boolean

The present state of the voltage protection setting. If voltage protection is turned on, 'TRUE' is returned. Otherwise 'FALSE' is returned.



$TripState

Boolean

Returns whether or not the power supply over voltage protection has been tripped. If the protection is tripped 'TRUE' is returned, otherwise 'FALSE' is returned.





E343XA_Close

Previous Top Next



* * *



E343XA_Close

Usage:

E343XA_Close($Handle);

Description:

This function controls the Agilent E343x Series of power supplies. In order to use these function the VXI pnp driver for the instrument must be installed on the system running Jabil Test. The latest version of this driver can be downloaded from Agilent.



This function closes the E343XA Power supply, and leaves it in it's current state.

Example:

E343XA_Close($Handle);



Function Arguments



Parameter

Variable Type

Description



$Handle

Object

A Handle to the E343XA created with the E343XA_Init function.



Return Parameters



Parameter

Variable Type

Description



None





E343XA_Init

Previous Top Next



* * *



E343XA_Init



Usage:

$handle = E343XA_Init($resourceString, $reset);



Description:

This function initializes the E343XA Power supply, and returns a handle to the instrument. If the $Reset argument is set to TRUE, the instrument is reset to it's default configuration.





Remarks:

This function controls the E343XA series of Power Supplies.

In order to use these functions the VXI PnP driver for the instrument must be loaded.





Function arguments



Parameter

Variable Type

Description



$resourceString

String

The VISA style resource string for the instrument. For example: "GPIB0::5::INSTR"



$reset

Boolean

Specifies whether or not to reset the instrument upon initialization.





Return parameters



Parameter

Variable Type

Description



$handle

Object

Handle to the open communications channel that can be used by other functions.





Example:





// Initialize and reset an instrument on GPIB bus address 5.

$resource = "GPIB0::5::INSTR";

$reset = true;



$handle = E343XA_Init($resource, $reset);





E343XA_MeasureCurrent

Previous Top Next



* * *



E343XA_MeasureCurrent

Usage:

$Current = E343XA_MeasureCurrent($Handle);

Description:

This function controls the Agilent E343x Series of power supplies. In order to use these function the VXI pnp driver for the instrument must be installed on the system running Jabil Test. The latest version of this driver can be downloaded from Agilent.

This function returns the current draw of the E343XA power supply.

Example:

E343XA_MeasureCurrent($Handle);



Function Arguments



Parameter

Variable Type

Description



$Handle

Object

A handle to the E343XA created with the E343XA_Init function.



Return Parameters



Parameter

Variable Type

Description



$Current

Float

The current draw measured in Amps.





E343XA_MeasureVoltage

Previous Top Next



* * *



E343XA_MeasureVoltage

Usage:

$Voltage = E343XA_MeasureVoltage($Handle);

Description:

This function controls the Agilent E343x Series of power supplies. In order to use these function the VXI pnp driver for the instrument must be installed on the system running Jabil Test. The latest version of this driver can be downloaded from Agilent.

This function returns the output voltage of the E343XA power supply.

Function Arguments



Parameter

Variable Type

Description



$Handle

Object

A handle to the E343XA created with the E343XA_Init function.





Return Parameters



Parameter

Variable Type

Description



$Voltage

Float

The output voltage measured in Volts.





E343XA_Output

Previous Top Next



* * *



E343XA_Output

Usage:

E343XA_Output($Handle,$State);

Description:

This function controls the Agilent E343x Series of power supplies. In order to use these function the VXI pnp driver for the instrument must be installed on the system running Jabil Test. The latest version of this driver can be downloaded from Agilent.

This function turns the output of the E343XA Power Supply 'ON' or 'OFF'.

Function Arguments



Parameter

Variable Type

Description



$Handle

Object

A handle to the E343XA created with the E343XA_Init function.



$State

String

Sets the output of the power supply to 'ON' or 'OFF'





Return Parameters



Parameter

Variable Type

Description



None





E343XA_SetCurrent

Previous Top Next



* * *



E343XA_SetCurrent

Usage:

E343XA_SetCurrent($Handle,$Current);

Description:

This function controls the Agilent E343x Series of power supplies. In order to use these function the VXI pnp driver for the instrument must be installed on the system running Jabil Test. The latest version of this driver can be downloaded from Agilent.

This function sets the output current of the E343XA power supply.

Function Arguments



Parameter

Variable Type

Description



$Handle

Object

A handle to the E343XA created with the E343XA_Init function.



$Current

Float

The desired output current in amps.





Return Parameters



Parameter

Variable Type

Description



None





E343XA_SetCurrentProtection

Previous Top Next



* * *



E343XA_SetCurrentProtection

Usage:

E343XA_SetCurrentProtection($Handle,$Current,$State);

Description:

This function controls the Agilent E343x Series of power supplies. In order to use these function the VXI pnp driver for the instrument must be installed on the system running Jabil Test. The latest version of this driver can be downloaded from Agilent.

This function sets the output current proection of the E343XA power supply.

Function Arguments



Parameter

Variable Type

Description



$Handle

Object

A handle to the E343XA created with the E343XA_Init function.



$Current

Float

The desired output current limit in amps which will cause the over current trip protection.



$State

String

Sets the output current protection to 'ON' or 'OFF'





Return Parameters



Parameter

Variable Type

Description



None





E343XA_SetDisplay

Previous Top Next



* * *



E343XA_SetDisplay

Usage:

E343XA_SetDisplay($Handle,$DisplayStatus,$DisplayMode,$DisplayString);

Description:

This function controls the Agilent E343x Series of power supplies. In order to use these function the VXI pnp driver for the instrument must be installed on the system running Jabil Test. The latest version of this driver can be downloaded from Agilent.

This function controls the LED read-out on the E343XA power supply.

Examples: E343XA_SetDisplay($Handle,"ON","NORMAL","");

E343XA_SetDisplay($Handle,"ON","TEXT","Hello World");



Function Arguments



Parameter

Variable Type

Description



$Handle

Object

A handle to the E343XA created with the E343XA_Init function.



$DisplayStatus

String

Specifies whether the E343XA display should be turned "OFF" or "ON".



$DisplayMode

String

Specifies whether the E343XA display is in "NORMAL" mode which shows the current status of the instrument, or "TEXT" mode which displays the string specified by the $DisplayString argument.



$DisplayString

String

Specifies the string to display on the LED readout of the E343XA Power Supply.



Return Parameters



Parameter

Variable Type

Description



None





E343XA_SetVoltage

Previous Top Next



* * *



E343XA_SetVoltage

Usage:

E343XA_SetVoltage($Handle,$Voltage);

Description:

This function controls the Agilent E343x Series of power supplies. In order to use these function the VXI pnp driver for the instrument must be installed on the system running Jabil Test. The latest version of this driver can be downloaded from Agilent.

This function sets the output voltage of the E343XA power supply.

Function Arguments



Parameter

Variable Type

Description



$Handle

Object

A handle to the E343XA created with the E343XA_Init function.



$Voltage

Float

The desired voltage in volts.





Return Parameters



Parameter

Variable Type

Description



None





E343XA_SetVoltageProtection

Previous Top Next



* * *



E343XA_SetVoltageProtection

Usage:

E343XA_SetVoltageProtection($Handle,$Voltage,$State);

Description:

This function controls the Agilent E343x Series of power supplies. In order to use these function the VXI pnp driver for the instrument must be installed on the system running Jabil Test. The latest version of this driver can be downloaded from Agilent.

This function sets the output voltage protection of the E343XA power supply.

Function Arguments



Parameter

Variable Type

Description



$Handle

Object

A handle to the E343XA created with the E343XA_Init function.



$Voltage

Float

The desired output voltage limit in amps which will cause the over voltage trip protection.



$State

String

Sets the output voltage protection to 'ON' or 'OFF'





Return Parameters



Parameter

Variable Type

Description



None





E36xx_Close

Previous Top Next



* * *



E36XX_Close



Usage:

E36XX_Close($InstrumentHandle);





Description:





The close function terminates the software connection to the instrument and de-allocates system resources. It is generally a good programming habit to close the instrument handle when the program is done using the instrument.





Function arguments



Parameter

Variable Type

Description



$InstrumentHandle

Object

The handle of the instrument returned from the E36XX_Init function





Return parameters



Parameter

Variable Type

Description



None





Usage Examples

E36XX_Close($InstrumentHandle);





Supported Instruments

Agilent E3632A, E3633A, E3634A, E3640A, E3641A, E3642A, E3643A, E3644A, E3631A, E3645A, E3646A, E3647A, E3648A, E3649A





E36xx_ConfigureOCP

Previous Top Next



* * *



E36XX_ConfigureOCP



Usage:

E36XX_ConfigureOCP($InstrumentHandle,$CurrentLimit,$Enabled,$OutputChannel);





Description:





This function configures the over current protection for the specified output.

Function arguments



Parameter

Variable Type

Description



$InstrumentHandle

Object

The handle of the instrument returned from the E36XX_Init function



$CurrentLimit

Float

The Current limit for the specified output.



$Enabled

Boolean

Enable the over current protections [TRUE,FALSE]



$OutputChannel

Integer

The Output Channel To Be Configured (Allowable values for the output channel are between 1 and 3 depending on the model of power supply).





Return parameters



Parameter

Variable Type

Description



None





Usage Examples

E36XX_ConfigureOCP($InstrumentHandle,7,TRUE,1);





Supported Instruments

Agilent E3632A, E3633A, E3634A, E3640A, E3641A, E3642A, E3643A, E3644A, E3631A, E3645A, E3646A, E3647A, E3648A, E3649A





E36XX_ConfigureOVP

Previous Top Next



* * *



E36XX_ConfigureOVP



Usage:

E36XX_ConfigureOVP($InstrumentHandle,$VoltageLimit,$Enabled,$OutputChannel);





Description:





This function configures the over voltage protection for the specified output.

Function arguments



Parameter

Variable Type

Description



$InstrumentHandle

Object

The handle of the instrument returned from the E36XX_Init function



$VoltageLimit

Float

The voltage limit for the specified output.



$Enabled

Boolean

Enable the over current protections [TRUE,FALSE]



$OutputChannel

Integer

The Output Channel To Be Configured (Allowable values for the output channel are between 1 and 3 depending on the model of power supply).





Return parameters



Parameter

Variable Type

Description



None





Usage Examples

E36XX_ConfigureOVP($InstrumentHandle,7,TRUE,1);





Supported Instruments

Agilent E3632A, E3633A, E3634A, E3640A, E3641A, E3642A, E3643A, E3644A, E3631A, E3645A, E3646A, E3647A, E3648A, E3649A





E36XX_GetNumberOfOutputs

Previous Top Next



* * *



E36XX_GetNumberOfOutputs



Usage:

$Outputs = E36XX_GetNumberOfOutputs($InstrumentHandle);





Description:





This function returns the amount of outputs available on the instrument.

Function arguments



Parameter

Variable Type

Description



$InstrumentHandle

Object

The handle of the instrument returned from the N67XX_Init function





Return parameters



Parameter

Variable Type

Description



$Outputs

Integer

The amount of outputs on the device.





Usage Examples

$outputs= E36XX_GetNumberOfOutputs($Handle);





Supported Instruments

Agilent E3632A, E3633A, E3634A, E3640A, E3641A, E3642A, E3643A, E3644A, E3631A, E3645A, E3646A, E3647A, E3648A, E3649A





E36xx_Init

Previous Top Next



* * *



E36XX_Init



Usage:

$Handle = E36XX_Init($ResourceString,$QueryInstrument,$ResetInstrument);

Description:



The initialize function initializes the software connection to the instrument and optionally verifies that instrument is in the system. In addition, it may perform any necessary actions to place the instrument in its reset state.





Function arguments



Parameter

Variable Type

Description



$ResourceString

String

The resource string of the instrument, for instance "GPIB0::5::INSTR"



$QueryInstrument

Boolean

Specifies whether or not to query the instrument on initialization.



$ResetInstrument

Boolean

Specifies whether or not to reset the instrument on initialization.





Return parameters



Parameter

Variable Type

Description



$Handle

Object

Returns the handle to the instrument to use in following instrument control functions.





Usage Examples

$Handle = E36XX_Init("GPIB0::5::INSTR",false,true);





Supported Instruments

Agilent E3632A, E3633A, E3634A, E3640A, E3641A, E3642A, E3643A, E3644A, E3631A, E3645A, E3646A, E3647A, E3648A, E3649A





E36XX_MeasureCurrent

Previous Top Next



* * *



E36XX_MeasureCurrent



Usage:

$Current = E36XX_MeasureCurrent($InstrumentHandle,$OutputChannel);





Description:





This function measures the output current on the specified channel.

Function arguments



Parameter

Variable Type

Description



$InstrumentHandle

Object

The handle of the instrument returned from the E36XX_Init function



$OutputChannel

Integer

The output channel on which to perform the current measurement. (Allowable values for the output channel are between 1 and 3 depending on the model of power supply).





Return parameters



Parameter

Variable Type

Description



$Current

Float

The current from the power supply measured in amperes.





Usage Examples

$Current = E36XX_MeasureCurrent($InstrumentHandle,$OutputChannel);





Supported Instruments

Agilent E3632A, E3633A, E3634A, E3640A, E3641A, E3642A, E3643A, E3644A, E3631A, E3645A, E3646A, E3647A, E3648A, E3649A





E36XX_MeasureVoltage

Previous Top Next



* * *



E36XX_MeasureVoltage



Usage:

$Voltage = E36XX_MeasureVoltage($InstrumentHandle,$OutputChannel);





Description:





This function measures the output voltage on the specified channel.

Function arguments



Parameter

Variable Type

Description



$InstrumentHandle

Object

The handle of the instrument returned from the E36XX_Init function



$OutputChannel

Integer

The output channel on which to perform the voltage measurement. (Allowable values for the output channel are between 1 and 3 depending on the model of power supply).





Return parameters



Parameter

Variable Type

Description



$Voltage

Float

The voltage from the power supply measured in volts.





Usage Examples

$Voltage = E36XX_MeasureVoltage($InstrumentHandle,$OutputChannel);





Supported Instruments

Agilent E3632A, E3633A, E3634A, E3640A, E3641A, E3642A, E3643A, E3644A, E3631A, E3645A, E3646A, E3647A, E3648A, E3649A





E36XX_Output

Previous Top Next



* * *



E36XX_Output



Usage:

E36XX_Output($InstrumentHandle, $Enabled);





Description:





This function enables or disables the output of the instrument. The state of the disabled output is a condition of zero output voltage and current at the output terminals.





Function arguments



Parameter

Variable Type

Description



$InstrumentHandle

Object

The handle of the instrument returned from the E36XX_Init function.



$Enabled

String

Enables the output state of the instrument. Allowable settings are:

· "TRUE" = Output Enabled

· "FALSE" = Output Disabled





Return parameters



Parameter

Variable Type

Description



None





Usage Examples

E36XX_Output($InstrumentHandle,"TRUE");





Supported Instruments

Agilent E3632A, E3633A, E3634A, E3640A, E3641A, E3642A, E3643A, E3644A, E3631A, E3645A, E3646A, E3647A, E3648A, E3649A





E36XX_SetCurrentLimit

Previous Top Next



* * *



E36XX_SetCurrent



Usage:

E36XX_SetCurrentLimit$InstrumentHandle,$CurrentLimit,$Output);





Description:





This function sets the current limit value for the specified output.





Function arguments



Parameter

Variable Type

Description



$InstrumentHandle

Object

The handle of the instrument returned from the E36XX_Init function.



$CurrentLimit

Float

The Current limit value in amps



$Output

Integer

The output channel to be configured. (Allowable values for the output channel are between 1 and 3 depending on the model of power supply).





Return parameters



Parameter

Variable Type

Description



None





Usage Examples

E36XX_SetCurrentLimit($InstrumentHandle,7,1);





Supported Instruments

Agilent E3632A, E3633A, E3634A, E3640A, E3641A, E3642A, E3643A, E3644A, E3631A, E3645A, E3646A, E3647A, E3648A, E3649A





E36XX_SetCurrentLimitBehavior

Previous Top Next



* * *



E36XX_SetCurrentLimitBehavior



Usage:

E36XX_SetCurrentLimitBehavior$InstrumentHandle,$Output,$CurrentLimitBehavior);





Description:





This function sets the current limit behavior for the specified output.





Function arguments



Parameter

Variable Type

Description



$InstrumentHandle

Object

The handle of the instrument returned from the E36XX_Init function.



$Output

Integer

The output channel to be configured. (Allowable values for the output channel are between 1 and 3 depending on the model of power supply).



$Behavior

String

Sets the behavior for the power supply when the current limit is reached. Allowable values are:

· "TRIP"

· "REGULATE"





Return parameters



Parameter

Variable Type

Description



None





Usage Examples

E36XX_SetCurrentLimitBehavior($InstrumentHandle,1,"TRIP");





Supported Instruments

Agilent E3632A, E3633A, E3634A, E3640A, E3641A, E3642A, E3643A, E3644A, E3631A, E3645A, E3646A, E3647A, E3648A, E3649A





E36XX_SetVoltage

Previous Top Next



* * *



E36XX_SetVoltage



Usage:

E36XX_SetVoltage($InstrumentHandle,$Voltage,$VoltageRange,$Output);





Description:





This function sets the voltage value for the specified output.





Function arguments



Parameter

Variable Type

Description



$InstrumentHandle

Object

The handle of the instrument returned from the E36XX_Init function.



$Voltage

Float

The Voltage value to be set in volts



$VoltageRange

String

The Voltage Range for to be configured [LOW,HIGH]



$Output

Integer

The output channel to be configured. (Allowable values for the output channel are between 1 and 3 depending on the model of power supply).





Return parameters



Parameter

Variable Type

Description



None





Usage Examples

E36XX_SetVoltage($InstrumentHandle,15,LOW,1);





Supported Instruments

Agilent E3632A, E3633A, E3634A, E3640A, E3641A, E3642A, E3643A, E3644A, E3631A, E3645A, E3646A, E3647A, E3648A, E3649A





E36XX_SetVoltageAndCurrent

Previous Top Next



* * *



E36XX_SetVoltageAndCurrent



Usage:

E36XX_SetVoltageAndCurrent($InstrumentHandle,$Voltage,$Current,$Output);





Description:





This function sets the voltage and current limit value for the specified output.





Function arguments



Parameter

Variable Type

Description



$InstrumentHandle

Object

The handle of the instrument returned from the E36XX_Init function.



$Voltage

Float

The Voltage value to be set in Volts



$Current

Float

The Current Value to be set in Amps



$Output

Integer

The output channel to be configured. (Allowable values for the output channel are between 1 and 3 depending on the model of power supply).





Return parameters



Parameter

Variable Type

Description



None





Usage Examples

E36XX_SetVoltageAndCurrent($InstrumentHandle,15,7,1);





Supported Instruments

Agilent E3632A, E3633A, E3634A, E3640A, E3641A, E3642A, E3643A, E3644A, E3631A, E3645A, E3646A, E3647A, E3648A, E3649A





HP662X_Close

Previous Top Next



* * *



HP662X_Close

Usage:

HP662X_Close($Handle);

Description:

This function controls the Agilent 662x Series of power supplies. In order to use these function the VXI pnp driver for the instrument must be installed on the system running Jabil Test. The latest version of this driver can be downloaded from Agilent. This functions supports the following model power supplies: 6621A, 6622A, 6623A, 6624A, 6625A, 6626A, 6627A, 6628A, 6629A.

This function closes the power supply, and releases the handle and resources for the instrument.

Function Arguments



Parameter

Variable Type

Description



$Handle

Object

A handle to the HP 662X instrument





Return Parameters



Parameter

Variable Type

Description



None





HP662X_Init

Previous Top Next



* * *



HP662X_Init

Usage:

$Handle = HP662X_Init($ResourceString,$Reset);

Description:

This function controls the Agilent 662x Series of power supplies. In order to use these function the VXI pnp driver for the instrument must be installed on the system running Jabil Test. The latest version of this driver can be downloaded from Agilent. This functions supports the following model power supplies: 6621A, 6622A, 6623A, 6624A, 6625A, 6626A, 6627A, 6628A, 6629A.

This function initializes the Power supply, and returns a handle to the instrument. If the $Reset argument is set to TRUE, the instrument is reset to it's default configuration.

Example:

$Handle = HP662X_Init("GPIB0::5::INSTR","TRUE");



Function Arguments



Parameter

Variable Type

Description



$ResourceString

String

The Resource string of the instrument, for instance "GPIB0::5::INSTR"



$Reset

Boolean

Specifies whether or not to reset the instrument upon initialization.



Return Parameters



Parameter

Variable Type

Description



$Handle

Object

A handle to the instrument





HP662X_MeasureCurrent

Previous Top Next



* * *



HP662X_MeasureCurrent

Usage:

$Current = HP662X_MeasureCurrent($Handle,$Channel);

Description:

This function controls the Agilent 662x Series of power supplies. In order to use these function the VXI pnp driver for the instrument must be installed on the system running Jabil Test. The latest version of this driver can be downloaded from Agilent. This functions supports the following model power supplies: 6621A, 6622A, 6623A, 6624A, 6625A, 6626A, 6627A, 6628A, 6629A.

This function measures the current draw on a specified output port.

Function Arguments



Parameter

Variable Type

Description



$Handle

Object

A handle to the HP 662X instrument



$Channel

Integer

The channel on the power supply to be configured





Return Parameters



Parameter

Variable Type

Description



$Current

Float

The current draw on the specified port measured in Amps.





HP662X_MeasureVoltage

Previous Top Next



* * *



HP662X_MeasureVoltage

Usage:

$Voltage = HP662X_MeasureVoltage($Handle,$Channel);

Description:

This function controls the Agilent 662x Series of power supplies. In order to use these function the VXI pnp driver for the instrument must be installed on the system running Jabil Test. The latest version of this driver can be downloaded from Agilent. This functions supports the following model power supplies: 6621A, 6622A, 6623A, 6624A, 6625A, 6626A, 6627A, 6628A, 6629A.

This function measures the voltage on a specified output port.

Function Arguments



Parameter

Variable Type

Description



$Handle

Object

A handle to the HP 662X instrument



$Channel

Integer

The channel on the power supply to be configured





Return Parameters



Parameter

Variable Type

Description



$Voltage

Float

The voltage measurement on the specified port measured in volts





HP662X_Reset

Previous Top Next



* * *



HP662X_Reset

Usage:

HP662X_Reset($Handle);

Description:

This function controls the Agilent 662x Series of power supplies. In order to use these function the VXI pnp driver for the instrument must be installed on the system running Jabil Test. The latest version of this driver can be downloaded from Agilent. This functions supports the following model power supplies: 6621A, 6622A, 6623A, 6624A, 6625A, 6626A, 6627A, 6628A, 6629A.

This function resets the power supply to it's default configuration.

Example:

HP662X_Reset($Handle);



Function Arguments



Parameter

Variable Type

Description



$Handle

Object

A Handle to the HP662X instrument.



Return Parameters



Parameter

Variable Type

Description



None





HP662X_SetCurrent

Previous Top Next



* * *



HP662X_SetCurrent

Usage:

HP662X_SetCurrent($Handle,$Channel,$Current);

Description:

This function controls the Agilent 662x Series of power supplies. In order to use these function the VXI pnp driver for the instrument must be installed on the system running Jabil Test. The latest version of this driver can be downloaded from Agilent. This functions supports the following model power supplies: 6621A, 6622A, 6623A, 6624A, 6625A, 6626A, 6627A, 6628A, 6629A.

This function specifies the output current on a given channel for the power supply.

Function Arguments



Parameter

Variable Type

Description



$Handle

Object

A handle to the HP 662X instrument



$Channel

Integer

The channel on the power supply to be configured



$Current

Float

The desired current for the power supply channel.





Return Parameters



Parameter

Variable Type

Description



None





HP662X_SetCurrentProtection

Previous Top Next



* * *



HP662X_SetCurrentProtection

Usage:

HP662X_SetCurrentProtection($Handle,$Channel,$IsEnabled);

Description:

This function controls the Agilent 662x Series of power supplies. In order to use these function the VXI pnp driver for the instrument must be installed on the system running Jabil Test. The latest version of this driver can be downloaded from Agilent. This functions supports the following model power supplies: 6621A, 6622A, 6623A, 6624A, 6625A, 6626A, 6627A, 6628A, 6629A.

This function configures the Current Protection for a given channel on the power supply.

Function Arguments



Parameter

Variable Type

Description



$Handle

Object

A handle to the HP 662X instrument



$Channel

Integer

The channel on the power supply to be configured



$IsEnabled

String

The desired state of the current protection. Valid Values are:

· "ON"

· "OFF"





Return Parameters



Parameter

Variable Type

Description



None





HP662X_SetOutput

Previous Top Next



* * *



HP662X_SetOutput

Usage:

HP662X_SetOutput($Handle,$Channel,$State);

Description:

This function controls the Agilent 662x Series of power supplies. In order to use these function the VXI pnp driver for the instrument must be installed on the system running Jabil Test. The latest version of this driver can be downloaded from Agilent. This functions supports the following model power supplies: 6621A, 6622A, 6623A, 6624A, 6625A, 6626A, 6627A, 6628A, 6629A.

This function specifies the output status for a given channel on the power supply.

Function Arguments



Parameter

Variable Type

Description



$Handle

Object

A handle to the HP 662X instrument



$Channel

Integer

The channel on the power supply to be configured



$State

String

The desired output status of the channel. Allowable values are:

· "ON"

· "OFF"





Return Parameters



Parameter

Variable Type

Description



None





HP662X_SetVoltage

Previous Top Next



* * *



HP662X_SetVoltage

Usage:

HP662X_SetVoltage($Handle,$Channel,$Voltage);

Description:

This function controls the Agilent 662x Series of power supplies. In order to use these function the VXI pnp driver for the instrument must be installed on the system running Jabil Test. The latest version of this driver can be downloaded from Agilent. This functions supports the following model power supplies: 6621A, 6622A, 6623A, 6624A, 6625A, 6626A, 6627A, 6628A, 6629A.

This function specifies the output voltage on a given channel for the power supply.

Function Arguments



Parameter

Variable Type

Description



$Handle

Object

A handle to the HP 662X instrument



$Channel

Integer

The channel on the power supply to be configured



$Voltage

Float

The desired voltage for the power supply channel.





Return Parameters



Parameter

Variable Type

Description



None





HP662X_SetVoltageProtection

Previous Top Next



* * *



HP662X_SetVoltageProtection

Usage:

HP662X_SetVoltageProtection($Handle,$Channel,$VoltageProtection);

Description:

This function controls the Agilent 662x Series of power supplies. In order to use these function the VXI pnp driver for the instrument must be installed on the system running Jabil Test. The latest version of this driver can be downloaded from Agilent. This functions supports the following model power supplies: 6621A, 6622A, 6623A, 6624A, 6625A, 6626A, 6627A, 6628A, 6629A.

This function specifies the output voltage protection on a given channel for the power supply.

Function Arguments



Parameter

Variable Type

Description



$Handle

Object

A handle to the HP 662X instrument



$Channel

Integer

The channel on the power supply to be configured



$VoltageProtection

Float

The desired voltage protection limit for the power supply channel.





Return Parameters



Parameter

Variable Type

Description



None





HP66XX_Close

Previous Top Next



* * *



HP66XX_Close



Usage:

HP66XX_Close($InstrumentHandle);





Description:





The close function terminates the software connection to the instrument and de-allocates system resources. It is generally a good programming habit to close the instrument handle when the program is done using the instrument.





Note: This driver requires the Agilent 66XX IVI Driver to be installed before using these functions.

Function arguments



Parameter

Variable Type

Description



$InstrumentHandle

Object

The handle of the instrument returned from the HP66XX_Init function





Return parameters



Parameter

Variable Type

Description



None





Usage Examples

HP66XX_Close($InstrumentHandle);





Supported Instruments

664xA, 665xA, 667xA, 668xA System DC Power Supplies

603xA Autoranging System Dc Power Supplies (SCPI-compatible units only)

E4356A Telecommunications DC Power Supply





HP66XX_Init

Previous Top Next



* * *



HP66XX_Init



Usage:

$Handle = HP66XX_Init($InstrumentAddress,$QueryInstrument,$ResetInstrument);

Description:



The initialize function initializes the software connection to the instrument and optionally verifies that instrument is in the system. In addition, it may perform any necessary actions to place the instrument in its reset state.





Note:

· This driver requires the Agilent 66XX IVI Driver to be installed before using these functions.

· Setting $QueryInstrument to true will check that the instrument specified by the resource string is a supported type of instrument. It will generate an error if it is not a supported instrument and will generate an error is no instrument is connected at that address. Setting $QueryInstrument to false will only generate an error if no instrument (of any type) is connected at the specified address.

· This library supports the following models of power supplies:

4356A, 6641A, 6642A, 6643A, 6644A, 6645A, 6651A, 6652A, 6653A, 6654A, 6655A, 6671A, 6672A, 6673A, 6674A, 6675A, 6680A, 6681A, 6682A, 6683A, 6684A, 6690A, 6691A, 6692A

Function arguments



Parameter

Variable Type

Description



$InstrumentAddress

String

The resource string of the instrument, for instance "GPIB0::5::INSTR"



$QueryInstrument

Boolean

Specifies whether or not to query the instrument on initialization.



$ResetInstrument

Boolean

Specifies whether or not to reset the instrument on initialization.





Return parameters



Parameter

Variable Type

Description



$Handle

Object

Returns the handle to the instrument to use in following instrument control functions.





Usage Examples

$Handle = HP66XX_Init("GPIB0::5::INSTR", false, true);





HP66XX_MeasureCurrent

Previous Top Next



* * *



HP66XX_MeasureCurrent



Usage:

$Current = HP66XX_MeasureCurrent($InstrumentHandle);





Description:





This function measures the output current.





If the measurement does not complete within the time allotted with the hp66xx_setMeasTimeout() function, the function returns a HP66xx_INSTR_ERROR_MEAS_TMO error status.





Note: This driver requires the Agilent 66XX IVI Driver to be installed before using these functions.

Function arguments



Parameter

Variable Type

Description



$InstrumentHandle

Object

The handle of the instrument returned from the HP66XX_Init function





Return parameters



Parameter

Variable Type

Description



$Current

Float

The current from the power supply measured in amps.





Usage Examples

$Current = HP66XX_MeasureCurrent($InstrumentHandle);





Supported Instruments

664xA, 665xA, 667xA, 668xA System DC Power Supplies

603xA Autoranging System Dc Power Supplies (SCPI-compatible units only)

E4356A Telecommunications DC Power Supply





HP66XX_MeasureVoltage

Previous Top Next



* * *



HP66XX_MeasureVoltage



Usage:

$Voltage = HP66XX_MeasureVoltage($InstrumentHandle);





Description:





This function measures the output voltage.





If the measurement does not complete within the time allotted with the hp66xx_setMeasTimeout() function, the function returns a HP66xx_INSTR_ERROR_MEAS_TMO error status.





Note: This driver requires the Agilent 66XX IVI Driver to be installed before using these functions.

Function arguments



Parameter

Variable Type

Description



$InstrumentHandle

Object

The handle of the instrument returned from the HP66XX_Init function





Return parameters



Parameter

Variable Type

Description



$Voltage

Float

The voltage from the power supply measured in volts.





Usage Examples

$Voltage = HP66XX_MeasureVoltage($InstrumentHandle);





Supported Instruments

664xA, 665xA, 667xA, 668xA System DC Power Supplies

603xA Autoranging System Dc Power Supplies (SCPI-compatible units only)

E4356A Telecommunications DC Power Supply





HP66XX_SetCurrent

Previous Top Next



* * *



HP66XX_SetCurrent



Usage:

HP66XX_SetCurrent($InstrumentHandle,$CurrentMode,$CurrentLevel);





Description:





This function directly programs the selected current parameter of the power supply.



Note: This driver requires the Agilent 66XX IVI Driver to be installed before using these functions.

Function arguments



Parameter

Variable Type

Description



$InstrumentHandle

Object

The handle of the instrument returned from the HP66XX_Init function



$CurrentMode

String

The current mode for the instrument. Allowable settings are:

· "HP66XX_CURR_IMM" = Immediate Current Level

· "HP66XX_CURR_TRIG" = Triggered Current Level



$CurrentLevel

Float

The current level to be programmed.





Return parameters



Parameter

Variable Type

Description



None





Usage Examples

HP66XX_SetCurrent($InstrumentHandle, "HP66XX_CURR_IMM", 1.2);





Supported Instruments

664xA, 665xA, 667xA, 668xA System DC Power Supplies

603xA Autoranging System Dc Power Supplies (SCPI-compatible units only)

E4356A Telecommunications DC Power Supply





HP66XX_SetOutput

Previous Top Next



* * *



HP66XX_SetOutput



Usage:

HP66XX_SetOutput($InstrumentHandle,$OutputState,$SwitchRelay);





Description:





This function enables or disables the output of the instrument. The state of the disabled output is a condition of zero output voltage and current at the output terminals.





This function also controls the output relay for units with the optional relay connector. The switchRelay parameter specifies if the output relay is also changed.





Note: This driver requires the Agilent 66XX IVI Driver to be installed before using these functions.





Function arguments



Parameter

Variable Type

Description



$InstrumentHandle

Object

The handle of the instrument returned from the HP66XX_Init function



$OutputState

String

Specifies the output state of the instrument. Allowable settings are:

· "ON" = Output Enabled

· "OFF" = Output Disabled



$SwitchRelay

Boolean

Controls the output relay:

· "TRUE" = the output relay is switched along with the output

· "FALSE" = the output relay is NOT switched along with the output





Return parameters



Parameter

Variable Type

Description



None





Usage Examples

HP66XX_SetOutput($InstrumentHandle, "ON", false);





Supported Instruments

664xA, 665xA, 667xA, 668xA System DC Power Supplies

603xA Autoranging System Dc Power Supplies (SCPI-compatible units only)

E4356A Telecommunications DC Power Supply





HP66XX_SetVoltage

Previous Top Next



* * *



HP66XX_SetVoltage



Usage:

HP66XX_SetVoltage($InstrumentHandle,$VoltageMode,$VoltageLevel);





Description:





This function directly programs the selected current parameter of the power supply.





Note: This driver requires the Agilent 66XX IVI Driver to be installed before using these functions.

Function arguments



Parameter

Variable Type

Description



$InstrumentHandle

Object

The handle of the instrument returned from the HP66XX_Init function



$VoltageMode

String

Specifies the Voltage Mode to be programmed. Allowable settings are:





· "HP66XX_VOLT_IMM" = Immediate Voltage Level

· "HP66XX_VOLT_TRIG" = Triggered Voltage Level

· "HP66XX_VOLT_OVP" = OVP Level

· "HP66XX_VOLT_OVP_MAX" = Maximum OVP

· "HP66XX_VOLT_OVP_MIN" = Minimum OVP



$VoltageLevel

Float

The voltage level to be programmed.





Return parameters



Parameter

Variable Type

Description



None





Usage Examples

HP66XX_SetVoltage($InstrumentHandle, "HP66XX_VOLT_IMM", 5.0);





Supported Instruments

664xA, 665xA, 667xA, 668xA System DC Power Supplies

603xA Autoranging System Dc Power Supplies (SCPI-compatible units only)

E4356A Telecommunications DC Power Supply





AG66XX_Close

Previous Top Next



* * *



AG66XX_Close



Usage:

AG66XX_Close($InstrumentHandle);





Description:





The close function terminates the software connection to the instrument and de-allocates system resources. It is generally a good programming habit to close the instrument handle when the program is done using the instrument.





Note: This function requires the Agilent 66XX IVI-COM Driver to be installed before using this function.

Function arguments



Parameter

Variable Type

Description



$InstrumentHandle

Object

The handle of the instrument returned from the AG66XX_Initialize function





Return parameters



Parameter

Variable Type

Description



None





Usage Examples

AG66XX_Close($InstrumentHandle);





Supported Instruments

664xA, 665xA, 667xA, 668xA System DC Power Supplies

603xA Autoranging System Dc Power Supplies (SCPI-compatible units only)

E4356A Telecommunications DC Power Supply





AG66XX_Initialize

Previous Top Next



* * *



AG66XX_Initialize



Usage:

$Handle = HP66XX_Initialize($InstrumentAddress,$QueryInstrument,$ResetInstrument,$OptionString);



Description:





The initialize function initializes the software connection to the instrument and optionally verifies that instrument is in the system. In addition, it may perform any necessary actions to place the instrument in its reset state.





The option string is optional, and can be set to an empty string.





Note:

· This function requires the Agilent 66XX IVI-COM Driver to be installed before using this function.

· Setting $QueryInstrument to true will check that the instrument specified by the resource string is a supported type of instrument. It will generate an error if it is not a supported instrument and will generate an error is no instrument is connected at that address. Setting $QueryInstrument to false will only generate an error if no instrument (of any type) is connected at the specified address.

Function arguments



Parameter

Variable Type

Description



$InstrumentAddress

String

The resource string of the instrument, for instance "GPIB0::5::INSTR"



$QueryInstrument

Boolean

Specifies whether or not to query the instrument on initialization.



$ResetInstrument

Boolean

Specifies whether or not to reset the instrument on initialization.



$OptionString

String

Specifies the initial values of certain IVI inherent attributes for the session.

The format of an assignment in the OptionString parameter is "Name=Value",

where Name is one of the option string names in the table below.

· RangeCheck=(true/false)

· QueryInstrStatus=(true/false)

· Cache=(true/false)

· Simulate=(true/false)

· RecordCoercions=(true/false)

· InterchangeCheck=(true/false)

· DriverSetup=(setup parameters, see driver documentation for additional details)





Return parameters



Parameter

Variable Type

Description



$Handle

Object

Returns the handle to the instrument to use in following instrument control functions.





Usage Examples

$Handle = AG66XX_Initialize("GPIB0::5::INSTR", false, true, "");





Supported Instruments

664xA, 665xA, 667xA, 668xA System DC Power Supplies

603xA Autoranging System Dc Power Supplies (SCPI-compatible units only)

E4356A Telecommunications DC Power Supply





AG66XX_MeasureCurrent

Previous Top Next



* * *



AG66XX_MeasureCurrent



Usage:

$Current = AG66XX_MeasureCurrent($InstrumentHandle);





Description:





This function measures the output current.





Note: This function requires the Agilent 66XX IVI-COM Driver to be installed before using this function.

Function arguments



Parameter

Variable Type

Description



$InstrumentHandle

Object

The handle of the instrument returned from the AG66XX_Initialize function





Return parameters



Parameter

Variable Type

Description



$Current

Float

The current from the power supply measured in amps.





Usage Examples

$Current = AG66XX_MeasureCurrent($InstrumentHandle);





Supported Instruments

664xA, 665xA, 667xA, 668xA System DC Power Supplies

603xA Autoranging System Dc Power Supplies (SCPI-compatible units only)

E4356A Telecommunications DC Power Supply





AG66XX_MeasureVoltage

Previous Top Next



* * *



AG66XX_MeasureVoltage



Usage:

$Voltage = AG66XX_MeasureVoltage($InstrumentHandle);





Description:





This function measures the output voltage.





Note: This function requires the Agilent 66XX IVI-COM Driver to be installed before using this function.

Function arguments



Parameter

Variable Type

Description



$InstrumentHandle

Object

The handle of the instrument returned from the AG66XX_Initialize function





Return parameters



Parameter

Variable Type

Description



$Voltage

Float

The voltage from the power supply measured in volts.





Usage Examples

$Voltage = AG66XX_MeasureVoltage($InstrumentHandle);





Supported Instruments

664xA, 665xA, 667xA, 668xA System DC Power Supplies

603xA Autoranging System Dc Power Supplies (SCPI-compatible units only)

E4356A Telecommunications DC Power Supply





AG66XX_SetOutputCurrentLimit

Previous Top Next



* * *



AG66XX_SetOutputCurrentLimit



Usage:

AG66XX_SetOutputCurrentLimit($InstrumentHandle,$CurrentLimitMode,$CurrentLimit);





Description:





This function sets the output current limit and it's tripping behavior.



Note: This function requires the Agilent 66XX IVI-COM Driver to be installed before using this function.

Function arguments



Parameter

Variable Type

Description



$InstrumentHandle

Object

The handle of the instrument returned from the AG66XX_Initialize function



$CurrentLimitBehavior

String

The current limiting behavior of the instrument. Allowable values are:

· "TRIP"

· "REGULATE"



$CurrentLevel

Float

The current limit setting in AMPS.





Return parameters



Parameter

Variable Type

Description



None





Usage Examples

AG66XX_SetOutputCurrentLimit($InstrumentHandle, "TRIP", 2.2);





Supported Instruments

664xA, 665xA, 667xA, 668xA System DC Power Supplies

603xA Autoranging System Dc Power Supplies (SCPI-compatible units only)

E4356A Telecommunications DC Power Supply





AG66XX_SetOutputEnable

Previous Top Next



* * *



AG66XX_SetOutputEnable



Usage:

AG66XX_SetOutputEnable($InstrumentHandle,$OutputState);





Description:





This function enables or disables the output of the instrument. The state of the disabled output is a condition of zero output voltage and current at the output terminals.





Note: This function requires the Agilent 66XX IVI-COM Driver to be installed before using this function.

Function arguments



Parameter

Variable Type

Description



$InstrumentHandle

Object

The handle of the instrument returned from the AG66XX_Init function



$OutputState

String

Specifies the output state of the instrument. Allowable settings are:

· "ON" = Output Enabled

· "OFF" = Output Disabled





Return parameters



Parameter

Variable Type

Description



None





Usage Examples

AG66XX_SetOutputEnable($InstrumentHandle, "ON");





Supported Instruments

664xA, 665xA, 667xA, 668xA System DC Power Supplies

603xA Autoranging System Dc Power Supplies (SCPI-compatible units only)

E4356A Telecommunications DC Power Supply





AG66XX_SetOutputVoltage

Previous Top Next



* * *



AG66XX_SetOutputVoltage



Usage:

AG66XX_SetOutputVoltage($InstrumentHandle,$Voltage);





Description:





This function sets the output voltage for the power supply.





Note: This function requires the Agilent 66XX IVI-COM Driver to be installed before using this function.

Function arguments



Parameter

Variable Type

Description



$InstrumentHandle

Object

The handle of the instrument returned from the HP66XX_Init function



$VoltageLevel

Float

The voltage level to be programmed.





Return parameters



Parameter

Variable Type

Description



None





Usage Examples

AG66XX_SetOutputVoltage($InstrumentHandle, 5.0);





Supported Instruments

664xA, 665xA, 667xA, 668xA System DC Power Supplies

603xA Autoranging System Dc Power Supplies (SCPI-compatible units only)

E4356A Telecommunications DC Power Supply





N57XX_Close

Previous Top Next



* * *



N57XX_CloseUsage:

N57XX_Close($Handle);

Description:Closes the I/O session to the instrument. Driver methods and properties that access the instrument are not accessible after Close is called.

Function Arguments



Parameter

Variable Type

Description



$Handle

Object

Handle of the instrument.





Return Parameters



Parameter

Variable Type

Description



none





N57XX_Init

Previous Top Next



* * *



N57XX_InitUsage:

$Handle =N57XX_Init($ResourceName, $IdQuery, $Reset, $OptionalString);

Description:

Opens the I/O session to the instrument. Driver methods and properties that access the instrument are only accessible after Initialize is called. Initialize optionally performs a Reset and queries the instrument to validate the instrument model.

This function returns the instrument handle.

Function Arguments



Parameter

Variable Type

Description



$ResourceName

String

GPIB address of the instrument



$IdQuery

Boolean

Specifies whether to verify the ID of the instrument. Allowed Values, "TRUE" or "FALSE"



$Reset

Boolean

Specifies whether to reset the instrument. Allowed Values, "TRUE" or "FALSE"



$OptionalString

String





Return Parameters



Parameter

Variable Type

Description



$Handle

Object

Instrument handle





N57XX_MeasureCurrent

Previous Top Next



* * *



N57XX_MeasureCurrentUsage:

$Current = N57XX_MeasureCurrent($Handle);

Description:

Measures the output current and returns the measured value.

Function Arguments



Parameter

Variable Type

Description



$Handle

Object

Handle of the instrument.





Return Parameters



Parameter

Variable Type

Description



$Current

Double

Measured current value in Amps





N57XX_MeasureVoltage

Previous Top Next



* * *



N57XX_MeasureVoltageUsage:

$Voltage = N57XX_MeasureVoltage($Handle);

Description:

Measures the output current and returns the measured value.

Function Arguments



Parameter

Variable Type

Description



$Handle

Object

Handle of the instrument.





Return Parameters



Parameter

Variable Type

Description



$Voltage

Double

Measured voltage value in volts





N57XX_Output

Previous Top Next



* * *



N57XX_OutputUsage:

N57XX_Output($Handle, $State);

Description:

Sets the output properties.

Function Arguments



Parameter

Variable Type

Description



$Handle

Object

Handle of the instrument



$State

String

Specifies whether the power module output is enabled or disabled. Acceptable values are "ON" and "OFF"





Return Parameters



Parameter

Variable Type

Description



None

None

None





N57XX_SetCurrent

Previous Top Next



* * *



N57XX_SetCurrent



Usage:

N57XX_SetCurrent($Handle, $CurrentLevel,$CurrentBehavior);

Description:





This function sets the current limit and the bevahior on the N57XX power supply. If the behavior is set to 'TRIP' then the output will trip into over current mode and disable the output. If the output is set to regulate, the power supply will attempt to regulate the amount of current flowing at the desired level.

Function Arguments



Parameter

Variable Type

Description



$Handle

Object

Handle of the instrument



$CurrentLevel

Double

Specifies the output current level. The units are amps.



$CurrentLimitBehavior

String

The current limiting behavior for the specified output. Allowable options are:

· "TRIP"

· "REGULATE"





Return Parameters



Parameter

Variable Type

Description



None

None

None





N57XX_SetVoltage

Previous Top Next



* * *



N57XX_SetVoltageUsage:

N57XX_SetVoltage($Handle, $Voltage_Level);

Description:

Sets the output properties.

Function Arguments



Parameter

Variable Type

Description



$Handle

Object

Handle of the instrument



$Voltage_Level

Double

Specifies the output voltage level. The units are volts.





Return Parameters



Parameter

Variable Type

Description



None

None

None





N67XX_Close

Previous Top Next



* * *



N67XX_Close



Usage:

N67XX_Close($InstrumentHandle);





Description:



The close function terminates the software connection to the instrument and de-allocates system resources. It is generally a good programming habit to close the instrument handle when the program is done using the instrument.





Remarks:



This instrument library requires the loading of the IVI-VISA library, the Keysight IO Libraries Suite and the N67xx Power Supply IVI and MatLab drivers.



Function arguments



Parameter

Variable Type

Description



$InstrumentHandle

Object

The handle of the instrument returned from the N67XX_Init function





Return parameters



Parameter

Variable Type

Description



None





Usage Examples

N67XX_Close($InstrumentHandle);





Supported Instruments

All Agilent N67xx Power Supply Mainframes





N67XX_ConfigureOVP

Previous Top Next



* * *



N67XX_ConfigureOVP



Usage:

N67XX_ConfigureOVP($InstrumentHandle,$OutputChannel,$VoltageLimit);





Description:



This function configures the over voltage protection for the specified output.





Remarks:



This instrument library requires the loading of the IVI-VISA library, the Keysight IO Libraries Suite and the N67xx Power Supply IVI and MatLab drivers.



Function arguments



Parameter

Variable Type

Description



$InstrumentHandle

Object

The handle of the instrument returned from the N67XX_Init function



$OutputChannel

Integer

The output channel to configure



$VoltageLimit

Float

The voltage limit for the specified output.





Return parameters



Parameter

Variable Type

Description



None





Usage Examples

N67XX_ConfigureOVP($InstrumentHandle,1,5.0);





Supported Instruments

All Agilent n67XX series power supply mainframes.





N67XX_ConfigureOutput

Previous Top Next



* * *



N67XX_ConfigureOutput



Usage:

N67XX_ConfigureOutput($InstrumentHandle,$OutputChannel,$VoltageLevel,$VoltageRange,$CurrentLimit,$CurrentLimitBehavior);





Description:



This function configures the specified output channel on the Agilent N67xx series power supply.





Remarks:



This instrument library requires the loading of the IVI-VISA library, the Keysight IO Libraries Suite and the N67xx Power Supply IVI and MatLab drivers.



Function arguments



Parameter

Variable Type

Description



$InstrumentHandle

Object

The handle of the instrument returned from the N67XX_Init function



$OutputChannel

Integer

The output channel to configure



$VoltageLevel

Float

The voltage level for the specified output



$VoltageRange

Float

The voltage range for the specified output



$CurrentLimit

Float

The current limit for the specified output



$CurrentLimitBehavior

String

The current limiting behavior for the specified output. Allowable options are:

· "TRIP"

· "REGULATE"





Return parameters



Parameter

Variable Type

Description



$Voltage

Float

The voltage from the power supply measured in volts.





Usage Examples

$Current = N67XX_ConfigureOutput($InstrumentHandle,1,5.0,5.0,1.0,"TRIP");





Supported Instruments

All Agilent n67XX series power supply mainframes.





N67XX_Init

Previous Top Next



* * *



N67XX_Init



Usage:

$Handle = N67XX_Init($InstrumentAddress, $QueryInstrument, $ResetInstrument, $OptionString);



Description:



The initialize function initializes the software connection to the instrument and optionally verifies that instrument is in the system. In addition, it may perform any necessary actions to place the instrument in its reset state.





Remarks:



This instrument library requires the loading of the IVI-VISA library, the Keysight IO Libraries Suite and the N67xx Power Supply IVI and MatLab drivers.



Function arguments



Parameter

Variable Type

Description



$InstrumentAddress

String

The resource string of the instrument, for instance "GPIB0::5::INSTR"



$QueryInstrument

Boolean

Specifies whether or not to query the instrument on initialization.



$ResetInstrument

Boolean

Specifies whether or not to reset the instrument on initialization.



$OptionString

String

Option String for extra parameters to be sent to the N67xx during initialization.





Return parameters



Parameter

Variable Type

Description



$Handle

Object

Returns the handle to the instrument to use in following instrument control functions.





Usage Examples

$Handle =N67XX_Init("GPIB0::5::INSTR","FALSE","TRUE","");





Supported Instruments

All Agilent n67XX series power supply mainframes.





N67XX_MeasureCurrent

Previous Top Next



* * *



N67XX_MeasureCurrent



Usage:

$Current = N67XX_MeasureCurrent($InstrumentHandle,$OutputChannel);





Description:



This function measures the output current on the specified channel.





Remarks:



This instrument library requires the loading of the IVI-VISA library, the Keysight IO Libraries Suite and the N67xx Power Supply IVI and MatLab drivers.



Function arguments



Parameter

Variable Type

Description



$InstrumentHandle

Object

The handle of the instrument returned from the N67XX_Init function



$OutputChannel

Integer

The output channel on which to perform the voltage measurement.





Return parameters



Parameter

Variable Type

Description



$Voltage

Float

The voltage from the power supply measured in volts.





Usage Examples

$Current = N67XX_MeasureCurrent($InstrumentHandle,$OutputChannel);





Supported Instruments

All Agilent n67XX series power supply mainframes.





N67XX_MeasureVoltage

Previous Top Next



* * *



N67XX_MeasureVoltage



Usage:

$Voltage = N67XX_MeasureVoltage($InstrumentHandle,$OutputChannel);





Description:



This function measures the output voltage on the specified channel.





Remarks:



This instrument library requires the loading of the IVI-VISA library, the Keysight IO Libraries Suite and the N67xx Power Supply IVI and MatLab drivers.



Function arguments



Parameter

Variable Type

Description



$InstrumentHandle

Object

The handle of the instrument returned from the N67XX_Init function



$OutputChannel

Integer

The output channel on which to perform the voltage measurement.





Return parameters



Parameter

Variable Type

Description



$Voltage

Float

The voltage from the power supply measured in volts.





Usage Examples

$Voltage = N67XX_MeasureVoltage($InstrumentHandle,$OutputChannel);





Supported Instruments

All Agilent n67XX series power supply mainframes.





N67XX_ResetOutputProtection

Previous Top Next



* * *



N67XX_ResetOutputProtection



Usage:

N67XX_ResetOutputProtection($InstrumentHandle,$OutputChannel);





Description:



This function resets the output protection on the supplied power supply output. It will clear over-current or over-voltage protection trips.





Remarks:



This instrument library requires the loading of the IVI-VISA library, the Keysight IO Libraries Suite and the N67xx Power Supply IVI and MatLab drivers.



Function arguments



Parameter

Variable Type

Description



$InstrumentHandle

Object

The handle of the instrument returned from the N67XX_Init function



$OutputChannel

Integer

The output channel on which to perform the voltage measurement.





Return parameters



Parameter

Variable Type

Description



None





Usage Examples

N67XX_ResetOutputProtection($InstrumentHandle,$OutputChannel);





Supported Instruments

All Agilent n67XX series power supply mainframes.





N67XX_SendCommand

Previous Top Next



* * *



N67XX_SendCommand



Usage:

N67XX_SendCommand($Handle,$Command,$ClearAndEnd);



Description:



This function passes a raw SCPI command to to the instrument to control functionality that isn't exposed via the device driver.



Remarks:



This instrument library requires the loading of the IVI-VISA library, the Keysight IO Libraries Suite and the N67xx Power Supply IVI and MatLab drivers.

The $ClearAndEnd boolean parameter instructs the instrument that the command is complete, and that it should clear the receive buffer.

NOTE: This function validates that the command was sent and received by the instrument successfully, but it doesn't validate that the command sent was processed successfully.



Function arguments



Parameter

Variable Type

Description



$Handle

Object

The handle of the instrument returned from the initialization function.



$Command

String

The command to be sent to the instrument.



$ClearAndEnd

Boolean

Specifies that the command is completed, and that the instrument should clear the receive buffer.





Return parameters



Parameter

Variable Type

Description



None





Example(s):

N67XX_SendCommand($Handle,”TRIGGER:A:MODE NORMAL”,true);





N67XX_SetOCPDelay

Previous Top Next



* * *



N67XX_SetOCPDelay



Usage:

N67XX_SetOCPDelay($InstrumentHandle,$Channel,$DelayTime);





Description:



This function adjusts the Overcurrent Protection Delay for the specified power supply channel. All other settings of the Over Current Protection mode are unaffected. The $DelayTime parameter is specified in seconds.





Remarks:



This instrument library requires the loading of the IVI-VISA library, the Keysight IO Libraries Suite and the N67xx Power Supply IVI and MatLab drivers.



Function arguments



Parameter

Variable Type

Description



$InstrumentHandle

Object

The handle of the instrument returned from the N67XX_Init function.



$Channel

Integer

· The output channel to configure



$DelayTime

Float

Specifies the delay time in seconds (i.e. 250 Milliseconds = 0.250)





Return parameters



Parameter

Variable Type

Description



None





Usage Examples

N67XX_SetOCPDelay($N67XX,1,0.250); // Sets OCP Delay to 250 Milliseconds





Supported Instruments

All Agilent n67XX series power supply mainframes.





N67XX_SetOutputState

Previous Top Next



* * *



N67XX_SetOutputState



Usage:

N67XX_SetOutputState($InstrumentHandle,$Channel,$OutputState);





Description:



This function enables or disables the output of the instrument. The state of the disabled output is a condition of zero output voltage and current at the output terminals.





Remarks:



This instrument library requires the loading of the IVI-VISA library, the Keysight IO Libraries Suite and the N67xx Power Supply IVI and MatLab drivers.



Function arguments



Parameter

Variable Type

Description



$InstrumentHandle

Object

The handle of the instrument returned from the N67XX_Init function.



$Channel

Integer

· The output channel to configure



$OutputState

String

Specifies the output state of the instrument. Allowable settings are:

· "ON" = Output Enabled

· "OFF" = Output Disabled





Return parameters



Parameter

Variable Type

Description



None





Usage Examples

N67XX_SetOutputState($InstrumentHandle,1,"ON");





Supported Instruments

All Agilent n67XX series power supply mainframes.





Keithley2303_Init

Previous Top Next



* * *



Keithley2303_Init



Usage:

Keithley2303_Init($InstrumentHandle);





Description:





Initializes the Instrument.

NOTE: Uses the NIVISA drivers.

Function arguments



Parameter

Variable Type

Description



$InstrumentHandle

Object

Handle of the instrument.





Return parameters



Parameter

Variable Type

Description



None





Usage Examples

$InstrumentHandle = NIVISA_Open("GPIB0::16::Instr");

Keithley2303_Init($InstrumentHandle);





Keithley2303_Read

Previous Top Next



* * *



Keithley2303_Read



Usage:

Keithley2303_Read($InstrumentHandle);





Description:





Asks the instrument for a reading. The returned value is based on the last setting of the unit. (i.e. "Volt," "Current," or "DVM").

NOTE: Uses the NIVISA drivers.

Function arguments



Parameter

Variable Type

Description



$InstrumentHandle

Object

This is the handle to the com port initialized.





Return parameters



Parameter

Variable Type

Description



Value

String

The reading from the Power Supply.





Usage Examples

Keithley2303_Read($InstrumentHandle);





Keithley2303_SetCurrLimit

Previous Top Next



* * *



Keithley2303_SetCurrLimit



Usage:

Keithley2303_SetCurrLimit($InstrumentHandle, $Limit);





Description:

Sets the Current Limit. (0 - 5) Amps.

NOTE: Uses the NIVISA drivers.

Function arguments



Parameter

Variable Type

Description



$InstrumentHandle

Object

This is the handle to the com port initialized.



$Limit

Float

Current Limit setting (0-5) Amps.





Return parameters



Parameter

Variable Type

Description



Value

String

The reading from the Power Supply.





Usage Examples

Keithley2303_SetCurrLimit($Handle,1.2);





Keithley2303_SetOutput

Previous Top Next



* * *



Keithley2303_SetOutput



Usage:

Keithley2303_SetOutput($InstrumentHandle, $State);





Description:

Sets the output of the supply to ON or OFF.

NOTE: Uses the NIVISA drivers.

Function arguments



Parameter

Variable Type

Description



$InstrumentHandle

Object

This is the handle to the com port initialized.



$State

String

"ON" - Turns the output on.

"OFF" - Turns the output off.





Return parameters



Parameter

Variable Type

Description



None





Usage Examples

Keithley2303_SetOutput($Handle,"ON");





Keithley2303_SetSensFunc

Previous Top Next



* * *



Keithley2303_SetSensFunc



Usage:

Keithley2303_SetSetSensFunc($InstrumentHandle,$Function);





Description:

Sets the sense reading function. The function may be "VOLT," "CURR," or "DVM."

NOTE: Uses the NIVISA drivers.

Function arguments



Parameter

Variable Type

Description



$InstrumentHandle

Object

This is the handle to the com port initialized.



$Function

String

"VOLT" - Voltage readback mode.

"CURR" - Current readback mode.

"DVM" - DVM measurements.





Return parameters



Parameter

Variable Type

Description



None





Usage Examples

Keithley2303_SetSensFunc($InstrumentHandle,"VOLT");





Keithley2303_SetSenseCurrRange

Previous Top Next



* * *



Keithley2303_SetSenseCurrRange



Usage:

Keithley2303_SetSetSenseCurrRange($InstrumentHandle,$State);





Description:

Sets the sense reading range. The range may be either MAX (5A range) or MIN (5mA range).

NOTE: Uses the NIVISA drivers.

Function arguments



Parameter

Variable Type

Description



$InstrumentHandle

Object

This is the handle to the com port initialized.



$State

String

"MAX" - 5A current readback range. "MIN" - 5mA current readback range.





Return parameters



Parameter

Variable Type

Description



None





Usage Examples

Keithley2303_SetSenseCurrRange($Handle,"MAX");





Keithley2303_SetVoltage

Previous Top Next



* * *



Keithley2303_SetVoltage



Usage:

Keithley2303_SetVoltage($InstrumentHandle, $Voltage);





Description:

Sets the Output Voltage. (0 - 15) Volts.

NOTE: Uses the NIVISA drivers.

Function arguments



Parameter

Variable Type

Description



$InstrumentHandle

Object

This is the handle to the com port initialized.



$Voltage

Float

Voltage Setting (0 - 15) Volts.





Return parameters



Parameter

Variable Type

Description



None





Usage Examples

Keithley2303_SetVoltage($InstrumentHandle,5.2);





TenmaPS_Close

Previous Top Next



* * *



TenmaPS_Close



Usage:

TenmaPS_Close($InstrumentId);



Description:





This function closes the communication session with the instrument. The current instrument settings are not affected.





Function arguments



Parameter

Variable Type

Description



$InstrumentID

Integer

The instrument identifier returned from the Tenma_PS script function.





Return parameters



Parameter

Variable Type

Description



None





Usage Examples

TenmaPS_Close($InstrumentId);





Note: This driver is for a non IVI Compliant Device.





Supported Instruments

All Tenma Power Supplies





TenmaPS_Init

Previous Top Next



* * *



TenmaPS_Init



Usage:

$InstrumentID = TenmaPS_Init($GPIBAddress);

Description:



The initialize function connects to the instrument and sets it to a known state.





Function arguments



Parameter

Variable Type

Description



$GPIBAddress

Integer

The GPIB Address of the Device.





Return parameters



Parameter

Variable Type

Description



$InstrumentID

Integer

Returns an Integer indicating the ID number of the power supply.





Usage Examples

$InstrumentID =TenmaPS_Init(7);





Note: This driver is for a non IVI Compliant Device.

Supported Instruments

All Tenma Power Supplies





TenmaPS_MeasureCurrent

Previous Top Next



* * *



TenmaPS_MeasureCurrent



Usage:

$Current = TenmaPS_MeasureCurrent($InstrumentId);



Description:





This function measures the present current draw on the power supply's output.





Function arguments



Parameter

Variable Type

Description



$InstrumentID

Integer

The instrument identifier returned from the Tenma_PS script function.





Return parameters



Parameter

Variable Type

Description



$Current

Float

The instrument's present current draw.





Usage Examples

$Current = TenmaPS_MeasureCurrent($InstrumentId);





Note: This driver is for a non IVI Compliant Device.





Supported Instruments

All Tenma Power Supplies





TenmaPS_MeasureVoltage

Previous Top Next



* * *



TenmaPS_MeasureVoltage



Usage:

$Voltage = TenmaPS_MeasureVoltage($InstrumentId);



Description:





This function measures the present voltage potential on the power supply's output.





Function arguments



Parameter

Variable Type

Description



$InstrumentID

Integer

The instrument identifier returned from the Tenma_PS script function.





Return parameters



Parameter

Variable Type

Description



$Voltage

Float

The instrument's present voltage potential.





Usage Examples

$Voltage = TenmaPS_MeasureVoltage($InstrumentId);





Note: This driver is for a non IVI Compliant Device.





Supported Instruments

All Tenma Power Supplies





TenmaPS_SetOutput

Previous Top Next



* * *



TenmaPS_SetOutput



Usage:

TenmaPS_SetOutput($InstrumentId,$Voltage,$Current);

Description:



This function sets the instrument output to a desired voltage and current. This function does not affect whether the output of the supply is enabled or disabled.





Function arguments



Parameter

Variable Type

Description



$InstrumentID

Integer

The instrument identifier returned from the Tenma_PS script function.





Return parameters



Parameter

Variable Type

Description



None





Usage Examples

TenmaPS_SetOutput($InstrumentId,5.0,1.0);





Note: This driver is for a non IVI Compliant Device.





Supported Instruments

All Tenma Power Supplies





TenmaPS_SetVoltageProtection

Previous Top Next



* * *



TenmaPS_SetVoltageProtection



Usage:

TenmaPS_SetVoltageProtection($InstrumentId,$VoltageProtectionLevel);



Description:





This function sets the voltage protection limit on the instrument.





Function arguments



Parameter

Variable Type

Description



$InstrumentID

Integer

The instrument identifier returned from the Tenma_PS script function.



$VoltageProtectionLevel

Float

The desired voltage protection level for the instrument.





Return parameters



Parameter

Variable Type

Description



None





Usage Examples

TenmaPS_SetVoltageProtection($InstrumentId,6.00);





Note: This driver is for a non IVI Compliant Device.





Supported Instruments

All Tenma Power Supplies





TenmaPS_SwitchOutput

Previous Top Next



* * *



TenmaPS_SwitchOutput



Usage:

TenmaPS_SwitchOutput($InstrumentId,$Enabled);



Description:





This function enables and disables the output of the power supply.





Function arguments



Parameter

Variable Type

Description



$InstrumentID

Integer

The instrument identifier returned from the Tenma_PS script function.



$Enabled

Boolean

Sets the output state of the power supply:

· "TRUE" = Output is Enabled

· "FALSE" = Output is Disabled





Return parameters



Parameter

Variable Type

Description



None





Usage Examples

TenmaPS_SwitchOutput($InstrumentId,"TRUE");





Note: This driver is for a non IVI Compliant Device.





Supported Instruments

All Tenma Power Supplies





AG60XX_Close

Previous Top Next



* * *



AG60XX_Close



Usage:

AG60XX_Close($InstrumentHandle);





Description:





The close function terminates the software connection to the instrument and de-allocates system resources. It is generally a good programming habit to close the instrument handle when the program is done using the instrument.





Function arguments



Parameter

Variable Type

Description



$InstrumentHandle

Object

The handle of the instrument returned from the AG60XX_Init function





Return parameters



Parameter

Variable Type

Description



None





Usage Examples

AG60XX_Close($InstrumentHandle);





Supported Instruments

6060B, 6063B, 6050A, 6051A System Electronic Loads and Electronic Load Mainframes

60501B, 60502B, 60503B, 60504B, 60507B Electronic Load Mainframe modules





AG60XX_ConfigureContinuousTransient

Previous Top Next



* * *



AG60XX_ConfigureContinuousTransient



Usage:

AG60XX_ConfigureContinuousTransient($InstrumentHandle,$OperationMode,$DutyCycle,$Frequency,$ImmediateLevel,$TransientLevel);





Description:





This function configures the instrument for continuous transient mode operation. Continuous transients are oscillating currents, resistances, or voltages with a programmable frequency and duty cycle. This is a convenience function which allows for configuring all instrument settings in a single function.

Function arguments



Parameter

Variable Type

Description



$InstrumentHandle

Object

The handle of the instrument returned from the AG60XX_Init function



$OperationMode

String

Selects the operational mode of the DC Load. Allowable values are:

· "CURRENT"

· "RESISTANCE"

· "VOLTAGE"



$DutyCycle

Float

The percentage of the total cycle for which the output remains at the transient level.



$Frequency

Float

The frequency of the oscillations



$ImmediateLevel

Float

The immediate level for the specified mode.



$TransientLevel

Float

The transient level for the specified mode.





Return parameters



Parameter

Variable Type

Description



None





Usage Examples

AG60XX_ConfigureContinuousTransient($InstrumentHandle,"VOLTAGE",50,10,5,2);





Supported Instruments

6060B, 6063B, 6050A, 6051A System Electronic Loads and Electronic Load Mainframes

60501B, 60502B, 60503B, 60504B, 60507B Electronic Load Mainframe modules





AG60XX_ConfigureInput

Previous Top Next



* * *



AG60XX_ConfigureInput



Usage:

AG60XX_ConfigureInput($InstrumentHandle,$OperationMode,$Level);





Description:





This function sets the instrument's mode of operation, corresponding input level, and enables the input.

Function arguments



Parameter

Variable Type

Description



$InstrumentHandle

Object

The handle of the instrument returned from the AG60XX_Init function



$OperationMode

String

Selects the operational mode of the DC Load. Allowable values are:

· "CURRENT"

· "RESISTANCE"

· "VOLTAGE"



$Level

Float

The instrument's corresponding immediate level for it's specified mode.





Return parameters



Parameter

Variable Type

Description



None





Usage Examples

AG60XX_ConfigureInput($InstrumentHandle,"VOLTAGE",10);





Supported Instruments

6060B, 6063B, 6050A, 6051A System Electronic Loads and Electronic Load Mainframes

60501B, 60502B, 60503B, 60504B, 60507B Electronic Load Mainframe modules





AG60XX_Init

Previous Top Next



* * *



AG60XX_Init



Usage:

$InstrumentHandle = AG60XX_Init($ResourceName,$Reset);





Description:





This function initializes a session with the instrument and returns the handle to the test script.

Function arguments



Parameter

Variable Type

Description



$ResourceName

String

The resource name of the instrument.



$Reset

Boolean

Specifies whether or not to reset the instrument on initialization.





Return parameters



Parameter

Variable Type

Description



$InstrumentHandle

Object

The instrument handle for the instrument.





Usage Examples

$InstrumentHandle = AG60XX_Init("GPIB0::5::INSTR","TRUE");





Supported Instruments

6060B, 6063B, 6050A, 6051A System Electronic Loads and Electronic Load Mainframes

60501B, 60502B, 60503B, 60504B, 60507B Electronic Load Mainframe modules





AG60XX_MeasureCurrent

Previous Top Next



* * *



AG60XX_MeasureCurrent



Usage:

$MeasuredCurrent = AG60XX_MeasureCurrent($InstrumentHandle);





Description:





This function returns the current at the input of the electronic load.

Function arguments



Parameter

Variable Type

Description



$InstrumentHandle

Object

The handle of the instrument returned from the AG60XX_Init function





Return parameters



Parameter

Variable Type

Description



$MeasuredCurrent

Float

The measured current





Usage Examples

$MeasuredCurrent = AG60XX_MeasureCurrent($InstrumentHandle);





Supported Instruments

6060B, 6063B, 6050A, 6051A System Electronic Loads and Electronic Load Mainframes

60501B, 60502B, 60503B, 60504B, 60507B Electronic Load Mainframe modules





AG60XX_MeasurePower

Previous Top Next



* * *



AG60XX_MeasurePower



Usage:

$MeasuredPower = AG60XX_MeasurePower($InstrumentHandle);





Description:





This function returns the power at the input of the electronic load.

Function arguments



Parameter

Variable Type

Description



$InstrumentHandle

Object

The handle of the instrument returned from the AG60XX_Init function





Return parameters



Parameter

Variable Type

Description



$MeasuredPower

Float

The measured power





Usage Examples

$MeasuredPower = AG60XX_MeasurePower($InstrumentHandle);





Supported Instruments

6060B, 6063B, 6050A, 6051A System Electronic Loads and Electronic Load Mainframes

60501B, 60502B, 60503B, 60504B, 60507B Electronic Load Mainframe modules





AG60XX_MeasureVoltage

Previous Top Next



* * *



AG60XX_MeasureVoltage



Usage:

$MeasuredVoltage = AG60XX_MeasureVoltage($InstrumentHandle);





Description:





This function returns the voltage at the input of the electronic load.

Function arguments



Parameter

Variable Type

Description



$InstrumentHandle

Object

The handle of the instrument returned from the AG60XX_Init function





Return parameters



Parameter

Variable Type

Description



$MeasuredVoltage

Float

The measured voltage





Usage Examples

$MeasuredVoltage = AG60XX_MeasureVoltage($InstrumentHandle);





Supported Instruments

6060B, 6063B, 6050A, 6051A System Electronic Loads and Electronic Load Mainframes

60501B, 60502B, 60503B, 60504B, 60507B Electronic Load Mainframe modules





AG60XX_SetCurrent

Previous Top Next



* * *



AG60XX_SetCurrent



Usage:

AG60XX_SetCurrent($InstrumentHandle,$CurrentParameter,$Current);





Description:





This function configures the specified current instrument parameter.

Function arguments



Parameter

Variable Type

Description



$InstrumentHandle

Object

The handle of the instrument returned from the AG60XX_Init function



$CurrentParameter

String

This parameter selects the current setting to configure. Supported values are:





· "CURR"

· "CURR_MAX"

· "CURR_MIN"

· "CURR_SLEW"

· "CURR_SLEW_MAX"

· "CURR_SLEW_MIN"

· "CURR_TLEV"

· "CURR_TLEV_MAX"

· "CURR_TLEV_MIN"

· "CURR_TRIG"

· "CURR_TRIG_MAX"

· "CURR_TRIG_MIN"





$Current

Float

The specified value for the selected current parameter.





Return parameters



Parameter

Variable Type

Description



None





Usage Examples

AG60XX_SetCurrent($InstrumentHandle,"CURR_MAX",3);





Supported Instruments

6060B, 6063B, 6050A, 6051A System Electronic Loads and Electronic Load Mainframes

60501B, 60502B, 60503B, 60504B, 60507B Electronic Load Mainframe modules





AG60XX_SetCurrentProtection

Previous Top Next



* * *



AG60XX_SetCurrentProtection



Usage:

AG60XX_SetCurrentProtection($InstrumentHandle,$Enabled,$Delay,$CurrentLimit);





Description:





This function sets a limit to the input current that the electronic load will sink. A current limit may be specified for the single electronic load or for a channel of the multiple electronic load. When the input current reaches the current limit for the specified delay period, the input of the electronic load or channel is shut off and draws no current. This, in effect, provides a "soft circuit breaker" for the input current. The clear input protection function re--enables the input current. The tr igger--activated current functions automatically keep track of incoming triggers while the input is shut down and will respond to the trigger as soon as the protection fault is cleared.

Function arguments



Parameter

Variable Type

Description



$InstrumentHandle

Object

The handle of the instrument returned from the AG60XX_Init function



$Enabled

String

Specifies if the Current Protection is enabled. Allowable values are:

· "ON"

· "OFF"



$Delay

Float

The duration in milliseconds that the current is allowed to equal or exceed the protection limit before the device is disengaged.



$CurrentLimit

Float

The maximum current level that the device can sink without enabling the protection circuit.





Return parameters



Parameter

Variable Type

Description



None





Usage Examples

AG60XX_SetCurrentProtection($Handle,"ON",5000,10.00);





Supported Instruments

6060B, 6063B, 6050A, 6051A System Electronic Loads and Electronic Load Mainframes

60501B, 60502B, 60503B, 60504B, 60507B Electronic Load Mainframe modules





AG60XX_SetInputState

Previous Top Next



* * *



AG60XX_SetInputState



Usage:

AG60XX_SetInputState($InstrumentHandle,$InputState);





Description:





This function enables and disables the instrument input.

Function arguments



Parameter

Variable Type

Description



$InstrumentHandle

Object

The handle of the instrument returned from the AG60XX_Init function



$InputState

String

Selects the input state of the DC Load. Allowable values are:

· "OFF"

· "ON"





Return parameters



Parameter

Variable Type

Description



None





Usage Examples

AG60XX_SetInputState($InstrumentHandle,"ON");





Supported Instruments

6060B, 6063B, 6050A, 6051A System Electronic Loads and Electronic Load Mainframes

60501B, 60502B, 60503B, 60504B, 60507B Electronic Load Mainframe modules





AG60XX_SetVoltage

Previous Top Next



* * *



AG60XX_SetVoltage



Usage:

AG60XX_SetVoltage($InstrumentHandle,$VoltageParameter,$Voltage);





Description:





This function configures the specified voltage instrument parameter.

Function arguments



Parameter

Variable Type

Description



$InstrumentHandle

Object

The handle of the instrument returned from the AG60XX_Init function



$VoltageParameter

String

This parameter selects the voltage setting to configure. Supported values are:





· "VOLT"

· "VOLT_MAX"

· "VOLT_MIN"

· "VOLT_SLEW"

· "VOLT_SLEW_MAX"

· "VOLT_SLEW_MIN"

· "VOLT_TLEV"

· "VOLT_TLEV_MAX"

· "VOLT_TLEV_MIN"

· "VOLT_TRIG"

· "VOLT_TRIG_MAX"

· "VOLT_TRIG_MIN"





$Voltage

Float

The value for the specified instrument parameter.





Return parameters



Parameter

Variable Type

Description



None





Usage Examples

AG60XX_SetVoltage($InstrumentHandle,"VOLT_MAX",30);





Supported Instruments

6060B, 6063B, 6050A, 6051A System Electronic Loads and Electronic Load Mainframes

60501B, 60502B, 60503B, 60504B, 60507B Electronic Load Mainframe modules





AGN330X_Close

Previous Top Next



* * *



AGN330X_Close



Usage:

AGN330X_Close($InstrumentHandle);





Description:





The close function terminates the software connection to the instrument and de-allocates system resources. It is generally a good programming habit to close the instrument handle when the program is done using the instrument.





Function arguments



Parameter

Variable Type

Description



$InstrumentHandle

Object

The handle of the instrument returned from the AGN30XX_Init function





Return parameters



Parameter

Variable Type

Description



None





Usage Examples

AGN330X_Close($InstrumentHandle);





Supported Instruments

Agilent N3300A, N3301A,N3302A,N3303A,N3304A,N3305A,N3306A System Electronic Loads and Electronic Load Mainframes





AGN330X_ConfigureContinuousTransient

Previous Top Next



* * *



AGN330X_ConfigureContinuousTransient



Usage:

AGN330X_ConfigureContinuousTransient($InstrumentHandle,$Channel,$OperationMode,$DutyCycle,$Frequency,$ImmediateLevel,$TransientLevel);





Description:





This function configures the instrument for continuous transient mode operation. Continuous transients are oscillating currents, resistances, or voltages with a programmable frequency and duty cycle. This is a convenience function which allows for configuring all instrument settings in a single function.

Function arguments



Parameter

Variable Type

Description



$InstrumentHandle

Object

The handle of the instrument returned from the AGN330X_Init function



$Channel

Integer

· The channel of the instrument to configure



$OperationMode

String

Selects the operational mode of the DC Load. Allowable values are:

· "CURRENT"

· "RESISTANCE"

· "VOLTAGE"



$DutyCycle

Float

The percentage of the total cycle for which the output remains at the transient level.



$Frequency

Float

The frequency of the oscillations



$ImmediateLevel

Float

The immediate level for the specified mode.



$TransientLevel

Float

The transient level for the specified mode.





Return parameters



Parameter

Variable Type

Description



None





Usage Examples

AGN330X_ConfigureContinuousTransient($handle,1,"RESISTANCE","50","2",1000,2000);





Supported Instruments

Agilent N3300A, N3301A,N3302A,N3303A,N3304A,N3305A,N3306A System Electronic Loads and Electronic Load Mainframes





AGN330X_ConfigureInput

Previous Top Next



* * *



AGN330X_ConfigureInput



Usage:

AGN330X_ConfigureInput($InstrumentHandle,$Channel,$OperationMode,$Level);





Description:





This function sets the instrument's mode of operation, corresponding input level, and enables the input.

Function arguments



Parameter

Variable Type

Description



$InstrumentHandle

Object

The handle of the instrument returned from the AGN330X_Init function



$Channel

Integer

· Channel Number to Configure



$OperationMode

String

Selects the operational mode of the DC Load. Allowable values are:

· "CURRENT"

· "RESISTANCE"

· "VOLTAGE"



$Level

Float

The instrument's corresponding immediate level for it's specified mode.





Return parameters



Parameter

Variable Type

Description



None





Usage Examples

AGN330X_ConfigureInput($handle,2,"RESISTANCE",1000);

AGN330X_ConfigureInput($handle,1,"CURRENT",2.0);

AGN330X_ConfigureInput($handle,1,"VOLTAGE",25);





Supported Instruments

Agilent N3300A, N3301A,N3302A,N3303A,N3304A,N3305A,N3306A System Electronic Loads and Electronic Load Mainframes





AGN330X_Init

Previous Top Next



* * *



AGN330X_Init



Usage:

$InstrumentHandle = AGN330X_Init($ResourceName,$Reset);





Description:





This function initializes a session with the instrument and returns the handle to the test script.

Function arguments



Parameter

Variable Type

Description



$ResourceName

String

The resource name of the instrument.



$Reset

Boolean

Specifies whether or not to reset the instrument on initialization.





Return parameters



Parameter

Variable Type

Description



$InstrumentHandle

Object

The instrument handle for the instrument.





Usage Examples

$handle = AGN330X_Init("GPIB0::5::INSTR","TRUE","TRUE");





Supported Instruments

Agilent N3300A, N3301A,N3302A,N3303A,N3304A,N3305A,N3306A System Electronic Loads and Electronic Load Mainframes





AGN330X_MeasureCurrent

Previous Top Next



* * *



AGN330X_MeasureCurrent



Usage:

$MeasuredCurrent = AGN330X_MeasureCurrent($InstrumentHandle,$Channel,$MeasurementType);





Description:





This function returns the current at the input of the electronic load.

Function arguments



Parameter

Variable Type

Description



$InstrumentHandle

Object

The handle of the instrument returned from the AG60XX_Init function



$Channel

Integer

The Channel to be measured



$MeasurementType

String

The type of current measurement to perform. Allowable values are:

· "ACDC"

· "CURRENT"

· "MAX"

· "MIN"





Return parameters



Parameter

Variable Type

Description



$MeasuredCurrent

Float

The measured current





Usage Examples

$Current = AGN330X_MeasureCurrent($handle,$Channel,"CURRENT");





Supported Instruments

Agilent N3300A, N3301A,N3302A,N3303A,N3304A,N3305A,N3306A System Electronic Loads and Electronic Load Mainframes





AGN330X_MeasurePower

Previous Top Next



* * *



AGN330X_MeasurePower



Usage:

$MeasuredPower = AGN330X_MeasurePower($InstrumentHandle,$Channel,$MeasurementType);





Description:





This function returns the power at the input of the electronic load.

Function arguments



Parameter

Variable Type

Description



$InstrumentHandle

Object

The handle of the instrument returned from the AG60XX_Init function



$Channel

Integer

The Channel to be measured



$MeasurementType

String

The type of power measurement to perform. Allowable values are:

· "POWER"

· "MAX"

· "MIN"





Return parameters



Parameter

Variable Type

Description



$MeasuredPower

Float

The measured power





Usage Examples

$Power1 = AGN330X_MeasurePower($handle,$Channel,"POWER");





Supported Instruments

Agilent N3300A, N3301A,N3302A,N3303A,N3304A,N3305A,N3306A System Electronic Loads and Electronic Load Mainframes





AGN330X_MeasureVoltage

Previous Top Next



* * *



AGN330X_MeasureVoltage



Usage:

$MeasuredVoltage = AGN330X_MeasureVoltage($InstrumentHandle,$Channel,$MeasurementType);





Description:





This function returns the voltage at the input of the electronic load.

Function arguments



Parameter

Variable Type

Description



$InstrumentHandle

Object

The handle of the instrument returned from the AGN330X_Init function



$Channel

Integer

The Channel to be measured



$MeasurementType

String

The type of power measurement to perform. Allowable values are:

· "VOLT"

· "ACDC"

· "MIN"

· "MAX"





Return parameters



Parameter

Variable Type

Description



$MeasuredVoltage

Float

The measured voltage





Usage Examples

$Voltage = AGN330X_MeasureVoltage($handle,1,"VOLT");





Supported Instruments

Agilent N3300A, N3301A,N3302A,N3303A,N3304A,N3305A,N3306A System Electronic Loads and Electronic Load Mainframes





AGN330X_SetCurrent

Previous Top Next



* * *



AG60XX_SetCurrent



Usage:

AG60XX_SetCurrent($InstrumentHandle,$Channel,$CurrentParameter,$Current);





Description:





This function configures the specified current instrument parameter.

Function arguments



Parameter

Variable Type

Description



$InstrumentHandle

Object

The handle of the instrument returned from the AG60XX_Init function



$Channel

Integer

The channel to be configured



$CurrentParameter

String

This parameter selects the current setting to configure. Supported values are:





· "CURR"

· "CURR_MAX"

· "CURR_MIN"

· "CURR_SLEW"

· "CURR_SLEW_MAX"

· "CURR_SLEW_MIN"

· "CURR_SLEW_NEG"

· "CURR_SLEW_NEG_MAX"

· "CURR_SLEW_NEG_MIN"

· "CURR_SLEW_POS"

· "CURR_SLEW_POS_MAX"

· "CURR_SLEW_POS_MIN"

· "CURR_TLEV"

· "CURR_TLEV_MAX"

· "CURR_TLEV_MIN"

· "CURR_TRIG"

· "CURR_TRIG_MAX"

· "CURR_TRIG_MIN"





$Current

Float

The specified value for the selected current parameter.





Return parameters



Parameter

Variable Type

Description



None





Usage Examples

AGN330X_SetCurrent($handle,$Channel,"CURR",1.25);





Supported Instruments

Agilent N3300A, N3301A,N3302A,N3303A,N3304A,N3305A,N3306A System Electronic Loads and Electronic Load Mainframes





AGN330X_SetCurrentProtection

Previous Top Next



* * *



AGN330X_SetCurrentProtection



Usage:

AGN330X_SetCurrentProtection($InstrumentHandle,$Channel,$Enabled,$Delay,$CurrentLimit);





Description:





This function sets a limit to the input current that the electronic load will sink. A current limit may be specified for the single electronic load or for a channel of the multiple electronic load. When the input current reaches the current limit for the specified delay period, the input of the electronic load or channel is shut off and draws no current. This, in effect, provides a "soft circuit breaker" for the input current. The clear input protection function re--enables the input current. The tr igger--activated current functions automatically keep track of incoming triggers while the input is shut down and will respond to the trigger as soon as the protection fault is cleared.

Function arguments



Parameter

Variable Type

Description



$InstrumentHandle

Object

The handle of the instrument returned from the AGN330X_Init function



$Channel

Integer

· Channel For Current Protection



$Enabled

String

Specifies if the Current Protection is enabled. Allowable values are:

· "ON"

· "OFF"



$Delay

Float

The duration in milliseconds that the current is allowed to equal or exceed the protection limit before the device is disengaged.



$CurrentLimit

Float

The maximum current level that the device can sink without enabling the protection circuit.





Return parameters



Parameter

Variable Type

Description



None





Usage Examples

AGN330X_SetCurrentProtection($handle,1,"TRUE","1000",5);





Supported Instruments

Agilent N3300A, N3301A,N3302A,N3303A,N3304A,N3305A,N3306A System Electronic Loads and Electronic Load Mainframes





AGN330X_SetCurrentRange

Previous Top Next



* * *



AGN330X_SetCurrentRange



Usage:

AGN30XX_SetCurrentRange($InstrumentHandle,$RangeType,$RangeValue);





Description:





This function selects the full--scale current range of the electronic load. Programming any value within the low range automatically selects the low range and programming any value within the high range automatically selects that range.





Notes:

· Whenever the electronic load changes resistance range, the input momentarily goes into the off state.





· The simplest way to set the range is to use the 'SPECIFIED' parameter which sets the range based off of the desired value.





· If the range type and supplied value for the range contradict, no error will be generated, but the modification will not take effect.





Function arguments



Parameter

Variable Type

Description



$InstrumentHandle

Object

The handle of the instrument returned from the AG60XX_Init function



$RangeType

String

The current Range Type. Allowable values are:

· "SPECIFIED" = Sets the range type based on the value supplied in the $RangeValue parameter.

· "MIN" = Sets the minimum Range

· "MAX" = Sets the Maximum Range



$RangeValue

Float

The desired value for the range. If "MIN" or "MAX" is specified for the function, this value has no effect.





Return parameters



Parameter

Variable Type

Description



None





Usage Examples

AGN330X_SetCurrentRange($AGN330X,"MAX",10);

AGN330X_ConfigureInput($AGN330X,1,"CURRENT",10);





Supported Instruments

Agilent N3300A, N3301A,N3302A,N3303A,N3304A,N3305A,N3306A System Electronic Loads and Electronic Load Mainframes





AGN330X_SetInputState

Previous Top Next



* * *



AGN330X_SetInputState



Usage:

AGN30XX_SetInputState($InstrumentHandle,$Channel,$InputState);





Description:





This function enables and disables the specified instrument input.

Function arguments



Parameter

Variable Type

Description



$InstrumentHandle

Object

The handle of the instrument returned from the AG60XX_Init function



$InputState

Boolean

Selects the input state of the DC Load. Allowable values are:

· "TRUE" = Input Enabled

· "FALSE" = Input Disabled





Return parameters



Parameter

Variable Type

Description



None





Usage Examples

AGN330X_SetInputState($InstrumentHandle,$Channel,"ON");





Supported Instruments

Agilent N3300A, N3301A,N3302A,N3303A,N3304A,N3305A,N3306A System Electronic Loads and Electronic Load Mainframes





AGN330X_SetResistanceRange

Previous Top Next



* * *



AGN330X_SetResistanceRange



Usage:

AGN30XX_SetResistanceRange($InstrumentHandle,$RangeType,$RangeValue);





Description:

The function selects the full--scale resistance range of the electronic load. Programming any value equal to or greater than zero and less than or equal to the maximum value of the lowest range automatically selects that range. Programming any value greater than the minimum range and less than or equal to the maximum value of the middle range automatically selects that range. There is no overlap between the low and middle ranges. Programming a value greater than the maximum value of the middle range automatically selects the highest value.





Notes:

· Whenever the electronic load changes resistance range, the input momentarily goes into the off state.





· The simplest way to set the range is to use the 'SPECIFIED' parameter which sets the range based off of the desired value.





· If the range type and supplied value for the range contradict, no error will be generated, but the modification will not take effect.





Function arguments



Parameter

Variable Type

Description



$InstrumentHandle

Object

The handle of the instrument returned from the AG60XX_Init function



$RangeType

String

The resistance Range Type. Allowable values are:

· "SPECIFIED" = Sets the range type based on the value supplied in the $RangeValue parameter.

· "MIN" = Sets the minimum Range

· "MAX" = Sets the Maximum Range



$RangeValue

Float

The desired value for the range. If "MIN" or "MAX" is specified for the function, this value has no effect.





Return parameters



Parameter

Variable Type

Description



None





Usage Examples

AGN330X_SetResistanceRange($AGN330X,"SPECIFIED",2000);

AGN330X_ConfigureInput($AGN330X,1,"RESISTANCE",2000);





Supported Instruments

Agilent N3300A, N3301A,N3302A,N3303A,N3304A,N3305A,N3306A System Electronic Loads and Electronic Load Mainframes





AGN330X_SetVoltage

Previous Top Next



* * *



AGN330X_SetVoltage



Usage:

AGN330X_SetVoltage($InstrumentHandle,$Channel,$VoltageParameter,$Voltage);





Description:





This function configures the specified voltage instrument parameter on the specified channel.

Function arguments



Parameter

Variable Type

Description



$InstrumentHandle

Object

The handle of the instrument returned from the AG60XX_Init function



$Channel

Integer

The channel to be configured.



$VoltageParameter

String

This parameter selects the voltage setting to configure. Supported values are:





· "VOLT"

· "VOLT_MAX"

· "VOLT_MIN"

· "SLEW"

· "SLEW_MAX"

· "SLEW_MIN"

· "SLEW_NEG"

· "SLEW_NEG_MAX"

· "SLEW_NEG_MIN"

· "SLEW_POS"

· "SLEW_POS_MAX"

· "SLEW_POS_MIN"

· "TLEV"

· "TLEV_MAX"

· "TLEV_MIN"

· "TRIG"

· "TRIG_MAX"

· "TRIG_MIN"





$Voltage

Float

The value for the specified instrument parameter.





Return parameters



Parameter

Variable Type

Description



None





Usage Examples

AGN330X_SetVoltage($handle,1,"VOLT",25);





Supported Instruments

Agilent N3300A, N3301A,N3302A,N3303A,N3304A,N3305A,N3306A System Electronic Loads and Electronic Load Mainframes





AGN330X_SetVoltageRange

Previous Top Next



* * *



AGN330X_SetVoltageRange



Usage:

AGN30XX_SetVoltageRange($InstrumentHandle,$RangeType,$RangeValue);





Description:

This function sets the voltage range at the electronic load.





Notes:

· Whenever the electronic load changes resistance range, the input momentarily goes into the off state.





· The simplest way to set the range is to use the 'SPECIFIED' parameter which sets the range based off of the desired value.





· If the range type and supplied value for the range contradict, no error will be generated, but the modification will not take effect.





Function arguments



Parameter

Variable Type

Description



$InstrumentHandle

Object

The handle of the instrument returned from the AG60XX_Init function



$RangeType

String

The voltage Range Type. Allowable values are:

· "SPECIFIED" = Sets the range type based on the value supplied in the $RangeValue parameter.

· "MIN" = Sets the minimum Range

· "MAX" = Sets the Maximum Range



$RangeValue

Float

The desired value for the range. If "MIN" or "MAX" is specified for the function, this value has no effect.





Return parameters



Parameter

Variable Type

Description



None





Usage Examples





Supported Instruments

Agilent N3300A, N3301A,N3302A,N3303A,N3304A,N3305A,N3306A System Electronic Loads and Electronic Load Mainframes





BK8500_DisableEnableLoadTimer

Previous Top Next



* * *



BK8500_DisableEnableLoadTimer



Usage:

BK8500_DisableEnableLoadTimer($InstrumentHandle,$Mode);





Description:

Enables or Disables the load timer. This timer can be set active when the load is turned on. Valid range for the timer is 1 to 60,000 seconds.

Function arguments



Parameter

Variable Type

Description



$InstrumentHandle

Object

This is the handle to the com port initialized.



$Mode

String

"ENABLE" - Enables the load timer.

"DISABLE" - Disables the load timer.





Return parameters



Parameter

Variable Type

Description



None





Usage Examples

BK8500_DisableEnableLoadTimer($comPort,"ENABLE");





BK8500_DisableEnableLocalControl

Previous Top Next



* * *



BK8500_DisableEnableLocalControl



Usage:

BK8500_DisableEnableLocalControl($InstrumentHandle,$Mode);





Description:

Enables or Disables the LOCAL key on the front panel of the BK8500.

Function arguments



Parameter

Variable Type

Description



$InstrumentHandle

Object

This is the handle to the com port initialized.



$Mode

String

"ENABLE" - Enables local key control.

"DISABLE" - Disables local key control.





Return parameters



Parameter

Variable Type

Description



None





Usage Examples

BK8500_DisableEnableLocalControl($comPort,"ENABLE");





BK8500_DisableEnableRemoteSensing

Previous Top Next



* * *



BK8500_DisableEnableRemoteSensing



Usage:

BK8500_DisableEnableRemoteSensing($InstrumentHandle,$Mode);





Description:

Enables or Disables remote sensing. Remote sensing will compensate for the resistance of the lead wires and remove the effect of the voltage drop across them.

Function arguments



Parameter

Variable Type

Description



$InstrumentHandle

Object

This is the handle to the com port initialized.



$Mode

String

"ENABLE" - Enables remote sensing.

"DISABLE" - Disables remote sensing.





Return parameters



Parameter

Variable Type

Description



None





Usage Examples

BK8500_DisableEnableRemoteSensing($comPort,"ENABLE");





BK8500_GetDCLoadSettings

Previous Top Next



* * *



BK8500_GetDCLoadSettings



Usage:

BK8500_GetDCLoadSettings($comPort,$StorageRegister);





Description:

Retrieves the saved DC load settings from the specified $StorageRegister location. The $StorageRegister can be any value between 1 and 25 inclusive.

Function arguments



Parameter

Variable Type

Description



$InstrumentHandle

Object

This is the handle to the com port initialized.



$StorageRegister

Integer

Storage register number to retrieve settings from.





Return parameters



Parameter

Variable Type

Description



None





Usage Examples

BK8500_GetDCLoadSettings($comPort,3);





BK8500_GetFunctionType

Previous Top Next



* * *



BK8500_GetFunctionType



Usage:

$FunctionType = BK8500_GetFunctionType($InstrumentHandle);





Description:

Returns the mode of operation of the BK8500. These modes are FIXED, SHORT, TRANSIENT, LIST and BATTERY.

Function arguments



Parameter

Variable Type

Description



$InstrumentHandle

Object

This is the handle to the com port initialized.





Return parameters



Parameter

Variable Type

Description



$FunctionType

String

"FIXED"

"SHORT"

"TRANSIENT"

"LIST"

"BATTERY"





Usage Examples

$FunctionType = BK8500_GetFunctionType($comPort);





BK8500_ReadCCModeCurrent

Previous Top Next



* * *



BK8500_ReadCCModeCurrent



Usage:

$Current = BK8500_ReadCCModeCurrent($InstrumentHandle);





Description:

Returns the actual DC source/sink current of the BK8500 in Amps.

Function arguments



Parameter

Variable Type

Description



$InstrumentHandle

Object

This is the handle to the com port initialized.





Return parameters



Parameter

Variable Type

Description



$Current

Float

The returned DC current in Amps





Usage Examples

$Current = BK8500_ReadCCModeCurrent($comPort);





BK8500_ReadCCModeTransCurandTiming

Previous Top Next



* * *



BK8500_ReadCCModeTransCurAndTiming



Usage:

($CurrentA,$TimeA,$CurrentB,$TimeB,$Operation) = BK8500_ReadCCModeTransCurAndTiming($InstrumentHandle);





Description:

Returns the stored transient A and B settings of the BK8500 for constant current mode. This returns the A DC current level in Amps, A duration in seconds, B DC current level in Amps and B duration in seconds.

Function arguments



Parameter

Variable Type

Description



$InstrumentHandle

Object

This is the handle to the com port initialized.





Return parameters



Parameter

Variable Type

Description



$CurrentA

Float

DC Level A.



$TimeA

Float

DC Level A duration.



$CurrentB

Float

DC Level B.



$TimeB

Float

DC Level B duration.



$Operation

String

"CONTINUOUS"

"PULSE"

"TOGGLED"





Usage Examples

($CurrentA,$TimeA,$CurrentB,$TimeB,$Operation) = BK8500_ReadCCModeTransCurAndTiming($comPort);





BK8500_ReadCRModeResistance

Previous Top Next



* * *



BK8500_ReadCRModeResistance



Usage:

$Resistance = BK8500_ReadCRModeResistance($InstrumentHandle);





Description:

Returns the set resistance of the BK8500 in ohms.

Function arguments



Parameter

Variable Type

Description



$InstrumentHandle

Object

This is the handle to the com port initialized.





Return parameters



Parameter

Variable Type

Description



$Resistance

Float

The returned resistance in ohms.





Usage Examples

$Resistance = BK8500_ReadCRModeResistance($comPort);





BK8500_ReadCRModeTransResandTiming

Previous Top Next



* * *



BK8500_ReadCRModeTransResandTiming



Usage:

($ResistanceA,$TimeA,$ResistanceB,$TimeB,$Operation) = BK8500_ReadCRModeTransResandTiming($InstrumentHandle);





Description:

Returns the stored transient A and B settings of the BK8500 for constant resistance mode. This returns the A resistance value in ohms, A duration in seconds, B resistance value in ohms and B duration in seconds.

Function arguments



Parameter

Variable Type

Description



$InstrumentHandle

Object

This is the handle to the com port initialized.





Return parameters



Parameter

Variable Type

Description



$ResistanceA

Float

Resistance Level A.



$TimeA

Float

Resistance Level A duration.



$ResistanceB

Float

Resistance Level B.



$TimeB

Float

Resistance Level B duration.



$Operation

String

"CONTINUOUS"

"PULSE"

"TOGGLED"





Usage Examples

($ResistanceA,$TimeA,$ResistanceB,$TimeB,$Operation) = BK8500_ReadCRModeTransResandTiming($comPort);





BK8500_ReadCVModeVandTransTiming

Previous Top Next



* * *



BK8500_ReadCVModeVandTransTiming



Usage:

($voltageA,$TimeA,$voltageB,$TimeB,$Operation) = BK8500_ReadCVModeVandTransTiming($InstrumentHandle);





Description:

Returns the stored transient A and B settings of the BK8500 for constant voltage mode. This returns the A voltage level in Volts, A duration in seconds, B voltage level in Volts and B duration in seconds.

Function arguments



Parameter

Variable Type

Description



$InstrumentHandle

Object

This is the handle to the com port initialized.





Return parameters



Parameter

Variable Type

Description



$VoltageA

Float

Voltage Level A.



$TimeA

Float

Voltage Level A duration.



$VoltageB

Float

Voltage Level B.



$TimeB

Float

Voltage Level B duration.



$Operation

String

"CONTINUOUS"

"PULSE"

"TOGGLED"





Usage Examples

($PowerA,$TimeA,$PowerB,$TimeB,$operation) = BK8500_ReadCWModeTransPwrandTiming($comPort);





BK8500_ReadCVModeVoltage

Previous Top Next



* * *



BK8500_ReadCVModeVoltage



Usage:

$Voltage = BK8500_ReadCVModeVoltage($InstrumentHandle);





Description:

Returns the set voltage of the BK8500 in volts.

Function arguments



Parameter

Variable Type

Description



$InstrumentHandle

Object

This is the handle to the com port initialized.





Return parameters



Parameter

Variable Type

Description



$Voltage

Float

The returned voltage.





Usage Examples

$Voltage = BK8500_ReadCVModeVoltage($comPort);





BK8500_ReadCWModePower

Previous Top Next



* * *



BK8500_ReadCWModePower



Usage:

$Power = BK8500_ReadCWModePower($InstrumentHandle);





Description:

Returns the set power of the BK8500 in watts.

Function arguments



Parameter

Variable Type

Description



$InstrumentHandle

Object

This is the handle to the com port initialized.





Return parameters



Parameter

Variable Type

Description



$Power

Float

The returned Power in watts.





Usage Examples

$Power = BK8500_ReadCWModePower($comPort);





BK8500_ReadCWModeTransPwrandTiming

Previous Top Next



* * *



BK8500_ReadCVModeVandTransTiming



Usage:

($PowerA,$TimeA,$PowerB,$TimeB,$Operation) = BK8500_ReadCWModeTransPwrandTiming($InstrumentHandle);





Description:

Returns the stored transient A and B settings of the BK8500 for constant power mode. This returns the A power level in watts, A duration in seconds, B power level in watts and B duration in seconds.

Function arguments



Parameter

Variable Type

Description



$InstrumentHandle

Object

This is the handle to the com port initialized.





Return parameters



Parameter

Variable Type

Description



$PowerA

Float

Power Level A.



$TimeA

Float

Power Level A duration.



$PowerB

Float

Power Level B.



$TimeB

Float

Power Level B duration.



$Operation

String

"CONTINUOUS"

"PULSE"

"TOGGLED"





Usage Examples

($PowerA,$TimeA,$PowerB,$TimeB,$Operation) = BK8500_ReadCWModeTransPwrandTiming($comPort);





BK8500_ReadMaxCurrentAllowed

Previous Top Next



* * *



BK8500_ReadMaxCurrentAllowed



Usage:

$Current = BK8500_ReadMaxCurrentAllowed($InstrumentHandle);





Description:

Returns the maximum DC current limit set by the user for the BK8500 in Amps.

Function arguments



Parameter

Variable Type

Description



$InstrumentHandle

Object

This is the handle to the com port initialized.





Return parameters



Parameter

Variable Type

Description



$Current

Float

The returned DC current in Amps.





Usage Examples

$Current = BK8500_ReadMaxCurrentAllowed($comPort);





BK8500_ReadMaxPowerAllowed

Previous Top Next



* * *



BK8500_ReadMaxPowerAllowed



Usage:

$Power = BK8500_ReadMaxPowerAllowed($InstrumentHandle);





Description:

Returns the maximum power limit set by the user for the BK8500 in Watts.

Function arguments



Parameter

Variable Type

Description



$InstrumentHandle

Object

This is the handle to the com port initialized.





Return parameters



Parameter

Variable Type

Description



$Power

Float

The returns the max power limit in watts





Usage Examples

$Power = BK8500_ReadMaxPowerAllowed($comPort);





BK8500_ReadMaxVoltageAllowed

Previous Top Next



* * *



BK8500_ReadMaxVoltageAllowed



Usage:

$Voltage = BK8500_ReadMaxVoltageAllowed($InstrumentHandle);





Description:

Returns the current mode of operation that the BK8500 is operating in, Constant Current(CC), Voltage(CV), Power(CW) or Resistance(CR).

Function arguments



Parameter

Variable Type

Description



$InstrumentHandle

Object

This is the handle to the com port initialized.





Return parameters



Parameter

Variable Type

Description



$Voltage

Float

The returned Max Voltage Setting in Volts.





Usage Examples

$Voltage = BK8500_ReadMaxVoltageAllowed($comPort);





BK8500_ReadMode

Previous Top Next



* * *



BK8500_ReadMode



Usage:

$Mode = BK8500_ReadMode($InstrumentHandle);





Description:

Returns the current mode of operation that the BK8500 is operating in, Constant Current(CC), Voltage(CV), Power(CW) or Resistance(CR).

Function arguments



Parameter

Variable Type

Description



$InstrumentHandle

Object

This is the handle to the com port initialized.





Return parameters



Parameter

Variable Type

Description



$Mode

String

"CC" - Constant Current Mode

"CV" - Constant Voltage Mode

"CW" - Constant Power Mode

"CR" - Constant Resistance Mode





Usage Examples

$Mode = BK8500_ReadMode($comPort);





BK8500_ReadModelInfo

Previous Top Next



* * *



BK8500_ReadModelInfo



Usage:

($model,$serial,$firmware) = BK8500_ReadModelInfo($InstrumentHandle);





Description:

Returns the BK8500 product model, serial and firmware version numbers.

Function arguments



Parameter

Variable Type

Description



$InstrumentHandle

Object

This is the handle to the com port initialized.





Return parameters



Parameter

Variable Type

Description



$model

String

Returns the model number of the BK8500.





$serial

String

Returns the serial number of the BK8500.



$firmware

String

Returns the firmware revision number of the BK8500.





Usage Examples

($model,$serial,$firmware) = BK8500_ReadModelInfo($comPort);





BK8500_ReadRemoteSensState

Previous Top Next



* * *



BK8500_ReadRemoteSensState



Usage:

$State = BK8500_ReadRemoteSensState($InstrumentHandle);





Description:

Returns whether Remote Sense is enabled or disabled on the BK8500.

Function arguments



Parameter

Variable Type

Description



$InstrumentHandle

Object

This is the handle to the com port initialized.





Return parameters



Parameter

Variable Type

Description



$State

String

"ENABLE" - if remote sense is enabled.

"DISABLE" - if remote sense is disabled.





Usage Examples

$State = BK8500_ReadRemoteSensState($comPort);





BK8500_ReadTimerLoadOn

Previous Top Next



* * *



BK8500_ReadTimerLoadOn



Usage:

$Seconds = BK8500_ReadTimerLoadOn($InstrumentHandle);





Description:

Returns the elapsed duration of the timer during LOAD ON state.

Function arguments



Parameter

Variable Type

Description



$InstrumentHandle

Object

This is the handle to the com port initialized.





Return parameters



Parameter

Variable Type

Description



$Seconds

Integer

Returns the elapsed time of the timer during LOAD ON state in seconds





Usage Examples

$Seconds = BK8500_ReadTimerLoadOn($comPort);





BK8500_ReadTimerState

Previous Top Next



* * *



BK8500_ReadTimerState



Usage:

$State = BK8500_ReadTimerState($comPort);





Description:

Returns whether timer is enabled or disabled on the BK8500..

Function arguments



Parameter

Variable Type

Description



$InstrumentHandle

Object

This is the handle to the com port initialized.





Return parameters



Parameter

Variable Type

Description



$State

String

"ENABLE" - if the timer is enabled.

"DISABLE" - if the timer is disabled.





Usage Examples

$State = BK8500_ReadTimerState($comPort);





BK8500_ReadTriggerSource

Previous Top Next



* * *



BK8500_ReadTriggerSource



Usage:

$Trigger = BK8500_ReadTriggerSource($InstrumentHandle);





Description:

Returns the trigger source the BK8500 during transient and dynamic load conditions.

Function arguments



Parameter

Variable Type

Description



$InstrumentHandle

Object

This is the handle to the com port initialized.





Return parameters



Parameter

Variable Type

Description



$Trigger

String

Returns the source of the trigger.

"IMMEDIATE" - for an immediate trigger initiated by the user through the front panel Shift+Trigger keys, "EXTERNAL" - if a TTL high signal is applied on the external trigger input for at least 5ms.

"SOFTWARE" - for a software trigger (via the BK8500_Trigger() command)





Usage Examples

$Trigger = BK8500_ReadTriggerSource($comPort);





BK8500_Remote

Previous Top Next



* * *



BK8500_Remote



Usage:

BK8500_Remote($InstrumentHandle);





Description:

Enables REMOTE mode for the BK8500 and disables the front panel keys.

Function arguments



Parameter

Variable Type

Description



$InstrumentHandle

Object

This is the handle to the com port initialized.





Return parameters



Parameter

Variable Type

Description



None





Usage Examples

$comPort = SerialOpen(2,9600,8,"N",1);

BK8500_Remote($comPort);





BK8500_SaveDCLoadSettings

Previous Top Next



* * *



BK8500_SaveDCLoadSettings



Usage:

BK8500_SaveDCLoadSettings($InstrumentHandle,$Register);





Description:

Saves the load settings to a storage register.

Function arguments



Parameter

Variable Type

Description



$InstrumentHandle

Object

This is the handle to the com port initialized.



$Register

Integer

A register number to save the settings. Must be a number between 1 and 25.





Return parameters



Parameter

Variable Type

Description



None





Usage Examples

BK8500_SaveDCLoadSettings($comPort,3);





BK8500_SelectFunction

Previous Top Next



* * *



BK8500_SelectFunction



Usage:

BK8500_SelectFunction($InstrumentHandle,$Function);





Description:

Sets the function for the load.

Function arguments



Parameter

Variable Type

Description



$InstrumentHandle

Object

This is the handle to the com port initialized.



$Function

String

"FIXED"

"SHORT"

"TRANSIENT"

"LIST"

"BATTERY"





Return parameters



Parameter

Variable Type

Description



None





Usage Examples

BK8500_SelectFunction($comPort, "BATTERY");





BK8500_SetCCModeCurrent

Previous Top Next



* * *



BK8500_SetCCModeCurrent



Usage:

BK8500_SetCCModeCurrent($InstrumentHandle,$Current);





Description:

This function specifies the Current (Amps) for CC mode operation.

Function arguments



Parameter

Variable Type

Description



$InstrumentHandle

Object

This is the handle to the com port initialized.



$Current

Float

The Current specified in Amps.





Return parameters



Parameter

Variable Type

Description



None





Usage Examples

BK8500_SetCVModeVoltage($comPort, 2.12);





BK8500_SetCCModeTransCurandTiming

Previous Top Next



* * *



BK8500_SetCCModeTransCurandTiming



Usage:

BK8500_SetCCModeTransCurandTiming($InstrumentHandle,$CurrentA,$TimeA,$CurrentB,$TimeB,TransitionMode);





Description:

This function configures the load for Resistance level A (Ohms) for Time A (seconds) and then transitions to Resistance level B (Ohms) for Time B (seconds) depending on the transition mode.

Function arguments



Parameter

Variable Type

Description



$InstrumentHandle

Object

This is the handle to the com port initialized.



$CurrentA

Float

The Current level in Amps for A. (Amps)



$TimeA

Float

The time for A. (seconds)



$CurrentB

Float

The Current level in Amps for B. (Amps)



$TimeB

Float

The time for B. (seconds)



$TransitionMode

String

Sets the transition mode from A to B. "PULSE," "CONTINUOUS," or "TOGGLED."





Return parameters



Parameter

Variable Type

Description



None





Usage Examples

BK8500_SetCCModeTransCurAndTiming($comPort,2.15,0.43,1.21,0.55,"PULSE");





BK8500_SetCRModeResistance

Previous Top Next



* * *



BK8500_SetCRModeResistance



Usage:

BK8500_SetCRModeResistance($InstrumentHandle,$Resistance);





Description:

This function specifies the Resistance (Ohms) for CR mode operation.

Function arguments



Parameter

Variable Type

Description



$InstrumentHandle

Object

This is the handle to the com port initialized.



$Resistance

Float

The Resistance specified in Ohms.





Return parameters



Parameter

Variable Type

Description



None





Usage Examples

BK8500_SetCRModeResistance($comPort,5.34);





BK8500_SetCRModeTransResandTiming

Previous Top Next



* * *



BK8500_SetCRModeTransResandTiming



Usage:

BK8500_SetCRModeTransResandTiming($InstrumentHandle,$ResistanceA,$TimeA,$ResistanceB,$TimeB,TransitionMode);





Description:

This function configures the load for Resistance level A (Ohms) for Time A (seconds) and then transitions to Resistance level B (Ohms) for Time B (seconds) depending on the transition mode.

Function arguments



Parameter

Variable Type

Description



$InstrumentHandle

Object

This is the handle to the com port initialized.



$ResistanceA

Float

The Resistance level in Volts for A. (Ohms)



$TimeA

Float

The time for A. (seconds)



$ResistanceB

Float

The Resistance level in Volts for B. (Ohms)



$TimeB

Float

The time for B. (seconds)



$TransitionMode

String

Sets the transition mode from A to B. "PULSE," "CONTINUOUS," or "TOGGLED."





Return parameters



Parameter

Variable Type

Description



None





Usage Examples

BK8500_SetCRModeTransResandTiming($comPort,5.42,0.851,3.93,0.923,"CONTINUOUS");





BK8500_SetCVModeTransVandTiming

Previous Top Next



* * *



BK8500_SetCVModeTransVandTiming



Usage:

BK8500_SetCVModeTransVandTiming($InstrumentHandle,$PowerA,$TimeA,$PowerB,$TimeB,TransitionMode);





Description:

This function configures the load for Voltage level A (Volts) for Time A (seconds) and then transitions to Voltage level B (Volts) for Time B (seconds) depending on the transition mode.

Function arguments



Parameter

Variable Type

Description



$InstrumentHandle

Object

This is the handle to the com port initialized.



$VoltageA

Float

The Voltage level in Volts for A. (Volts)



$TimeA

Float

The time for A. (seconds)



$VoltageB

Float

The Voltage level in Volts for B. (Volts)



$TimeB

Float

The time for B. (seconds)



$TransitionMode

String

Sets the transition mode from A to B. "PULSE," "CONTINUOUS," or "TOGGLED."





Return parameters



Parameter

Variable Type

Description



None





Usage Examples

BK8500_SetCVModeTransVandTiming($comPort,3.12,0.11,1.55,0.33,"TOGGLED");





BK8500_SetCVModeVoltage

Previous Top Next



* * *



BK8500_SetCVModeVoltage



Usage:

BK8500_SetCVModeVoltage($InstrumentHandle,$Voltage);





Description:

This function specifies the Voltage (Volts) for CV mode operation.

Function arguments



Parameter

Variable Type

Description



$InstrumentHandle

Object

This is the handle to the com port initialized.



$Voltage

Float

The voltage specified in Volts.





Return parameters



Parameter

Variable Type

Description



None





Usage Examples

BK8500_SetCVModeVoltage($comPort, 2.12);





BK8500_SetCWModePower

Previous Top Next



* * *



BK8500_SetCWModePower



Usage:

BK8500_SetCWModePower($InstrumentHandle,$Power);





Description:

This function specifies the power (Watts) for CW mode operation.

Function arguments



Parameter

Variable Type

Description



$InstrumentHandle

Object

This is the handle to the com port initialized.



$Power

Float

The power specified in Watts.





Return parameters



Parameter

Variable Type

Description



None





Usage Examples

BK8500_SetCWModePower($comPort, 110.54);





BK8500_SetCWModeTransPwrandTiming

Previous Top Next



* * *



BK8500_SetCWModeTransPwrandTiming



Usage:

BK8500_SetCWModeTransPwrandTiming($InstrumentHandle,$PowerA,$TimeA,$PowerB,$TimeB,$TransitionMode);





Description:

This function configures the load for Power level A (Watts) for Time A (seconds) and then transitions to Power level B (Watts) for Time B (seconds) depending on the transition mode.

Function arguments



Parameter

Variable Type

Description



$InstrumentHandle

Object

This is the handle to the com port initialized.



$PowerA

Float

The Power level in Watts for A. (Watts)



$TimeA

Float

The time for A. (seconds)



$PowerB

Float

The Power level in Watts for B. (Watts)



$TimeB

Float

The time for B. (seconds)



$TransitionMode

String

Sets the transition mode from A to B. "PULSE," "CONTINUOUS," or "TOGGLED."





Return parameters



Parameter

Variable Type

Description



None





Usage Examples

BK8500_SetCWModeTransPwrandTiming($comPort,10.42,0.71,18.93,0.223,"CONTINUOUS");





BK8500_SetComAddress

Previous Top Next



* * *



BK8500_SetComAddress



Usage:

BK8500_SetComAddress($InstrumentHandle,$Address);





Description:

Sets the address of the unit. When using RS232, and for all other commands based on this driver, set the front panel address setting to 0. This command should NOT be used. It is provided as reference for when a USB based driver is deployed.

Function arguments



Parameter

Variable Type

Description



$InstrumentHandle

Object

This is the handle to the com port initialized.



$Address

Integer

A value between 0 and 254. It sets the address of the unit.





Return parameters



Parameter

Variable Type

Description



None





Usage Examples

BK8500_SetComAddress($comPort,0);





BK8500_SetLoad

Previous Top Next



* * *



BK8500_SetLoad



Usage:

BK8500_SetLoad($InstrumentHandle,$Mode);





Description:

Sets the mode of operation for the load. (i.e. "ON" or "OFF")

Function arguments



Parameter

Variable Type

Description



$InstrumentHandle

Object

This is the handle to the com port initialized.



$Mode

String

"ON" - Sets the load ON.

"OFF" - Sets the load to OFF.





Return parameters



Parameter

Variable Type

Description



None





Usage Examples

BK8500_SetLoad($comPort,"ON");





BK8500_SetMaxCurrentAllowed

Previous Top Next



* * *



BK8500_SetMaxCurrentAllowed



Usage:

BK8500_SetMaxCurrentAllowed($InstrumentHandle,$MaxCurrent);





Description:

This function configures the Max Current value allowed (Amps).

Function arguments



Parameter

Variable Type

Description



$InstrumentHandle

Object

This is the handle to the com port initialized.



$MaxCurrent

Float

The max current value in Amps.





Return parameters



Parameter

Variable Type

Description



None





Usage Examples

BK8500_SetMaxCurrentAllowed($comPort,3.12);





BK8500_SetMaxPowerAllowed

Previous Top Next



* * *



BK8500_SetMaxPowerAllowed



Usage:

BK8500_SetMaxPowerAllowed($InstrumentHandle,$Power);





Description:

This function specifies the maximum power (Watts).

Function arguments



Parameter

Variable Type

Description



$InstrumentHandle

Object

This is the handle to the com port initialized.



$Power

Float

The maximum power specified in Watts.





Return parameters



Parameter

Variable Type

Description



None





Usage Examples

BK8500_SetMaxPowerAllowed($comPort,213.45);





BK8500_SetMaxVoltageAllowed

Previous Top Next



* * *



BK8500_SetMaxVoltageAllowed



Usage:

BK8500_SetMaxVoltageAllowed($InstrumentHandle,$Voltage);





Description:

This function specifies the maximum voltage (Volts).

Function arguments



Parameter

Variable Type

Description



$InstrumentHandle

Object

This is the handle to the com port initialized.



$Voltage

Float

The maximum voltage specified in Volts.





Return parameters



Parameter

Variable Type

Description



None





Usage Examples

BK8500_SetMaxVoltageAllowed($comPort,25.12);





BK8500_SetMinVoltageInBatTst

Previous Top Next



* * *



BK8500_SetMinVoltageInBatTst



Usage:

BK8500_SetMinVoltageInBatTst($InstrumentHandle,$Voltage);





Description:

This function specifies the minimum voltage (Volts).

Function arguments



Parameter

Variable Type

Description



$InstrumentHandle

Object

This is the handle to the com port initialized.



$Voltage

Float

The minimum voltage specified in Volts.





Return parameters



Parameter

Variable Type

Description



None





Usage Examples

BK8500_SetMaxCurrentAllowed($comPort,3.12);





BK8500_SetMode

Previous Top Next



* * *



BK8500_SetMode



Usage:

BK8500_SetMode($InstrumentHandle,$Mode);





Description:

Sets the mode of operation for the load. (i.e. "CC," "CV," "CW," or "CR")

Function arguments



Parameter

Variable Type

Description



$InstrumentHandle

Object

This is the handle to the com port initialized.



$Mode

String

"CC" - Sets the load to Constant Current mode.

"CV" - Sets the load to Constant Voltage mode.

"CW" - Sets the load to Constant Power mode.

"CR" - Sets the load to Constant Resistance mode.





Return parameters



Parameter

Variable Type

Description



None





Usage Examples

BK8500_SetMode($comPort,"CR");





BK8500_SetTimerLoadOn

Previous Top Next



* * *



BK8500_SetTimerLoadOn



Usage:

BK8500_SetTimerLoadOn($InstrumentHandle,$Seconds);





Description:

Sets the timer in seconds for the load to be on.

Function arguments



Parameter

Variable Type

Description



$InstrumentHandle

Object

This is the handle to the com port initialized.



$Seconds

Integer

Seconds for the load to be on.





Return parameters



Parameter

Variable Type

Description



None





Usage Examples

BK8500_SetTimerLoadOn($comPort,20);





BK8500_SetTriggerSource

Previous Top Next



* * *



BK8500_SetTriggerSource



Usage:

BK8500_SetTriggerSource($InstrumentHandle,$Source);





Description:

Sets the source used to trigger the load.

Function arguments



Parameter

Variable Type

Description



$InstrumentHandle

Object

This is the handle to the com port initialized.



$Source

String

"IMMEDIATE" - Means Immediate Trigger. (i.e. Triggered from the front panel.) "External" - Means Trigger from the rear panel connector.

"SOFTWARE" - Means software trigger. (i.e. Use the BK8500_Trigger command.)





Return parameters



Parameter

Variable Type

Description



None





Usage Examples

BK8500_SetTriggerSource($comPort,"EXTERNAL");





BK8500_Trigger

Previous Top Next



* * *



BK8500_Trigger



Usage:

BK8500_Trigger($InstrumentHandle);





Description:

Triggers the electronic load.

Function arguments



Parameter

Variable Type

Description



$InstrumentHandle

Object

This is the handle to the com port initialized.





Return parameters



Parameter

Variable Type

Description



None





Usage Examples

BK8500_Trigger($comPort);





CH6310_ActivateAllLoads

Previous Top Next



* * *



CH6310_ActivateAllLoads



Usage:

($status) = CH6310_ActivateAllLoads($instrumentHandle,$loadEnable);





Description:

Sets all electronic loads as active (load on) or non-active (load off).



Function arguments



Parameter

Variable Type

Description



$instrumentHandle

String

Handle to the instrument driver session.



$loadEnable

Boolean

true = turn all loads on

false = turn all loads off





Return parameters



Parameter

Variable Type

Description



$status

Integer

Status code returned by function call (0 = success).





CH6310_ActivateLoad

Previous Top Next



* * *



CH6310_ActivateLoad



Usage:

($status) = CH6310_ActivateLoad($instrumentHandle,$loadEnable);





Description:

This function makes the current channel's electronic load Acitve(On) / Inactive(Off).



Function arguments



Parameter

Variable Type

Description



$instrumentHandle

Object

Handle to the instrument driver session.



$loadEnable

Boolean

true = turn load on

false = turn load off





Return parameters



Parameter

Variable Type

Description



$status

Integer

Status code returned by function call (0 = success).





CH6310_ActivateShort

Previous Top Next



* * *



CH6310_ActivateShort



Usage:

($status) = CH6310_ActivateShort($instrumentHandle,$shortEnable);





Description:

Activate or inactivate short-circuited simulation.



Function arguments



Parameter

Variable Type

Description



$instrumentHandle

Object

Handle to the instrument driver session.



$shortEnable

Boolean

true = turn short on

false = turn short off





Return parameters



Parameter

Variable Type

Description



$status

Integer

Status code returned by function call (0 = success).





CH6310_Close

Previous Top Next



* * *



CH6310_Close



Usage:

($status) = CH6310_Close($instrumentHandle);





Description:

Closes the instrument and disposes of handle.



Function arguments



Parameter

Variable Type

Description



$instrumentHandle

Object

Handle to the instrument driver session.





Return parameters



Parameter

Variable Type

Description



$status

Integer

Status code returned by function call (0 = success).





CH6310_EnableChannel

Previous Top Next



* * *



CH6310_EnableChannel



Usage:

($status) = CH6310_EnableChannel($instrumentHandle, $active);





Description:

Enables or disables the current load module.



Function arguments



Parameter

Variable Type

Description



$instrumentHandle

Object

Handle to the instrument driver session.



$active

Boolean

true – channel on

false – channel off





Return parameters



Parameter

Variable Type

Description



$status

Integer

Status code returned by function call (0 = success).





CH6310_ErrorMessage

Previous Top Next



* * *



CH6310_ErrorMessage



Usage:

($status,$message) = CH6310_ErrorMessage($instrumentHandle, $statusCode);





Description:

This function takes the Status Code returned by the instrument driver functions, interprets it and returns it as a user readable string.



Function arguments



Parameter

Variable Type

Description



$instrumentHandle

Object

Handle to the instrument driver session.



$statusCode

Integer

Status code to decode.





Return parameters



Parameter

Variable Type

Description



$status

Integer

Status code returned by function call (0 = success).



$message

String

Message associated with given status code.





CH6310_ErrorQuery

Previous Top Next



* * *



CH6310_ErrorQuery



Usage:

($status,$errorCode,$errorMessage) = CH6310_ErrorQuery($instrumentHandle);





Description:

Reads an error code from the instrument's error queue.



Function arguments



Parameter

Variable Type

Description



$instrumentHandle

Object

Handle to the instrument driver session.





Return parameters



Parameter

Variable Type

Description



$status

Integer

Status code returned by function call (0 = success).



$errorCode

Integer

Error code in instruments error queue.



$errorMessage

String

Error message from instrument.





CH6310_FetchCurrent

Previous Top Next



* * *



CH6310_FetchCurrent



Usage:

($status,$current) = CH6310_FetchCurrent($instrumentHandle);





Description:

Fetch real time current measured at the input of the load module.



Function arguments



Parameter

Variable Type

Description



$instrumentHandle

Object

Handle to the instrument driver session.





Return parameters



Parameter

Variable Type

Description



$status

Integer

Status code returned by function call (0 = success).



$current

Float

Real time current at active channel.





CH6310_FetchStatus

Previous Top Next



* * *



CH6310_FetchStatus



Usage:

($status,$state) = CH6310_FetchStatus($instrumentHandle);





Description:

Fetch real time status of the load module.



Function arguments



Parameter

Variable Type

Description



$instrumentHandle

Object

Handle to the instrument driver session.





Return parameters



Parameter

Variable Type

Description



$status

Integer

Status code returned by function call (0 = success).



$state

Integer

Real time status of instrument:

State Description

0 No error.

1 Over Current Protection.

2 Over Voltage Protection.

4 Over Power Protection.

8 Reserve Voltage.

16 Over Temperature Protection.

-999 Error retrieving status





CH6310_FetchVoltage

Previous Top Next



* * *



CH6310_FetchVoltage



Usage:

($status,$voltage) = CH6310_FetchVoltage($instrumentHandle);





Description:

Fetch real time voltage measured at the input of the load module.



Function arguments



Parameter

Variable Type

Description



$instrumentHandle

Object

Handle to the instrument driver session.





Return parameters



Parameter

Variable Type

Description



$status

Integer

Status code returned by function call (0 = success).



$voltage

Float

Real time voltage at active channel.





CH6310_GetCurrent

Previous Top Next



* * *



CH6310_GetCurrent



Usage:

($status,$current) = CH6310_GetCurrent($instrumentHandle, $currentMode, $loadLevel, $suffix);





Description:

Gets static or dynamic load current of constant current (CC) mode.



Function arguments



Parameter

Variable Type

Description



$instrumentHandle

Object

Handle to the instrument driver session.



$currentMode

String

Load type:

"STATIC"

"DYNAMIC"



$loadLevel

String

Two load levels per channel can be independently set and switched between:

"L1" = 1st load level

"L2" = 2nd load level



$suffix

Integer

Command suffix:

0 = NONE (value)

-1 = minimum value

-2 = maximum value





Return parameters



Parameter

Variable Type

Description



$status

Integer

Status code returned by function call (0 = success).



$current

Float

Current setting value.





CH6310_GetCurrentChannel

Previous Top Next



* * *



CH6310_GetCurrentChannel



Usage:

($status,$channel) = CH6310_GetCurrentChannel($instrumentHandle);





Description:

Returns the channel number of the currently active electronic load.



Function arguments



Parameter

Variable Type

Description



$instrumentHandle

Object

Handle to the instrument driver session.





Return parameters



Parameter

Variable Type

Description



$status

Integer

Status code returned by function call (0 = success).



$channel

Integer

Current active channel.





CH6310_GetCurrentLimit

Previous Top Next



* * *



CH6310_GetCurrentLimit



Usage:

($status,$currentLimit) = CH6310_GetCurrentLimit($instrumentHandle);





Description:

Get the current limit of CV mode.



Function arguments



Parameter

Variable Type

Description



$instrumentHandle

Object

Handle to the instrument driver session.





Return parameters



Parameter

Variable Type

Description



$status

Integer

Status code returned by function call (0 = success).



$currentLimit

Float

Curent limit of CV mode.





CH6310_GetLoadStatus

Previous Top Next



* * *



CH6310_GetLoadStatus



Usage:

($status,$state) = CH6310_GetLoadStatus($instrumentHandle);





Description:

Get status of the currently active load module.



Function arguments



Parameter

Variable Type

Description



$instrumentHandle

Object

Handle to the instrument driver session.





Return parameters



Parameter

Variable Type

Description



$status

Integer

Status code returned by function call (0 = success).



$state

Integer

Real time status of channel:

State Description

0 No error.

1 Over Current Protection.

2 Over Voltage Protection.

4 Over Power Protection.

8 Reserve Voltage.

16 Over Temperature Protection.

-999 Error retrieving status





CH6310_GetMode

Previous Top Next



* * *



CH6310_GetMode



Usage:

($status,$mode) = CH6310_GetMode($instrumentHandle);





Description:

Returns the operational mode of the currently active electronic load module.



Function arguments



Parameter

Variable Type

Description



$instrumentHandle

Object

Handle to the instrument driver session.





Return parameters



Parameter

Variable Type

Description



$status

Integer

Status code returned by function call (0 = success).



$mode

String

Operational mode of active load module (CCL, CCH, CCDL, CCDH, CRL, CRH, CV).





CH6310_GetModuleID

Previous Top Next



* * *



CH6310_Get ModuleID



Usage:

($status,$modelID) = CH6310_GetModuleID($instrumentHandle, $channel);





Description:

Get module ID of the specific channel.



Function arguments



Parameter

Variable Type

Description



$instrumentHandle

Object

Handle to the instrument driver session.



$channel

Integer

Channel to select (1 through 8).





Return parameters



Parameter

Variable Type

Description



$status

Integer

Status code returned by function call (0 = success).



$modelID

String

Operational mode of active load module (CCL, CCH, CCDL, CCDH, CRL, CRH, CV).





CH6310_GetResistance

Previous Top Next



* * *



CH6310_GetResistance



Usage:

($status,$resistance) = CH6310_GetResistance($instrumentHandle, $loadLevel, $suffix);





Description:

Gets static resistance level of CR mode.



Function arguments



Parameter

Variable Type

Description



$instrumentHandle

Object

Handle to the instrument driver session.



$loadLevel

String

Two load levels per channel can be independently set and switched between:

"L1" = 1st load level

"L2" = 2nd load level



$suffix

Integer

Command suffix:

0 = NONE (value)

-1 = minimum value

-2 = maximum value





Return parameters



Parameter

Variable Type

Description



$status

Integer

Status code returned by function call (0 = success).



$resistance

Float

Resistance level of CR mode in ohms.





CH6310_GetSlewRate

Previous Top Next



* * *



CH6310_GetSlewRate



Usage:

($status,$slewRate) = CH6310_GetSlewRate($instrumentHandle, $mode, $function);





Description:

Get current slew rate at static or dynamic CC mode, or get resistive slew rate at CR mode.



Function arguments



Parameter

Variable Type

Description



$instrumentHandle

Object

Handle to the instrument driver session.



$mode

String

Operational mode* of load :

CCL

CCH

CCDL

CCDH

CRL

CRH





*(CV not supported by this function)



$function

Integer

Direction of slew rate :

"RISE" = positive edge

"FALL" = negative edge





Return parameters



Parameter

Variable Type

Description



$status

Integer

Status code returned by function call (0 = success).



$slewRate

Float

Current/resistive slew rate of load.





CH6310_GetVoltage

Previous Top Next



* * *



CH6310_GetVoltage



Usage:

($status,$voltage) = CH6310_GetVoltage($instrumentHandle, $loadLevel);





Description:

Gets voltage of static load during CV mode.



Function arguments



Parameter

Variable Type

Description



$instrumentHandle

Object

Handle to the instrument driver session.



$loadLevel

String

Two load levels per channel can be independently set and switched between:

"L1" = 1st load level

"L2" = 2nd load level





Return parameters



Parameter

Variable Type

Description



$status

Integer

Status code returned by function call (0 = success).



$voltage

Float

Static load voltage of active channel.





CH6310_GetVoltageOn

Previous Top Next



* * *



CH6310_GetVoltageOn



Usage:

($status,$Von) = CH6310_GetVoltageOn($instrumentHandle);





Description:

Gets voltage of 'sink current on' of current channel.



Function arguments



Parameter

Variable Type

Description



$instrumentHandle

Object

Handle to the instrument driver session.





Return parameters



Parameter

Variable Type

Description



$status

Integer

Status code returned by function call (0 = success).



$Von

Float

Voltage of 'sink current on' of active channel.





CH6310_GetVoltageRange

Previous Top Next



* * *



CH6310_GetVoltageRange



Usage:

($status,$voltageRange) = CH6310_GetVoltageRange($instrumentHandle);





Description:

Query voltage measurement range (High or Low) in CC mode.



Function arguments



Parameter

Variable Type

Description



$instrumentHandle

Object

Handle to the instrument driver session.





Return parameters



Parameter

Variable Type

Description



$status

Integer

Status code returned by function call (0 = success).



$voltageRange

Float

Voltage range of active channel.





CH6310_Init

Previous Top Next



* * *



CH6310_Init



Usage:

($status,$instrumentHandle) = CH6310_Init($resourceName, $IDQuery, $resetDevice);





Description:

This function performs the following initialization actions:





- Opens a session to the Default Resource Manager resource and a session to the specified device using the interface and address specified in the Resource_Name control.

- Performs an identification query on the Instrument.

- Resets the instrument to a known state.

- Sends initialization commands to the instrument that set any necessary programmatic variables such as Headers Off, Short Command form, and Data Transfer Binary to the state necessary for the operation of the instrument driver.

- Returns an Instrument Handle which is used to differentiate between different sessions of this instrument driver*.





*Each time this function is invoked a Unique Session is opened. It is possible to have more than one session open for the same resource.



Function arguments



Parameter

Variable Type

Description



$resourceName

String

Handle to the instrument driver session.



$IDQuery

Boolean

Determines whether or not to query ID of instrument



$resetDevice

Boolean

Determines whether or not to reset device when initializing.





Return parameters



Parameter

Variable Type

Description



$status

Integer

Status code returned by function call (0 = success).



$instrumentHandle

Object

Handle to the instrument driver session.





CH6310_IsAutoLoadOn

Previous Top Next



* * *



CH6310_IsAutoLoadOn



Usage:

($status,$autoLoadOnStatus) = CH6310_IsAutoLoadOn($instrumentHandle);





Description:

Return if ALL the load modules will do “Auto Load On” during power on.



Function arguments



Parameter

Variable Type

Description



$instrumentHandle

Object

Handle to the instrument driver session.





Return parameters



Parameter

Variable Type

Description



$status

Integer

Status code returned by function call (0 = success).



$autoLoadOnStatus

Boolean

Autoload on true/false.





CH6310_IsLoadActive

Previous Top Next



* * *



CH6310_IsLoadActive



Usage:

($status,$loadActive) = CH6310_IsLoadActive($instrumentHandle);





Description:

Query whether the current channel load module is active or off.



Function arguments



Parameter

Variable Type

Description



$instrumentHandle

Object

Handle to the instrument driver session.





Return parameters



Parameter

Variable Type

Description



$status

Integer

Status code returned by function call (0 = success).



$loadActive

Boolean

Current channel load active true/false.





CH6310_IsShortActive

Previous Top Next



* * *



CH6310_IsShortActive



Usage:

($status,$shortActive) = CH6310_IsShortActive($instrumentHandle);





Description:

Query if current channel if load module is short-circuited or not.



Function arguments



Parameter

Variable Type

Description



$instrumentHandle

Object

Handle to the instrument driver session.





Return parameters



Parameter

Variable Type

Description



$status

Integer

Status code returned by function call (0 = success).



$shortActive

Boolean

Current channel short-circuit simulation active true/false.





CH6310_MeasureIV

Previous Top Next



* * *



CH6310_MeasureIV



Usage:

($status,$value) = CH6310_MeasureIV($instrumentHandle, $function);





Description:

Returns voltage/current measured at the input of the electronic load.



Function arguments



Parameter

Variable Type

Description



$instrumentHandle

Object

Handle to the instrument driver session.



$function

String

Specifies voltage or current measurement. Valid functions:

"VOLTAGE"

"CURRENT"





Return parameters



Parameter

Variable Type

Description



$status

Integer

Status code returned by function call (0 = success).



$value

Float

Voltage or current at input of current channel.





CH6310_QueryRevision

Previous Top Next



* * *



CH6310_QueryRevision



Usage:

($status,$instrumentDriverRevision,$firmwareRevision) = CH6310_QueryRevision($instrumentHandle);





Description:

This function returns the revision numbers of the instrument driver and instrument firmware, and tells the user with which instrument firmware this revision of the driver is compatible.



Function arguments



Parameter

Variable Type

Description



$instrumentHandle

Object

Handle to the instrument driver session.





Return parameters



Parameter

Variable Type

Description



$status

Integer

Status code returned by function call (0 = success).



$instrumentDriverRevision

String

Driver revision.



$firmwareRevision

String

Firmware revision.





CH6310_QuerySpecification

Previous Top Next



* * *



CH6310_QuerySpecification



Usage:

($status,$GONGResult) = CH6310_QuerySpecification($instrumentHandle,$function);





Description:

Requests GO-NG result reference to voltage/current/all channels specification.



Function arguments



Parameter

Variable Type

Description



$instrumentHandle

Object

Handle to the instrument driver session.



$function

String

Return specification of active channel for following modes:

"VOLTAGE" = voltage GO-NG result to CC and CR Mode

CURRENT" = current GO-NG result to CC Mode

"ALL" = all channels GO-NG result





Return parameters



Parameter

Variable Type

Description



$status

Integer

Status code returned by function call (0 = success).



$GONGResult

Integer

0 = No-Go

1 = Go





CH6310_QueryVonLatch

Previous Top Next



* * *



CH6310_ QueryVonLatch



Usage:

($status,$latched) = CH6310_QueryVonLatch($instrumentHandle);





Description:

Get the action type of Von.



Function arguments



Parameter

Variable Type

Description



$instrumentHandle

Object

Handle to the instrument driver session.





Return parameters



Parameter

Variable Type

Description



$status

Integer

Status code returned by function call (0 = success).



$latched

Boolean

Status of Von latch mode for current channel:

true = latched

false = non-latched





CH6310_ReadInstrumentData

Previous Top Next



* * *



CH6310_ReadInstrumentData



Usage:

($status,$readBuffer,$numBytesRead) = CH6310_ReadInstrumentData($instrumentHandle, $numberBytesToRead);





Description:

Reads data from the instrument's output buffer.



Function arguments



Parameter

Variable Type

Description



$instrumentHandle

Object

Handle to the instrument driver session.



$numberBytesToRead

Integer

# of bytes to try and read from output buffer of instrument.





Return parameters



Parameter

Variable Type

Description



$status

Integer

Status code returned by function call (0 = success).



$readBuffer

String

Alpha/numeric data that was on instrument's output buffer.



$numBytesRead

Integer

Actual # of byte that were read from the instrument's output buffer.





CH6310_Reset

Previous Top Next



* * *



CH6310_Reset



Usage:

($status) = CH6310_Reset($instrumentHandle);





Description:

This function resets the instrument to a known state and sends initialization commands to the instrument that set any necessary programmatic variables such as Headers Off, Short Command form, and Data Transfer Binary to the state necessary for the operation of the instrument driver.



Function arguments



Parameter

Variable Type

Description



$instrumentHandle

Object

Handle to the instrument driver session.





Return parameters



Parameter

Variable Type

Description



$status

Integer

Status code returned by function call (0 = success).





CH6310_ResetLoad

Previous Top Next



* * *



CH6310_ResetLoad



Usage:

($status) = CH6310_ResetLoad($instrumentHandle);





Description:

Resets active load module.



Function arguments



Parameter

Variable Type

Description



$instrumentHandle

Object

Handle to the instrument driver session.





Return parameters



Parameter

Variable Type

Description



$status

Integer

Status code returned by function call (0 = success).





CH6310_SelectChannel

Previous Top Next



* * *



CH6310_SelectChannel



Usage:

($status) = CH6310_SelectChannel($instrumentHandle, $channel);





Description:

Selects a specific channel.



Function arguments



Parameter

Variable Type

Description



$instrumentHandle

Object

Handle to the instrument driver session.



$channel

Integer

Channel to select (1 through 8).





Return parameters



Parameter

Variable Type

Description



$status

Integer

Status code returned by function call (0 = success).





CH6310_SelectInputPort

Previous Top Next



* * *



CH6310_SelectInputPort



Usage:

($status) = CH6310_SelectInputPort($instrumentHandle, $inputPort);





Description:

Selects the input port of the load module to measure voltage from.



Function arguments



Parameter

Variable Type

Description



$instrumentHandle

Object

Handle to the instrument driver session.



$inputPort

Integer

Input port of load module:

0 (LOAD)

1 (UUT)





Return parameters



Parameter

Variable Type

Description



$status

Integer

Status code returned by function call (0 = success).





CH6310_SelfTest

Previous Top Next



* * *



CH6310_SelfTest



Usage:

($status,$selfTestResult,$selfTestMessage) = CH6310_SelfTest($instrumentHandle);





Description:

This function runs the instrument's self test routine and returns the test result(s).



Function arguments



Parameter

Variable Type

Description



$instrumentHandle

Object

Handle to the instrument driver session.





Return parameters



Parameter

Variable Type

Description



$status

Integer

Status code returned by function call (0 = success).



$selfTestResult

Interger

0 = success

non-0 = check reference material for error codes



$selfTestMessage

String

Self test result message.





CH6310_SetAutoLoadOn

Previous Top Next



* * *



CH6310_SetAutoLoadOn



Usage:

($status) = CH6310_SetAutoLoadOn($instrumentHandle, $autoLoadOn);





Description:

Sets if ALL the load module will do Auto Load On during power on.



Function arguments



Parameter

Variable Type

Description



$instrumentHandle

Object

Handle to the instrument driver session.



$autoLoadOn

Boolean

Determines if all load modules will have AutoLoad on.





Return parameters



Parameter

Variable Type

Description



$status

Integer

Status code returned by function call (0 = success).





CH6310_SetCurrent

Previous Top Next



* * *



CH6310_SetCurrent



Usage:

($status) = CH6310_SetCurrent($instrumentHandle, $currentMode, $loadLevel, $current);





Description:

Sets static or dynamic load Current of constant current mode for active channel.



Function arguments



Parameter

Variable Type

Description



$instrumentHandle

Object

Handle to the instrument driver session.



$currentMode

String

Load type:

"STATIC"

"DYNAMIC"



$loadLevel

String

Two load levels per channel can be independently set and switched between:

"L1" = 1st load level

"L2" = 2nd load level



$current

Float

Current setting:

-2 = maximum current

-1 = minimum current

positive values = current in Amps





Return parameters



Parameter

Variable Type

Description



$status

Integer

Status code returned by function call (0 = success).





CH6310_SetCurrentLimit

Previous Top Next



* * *



CH6310_SetCurrentLimit



Usage:

($status) = CH6310_SetCurrentLimit($instrumentHandle, $currentLimit);





Description:

Set the current limit of CV mode for active channel.



Function arguments



Parameter

Variable Type

Description



$instrumentHandle

Object

Handle to the instrument driver session.



$currentLimit

Float

Current limit in CV mode.





Return parameters



Parameter

Variable Type

Description



$status

Integer

Status code returned by function call (0 = success).





CH6310_SetDisplayMode

Previous Top Next



* * *



CH6310_SetDisplayMode



Usage:

($status) = CH6310_SetDisplayMode($instrumentHandle, $display);





Description:

Sets the display mode of front panel of the electronic load.



Function arguments



Parameter

Variable Type

Description



$instrumentHandle

Object

Handle to the instrument driver session.



$display

String

Front panel display setting:

"L" = Displays the voltage and current values of channel L

"R" = Displays the voltage and current values of channel R.

"LRV" = Displays the voltage value of channel L and R.

"LRI" = Displays the current value of channel L and R.





Return parameters



Parameter

Variable Type

Description



$status

Integer

Status code returned by function call (0 = success).





CH6310_SetMode

Previous Top Next



* * *



CH6310_SetMode



Usage:

($status) = CH6310_SetMode($instrumentHandle, $mode);





Description:

Set operational modes of currently active channel.



Function arguments



Parameter

Variable Type

Description



$instrumentHandle

Object

Handle to the instrument driver session.



$mode

String

Operational mode of load : CCL, CCH, CCDL, CCDH, CRL, CRH, CV





Return parameters



Parameter

Variable Type

Description



$status

Integer

Status code returned by function call (0 = success).





CH6310_SetResistance

Previous Top Next



* * *



CH6310_SetResistance



Usage:

($status) = CH6310_SetResistance($instrumentHandle, $loadLevel, $resistance);





Description:

Sets static resistance level of CR mode.



Function arguments



Parameter

Variable Type

Description



$instrumentHandle

Object

Handle to the instrument driver session.



$loadLevel

String

Two load levels per channel can be independently set and switched between:

"L1" = 1st load level

"L2" = 2nd load level



$resistance

Float

Static resistance of CR mode.





Return parameters



Parameter

Variable Type

Description



$status

Integer

Status code returned by function call (0 = success).





CH6310_SetSlewRate

Previous Top Next



* * *



CH6310_SetSlewRate



Usage:

($status) = CH6310_SetSlewRate($instrumentHandle, $mode, $function, $slewRate);





Description:

Set current slew rate in static or dynamic CC mode, or set resistive slew rate in CR mode



Function arguments



Parameter

Variable Type

Description



$instrumentHandle

Object

Handle to the instrument driver session.



$mode

String

Operational mode* of load :

CCL

CCH

CCDL

CCDH

CRL

CRH





*(CV not supported by this function)



$function

String

Direction of slew rate :

"RISE" = positive edge

"FALL" = negative edge



$slewRate

Float

Slew rate in A/uS:

(1) If the mode equals to CCL or CCH, the function will set current slew rate of static load.

(2) If the mode equals to CCDL or CCDH, the function will set current slew rate of dynamic load.

(3) If the mode equals to CRL or CRH, the function will set resistive slew rate of load.





Return parameters



Parameter

Variable Type

Description



$status

Integer

Status code returned by function call (0 = success).





CH6310_SetVoltage

Previous Top Next



* * *



CH6310_SetVoltage



Usage:

($status) = CH6310_SetVoltage($instrumentHandle, $loadLevel, $voltage);





Description:

Sets voltage of static load during CV mode.



Function arguments



Parameter

Variable Type

Description



$instrumentHandle

Object

Handle to the instrument driver session.



$loadLevel

String

Two load levels per channel can be independently set and switched between:

"L1" = 1st load level

"L2" = 2nd load level



$voltage

Float

Voltage of static load in CV mode.





Return parameters



Parameter

Variable Type

Description



$status

Integer

Status code returned by function call (0 = success).





CH6310_SetVoltageRange

Previous Top Next



* * *



CH6310_SetVoltageRange



Usage:

($status) = CH6310_SetVoltageRange($instrumentHandle, $voltageRange);





Description:

Sets voltage measurement range to High or Low in CC mode.



Function arguments



Parameter

Variable Type

Description



$instrumentHandle

Object

Handle to the instrument driver session.



$voltageRange

Float

Voltage measurement range (0 to 80V).





Return parameters



Parameter

Variable Type

Description



$status

Integer

Status code returned by function call (0 = success).





CH6310_SetVon

Previous Top Next



* * *



CH6310_SetVon



Usage:

($status) = CH6310_SetVon($instrumentHandle, $Von);





Description:

Sets voltage of sink current on of current channel.



Function arguments



Parameter

Variable Type

Description



$instrumentHandle

Object

Handle to the instrument driver session.



$Von

Float

Voltage of sink current on.





Return parameters



Parameter

Variable Type

Description



$status

Integer

Status code returned by function call (0 = success).





CH6310_SetVonLatch

Previous Top Next



* * *



CH6310_SetVonLatch



Usage:

($status) = CH6310_SetVonLatch($instrumentHandle, $latch);





Description:

Set the action type of Von.



Function arguments



Parameter

Variable Type

Description



$instrumentHandle

Object

Handle to the instrument driver session.



$latch

Boolean

Von latch mode for current channel:

true = latched

false = non-latched





Return parameters



Parameter

Variable Type

Description



$status

Integer

Status code returned by function call (0 = success).





CH6310_WriteInstrumentData

Previous Top Next



* * *



CH6310_WriteInstrumentData



Usage:

($status) = CH6310_WriteInstrumentData($instrumentHandle, $command);





Description:

Sends commands/queries to the instrument.



Function arguments



Parameter

Variable Type

Description



$instrumentHandle

Object

Handle to the instrument driver session.



$command

String

SCPI command to write to instrument.





Return parameters



Parameter

Variable Type

Description



$status

Integer

Status code returned by function call (0 = success).





LadyBug_GetAddress_Idx

Previous Top Next



* * *



LadyBug_GetAddress_Idx



Usage:

$ErrorCode = LadyBug_GetAddress_Idx($Index);



Description:

This function requires the installation of the LadyBug sensor driver on the system.

This function returns the address given the index. Index is assigned by the operating system when the unit is plugged in.



Result:

$ErrorCode = LadyBug_GetAddress_Idx($Index);

Function arguments



Parameter

Variable Type

Description



$Index

integer

Index which will normally be between 1 and 16.





Return parameters



Parameter

Variable Type

Description



$ErrorCode

integer

The address between 1 and 255. If $ErrorCode < 0, there is a failure.





Example(s):

$ErrorCode = LadyBug_GetAddress_Idx(1);





LadyBug_GetAddress_SN

Previous Top Next



* * *



LadyBug_GetAddress_SN



Usage:

$ErrorCode = LadyBug_GetAddress_SN($SerialNumber);



Description:

This function requires the installation of the LadyBug sensor driver on the system.

This function returns the address given the serial number.



Result:

$ErrorCode = LadyBug_GetAddress_SN($SerialNumber);

Function arguments



Parameter

Variable Type

Description



$SerialNumber

string

Serial number.





Return parameters



Parameter

Variable Type

Description



$ErrorCode

integer

The address between 1 and 255. If $ErrorCode < 0, there is a failure.





Example(s):

$ErrorCode = LadyBug_GetAddress_SN("123456");





LadyBug_GetFrequency

Previous Top Next



* * *



LadyBug_GetFrequency



Usage:

($ErrorCode,$Frequency) = LadyBug_GetFrequency($Address);



Description:

This function requires the installation of the LadyBug sensor driver on the system.

This function gets the frequency of the addressed device.



Result:

($ErrorCode,$Frequency) = LadyBug_GetFrequency($Address);

Function arguments



Parameter

Variable Type

Description



$Address

integer

The address of the instrument.





Return parameters



Parameter

Variable Type

Description



$ErrorCode

integer

Success if $ErrorCode > 0. If $ErrorCode <= 0, there is a failure.



$Frequency

float

The frequency in Hz.





Example(s):

($ErrorCode,$Frequency) = LadyBug_GetFrequency(1);





LadyBug_InitializeSensor_Addr

Previous Top Next



* * *



LadyBug_InitializeSensor_Addr



Usage:

$ErrorCode = LadyBug_InitializeSensor_Addr($Address);



Description:

This function requires the installation of the LadyBug sensor driver on the system.

This function cause the sensor to be initialized. This includes downloading the calibration factors and other data required to operate the sensor. Initialization normally takes about five seconds.



Result:

$ErrorCode = LadyBug_InitializeSensor_Addr($Address);

Function arguments



Parameter

Variable Type

Description



$Address

integer

The address of the instrument.





Return parameters



Parameter

Variable Type

Description



$ErrorCode

integer

Success if $ErrorCode > 0. If $ErrorCode <= 0, there is a failure.





Example(s):

$ErrorCode = LadyBug_InitializeSensor_Addr(1);





LadyBug_InitializeSensor_Idx

Previous Top Next



* * *



LadyBug_InitializeSensor_Idx



Usage:

$ErrorCode = LadyBug_InitializeSensor_Idx($Index);



Description:

This function requires the installation of the LadyBug sensor driver on the system.

This function cause the sensor to be initialized. This includes downloading the calibration factors and other data required to operate the sensor. Initialization normally takes about five seconds.



Result:

$ErrorCode = LadyBug_InitializeSensor_Idx($Index);

Function arguments



Parameter

Variable Type

Description



$Index

integer

The index of the instrument.





Return parameters



Parameter

Variable Type

Description



$ErrorCode

integer

Success if $ErrorCode > 0. If $ErrorCode <= 0, there is a failure.





Example(s):

$ErrorCode = LadyBug_InitializeSensor_Idx(1);





LadyBug_InitializeSensor_SN

Previous Top Next



* * *



LadyBug_InitializeSensor_SN



Usage:

$ErrorCode = LadyBug_InitializeSensor_SN($SerialNumber);



Description:

This function requires the installation of the LadyBug sensor driver on the system.

This function cause the sensor to be initialized. This includes downloading the calibration factors and other data required to operate the sensor. Initialization normally takes about five seconds.



Result:

$ErrorCode = LadyBug_InitializeSensor_SN($SerialNumber);

Function arguments



Parameter

Variable Type

Description



$SerialNumber

string

The serial number.





Return parameters



Parameter

Variable Type

Description



$ErrorCode

integer

Success if $ErrorCode > 0. If $ErrorCode <= 0, there is a failure.





Example(s):

$ErrorCode = LadyBug_InitializeSensor_SN("123456");





LadyBug_IsSensorConnected_Addr

Previous Top Next



* * *



LadyBug_IsSensorConnected_Addr



Usage:

$ErrorCode = LadyBug_IsSensorConnected_Addr($Address);



Description:

This function requires the installation of the LadyBug sensor driver on the system.

This function determines if the specified sensor is connected. The query is based on the address.



Result:

$ErrorCode = LadyBug_IsSensorConnected_Addr($Address);

Function arguments



Parameter

Variable Type

Description



$Address

integer

The address of the instrument.





Return parameters



Parameter

Variable Type

Description



$ErrorCode

integer

$ErrorCode = 1: serial number is connected.

$ErrorCode = 0: serial number is not connected.

If $ErrorCode < 0, there is a failure.





Example(s):

$ErrorCode = LadyBug_IsSensorConnected_Addr(1);





LadyBug_IsSensorConnected_SN

Previous Top Next



* * *



LadyBug_IsSensorConnected_SN



Usage:

$ErrorCode = LadyBug_IsSensorConnected_SN($SerialNumber);



Description:

This function requires the installation of the LadyBug sensor driver on the system.

This function determines if the specified sensor is connected. The query is based on the serial number.



Result:

$ErrorCode = LadyBug_IsSensorConnected_SN($SerialNumber);

Function arguments



Parameter

Variable Type

Description



$SerialNumber

string

Serial number.





Return parameters



Parameter

Variable Type

Description



$ErrorCode

integer

$ErrorCode = 1: serial number is connected.

$ErrorCode = 0: serial number is not connected.

If $ErrorCode < 0, there is a failure.





Example(s):

$ErrorCode = LadyBug_IsSensorConnected_SN("123456");





LadyBug_MeasureCW

Previous Top Next



* * *



LadyBug_MeasureCW



Usage:

($ErrorCode,$CW) = LadyBug_MeasureCW($Address);



Description:

This function requires the installation of the LadyBug sensor driver on the system.

This function makes CW measurements. The value returned is in the units currently selected. The time to make this measurement can vary widely. Measurement time in particular depends on the setting of averaging. Typical measurement times are about 0.3 to 1.0 msec per buffer. Each buffer contains about 120 averages so that a measurement for 100 buffers (averaging set to 100) would take 30 to 100 msec. Another setting that affects the measurement time is anti-aliasing. The measurement time is about 40% greater with anti-aliasing on than with anti-aliasing off. Anti-aliasing is generally required if the baseband content (or demodulated signal) has a frequency above 200 kHz. Finally, getting an accurate measurement requires that the frequency be set.





Result:

($ErrorCode,$CW) = LadyBug_MeasureCW($Address);

Function arguments



Parameter

Variable Type

Description



$Address

integer

The address of the instrument.





Return parameters



Parameter

Variable Type

Description



$ErrorCode

integer

Success if $ErrorCode > 0. If $ErrorCode <= 0, there is a failure.



$CW

double

Result of CW measurement.





Example(s):

($ErrorCode,$CW) = LadyBug_MeasureCW(1);





LadyBug_MeasureCW_PF

Previous Top Next



* * *



LadyBug_MeasureCW_PF



Usage:

($ErrorCode,$CW,$Result) = LadyBug_MeasureCW_PF($Address);



Description:

This function requires the installation of the LadyBug sensor driver on the system.

This routine makes CW measurements and evaluates that measurement relative to the current limit. The value returned is in the units currently selected.





Result:

($ErrorCode,$CW,$Result) = LadyBug_MeasureCW_PF($Address);

Function arguments



Parameter

Variable Type

Description



$Address

integer

The address of the instrument.





Return parameters



Parameter

Variable Type

Description



$ErrorCode

integer

Success if $ErrorCode > 0. If $ErrorCode <= 0, there is a failure.



$CW

double

Result of CW measurement.



$Result

string

The limit test result. Returned values:

· PASS

· FAIL_LOW

· FAIL_HIGH

· FAIL_BETWEEN_LIMIT_EXC

· FAIL_BETWEEN_LIMIT_INC

· NO_DETERMINATION





Example(s):

($ErrorCode,$CW,$Result) = LadyBug_MeasureCW_PF(1);





LadyBug_MeasurePulse

Previous Top Next



* * *



LadyBug_MeasurePulse



Usage:

($ErrorCode,$Pulse,$Peak,$Aveage,$DutyCycle) = LadyBug_MeasurePulse($Address);



Description:

This function requires the installation of the LadyBug sensor driver on the system.

This function makes pulse measurements. The measurement returns pulse power (average power in the pulse); peak power (highest sample measured); averge power; and duty cycle. These are direct measurements. The measurements are made using the number of buffers (averages) and the units specified earlier.





Result:

($ErrorCode,$Pulse,$Peak,$Aveage,$DutyCycle) = LadyBug_MeasurePulse($Address);

Function arguments



Parameter

Variable Type

Description



$Address

integer

The address of the instrument.





Return parameters



Parameter

Variable Type

Description



$ErrorCode

integer

Success if $ErrorCode > 0. If $ErrorCode <= 0, there is a failure.



$Pulse

float

Pulse power



$Peak

float

Peak power.



$Average

float

Average power.



$DutyCycle

float

Duty cycle.





Example(s):

($ErrorCode,$Pulse,$Peak,$Average,$DutyCycle) = LadyBug_MeasurePulse(1);





LadyBug_MeasurePulse_PF

Previous Top Next



* * *



LadyBug_MeasurePulse_PF



Usage:

($ErrorCode,$Pulse,$Peak,$Aveage,$DutyCycle,$Result) = LadyBug_MeasurePulse_PF($Address);



Description:

This function requires the installation of the LadyBug sensor driver on the system.

This function makes pulse measurements. The measurement returns pulse power (average power in the pulse); peak power (highest sample measured); average power; and duty cycle. These are direct measurements. The measurements are made using the number of buffers (averages) and the units specified earlier.





Result:

($ErrorCode,$Pulse,$Peak,$Aveage,$DutyCycle,$Result) = LadyBug_MeasurePulse_PF($Address);

Function arguments



Parameter

Variable Type

Description



$Address

integer

The address of the instrument.





Return parameters



Parameter

Variable Type

Description



$ErrorCode

integer

Success if $ErrorCode > 0. If $ErrorCode <= 0, there is a failure.



$Pulse

float

Pulse power



$Peak

float

Peak power.



$Average

float

Average power.



$DutyCycle

float

Duty cycle.



$Result

string

The limit test result. Returned values:

· PASS

· FAIL_LOW

· FAIL_HIGH

· FAIL_BETWEEN_LIMIT_EXC

· FAIL_BETWEEN_LIMIT_INC

· NO_DETERMINATION





Example(s):

($ErrorCode,$Pulse,$Peak,$Aveage,$DutyCycle,$Result) = LadyBug_MeasurePulse_PF(1);





LadyBug_SensorCount

Previous Top Next



* * *



LadyBug_SensorCount



Usage:

$Count = LadyBug_SensorCount();



Description:

This function requires the installation of the LadyBug sensor driver on the system.

This function returns the number of sensors currently connected to the computer.

Result:

$Count = LadyBug_SensorCount();

Function arguments



Parameter

Variable Type

Description





Return parameters



Parameter

Variable Type

Description



$Count

integer

If $ErrorCode < 0, there is a failure.

Success: The number of sensors connected to the PC. The number will be between 0 and 16.





Example(s):

$Count = LadyBug_SensorCount();





FULL Lady Bug RF Power Sensor Extended Example:

//************************************************************************************************************************************************************//

// GENERAL SETTINGS

//************************************************************************************************************************************************************//

SetFinalizeFunction("CleanUpTest");

//************************************************************************************************************************************************************//

// LadyBug power meter functions

//************************************************************************************************************************************************************//





$Ladybug_SN = "108622";





// Get the count of Ladybug sensors attached to the system.

UpdateStatus("******************** LadyBug_SensorCount ********************");

$Count = LadyBug_SensorCount();

UpdateStatus($Count);





UpdateStatus("******************** LadyBug_GetAddress_Idx ********************");

$Address = LadyBug_GetAddress_Idx(1);

UpdateStatus($Address);





UpdateStatus("******************** LadyBug_GetAddress_SN ********************");

$Address = LadyBug_GetAddress_SN($Ladybug_SN);

UpdateStatus($Address);





UpdateStatus("******************** LadyBug_InitializeSensor_Addr ********************");

$ErrorCode = LadyBug_InitializeSensor_Addr($Address);

UpdateStatus($ErrorCode);





UpdateStatus("******************** LadyBug_InitializeSensor_Idx ********************");

$ErrorCode = LadyBug_InitializeSensor_Idx(1);

UpdateStatus($ErrorCode);





UpdateStatus("******************** LadyBug_InitializeSensor_SN ********************");

$ErrorCode = LadyBug_InitializeSensor_SN($Ladybug_SN);

UpdateStatus($ErrorCode);





UpdateStatus("******************** LadyBug_IsSensorConnected_Addr ********************");

$ErrorCode = LadyBug_IsSensorConnected_Addr($Address);

UpdateStatus($ErrorCode);





UpdateStatus("******************** LadyBug_IsSensorConnected_SN ********************");

$ErrorCode = LadyBug_IsSensorConnected_SN($Ladybug_SN);

UpdateStatus($ErrorCode);





UpdateStatus("******************** LadyBug_MeasureCW ********************");

($ErrorCode,$CW) = LadyBug_MeasureCW($Address);

UpdateStatus($ErrorCode);

UpdateStatus($CW);





UpdateStatus("******************** LadyBug_MeasureCW_PF ********************");

($ErrorCode,$CW,$Result) = LadyBug_MeasureCW_PF($Address);

UpdateStatus($ErrorCode);

UpdateStatus($CW);

UpdateStatus($Result);





UpdateStatus("******************** LadyBug_MeasurePulse ********************");

($ErrorCode,$Pulse,$Peak,$Average,$DutyCycle) = LadyBug_MeasurePulse($Address);

UpdateStatus($ErrorCode);

UpdateStatus($Pulse);

UpdateStatus($Peak);

UpdateStatus($Average);

UpdateStatus($DutyCycle);





UpdateStatus("******************** LadyBug_MeasurePulse_PF ********************");

($ErrorCode,$Pulse,$Peak,$Average,$DutyCycle,$Result) = LadyBug_MeasurePulse_PF($Address);

UpdateStatus($ErrorCode);

UpdateStatus($Pulse);

UpdateStatus($Peak);

UpdateStatus($Average);

UpdateStatus($DutyCycle);

UpdateStatus($Result);





UpdateStatus("******************** LadyBug_SetAntiAliasingEnabled ********************");

$ErrorCode = LadyBug_SetAntiAliasingEnabled($Address,false);

UpdateStatus($ErrorCode);





UpdateStatus("******************** LadyBug_SetAutoPulseEnabled ********************");

$ErrorCode = LadyBug_SetAutoPulseEnabled($Address,false);

UpdateStatus($ErrorCode);





$ErrorCode = LadyBug_SetCWReference($Address,1.0,"DBM");

UpdateStatus($ErrorCode);





UpdateStatus("******************** LadyBug_SetDutyCycleEnabled ********************");

$ErrorCode = LadyBug_SetDutyCycleEnabled($Address,false);

UpdateStatus($ErrorCode);





UpdateStatus("******************** LadyBug_SetDutyCyclePerCent ********************");

$ErrorCode = LadyBug_SetDutyCyclePerCent($Address,10);





UpdateStatus("******************** LadyBug_SetDutyCyclePerCent ********************");

$ErrorCode = LadyBug_SetFrequency($Address,1000.0);

UpdateStatus($ErrorCode);





UpdateStatus("******************** LadyBug_SetDutyCyclePerCent ********************");

$ErrorCode = LadyBug_SetLimitEnabled($Address,"DOUBLE_SIDED");

UpdateStatus($ErrorCode);





UpdateStatus("******************** LadyBug_SetMeasurementPowerUnits ********************");

$ErrorCode = LadyBug_SetMeasurementPowerUnits($Address,"W");

UpdateStatus($ErrorCode);





UpdateStatus("******************** LadyBug_SetOffset ********************");

$ErrorCode = LadyBug_SetOffset($Address,2.0);

UpdateStatus($ErrorCode);





UpdateStatus("******************** LadyBug_SetOffsetEnabled ********************");

$ErrorCode = LadyBug_SetOffsetEnabled($Address,false);

UpdateStatus($ErrorCode);





UpdateStatus("******************** LadyBug_SetPulseReference ********************");

$ErrorCode = LadyBug_SetPulseReference($Address,1.0,1.0,1.0,10.0,"W");

UpdateStatus($ErrorCode);





UpdateStatus("******************** LadyBug_SetResponseEnabled ********************");

$ErrorCode = LadyBug_SetResponseEnabled($Address,false);

UpdateStatus($ErrorCode);





UpdateStatus("******************** LadyBug_GetFrequency ********************");

($ErrorCode,$Frequency) = LadyBug_GetFrequency($Address);

UpdateStatus($ErrorCode);

UpdateStatus($Frequency);





End;

//************************************************************************************************************************************************************//

// FLOW CONTROL FUNCTIONS

//************************************************************************************************************************************************************//

//-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------//

function CleanUpTest()

//-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------//

{

UpdateStatus("*********************************************************************************************");

SetTestName("Cleanup"); // Set Tars Label

UpdateStatus("*********************************************************************************************");



End;

}





LadyBug_SetAntiAliasingEnabled

Previous Top Next



* * *



LadyBug_SetAntiAliasingEnabled



Usage:

$ErrorCode = LadyBug_SetAntiAliasingEnabled($Address,$OnOff);



Description:

This function requires the installation of the LadyBug sensor driver on the system.

This function enable or disable this feature.

Normally, the sampling rate is 500 kHz. As the baseband signals approach the Nyquist criteria (realistically about 200 kHz in this case) problems arise. There are several approaches that can be used to resolve this problem. We use an anti-aliasing capability that really amounts to randomizing the samples. This randomization does have some affect on the rapidity of acquiring the data.

As a result, the anti-aliasing algorithm is normally turned off. However, if you are measuring signals that have baseband content greater than about 200 kHz we recommend turning on the anti-aliasing feature.





Result:

$ErrorCode = LadyBug_SetAntiAliasingEnabled($Address,$OnOff);

Function arguments



Parameter

Variable Type

Description



$Address

integer

The address of the instrument.



$OnOff

boolean

If $OnOff is true, it's enabled. If $OnOff is false, it's not enabled.





Return parameters



Parameter

Variable Type

Description



$ErrorCode

integer

Success if $ErrorCode > 0. If $ErrorCode <= 0, there is a failure.





Example(s):

$ErrorCode = LadyBug_SetAntiAliasingEnabled(1,false);





LadyBug_SetAutoPulseEnabled

Previous Top Next



* * *



LadyBug_SetAutoPulseEnabled



Usage:

$ErrorCode = LadyBug_SetAutoPulseEnabled($Address,$OnOff);



Description:

This function requires the installation of the LadyBug sensor driver on the system.

This function enable or disable the default or automatic pulse measurement criteria. The default value is 3 dB below the measured peak value. This means that when this feature is enabled, the pulse power will be the average of all power greater than 3 dB below peak.

For example, if the peak was measured to be -30 dBm and this feature was enabled, all samples greater than -33dBm would be included as pulse power.





Result:

$ErrorCode = LadyBug_SetAutoPulseEnabled($Address,$OnOff);

Function arguments



Parameter

Variable Type

Description



$Address

integer

The address of the instrument.



$OnOff

boolean

If $OnOff is true, it's enabled. If $OnOff is false, it's not enabled.





Return parameters



Parameter

Variable Type

Description



$ErrorCode

integer

Success if $ErrorCode > 0. If $ErrorCode <= 0, there is a failure.





Example(s):

$ErrorCode = LadyBug_SetAutoPulseEnabled(1,false);





LadyBug_SetCWReference

Previous Top Next



* * *



LadyBug_SetCWReference



Usage:

$ErrorCode = LadyBug_SetCWReference($Address,$ReferenceLevel,$Unit);



Description:

This function requires the installation of the LadyBug sensor driver on the system.

This function setups the sensor for relative measurements during CW measurements. To make relative measurements you must set the units of measure to “dB Relative”.





Result:

$ErrorCode = LadyBug_SetCWReference($Address,$ReferenceLevel,$Unit);

Function arguments



Parameter

Variable Type

Description



$Address

integer

The address of the instrument.



$ReferenceLevel

float

The reference level.



$Unit

string

The measurement power unit. Valid values:

· W

· V

· DBW

· DBUV

· DBREL

· DBM

· DBKW





Return parameters



Parameter

Variable Type

Description



$ErrorCode

integer

Success if $ErrorCode > 0. If $ErrorCode <= 0, there is a failure.





Example(s):

$ErrorCode = LadyBug_SetCWReference($Address,1.0,"DBM");





LadyBug_SetDutyCycleEnabled

Previous Top Next



* * *



LadyBug_SetDutyCycleEnabled



Usage:

$ErrorCode = LadyBug_SetDutyCycleEnabled($Address,$OnOff);



Description:

This function requires the installation of the LadyBug sensor driver on the system.

CW power sensors have traditionally “adjusted” their power reading based on a known duty cycle provided by the user. Since the Ladybug sensors can measure pulse power and duty cycle directly this is generally viewed as an obsolete technique. However, this feature has been included in deference to this tradition and for comparative reasons.

The calculation to adjust for duty cycle is:

10Log10(Duty Cycle)

So if your duty cycle was assumed to be 10%, the calculation for equivalent average power would be:

10Log10( 0.1) = -10 dB

This means the average power of a signal with a 10% duty cycle will be 10 dB below the peak value. For meters measuring average power the power reading is simply adjusted by 10 dB. This adjustment yields the peak power but it also assumes that the duty cycle is correct.

This function enables or disables the duty cycle adjustment.





Result:

$ErrorCode = LadyBug_SetDutyCycleEnabled($Address,$OnOff);

Function arguments



Parameter

Variable Type

Description



$Address

integer

The address of the instrument.



$OnOff

boolean

If $OnOff is true, it's enabled. If $OnOff is false, it's not enabled.





Return parameters



Parameter

Variable Type

Description



$ErrorCode

integer

Success if $ErrorCode > 0. If $ErrorCode <= 0, there is a failure.





Example(s):

$ErrorCode = LadyBug_SetDutyCycleEnabled(1,false);





LadyBug_SetDutyCyclePerCent

Previous Top Next



* * *



LadyBug_SetDutyCyclePerCent



Usage:

$ErrorCode = LadyBug_SetDutyCyclePerCent($Address,$DutyCycle);



Description:

This function requires the installation of the LadyBug sensor driver on the system.

CW power sensors have traditionally “adjusted” their power reading based on a known duty cycle provided by the user. Since the Ladybug sensors can measure pulse power and duty cycle directly this is generally viewed as an obsolete technique. However, this feature has been included in deference to this tradition and for comparative reasons.

The calculation to adjust for duty cycle is:

10Log10(Duty Cycle)

So if your duty cycle was assumed to be 10%, the calculation for equivalent average power would be:

10Log10( 0.1) = -10 dB

This means the average power of a signal with a 10% duty cycle will be 10 dB below the peak value. For meters measuring average power the power reading is simply adjusted by 10 dB. This adjustment yields the peak power but it also assumes that the duty cycle is correct.





Result:

$ErrorCode = LadyBug_SetDutyCyclePerCent($Address,$DutyCycle);

Function arguments



Parameter

Variable Type

Description



$Address

integer

The address of the instrument.



$DutyCycle

float

Duty cycle per cent value.





Return parameters



Parameter

Variable Type

Description



$ErrorCode

integer

Success if $ErrorCode > 0. If $ErrorCode <= 0, there is a failure.





Example(s):

$ErrorCode = LadyBug_SetDutyCyclePerCent(1,10);





LadyBug_SetFrequency

Previous Top Next



* * *



LadyBug_SetFrequency



Usage:

$ErrorCode = LadyBug_SetFrequency($Address,$Frequency);



Description:

This function requires the installation of the LadyBug sensor driver on the system.

This function sets the frequency of the addressed device.



Result:

$ErrorCode = LadyBug_SetFrequency($Address,$Frequency);

Function arguments



Parameter

Variable Type

Description



$Address

integer

The address of the instrument.



$Frequency

float

The frequency in Hz.





Return parameters



Parameter

Variable Type

Description



$ErrorCode

integer

Success if $ErrorCode > 0. If $ErrorCode <= 0, there is a failure.





Example(s):

$ErrorCode = LadyBug_SetFrequency(1,1000.0);





LadyBug_SetLimitEnabled

Previous Top Next



* * *



LadyBug_SetLimitEnabled



Usage:

$ErrorCode = LadyBug_SetLimitEnabled($Address,$LimitStyle);



Description:

This function requires the installation of the LadyBug sensor driver on the system.

Limits are fixed values against which a measured value is compared. Then an evaluation is expressed as pass or fail (normally). This evaluation is done during a measurement. Specifically, the evaluation is made and returned during either LadyBug_MeasureCW_PF or LadyBug_MeasurePulse_PF.





Result:

$ErrorCode = LadyBug_SetLimitEnabled($Address,$LimitStyle);

Function arguments



Parameter

Variable Type

Description



$Address

integer

The address of the instrument.



$LimitStyle

string

The limit style to apply. Valid values:

· DOUBLE_SIDED

· SINGLE_SIDED

· OFF





Return parameters



Parameter

Variable Type

Description



$ErrorCode

integer

Success if $ErrorCode > 0. If $ErrorCode <= 0, there is a failure.





Example(s):

$ErrorCode = LadyBug_SetLimitEnabled(1,"DOUBLE_SIDED");





LadyBug_SetMeasurementPowerUnits

Previous Top Next



* * *



LadyBug_SetMeasurementPowerUnits



Usage:

$ErrorCode = LadyBug_SetMeasurementPowerUnits($Address,$Unit);



Description:

This function requires the installation of the LadyBug sensor driver on the system.

This function set the measurement power units.

Result:

$ErrorCode = LadyBug_SetMeasurementPowerUnits($Address,$Unit);

Function arguments



Parameter

Variable Type

Description



$Address

integer

The address of the instrument.



$Unit

string

The measurement power unit. Valid values:

· W

· V

· DBW

· DBUV

· DBREL

· DBM

· DBKW





Return parameters



Parameter

Variable Type

Description



$ErrorCode

integer

Success if $ErrorCode > 0. If $ErrorCode <= 0, there is a failure.





Example(s):

$ErrorCode = LadyBug_SetMeasurementPowerUnits(1,"W");





LadyBug_SetOffset

Previous Top Next



* * *



LadyBug_SetOffset



Usage:

$ErrorCode = LadyBug_SetOffset($Address,$Offset);



Description:

This function requires the installation of the LadyBug sensor driver on the system.

This function causes a fixed offset to be added to the reading. The offset is typically used to compensate for losses or gains in the measurement path. This offset is fixed and is not a function of frequency. If you need an offset that is a function of frequency use the response function calls.





Result:

$ErrorCode = LadyBug_SetOffset($Address,$Offset);

Function arguments



Parameter

Variable Type

Description



$Address

integer

The address of the instrument.



$Offset

float

The offset.





Return parameters



Parameter

Variable Type

Description



$ErrorCode

integer

Success if $ErrorCode > 0. If $ErrorCode <= 0, there is a failure.





Example(s):

$ErrorCode = LadyBug_SetOffset(1,2.0);





LadyBug_SetOffsetEnabled

Previous Top Next



* * *



LadyBug_SetOffsetEnabled



Usage:

$ErrorCode = LadyBug_SetOffsetEnabled($Address,$OnOff);



Description:

This function requires the installation of the LadyBug sensor driver on the system.

This function cause a fixed offset to be added to the reading, or enable/disable the feature. The offset is typically used to compensate for losses or gains in the measurement path. This offset is fixed and is not a function of frequency.





Result:

$ErrorCode = LadyBug_SetOffsetEnabled($Address,$OnOff);

Function arguments



Parameter

Variable Type

Description



$Address

integer

The address of the instrument.



$OnOff

boolean

If $OnOff is true, it's enabled. If $OnOff is false, it's not enabled.





Return parameters



Parameter

Variable Type

Description



$ErrorCode

integer

Success if $ErrorCode > 0. If $ErrorCode <= 0, there is a failure.





Example(s):

$ErrorCode = LadyBug_SetOffsetEnabled(1,false);





LadyBug_SetPulseReference

Previous Top Next



* * *



LadyBug_SetPulseReference



Usage:

$ErrorCode = LadyBug_SetPulseReference($Address,$PulseRef,$PeakRef,$AvgRef,$DutyRef,$Unit);



Description:

This function requires the installation of the LadyBug sensor driver on the system.

This function setups the sensor for relative measurements during CW measurements. To make relative measurements you must set the units of measure to “dB Relative”.





Result:

$ErrorCode = LadyBug_SetPulseReference($Address,$PulseRef,$PeakRef,$AvgRef,$DutyRef,$Unit);

Function arguments



Parameter

Variable Type

Description



$Address

integer

The address of the instrument.



$PulseRef

float

The pulse reference level.



$PeakRef

float

The peak reference level.



$AvgRef

float

The average reference level.



$DutyRef

float

The duty cycle reference level.



$Unit

string

The measurement power unit. Valid values:

· W

· V

· DBW

· DBUV

· DBREL

· DBM

· DBKW





Return parameters



Parameter

Variable Type

Description



$ErrorCode

integer

Success if $ErrorCode > 0. If $ErrorCode <= 0, there is a failure.





Example(s):

$ErrorCode = LadyBug_SetPulseReference(1,1.0,1.0,1.0,10.0,"W");





LadyBug_SetResponseEnabled

Previous Top Next



* * *



LadyBug_SetResponseEnabled



Usage:

$ErrorCode = LadyBug_SetResponseEnabled($Address,$OnOff);



Description:

This function requires the installation of the LadyBug sensor driver on the system.

Response is a frequency sensitive offset, so as you change the measurement frequency the response changes accordingly. Response amplitude is always expressed in dB and the frequency is expressed in Hz. The interpolation is linear with respect to frequency and dB.

The response allows up to 201 points to be entered. The response points are frequency and amplitude pairs. Each set of function calls below are accompanied by the definition of the points. When the points are passed you must also specify the number of points.

This function enables/disables the response feature.





Result:

$ErrorCode = LadyBug_SetResponseEnabled($Address,$OnOff);

Function arguments



Parameter

Variable Type

Description



$Address

integer

The address of the instrument.



$OnOff

boolean

If $OnOff is true, it's enabled. If $OnOff is false, it's not enabled.





Return parameters



Parameter

Variable Type

Description



$ErrorCode

integer

Success if $ErrorCode > 0. If $ErrorCode <= 0, there is a failure.





Example(s):

$ErrorCode = LadyBug_SetResponseEnabled(1,false);





NI445X_Init

Previous Top Next



* * *



NI445X_Init

Usage:

NI445X_Init($deviceNumber);

Description:

This is a direct mapping of the NIDAQ functions , therefore it requires NIDAQ by National Instruments to be installed.

This function opens and configures a dynamic signal analyzer.

Function Arguments



Parameter

Variable Type

Description



$deviceNumber

Integer

The number assigned to your device in the Measurement and Automation explorer utility by National Instruments.





Return Parameters



Parameter

Variable Type

Description



None





AeroFlexSigGen_AttenuatorHold

Previous Top Next



* * *





AeroFlexSigGen_AttenuatorHold





Usage:





AeroFlexSigGen_AttenuatorHold($handle, $hold);





Description:





This function sets the Attenuator Hold Setting.

Note: If the attenuator hold is enabled, the bulk attenuators will be held in their current state. The range of RF output level available will then be restricted. This property can only be set if the LO external trigger mode is set to "NONE".





Function arguments



Parameter

Variable Type

Description



$handle

Object

The handle of the instrument returned from the AeroFlexSigGen_Open function



$hold

Boolean

Sets the attenuator hold setting.





Return parameters



Parameter

Variable Type

Description



none





Example(s):





AeroFlexSigGen_AttenuatorHold($handle, false);





AeroFlexSigGen_Close

Previous Top Next



* * *





AeroFlexSigGen_Close





Usage:





AeroFlexSigGen_Close($handle);





Description:





This method closes and frees up all resources used by the signal generator.

Function arguments



Parameter

Variable Type

Description



$handle

Object

The handle of the instrument returned from the AeroFlexSigGen_Open function





Return parameters



Parameter

Variable Type

Description



none





Example(s):





AeroFlexSigGen_Close($handle);





AeroFlexSigGen_EnableOutput

Previous Top Next



* * *





AeroFlexSigGen_EnableOutput





Usage:





AeroFlexSigGen_EnableOutput($handle, $enable);





Description:





This property sets the RF output enable of the active channel being used by the signal generator when in manual (i.e. non-hopping) mode.

Note: Default is false

Function arguments



Parameter

Variable Type

Description



$handle

Object

The handle of the instrument returned from the AeroFlexSigGen_Open function



$enable

Boolean

Enable or Disable the output for the signal generator.

[TRUE or FALSE]





Return parameters



Parameter

Variable Type

Description



none





Example(s):





AeroFlexSigGen_EnableOuput($handle, TRUE);





AeroFlexSigGen_GetCurrentlyPlayingARBFile

Previous Top Next



* * *





AeroFlexSigGen_GetCurrentlyPlayingARBFile





Usage:





AeroFlexSigGen_GetCurrentlyPlayingARBFile($handle);





Description:





This function returns true or false depending on whether or not the signal generator is currently playing back an arbitrary wave form file created in MATLAB or the IQ Creator software package. If an ARB file is currently being played back on the Signal Generator, the name of the file is also returned.

Function arguments



Parameter

Variable Type

Description



$handle

Object

The handle of the instrument returned from the AeroFlexSigGen_Open function





Return parameters



Parameter

Variable Type

Description



$IsFilePlaying

Boolean

True/False value indicating whether or not an arbitrary waveform file is currently being played back on the system.



$FileName

String

The name of the file being played back on the system, the file name is an empty string if no file is currently being played back.





Example(s):





($IsFilePlaying,$FileName) = AeroFlexSigGen_GetCurrentlyPlayingARBFile($handle);

UpdateStatus($IsFileIsPlaying);

UpdateStatus($FileName);





AeroFlexSigGen_Open

Previous Top Next



* * *





AeroFlexSigGen_Open





Usage:





$handle = AeroFlexSigGen_Open($sigGenResource, $oscResource, $oscIsPlugin);





Description:

This method attempts to boot the signal generator using the parameters provided.

$sigGenResource and $oscResource must be valid Visa resource strings.

$oscIsPlugin must be set to true if an AF3010 is not being used for the LO, in which case the $oscResource must have been preset to a valid plugin. Note that using a plugin to drive the local oscillator will reduce the overall functionality of the signal generator.

This function initializes a session with the instrument and returns the handle to the test script.

Function arguments



Parameter

Variable Type

Description



$sigGenResource

String

The resource name of the signal generator.



$oscResource

String

The resource name of the oscillator.



$oscIsPlugin

Boolean

Local Oscillator input to the signal generator is plugin [TRUE or FALSE]





Return parameters



Parameter

Variable Type

Description



$handle

Object

The handle to the instrument session.





Example(s):





$handle = AeroFlexSigGen_Open("PXI2::15::INSTR", "PXI2::14::INSTR", FALSE);





AeroFlexSigGen_PlayARBFile

Previous Top Next



* * *





AeroFlexSigGen_PlayARBFile





Usage:





AeroFlexSigGen_PlayARBFile($handle,$filename);





Description:





This method plays an ARB file from the instrument's catalog. If the file isn't already present in the catalog, this function adds it automatically.

This function also automatically sets the IQ source to ARB, and the VCO frequency as appropriate for the file being played.

Note: The file is identified in the catalog by the name given here. If the name is specified differently it will be loaded again. It may be necessary to have one or more options enabled on the module to be able to load certain ARB files.

Function arguments



Parameter

Variable Type

Description



$handle

Object

The handle of the instrument returned from the AeroFlexSigGen_Open function





Return parameters



Parameter

Variable Type

Description



None





Example(s):





AeroFlex_PlayARBFile($Handle,"c:\\arbfiles\\myfile.aiq");





AeroFlexSigGen_SetChannel

Previous Top Next



* * *





AeroFlexSigGen_SetChannel





Usage:





AeroFlexSigGen_SetChannel($handle, $ChannelNumber);





Description:





This function sets the active channel being used by the signal generator when in manual (i.e. non-hopping) mode.

Note: This property can only be set if the LO external trigger mode is set to "NONE"

Function arguments



Parameter

Variable Type

Description



$handle

Object

The handle of the instrument returned from the AeroFlexSigGen_Open function



$ChannelNumber

Integer

Sets the desired channel for the signal generator





Return parameters



Parameter

Variable Type

Description



none





Example(s):





AeroFlexSigGen_SetChannel($handle, 2);





AeroFlexSigGen_SetFrequency

Previous Top Next



* * *





AeroFlexSigGen_SetFrequency





Usage:





AeroFlexSigGen_SetFrequency($handle, $frequency);





Description:





This method sets the frequency (in Hz) of the active channel being used by the signal generator when in manual mode.

Function arguments



Parameter

Variable Type

Description



$handle

Object

The handle of the instrument returned from the AeroFlexSigGen_Open function



$frquency

Float

The frequency value to set the signal generator to.





Return parameters



Parameter

Variable Type

Description



none





Example(s):





AeroFlexSigGen_SetFrequency($handle, 250.06);





AeroFlexSigGen_SetLORef

Previous Top Next



* * *





AeroFlexSigGen_SetLORef





Usage:





AeroFlexSigGen_SetLORef($handle,$LOReferenceMode);





Description:

This function sets the LO external reference mode.

Function arguments



Parameter

Variable Type

Description



$handle

Object

The handle of the instrument returned from the AeroFlexSigGen_Open function



$LOReferenceMode

String

Sets the desired LO reference mode:

· "OCXO" = Internal

· "INTERNAL" = Internal

· "EXTERNALDAISY" = External

· "EXTERNALTERMINATED" = External





Return parameters



Parameter

Variable Type

Description



none





Example(s):





AeroFlexSigGen_SetLOReference($handle,"INTERNAL");





AeroFlexSigGen_SetLOTriggerSource

Previous Top Next



* * *





AeroFlexSigGen_SetLOTriggerSource





Usage:





AeroFlexSigGen_SetLOTriggerSource($handle,$TriggerSource);





Description:





This property sets the LO external trigger mode. If a plugin is being used to drive the LO, it should be noted that this setting has no effect.





Function arguments



Parameter

Variable Type

Description



$handle

Object

The handle of the instrument returned from the AeroFlexSigGen_Open function



$TriggerSource

String

Allowable values for the LO trigger source include:

· ADVANCE

· TOGGLE

· HOP

· NONE





Return parameters



Parameter

Variable Type

Description



none





Example(s):





AeroFlexSigGen_SetLOTriggerSource($handle,"NONE");





AeroFlexSigGen_SetLevel

Previous Top Next



* * *





AeroFlexSigGen_SetLevel





Usage:





AeroFlexSigGen_SetLevel($handle, $level);





Description:





This property sets the desired RF output level (in dBm) of the active channel being used by the signal generator when in manual (i.e. non-hopping) mode.

Note: level range -136.0 to +5.0

Function arguments



Parameter

Variable Type

Description



$handle

Object

The handle of the instrument returned from the AeroFlexSigGen_Open function



$level

Float

The level value to set the signal generator to. Range is -136.0 to + 5.0





Return parameters



Parameter

Variable Type

Description



none





Example(s):





AeroFlexSigGen_SetLevel($handle, -10);





AeroFlexSigGen_SetMode

Previous Top Next



* * *





AeroFlexSigGen_SetMode





Usage:





AeroFlexSigGen_SetMode($handle, $mode);





Description:





This property sets the RF output levelling mode of the active channel being used by the signal generator when in manual (i.e. non-hopping) mode.

Four modes are accepted:

Manual: A simplified interface for the control of the Signal Generator. This mode provides a limited number of functions and properties, providing all the basic Signal Generator functionality.

ArbSeq: A form of List Mode: The purpose of this mode is to allow the definition of a sequence of ARB files. The emphasis of this mode is placed on ARB files and the sequence in which they are played.

Hopping: A form of List Mode: The emphasis of this mode is the control of a frequency and or level hop/sweep and as such provides the ability to define the dwell duration for each list point independently of each other. It does not provide channelised ARB file selection or control.

Full: This is the default and is provided for legacy support. It provides full access to all channelised and List Mode controls. This mode requires comprehensive knowledge and understanding of the Signal Generator to achieve the functionality provided by any of the other modes of operation.

Each of Manual, ArbSeq and Hopping modes are independent of each other. Setting parameters or properties in any of these modes has no effect on any of the others. They do however impact the settings of Full mode.

Equally, setting parameters in Full mode has no effect on any of the other three modes.

Function arguments



Parameter

Variable Type

Description



$handle

Object

The handle of the instrument returned from the AeroFlexSigGen_Open function



$mode

String

The RF output leveling mode for the signal generator.

[MANUAL,ARBSEQ,HOPPING,FULL]





Return parameters



Parameter

Variable Type

Description



none





Example(s):





AeroFlexSigGen_SetMode($handle, "MANUAL");





AeroFlexSigGen_SetModulationSource

Previous Top Next



* * *





AeroFlexSigGen_SetModulationSource





Usage:





AeroFlexSigGen_SetModulationSource($handle,$ModulationSource);





Description:





This function sets the IQ modulation source.





Note: This property can only be set if the LO external trigger mode is set to "NONE"

Function arguments



Parameter

Variable Type

Description



$handle

Object

The handle of the instrument returned from the AeroFlexSigGen_Open function



$modulationSource

String

The desired modulation source:

· "CW" = Continuous Waveform (basically a tone)

· "LVDS" = Front Panel LVDS input

· "ARB" = An Arbitrary Sequence File

· "AM" = Amplitude Modulation

· "FM" = Frequency Modulation

· "EXTAnalog" = External Analog Modulation Input





Return parameters



Parameter

Variable Type

Description



none





Example(s):





AeroFlexSigGen_SetModulationSource($handle, "CW");





AeroFlexSigGen_SetVCOExternalReference

Previous Top Next



* * *





AeroFlexSigGen_SetVCOExternalReference





Usage:





AeroFlexSigGen_SetVCOExternalReference($handle,$ExternalReference);





Description:

This function sets whether an external 10 MHZ Reference is being used for the VCO for the signal generator.

Function arguments



Parameter

Variable Type

Description



$handle

Object

The handle of the instrument returned from the AeroFlexSigGen_Open function



$ExternalReference

Boolean

Sets whether or not an external 10 Mhz reference is in use:

· "TRUE" = External Reference

· "FALSE" = Internal Reference





Return parameters



Parameter

Variable Type

Description



none





Example(s):





AeroFlexSigGen_SetVCOExternalReference($handle,true);





AeroFlexSigGen_StopARBFile

Previous Top Next



* * *





AeroFlexSigGen_StopARBFile





Usage:





AeroFlexSigGen_StopARBFile($handle);





Description:





This function will cease playback of the currently playing ARB file. If no file is currently playing, the function will simply return without an error.

Function arguments



Parameter

Variable Type

Description



$handle

Object

The handle of the instrument returned from the AeroFlexSigGen_Open function





Return parameters



Parameter

Variable Type

Description



none





Example(s):





AeroFlexSigGen_StopARBFile($handle);





AG33220A_Abort

Previous Top Next



* * *



AG33220A_Abort



Usage:

AG33220A_Abort($Handle);





Description:





This function immediately stops all signal generation without disconnecting the output relay of the signal generator.

Function arguments



Parameter

Variable Type

Description



$Handle

Object

The instrument handle





Return parameters



Parameter

Variable Type

Description



None





Usage Examples

AG33220A_Abort($Handle);





Supported Instruments

Agilent AG33220A Signal Generator





AG33220A_Close

Previous Top Next



* * *



AG33220A_Close

Usage:

AG33220A_Close($AgInstance);

Description:

This function uses the Agilent 33220 IVI in order to use the functions in JabilTest.

This function closes the Agilent 33220A and frees the resources consumed by the instrument.

Function Arguments



Parameter

Variable Type

Description



$AgInstance

Object

The object representing the handle to the instrument.





Return Parameters



Parameter

Variable Type

Description



None





AG33220A_Configure

Previous Top Next



* * *



AG33220A_Configure

Usage:

AG33220A_Configure($AgInstance,$WaveForm,$Voltage,$DCOffset,$Frequency,$Startphase);

Description:

This function uses the Agilent 33220 IVI in order to use the functions in JabilTest..

This function configure the output waveform of the Agilent 33220A.

Function Arguments



Parameter

Variable Type

Description



$AgInstance

Object

The object representing the handle to the instrument.



$WaveForm

String

The waveform shape to be generated by the instrument. Allowable values are:

· "SINE" or "SINUSOIDAL"

· "SQUARE"

· "PULSE"

· "NOISE"

· "RAMP"

· "DC"

· "USER"



$Voltage

Float

The Amplitude of the output voltage.



$DCOffset

Float

The DC offset voltage.



$Frequency

Float

The output frequency.



$Startphase

Float

See operations manual for details





Return Parameters



Parameter

Variable Type

Description



None





AG33220A_Init

Previous Top Next



* * *



AG33220A_Init

Usage:

$AgInstance = AG33220A_Init($ResourceString, $Reset);

Description:

This function uses the Agilent 33220 IVI in order to use the functions in JabilTest.

This function initializes the Agilent 33220A for operation. This function returns a passing result if the instrument can be initialized successfully, otherwise a failure is generated by the script function.

Function Arguments



Parameter

Variable Type

Description



$ResourceString

String

The resource string identifying the instrument. For example, "GPIB0::9::Instr".



$Reset

Boolean

Specifies whether or not to reset the instrument upon initialization.





Return Parameters



Parameter

Variable Type

Description



$AgInstance

Object

The object representing the instance of the Agilent 33120A.





AG33220A_Reset

Previous Top Next



* * *



AG33220A_Reset

Usage:

AG33220A_Reset($AgInstance);

Description:

This function uses the Agilent 33220 IVI in order to use the functions in JabilTest..

This function resets the Agilent 33220A back to default settings.

Function Arguments



Parameter

Variable Type

Description



$AgInstance

Object

The object representing the handle to the instrument.





Return Parameters



Parameter

Variable Type

Description



None





AG33220A_SelfTest

Previous Top Next



* * *



AG33220A_SelfTest



Usage:

AG33220A_SelfTest($Handle);





Description:





This function prompts the instrument to run an internal self test. If the self test is successful, the function passes, otherwise the function fails returning a description of the detected hardware fault.





Function arguments



Parameter

Variable Type

Description



$Handle

Object

The instrument handle





Return parameters



Parameter

Variable Type

Description



None





Usage Examples

AG33220A_SelfTest($Handle);





Supported Instruments

Agilent AG33220A Signal Generator





AG33220A_SetDisplayText

Previous Top Next



* * *



AG33220A_SetDisplayText

Usage:

AG33220A_SetDisplayText($Handle,$Message);



Description:





This function sets the display text on the instrument to the value set by the user.

Function arguments



Parameter

Variable Type

Description



$Handle

Object

The instrument handle



$Message

String

The message you want to display on the front panel





Return parameters



Parameter

Variable Type

Description



None





Usage Examples

AG33220A_SetDisplayText($Handle,"JABIL RULES!");





Supported Instruments

Agilent AG33220A Signal Generator





AG33220A_SetDutyCycle

Previous Top Next



* * *



AG33220A_SetDutyCycle



Usage:

AG33220A_SetDutyCycle($agHandle, $dutyCycle);



Description:

This function sets the duty cycle of the output waveform on the signal generator.





Remarks:

· This function uses the Agilent 33220 IVI in order to use the functions in JabilTest.

· Setting the duty cycle is only valid for square wave and pulse outputs. Any other output type will generate an error.

Function arguments



Parameter

Variable Type

Description



$agHandle

Object

The handle of the instrument returned from the AG33220A_Init function.



$dutyCycle

Float

The duty cycle in percent (%).





Return parameters



Parameter

Variable Type

Description



None





Example(s):

// Set duty cycle to 35%.

$dutyCycle = 35;

AG33220A_SetDutyCycle($agHandle, $dutyCycle);





AG33220A_SetOperationMode

Previous Top Next



* * *



AG33220A_SetOperationMode

Usage:

AG33220A_SetOperationMode($AgInstance,$OperationMode);

Description:

This function uses the Agilent 33220 IVI in order to use the functions in JabilTest..

This function configures the operation mode of the Agilent 33220A.

Function Arguments



Parameter

Variable Type

Description



$AgInstance

Object

The object representing the handle to the instrument.



$OperationMode

String

The operating of the instrument. Allowable values are:

"BURST"

"CONTINUOUS"





Return Parameters



Parameter

Variable Type

Description



None





AG33220A_SetOutputLoad

Previous Top Next



* * *



AG33220A_SetOutputLoad



Usage:

AG33220A_SetOutputLoad($Handle,$Impedance);





Description:





This function sets the output impedance of the signal generator to the value specified by the $Impendance argument. The impedance is specified in Ohms. This function actually sets function generator to drive a load of the expected impedance specified by the $Impedance argument.

Function arguments



Parameter

Variable Type

Description



$Handle

Object

The instrument handle



$Impedance

Float

The desired output impedance of the instrument specified in ohms.





Return parameters



Parameter

Variable Type

Description



None





Usage Examples

$InstrumentHandle = AG33220A_SetOutputLoad($Handle,50);





Supported Instruments

Agilent AG33220A Signal Generator





AG33220A_SetOutputLoadHighImpedance

Previous Top Next



* * *



AG33220A_SetOutputLoadHighImpedance



Usage:

AG33220A_SetOutputLoadHighImpedance($Handle);





Description:





This function sets the output impedance of the signal generator to a high-impedance state. This effectively sets the instrument to expect to drive a load with an infinite impedance.

Function arguments



Parameter

Variable Type

Description



$Handle

Object

The instrument handle





Return parameters



Parameter

Variable Type

Description



None





Usage Examples

$InstrumentHandle = AG33220A_SetOutputLoadHighImpedance($Handle);





Supported Instruments

Agilent AG33220A Signal Generator





AG33220A_SetOutputState

Previous Top Next



* * *



AG33220A_SetOutputState

Usage:

AG33220A_SetOutputState($AgInstance, $State);

Description:

This function uses the Agilent 33220 IVI in order to use the functions in JabilTest..

This function sets the state of the Agilent 33220A output.

Function Arguments



Parameter

Variable Type

Description



$AgInstance

Object

The object representing the handle to the instrument.



$State

Boolean

The state to set the output to.





Return Parameters



Parameter

Variable Type

Description



None





AG33220A_SetPulse

Previous Top Next



* * *



AG33220A_SetPulse

Usage:

AG33220A_SetPulse($HpInstance,$Frequency,$Voltage,$DCOffset,$PulseWidth);

Description:

This function uses the Agilent 33220 IVI in order to use the functions in JabilTest..

This function sets the parameters for pulse generation and enables the output.

Function Arguments



Parameter

Variable Type

Description



$AgInstance

Object

The object representing the handle to the instrument.



$Frequency

Float

The frequency at witch the pulse will be generated.



$Voltage

Float

The Peak to Peak output voltage



$DCOffset

Float

The DC offset voltage.



$PulseWidth

Float

The pulse width of the output in seconds





Return Parameters



Parameter

Variable Type

Description



None





HP33120A_Close

Previous Top Next



* * *



HP33120A_Close

Usage:

HP33120A_Close($HpInstance);

Description:

This function uses the Agilent VXI PNP 33120A driver in order to use the functions in JabilTest.

This function closes the HP33120A and frees the resources consumed by the instrument.

Function Arguments



Parameter

Variable Type

Description



$HpInstance

Object

The object representing the handle to the instrument.





Return Parameters



Parameter

Variable Type

Description



None





HP33120A_Init

Previous Top Next



* * *



HP33120A_Init

Usage:

$HpInstance = HP33120A_Init($ResourceString);

Description:

This function uses the Agilent VXI PNP 33120A driver in order to use the functions in JabilTest.

This function initializes the HP33120A for operation. This function returns a passing result if the instrument can be initialized successfully, otherwise a failure is generated by the script function.

Function Arguments



Parameter

Variable Type

Description



$ResourceString

String

The resource string identifying the instrument. For example, "GPIB0::9::Instr".



$Reset

Boolean

Specifies whether or not to reset the instrument upon initialization.





Return Parameters



Parameter

Variable Type

Description



$AgInstance

Object

The object representing the instance of the HP33120A.





HP33120A_SetFrequency

Previous Top Next



* * *



HP33120A_SetFrequency

Usage:

HP33120A_SetFrequency($HpInstance,$Frequency);

Description:

This function uses the Agilent VXI PNP 33120A driver in order to use the functions in JabilTest.

This function configures the frequency of the generated output waveform. The frequency is specified in Hertz.

Function Arguments



Parameter

Variable Type

Description



$HpInstance

Object

The object representing the handle to the instrument.



$Frequency

Float

Specifies the frequency of the generated waveform function in hertz.





Return Parameters



Parameter

Variable Type

Description



None





HP33120A_SetFunctionShape

Previous Top Next



* * *



HP33120A_SetFunctionShape

Usage:

HP33120A_SetFunctionShape($HpInstance,$WaveFormShape);

Description:

This function uses the Agilent VXI PNP 33120A driver in order to use the functions in JabilTest.

This function specifies the waveform shape to be generated by the waveform generator.

Function Arguments



Parameter

Variable Type

Description



$HpInstance

Object

The object representing the handle to the instrument.



$WaveFormShape

String

The waveform shape to be generated by the instrument. Allowable values are:

"SINUSOIDAL"

"SQUARE"

"TRIANGLE"

"RAMP"

"NOISE"

"DC"

"USER"





Return Parameters



Parameter

Variable Type

Description



None





HP33120A_SetOffset

Previous Top Next



* * *



HP33120A_SetOffset

Usage:

HP33120A_SetOffset($HpInstance,$OffsetVoltage);

Description:

This function uses the Agilent VXI PNP 33120A driver in order to use the functions in JabilTest.

This function specifies the voltage offset generated by the waveform generator. The voltage unit is configured by the HP33120A_SetVoltUnit function which should be used before calling the HP33120A_SetVolt function.

Function Arguments



Parameter

Variable Type

Description



$HpInstance

Object

The object representing the handle to the instrument.



$OffsetVoltage

Float

The scalar value representing the output offset voltage. The unit corresponding to this number is set by using the HP33120A_SetVoltUnit function which should be called prior to using the HP33120A_SetVolt function. The allowable limits are +-2.50 Volts.





Return Parameters



Parameter

Variable Type

Description



None





HP33120A_SetVolt

Previous Top Next



* * *



HP33120A_SetVolt

Usage:

HP33120A_SetVolt($HpInstance,$Voltage);

Description:

This function uses the Agilent VXI PNP 33120A driver in order to use the functions in JabilTest.

This function specifies the voltage output generated by the waveform generator. The voltage unit is configured by the HP33120A_SetVoltUnit function which should be used before calling the HP33120A_SetVolt function.

Function Arguments



Parameter

Variable Type

Description



$HpInstance

Object

The object representing the handle to the instrument.



$Voltage

Float

The scalar value representing the output amplitude. The unit corresponding to this number is set by using the HP33120A_SetVoltUnit function which should be called prior to using the HP33120A_SetVolt function.





Return Parameters



Parameter

Variable Type

Description



None





HP33120A_SetVoltUnit

Previous Top Next



* * *



HP33120A_SetVoltUnit

Usage:

HP33120A_SetVoltUnit($HpInstance,$VoltageUnit);

Description:

This function uses the Agilent VXI PNP 33120A driver in order to use the functions in JabilTest.

This function specifies the voltage unit used by the waveform generator. The actual amplitude is configured using the HP33120A_SetVoltage function.

Function Arguments



Parameter

Variable Type

Description



$HpInstance

Object

The object representing the handle to the instrument.



$VoltageUnit

String

Specifies the voltage unit to be used by the instrument to configure the output amplitude. Allowable values are:

"VPP"

"VRMS"

"DBM"

"Default"





Return Parameters



Parameter

Variable Type

Description



None





HP8648X_Close

Previous Top Next



* * *



HP8648X_Close



Usage:

HP8648X_Close($handle);



Description:

This function ends communications with the signal generator.





Notes:

· The Agilent IO Libraries Suite must be loaded to communicate with this instrument.

Function arguments



Parameter

Variable Type

Description



$handle

Object

The session handle that was returned by the HP8648X_Init function.





Return parameters



Parameter

Variable Type

Description



None





Example(s):

// Connect to an instrument on GPIB bus at address 7.





$resource = "GPIB0::7::INSTR";

$handle = HP8648X_Init($resource, false);





//Close communication with the instrument.

HP8648X_Close($handle);





HP8648X_Init

Previous Top Next



* * *



HP8648X_Init



Usage:

$handle = HP8648X_Init($resource, $reset);



Description:

This function initiates communications with the signal generator and optionally, performs a reset of the instrument.





Notes:

· The Agilent IO Libraries Suite must be loaded to communicate with this instrument.

· Resetting the instrument will clear all settings.

Function arguments



Parameter

Variable Type

Description



$resource

String

The resource descriptor for communication with the instrument. In VISA format.



$reset

Boolean

Whether to reset the instrument when connecting to it.





Return parameters



Parameter

Variable Type

Description



$handle

Object

A session handle that is used to identify the device in all subsequent function calls.





Example(s):

// Connect to an instrument on GPIB bus at address 7.





$resource = "GPIB0::7::INSTR";

$handle = HP8648X_Init($resource, false);





HP8648X_OutputSignal

Previous Top Next



* * *



HP8648X_OutputSignal



Usage:

HP8648X_OutputSignal($handle, $frequency, $amplitude, $modulation, $modLevel, $modSignal, $internalFreq, $coupling);



Description:

This function generates a signal with the supplied characteristics.





Notes:

· The Agilent IO Libraries Suite must be loaded to communicate with this instrument.

Function arguments



Parameter

Variable Type

Description



$handle

Object

The session handle that was returned by the HP8648X_Init function.



$frequency

Float

The frequency of the generated signal in MHz.



$amplitude

Float

The amplitude of the generated signal in dBm.



$modulation

String

The modulation type of the generated signal.

Values:

· AM

· FM

· PM.



$modLevel

Float

The modulation level of the generated signal.



$modSignal

String

The source of the modulating signal.

Values:

· INTERNAL

· EXTERNAL

· INTERNALEXTERNAL



$internalFreq

Boolean

Whether to turn on the internal frequency generator.



$coupling

Boolean

Whether to turn on external coupling of the signal.





Return parameters



Parameter

Variable Type

Description



None





Example(s):

// Connect to an instrument on GPIB bus at address 7.





$resource = "GPIB0::7::INSTR";

$handle = HP8648X_Init($resource, false);





//Generate a signal.

$freq = 23;

$amp = 12;

$mod = "AM";

$modLev = 2;

$modSignal = "INTERNAL";

$intern = true;

$couple = false;

HP8648X_OutputSignal($handle, $freq, $amp, $mod, $modLev, $modSig, $intern, $couple);





HP8648X_SelfTest

Previous Top Next



* * *



HP8648X_SelfTest



Usage:

HP8648X_SelfTest($handle);



Description:

This function tells the instrument to do a self-test.





Notes:

· The Agilent IO Libraries Suite must be loaded to communicate with this instrument.

· If the instrument fails the self-test, this function will fail the test.

Function arguments



Parameter

Variable Type

Description



$handle

Object

The session handle that was returned by the HP8648X_Init function.





Return parameters



Parameter

Variable Type

Description



None





Example(s):

// Connect to an instrument on GPIB bus at address 7.





$resource = "GPIB0::7::INSTR";

$handle = HP8648X_Init($resource, false);





//Perform the Self Test.

HP8648X_SelfTest($handle);





HPESG_Close

Previous Top Next



* * *



HPESG_Close

Usage:

HPESG_Close($Handle)

Description:

This function controls the Agilent ESG Series of Signal Generators. In order to use these function the VXI pnp driver for the instrument must be installed on the system running Jabil Test. The latest version of this driver can be downloaded from Agilent. This function supports the following instruments: ESG-1000B, ESG-2000B, ESG-3000B, ESG-4000B, ESG-D1000B, ESG-D2000B, ESG-D3000B, ESG-D4000B, ESG-1000A, ESG-2000A, ESG-3000A, ESG-4000A, ESG-D1000A, ESG-D2000A, ESG-D3000A, ESG-D4000A, E4423B, E4424B, E4425B, E4426B, E4434B, E4435B, E4436B, and E4437B.

This function closes the instrument, and releases the instrument handle from memory.

Example:

HPESG_Close($Handle);



Function Arguments



Parameter

Variable Type

Description



$Handle

Object

The resource handle of the Spectrum Analyzer



Return Parameters



Parameter

Variable Type

Description



None





HPESG_ConfigAmplitude

Previous Top Next



* * *



HPESG.ConfigAmplitude

Usage:

HPESG.ConfigAmplitude($Handle,$AmplitudeOffset,$AttenuatorHoldMode,$ALCState,$ALCBandwidthMode)

Description:

This function controls the Agilent ESG Series of Signal Generators. In order to use these function the VXI pnp driver for the instrument must be installed on the system running Jabil Test. The latest version of this driver can be downloaded from Agilent. This function supports the following instruments: ESG-1000B, ESG-2000B, ESG-3000B, ESG-4000B, ESG-D1000B, ESG-D2000B, ESG-D3000B, ESG-D4000B, ESG-1000A, ESG-2000A, ESG-3000A, ESG-4000A, ESG-D1000A, ESG-D2000A, ESG-D3000A, ESG-D4000A, E4423B, E4424B, E4425B, E4426B, E4434B, E4435B, E4436B, and E4437B.

This function sets up some of the instrument's amplitude parameters.

Example:

HPESG_ConfigAmplitude($Handle,0.00,"ON","OFF","NARROW");



Function Arguments



Parameter

Variable Type

Description



$Handle

Object

The resource handle of the Spectrum Analyzer



$AmplitudeOffset

Float

Sets the amplitude offset for the RF output power level in dB. The offset changes the value shown in the amplitude area of the display but does not affect the absolute output power. Default is 0.00dB.



$AttenuatorHoldMode

String

Sets the signal generator to attenuator--hold mode where the power drop--outs do not occur for the power adjustments. Allowable Values are:

"ON"

"OFF"



$ALCState

String

Sets the state of the signal generator's RF output automatic leveling circuitry (ALC). Allowable Values are:

"ON"

"OFF"



$ALCBandwidthMode

String

Selects the bandwidth of the ALC loop. Defaults are Normal if I/Q modulation is off, Narrow if External I/Q modulation is on. Allowable values are:

"NORMAL"

"NARROW"



Return Parameters



Parameter

Variable Type

Description



None





HPESG_ConfigBERTData

Previous Top Next



* * *



HPESG_ConfigBERTData

Usage:

HPESG_ConfigBERTData($Handle,$BERTData,$MaxDataRate,$TotalBits,$SpecialPatternIgnore,$SpecialPattern,$ResyncOn,$ResyncLimits);

Description:

This function controls the Agilent ESG Series of Signal Generators. In order to use these function the VXI pnp driver for the instrument must be installed on the system running Jabil Test. The latest version of this driver can be downloaded from Agilent. This function supports the following instruments: ESG-1000B, ESG-2000B, ESG-3000B, ESG-4000B, ESG-D1000B, ESG-D2000B, ESG-D3000B, ESG-D4000B, ESG-1000A, ESG-2000A, ESG-3000A, ESG-4000A, ESG-D1000A, ESG-D2000A, ESG-D3000A, ESG-D4000A, E4423B, E4424B, E4425B, E4426B, E4434B, E4435B, E4436B, and E4437B.

This method is used to set the controls and parameters (BER Data Pattern, Maximum Data Rate, Total Bits, Special Pattern Ignore State, Special Pattern Ignore Data, Resynchronization State, and Resync Limits) for bit error rate test (BERT) measurements.

Function Arguments



Parameter

Variable Type

Description



$Handle

Object

The resource handle of the Spectrum Analyzer



$BERTData

String

Select the data pattern for the incoming data bit stream to make BER measurements. The choices are "PN9" and "PN15". The instrument preset value is PN9.



$MaxDataRate

String

Selects the maximum data rate mode. The choices are 2 Mbps and 10 Mbps. When 2 Mbps is selected, all BERT functions are available for configuration. When 10 Mbps is selected, the pass/fail judgement and special pattern ignore functions are unavailable. The instrument preset value is 2 Mbps. Valid Choices are:

"PN9"

"PN15"



$BERTTotalBits

String

Sets the total bit count to be measured. The range is from 100 to 4,294,967,295. The instrument preset value is 10,000.This parameter has to be a string type. Care must be given to make sure that the ASCII characters used are valid decimal numerics.



$BERTSpecialPatternIgnore

String

Selects the operating state of the special pattern ignore operation. The choices are "ON" or "OFF". The special pattern ignore operation detects more than 80 bits of 0's or 1's in the incoming bit stream and ignores these bits when making BER measurements. This selection is available only when the maximum data rate (BERTMaxDataRate) is set to 2 Mbps. The instrument preset value is off.



$BERTSpecialPattern

Integer

Selects the bit parameter of the special pattern ignore function. The choices are all 0's or all 1's. The special pattern ignore operation detects more than 80 bits of 0's or 1's in the incoming bit stream and ignores these bits when making BER measurements. This selection is available only when the maximum data rate (BERTMaxDataRate) is set to 2 Mbps, and the special pattern ignore mode is set on (BERTSpecialPatternIgnoreOn is true). The instrument preset value is all 0's. Valid Choices are:

1 = "All 1's Pattern"

0 = "All 0's Pattern"



$BERTResyncOn

String

Select the operating state for the resynchronization operation. The choices are "ON" or "OFF". This selection is available only when the maximum data rate (BERTMaxDataRate) is set to 2 Mbps. The instrument preset value is on.



$BERTResyncLimits

Float

Sets the threshold level for the resynchronizing operation. The range of the value is from 0.05 to 0.40. This selection is available only when the maximum data rate (BERTMaxDataRate) is set to 2 Mbps and the resynchronization operation is enabled (BERTResyncOn is true). The instrument preset value is on 0.4000.





Return Parameters



Parameter

Variable Type

Description



None





HPESG_ConfigBERTInput

Previous Top Next



* * *



HPESG_ConfigBERTInput

Usage:

HPESG.ConfigBERTInput($Handle,$ClockParity,$DataPolarity,$ClockGateOn,$ClockGatePolarity,$InputImpedance);

Description:

This function controls the Agilent ESG Series of Signal Generators. In order to use these function the VXI pnp driver for the instrument must be installed on the system running Jabil Test. The latest version of this driver can be downloaded from Agilent. This function supports the following instruments: ESG-1000B, ESG-2000B, ESG-3000B, ESG-4000B, ESG-D1000B, ESG-D2000B, ESG-D3000B, ESG-D4000B, ESG-1000A, ESG-2000A, ESG-3000A, ESG-4000A, ESG-D1000A, ESG-D2000A, ESG-D3000A, ESG-D4000A, E4423B, E4424B, E4425B, E4426B, E4434B, E4435B, E4436B, and E4437B.

This method is used to set the controls and parameters for the input connectors used in the bit error rate tests (the rear panel BER DATA IN, BER CLK IN, and BER GATE IN ports).

These controls can be found under the Mode, BERT, Configure BERT softkeys.

Function Arguments



Parameter

Variable Type

Description



$Handle

Object

The resource handle of the Spectrum Analyzer



$ClockParity

String

Selects the polarity of the clock signal at the rear panel BER CLK IN port. The choices are positive and negative. The instrument preset value is positive.

"POSITIVE"

"NEGATIVE"



$DataPolarity

String

Selects the polarity of the data signal at the rear panel BER DATA IN port. The choices are positive and negative. The instrument preset value is positive.

"POSITIVE"

"NEGATIVE



$ClockGateOn

String

Select the operating state of the clock gate operation. Valid Choices are:

"ON"

"OFF



$ClockGatePolarity

String

Selects the polarity of the clock gate signal at the rear panel BER GATE IN port. This selection is available only when the BER clock gate is on (BERTClockGateOn is true). The choices are positive and negative. The instrument preset value is positive.

"POSITIVE"

"NEGATIVE



$InputImpedance

String

Selects the input impedance for the rear panel BER DATA IN, BER CLK IN, and BER GATE IN ports. The choices are 75 ohms and TTL. The instrument preset value is TTL. Valid Choices are:

"75OHM"

"TTL"





Return Parameters



Parameter

Variable Type

Description



None





HPESG_ConfigBERTTrigger

Previous Top Next



* * *



HPESG_ConfigBERTTrigger

Usage:

HPESG_ConfigBERTInput($Handle,$TriggerSource,$TriggerCycleCount,$TriggerDelayOn,$TriggerDelayBits);

Description:

This function controls the Agilent ESG Series of Signal Generators. In order to use these function the VXI pnp driver for the instrument must be installed on the system running Jabil Test. The latest version of this driver can be downloaded from Agilent. This function supports the following instruments: ESG-1000B, ESG-2000B, ESG-3000B, ESG-4000B, ESG-D1000B, ESG-D2000B, ESG-D3000B, ESG-D4000B, ESG-1000A, ESG-2000A, ESG-3000A, ESG-4000A, ESG-D1000A, ESG-D2000A, ESG-D3000A, ESG-D4000A, E4423B, E4424B, E4425B, E4426B, E4434B, E4435B, E4436B, and E4437B.

This method is used to configure the BERT triggering controls and parameters (BERT Trigger, Cycle Count, Bit Delay, and Delayed Bits).

These controls can be found under the Mode, BERT, Configure Trigger softkeys.

Function Arguments



Parameter

Variable Type

Description



$Handle

Object

The resource handle of the Spectrum Analyzer



$TriggerSource

String

Configures the source of triggering. Valid Values are:

"IMMEDIATE" = Auto re--trigger a BER measurement after completion of the last BER measurement.

"KEY" = start measurement when the user presses the Trigger hardkey

"BUS" = Trigger a BER measurement via GPIB

"EXTERNAL" = Trigger a BER measurement on the positive or negative edge of a signal applied to the TRIGGER IN connector.



$TriggerCycleCount

Integer

Set the number of times that the BER measurement repeats (cycles). The range of values is from 0 to 65,535. With 0 set, the BER measurements are repeated till you set BERT mode off. The instrument preset value is 1.



$TriggerDelayOn

String

Select the operating state of the trigger delay. Valid Choices are:

"ON"

"OFF



$TriggerDelayBits

Integer

Sets the number of delay bits for the BER trigger delay. The range of values is from 0 to 65,535. This selection is available only when the BER bit trigger delay is enabled. The instrument preset value is 0.





Return Parameters



Parameter

Variable Type

Description



None





HPESG.ConfigCustomModulation

Previous Top Next



* * *



HPESG_ConfigCustomModulation

Usage:

HPESG_ConfigCustomModulation($Handle,$CustomModulationType,$CustomPhaseMSK,$CustomFreqDevFSK,$CustomUserFile)

Description:

This function controls the Agilent ESG Series of Signal Generators. In order to use these function the VXI pnp driver for the instrument must be installed on the system running Jabil Test. The latest version of this driver can be downloaded from Agilent. This function supports the following instruments: ESG-1000B, ESG-2000B, ESG-3000B, ESG-4000B, ESG-D1000B, ESG-D2000B, ESG-D3000B, ESG-D4000B, ESG-1000A, ESG-2000A, ESG-3000A, ESG-4000A, ESG-D1000A, ESG-D2000A, ESG-D3000A, ESG-D4000A, E4423B, E4424B, E4425B, E4426B, E4434B, E4435B, E4436B, and E4437B.

This function customizes the Custom Digital Modulation Formation current modulation type. See the HP-ESG programming manual for full details of each parameter, and it's function.

Function Arguments



Parameter

Variable Type

Description



$Handle

Object

The resource handle of the Spectrum Analyzer



$CustomModulationType

String

Sets the modulation Type, allowable values are:

"QPSK"

"IS95QPSK"

"GRAYQPSK"

"QPSK"

"IS95OQPSK"

"BPSK"

"P4DQPSK"

"PSK8"

"D8PSK"

"MSK"

"FSK2"

"FSK4"

"FSK8"

"FSK16"

"C4FM"

"QAM4"

"QAM16"

"QAM32"

"QAM64"

"QAM256"

"UIQ"

"UFSK"



$CustomPhaseMSK

Float

Sets the MSK phase deviation. The instrument preset is 90 degrees. The range of values is 0.0 to 100.0 degrees. This instrument parameter is only set when a MSK modulation type is selected.



$CustomFreqDevFSK

Float

Sets the FSK phase deviation. The instrument preset is 400.0 Hz. The range of values is 0.0 to a maximum that is dependent on the symbol rate. This instrument paraeter is only set when a FSK modulation type is selected.



$CustomUserFile

String

Selects the name of the user I/Q or FSK pre-stored configuration file for the modulation type selected.





Return Parameters



Parameter

Variable Type

Description



None





HPESG_ConfigCustomPattern

Previous Top Next



* * *



HPESG_ConfigCustomPattern

Usage:

HPESG.ConfigCustomPattern($Handle,$CustomPatternRepeat,$CustomPatternData,$CustomFIX4Data,$CustomPatternUserFile,$CustomPatternTrigger,$CustomPatternExtDelayOn,$CustomPatternExtDelayBits);

Description:

This function controls the Agilent ESG Series of Signal Generators. In order to use these function the VXI pnp driver for the instrument must be installed on the system running Jabil Test. The latest version of this driver can be downloaded from Agilent. This function supports the following instruments: ESG-1000B, ESG-2000B, ESG-3000B, ESG-4000B, ESG-D1000B, ESG-D2000B, ESG-D3000B, ESG-D4000B, ESG-1000A, ESG-2000A, ESG-3000A, ESG-4000A, ESG-D1000A, ESG-D2000A, ESG-D3000A, ESG-D4000A, E4423B, E4424B, E4425B, E4426B, E4434B, E4435B, E4436B, and E4437B.

This function is used to configure the custom digital modulation format pattern data settings. See the HP-ESG programming manual for full details about each function setting.

Function Arguments



Parameter

Variable Type

Description



$Handle

Object

The resource handle of the Spectrum Analyzer



$CustomPatternRepeat

String

Set to "Single" to output on occurence of the modulated data pattern. Set to "CONT" to output a continuous stream of the modulation data pattern selected.



$CustomPatternData

String

Select the modulation data source, either internal data generation, custom data, or external data input (I/Q data inputs). Settings are:

"PN9" = PN9 pseudo-random bit pattern

"PN11" = PN11 pseudo-random bit pattern

"PN15" = PN15 pseudo-random bit pattern

"PN20" = PN20 pseudo-random bit pattern

"PN23" = PN23 pseudo-random bit pattern

"FIX4" = 4-bit repeating sequence data pattern

"USERFILE" = external data input data pattern

"EXT" = external data input pattern

"P4" = 4 1's & 4 0's binary data string

"P8" = 8 1's & 8 0's binary data pattern

"P16" = 16 1's & 16 0's binary data pattern

"P32" = 32 1's & 32 0's binary data pattern

"P64" = 64 1's & 64 0's binary data pattern



$CustomPatternFIX4Data

String

Sets the 4-bit repeating data pattern if "FIX4" is selected for the pattern data source. Valid values are hexidecimal strings from '0' to 'F'.



$CustomPatternUserFile

String

Selects user file name to load from the instrument memory if "USERFILE" is selected for the pattern data source.



$CustomPatternTrigger

String

Selects the trigger source for triggering the modulated data pattern. Allowable values are:

"KEY" = Trigger an armed sweep when the user presses the Trigger hardkey.

"BUS" = Trigger an armed sweep via GPIB

"EXT" = Trigger an armed sweep on the positive or negative edge of a signal applied tot he TRIGGER IN connector.



$customPatternExtDelayOn

String

Sets the external trigger delay on or off. When external delay is turned on, the transmission of the triggered data will be delayed after the external trigger event by the number of specified by the customPatternExtDelayBits parameter in this function.



$customPatternExtDelayBits

Integer

Sets the number of bits for the external trigger delay, when the customPatternExtDelayOn parameter in this function is set to TRUE.





Return Parameters



Parameter

Variable Type

Description



None





HPESG_ConfigFrequency

Previous Top Next



* * *



HPESG.ConfigFrequency

Usage:

HPESG_ConfigFrequency($Handle,$FrequencyMultiplier,$FrequencyOffset,$PhaseAdjustment,$PhaseNoseMode)

Description:

This function controls the Agilent ESG Series of Signal Generators. In order to use these function the VXI pnp driver for the instrument must be installed on the system running Jabil Test. The latest version of this driver can be downloaded from Agilent. This function supports the following instruments: ESG-1000B, ESG-2000B, ESG-3000B, ESG-4000B, ESG-D1000B, ESG-D2000B, ESG-D3000B, ESG-D4000B, ESG-1000A, ESG-2000A, ESG-3000A, ESG-4000A, ESG-D1000A, ESG-D2000A, ESG-D3000A, ESG-D4000A, E4423B, E4424B, E4425B, E4426B, E4434B, E4435B, E4436B, and E4437B.

This function sets up some the instrument's frequency parameters.

Example:

HPESG_ConfigFrequency($Handle,1,0,0,"MODE1");



Function Arguments



Parameter

Variable Type

Description



$Handle

Object

The resource handle of the Spectrum Analyzer



$FrequencyMultiplier

Integer

Set the multiplier for the signal generator's carrier frequency. Multiplies the frequency shown on the display without changing the frequency output at the RF OUTPUT. The range is 1 to 50. Default is 1.



$FrequencyOffset

Float

Set the frequency offset. The offset changes the value shown in the in the frequency area of the display without changing the frequency output at the RF OUPUT. Default is 0 Hz.



$PhaseAdjustment

Float

Adjust the phase of the modulating signal in radians. The range for phase adjustments is plus or minus 3.141 radians. Default is 0.000.



$PhaseNoiseMode

String

Select the phase lock loop (PLL) bandwidth for optimizing phase Allowable values are:

"MODE1" = Optimize for < 10kHz offset

"MODE2" = Optimize for > 10kHz offset



Return Parameters



Parameter

Variable Type

Description



None





HPESG_ConfigGSMFrame

Previous Top Next



* * *



HPESG_ConfigGSMFrame

Usage:

HPESG.ConfigGSMFrame($Handle,$FrameRepeat,$FrameTrigger,$FrameExtDelayOn,$FrameExtDelayBits,$SecondaryFrameOn,$SecondaryFrameTrigger);

Description:

This function controls the Agilent ESG Series of Signal Generators. In order to use these function the VXI pnp driver for the instrument must be installed on the system running Jabil Test. The latest version of this driver can be downloaded from Agilent. This function supports the following instruments: ESG-1000B, ESG-2000B, ESG-3000B, ESG-4000B, ESG-D1000B, ESG-D2000B, ESG-D3000B, ESG-D4000B, ESG-1000A, ESG-2000A, ESG-3000A, ESG-4000A, ESG-D1000A, ESG-D2000A, ESG-D3000A, ESG-D4000A, E4423B, E4424B, E4425B, E4426B, E4434B, E4435B, E4436B, and E4437B.

This method is used to configure GSM Digital Modulation Format framed data format.

Function Arguments



Parameter

Variable Type

Description



$Handle

Object

The resource handle of the Spectrum Analyzer



$FrameRepeat

String

Set to "Single" to output on occurence of the modulated data pattern. Set to "CONT" to output a continuous stream of the modulation data pattern selected.



$FrameTrigger

String

Select the trigger source for triggering the primary frame data pattern. This instrument parameter is only set when the Frame Repeat mode is Single.

Valid Choices are:

"KEY"

"EXTERNAL"

"BUS"



$FrameExtDelayOn

String

Sets the external trigger delay on or off. When external delay is turned on, the transmission of the triggered data will be delayed after the external trigger event by the number of bits specified by the GSMFrameExtDelayBits parameter in this function. This instrument parameter is only set when the Frame Trigger mode is External. Valid Choices are:

"ON"

"OFF"



$FrameExtDelayBits

Integer

Sets the number of bits for the external trigger delay, when the $FrameExtDelayOn parameter in this function is set to "ON".



$SecondaryFrameOn

String

Sets the secondary frame operating state (On or Off). The secondary frame is a data pattern that coexists with the primary. The secondary frame is a copy of the selected primary pattern. It cannot be modified; it can only be turned on or off. This file is named using the format (GSM) as the prefix and SECONDARY_STATE as the suffix. When the secondary frame is activated, the secondary pattern is generated from the specification saved in the instrument state file and moved to the end of the data generator memory. For more information, refer to the instrument's user manual for this format (GSM).



$SecondaryFrameTrigger

String

Select the trigger source for triggering the secondary frame data pattern. This instrument parameter is only set when the Frame Repeat mode is Single.

Valid Choices are:

"KEY"

"EXTERNAL"

"BUS"

.





Return Parameters



Parameter

Variable Type

Description



None





HPESG_ConfigGSMFreqChannel

Previous Top Next



* * *



HPESG_ConfigGSMFreqChannel

Usage:

HPESG_ConfigGSMFreqChannel($Handle,$GSMChannelOn,$GSMChannel,$GSMChannelBand);

This function controls the Agilent ESG Series of Signal Generators. In order to use these function the VXI pnp driver for the instrument must be installed on the system running Jabil Test. The latest version of this driver can be downloaded from Agilent. This function supports the following instruments: ESG-1000B, ESG-2000B, ESG-3000B, ESG-4000B, ESG-D1000B, ESG-D2000B, ESG-D3000B, ESG-D4000B, ESG-1000A, ESG-2000A, ESG-3000A, ESG-4000A, ESG-D1000A, ESG-D2000A, ESG-D3000A, ESG-D4000A, E4423B, E4424B, E4425B, E4426B, E4434B, E4435B, E4436B, and E4437B.

This method is used to configure GSM Digital Modulation Format frequency channels parameters.

This function may cause the instrument to throw an error (--222,"Data out of range;value clipped to lower limit.") when changing bands due to a temporary state where the current channel is incompatible with the new band selected.

Function Arguments



Parameter

Variable Type

Description



$Handle

Object

The resource handle of the Spectrum Analyzer



$GSMChannelOn

String

Selects whether the instrument's RF output will be determined by the frequency channel and frequency band parameters selected by this function (GSMFreqChannelOn = TRUE) or by the instrument front panel Frequency hardkey (GSMFreqChannelOn = FALSE) and hpESG_SetFrequencyCW function. Allowed Values:

"ON"

"OFF"



$GSMChannel

Integer

Select the frequency channel based on the frequency channels defined in the GSM standard for the selected band. The instrument will throw an error if the channel number is incompatible with the selected band.



$GSMChannelBand

String

Select the frequency band based on the GSM standard, and whether the channel selected is the base station or mobile station channel. Selections are:

"BPGSM" = P--GSM 900 Base; channels 1 -- 124

"MPGSM" = P--GSM 900 Mobile; channels 1 -- 124

"BEGSM" = E--GSM 900 Base; channels 0 -- 124, 975 -- 1023

"MEGSM" = E--GSM 900 Mobile; channels 0 -- 124, 975 -- 1023

" BRGSM" = R--GSM 900 Base; channels 0 -- 124, 955 -- 1023

"MRGSM" = R--GSM 900 Mobile; channels 0 -- 124, 955 -- 1023

"BDCS" = DCS 1800 Base; channels 512 -- 885

"MDCS" = DCS 1800 Mobile; channels 512 -- 885

"BPCS" = PCS 1900 Base; channels 512 -- 810

"MPCS" = PCS 1900 Mobile; channels 512 -- 810





Return Parameters



Parameter

Variable Type

Description



None





HPESG_ConfigGSMModulation

Previous Top Next



* * *



HPESG_ConfigGSMModulation

Usage:

HPESG_ConfigGSMModulation($Handle,$GSMModulationType,$GSMPhaseMSK,$GSMFreqDevFSK,$GSMUserFile)

Description:

This function controls the Agilent ESG Series of Signal Generators. In order to use these function the VXI pnp driver for the instrument must be installed on the system running Jabil Test. The latest version of this driver can be downloaded from Agilent. This function supports the following instruments: ESG-1000B, ESG-2000B, ESG-3000B, ESG-4000B, ESG-D1000B, ESG-D2000B, ESG-D3000B, ESG-D4000B, ESG-1000A, ESG-2000A, ESG-3000A, ESG-4000A, ESG-D1000A, ESG-D2000A, ESG-D3000A, ESG-D4000A, E4423B, E4424B, E4425B, E4426B, E4434B, E4435B, E4436B, and E4437B.

This function customizes the GSM Digital Modulation Formation current modulation type. See the HP-ESG programming manual for full details of each parameter, and it's function.

Function Arguments



Parameter

Variable Type

Description



$Handle

Object

The resource handle of the Spectrum Analyzer



$GSMModulationType

String

Sets the modulation Type, allowable values are:

"QPSK"

"IS95QPSK"

"GRAYQPSK"

"QPSK"

"IS95OQPSK"

"BPSK"

"P4DQPSK"

"PSK8"

"D8PSK"

"MSK"

"FSK2"

"FSK4"

"FSK8"

"FSK16"

"C4FM"

"QAM4"

"QAM16"

"QAM32"

"QAM64"

"QAM256"

"UIQ"

"UFSK"



$GSMPhaseMSK

Float

Sets the MSK phase deviation. The instrument preset is 90 degrees. The range of values is 0.0 to 100.0 degrees. This instrument parameter is only set when a MSK modulation type is selected.



$GSMFreqDevFSK

Float

Sets the FSK phase deviation. The instrument preset is 400.0 Hz. The range of values is 0.0 to a maximum that is dependent on the symbol rate. This instrument paraeter is only set when a FSK modulation type is selected.



$GSMUserFile

String

Selects the name of the user I/Q or FSK pre-stored configuration file for the modulation type selected.





Return Parameters



Parameter

Variable Type

Description



None





HPESG_ConfigGSMNormalTimeslot

Previous Top Next



* * *



HPESG_ConfigGSMNormalTimeslot

Usage:

HPESG_ConfigGSMNormalTimeslot($Handle,$TimeslotNormalNumber,$GSMTimeslotNormalOn,$GSMTimeslotNormalType,$GSMTimeslotNormalData,$GSMTSNormalFIX4Data,$GSMTimeslotNormalUserFile,$GSMTimeslotNormalS,$GSMTimeslotNormalTS);

Description:

This function controls the Agilent ESG Series of Signal Generators. In order to use these function the VXI pnp driver for the instrument must be installed on the system running Jabil Test. The latest version of this driver can be downloaded from Agilent. This function supports the following instruments: ESG-1000B, ESG-2000B, ESG-3000B, ESG-4000B, ESG-D1000B, ESG-D2000B, ESG-D3000B, ESG-D4000B, ESG-1000A, ESG-2000A, ESG-3000A, ESG-4000A, ESG-D1000A, ESG-D2000A, ESG-D3000A, ESG-D4000A, E4423B, E4424B, E4425B, E4426B, E4434B, E4435B, E4436B, and E4437B.

This method configures a normal timeslot type for the specified timeslot when the GSM Digital Modulation Format is set to Framed.

Function Arguments



Parameter

Variable Type

Description



$Handle

Object

The resource handle of the Spectrum Analyzer



$GSMTimeslotNormalNumber

Integer

Selects the timeslot to configure (0-7)



$GSMTimeslotNormalOn

String

Sets the operating state of the specified timeslot. Valid choices are:

"ON"

"OFF"



$GSMTimeslotNormalType

String

Sets the timeslot type for the specified timeslot. Valid choices are:

"NORMAL"

"NORMAL_ALL"



$GSMTimeslotNormalData

String

Selects the data pattern for the specified timeslot for ramed data transmissions. Choices are:

"PN9"

"PN15"

"FIX4"

"USERFILE"

"EXT"

"P4"

"P8"

"P16"

"P32"

"P64"



$GSMTSNormalFIX4Data

String

Sets the 4-bit repeating data pattern if FIX4 is slected for the pattern data source. Valid choices are '0'-'F'.



$GSMTimeslotNormalUserFile

String

Selects the user file name to load from the instrument memory if User File is selected for the pattern data source.



$GSMTimeslotNormalS

Integer

Sets the 1-bit binary stealing (S) flag for both the stealing flag fields in the normal burst timeslot. The instrument preset value is "0" for normal timeslot types.



$GSMTimeslotNormalTS

String

Sets the 26-bit training sequence. The instrument preset value represents the GSM standard and is "0970897" for normal timeslot types. The parameter has to be a string type, therefore care must be given to make sure that the ASCII characters used are valid hexadecimal alphanumerics. A "#H" must precede the alphanumeric number.





Return Parameters



Parameter

Variable Type

Description



None





HPESG_ConfigGSMPattern

Previous Top Next



* * *



HPESG_ConfigGSMPattern

Usage:

HPESG_ConfigGSMPattern($Handle,$GSMPatternRepeat,$GSMPatternData,$GSMFIX4Data,$GSMPatternUserFile,$GSMPatternTrigger,$GSMPatternExtDelayOn,$GSMPatternExtDelayBits);

Description:

This function controls the Agilent ESG Series of Signal Generators. In order to use these function the VXI pnp driver for the instrument must be installed on the system running Jabil Test. The latest version of this driver can be downloaded from Agilent. This function supports the following instruments: ESG-1000B, ESG-2000B, ESG-3000B, ESG-4000B, ESG-D1000B, ESG-D2000B, ESG-D3000B, ESG-D4000B, ESG-1000A, ESG-2000A, ESG-3000A, ESG-4000A, ESG-D1000A, ESG-D2000A, ESG-D3000A, ESG-D4000A, E4423B, E4424B, E4425B, E4426B, E4434B, E4435B, E4436B, and E4437B.

This function is used to configure the GSM digital modulation format pattern data settings. See the HP-ESG programming manual for full details about each function setting.

Function Arguments



Parameter

Variable Type

Description



$Handle

Object

The resource handle of the Spectrum Analyzer



$GSMPatternRepeat

String

Set to "Single" to output on occurence of the modulated data pattern. Set to "CONT" to output a continuous stream of the modulation data pattern selected.



$GSMPatternData

String

Select the modulation data source, either internal data generation, GSM data, or external data input (I/Q data inputs). Settings are:

"PN9" = PN9 pseudo-random bit pattern

"PN11" = PN11 pseudo-random bit pattern

"PN15" = PN15 pseudo-random bit pattern

"PN20" = PN20 pseudo-random bit pattern

"PN23" = PN23 pseudo-random bit pattern

"FIX4" = 4-bit repeating sequence data pattern

"USERFILE" = external data input data pattern

"EXT" = external data input pattern

"P4" = 4 1's & 4 0's binary data string

"P8" = 8 1's & 8 0's binary data pattern

"P16" = 16 1's & 16 0's binary data pattern

"P32" = 32 1's & 32 0's binary data pattern

"P64" = 64 1's & 64 0's binary data pattern



$GSMPatternFIX4Data

String

Sets the 4-bit repeating data pattern if "FIX4" is selected for the pattern data source. Valid values are hexidecimal strings from '0' to 'F'.



$GSMPatternUserFile

String

Selects user file name to load from the instrument memory if "USERFILE" is selected for the pattern data source.



$GSMPatternTrigger

String

Selects the trigger source for triggering the modulated data pattern. Allowable values are:

"KEY" = Trigger an armed sweep when the user presses the Trigger hardkey.

"BUS" = Trigger an armed sweep via GPIB

"EXT" = Trigger an armed sweep on the positive or negative edge of a signal applied tot he TRIGGER IN connector.



$GSMPatternExtDelayOn

String

Sets the external trigger delay on or off. When external delay is turned on, the transmission of the triggered data will be delayed after the external trigger event by the number of specified by the GSMPatternExtDelayBits parameter in this function.



$GSMPatternExtDelayBits

Integer

Sets the number of bits for the external trigger delay, when the GSMPatternExtDelayOn parameter in this function is set to TRUE.





Return Parameters



Parameter

Variable Type

Description



None





HPESG_ConfigModulationIQ

Previous Top Next



* * *



HPESG_ConfigModulationIQ

Usage:

HPESG_ConfigModulationIQ($Handle,$IQModeOn,$IQSource,$BurstEnvelopeModeOn,$BurstEnvelopeSource,$IQHighCrestModeOn,$IQAdjustrmentsOn,$IQPhasePolarity);



This function controls the Agilent ESG Series of Signal Generators. In order to use these function the VXI pnp driver for the instrument must be installed on the system running Jabil Test. The latest version of this driver can be downloaded from Agilent. This function supports the following instruments: ESG-1000B, ESG-2000B, ESG-3000B, ESG-4000B, ESG-D1000B, ESG-D2000B, ESG-D3000B, ESG-D4000B, ESG-1000A, ESG-2000A, ESG-3000A, ESG-4000A, ESG-D1000A, ESG-D2000A, ESG-D3000A, ESG-D4000A, E4423B, E4424B, E4425B, E4426B, E4434B, E4435B, E4436B, and E4437B.

This function sets up the I/Q (digital) modulation parameters.

Function Arguments



Parameter

Variable Type

Description



$Handle

Object

The resource handle of the Spectrum Analyzer



$IQModeOn

String

Sets the I/Q Modulation Mode to "ON" or "OFF"



$IQSource

String

Select the I/Q Source to:

"INTERNAL" = Internal Modulation Source. Requires Option UN3 or UN4

"EXTERNAL" = External I/Q modulation Source



$BurstEnvelopeModeOn

String

Sets the Burst Envelope Mode to "ON" or "OFF"



$BurstEnvelopeSource

String

Sets the Burst Envelope Source to:

"INTERNAL" = internally-generated burst source

"EXTERNAL" = externally-generated burst source



$IQHighCrestModeOn

String

Select for operating conditions to accomodate I/Q inputs with high crest factor. When selected the maximum output level is reduced and the power level accuracy is degraded. I/Q drive levels should be reduced, dB per dB, for crest factors created than 4 dB. "ON" enables I/Q high crest factor operation, and"OFF" disables I/Q high crest factor operation.

Allowable values are:

"ON"

"OFF"



$IQAdjustmentsOn

String

Enables I/Q adjustments (I/Q gain, I offset, Q offset, I/Q skey). Allowable values are:

"ON"

"OFF"



$IQPhasePolarity

String

Sets the polarity of the I/Q modulation signal. The choices are normal or inverted. In the inverted mode the input applied to the I input connecot ris physically routed to the Q input port of the I/Q modulator. In addition, the input applied to the Q INPUT connector is physically routed to the I input port of the I/Q modulator. If the user has enabled a digital modulation mode (instrument option UN3 or UN4 only), I/Q phase polarity will be automatically set to normal. It is over-written with this function.

Allowable values:

"NORMAL"

"INVERTED"





Return Parameters



Parameter

Variable Type

Description



None





HPESG_CustomModifyStandard

Previous Top Next



* * *



HPESG_CustomModifyStandard

Usage:

HPESG_CustomModifyStandard($Handle,$CustomPhasePolarity,$CustomDiffDataEncodeOn,$customSymbolRate,$customBurstRiseTime,$customBurstFallTime,$customBurstFallDelay);

This function controls the Agilent ESG Series of Signal Generators. In order to use these function the VXI pnp driver for the instrument must be installed on the system running Jabil Test. The latest version of this driver can be downloaded from Agilent. This function supports the following instruments: ESG-1000B, ESG-2000B, ESG-3000B, ESG-4000B, ESG-D1000B, ESG-D2000B, ESG-D3000B, ESG-D4000B, ESG-1000A, ESG-2000A, ESG-3000A, ESG-4000A, ESG-D1000A, ESG-D2000A, ESG-D3000A, ESG-D4000A, E4423B, E4424B, E4425B, E4426B, E4434B, E4435B, E4436B, and E4437B.

This method is used to configure Custom Digital Modulation Format standard parameters, modifying the following aspects of the standard transmission: phase polarity, user--defined Differential Encoder state, symbol rate, and bursted RF signal shape.

Function Arguments



Parameter

Variable Type

Description



$Handle

Object

The resource handle of the Spectrum Analyzer



$CustomPhasePolarity

String

Set the direction of rotation of the phase modulation vector. Select Normal and the in--phase component will lead the quadrature--phase component by 90 degrees in the resulting modulation. Select Invert and the in--phase component will lag the quadrature--phase component by 90 degrees in the resulting modulation. The selection also applies to the I OUT and Q OUT signals.

Allowed Values:

"NORMAL"

"INVERTED"



$CustomDiffDataEncodeOn

String

Sets the operating state of the user-defined Differential Encoding. Allowed Values are:

"ON"

"OFF"



$CustomSymbolRate

Float

Set the transmission symbol rate. The instrument preset value is 24.300 ksps. The values range from 47.684 sps through 12.500000000 Msps but will vary depending on the modulation type.



$CustomBurstRiseTime

Float

Set the bursted RF signal rising edge time. The instrument preset value is 5.860 bits. The minimum and maximum range of values allowed depends upon the modulation type and the symbol rate.



$CustomBurstRiseDelay

Float

Set the bursted RF signal rising edge delay. The instrument preset value is 0.000 bits. The minimum and maximum range of values allowed depends upon the modulation type and the symbol rate.



$CustomBurstFallTime

Float

Set the bursted RF signal falling edge time. The instrument preset value is 5.470 bits. The minimum and maximum range of values allowed depends upon the modulation type and the symbol rate.



$CustomBurstFallDelay

Float

Set the bursted RF signal falling edge delay. The instrument preset value is 0.000 bits. The minimum and maximum range of values allowed depends upon the modulation type and the symbol rate.





Return Parameters



Parameter

Variable Type

Description



None





HPESG_GSMModifyStandard

Previous Top Next



* * *



HPESG_GSMModifyStandard

Usage:

HPESG_GSMModifyStandard($Handle,$GSMPhasePolarity,$GSMDiffDataEncodeOn,$GSMSymbolRate,$GSMBurstRiseTime,$GSMBurstFallTime,$GSMBurstFallDelay);



This function controls the Agilent ESG Series of Signal Generators. In order to use these function the VXI pnp driver for the instrument must be installed on the system running Jabil Test. The latest version of this driver can be downloaded from Agilent. This function supports the following instruments: ESG-1000B, ESG-2000B, ESG-3000B, ESG-4000B, ESG-D1000B, ESG-D2000B, ESG-D3000B, ESG-D4000B, ESG-1000A, ESG-2000A, ESG-3000A, ESG-4000A, ESG-D1000A, ESG-D2000A, ESG-D3000A, ESG-D4000A, E4423B, E4424B, E4425B, E4426B, E4434B, E4435B, E4436B, and E4437B.

This method is used to configure GSM Digital Modulation Format standard parameters, modifying the following aspects of the standard transmission: phase polarity, user--defined Differential Encoder state, symbol rate, and bursted RF signal shape.

Function Arguments



Parameter

Variable Type

Description



$Handle

Object

The resource handle of the Spectrum Analyzer



$GSMPhasePolarity

String

Set the direction of rotation of the phase modulation vector. Select Normal and the in--phase component will lead the quadrature--phase component by 90 degrees in the resulting modulation. Select Invert and the in--phase component will lag the quadrature--phase component by 90 degrees in the resulting modulation. The selection also applies to the I OUT and Q OUT signals.

Allowed Values:

"NORMAL"

"INVERTED"



$GSMDiffDataEncodeOn

String

Sets the operating state of the user-defined Differential Encoding. Allowed Values are:

"ON"

"OFF"



$GSMSymbolRate

Float

Set the transmission symbol rate. The instrument preset value is 270.833333 ksps. The values range from 47.684 sps through 12.500000000 Msps but will vary depending on the modulation type.



$GSMBurstRiseTime

Float

Set the bursted RF signal rising edge time. The instrument preset value is 4.224 bits. The minimum and maximum range of values allowed depends upon the modulation type and the symbol rate.



$GSMBurstRiseDelay

Float

Set the bursted RF signal rising edge delay. The instrument preset value is 0.000 bits. The minimum and maximum range of values allowed depends upon the modulation type and the symbol rate.



$GSMBurstFallTime

Float

Set the bursted RF signal falling edge time. The instrument preset value is 3.440 bits. The minimum and maximum range of values allowed depends upon the modulation type and the symbol rate.



$GSMBurstFallDelay

Float

Set the bursted RF signal falling edge delay. The instrument preset value is 0.125 bits. The minimum and maximum range of values allowed depends upon the modulation type and the symbol rate.





Return Parameters



Parameter

Variable Type

Description



None





HPESA_GetBERTMeasurements

Previous Top Next



* * *



HPESG_GetBERTMeasurements

Usage:

($ErrorCount,$BitCount,$BitErrorRate,$PassFail) = HPESG_GetBERTMeasurements($Handle,$MeasureMode);

Description:

This function controls the Agilent ESG Series of Signal Generators. In order to use these function the VXI pnp driver for the instrument must be installed on the system running Jabil Test. The latest version of this driver can be downloaded from Agilent. This function supports the following instruments: ESG-1000B, ESG-2000B, ESG-3000B, ESG-4000B, ESG-D1000B, ESG-D2000B, ESG-D3000B, ESG-D4000B, ESG-1000A, ESG-2000A, ESG-3000A, ESG-4000A, ESG-D1000A, ESG-D2000A, ESG-D3000A, ESG-D4000A, E4423B, E4424B, E4425B, E4426B, E4434B, E4435B, E4436B, and E4437B.

This method returns the BERT measurement results. The user can select whether to return the intermediate values for the measurements or the total values from one measurement cycle.

Function Arguments



Parameter

Variable Type

Description



$Handle

Object

A reference handle to the HPESG



$MeasureMode

String

Select the measurement results type to return. Valid Choices are:

"INTERMEDIATE" = return immediate values of Bit Error Rate Test

"TOTAL" = return total values of Bit Error Rate Test





Return Parameters



Parameter

Variable Type

Description



$ErrorCount

Integer

The Error Count



$BitCount

Integer

The Bit Count



$BitErrorRate

Double

The Bit Error Rate



$PassFail

Integer

Returns Pass/Fail Status

0 = FAIL

1 = PASS





HPESG_Init

Previous Top Next



* * *



HPESG_Init

Usage:

$Handle = HPESG.Init($ResourceString,$Reset);

Description:

This function controls the Agilent ESG Series of Signal Generators. In order to use these function the VXI pnp driver for the instrument must be installed on the system running Jabil Test. The latest version of this driver can be downloaded from Agilent. This function supports the following instruments: ESG-1000B, ESG-2000B, ESG-3000B, ESG-4000B, ESG-D1000B, ESG-D2000B, ESG-D3000B, ESG-D4000B, ESG-1000A, ESG-2000A, ESG-3000A, ESG-4000A, ESG-D1000A, ESG-D2000A, ESG-D3000A, ESG-D4000A, E4423B, E4424B, E4425B, E4426B, E4434B, E4435B, E4436B, and E4437B.

This function initializes the ESG Signal Generator, and returns a handle to the instrument. If the $Reset argument is set to TRUE, the instrument is reset to it's default configuration.

Example:

$Handle = HPESG_Init("GPIB0::5::INSTR","TRUE");



Function Arguments



Parameter

Variable Type

Description



$ResourceString

String

The Resource string of the instrument, for instance "GPIB0::18::INSTR"



$Reset

Boolean

Specifies whether or not to reset the instrument upon initialization.



Return Parameters



Parameter

Variable Type

Description



$Handle

Object

A reference handle to the HP-ESG Signal Generator





HPESG_ModeSetIQBaseband

Previous Top Next



* * *



HPESG_ModeSetIQBaseband

Usage:

HPESG_ModeSetIQBaseband($Handle,$IQBaseBandType,IQBaseBandTypeOn);

This function controls the Agilent ESG Series of Signal Generators. In order to use these function the VXI pnp driver for the instrument must be installed on the system running Jabil Test. The latest version of this driver can be downloaded from Agilent. This function supports the following instruments: ESG-1000B, ESG-2000B, ESG-3000B, ESG-4000B, ESG-D1000B, ESG-D2000B, ESG-D3000B, ESG-D4000B, ESG-1000A, ESG-2000A, ESG-3000A, ESG-4000A, ESG-D1000A, ESG-D2000A, ESG-D3000A, ESG-D4000A, E4423B, E4424B, E4425B, E4426B, E4434B, E4435B, E4436B, and E4437B.

This function turns the selected digital modulation format on and off (NADC, GSM, PDC, PHS, DECT, TETRA, Custom, or EDGE)

Function Arguments



Parameter

Variable Type

Description



$Handle

Object

The resource handle of the Spectrum Analyzer



$IQBaseBandType

String

Sets the I/Q Baseband Modulation Type. Allowable values are:

"NADC"

"GSM"

"PDC"

"PHS"

"DECT"

"TETRA"

"Custom"

"EDGE"



$IQBaseBandOn

String

Turns the baseband Mode "ON" or "OFF".





Return Parameters



Parameter

Variable Type

Description



None





HPESG_QueryBERTMeasurementDone

Previous Top Next



* * *



HPESG_QueryBERTMeasurementDone

Usage:

$Done = HPESG_QueryBERTMeasurementDone($Handle);

Description:

This function controls the Agilent ESG Series of Signal Generators. In order to use these function the VXI pnp driver for the instrument must be installed on the system running Jabil Test. The latest version of this driver can be downloaded from Agilent. This function supports the following instruments: ESG-1000B, ESG-2000B, ESG-3000B, ESG-4000B, ESG-D1000B, ESG-D2000B, ESG-D3000B, ESG-D4000B, ESG-1000A, ESG-2000A, ESG-3000A, ESG-4000A, ESG-D1000A, ESG-D2000A, ESG-D3000A, ESG-D4000A, E4423B, E4424B, E4425B, E4426B, E4434B, E4435B, E4436B, and E4437B.

This function returns the BERT measurement completion status. It queries the instrument Standard Operation Condition Register and tests the status of bit 4. When bit 4 equals 1, then a BERT measurement is in progress, and the BERTMeasurementDone_Q parameter will return VI_FALSE. If bit 4 equals 0, then the measurement has completed, and the BERTMeasurementDone_Q will return VI_TRUE.

This function will wait 1 millisecond before checking the instrument status to allow for the BERT measurement status to change to a 1 after the instrument may have received a bus trigger command. This is to insure the BERTMeasurementDone_Q parameter doesn't return VI_TRUE before the status register has a chance to change.

Function Arguments



Parameter

Variable Type

Description



$Handle

Object

A reference to the HP-ESA handle





Return Parameters



Parameter

Variable Type

Description



$Done

Boolean

Returns 'TRUE' if the test is complete, otherwise returns 'FALSE'





HPESG_SendCommand

Previous Top Next



* * *



HPESG_SendCommand

Usage:

HPESG_SendCommand($HPESG,$Command)

Description:

This function controls the Agilent ESG Series of Signal Generators. In order to use these function the VXI pnp driver for the instrument must be installed on the system running Jabil Test. The latest version of this driver can be downloaded from Agilent. This function supports the following instruments: ESG-1000B, ESG-2000B, ESG-3000B, ESG-4000B, ESG-D1000B, ESG-D2000B, ESG-D3000B, ESG-D4000B, ESG-1000A, ESG-2000A, ESG-3000A, ESG-4000A, ESG-D1000A, ESG-D2000A, ESG-D3000A, ESG-D4000A, E4423B, E4424B, E4425B, E4426B, E4434B, E4435B, E4436B, and E4437B.

This function passes the supplied SCPI GPIB command to the instrument. This is useful for passing commands to the instrument that aren't supported by the driver.

Example

HPESG_SendCommand($HPESG,"SENSE:MODE:BERT ON");

Function Arguments



Parameter

Variable Type

Description



$Handle

Object

The resource handle of the Spectrum Analyzer



$Command

String

The SCPI command to send to the instrument.





Return Parameters



Parameter

Variable Type

Description



None





HPESG_SetFrequencyCW

Previous Top Next



* * *



HPESG_SetFrequencyCW

Usage:

HPESG_SetFrequencyCW($Handle,$Frequency)

Description:

This function controls the Agilent ESG Series of Signal Generators. In order to use these function the VXI pnp driver for the instrument must be installed on the system running Jabil Test. The latest version of this driver can be downloaded from Agilent. This function supports the following instruments: ESG-1000B, ESG-2000B, ESG-3000B, ESG-4000B, ESG-D1000B, ESG-D2000B, ESG-D3000B, ESG-D4000B, ESG-1000A, ESG-2000A, ESG-3000A, ESG-4000A, ESG-D1000A, ESG-D2000A, ESG-D3000A, ESG-D4000A, E4423B, E4424B, E4425B, E4426B, E4434B, E4435B, E4436B, and E4437B.

This function sets the signal generator's CW (Continuous Wave) output frequency. By executing this function the frequency becomes the active function and the current value is also shown in the active entry area of the display.

Example:

HPESG_SetFrequencyCW($Handle,10000000);



Function Arguments



Parameter

Variable Type

Description



$Handle

Object

The resource handle of the Spectrum Analyzer



$Frequency

Float

This is the value of the frequency to be set in Hz.



Return Parameters



Parameter

Variable Type

Description



None





HPESG.SetModulationOn

Previous Top Next



* * *



HPESG_SetModulationOn

Usage:

HPESG_SetModulationOn($Handle,$OutputState)

Description:

This function controls the Agilent ESG Series of Signal Generators. In order to use these function the VXI pnp driver for the instrument must be installed on the system running Jabil Test. The latest version of this driver can be downloaded from Agilent. This function supports the following instruments: ESG-1000B, ESG-2000B, ESG-3000B, ESG-4000B, ESG-D1000B, ESG-D2000B, ESG-D3000B, ESG-D4000B, ESG-1000A, ESG-2000A, ESG-3000A, ESG-4000A, ESG-D1000A, ESG-D2000A, ESG-D3000A, ESG-D4000A, E4423B, E4424B, E4425B, E4426B, E4434B, E4435B, E4436B, and E4437B.

This function sets the signal generator modulation output state to either "ON" or "OFF".

Example:

HPESG_SetModulationOn($Handle,-72);



Function Arguments



Parameter

Variable Type

Description



$Handle

Object

The resource handle of the Spectrum Analyzer



$OutputState

String

Sets the Modulation Output state. Allowable values are:

"ON"

"OFF"



Return Parameters



Parameter

Variable Type

Description



None





HPESG_SetPower

Previous Top Next



* * *



HPESG_SetPower

Usage:

HPESG_SetPower($Handle,$OutputPower)

Description:

This function controls the Agilent ESG Series of Signal Generators. In order to use these function the VXI pnp driver for the instrument must be installed on the system running Jabil Test. The latest version of this driver can be downloaded from Agilent. This function supports the following instruments: ESG-1000B, ESG-2000B, ESG-3000B, ESG-4000B, ESG-D1000B, ESG-D2000B, ESG-D3000B, ESG-D4000B, ESG-1000A, ESG-2000A, ESG-3000A, ESG-4000A, ESG-D1000A, ESG-D2000A, ESG-D3000A, ESG-D4000A, E4423B, E4424B, E4425B, E4426B, E4434B, E4435B, E4436B, and E4437B.

This function sets the signal generator output power in dBm. This function does not automatically turn on the RF output.

Example:

HPESG_SetPower($Handle,-72);



Function Arguments



Parameter

Variable Type

Description



$Handle

Object

The resource handle of the Spectrum Analyzer



$OutputPower

Float

Specifies the output power in dBm.



Return Parameters



Parameter

Variable Type

Description



None





HPESG.SetPowerOn

Previous Top Next



* * *



HPESG_SetPowerOn

Usage:

HPESG_SetPowerOn($Handle,$OutputState)

Description:

This function controls the Agilent ESG Series of Signal Generators. In order to use these function the VXI pnp driver for the instrument must be installed on the system running Jabil Test. The latest version of this driver can be downloaded from Agilent. This function supports the following instruments: ESG-1000B, ESG-2000B, ESG-3000B, ESG-4000B, ESG-D1000B, ESG-D2000B, ESG-D3000B, ESG-D4000B, ESG-1000A, ESG-2000A, ESG-3000A, ESG-4000A, ESG-D1000A, ESG-D2000A, ESG-D3000A, ESG-D4000A, E4423B, E4424B, E4425B, E4426B, E4434B, E4435B, E4436B, and E4437B.

This function sets the signal generator output state to either "ON" or "OFF".

Function Arguments



Parameter

Variable Type

Description



$Handle

Object

The resource handle of the Spectrum Analyzer



$OutputState

String

Sets the RF Output state. Allowable values are:

"ON"

"OFF"





Return Parameters



Parameter

Variable Type

Description



None





ARFSG_Amod_AM_Config

Previous Top Next



* * *



ARFSG_AMod_AM_Config



Usage:

ARFSG_AMod_AM_Config($ARFSG_handle, $path, $source, $depth)





Description:

This function configures the attributes that control the signal generator's amplitude modulation.

Equivalent instrument command: [:SOURce]:AM[1]|2:SOURce INT|EXT1|EXT2;

[:SOURce]:AM[1]|2[:DEPTh][:LINear] <val><unit>|UP|DOWN

Function arguments



Parameter

Variable Type

Description



$ARFSG_handle

Object

Handle created by the ARFSG_Init() function.



$path

Integer

The AM path to configure (1 or 2).



$source

String

Specifies the source of the signal that is used as the modulating signal:

· “INT1”

· “EXT1”

· “EXT2”



$depth

Float

Specifies the extent of modulation the signal generator applies to the RF-signal (in percent).





Return parameters



Parameter

Variable Type

Description



None

-

-





ARFSG_Amod_AM_Enable

Previous Top Next



* * *



ARFSG_AMod_AM_Enable



Usage:

ARFSG_AMod_AM_Enable($ARFSG_handle, $path, $enableAM)





Description:

Specifies whether the signal generator applies amplitude modulation to the RF output signal.

Equivalent instrument command: [:SOURce]:AM[1]|2:STATe ON|OFF|1|0

Function arguments



Parameter

Variable Type

Description



$ARFSG_handle

Object

Handle created by the ARFSG_Init() function.



$path

Integer

The AM path to configure (1 or 2).



$enableAM

Boolean

AM enable state.





Return parameters



Parameter

Variable Type

Description



None

-

-





ARFSG_Amod_AM_ExtCoupling

Previous Top Next



* * *



ARFSG_AMod_AM_ExtCoupling



Usage:

ARFSG_AMod_AM_ExtCoupling($ARFSG_handle, $path, $extCoupling)





Description:

Specifies the coupling of the external source of the modulating signal. The command does not change the currently active source or switch the current modulation on or off.

Equivalent instrument command: [:SOURce]:AM[1]|2:EXTernal[1]|2:COUPling AC|DC

Function arguments



Parameter

Variable Type

Description



$ARFSG_handle

Object

Handle created by the ARFSG_Init() function.



$path

Integer

The AM path to configure (1 or 2).



$extCoupling

String

Selects coupling type. Valid values:

· "AC"

· "DC"





Return parameters



Parameter

Variable Type

Description



None

-

-





ARFSG_Amod_Enable

Previous Top Next



* * *



ARFSG_AMod_Enable



Usage:

ARFSG_AMod_Enable($ARFSG_handle, $enablePULM)





Description:

Turns modulation to the RF output (AM, FM, PM, Pulse) signal on and off.

Equivalent instrument command: :OUTPut:MODulation[:STATe] ON|OFF|1|0

Function arguments



Parameter

Variable Type

Description



$ARFSG_handle

Object

Handle created by the ARFSG_Init() function.



$enableMod

Boolean

Modulation enable state.





Return parameters



Parameter

Variable Type

Description



None

-

-





ARFSG_Amod_FM_Config

Previous Top Next



* * *



ARFSG_AMod_FM_Config



Usage:

ARFSG_AMod_FM_Config($ARFSG_handle, $path, $source, $deviation)





Description:

This function configures the attributes that control the signal generator's frequency modulation.

Equivalent instrument command: [:SOURce]:FM[1]|2:SOURce INT|EXT1|EXT2;

[:SOURce]:FM[1]|2:DEV:TRACK ON;

[:SOURce]:FM[1]|2[:DEViation] <val><unit>

Function arguments



Parameter

Variable Type

Description



$ARFSG_handle

Object

Handle created by the ARFSG_Init() function.



$path

Integer

The FM path to configure (1 or 2).



$source

String

Specifies the source of the signal that is used as the modulating signal:

· “INT1”

· “EXT1”

· “EXT2”



$deviation

Float

Specifies the extent of modulation (peak frequency deviation) the signal generator applies to the RF-signal in HZ.





Return parameters



Parameter

Variable Type

Description



None

-

-





ARFSG_Amod_FM_Enable

Previous Top Next



* * *



ARFSG_AMod_FM_Enable



Usage:

ARFSG_AMod_FM_Enable($ARFSG_handle, $path, $enableFM)





Description:

Specifies whether the signal generator applies frequency modulation to the RF output signal.

Equivalent instrument command: [:SOURce]:FM[1]|2:STATe ON|OFF|1|0

Function arguments



Parameter

Variable Type

Description



$ARFSG_handle

Object

Handle created by the ARFSG_Init() function.



$path

Integer

The FM path to configure (1 or 2).



$enableFM

Boolean

FM enable state.





Return parameters



Parameter

Variable Type

Description



None

-

-





ARFSG_Amod_FM_ExtCoupling

Previous Top Next



* * *



ARFSG_AMod_FM_ExtCoupling



Usage:

ARFSG_AMod_FM_ExtCoupling($ARFSG_handle, $path, $extCoupling)





Description:

Specifies the coupling of the external source of the modulating signal. The command does not change the currently active source or switch the current modulation on or off.

Equivalent instrument command: [:SOURce]:FM[1]|2:EXTernal[1]|2:COUPling AC|DC

Function arguments



Parameter

Variable Type

Description



$ARFSG_handle

Object

Handle created by the ARFSG_Init() function.



$path

Integer

The FM path to configure (1 or 2).



$extCoupling

String

Selects coupling type. Valid values:

· "AC"

· "DC"





Return parameters



Parameter

Variable Type

Description



None

-

-





ARFSG_Amod_PM_Config

Previous Top Next



* * *



ARFSG_AMod_PM_Config



Usage:

ARFSG_AMod_PM_Config($ARFSG_handle, $path, $source, $deviation)





Description:

This function configures the attributes that control the signal generator's phase modulation.

Equivalent instrument command: [:SOURce]:PM[1]|2:SOURce INT|EXT1|EXT2;

[:SOURce]:PM[1]|2:DEV:TRACK ON;

[:SOURce]:PM[1]|2[:DEViation] <val><unit>

Function arguments



Parameter

Variable Type

Description



$ARFSG_handle

Object

Handle created by the ARFSG_Init() function.



$path

Integer

The PM path to configure (1 or 2).



$source

String

Specifies the source of the signal that is used as the modulating signal:

· “INT1”

· “EXT1”

· “EXT2”



$deviation

Float

Specifies the extent of modulation (peak frequency deviation) the signal generator applies to the RF-signal in rads.





Return parameters



Parameter

Variable Type

Description



None

-

-





ARFSG_Amod_PM_Enable

Previous Top Next



* * *



ARFSG_AMod_PM_Enable



Usage:

ARFSG_AMod_PM_Enable($ARFSG_handle, $path, $enablePM)





Description:

Specifies whether the signal generator applies phase modulation to the RF output signal.

Equivalent instrument command: [:SOURce]:PM[1]|2:STATe ON|OFF|1|0

Function arguments



Parameter

Variable Type

Description



$ARFSG_handle

Object

Handle created by the ARFSG_Init() function.



$path

Integer

The PM path to configure (1 or 2).



$enablePM

Boolean

PM enable state.





Return parameters



Parameter

Variable Type

Description



None

-

-





ARFSG_Amod_PM_ExtCoupling

Previous Top Next



* * *



ARFSG_AMod_PM_ExtCoupling



Usage:

ARFSG_AMod_PM_ExtCoupling($ARFSG_handle, $path, $extCoupling)





Description:

Specifies the coupling of the external source of the modulating signal. The command does not change the currently active source or switch the current modulation on or off.

Equivalent instrument command: [:SOURce]:PM[1]|2:EXTernal[1]|2:COUPling AC|DC

Function arguments



Parameter

Variable Type

Description



$ARFSG_handle

Object

Handle created by the ARFSG_Init() function.



$path

Integer

The PM path to configure (1 or 2).



$extCoupling

String

Selects coupling type. Valid values:

· "AC"

· "DC"





Return parameters



Parameter

Variable Type

Description



None

-

-





ARFSG_Amod_PULM_Config

Previous Top Next



* * *



ARFSG_AMod_PULM_Config



Usage:

ARFSG_AMod_PULM_Config($ARFSG_handle, $source, $shape, $freq, $period, $width)





Description:

This function configures the attributes that control the signal generator's pulse modulation.

Equivalent instrument command: [:SOURce]:PULM:SOURce INT|EXT[1]|EXT2;

[:SOURce]:PULM:INTernal[1]:FUNCtion:SHAPe PULSe|SQUare;

[:SOURce]:PULM:INTernal[1]:FREQuency <val><unit>|UP|DOWN;

[:SOURce]:PULM:INTernal[1]:PERiod <val><unit>|UP|DOWN;

[:SOURce]:PULM:INTernal[1]:PWIDth <val><unit> |UP|DOWN

Function arguments



Parameter

Variable Type

Description



$ARFSG_handle

Object

Handle created by the ARFSG_Init() function.



$source

String

Specifies the source of the signal that is used as the modulating signal:

· “INT1”

· “EXT1”

· “EXT2”



$shape

String

Internal pulse modulation waveform type. Only used when $source parameter is set to “INT1”. Valid values:

· “SQUARE” – need to specify rate with $freq parameter

· “PULSE” – need to specify period and pulse width with $period and $width parameters



$freq

Float

Rate of the internal square wave pulse modulation source. Only used when $shape parameter is set to “SQUARE”



$period

Float

Period for the internally generated pulse modulation source. Only used when $shape parameter is set to "PULSE”.



$width

Float

Pulse width for the internally generated pulse modulation source. Only used when $shape parameter is set to "PULSE”.





Return parameters



Parameter

Variable Type

Description



None

-

-





ARFSG_Amod_PULM_Enable

Previous Top Next



* * *



ARFSG_AMod_PULM_Enable



Usage:

ARFSG_AMod_PULM_Enable($ARFSG_handle, $enablePULM)





Description:

Specifies whether the signal generator applies pulse modulation to the RF output signal.

Equivalent instrument command: [:SOURce]:PULM:STATe ON|OFF|1|0

Function arguments



Parameter

Variable Type

Description



$ARFSG_handle

Object

Handle created by the ARFSG_Init() function.



$enablePULM

Boolean

Pulse Modulation enable state.





Return parameters



Parameter

Variable Type

Description



None

-

-





ARFSG_Amod_PULM_ExtPolarity

Previous Top Next



* * *



ARFSG_AMod_PULM_ExtPolarity



Usage:

ARFSG_AMod_PULM_ExtPolarity($ARFSG_handle, $extPolarity)





Description:

Specifies the polarity of the external source signal.

Function arguments



Parameter

Variable Type

Description



$ARFSG_handle

Object

Handle created by the ARFSG_Init() function.



$extPolarity

String

Selects polarity type. Valid values:

· "NORMAL"

· "INVERSE"





Return parameters



Parameter

Variable Type

Description



None

-

-





ARFSG_ALC_Config

Previous Top Next



* * *



ARFSG_ALC_Config



Usage:

ARFSG_ALC_Config($ARFSG_handle, $source, $bandwidth)





Description:

This function configures the ALC (Automatic Level Control) of the signal generator's RF output.

Equivalent instrument command: [:SOURce]:POWer:ALC:BANDwidth|BWIDth 100HZ|1KHZ|10KHZ





Function arguments



Parameter

Variable Type

Description



$ARFSG_handle

Object

Handle created by the ARFSG_Init() function.



$source

String

Source for ALC. Valid strings are:

"INTERNAL" - The generated signal itself is used.

"EXTERNAL" - The signal on the the front panel ALC INPUT connector is used. 1

"MODULE" - The signal on the rear panel SOURCE MODULE interface connector is used. 1





1Not supported by E4428C



$bandwidth

Float

The bandwidth of the automatic leveling control (ALC) loop in hertz. Valid values:

100 - This bandwidth has the longest settling time, but the least signal degradation and lowest error vector magnitude for digital signals. This is the auto selection for digital modulation.

1000 - This bandwidth is the auto selection for pulse modulation and AM modulation to a carrier frequency of 500 kHz.

10000 - This bandwidth has the fastest settling time, but the most signal degradation and highest error vector magnitude for digital signals. This is the auto selection for AM modulation above a 500 kHz carrier frequency and with FM/ΦM modulation.





Return parameters



Parameter

Variable Type

Description



None

-

-





ARFSG_ALC_Enable

Previous Top Next



* * *



ARFSG_ALC_Enable



Usage:

ARFSG_ALC_Enable($ARFSG_handle, $enableALC)





Description:

Turns the ALC (Automatic Level Control) On/Off. The purpose of the ALC circuit is to hold output power at a desired level by adjusting the signal generator’s power circuits to compensate for power drift. Power drift occurs over time and changes in temperature.

Equivalent instrument command: [:SOURce]:POWer:ALC[:STATe] ON|OFF|1|0

Function arguments



Parameter

Variable Type

Description



$ARFSG_handle

Object

Handle created by the ARFSG_Init() function.



$enableALC

Boolean

ALC enable state.





Return parameters



Parameter

Variable Type

Description



None

-

-





ARFSG_Close

Previous Top Next



* * *



ARFSG_Close



Usage:

ARFSG_Close($ARFSG_handle)





Description:

Closes the I/O session to the instrument. Driver methods and properties that access the instrument are not accessible after Close is called.

Function arguments



Parameter

Variable Type

Description



$ARFSG_handle

Object

Handle created by the ARFSG_Init() function.





Return parameters



Parameter

Variable Type

Description



None

-

-





ARFSG_Init

Previous Top Next



* * *



ARFSG_Init



Usage:

$ARFSG_handle = ARFSG_Init($resourceName,$IDQuery, $resetDevice, $optionString)





Description:

Creates a new IVI instrument driver session.

Function arguments



Parameter

Variable Type

Description



$resourceName

String

Opens a session to the specified device using the interface and address you specify for the resourceName parameter.



$IDQuery

Boolean

Valid values are True or False.

Specifies whether to verify the ID of the instrument.



$resetDevice

Boolean

Valid values are True or False.

Specifies whether to reset the instrument.



$optionString

String

The user can use the $optionString parameter to specify the initial values of certain IVI inherent attributes for the session. The format of an assignment in the $optionString parameter is 'Name=Value', where Name is one of:





· RangeCheck

· QuerytInstrStatus

· Cache

· Simulate

· RecordCoercions

· InterchangeCheck

· DriverSetup





Value is either true or false except for DriverSetup. If the Options String parameter contains an assignment for the Driver Setup attribute, the Initialize function assumes that everything following 'DriverSetup=' is part of the assignment.





Return parameters



Parameter

Variable Type

Description



$ARFSG_handle

Object

Returns a handle that you use to identify the instrument in all subsequent instrument driver function calls.





Example(s):

$E4428C_handle = ARFSG_Init("ASRL1::INSTR", False, True, "RangeCheck=true,QueryInstrStatus=true");





ARFSG_LFGen_Config

Previous Top Next



* * *



ARFSG_LFGen_Config



Usage:

ARFSG_LFGen_Config($ARFSG_handle, $frequency, $waveform)





Description:

Configures the LF generator output frequency and waveform.

Equivalent instrument command: [:SOURce]:LFOutput:FUNCtion[1]:FREQuency <val><unit>

[:SOURce]:LFOutput:FUNCtion[1]:SHAPe SINE|DUALsine|SWEPtsine|TRIangle|SQUare|RAMP|PULSe|NOISe|DC

Function arguments



Parameter

Variable Type

Description



$ARFSG_handle

Object

Handle created by the ARFSG_Init() function.



$frequency

Float

Frequency of the active LF generator.



$waveform

String

Waveform shape of the active LF generator. Valid values:

· “SINE”

· “RECTANGLE”

· “TRIANGLE”

· “RAMPUP”

· “RAMPDOWN”

· “NOISE”





Return parameters



Parameter

Variable Type

Description



None

-

-





ARFSG_LFGen_Enable

Previous Top Next



* * *



ARFSG_LFGen_Enable



Usage:

ARFSG_LFGen_Enable($ARFSG_handle, $enableLF)





Description:

Turns the LF generator output On/Off.

Equivalent instrument command: [:SOURce]:LFOutput:STATe ON|OFF|1|0

Function arguments



Parameter

Variable Type

Description



$ARFSG_handle

Object

Handle created by the ARFSG_Init() function.



$enableLF

Boolean

LF generator enable state.





Return parameters



Parameter

Variable Type

Description



None

-

-





ARFSG_LFGen_OutputVolt

Previous Top Next



* * *



ARFSG_LFGen_OutputVolt



Usage:

ARFSG_LFGen_OutputVolt($ARFSG_handle, $voltage)





Description:

Specifies the output voltage of the LF generator.

Equivalent instrument command: [:SOURce]:LFOutput:AMPLitude <val><unit>

Function arguments



Parameter

Variable Type

Description



$ARFSG_handle

Object

Handle created by the ARFSG_Init() function.



$voltage

Float

LF output voltage.





Return parameters



Parameter

Variable Type

Description



None

-

-





ARFSG_LFGen_Source

Previous Top Next



* * *



ARFSG_LFGen_Source



Usage:

ARFSG_LFGen_Source($ARFSG_handle, $source)





Description:

Sets the low frequency source for the LF output.

Equivalent instrument command: [:SOURce]:LFOutput:SOURce INT[1]|FUNCtion





Function arguments



Parameter

Variable Type

Description



$ARFSG_handle

Object

Handle created by the ARFSG_Init() function.



$source

String

LF generator source. Valid values:

· “INT1” – This choice enables you to output a signal where the frequency and shape of the signal is set by the internal source as it is being used by a modulation. For example, if the internal source is currently assigned to an AM path configuration and AM is turned on, the signal output at the LF OUTPUT connector will have the frequency and shape of the amplitude modulating signal.

· “FUNCTION” - This choice enables the selection of an internal function generator.





Return parameters



Parameter

Variable Type

Description



None

-

-





ARFSG_PGen_Config

Previous Top Next



* * *



ARFSG_PGen_Config



Usage:

ARFSG_PGen_Config($ARFSG_handle, $trigSource, $pulseWidth, $enableGating)





Description:

Configures the pulse generator within the RF signal generator.

Equivalent instrument command: [:SOURce]:PULM:SOURce INT|EXT[1]|EXT2;

[:SOURce]:PULM:INTernal[1]:PWIDth <val><unit> |UP|DOWN;

Function arguments



Parameter

Variable Type

Description



$ARFSG_handle

Object

Handle created by the ARFSG_Init() function.



$trigSource

String

Specifies the source of the signal the pulse generator uses to generate one pulse.



$pulseWidth

Float

Specifies the width of the output pulse. Valid range is 4uS – 30S.



$enableGating

Boolean

Turns pulse gating on/off.





Return parameters



Parameter

Variable Type

Description



None

-

-





ARFSG_PGen_ConfigExtTrig

Previous Top Next



* * *



ARFSG_PGen_ConfigExtTrig



Usage:

ARFSG_PGen_ConfigExtTrig($ARFSG_handle, $extTrigSlope, $delay)





Description:

Configures the external trigger for the pulse generator.

Equivalent instrument command: :PULM:INT1:DEL

Function arguments



Parameter

Variable Type

Description



$ARFSG_handle

Object

Handle created by the ARFSG_Init() function.



$extTrigSlope

String

Specifies whether the trigger event occurs on the rising or falling edge of the input signal.



$delay

Float

Specifies the delay from trigger input to start of the output pulse.





Return parameters



Parameter

Variable Type

Description



None

-

-





ARFSG_PGen_DoubleDelay

Previous Top Next



* * *



ARFSG_PGen_DoubleDelay



Usage:

ARFSG_PGen_DoubleDelay($ARFSG_handle, $delay)





Description:

Specifies the delay of the second pulse.

Function arguments



Parameter

Variable Type

Description



$ARFSG_handle

Object

Handle created by the ARFSG_Init() function.



$delay

Float

Delay in seconds.





Return parameters



Parameter

Variable Type

Description



None

-

-





ARFSG_PGen_DoubleEnable

Previous Top Next



* * *



ARFSG_PGen_DoubleEnable



Usage:

ARFSG_PGen_DoubleEnable($ARFSG_handle, $enableDouble)





Description:

Turns double pulse mode On/Off.

Function arguments



Parameter

Variable Type

Description



$ARFSG_handle

Object

Handle created by the ARFSG_Init() function.



$enableDouble

Boolean

Double pulse enable state.





Return parameters



Parameter

Variable Type

Description



None

-

-





ARFSG_PGen_IntTrigPer

Previous Top Next



* * *



ARFSG_PGen_IntTrigPer



Usage:

ARFSG_PGen_IntTrigPer($ARFSG_handle, $trigPer)





Description:

Specifies the period of the pulse generator's output signal.

Function arguments



Parameter

Variable Type

Description



$ARFSG_handle

Object

Handle created by the ARFSG_Init() function.



$trigPer

Float

Pulse period. Valid range 8uS – 30S





Return parameters



Parameter

Variable Type

Description



None

-

-





ARFSG_PGen_OutputEnable

Previous Top Next



* * *



ARFSG_PGen_OutputEnable



Usage:

ARFSG_PGen_OutputEnable($ARFSG_handle, $enablePGen)





Description:

Turns the pulse generator on/off.

Function arguments



Parameter

Variable Type

Description



$ARFSG_handle

Object

Handle created by the ARFSG_Init() function.



$enablePGen

Boolean

Pulse generator enable status.





Return parameters



Parameter

Variable Type

Description



None

-

-





ARFSG_PGen_OutputPolarity

Previous Top Next



* * *



ARFSG_PGen_OutputPolarity



Usage:

ARFSG_PGen_OutputPolarity($ARFSG_handle, $PGenPolarity)





Description:

Specifies the polarity of the pulse generator output signal.

Function arguments



Parameter

Variable Type

Description



$ARFSG_handle

Object

Handle created by the ARFSG_Init() function.



$PGenPolarity

String

Output polarity. Valid strings:

· "NORMAL"

· "INVERTED"





Return parameters



Parameter

Variable Type

Description



None

-

-





ARFSG_RF_Config

Previous Top Next



* * *



ARFSG_RF_Config



Usage:

ARFSG_RF_Config($ARFSG_handle, $freq, $power)





Description:

Specifies the frequency and amplitude (power/level) of the RF output signal.

Equivalent instrument command: [:POW:LEV:IMM:AMPL <level>; FREQ:CW <freq>

Function arguments



Parameter

Variable Type

Description



$ARFSG_handle

Object

Handle created by the ARFSG_Init() function.



$freq

Float

RF frequency.



$power

Float

RF power.





Return parameters



Parameter

Variable Type

Description



None

-

-





ARFSG_RF_Enable

Previous Top Next



* * *



ARFSG_RF_Enable



Usage:

ARFSG_RF_Enable($ARFSG_handle, $enableRF)





Description:

Turns the RF output signal On/Off.

Equivalent instrument command: :OUTPut[:STATe] ON|OFF|1|0

Function arguments



Parameter

Variable Type

Description



$ARFSG_handle

Object

Handle created by the ARFSG_Init() function.



$enableRF

Boolean

RF enabled state.





Return parameters



Parameter

Variable Type

Description



None

-

-





ARFSG_RF_Settle

Previous Top Next



* * *



ARFSG_RF_Settle



Usage:

ARFSG_RF_Settle($ARFSG_handle, $timeout)





Description:

Returns if the state of the RF output signal has settled. Use after changing output state, before trying to make any measurements.

Function arguments



Parameter

Variable Type

Description



$ARFSG_handle

Object

Handle created by the ARFSG_Init() function.



$timeout

Integer

Maximum time in milliseconds to wait for function to return.





Return parameters



Parameter

Variable Type

Description



None

-

-





Supported Instruments

Previous Top Next



* * *



Supported Instruments





E4428C - tested

E4438C

N5181A

N5182A

N5183A

N8211A

N8212A

E8241A

E8244A

E8247C

E8251A

E8254A

E8257C

E8257D

E8267C

E8267D

E8663B





Driver version





IVI-COM Driver Version 1.2.7.0





ARFSG_Sweep_FreqStep_Config

Previous Top Next



* * *



ARFSG_Sweep_FreqStep_Config



Usage:

ARFSG_Sweep_FreqStep_Config($ARFSG_handle, $start, $stop, $points)





Description:

Configures frequency step sweep settings.

Equivalent instrument command: [:SOURce]:LIST:TYPE LIST|STEP;

[:SOURce]:FREQuency:STARt <val><unit>;

[:SOURce]:FREQuency:STOP <val><unit>;

[:SOURce]:SWEep:POINts <val>

Function arguments



Parameter

Variable Type

Description



$ARFSG_handle

Object

Handle created by the ARFSG_Init() function.



$start

Float

Starting frequency of sweep.



$stop

Float

Stopping frequency of sweep.



$points

Integer

Number of points in sweep.





Return parameters



Parameter

Variable Type

Description



None

-

-





ARFSG_Sweep_FreqStep_Start

Previous Top Next



* * *



ARFSG_Sweep_FreqStep_Start



Usage:

ARFSG_Sweep_FreqStep_Start($ARFSG_handle)





Description:

Starts currently enabled sweep. Follow with the OPC command to ensure sweep finishes before program continues.

Equivalent instrument command: :FREQuency:MODE LIST; :INITiate:IMMediate:ALL

Function arguments



Parameter

Variable Type

Description



$ARFSG_handle

Object

Handle created by the ARFSG_Init() function.





Return parameters



Parameter

Variable Type

Description



None

-

-





ARFSG_OPC

Previous Top Next



* * *



ARFSG_OPC



Usage:

ARFSG_OPC($ARFSG_handle, $timeout)





Description:

Does not return until previously started operations complete or $timeout milliseconds of time have expired. Use after an operation that takes a variable amount of time instead of a Sleep() function.

Equivalent instrument command: *OPC | *WAI

Function arguments



Parameter

Variable Type

Description



$ARFSG_handle

Object

Handle created by the ARFSG_Init() function.



$timeout

Integer

How long to wait, in milliseconds, for all the operations started in the instrument to complete.





Return parameters



Parameter

Variable Type

Description



None

-

-





Example(s):

ARFSG_OPC($ARFSG_handle, 10000);





ARFSG_PrintErrors

Previous Top Next



* * *



ARFSG_PrintErrors



Usage:

ARFSG_PrintErrors($ARFSG_handle)





Description:

Prints out all errors and clears the queue.

Equivalent instrument command: :SYSTem:ERRor[:NEXT]?

Function arguments



Parameter

Variable Type

Description



$ARFSG_handle

Object

Handle created by the ARFSG_Init() function.





Return parameters



Parameter

Variable Type

Description



None

-

-





ARFSG_SCPI_Read

Previous Top Next



* * *



ARFSG_SCPI_Read

Usage:

$message = ARFSG_SCPI_Read($ARFSG_handle)



Description:

Retrieves string from instrument. Used to get the response from a SCPI query sent with the ARFSG_SCPI_Write function.

Function arguments



Parameter

Variable Type

Description



$ARFSG_handle

Object

Handle created by the ARFSG_Init() function.





Return parameters



Parameter

Variable Type

Description



$message

String

Return string from instrument.





ARFSG_SCPI_Write

Previous Top Next



* * *



ARFSG_SCPI_Write



Usage:

ARFSG_SCPI_Write($ARFSG_handle, $command)





Description:

Sends a string directly to instrument. Used to communicate with and control instrument using SCPI commands.

Function arguments



Parameter

Variable Type

Description



$ARFSG_handle

Object

Handle created by the ARFSG_Init() function.



$command

String

SCPI command to send to instrument. See "SCPI Command Reference" from Agilent for a list of valid commands.





Return parameters



Parameter

Variable Type

Description



None

-

-





Example(s):





ARFSG_SCPI_Write($InstrHandle, "*RST"); //resets device





ARFSG_SendSWTrig

Previous Top Next



* * *



ARFSG_SendSWTrig



Usage:

ARFSG_SendSWTrig($ARFSG_handle)





Description:

Sends a software trigger, which causes the signal generator to start signal generation (in BUS mode).

Equivalent instrument command: *TRG

Function arguments



Parameter

Variable Type

Description



$ARFSG_handle

Object

Handle created by the ARFSG_Init() function.





Return parameters



Parameter

Variable Type

Description



None

-

-





ARFSG_Clear

Previous Top Next



* * *



ARFSG_Clear



Usage:

ARFSG_Clear($ARFSG_handle)





Description:

Clears all event registers and error queue. The enable registers are unaffected.

Equivalent instrument command: *CLS

Function arguments



Parameter

Variable Type

Description



$ARFSG_handle

Object

Handle created by the ARFSG_Init() function.





Return parameters



Parameter

Variable Type

Description



None

-

-





ARFSG_DisplayEnable

Previous Top Next



* * *



ARFSG_DisplayEnable



Usage:

ARFSG_DisplayEnable($ARFSG_handle, $enableDisp)





Description:

Specififes whether the display is on or off.

Equivalent instrument command: DISPlay[:WINDow][:STATe] ON|OFF|1|0

Function arguments



Parameter

Variable Type

Description



$ARFSG_handle

Object

Handle created by the ARFSG_Init() function.



$enableDisp

Boolean

Valid values are True and False.

Turns instrument display On/Off.





Return parameters



Parameter

Variable Type

Description



None

-

-





ARFSG_Reset

Previous Top Next



* * *



ARFSG_Reset



Usage:

ARFSG_Reset($ARFSG_handle)





Description:

Places the instrument in a known state and configures instrument options on which the IVI specific driver depends (for example, enabling/disabling headers). For an IEEE 488.2 instrument, Reset sends the command string *RST to the instrument.

Equivalent instrument command: *RST

Function arguments



Parameter

Variable Type

Description



$ARFSG_handle

Object

Handle created by the ARFSG_Initialize() function.





Return parameters



Parameter

Variable Type

Description



None

-

-





BK4084_Close

Previous Top Next



* * *



BK4084_Close

Usage:

BK4084_Close($comPort);

Description:

Issues the close command to reset the BK precision 4084 to its default state. If the unit returns a successful response, a PASS result is generated, otherwise a FAIL result is returned from this function.



Function Arguments



Parameter

Variable Type

Description



$comPort

Object

An instance of the SerialPort object to be used for communicating with the BK Precision 4084AWG





Return Parameters



Parameter

Variable Type

Description



None





BK4084_CountClr

Previous Top Next



* * *



BK4084_CountClr

Usage:

BK4084_CountClr($comPort);

Description:

Issues the command to clear the counted values the counter. If the unit returns a successful response, a PASS result is generated, otherwise a FAIL result is returned from this function.

Function Arguments



Parameter

Variable Type

Description



$comPort

Object

An instance of the SerialPort object to be used for communicating with the BK Precision 4084AWG





Return Parameters



Parameter

Variable Type

Description



None





BK4084_CountInit

Previous Top Next



* * *



BK4084_CountInit

Usage:

BK4084_CountInit($comPort);

Description:

Issues the command to initialize the counter and have it start counting. If the unit returns a successful response, a PASS result is generated, otherwise a FAIL result is returned from this function.

Function Arguments



Parameter

Variable Type

Description



$comPort

Object

An instance of the SerialPort object to be used for communicating with the BK Precision 4084AWG





Return Parameters



Parameter

Variable Type

Description



None





BK4084_CountRead

Previous Top Next



* * *



BK4084_CountRead

Usage:

$Count_Value = BK4084_CountRead($comPort);

Description:

Issues the command to stop the counter and read the current value of the counter. If the unit returns a successful response, a PASS result is generated, otherwise a FAIL result is returned from this function.

Function Arguments



Parameter

Variable Type

Description



$comPort

Object

An instance of the SerialPort object to be used for communicating with the BK Precision 4084AWG





Return Parameters



Parameter

Variable Type

Description



$Count_Value

Float

The current value of the counter





BK4084_DC

Previous Top Next



* * *



BK4084_DCBK4084_DC

Usage:

BK4084_DC($comPort, $Frequency, $Vpp, $DC_offset);

Description:

Issues the command to create a positive DC Waveform this would directly set the output of the function generator including its frequency, amplitude and offset.

If the unit returns a successful response, a PASS result is generated, otherwise a FAIL result is returned from this function.

*If waveform is Noise or DC, the frequency data contained in the command is not invalid.

Function Arguments



Parameter

Variable Type

Description



$Comport

Object

An instance of the SerialPort object to be used for communicating with the BK Precision 4084AWG.



$Frequency

Float

This is the frequency value of the waveform.



$Vpp

Float

This is the peak to peak voltage of the waveform.



$DC_Offset

Float

This is the DC Offset value of the waveform.





Return Parameters



Parameter

Variable Type

Description



None

None

None





Usage Examples

To output a positive DC waveform of 5kHz,3Vp-p with –2.5V DC offset:

BK4084_DC($comport,5.0E+3,3,-2.5);





BK4084_Dwnramp

Previous Top Next



* * *



BK4084_Dwnramp

Usage:

BK4084_Dwnramp($comPort, $Frequency, $Vpp, $DC_offset);

Description:

Issues the command to create a falling ramp Waveform this would directly set the output of the function generator including its frequency, amplitude and offset.

If the unit returns a successful response, a PASS result is generated, otherwise a FAIL result is returned from this function.



Function Arguments



Parameter

Variable Type

Description



$Comport

Object

An instance of the SerialPort object to be used for communicating with the BK Precision 4084AWG.



$Frequency

Float

This is the frequency value of the waveform.



$Vpp

Float

This is the peak to peak voltage of the waveform.



$DC_Offset

Float

This is the DC Offset value of the waveform.





Return Parameters



Parameter

Variable Type

Description



None

None

None





Usage Examples

To output a falling ramp waveform of 5kHz,3Vp-p with –2.5V DC offset:

BK4084_Dwnramp($comport,5.0E+3,3,-2.5);





BK4084_FreqMeas

Previous Top Next



* * *



BK4084_FreqMeas

Usage:

$Frequency_Measured = BK4084_FreqMeas($comport);

Description:

Issues the command to enable the instrument to start a new frequency measurement and output the frequency value after frequency is measured.

If the unit returns a successful response, a PASS result is generated, otherwise a FAIL result is returned from this function.

Function Arguments



Parameter

Variable Type

Description



$Comport

Object

An instance of the SerialPort object to be used for communicating with the BK Precision 4084AWG.





Return Parameters



Parameter

Variable Type

Description



$Frequency_Measured

Float

This is the frequency measured in HZ





BK4084_Init

Previous Top Next



* * *



BK4084_Init

Usage:

BK4084_Init($comPort);

Description:

Issues the initialize command to verify that com port can communicate with signal generator. The first parameter to this function is a SerialPort object which first must be created by using the SerialOpen function. The SerialOpen function should be passed the parameters (9600,8,"N",1) for communication with the BK Precision 4084AWG function Generator. If the unit returns a successful response, a PASS result is generated, otherwise a FAIL result is returned from this function.



Function Arguments



Parameter

Variable Type

Description



$comPort

Object

An instance of the SerialPort object to be used for communicating with the BK Precision 4084AWG





Return Parameters



Parameter

Variable Type

Description



None





BK4084_Noise

Previous Top Next



* * *



BK4084_Noise

Usage:

BK4084_Noise($comPort, $Frequency, $Vpp, $DC_offset);

Description:

Issues the command to create a Noise Waveform this would directly set the output of the function generator including its frequency, amplitude and offset.

If the unit returns a successful response, a PASS result is generated, otherwise a FAIL result is returned from this function.

*If waveform is Noise or DC, the frequency data contained in the command is not invalid.

Function Arguments



Parameter

Variable Type

Description



$Comport

Object

An instance of the SerialPort object to be used for communicating with the BK Precision 4084AWG.



$Frequency

Float

This is the frequency value of the waveform.



$Vpp

Float

This is the peak to peak voltage of the waveform.



$DC_Offset

Float

This is the DC Offset value of the waveform.





Return Parameters



Parameter

Variable Type

Description



None

None

None





Usage Examples

To output a noise waveform of 5kHz,3Vp-p with –2.5V DC offset:

BK4084_Noise($comport,5.0E+3,3,-2.5);





BK4084_Sin

Previous Top Next



* * *



BK4084_Sin

Usage:

BK4084_Sin($comPort, $Frequency, $Vpp, $DC_offset);

Description:

Issues the command to create a sine Waveform this would directly set the output of the function generator including its frequency, amplitude and offset.

If the unit returns a successful response, a PASS result is generated, otherwise a FAIL result is returned from this function.



Function Arguments



Parameter

Variable Type

Description



$Comport

Object

An instance of the SerialPort object to be used for communicating with the BK Precision 4084AWG.



$Frequency

Float

This is the frequency value of the waveform.



$Vpp

Float

This is the peak to peak voltage of the waveform.



$DC_Offset

Float

This is the DC Offset value of the waveform.





Return Parameters



Parameter

Variable Type

Description



None

None

None





Usage Examples

To output a sine waveform of 5kHz,3Vp-p with –2.5V DC offset:

BK4084_Sin($comport,5.0E+3,3,-2.5);





BK4084_Squ

Previous Top Next



* * *



BK4084_Squ

Usage:

BK4084_Squ($comPort, $Frequency, $Vpp, $DC_offset);

Description:

Issues the command to create a square Waveform this would directly set the output of the function generator including its frequency, amplitude and offset.

If the unit returns a successful response, a PASS result is generated, otherwise a FAIL result is returned from this function.



Function Arguments



Parameter

Variable Type

Description



$Comport

Object

An instance of the SerialPort object to be used for communicating with the BK Precision 4084AWG.



$Frequency

Float

This is the frequency value of the waveform.



$Vpp

Float

This is the peak to peak voltage of the waveform.



$DC_Offset

Float

This is the DC Offset value of the waveform.





Return Parameters



Parameter

Variable Type

Description



None

None

None





Usage Examples

To output a square waveform of 5kHz,3Vp-p with –2.5V DC offset:

BK4084_Squ($comport,5.0E+3,3,-2.5);





BK4084_Tri

Previous Top Next



* * *



BK4084_Tri

Usage:

BK4084_Tri($comPort, $Frequency, $Vpp, $DC_offset);

Description:

Issues the command to create a triangle Waveform this would directly set the output of the function generator including its frequency, amplitude and offset.

If the unit returns a successful response, a PASS result is generated, otherwise a FAIL result is returned from this function.



Function Arguments



Parameter

Variable Type

Description



$Comport

Object

An instance of the SerialPort object to be used for communicating with the BK Precision 4084AWG.



$Frequency

Float

This is the frequency value of the waveform.



$Vpp

Float

This is the peak to peak voltage of the waveform.



$DC_Offset

Float

This is the DC Offset value of the waveform.





Return Parameters



Parameter

Variable Type

Description



None

None

None





Usage Examples

To output a triangle waveform of 5kHz,3Vp-p with –2.5V DC offset:

BK4084_Tri($comport,5.0E+3,3,-2.5);





BK4084_Upramp

Previous Top Next



* * *



BK4084_Upramp

Usage:

BK4084_Upramp($comPort, $Frequency, $Vpp, $DC_offset);

Description:

Issues the command to create a Ramp Waveform this would directly set the output of the function generator including its frequency, amplitude and offset.

If the unit returns a successful response, a PASS result is generated, otherwise a FAIL result is returned from this function.



Function Arguments



Parameter

Variable Type

Description



$Comport

Object

An instance of the SerialPort object to be used for communicating with the BK Precision 4084AWG.



$Frequency

Float

This is the frequency value of the waveform.



$Vpp

Float

This is the peak to peak voltage of the waveform.



$DC_Offset

Float

This is the DC Offset value of the waveform.





Return Parameters



Parameter

Variable Type

Description



None

None

None





Usage Examples

To output a ramp waveform of 5kHz,3Vp-p with –2.5V DC offset:

BK4084_Upramp($comport,5.0E+3,3,-2.5);





NI_Fgen_AdjustSampleClockRelativeDelay

Previous Top Next



* * *



NI_Fgen_AdjustSampleClockRelativeDelay



Usage:

NI_Fgen_AdjustSampleClockRelativeDelay($NI_FgenHandle, $adjustmentTime);



Description:

This function requires NI FGEN drivers to be installed on the system.

This function delays (or phase shifts) the sample clock, which delays the output of the module. Delaying the sample clock can be useful when lining up the output of multiple modules or when intentionally phase shifting the output relative to a fixed reference such as the PLL reference clock.

Adjustment time can be positive or negative, but it must be less than or equal to the sample clock period. The delay takes effect immediately after this function is called.



Remarks:

· This function is tested with a NI PXI-5412 device.

· When there occurs an error during the execution of the low level NI-Fgen functions, Jabil Test will fail and return the error message.

· The function will verify if the given parameter exists, otherwise Jabil Test fails and returns the error message.



Result:

NI_Fgen_AdjustSampleClockRelativeDelay($NI_FgenHandle, $adjustmentTime);

Function arguments



Parameter

Variable Type

Description



$NI_FgenHandle

Object

The instrument handle you obtain from NI_Fgen_Initialize that identifies a particular instrument's session.



$adjustmentTime

Float

The amount of time to adjust the sample clock delay in seconds.





Return parameters



Parameter

Variable Type

Description





Example(s):

$adjustmentTime = New("Float", 0.0);

NI_Fgen_AdjustSampleClockRelativeDelay($NI_FgenHandle, $adjustmentTime);





NI_Fgen_ClearArbMemory

Previous Top Next



* * *



NI_Fgen_ClearArbMemory



Usage:

NI_Fgen_ClearArbMemory($NI_FgenHandle);



Description:

This function requires NI FGEN drivers to be installed on the system.

This function removes all previously created arbitrary waveforms and sequences from the signal generator memory, and invalidates all waveform and sequence handles.

Remarks:

· This function is tested with a NI PXI-5412 device.

· When there occurs an error during the execution of the low level NI-Fgen functions, Jabil Test will fail and return the error message.

· The function will verify if the given parameter exists, otherwise Jabil Test fails and returns the error message.

· The signal generator must not be in the generating state when you call this function.



Result:

NI_Fgen_ClearArbMemory($NI_FgenHandle);

Function arguments



Parameter

Variable Type

Description



$NI_FgenHandle

Object

The instrument handle you obtain from NI_Fgen_Initialize that identifies a particular instrument's session.





Return parameters



Parameter

Variable Type

Description





Example(s):

NI_Fgen_ClearArbMemory($NI_FgenHandle);





NI_Fgen_ClearUserStandardWaveform

Previous Top Next



* * *



NI_Fgen_ClearUserStandardWaveform



Usage:

NI_Fgen_ClearUserStandardWaveform($NI_FgenHandle, $ChannelName);



Description:

This function requires NI FGEN drivers to be installed on the system.

This function clears the user-defined waveform created by NI_Fgen_DefineUserStandardWaveform.

Remarks:

· This function is tested with a NI PXI-5412 device.

· When there occurs an error during the execution of the low level NI-Fgen functions, Jabil Test will fail and return the error message.

· The function will verify if the given parameter exists, otherwise Jabil Test fails and returns the error message.



Result:

NI_Fgen_ClearUserStandardWaveform($NI_FgenHandle, $ChannelName);

Function arguments



Parameter

Variable Type

Description



$NI_FgenHandle

Object

The instrument handle you obtain from NI_Fgen_Initialize that identifies a particular instrument's session.



$ChannelName

String

Pass the channel name for which you want to configure a standard waveform.





Return parameters



Parameter

Variable Type

Description





Example(s):

NI_Fgen_ClearUserStandardWaveform($NI_FgenHandle, "0");





NI_Fgen_Close

Previous Top Next



* * *



NI_Fgen_Close



Usage:

NI_Fgen_Close($NI_FgenHandle);



Description:

This function requires NI FGEN drivers to be installed on the system.

This function closes the instrument I/O session created with NI_Fgen_Initialize. It deallocates any memory resources NI-FGEN uses.



Remarks:

· This function is tested with a NI PXI-5412 device.

· When there occurs an error during the execution of the low level NI-Fgen functions, Jabil Test will fail and return the error message.

· The function will verify if the given parameter exists, otherwise Jabil Test fails and returns the error message.



Result:

NI_Fgen_Close($NI_FgenHandle);

Function arguments



Parameter

Variable Type

Description



$NI_FgenHandle

Object

The instrument handle you obtain from NI_Fgen_Initialize that identifies a particular instrument's session.





Return parameters



Parameter

Variable Type

Description





Example(s):

NI_Fgen_Close($NI_FgenHandle);





NI_Fgen_ConfigureAmplitude

Previous Top Next



* * *



NI_Fgen_ConfigureAmplitude



Usage:

NI_Fgen_ConfigureAmplitude($NI_FgenHandle, $ChannelName, $Amplitude);



Description:

This function requires NI FGEN drivers to be installed on the system.

This function configures the amplitude of the standard waveform that you want the signal generator to produce.



Remarks:

· This function is tested with a NI PXI-5412 device.

· When there occurs an error during the execution of the low level NI-Fgen functions, Jabil Test will fail and return the error message.

· The function will verify if the given parameter exists, otherwise Jabil Test fails and returns the error message.



Result:

NI_Fgen_ConfigureAmplitude($NI_FgenHandle, $ChannelName, $Amplitude);

Function arguments



Parameter

Variable Type

Description



$NI_FgenHandle

Object

The instrument handle you obtain from NI_Fgen_Initialize that identifies a particular instrument's session.



$ChannelName

String

Pass the channel name for which you want to configure a standard waveform.



$Amplitude

Float

The peak-to-peak amplitude of the generated waveform in volts.





Return parameters



Parameter

Variable Type

Description





Example(s):

NI_Fgen_ConfigureAmplitude($NI_FgenHandle, "0", 2.0);





NI_Fgen_ConfigureArbWaveform

Previous Top Next



* * *



NI_Fgen_ConfigureArbWaveform



Usage:

NI_Fgen_ConfigureArbWaveform($NI_FgenHandle, $ChannelName, $WaveformHandle, $Gain, $Offset);



Description:

This function requires NI FGEN drivers to be installed on the system.

This function configures the attributes of the signal generator that affect arbitrary waveform generation. These attributes are the arbitrary waveform handle, gain, and offset.



Remarks:

· This function is tested with a NI PXI-5412 device.

· When there occurs an error during the execution of the low level NI-Fgen functions, Jabil Test will fail and return the error message.

· The function will verify if the given parameter exists, otherwise Jabil Test fails and returns the error message.

· The signal generator must not be in the generating state when you call this function.

· You must set the output mode to "ARB" before calling this function.



Result:

NI_Fgen_ConfigureArbWaveform($NI_FgenHandle, $ChannelName, $WaveformHandle, $Gain, $Offset);

Function arguments



Parameter

Variable Type

Description



$NI_FgenHandle

Object

The instrument handle you obtain from NI_Fgen_Initialize that identifies a particular instrument's session.



$ChannelName

String

Pass the channel name for which you want to configure a standard waveform.



$WaveformHandle

Integer

Pass the handle of the arbitrary waveform that you want the signal generator to remove. You can create multiple arbitrary waveforms using one of the following niFgen Create Waveform functions:

· NI_Fgen_CreateWaveformF64

· NI_Fgen_CreateWaveformI16

· NI_Fgen_CreateWaveformFromFileI16

· NI_Fgen_CreateWaveformFromFileF64

NI_Fgen_CreateWaveformFromFileHWS



$Gain

Float

Specifies the factor by which the signal generator scales the arbitrary waveform data. When you create arbitrary waveforms, you must first normalize the data points to a range of –1.00 V to +1.00 V. For example, to configure the output signal to range from –2.00 V to +2.00 V, set the gain to 2.00.

Unit : V



$Offset

Float

Specifies the value the signal generator adds to the arbitrary waveform data. When you create arbitrary waveforms, you must first normalize the data points to a range of –1.00 V to +1.00 V. You can use this parameter to shift the range of the arbitrary waveform. NI-FGEN sets NIFGEN_ATTR_ARB_OFFSET to this value.

For example, to configure the output signal to range from 0.00 V to 2.00 V instead of –1.00 V to 1.00 V, set the offset to 1.00.

Unit : V





Return parameters



Parameter

Variable Type

Description





Example(s):

NI_Fgen_ConfigureArbWaveform($NI_FgenHandle, "0", $WaveformHandle, 1.0, 1.0);





NI_Fgen_ConfigureClockMode

Previous Top Next



* * *



NI_Fgen_ConfigureClockMode



Usage:

NI_Fgen_ConfigureClockMode($NI_FgenHandle, $ClockMode);



Description:

This function requires NI FGEN drivers to be installed on the system.

This function selects the clock mode for the signal generator. For signal generators that support it, this function allows you to switch the sample clock to High-Resolution Sampling mode. When in Divide-Down Sampling mode, you can only set the sample rate to certain frequencies, based on dividing down the update clock. However, in High-Resolution Sampling mode, you can set the sample rate to any value. You must set the output mode to arbitrary waveform output or arbitrary sequence output before calling this function.



Remarks:

· This function is tested with a NI PXI-5412 device.

· When there occurs an error during the execution of the low level NI-Fgen functions, Jabil Test will fail and return the error message.

· The function will verify if the given parameter exists, otherwise Jabil Test fails and returns the error message.



Result:

NI_Fgen_ConfigureClockMode($NI_FgenHandle, $ClockMode);

Function arguments



Parameter

Variable Type

Description



$NI_FgenHandle

Object

The instrument handle you obtain from NI_Fgen_Initialize that identifies a particular instrument's session.



$ClockMode

String

Sets the clock mode of the signal generator.

Valid value(s) :

· "DIVIDE DOWN"

· "HIGH RESOLUTION"

· "AUTOMATIC"





Return parameters



Parameter

Variable Type

Description





Example(s):

NI_Fgen_ConfigureClockMode($NI_FgenHandle, "AUTOMATIC");





NI_Fgen_ConfigureFrequency

Previous Top Next



* * *



NI_Fgen_ConfigureFrequency



Usage:

NI_Fgen_ConfigureFrequency($NI_FgenHandle, $ChannelName, $Frequency);



Description:

This function requires NI FGEN drivers to be installed on the system.

This function configures the frequency of the standard waveform that you want the signal generator to produce.



Remarks:

· This function is tested with a NI PXI-5412 device.

· When there occurs an error during the execution of the low level NI-Fgen functions, Jabil Test will fail and return the error message.

· The function will verify if the given parameter exists, otherwise Jabil Test fails and returns the error message.



Result:

NI_Fgen_ConfigureFrequency($NI_FgenHandle, $ChannelName, $Frequency);

Function arguments



Parameter

Variable Type

Description



$NI_FgenHandle

Object

The instrument handle you obtain from NI_Fgen_Initialize that identifies a particular instrument's session.



$ChannelName

String

Pass the channel name for which you want to configure a standard waveform.



$Frequency

Float

Pass the frequency of the standard waveform that you want the signal generator to produce. This parameter does not affect signal generator behavior when you set the waveform parameter to DC voltage.

Unit : Hz





Return parameters



Parameter

Variable Type

Description





Example(s):

NI_Fgen_ConfigureFrequency($NI_FgenHandle, "0", 1000.0);





NI_Fgen_ConfigureGain

Previous Top Next



* * *



NI_Fgen_ConfigureGain



Usage:

NI_Fgen_ConfigureGain($NI_FgenHandle, $ChannelName, $Gain);



Description:

This function requires NI FGEN drivers to be installed on the system.

This function configures the amount of gain to apply to the waveform.



Remarks:

· This function is tested with a NI PXI-5412 device.

· When there occurs an error during the execution of the low level NI-Fgen functions, Jabil Test will fail and return the error message.

· The function will verify if the given parameter exists, otherwise Jabil Test fails and returns the error message.



Result:

NI_Fgen_ConfigureGain($NI_FgenHandle, $ChannelName, $Gain);

Function arguments



Parameter

Variable Type

Description



$NI_FgenHandle

Object

The instrument handle you obtain from NI_Fgen_Initialize that identifies a particular instrument's session.



$ChannelName

String

Pass the channel name for which you want to configure a standard waveform.



$Gain

Float

Specifies the factor by which the signal generator scales the arbitrary waveform data. When you create arbitrary waveforms, you must first normalize the data points to a range of –1.00 V to +1.00 V. For example, to configure the output signal to range from –2.00 V to +2.00 V, set the gain to 2.00.

Unit : V





Return parameters



Parameter

Variable Type

Description





Example(s):

NI_Fgen_ConfigureGain($NI_FgenHandle, "0", 2.0);





NI_Fgen_ConfigureOperationMode

Previous Top Next



* * *



NI_Fgen_ConfigureOperationMode



Usage:

NI_Fgen_ConfigureOperationMode($NI_FgenHandle, $ChannelName, $OperationMode);



Description:

This function requires NI FGEN drivers to be installed on the system.

This function determines how the signal generator produces waveforms. NI signal generators currently support only one value.



Remarks:

· This function is tested with a NI PXI-5412 device.

· When there occurs an error during the execution of the low level NI-Fgen functions, Jabil Test will fail and return the error message.

· The function will verify if the given parameter exists, otherwise Jabil Test fails and returns the error message.



Result:

NI_Fgen_ConfigureOperationMode($NI_FgenHandle, $ChannelName, $OperationMode);

Function arguments



Parameter

Variable Type

Description



$NI_FgenHandle

Object

The instrument handle you obtain from NI_Fgen_Initialize that identifies a particular instrument's session.



$ChannelName

String

Pass the channel name for which you want to configure a standard waveform.



$OperationMode

String

Pass the operation mode you want the signal generator to use.

Valid value(s):

· "CONTINUOUS"





Return parameters



Parameter

Variable Type

Description





Example(s):

NI_Fgen_ConfigureOperationMode($NI_FgenHandle, "0", "CONTINUOUS");





NI_Fgen_ConfigureOutputEnabled

Previous Top Next



* * *



NI_Fgen_ConfigureOutputEnabled



Usage:

NI_Fgen_ConfigureOutputEnabled($NI_FgenHandle, $ChannelName, $Enabled);



Description:

This function requires NI FGEN drivers to be installed on the system.

This function enables or disables the signal generator output.



Remarks:

· This function is tested with a NI PXI-5412 device.

· When there occurs an error during the execution of the low level NI-Fgen functions, Jabil Test will fail and return the error message.

· The function will verify if the given parameter exists, otherwise Jabil Test fails and returns the error message.



Result:

NI_Fgen_ConfigureOutputEnabled($NI_FgenHandle, $ChannelName, $Enabled);

Function arguments



Parameter

Variable Type

Description



$NI_FgenHandle

Object

The instrument handle you obtain from NI_Fgen_Initialize that identifies a particular instrument's session.



$ChannelName

String

Pass the channel name for which you want to enable or disable the output.



$Enabled

Boolean

Pass whether you want to enable or disable the output.





Return parameters



Parameter

Variable Type

Description





Example(s):

NI_Fgen_ConfigureOutputEnabled($NI_FgenHandle, "0", "true");





NI_Fgen_ConfigureOutputImpedance

Previous Top Next



* * *



NI_Fgen_ConfigureOutputImpedance



Usage:

NI_Fgen_ConfigureOutputImpedance($NI_FgenHandle, $ChannelName, $Impedance);



Description:

This function requires NI FGEN drivers to be installed on the system.

This function configures the output impedance for the channel you specify.



Remarks:

· This function is tested with a NI PXI-5412 device.

· When there occurs an error during the execution of the low level NI-Fgen functions, Jabil Test will fail and return the error message.

· The function will verify if the given parameter exists, otherwise Jabil Test fails and returns the error message.



Result:

NI_Fgen_ConfigureOutputImpedance($NI_FgenHandle, $ChannelName, $Impedance);

Function arguments



Parameter

Variable Type

Description



$NI_FgenHandle

Object

The instrument handle you obtain from NI_Fgen_Initialize that identifies a particular instrument's session.



$ChannelName

String

Pass the channel name for which you want to configure a standard waveform.



$Impedance

Float

Pass the impedance value that you want the signal generator to use.

Unit : ohm

Valid value(s) :

· 50 OHMS

· 75 OHMS





Return parameters



Parameter

Variable Type

Description





Example(s):

NI_Fgen_ConfigureOutputImpedance($NI_FgenHandle, "0", "75 OHMS");





NI_Fgen_ConfigureOutputMode

Previous Top Next



* * *



NI_Fgen_ConfigureOutputMode



Usage:

NI_Fgen_ConfigureOutputMode($NI_FgenHandle, $OutputMode);



Description:

This function requires NI FGEN drivers to be installed on the system.

This function configures the output mode of the signal generator. The output mode determines how the signal generator produces waveforms.



Remarks:

· This function is tested with a NI PXI-5412 device.

· When there occurs an error during the execution of the low level NI-Fgen functions, Jabil Test will fail and return the error message.

· The function will verify if the given parameter exists, otherwise Jabil Test fails and returns the error message.



Result:

NI_Fgen_ConfigureOutputMode($NI_FgenHandle, $OutputMode);

Function arguments



Parameter

Variable Type

Description



$NI_FgenHandle

Object

The instrument handle you obtain from NI_Fgen_Initialize that identifies a particular instrument's session.



$OutputMode

String

Specifies the output mode that you want the signal generator to use. The value you specify determines which functions and attributes you can use to configure the waveform the signal generator produces.

Valid values:

· "FUNC" (standard function output)

· "ARB" (arbitrary waveform output)

· "FREQ LIST" (frequency list output)

· "SCRIPT" (script output)

· "SEQ" (arbitrary sequence output)





Return parameters



Parameter

Variable Type

Description





Example(s):

NI_Fgen_ConfigureOutputMode($NI_FgenHandle, "FUNC");





NI_Fgen_ConfigureRefClockFrequency

Previous Top Next



* * *



NI_Fgen_ConfigureRefClockFrequency



Usage:

NI_Fgen_ConfigureRefClockFrequency($NI_FgenHandle, $RefClockFrequency);



Description:

This function requires NI FGEN drivers to be installed on the system.

This function configures the signal generator reference clock frequency. The signal generator uses the reference clock to derive frequencies and sample rates when generating waveforms.



Remarks:

· This function is tested with a NI PXI-5412 device.

· When there occurs an error during the execution of the low level NI-Fgen functions, Jabil Test will fail and return the error message.

· The function will verify if the given parameter exists, otherwise Jabil Test fails and returns the error message.

· The signal generator must not be in the generating state when you call this function.



Result:

NI_Fgen_ConfigureRefClockFrequency($NI_FgenHandle, $RefClockFrequency);

Function arguments



Parameter

Variable Type

Description



$NI_FgenHandle

Object

The instrument handle you obtain from NI_Fgen_Initialize that identifies a particular instrument's session.



$RefClockFrequency

Float

Pass the reference clock frequency .

Unit : Hz





Return parameters



Parameter

Variable Type

Description





Example(s):

NI_Fgen_ConfigureRefClockFrequency($NI_FgenHandle, 1000000.0);





NI_Fgen_ConfigureRefClockSource

Previous Top Next



* * *



NI_Fgen_ConfigureRefClockSource



Usage:

NI_Fgen_ConfigureRefClockSource($NI_FgenHandle, $RefClockSource);



Description:

This function requires NI FGEN drivers to be installed on the system.

This function configures the signal generator reference clock source. The signal generator uses the reference clock to derive frequencies and sample rates when generating waveforms.



Remarks:

· This function is tested with a NI PXI-5412 device.

· When there occurs an error during the execution of the low level NI-Fgen functions, Jabil Test will fail and return the error message.

· The function will verify if the given parameter exists, otherwise Jabil Test fails and returns the error message.



Result:

NI_Fgen_ConfigureRefClockSource($NI_FgenHandle, $RefClockSource);

Function arguments



Parameter

Variable Type

Description



$NI_FgenHandle

Object

The instrument handle you obtain from NI_Fgen_Initialize that identifies a particular instrument's session.



$RefClockSource

String

Pass the reference clock source that you want the signal generator to use.

Valid value(s) :

· "INTERNAL CLOCK" (Internal clock source)

· "EXTERNAL CLOCK" (External clock source)

· "RTSI CLOCK" (RTSI clock)

· "TTL7 LINE"

· "PXI 10MHZ CLOCK"

· "REF IN" (External clock source)

· "RTSI0"

· "RTSI1"

· "RTSI2"

· "RTSI3"

· "RTSI4"

· "RTSI5"

· "RTSI6"

· "RTSI7"

· "CLK IN" (CLK IN front panel connector)





Return parameters



Parameter

Variable Type

Description





Example(s):

NI_Fgen_ConfigureRefClockSource($NI_FgenHandle, "INTERNAL CLOCK");





NI_Fgen_ConfigureSampleRate

Previous Top Next



* * *



NI_Fgen_ConfigureSampleRate



Usage:

NI_Fgen_ConfigureSampleRate($NI_FgenHandle, $SampleRate);



Description:

This function requires NI FGEN drivers to be installed on the system.

This function configures the sample rate attribute, which determines the rate at which the signal generator produces arbitrary waveforms. When you configure the signal generator to produce an arbitrary sequence, this is the sample rate for all arbitrary waveforms in the sequence. You must set the output mode to arbitrary waveform output or arbitrary sequence output before calling this function.



Remarks:

· This function is tested with a NI PXI-5412 device.

· When there occurs an error during the execution of the low level NI-Fgen functions, Jabil Test will fail and return the error message.

· The function will verify if the given parameter exists, otherwise Jabil Test fails and returns the error message.

· The signal generator must not be in the generating state when you call this function.

· You must set the output mode to "ARB" or "SEQ" before calling this function.



Result:

NI_Fgen_ConfigureSampleRate($NI_FgenHandle, $SampleRate);

Function arguments



Parameter

Variable Type

Description



$NI_FgenHandle

Object

The instrument handle you obtain from NI_Fgen_Initialize that identifies a particular instrument's session.



$SampleRate

Float

Pass the sample rate at which you want the signal generator to generate arbitrary waveforms.

Unit : S/s





Return parameters



Parameter

Variable Type

Description





Example(s):

NI_Fgen_ConfigureSampleRate($NI_FgenHandle, 40000000.0);





NI_Fgen_ConfigureStandardWaveform

Previous Top Next



* * *



NI_Fgen_ConfigureStandardWaveform



Usage:

NI_Fgen_ConfigureStandardWaveform($NI_FgenHandle, $ChannelName, $WaveForm, $Amplitude, $DC_Offset, $Frequency, $StartPhase);



Description:

This function requires NI FGEN drivers to be installed on the system.

This function configures the attributes of the signal generator that affect standard waveform generation. These attributes are the waveform, amplitude, DC offset, frequency and start phase. The output mode must be set to standard function output with the function NI_Fgen_ConfigureOutputMode.



Remarks:

· This function is tested with a NI PXI-5412 device.

· When there occurs an error during the execution of the low level NI-Fgen functions, Jabil Test will fail and return the error message.

· The function will verify if the given parameter exists, otherwise Jabil Test fails and returns the error message.

· The signal generator must not be in the generating state when you call this function.

· You must set the output mode to standard function output before calling this function with the function NI_Fgen_ConfigureOutputMode.



Result:

NI_Fgen_ConfigureStandardWaveform($NI_FgenHandle, $ChannelName, $WaveForm, $Amplitude, $DC_Offset, $Frequency, $StartPhase);

Function arguments



Parameter

Variable Type

Description



$NI_FgenHandle

Object

The instrument handle you obtain from NI_Fgen_Initialize that identifies a particular instrument's session.



$ChannelName

String

Pass the channel name for which you want to configure a standard waveform.



$WaveForm

String

Pass the standard waveform that you want the signal generator to produce.

Valid values:

· "SINE" (Sinusoid waveform)

· "SQUARE" (Square waveform)

· "TRIANGLE" (Triangle waveform)

· "RAMP UP" (Positive ramp waveform)

· "RAMP DOWN" (Negative ramp waveform)

· "DC" (Constant voltage)

· "NOISE" (White noise)

· "USER" (User-defined waveform as defined with NI_Fgen_DefineUserStandardWaveform)



$Amplitude

Float

Pass the amplitude of the standard waveform that you want the signal generator to produce. This value is the amplitude at the output terminal. For example, to produce a waveform ranging from –5.00 V to +5.00 V, set the amplitude to 10.00 V.

Unit : Vpk-pk



$DC_Offset

Float

Pass the DC offset of the standard waveform that you want the signal generator to produce. This value is the offset at the output terminal. The value is the offset from ground to the center of the waveform you specify with the waveform parameter.

Unit : V



$Frequency

Float

Pass the frequency of the standard waveform that you want the signal generator to produce.

Unit : Hz



$StartPhase

Float

Pass the horizontal offset of the standard waveform you want the signal generator to produce. Specify this attribute in degrees of one waveform cycle. A start phase of 180 degrees means output generation begins halfway through the waveform. A start phase of 360 degrees offsets the output by an entire waveform cycle, which is identical to a start phase of 0 degrees.

Unit : degrees of one cycle





Return parameters



Parameter

Variable Type

Description





Example(s):

NI_Fgen_ConfigureStandardWaveform($NI_FgenHandle, "0", "sine", 1.0, 0.0, 1000.0, 0.0);





NI_Fgen_ConfigureTriggerMode

Previous Top Next



* * *



NI_Fgen_ConfigureTriggerMode



Usage:

NI_Fgen_ConfigureTriggerMode($NI_FgenHandle, $ChannelName, $TriggerMode);



Description:

This function requires NI FGEN drivers to be installed on the system.

This function sets the trigger mode.

Supported trigger modes are:

· Single Trigger mode : The waveform that you describe in the sequence list generates only once by going through the entire staging list. Only one trigger is required to start the waveform generation. You can use single trigger mode with the output mode in any mode. After a trigger is received, the waveform generation starts from the first stage and continues through to the last stage.

· Continuous Trigger mode : The waveform that you describe in the staging list generates infinitely by repeatedly cycling through the staging list. After a trigger is received, the waveform generation starts from the first stage and continues through to the last stage. After the last stage is completed, the waveform generation loops back to the start of the first stage and continues until it is stopped. Only one trigger is required to start the waveform generation.

· Stepped Trigger mode : After a start trigger is received, the waveform described by the first stage generates. Then, the device waits for the next trigger signal. On the next trigger, the waveform described by the second stage generates, and so on. Once the staging list is exhausted, the waveform generation returns to the first stage and continues to repeat the cycle.

· Burst Trigger mode : After a start trigger is received, the waveform described by the first stage generates until another trigger is received. At the next trigger, the buffer of the previous stage completes, and then the waveform described by the second stage generates. Once the staging list is exhausted, the waveform generation returns to the first stage and continues to repeat the cycle. In Frequency List mode, the duration instruction is ignored, and the trigger switches the frequency to the next frequency in the list.



Remarks:

· This function is tested with a NI PXI-5412 device.

· When there occurs an error during the execution of the low level NI-Fgen functions, Jabil Test will fail and return the error message.

· The function will verify if the given parameter exists, otherwise Jabil Test fails and returns the error message.



Result:

NI_Fgen_ConfigureTriggerMode($NI_FgenHandle, $ChannelName, $TriggerMode);

Function arguments



Parameter

Variable Type

Description



$NI_FgenHandle

Object

The instrument handle you obtain from NI_Fgen_Initialize that identifies a particular instrument's session.



$ChannelName

String

Pass the channel name for which you want to configure a standard waveform.



$TriggerMode

String

Pass the trigger mode.

Valid value(s) :

· "SINGLE"

· "CONTINUOUS"

· "STEPPED"

· "BURST"





Return parameters



Parameter

Variable Type

Description





Example(s):

NI_Fgen_ConfigureTriggerMode($NI_FgenHandle, "0", "CONTINUOUS");





NI_Fgen_ConfigureTriggerSource

Previous Top Next



* * *



NI_Fgen_ConfigureTriggerSource



Usage:

NI_Fgen_ConfigureTriggerSource($NI_FgenHandle, $ChannelName, $TriggerSource);



Description:

This function requires NI FGEN drivers to be installed on the system.

This function configures the trigger source. The signal generator responds to a trigger depending on the operation mode in which the signal generator is operating.



Remarks:

· This function is tested with a NI PXI-5412 device.

· When there occurs an error during the execution of the low level NI-Fgen functions, Jabil Test will fail and return the error message.

· The function will verify if the given parameter exists, otherwise Jabil Test fails and returns the error message.

· The signal generator must not be in the generating state when you call this function.



Result:

NI_Fgen_ConfigureTriggerSource($NI_FgenHandle, $ChannelName, $TriggerSource);

Function arguments



Parameter

Variable Type

Description



$NI_FgenHandle

Object

The instrument handle you obtain from NI_Fgen_Initialize that identifies a particular instrument's session.



$ChannelName

String

Pass the channel name for which you want to configure a standard waveform.



$TriggerSource

String

Controls which trigger source the signal generator uses.

Valid value(s) :

· "IMMEDIATE"

· "EXTERNAL"

· "SOFTWARE TRIG"

· "PXI STAR"

· "RTSI 0"

· "RTSI 1"

· "RTSI 2"

· "RTSI 3"

· "RTSI 4"

· "RTSI 5"

· "RTSI 6"

· "RTSI 7"

· "TTL0"

· "TTL1"

· "TTL2"

· "TTL3"

· "TTL4"

· "TTL5"

· "TTL6"

· "PFI 0"

· "PFI 1"

· "PFI 2"

· "PFI 3"





Return parameters



Parameter

Variable Type

Description





Example(s):

NI_Fgen_ConfigureTriggerSource($NI_FgenHandle, "0", "IMMEDIATE");





NI_Fgen_ConfigureUpdateClockSource

Previous Top Next



* * *



NI_Fgen_ConfigureUpdateClockSource



Usage:

NI_Fgen_ConfigureUpdateClockSource($NI_FgenHandle, $UpdateClockSource);



Description:

This function requires NI FGEN drivers to be installed on the system.

This function sets the source of the update clock of the signal generator. The source can be internal or external.



Remarks:

· This function is tested with a NI PXI-5412 device.

· When there occurs an error during the execution of the low level NI-Fgen functions, Jabil Test will fail and return the error message.

· The function will verify if the given parameter exists, otherwise Jabil Test fails and returns the error message.



Result:

NI_Fgen_ConfigureUpdateClockSource($NI_FgenHandle, $UpdateClockSource);

Function arguments



Parameter

Variable Type

Description



$NI_FgenHandle

Object

The instrument handle you obtain from NI_Fgen_Initialize that identifies a particular instrument's session.



$UpdateClockSource

String

Specifies the update clock source. Possible values:

· "EXTERNAL CLOCK"

· "INTERNAL CLOCK"

· "PXI STAR"

· "RTSI0"

· "RTSI1"

· "RTSI2"

· "RTSI3"

· "RTSI4"

· "RTSI5"

· "RTSI6"

· "RTSI7"

· "CLK IN"

· "DDC CLOCK IN"





Return parameters



Parameter

Variable Type

Description





Example(s):

$UpdateClockSource = New("String", "INTERNAL CLOCK");

NI_Fgen_ConfigureUpdateClockSource($NI_FgenHandle, $UpdateClockSource);





NI_Fgen_CreateWaveformFromFileF64

Previous Top Next



* * *



NI_Fgen_CreateWaveformFromFileF64



Usage:

$WaveformHandle = NI_Fgen_CreateWaveformFromFileF64($NI_FgenHandle, $ChannelName, $WfmFile, $ByteOrder);



Description:

This function requires NI FGEN drivers to be installed on the system.

This function takes the F64 (floating point double) data from the specified file and creates an onboard waveform for use in Arbitrary Waveform mode or Arbitrary Sequence mode. The waveform handle returned can be used later for setting the active waveform, changing the data in the waveform, building sequences of waveforms or even deleting the waveform when it is no longer needed.



Remarks:

· This function is tested with a NI PXI-5412 device.

· When there occurs an error during the execution of the low level NI-Fgen functions, Jabil Test will fail and return the error message.

· The function will verify if the given parameter exists, otherwise Jabil Test fails and returns the error message.



Result:

$WaveformHandle = NI_Fgen_CreateWaveformFromFileF64($NI_FgenHandle, $ChannelName, $WfmFile, $ByteOrder);

Function arguments



Parameter

Variable Type

Description



$NI_FgenHandle

Object

The instrument handle you obtain from NI_Fgen_Initialize that identifies a particular instrument's session.



$ChannelName

String

Pass the channel name for which you want to create a waveform.



$WfmFile

String

The full path and name of the file where the waveform data resides.



$ByteOrder

String

Specifies the byte order of the data in the file. Big Endian and Little Endian refer to the way data is stored in memory, which can differ on different processors.

Valid value(s) :

· "BIG ENDIAN"

· "LITTLE ENDIAN"





Return parameters



Parameter

Variable Type

Description



$WaveformHandle

Integer

The handle that identifies the new waveform. This handle is used later when referring to this waveform.





Example(s):

$WaveformHandle = NI_Fgen_CreateWaveformFromFileF64($NI_FgenHandle, "0", "C:\\work\\NI Signal Generator Functions\\sine.bin", "BIG ENDIAN");





NI_Fgen_CreateWaveformFromFileHWS

Previous Top Next



* * *



NI_Fgen_CreateWaveformFromFileHWS



Usage:

$WaveformHandle = NI_Fgen_CreateWaveformFromFileHWS($NI_FgenHandle, $ChannelName, $HwsFile, $UseRateFromWaveform, $UseGainOffsetFromWaveform);



Description:

This function requires NI FGEN drivers to be installed on the system.

This function takes the waveform data from the specified HWS (Hierarchical Waveform Storage) file and creates an onboard waveform for use in Arbitrary Waveform mode or Arbitrary Sequence mode. The waveform handle returned by the function can be used later for setting the active waveform, changing the data in the waveform, building sequences of waveforms or even deleting the waveform when it is no longer needed. When the Analog Waveform Editor saves data in an HWS file, it also stores the rate, gain and offset with the data. If the Use Rate from Waveform and Use Gain and Offset from Waveform inputs are set to True, this function will also set those properties on NI-FGEN.



Remarks:

· This function is tested with a NI PXI-5412 device.

· When there occurs an error during the execution of the low level NI-Fgen functions, Jabil Test will fail and return the error message.

· The function will verify if the given parameter exists, otherwise Jabil Test fails and returns the error message.

· If you choose to have this function set the gain and offset properties for you, you should NOT use the niFgen Configure Arbitrary Waveform or niFgen Configure Arbitrary Sequence functions, as they also set the gain and offset, thereby overriding the values set by this function. Instead, use the Arbitrary Waveform Handle or Arbitrary Sequence Handle attributes in the niFgen property node.

· If you set the Use Rate from Waveform input to True and if Onboard Signal Processing (OSP) is enabled, the 'rate' from the waveform is interpreted as the data rate, and FGEN sets the data rate attribute for you. In all other cases, it is interpreted as the sample rate, and FGEN sets the sample rate attribute for you.

· HWS files may contain I16 or DBL data (depending on how it was saved). This function will automatically adapt to either data type. If the file contains DBL data, it must be between -1.0 and +1.0. Check the "Scale Data to +/- 1V" option in the Analog Waveform Editor to ensure your data is between -1.0 and +1.0.



Result:

$WaveformHandle = NI_Fgen_CreateWaveformFromFileHWS($NI_FgenHandle, $ChannelName, $HwsFile, $UseRateFromWaveform, $UseGainOffsetFromWaveform);

Function arguments



Parameter

Variable Type

Description



$NI_FgenHandle

Object

The instrument handle you obtain from NI_Fgen_Initialize that identifies a particular instrument's session.



$ChannelName

String

Pass the channel name for which you want to create a waveform.



$WfmFile

String

The full path and name of the file where the waveform data resides.



$UseRateFromWaveform

Boolean

If you set the Use Rate from Waveform input to True and if Onboard Signal Processing (OSP) is enabled, the 'rate' from the waveform is interpreted as the data rate, and FGEN sets the data rate attribute for you. In all other cases, it is interpreted as the sample rate, and FGEN sets the sample rate attribute for you.

Valid value(s) :

· "TRUE"

· "FALSE"



$UseGainOffsetFromWaveform

Boolean

If this input is set to true, NI-FGEN retrieves the gain and offset values from the specified HWS file and applies them to the NI-FGEN driver.

Valid value(s) :

· "TRUE"

· "FALSE"





Return parameters



Parameter

Variable Type

Description



$WaveformHandle

Integer

The handle that identifies the new waveform. This handle is used later when referring to this waveform.





Example(s):

$WaveformHandle = NI_Fgen_CreateWaveformFromFileHWS($NI_FgenHandle, "0", "C:\\work\\NI Signal Generator Functions\\Sine2Volts40MSs_1000.hws", "TRUE", "TRUE");





NI_Fgen_CreateWaveformFromFileI16

Previous Top Next



* * *



NI_Fgen_CreateWaveformFromFileI16



Usage:

$WaveformHandle = NI_Fgen_CreateWaveformFromFileI16($NI_FgenHandle, $ChannelName, $WfmFile, $ByteOrder);



Description:

This function requires NI FGEN drivers to be installed on the system.

This function takes the binary I16 data from the specified file and creates an onboard waveform for use in Arbitrary Waveform mode or Arbitrary Sequence mode. The waveform handle returned can be used later for setting the active waveform, changing the data in the waveform, building sequences of waveforms or even deleting the waveform when it is no longer needed. You must set the output mode to arbitrary waveform output or arbitrary sequence output before calling this function. The i16 data (values between -32768 and +32767) is assumed to represent -1 to +1 volts. Use the Gain attribute to generate different voltage outputs.



Remarks:

· This function is tested with a NI PXI-5412 device.

· When there occurs an error during the execution of the low level NI-Fgen functions, Jabil Test will fail and return the error message.

· The function will verify if the given parameter exists, otherwise Jabil Test fails and returns the error message.



Result:

$WaveformHandle = NI_Fgen_CreateWaveformFromFileI16($NI_FgenHandle, $ChannelName, $WfmFile, $ByteOrder);

Function arguments



Parameter

Variable Type

Description



$NI_FgenHandle

Object

The instrument handle you obtain from NI_Fgen_Initialize that identifies a particular instrument's session.



$ChannelName

String

Pass the channel name for which you want to create a waveform.



$WfmFile

String

The full path and name of the file where the waveform data resides.



$ByteOrder

String

Specifies the byte order of the data in the file. Big Endian and Little Endian refer to the way data is stored in memory, which can differ on different processors.

Valid value(s) :

· "BIG ENDIAN"

· "LITTLE ENDIAN"





Return parameters



Parameter

Variable Type

Description



$WaveformHandle

Integer

The handle that identifies the new waveform. This handle is used later when referring to this waveform.





Example(s):

$WaveformHandle = NI_Fgen_CreateWaveformFromFileI16($NI_FgenHandle, "0", "C:\\work\\NI Signal Generator Functions\\sine.bin", "BIG ENDIAN");





NI_Fgen_DefineUserStandardWaveform

Previous Top Next



* * *



NI_Fgen_DefineUserStandardWaveform



Usage:

NI_Fgen_DefineUserStandardWaveform($NI_FgenHandle, $ChannelName, $waveformSize, $waveformDataArray);



Description:

This function requires NI FGEN drivers to be installed on the system.

This function defines a user waveform for either standard function output or frequency list output.

To select the waveform, set the waveform parameter to user with either NI_Fgen_ConfigureStandardWaveform or NI_Fgen_CreateFreqList.

The waveform data must be scaled between -1.0 and 1.0. Use the amplitude parameter to generate different output voltages.



Remarks:

· This function is tested with a NI PXI-5412 device.

· When there occurs an error during the execution of the low level NI-Fgen functions, Jabil Test will fail and return the error message.

· The function will verify if the given parameter exists, otherwise Jabil Test fails and returns the error message.

· You must set outputMode to func or frequency list using NI_Fgen_ConfigureOutputMode before calling this function.



Result:

NI_Fgen_DefineUserStandardWaveform($NI_FgenHandle, $ChannelName, $waveformSize, $waveformDataArray);

Function arguments



Parameter

Variable Type

Description



$NI_FgenHandle

Object

The instrument handle you obtain from NI_Fgen_Initialize that identifies a particular instrument's session.



$ChannelName

String

Pass the channel name for which you want to configure an arbitrary sequence.



$waveformSize

Integer

Pass the size of the arbitrary waveform you want to create.



$waveformDataArray

Array

Specify the array of data you want to use for the new arbitrary waveform. The array must have at least as many elements as the value that you specify in waveformSize.

You must normalize the data points in the array to be between –1.00 and +1.00.





Return parameters



Parameter

Variable Type

Description





Example(s):

$ChannelName = New("String", "0");

$waveformSize = New("Integer", 1000);

$waveformDataArray = ArraySimulateWaveFormData(11000,0,10,50000,25000,0);





NI_Fgen_DefineUserStandardWaveform($NI_FgenHandle, $ChannelName, $waveformSize, $waveformDataArray);





NI_Fgen_Disable

Previous Top Next



* * *



NI_Fgen_Disable



Usage:

NI_Fgen_Disable($NI_FgenHandle);



Description:

This function requires NI FGEN drivers to be installed on the system.

This function places the instrument in a quiescent state where it has minimal or no impact on the system to which it is connected.



Remarks:

· This function is tested with a NI PXI-5412 device.

· When there occurs an error during the execution of the low level NI-Fgen functions, Jabil Test will fail and return the error message.

· The function will verify if the given parameter exists, otherwise Jabil Test fails and returns the error message.



Result:

NI_Fgen_Disable($NI_FgenHandle);

Function arguments



Parameter

Variable Type

Description



$NI_FgenHandle

Object

The instrument handle you obtain from NI_Fgen_Initialize that identifies a particular instrument's session.





Return parameters



Parameter

Variable Type

Description





Example(s):

NI_Fgen_Disable($NI_FgenHandle);





NI_Fgen_DisableAnalogFilter



Previous Top Next



* * *



NI_Fgen_DisableAnalogFilter



Usage:

NI_Fgen_DisableAnalogFilter($NI_FgenHandle, $ChannelName);



Description:

This function requires NI FGEN drivers to be installed on the system.

This function disables the analog filter.



Remarks:

· This function is tested with a NI PXI-5412 device.

· When there occurs an error during the execution of the low level NI-Fgen functions, Jabil Test will fail and return the error message.

· The function will verify if the given parameter exists, otherwise Jabil Test fails and returns the error message.



Result:

NI_Fgen_DisableAnalogFilter($NI_FgenHandle, $ChannelName);

Function arguments



Parameter

Variable Type

Description



$NI_FgenHandle

Object

The instrument handle you obtain from NI_Fgen_Initialize that identifies a particular instrument's session.



$ChannelName

String

Pass the channel name for which you want to disable the analog filter.





Return parameters



Parameter

Variable Type

Description





Example(s):

NI_Fgen_DisableAnalogFilter($NI_FgenHandle, "0");





NI_Fgen_DisableDigitalFilter



Previous Top Next



* * *



NI_Fgen_DisableDigitalFilter



Usage:

NI_Fgen_DisableDigitalFilter($NI_FgenHandle, $ChannelName);



Description:

This function requires NI FGEN drivers to be installed on the system.

This function disables the digital filter.



Remarks:

· This function is tested with a NI PXI-5412 device.

· When there occurs an error during the execution of the low level NI-Fgen functions, Jabil Test will fail and return the error message.

· The function will verify if the given parameter exists, otherwise Jabil Test fails and returns the error message.



Result:

NI_Fgen_DisableDigitalFilter($NI_FgenHandle, $ChannelName);

Function arguments



Parameter

Variable Type

Description



$NI_FgenHandle

Object

The instrument handle you obtain from NI_Fgen_Initialize that identifies a particular instrument's session.



$ChannelName

String

Pass the channel name for which you want to disable the digital filter.





Return parameters



Parameter

Variable Type

Description





Example(s):

NI_Fgen_DisableDigitalFilter($NI_FgenHandle, "0");





NI_Fgen_DisableDigitalPatterning



Previous Top Next



* * *



NI_Fgen_DisableDigitalPatterning



Usage:

NI_Fgen_DisableDigitalPatterning($NI_FgenHandle, $ChannelName);



Description:

This function requires NI FGEN drivers to be installed on the system.

This function disables digital patterning on the signal generator.



Some NI signal generators support 16-bit digital pattern generation outputs at a digital connector. The digital pattern generation provides a digital representation of the waveforms generated on the analog connector of the device, and at the same rates as the analog signal.





Remarks:

· This function is tested with a NI PXI-5412 device.

· When there occurs an error during the execution of the low level NI-Fgen functions, Jabil Test will fail and return the error message.

· The function will verify if the given parameter exists, otherwise Jabil Test fails and returns the error message.



Result:

NI_Fgen_DisableDigitalPatterning($NI_FgenHandle, $ChannelName);

Function arguments



Parameter

Variable Type

Description



$NI_FgenHandle

Object

The instrument handle you obtain from NI_Fgen_Initialize that identifies a particular instrument's session.



$ChannelName

String

Pass the channel name for which you want to disable the digital pattern output.





Return parameters



Parameter

Variable Type

Description





Example(s):

NI_Fgen_DisableDigitalPatterning($NI_FgenHandle, "0");





NI_Fgen_EnableAnalogFilter



Previous Top Next



* * *



NI_Fgen_EnableAnalogFilter



Usage:

NI_Fgen_EnableAnalogFilter($NI_FgenHandle, $ChannelName, $filterCorrectionFrequency);



Description:

This function requires NI FGEN drivers to be installed on the system.

This function enables the analog filter. You can also specify the filter correction frequency of the analog filter.



Remarks:

· This function is tested with a NI PXI-5412 device.

· When there occurs an error during the execution of the low level NI-Fgen functions, Jabil Test will fail and return the error message.

· The function will verify if the given parameter exists, otherwise Jabil Test fails and returns the error message.



Result:

NI_Fgen_EnableAnalogFilter($NI_FgenHandle, $ChannelName, $CorrectionFrequency);

Function arguments



Parameter

Variable Type

Description



$NI_FgenHandle

Object

The instrument handle you obtain from NI_Fgen_Initialize that identifies a particular instrument's session.



$ChannelName

String

Pass the channel name for which you want to enable the analog filter.



$filterCorrectionFrequency

Float

Specifies the filter correction frequency of the analog filter. On the NI 5411 and NI 5431, NI-FGEN adjusts signal amplitude to compensate for the filter's attenuation at that frequency. To disable amplitude correction, set filterCorrectionFrequency to 0. For Standard Waveform Output, the filter correction frequency should typically be set to be the same as the frequency of the standard waveform.

Unit : Hz





Return parameters



Parameter

Variable Type

Description





Example(s):

NI_Fgen_EnableAnalogFilter($NI_FgenHandle, "0", 0.0);





NI_Fgen_EnableDigitalFilter



Previous Top Next



* * *



NI_Fgen_EnableDigitalFilter



Usage:

NI_Fgen_EnableDigitalFilter($NI_FgenHandle, $ChannelName);



Description:

This function requires NI FGEN drivers to be installed on the system.

This function enables the digital filter.



Remarks:

· This function is tested with a NI PXI-5412 device.

· When there occurs an error during the execution of the low level NI-Fgen functions, Jabil Test will fail and return the error message.

· The function will verify if the given parameter exists, otherwise Jabil Test fails and returns the error message.



Result:

NI_Fgen_EnableDigitalFilter($NI_FgenHandle, $ChannelName);

Function arguments



Parameter

Variable Type

Description



$NI_FgenHandle

Object

The instrument handle you obtain from NI_Fgen_Initialize that identifies a particular instrument's session.



$ChannelName

String

Pass the channel name for which you want to enable the digital filter.





Return parameters



Parameter

Variable Type

Description





Example(s):

NI_Fgen_EnableDigitalFilter($NI_FgenHandle, "0");





NI_Fgen_EnableDigitalPatterning



Previous Top Next



* * *



NI_Fgen_EnableDigitalPatterning



Usage:

NI_Fgen_EnableDigitalPatterning($NI_FgenHandle, $ChannelName);



Description:

This function requires NI FGEN drivers to be installed on the system.

This function enables digital patterning on the signal generator.



Some NI signal generators support 16-bit digital pattern generation outputs at a digital connector. The digital pattern generation provides a digital representation of the waveforms generated on the analog connector of the device, and at the same rates as the analog signal.





Remarks:

· This function is tested with a NI PXI-5412 device.

· When there occurs an error during the execution of the low level NI-Fgen functions, Jabil Test will fail and return the error message.

· The function will verify if the given parameter exists, otherwise Jabil Test fails and returns the error message.



Result:

NI_Fgen_EnableDigitalPatterning($NI_FgenHandle, $ChannelName);

Function arguments



Parameter

Variable Type

Description



$NI_FgenHandle

Object

The instrument handle you obtain from NI_Fgen_Initialize that identifies a particular instrument's session.



$ChannelName

String

Pass the channel name for which you want to enable the digital pattern output.





Return parameters



Parameter

Variable Type

Description





Example(s):

NI_Fgen_EnableDigitalPatterning($NI_FgenHandle, "0");





NI_Fgen_GetHardwareState

Previous Top Next



* * *



NI_Fgen_GetHardwareState



Usage:

($State, $StringState) = NI_Fgen_GetHardwareState($NI_FgenHandle);



Description:

This function requires NI FGEN drivers to be installed on the system.

This function returns the current hardware state of the device and, if the device is in the hardware error state, the current hardware error.



Remarks:

· This function is tested with a NI PXI-5412 device.

· When there occurs an error during the execution of the low level NI-Fgen functions, Jabil Test will fail and return the error message.

· The function will verify if the given parameter exists, otherwise Jabil Test fails and returns the error message.



Result:

($State, $StringState) = NI_Fgen_GetHardwareState($NI_FgenHandle);

Function arguments



Parameter

Variable Type

Description



$NI_FgenHandle

Object

The instrument handle you obtain from NI_Fgen_Initialize that identifies a particular instrument's session.





Return parameters



Parameter

Variable Type

Description



$State

Integer

Hardware state code.



$StringState

String

Hardware state string. Possible values:

· "DONE"

· "IDLE"

· "RUNNING"

· "WAITING FOR START TRIGGER"

· "HARDWARE ERROR"

· "UNKNOWN STATE"





Example(s):

($State, $StringState) = NI_Fgen_GetHardwareState($NI_FgenHandle);





NI_Fgen_GetRevision

Previous Top Next



* * *



NI_Fgen_GetRevision



Usage:

($instrumentDriverRevision, $firmwareRevision) = NI_Fgen_GetRevision($NI_FgenHandle);



Description:

This function requires NI FGEN drivers to be installed on the system.

This function returns the revision numbers of the NI-FGEN and instrument firmware.



Remarks:

· This function is tested with a NI PXI-5412 device.

· When there occurs an error during the execution of the low level NI-Fgen functions, Jabil Test will fail and return the error message.

· The function will verify if the given parameter exists, otherwise Jabil Test fails and returns the error message.



Result:

($instrumentDriverRevision, $firmwareRevision) = NI_Fgen_GetRevision($Session);

Function arguments



Parameter

Variable Type

Description



$NI_FgenHandle

Object

The instrument handle you obtain from NI_Fgen_Initialize that identifies a particular instrument's session.





Return parameters



Parameter

Variable Type

Description



$instrumentDriverRevision

String

A string containing the NI-FGEN software revision numbers.



$firmwareRevision

String

A string containing the instrument firmware revision numbers.





Example(s):

($instrumentDriverRevision, $firmwareRevision) = NI_Fgen_GetRevision($NI_FgenHandle);





StringCompare($instrumentDriverRevision, "Driver: niFgen 2.4, Engine: IVI 2.04, Compiler: MSVC 7.10, Components: VISA-Spec 3.00");





StringCompare($firmwareRevision, "Not Available");





NI_Fgen_Initialize

Previous Top Next



* * *



NI_Fgen_Initialize



Usage:

$NI_FgenHandle = NI_Fgen_Initialize($DeviceName, $IdQuery, $ResetDevice);



Description:

This function requires NI FGEN drivers to be installed on the system.

This function opens a session to the specified device using the interface and address that you specify with the parameter $DeviceName. For Traditional NI-DAQ devices, the syntax is DAQ::n, where n is the device number assigned by MAX. For NI-DAQmx devices, the syntax is just the device name specified in MAX. Typical default names for NI-DAQmx devices in MAX are Dev1 or PXI1Slot1. You can rename an NI-DAQmx device by right-clicking on the name in MAX and entering a new name. When you pass the value "true" to the parameter $IdQuery, NI-FGEN driver will verify if he supports the device you want to initialize. Passing "true" to the parameter $ResetDevice will reset the device during initialization.



Remarks:

· This function is tested with a NI PXI-5412 device.

· When there occurs an error during the execution of the low level NI-Fgen functions, Jabil Test will fail and return the error message.

· The function will verify if the given parameter exists, otherwise Jabil Test fails and returns the error message.



Result:

$NI_FgenHandle = NI_Fgen_Initialize($DeviceName, $IdQuery, $ResetDevice);

Function arguments



Parameter

Variable Type

Description



$DeviceName

String

Specifies the resource name of the device to initialize. This value has to be the same as the name in the Measurement & Automation Explorer.



$IdQuery

Boolean

Specify whether you want NI-FGEN to perform an ID query.

When you set this parameter to true, NI-FGEN verifies that the device you initialize is a type that it supports. When you set this parameter to false, the function initializes the device without performing an ID query.

Valid values :

· True : Perform ID query.

· False : Do not perform ID query.



$ResetDevice

Boolean

Specify whether you want to reset the device during the initialization procedure.

Valid values :

· True : Reset the device.

· False : Do not reset the device.





Return parameters



Parameter

Variable Type

Description



$NI_FgenHandle

Object

Handle that you can use to identify the device in all the other NI_Fgen functions.





Example(s):

$NI_FgenHandle = NI_Fgen_Initialize("Dev4", "true", "true");





NI_Fgen_InitiateGeneration

Previous Top Next



* * *



NI_Fgen_InitiateGeneration



Usage:

NI_Fgen_InitiateGeneration($NI_FgenHandle);



Description:

This function requires NI FGEN drivers to be installed on the system.

This function initiates signal generation.



Remarks:

· This function is tested with a NI PXI-5412 device.

· When there occurs an error during the execution of the low level NI-Fgen functions, Jabil Test will fail and return the error message.

· The function will verify if the given parameter exists, otherwise Jabil Test fails and returns the error message.



Result:

NI_Fgen_InitiateGeneration($NI_FgenHandle);

Function arguments



Parameter

Variable Type

Description



$NI_FgenHandle

Object

The instrument handle you obtain from NI_Fgen_Initialize that identifies a particular instrument's session.





Return parameters



Parameter

Variable Type

Description





Example(s):

NI_Fgen_InitiateGeneration($NI_FgenHandle);





NI_Fgen_IsDone

Previous Top Next



* * *



NI_Fgen_IsDone



Usage:

$Done = NI_Fgen_IsDone($NI_FgenHandle);



Description:

This function requires NI FGEN drivers to be installed on the system.

This function determines whether the current generation has completed. This function sets the done parameter to be true if the session is in the Idle or Committed states.



Remarks:

· This function is tested with a NI PXI-5412 device.

· When there occurs an error during the execution of the low level NI-Fgen functions, Jabil Test will fail and return the error message.

· The function will verify if the given parameter exists, otherwise Jabil Test fails and returns the error message.



Result:

$Done = NI_Fgen_IsDone($NI_FgenHandle);

Function arguments



Parameter

Variable Type

Description



$NI_FgenHandle

Object

The instrument handle you obtain from NI_Fgen_Initialize that identifies a particular instrument's session.





Return parameters



Parameter

Variable Type

Description



$Done

Boolean

True if the generation has completed, false otherwise.





Example(s):

$Done = NI_Fgen_IsDone($NI_FgenHandle);





ScriptIf($Done, "GOTO", "FgenIsDonePassed", "FgenIsDoneFailed");

Label FgenIsDonePassed:

$resultInteger = New("Integer", 0);

RecordMeasurementWithLimits("NI_Fgen_IsDone", $resultInteger, "N/A", "true", 0, 0, "true");

return;

Label FgenIsDoneFailed:

$resultInteger = New("Integer", -1);

RecordMeasurementWithLimits("NI_Fgen_IsDone", $resultInteger, "N/A", "true", 0, 0, "true");





NI_Fgen_Reset

Previous Top Next



* * *



NI_Fgen_Reset



Usage:

NI_Fgen_Reset($NI_FgenHandle);



Description:

This function requires NI FGEN drivers to be installed on the system.

This function resets the instrument to a known state. This function aborts the generation, clears all routes, and resets session attributes to the default values. This function does not, however, commit the session properties or configure the device hardware to its default state.



Remarks:

· This function is tested with a NI PXI-5412 device.

· When there occurs an error during the execution of the low level NI-Fgen functions, Jabil Test will fail and return the error message.

· The function will verify if the given parameter exists, otherwise Jabil Test fails and returns the error message.



Result:

NI_Fgen_Reset($NI_FgenHandle);

Function arguments



Parameter

Variable Type

Description



$NI_FgenHandle

Object

The instrument handle you obtain from NI_Fgen_Initialize that identifies a particular instrument's session.





Return parameters



Parameter

Variable Type

Description





Example(s):

NI_Fgen_Reset($NI_FgenHandle);





NI_Fgen_ResetDevice

Previous Top Next



* * *



NI_Fgen_ResetDevice



Usage:

NI_Fgen_ResetDevice($NI_FgenHandle);



Description:

This function requires NI FGEN drivers to be installed on the system.

This function performs a hard reset on the device. Generation is stopped, all routes are released, external bi-directional terminals are tri-stated, FPGAs are reset, hardware is configured to its default state, and all session attributes are reset to their default states.



Remarks:

· This function is tested with a NI PXI-5412 device.

· When there occurs an error during the execution of the low level NI-Fgen functions, Jabil Test will fail and return the error message.

· The function will verify if the given parameter exists, otherwise Jabil Test fails and returns the error message.



Result:

NI_Fgen_ResetDevice($NI_FgenHandle);

Function arguments



Parameter

Variable Type

Description



$NI_FgenHandle

Object

The instrument handle you obtain from NI_Fgen_Initialize that identifies a particular instrument's session.





Return parameters



Parameter

Variable Type

Description





Example(s):

NI_Fgen_ResetDevice($NI_FgenHandle);





NI_Fgen_ResetWithDefaults

Previous Top Next



* * *



NI_Fgen_ResetWithDefaults



Usage:

NI_Fgen_ResetWithDefaults($NI_FgenHandle);



Description:

This function requires NI FGEN drivers to be installed on the system.

This function resets the instrument and applies initial user specified settings from the logical name that was used to initialize the session.



Remarks:

· This function is tested with a NI PXI-5412 device.

· When there occurs an error during the execution of the low level NI-Fgen functions, Jabil Test will fail and return the error message.

· The function will verify if the given parameter exists, otherwise Jabil Test fails and returns the error message.



Result:

NI_Fgen_ResetWithDefaults($NI_FgenHandle);

Function arguments



Parameter

Variable Type

Description



$NI_FgenHandle

Object

The instrument handle you obtain from NI_Fgen_Initialize that identifies a particular instrument's session.





Return parameters



Parameter

Variable Type

Description





Example(s):

NI_Fgen_ResetWithDefaults($NI_FgenHandle);





NI_Fgen_RouteSignalOut

Previous Top Next



* * *



NI_Fgen_RouteSignalOut



Usage:

NI_Fgen_RouteSignalOut($NI_FgenHandle, $ChannelName, $RouteSignalFrom, $RouteSignalTo);



Description:

This function requires NI FGEN drivers to be installed on the system.

This function routes various signals in the signal generator to the RTSI lines and front panel terminals.



Remarks:

· This function is tested with a NI PXI-5412 device.

· When there occurs an error during the execution of the low level NI-Fgen functions, Jabil Test will fail and return the error message.

· The function will verify if the given parameter exists, otherwise Jabil Test fails and returns the error message.

· The signal generator must not be in the Generating state when you call this function.



Result:

NI_Fgen_RouteSignalOut($NI_FgenHandle, $ChannelName, $RouteSignalFrom, $RouteSignalTo);

Function arguments



Parameter

Variable Type

Description



$NI_FgenHandle

Object

The instrument handle you obtain from NI_Fgen_Initialize that identifies a particular instrument's session.



$ChannelName

String

Pass the channel name for which you want to route a signal.



$RouteSignalFrom

String

Various signals can be routed out the RTSI lines. Possible values:

· "NONE" : Route nothing to the RTSI line. Clears the line.

· "MARKER" : The marker as specified by the markers parameter in NI_Fgen_CreateAdvancedArbSequence.

· "SYNC OUT" : The SYNC signal that normally appears on the SYNC_OUT front panel connector.

· "OUT START TRIGGER" : The trigger generated at the start of the sequence. Call NI_Fgen_ConfigureTriggerSource to receive this trigger.

· "BOARD CLOCK" : The signal generator board clock, which is 20 MHz for the NI PCI-5401/5411/5431. The NI PXI-5404 has a 20 MHz board clock, and the NI PXI-5421 has integer divisors of 100 MHz. The NI PXI-5401/5411/5431 does not support routing a Board Clock out.

· "SYNCHRONIZATION" : A synchronization strobe used to guarantee absolute synchronization between two or more signal generators. Call NI_Fgen_ConfigureSynchronization to receive the strobe.

· "SOFTWARE TRIGGER" : Software trigger

· "REF CLOCK OUT" : Reference clock out

· "PXI 10MHZ CLOCK" : PXI 10 MHz clock

· "PXI STAR" : PXI Star

· "PFI0" : PFI 0

· "RTSI0" : RTSI 0 or PXI_Trig 0

· "RTSI1" : RTSI 1 or PXI_Trig 1

· "RTSI2" : RTSI 2 or PXI_Trig 2

· "RTSI3" : RTSI 3 or PXI_Trig 3

· "RTSI4" : RTSI 4 or PXI_Trig 4

· "RTSI5" : RTSI 5 or PXI_Trig 5

· "RTSI6" : RTSI 6 or PXI_Trig 6

· "RTSI7" : RTSI 7 or PXI_Trig 7

· "REF CLK RTSI CLK" : RTSI clock

· "CLK OUT" : Clock out

· "UPDATE CLK" : Sample clock

· "PLL REFERENCE CLK" : PLL reference clock



$RouteSignalTo

String

The possible RTSI lines to which you can route a signal. Possible values:

"RTSI0" : RTSI 0 or PXI_Trig 0

"RTSI1" : RTSI 1 or PXI_Trig 1

"RTSI2" : RTSI 2 or PXI_Trig 2

"RTSI3" : RTSI 3 or PXI_Trig 3

"RTSI4" : RTSI 4 or PXI_Trig 4

"RTSI5" : RTSI 5 or PXI_Trig 5

"RTSI6" : RTSI 6 or PXI_Trig 6

"RTSI CLOCK" : RTSI clock

"REFERENCE CLK OUT" : Reference clock out

"PFI0" : PFI 0

"PFI1" : PFI 1

"PFI4" : PFI 4

"PFI5" : PFI 5

"PXI STAR" : PXI Star

"PXI 10MHZ CLK" : PXI 10 MHz clock





Return parameters



Parameter

Variable Type

Description





Example(s):

$ChannelName = New("String", "0");

$RouteSignalFrom = New("String", "MARKER");

$RouteSignalTo = New("String", "PFI0");

NI_Fgen_RouteSignalOut($NI_FgenHandle, $ChannelName, $RouteSignalFrom, $RouteSignalTo);





NI_Fgen_SelfTest

Previous Top Next



* * *



NI_Fgen_SelfTest



Usage:

($selfTestResult, $selfTestMessage) = NI_Fgen_SelfTest($NI_FgenHandle);



Description:

This function requires NI FGEN drivers to be installed on the system.

This function runs the instrument self-test routine and returns the test result(s).



Remarks:

· This function is tested with a NI PXI-5412 device.

· When there occurs an error during the execution of the low level NI-Fgen functions, Jabil Test will fail and return the error message.

· The function will verify if the given parameter exists, otherwise Jabil Test fails and returns the error message.



Result:

($selfTestResult, $selfTestMessage) = NI_Fgen_SelfTest($NI_FgenHandle);

Function arguments



Parameter

Variable Type

Description



$NI_FgenHandle

Object

The instrument handle you obtain from NI_Fgen_Initialize that identifies a particular instrument's session.





Return parameters



Parameter

Variable Type

Description



$selfTestResult

Integer

This control contains the value returned from the instrument self-test.



$selfTestMessage

String

Returns the self-test response string from the instrument.





Example(s):

($selfTestResult, $selfTestMessage) = NI_Fgen_SelfTest($NI_FgenHandle);





UpdateStatus($selfTestMessage);

NumericLimitTest($selfTestResult, 0, 0);





NI_Fgen_SendSoftwareTrigger

Previous Top Next



* * *



NI_Fgen_SendSoftwareTrigger



Usage:

NI_Fgen_SendSoftwareTrigger($NI_FgenHandle);



Description:

This function requires NI FGEN drivers to be installed on the system.

This function sends a command to trigger the signal generator.



Remarks:

· This function is tested with a NI PXI-5412 device.

· When there occurs an error during the execution of the low level NI-Fgen functions, Jabil Test will fail and return the error message.

· The function will verify if the given parameter exists, otherwise Jabil Test fails and returns the error message.



Result:

NI_Fgen_SendSoftwareTrigger($NI_FgenHandle);

Function arguments



Parameter

Variable Type

Description



$NI_FgenHandle

Object

The instrument handle you obtain from NI_Fgen_Initialize that identifies a particular instrument's session.





Return parameters



Parameter

Variable Type

Description





Example(s):

NI_Fgen_SendSoftwareTrigger($NI_FgenHandle);





NI_Fgen_WaitUntilDone

Previous Top Next



* * *



NI_Fgen_WaitUntilDone



Usage:

NI_Fgen_WaitUntilDone($NI_FgenHandle, $maxTime);



Description:

This function requires NI FGEN drivers to be installed on the system.

This function waits until the device is done generating or until the maximum time has expired.



Remarks:

· This function is tested with a NI PXI-5412 device.

· When there occurs an error during the execution of the low level NI-Fgen functions, Jabil Test will fail and return the error message.

· The function will verify if the given parameter exists, otherwise Jabil Test fails and returns the error message.



Result:

NI_Fgen_WaitUntilDone($NI_FgenHandle, $maxTime);

Function arguments



Parameter

Variable Type

Description



$NI_FgenHandle

Object

The instrument handle you obtain from NI_Fgen_Initialize that identifies a particular instrument's session.



$maxTime

Integer

The timeout value (in milliseconds).





Return parameters



Parameter

Variable Type

Description





Example(s):

NI_Fgen_WaitUntilDone($NI_FgenHandle, 1000);





RS_SMB_Close

Previous Top Next



* * *



RS_SMB_Close



Usage:

RS_SMB_Close($RS_SMB);



Description:

This function requires the installation of Rohde&Schwarz Signal Generator VXI plug&play instrument driver on the system.

Closes the I/O session to the instrument.



Result:

RS_SMB_Close($RS_SMB);

Function arguments



Parameter

Variable Type

Description



$RS_SMB

object

The object representing the instance of the Rohde & Schwarz SMB signal generator.





Return parameters



Parameter

Variable Type

Description





Example(s):

RS_SMB_Close($RS_SMB);





RS_SMB_Init

Previous Top Next



* * *



RS_SMB_Init



Usage:

$RS_SMB = RS_SMB_Init($ResourceName,$ID_Query,$Reset);



Description:

This function requires the installation of Rohde&Schwarz Signal Generator VXI plug&play instrument driver on the system.

This function performs the following initialization actions:

· Opens a session to the Default Resource Manager resource and a session to the specified device using the interface and address specified in the Resource_Name control.

· Performs an identification query on the Instrument.

· Resets the instrument to a known state.

· Sends initialization commands to the instrument that set any necessary programmatic variables such as Headers Off, Short Command form, and Data Transfer Binary to the state necessary for the operation of the instrument driver.

· Returns an Instrument Handle which is used to differentiate between different sessions of this instrument driver.

· Each time this function is invoked a Unique Session is opened. It is possible to have more than one session open for the same resource.



Result:

$RS_SMB = RS_SMB_Init($ResourceName,$ID_Query,$Reset);

Function arguments



Parameter

Variable Type

Description



$ResourceName

string

This control specifies the interface and address of the device that is to be initialized (Instrument Descriptor). The exact grammar to be used in this control is shown in the note below.

Based on the Instrument Descriptor, this operation establishes a communication session with a device. The grammar for the Instrument Descriptor is shown below. Optional parameters are shown in square brackets ([]).





Interface Grammar

GPIB GPIB[board]::primary address[::secondary address]

[::INSTR]

VXI-11 TCPIP::remote_host::INSTR

USB USB::<vendor Id>::<product Id>::<serial number>

The GPIB keyword is used for GPIB interface.

The TCPIP keyword is used for VXI-11 interface.

The USB keyword is used for USB interface, where

<vendor Id> is 0x0AAD for Rohde&Schwarz

<product Id> is 0x0054 for SMB100A

<serial number> is Serial number (on the rear panel of

the instrument). For example 100001.





Examples:

(1) GPIB - "GPIB::28::INSTR"

(2) VXI-11 - "TCPIP::192.168.1.33::INSTR"

(3) USB - "USB::0xAAD::0x0054::100001::INSTR"



$ID_Query

boolean

This control specifies if an ID Query is sent to the instrument during the initialization procedure.





boolean

This control specifies if the instrument is to be reset to its power-on settings during the initialization procedure.





Return parameters



Parameter

Variable Type

Description



$RS_SMB

object

The object representing the instance of the Rohde & Schwarz SMB signal generator.





Example(s):

$RS_SMB = RS_SMB_Init("USB0::0x0AAD::0x0054::103732::0::INSTR",true,true);





RS_SMB_Read

Previous Top Next



* * *



RS_SMB_Read



Usage:

$Data = RS_SMB_Read($RS_SMB,$NumberBytesToRead);



Description:

This function requires the installation of Rohde&Schwarz Signal Generator VXI plug&play instrument driver on the system.

This function reads data from the instrument's output buffer and returns it to the specified variable in memory.

If valid data is not available at the instrument's output buffer when this function is called the instrument will hang up and the function will not return until it times out. If the time-out is disabled this function will hang indefinitely and it may be necessary to reboot the computer to break out.





Result:

$Data = RS_SMB_Read($RS_SMB,$NumberBytesToRead);

Function arguments



Parameter

Variable Type

Description



$RS_SMB

object

The object representing the instance of the Rohde & Schwarz signal generator.



$NumberBytesToRead

integer

This variable contains the actual number of bytes read from the instrument. This is the value which is returned by the read function.

If the actual number of bytes read is less than the number of bytes specified in the Number Bytes To Read control then the output buffer has probably been emptied. If the read function fails and the number of bytes read is 0, the most probable cause for the failure is there was no data available at the instrument's output buffer.





Return parameters



Parameter

Variable Type

Description





Example(s):

RS_SMB_Write($RS_SMB,"*RST");





RS_SMB_Write($RS_SMB,"*IDN?");

$Data = RS_SMB_Read($RS_SMB,100);

UpdateStatus($Data);





RS_SMB_Reset

Previous Top Next



* * *



RS_SMB_Reset



Usage:

RS_SMB_Reset($RS_SMB);



Description:

This function requires the installation of Rohde&Schwarz Signal Generator VXI plug&play instrument driver on the system.

This function resets the instrument to a defined default state. The function has the same effect as pressing the PRESET key.





Equivalent remote-control command(s):

· *RST

· *CLS





Result:

RS_SMB_Reset($RS_SMB);

Function arguments



Parameter

Variable Type

Description



$RS_SMB

object

The object representing the instance of the Rohde & Schwarz signal generator.





Return parameters



Parameter

Variable Type

Description





Example(s):

RS_SMB_Reset($RS_SMB);





RS_SMB_SelfTest

Previous Top Next



* * *



RS_SMB_SelfTest



Usage:

($TestResultCode,$TestResultMessage) = RS_SMB_SelfTest($RS_SMB);



Description:

This function requires the installation of Rohde&Schwarz Signal Generator VXI plug&play instrument driver on the system.

This function runs the instrument's self test routine and returns the test result(s).





Result:

($TestResultCode,$TestResultMessage) = RS_SMB_SelfTest($RS_SMB);

Function arguments



Parameter

Variable Type

Description



$RS_SMB

object

The object representing the instance of the Rohde & Schwarz signal generator.





Return parameters



Parameter

Variable Type

Description





Example(s):

($TestResultCode,$TestResultMessage) = RS_SMB_SelfTest($RS_SMB);

UpdateStatus($TestResultCode);

UpdateStatus($TestResultMessage);





RS_SMB_SetKeyboardLock

Previous Top Next



* * *



RS_SMB_SetKeyboardLock



Usage:

RS_SMB_SetKeyboardLock($RS_SMB,$Lock);



Description:

This function requires the installation of Rohde&Schwarz Signal Generator VXI plug&play instrument driver on the system.

This function disables the front panel keyboard of the R&S Signal Generator including the LOCAL key, or enables it again.





Equivalent remote-control command(s):

· SYST:KLOC ON

· SYST:KLOC OFF





Result:

RS_SMB_SetKeyboardLock($RS_SMB,$Lock);

Function arguments



Parameter

Variable Type

Description



$RS_SMB

object

The object representing the instance of the Rohde & Schwarz signal generator.



$Lock

boolean

Enable/disable the keyboard.





Return parameters



Parameter

Variable Type

Description





Example(s):

RS_SMB_SetKeyboardLock($RS_SMB,true);

RS_SMB_SetKeyboardLock($RS_SMB,false);





RS_SMB_Write

Previous Top Next



* * *



RS_SMB_Write



Usage:

RS_SMB_Write($RS_SMB,$Data);



Description:

This function requires the installation of Rohde&Schwarz Signal Generator VXI plug&play instrument driver on the system.

This function writes commands and queries to the instrument to modify parameters and query device settings.





Result:

RS_SMB_Write($RS_SMB,$Data);

Function arguments



Parameter

Variable Type

Description



$RS_SMB

object

The object representing the instance of the Rohde & Schwarz signal generator.



$Data

string

The user can use this control to send common commands and queries to the instrument.





Return parameters



Parameter

Variable Type

Description





Example(s):

RS_SMB_Write($RS_SMB,"*RST");





RS_SMB_Write($RS_SMB,"*IDN?");

$Data = RS_SMB_Read($RS_SMB,100);

UpdateStatus($Data);





RS_SigGen_Close

Previous Top Next



* * *



RS_SigGen_Close



Usage:

RS_SigGen_Close($Handle_SigGen);



Description:

Closes the I/O session to the instrument. Driver methods and properties that access the instrument are not accessible after Close is called.



Function arguments



Parameter

Variable Type

Description



$Handle_SigGen

Object

Instrument handle returned by the RS_SigGen_Init function.





Return parameters



Parameter

Variable Type

Description



None

--

--





Example(s):

RS_SigGen_Close($Handle_SigGen);





RS_SigGen_CustomDigitalModulationEnabled

Previous Top Next



* * *



RS_SigGen_CustomDigitalModulationEnabled



Usage:

RS_SigGen_CustomDigitalModulationEnabled($Handle_SigGen,$Enabled);



Description:

This property enables or disables digital modulation. Switching on digital modulation turns off all the other digital standards on the same.

Function arguments



Parameter

Variable Type

Description



$Handle_SigGen

Object

The object representing the instance of the Rohde & Schwarz signal generator.



$Enabled

Boolean

Digital modulation on/off





Return parameters



Parameter

Variable Type

Description



None

--

--





Example(s):

RS_SigGen_CustomDigitalModulationEnabled($Handle_SigGen, true);





RS_SigGen_Init

Previous Top Next



* * *



RS_SigGen_Init



Usage:

$Handle_SigGen= RS_SigGen_Init($ResourceName,$ID_Query,$Reset,$optionsString);



Description:

This function performs the following initialization actions:

· Opens a session to the Default Resource Manager resource and a session to the specified device using the interface and address specified in the Resource_Name control.

· Performs an identification query on the Instrument.

· Resets the instrument to a known state.

· Returns an Instrument Handle which is used to differentiate between different sessions of this instrument driver.

· Each time this function is invoked a Unique Session is opened. It is possible to have more than one session open for the same resource.





Function arguments



Parameter

Variable Type

Description



$ResourceName

String

An IVI logical name or an instrument specific string that identifies the address of the instrument, such as a VISA resource descriptor string.





Examples:

(1) GPIB - "GPIB::28::INSTR"

(2) VXI-11 - "TCPIP::192.168.1.33::INSTR"

(3) USB - "USB::0xAAD::0x0054::100001::INSTR"



$ID_Query

Boolean

This control specifies if an ID Query is sent to the instrument during the initialization procedure.



$Reset



Boolean

This control specifies if the instrument is to be reset to its power-on settings during the initialization procedure.



$optionsString

String

The user can use the OptionsString parameter to specify the initial values of certain IVI inherent attributes for the session. The format of an assignment in the OptionsString parameteris 'Name=Value', where Name is one of: RangeCheck, QuerytInstrStatus, Cache, Simulate, RecordCoercions, InterchangeCheck,or DriverSetup. Value is either true or false except for DriverSetup. If the Options String parameter contains an assignment for the Driver Setup attribute, the Initialize function assumes that everything following 'DriverSetup=' is part of the assignment.





Return parameters



Parameter

Variable Type

Description



$Handle_SigGen

Object

The object representing the instance of the Rohde & Schwarz SMB signal generator.





Example(s):

$SigGenHandle = RS_SigGen_Init("GPIB::10::INSTR", true, true, "");





RS_SigGen_LoadCustomDigitalModulationDataList

Previous Top Next



* * *



RS_SigGen_LoadCustomDigitalModulationDataList



Usage:

RS_SigGen_LoadCustomDigitalModulationDataList($Handle_SigGen,$path);



Description:

Loads the values for the custom digital modulation base data source from a data list loaded onto the instrument at the given path. If a data list with the specified name does not yet exist, it is created. The file extension may be omitted. Only files with the file extension *.dm_iqd will be selected or created.

Function arguments



Parameter

Variable Type

Description



$Handle_SigGen

Object

The object representing the instance of the Rohde & Schwarz signal generator.



$path

String

path on instrument to the data list file. The file extension may be omitted.





Return parameters



Parameter

Variable Type

Description



None

--

--





Example(s):

RS_SigGen_LoadCustomDigitalModulationDataList($Handle_SigGen,"/hdd/RxFER");





RS_SigGen_OutputEnabled

Previous Top Next



* * *



RS_SigGen_OutputEnabled



Usage:

RS_SigGen_OutputEnabled($Handle_SigGen,$Output);



Description:

Enables or disables the RF output signal.

Function arguments



Parameter

Variable Type

Description



$Handle_SigGen

Object

The object representing the instance of the Rohde & Schwarz signal generator.



$Output

Boolean

This control specifies if an ID Query is sent to the instrument during the initialization procedure.





Return parameters



Parameter

Variable Type

Description



None

--

--





Example(s):

RS_SigGen_OutputEnabled($Handle_SigGen,true);





RS_SigGen_QuerySCPI

Previous Top Next



* * *



RS_SigGen_QuerySCPI



Usage:

$Response = RS_SigGen_QuerySCPI($Handle_SigGen,$Command,$DesiredCount);





Description:

Outputs the supplied SCPI to the instrument and returns the respond as a string

Function arguments



Parameter

Variable Type

Description



$Handle_SigGen

String

The object representing the instance of the Rohde & Schwarz signal generator.



$Command

String

SCPI Command



$DesiredCount

Integer

Number of Bytes to read back





Return parameters



Parameter

Variable Type

Description



$Response

String

Instrument Response





Example(s):

$Response = RS_SigGen_QuerySCPI($Handle_SigGen,$Command,$DesiredCount);





RS_SigGen_Reset

Previous Top Next



* * *



RS_SigGen_Reset



Usage:

RS_SigGen_Reset($Handle_SigGen);



Description:

Places the instrument in a known state and configures instrument options on which the IVI specific driver depends (for example, enabling/disabling headers). For an IEEE 488.2 instrument, Reset sends the command string *RST to the instrument.

Function arguments



Parameter

Variable Type

Description



$Handle_SigGen

Object

The object representing the instance of the Rohde & Schwarz signal generator.





Return parameters



Parameter

Variable Type

Description



None

--

--





Example(s):

RS_SigGen_Reset($Handle_SigGen);





RS_SigGen_SetAmplitude

Previous Top Next



* * *



RS_SigGen_SetAmplitude

Usage:

RS_SigGen_SetAmplitude($Handle_SigGen,$Amplitude);



Description:

Specifies the amplitude (power/level) of the RF output signal.

Function arguments



Parameter

Variable Type

Description



$Handle_SigGen

Object

The object representing the instance of the Rohde & Schwarz signal generator.



$Amplitude

Float

Amplitude (power/level) of the RF output signal





Return parameters



Parameter

Variable Type

Description



None

--

--





Example(s):

RS_SigGen_SetAmplitude($Handle_SigGen,-30);





RS_SigGen_SetCustomDigitalModulationCoding

Previous Top Next



* * *



RS_SigGen_SetCustomDigitalModulationCoding



Usage:

RS_SigGen_SetCustomDigitalModulationCoding($Handle_SigGen,$Coding);



Description:

This property selects the custom modulation coding.

Required Option(s): R&S SMU-B10/B11 and R&S SMU-B13

Function arguments



Parameter

Variable Type

Description



$Handle_SigGen

Object

The object representing the instance of the Rohde & Schwarz signal generator.



$Coding

String

Modulation coding. Not all options are valid for all modulation types. Valid values:

· OFF - Sets modulation coding to off.

· APCO25 - modulation coding to APCO25.

· APCO25FSK - Sets modulation coding to APCO25FSK.

· CDMA2000 - Sets modulation coding to CDMA2000.

· DIFF - Sets modulation coding to Differential.

· DPHS - Sets modulation coding to Phase Difference.

· DGRAY- Sets modulation coding to Difference + Gray.

· EDGE - Sets modulation coding to edge.

· GRAY - Sets modulation coding to gray.

· GSM - Sets modulation coding to GSM.

· ICO - Sets modulation coding to ICO.

· NADC - Sets modulation coding to NADC.

· PDC - Sets modulation coding to PDC.

· PHS - Sets modulation coding to PHS.

· TETRA - Sets modulation coding to TETRA.

· PWT - Sets modulation coding to PWT.

· TFTS - Sets modulation coding to TFTS.

· INMARSAT - Sets modulation coding to INMarsat.

· VDL - Sets modulation coding to VDL.

· WCDMA - Sets modulation coding to WCDMA.





Return parameters



Parameter

Variable Type

Description



None

--

--





Example(s):

RS_SigGen_SetCustomDigitalModulationCoding($Handle_SigGen,"VDL");





RS_SigGen_SetCustomDigitalModulationType

Previous Top Next



* * *



RS_SigGen_SetCustomDigitalModulationType



Usage:

RS_SigGen_SetCustomDigitalModulationType($Handle_SigGen,$Modulation);



Description:

This property selects the custom modulation type.

Required Option(s): R&S SMU-B10/B11 and R&S SMU-B13

Function arguments



Parameter

Variable Type

Description



$Handle_SigGen

Object

The object representing the instance of the Rohde & Schwarz signal generator.



$Modulation

String

Modulation type. Valid values:

· ASK = Selects modulation type ASK.

· BPSK = Selects modulation type BPSK.

· QPSK = Selects modulation type QPSK.

· QPSK45 = Selects modulation type QPSK 45deg Offset.

· OQPSK = Selects modulation type OQPSK.

· P4QPSK = Selects modulation type p/4-QPSK.

· P2DBPSK = Selects modulation type p/2-DBPSK.

· P4DQPSK = Selects modulation type p/4-DQPSK.

· P8D8PSK = Selects modulation type p/8-D8PSK.

· PSK8 = Selects modulation type 8PSK.

· P8EDGE = Selects modulation type 8PSKEDGE.

· QAM16 = Selects modulation type 16QAM.

· QAM32 = Selects modulation type 32QAM.

· QAM64 = Selects modulation type 64QAM.

· QAM128 = Selects modulation type 128QAM.

· QAM256 = Selects modulation type 256QAM.

· QAM1024 = Selects modulation type 1024QAM.

· MSK = Selects modulation type MSK.

· FSK2 = Selects modulation type 2FSK.

· FSK4 = Selects modulation type 4FSK.

· FSKVar = Selects modulation type Variable FSK.

· QAM16EDGE = Selects modulation type 16QAM Edge.

· QAM32EDGE = Selects modulation type 32 QAM Edge.

· QEDGE = Selects modulation type Q Edge.

· USER = Selects modulation type User.

· AQPSK = Selects modulation type AQPSK.





Return parameters



Parameter

Variable Type

Description



None

--

--





Example(s):

RS_SigGen_SetCustomDigitalModulationType($Handle_SigGen,"FSK2");





RS_SigGen_SetFrequency

Previous Top Next



* * *



RS_SigGen_SetFrequency

Usage:

RS_SigGen_SetFrequency($Handle_SigGen,$Frequency);



Description:

Specifies the frequency of the generated RF output signal.

Function arguments



Parameter

Variable Type

Description



$Handle_SigGen

Object

The object representing the instance of the Rohde & Schwarz signal generator.



$Frequency

Float

Frequency of the RF output signal





Return parameters



Parameter

Variable Type

Description



None

--

--





Example(s):

RS_SigGen_SetFrequency($Handle_SigGen,1000000);





RS_SigGen_WriteSCPI

Previous Top Next



* * *



RS_SigGen_WriteSCPI

Usage:

RS_SigGen_WriteSCPI($Handle_SigGen,$Command);



Description:

Writes raw string (SCPI command) to the instrument input.

Function arguments



Parameter

Variable Type

Description



$Handle_SigGen

String

The object representing the instance of the Rohde & Schwarz signal generator.



$Command

String

SCPI Command





Return parameters



Parameter

Variable Type

Description



None

--

--





Example(s):

RS_SigGen_WriteSCPI($SigGenHandle, "MMEM:CDIR '/hdd/RxFER'");





Supported Instruments

Previous Top Next



* * *



Supported Instruments



Current revision of instrument driver supports these instruments and firmwares:



Instrument

Supported Firmware

Remarks



SMU

2.10.111.189





SMATE

2.10.111.189





SMJ

2.10.111.189





AMU

2.10.111.189





SMBV

2.20.160.51

TESTED





Driver version





IVI-COM Driver Version 2.0.5.0





AVR31XX_Close

Previous Top Next



* * *



AVR31XX_Close

Usage:

AVR31XX_Close($Handle);

Description:

This function supports the Advantest R3131, R3132 and R3162 Spectrum Analyzers. The use the AVR31XX functions requires NI-VISA to be installed.

Closes the I/O session to the instrument.

Function Arguments



Parameter

Variable Type

Description



$Handle

Object

Handle of the instrument.





Return Parameters



Parameter

Variable Type

Description



None

None

None





AVR31XX_Init

Previous Top Next



* * *



AVR31XX_Init

Usage:

$Handle = AVR31XX_Init($IntrumentID,$Reset);

Description:

This function supports the Advantest R3131, R3132 and R3162 Spectrum Analyzers. The use the AVR31XX functions requires NI-VISA to be installed.



This function performs the following initialization actions:

1. Opens a session to the Default Resource Manager resource and a session

to the specified device using the interface and address specified in the

Resource_Name control.

2. Performs an identification query on the Instrument.

3. Resets the instrument to a known state.

4. Sends initialization commands to the instrument that set any necessary

programmatic variables such as Headers Off, Short Command form, and Data

Transfer Binary to the state necessary for the operation of the

instrument driver.

5. Returns an Instrument Handle which is used to differentiate between

different sessions of this instrument driver.

6. Each time this function is invoked a Unique Session is opened. It is

possible to have more than one session open for the same resource.





Function Arguments



Parameter

Variable Type

Description



$InstrumentID

String

This is a string that indicates the instrument interface as it is identified by NI-VISA. For instance "GPIB0::9" for GPIB or "ASR:0::1" for Serial Interfaces





Return Parameters



Parameter

Variable Type

Description



$Handle

Object

A handle to the instrument





AVR31XX_PeakSearch

Previous Top Next



* * *



AVR31XX_PeakSearch

Usage:

($DifferenceOfPositionMinMax,$DifferenceOfLevelMinMax) = AVR31XX_PeakSearch($Handle,$SearchType);

Description:

This function supports the Advantest R3131, R3132 and R3162 Spectrum Analyzers. The use the AVR31XX functions requires NI-VISA to be installed.

This function performs different types of peak marker search, see the parameter details for more information.

Function Arguments



Parameter

Variable Type

Description



$Handle

Object

A handle for the instrument, created by using the AVR31XX_Init function.



$SearchType

String

The search-type parameter has the following valid values:

"PeakSearch"

"NextPeak"

"NextPeakLeft"

"NextPeakRight"

"MinimumSearch"

"PeakMinMax"





Return Parameters



Parameter

Variable Type

Description



$DifferenceOfPositionMinMax

Double

Returns the difference of position between the highest peak and the lowest peak of the signal



$DifferenceOfLevelMinMax

Double

Returns the difference of level between the highest peak and the lowest peak of the signal





AVR31XX_SetFrequency

Previous Top Next



* * *



AVR31XX_SetFrequency

Usage:

AVR31XX_SetFrequency($Handle,$FrequencyType,$FrequencyHertz);

Description:

This function supports the Advantest R3131, R3132 and R3162 Spectrum Analyzers. The use the AVR31XX functions requires NI-VISA to be installed.

This function sets the starting, center, and stop frequency of the spectrum analyzer.

Function Arguments



Parameter

Variable Type

Description



$Handle

Object

A handle for the instrument, created by using the AVR31XX_Init function.



$FrequencyType

String

A string indicating the frequency to set. The valid values are:

· "CENTER"

· "START"

· "STOP"



$FrequencyHertz

Double

The value in Hertz to set the selected frequency





Return Parameters



Parameter

Variable Type

Description



None





AVR31XX_SetReferenceLevel

Previous Top Next



* * *



AVR31XX_SetReferenceLevel

Usage:

AVR31XX.SetReferenceLevel($Handle,$ReferenceLevel);

Description:

This function supports the Advantest R3131, R3132 and R3162 Spectrum Analyzers. The use the AVR31XX functions requires NI-VISA to be installed.

This function sets the reference level of th spectrum analyzer. It uses the current unit of measure that the instrument is set (default is dBm).

Function Arguments



Parameter

Variable Type

Description



$Handle

Object

A handle for the instrument, created by using the AVR31XX_Init function.



$ReferenceLevel

Double

The value for the reference level in the instruments current unit mode.





Return Parameters



Parameter

Variable Type

Description



None





AVR31XX_SetSpan

Previous Top Next



* * *



AVR31XX_SetSpan

Usage:

AVR31XX_SetSpan($Handle,$SpanType,$SpanHertz);

Description:

This function supports the Advantest R3131, R3132 and R3162 Spectrum Analyzers. The use the AVR31XX functions requires NI-VISA to be installed.

This function sets the overall frequency span of the Spectrum Analyzer

Function Arguments



Parameter

Variable Type

Description



$Handle

Object

A handle for the instrument, created by using the AVR31XX_Init function.



$SpanType

String

The type of span to set for the Spectrum Analyzer. Valid values are:

"MANUAL" = Sets the Span to the value passed in for the second parameter

"FULL"

"ZERO" = Sets the instrument to time domain mode

"LAST"



$SpanHertz

Double

If the $SpanType parameter is specified as "MANUAL", this parameter sets the frequency span of the instrument.





Return Parameters



Parameter

Variable Type

Description



None





AeroFlexDigitizer_Close

Previous Top Next



* * *





AeroFlexDigitizer_Close





Usage:





AeroFlexDigitizer_Close($handle);





Description:





This method closes and frees up all resources used by the Digitizer.

Function arguments



Parameter

Variable Type

Description



$handle

Object

The handle of the instrument returned from the AeroFlex Digitizer_Open function





Return parameters



Parameter

Variable Type

Description



none





Example(s):





AeroFlexDigitizer_Close($handle);





AeroFlexDigitizer_GetCenterFreqLOAboveMax

Previous Top Next



* * *





AeroFlexDigitizer_GetCenterFreqLOAboveMax





Usage:





$handle = AeroFlexDigitizer_GetCenterFreqLOAboveMax($handle, $CenterfrequencyLOAboveMax);





Note: These are advanced low level control function for the AeroFlex PXI RF Digitizer. It is recommended to use the AeroFlex Spectrum Analyzer_XXX function library for general measurements and testing. These functions are intended for custom test scenarios for expert users who require a finer level of control over the test equipment.





Description:

This method gets the maximum Center Frequency if LOPosition is set to afDigitizerDll_lopAbove.





Function arguments



Parameter

Variable Type

Description



$handle

Object

The handle of the instrument returned from the AeroFlex Digitizer open function





Return parameters



Parameter

Variable Type

Description



$CenterfrequencyLOAboveMax

Float

Center Frequency Number





Example(s):





AeroFlexDigitizer_GetCenterFreqLOAboveMax($handle,$CenterfrequencyLOAboveMax);





AeroFlexDigitizer_GetCenterFreqLOBelowMin

Previous Top Next



* * *





AeroFlexDigitizer_GetCenterFreqLOBelowMin





Usage:





$handle = AeroFlexDigitizer_GetCenterFreqLOBelowMin($handle, $CenterfrequencyLOAboveMin);





Note: These are advanced low level control function for the AeroFlex PXI RF Digitizer. It is recommended to use the AeroFlex Spectrum Analyzer_XXX function library for general measurements and testing. These functions are intended for custom test scenarios for expert users who require a finer level of control over the test equipment.





Description:

This method gets the minimum Center Frequency if LOPosition is set to afDigitizerDll_lopBelow.





Function arguments



Parameter

Variable Type

Description



$handle

Object

The handle of the instrument returned from the AeroFlex Digitizer open function





Return parameters



Parameter

Variable Type

Description



$CenterfrequencyLOAboveMin

Float

Minimum center frequency number





Example(s):





AeroFlexDigitizer_GetCenterFreqLOBelowMin($handle,$CenterfrequencyLOAboveMin);





AeroFlexDigitizer_GetCenterFrequency

Previous Top Next



* * *





AeroFlexDigitizer_GetCenterFrequency





Usage:





$handle = AeroFlexDigitizer_GetCenterFrequency($handle, $CenterFreq);





Note: These are advanced low level control function for the AeroFlex PXI RF Digitizer. It is recommended to use the AeroFlex Spectrum Analyzer_XXX function library for general measurements and testing. These functions are intended for custom test scenarios for expert users who require a finer level of control over the test equipment.





Description:

This method gets the center frequency (in Hz) of the active channel being used by the digitizer when in manual mode.

Note: It sets the AF303x to the specified center frequency and the synthesizer (for example AF301x) to the corresponding local oscillator frequency





Function arguments



Parameter

Variable Type

Description



$handle

Object

The handle of the instrument returned from the AeroFlex Digitizer open function





Return parameters



Parameter

Variable Type

Description



$CenterFreq

Float

Center Frequency Number





Example(s):





$CenterFreq = AeroFlexDigitizer_Set_CenterFrequency($handle);





AeroFlexDigitizer_GetFreqMax

Previous Top Next



* * *





AeroFlexDigitizer_GetFreqMax





Usage:





$FreqMax = AeroFlexDigitizer_GetFreqMax($handle);





Note: These are advanced low level control function for the AeroFlex PXI RF Digitizer. It is recommended to use the AeroFlex Spectrum Analyzer_XXX function library for general measurements and testing. These functions are intended for custom test scenarios for expert users who require a finer level of control over the test equipment.





Description:

This method gets the maximum center frequency (in Hz) of the digitizer.





Function arguments



Parameter

Variable Type

Description



$handle

Object

The handle of the instrument returned from the AeroFlex Digitizer open function





Return parameters



Parameter

Variable Type

Description



$FreqMax

Float

Max center frequency number





Example(s):





$FreqMax = AeroFlexDigitizer_GetFreqMax($handle);





AeroFlexDigitizer_GetFreqMin

Previous Top Next



* * *





AeroFlexDigitizer_GetFreqMin





Usage:





$FreqMin = AeroFlexDigitizer_GetFreqMin($handle);





Note: These are advanced low level control function for the AeroFlex PXI RF Digitizer. It is recommended to use the AeroFlex Spectrum Analyzer_XXX function library for general measurements and testing. These functions are intended for custom test scenarios for expert users who require users who require a finer level of control over the test equipment.





Description:

This method gets the minimum center frequency (in Hz) of the digitizer.





Function arguments



Parameter

Variable Type

Description



$handle

Object

The handle of the instrument returned from the AeroFlex Digitizer open function





Return parameters



Parameter

Variable Type

Description



$FreqMin

Float

Min center frequency number





Example(s):





$FreqMin = AeroFlexDigitizer_GetFreqMin($handle);





AeroFlexDigitizer_GetIFAttenuation

Previous Top Next



* * *





AeroFlexDigitizer_GetIFAttenuation

Usage:





$Attenuation = AeroFlexDigitizer_GetIFAttenuation($handle);





Note: These are advanced low level control function for the AeroFlex PXI RF Digitizer. It is recommended to use the AeroFlex Spectrum Analyzer_XXX function library for general measurements and testing. These functions are intended for custom test scenarios for expert users who require a finer level of control over the test equipment.





Description:

This method gets the IF Attenuation (in dB) of the active channel being used by the digitizer when in manual mode.

Function arguments



Parameter

Variable Type

Description



$handle

Object

The handle of the instrument returned from the AeroFlex Digitizer open function





Return parameters



Parameter

Variable Type

Description



$attenuation

Integer

IF attenuation value (0 to 35) in 1dB increments )





Example(s):





$Attenuation = AeroFlexDigitizer_GetIFAttenuation($handle);





AeroFlexDigitizer_GetIQADCOverload

Previous Top Next



* * *





AeroFlexDigitizer_GetIQADCOverload





Usage:





$adcoverload = AeroFlexDigitizer_GetIQADCOverload($handle);





Note: These are advanced low level control function for the AeroFlex PXI RF Digitizer. It is recommended to use the AeroFlex Spectrum Analyzer_XXX function library for general measurements and testing. These functions are intended for custom test scenarios for expert users who require a finer level of control over the test equipment.





Description:

This method gets the ADC Overload status.

Function arguments



Parameter

Variable Type

Description



$handle

Object

The handle of the instrument returned from the AeroFlex Digitizer open function





Return parameters



Parameter

Variable Type

Description



$adcoverload

Boolean

TRUE is no ADC overload and FALSE is ADC overload





Example(s):





$ADCOverload = AeroFlexDigitizer_GetIQADCOverload($handle);





AeroFlexDigitizer_GetIQCaptureSampleCount

Previous Top Next



* * *





AeroFlexDigitizer_GetIQCaptureSampleCount





Usage:





$IQCaptureSampleCount = AeroFlexDigitizer_GetIQCaptureSampleCount($handle);





Note: These are advanced low level control function for the AeroFlex PXI RF Digitizer. It is recommended to use the AeroFlex Spectrum Analyzer_XXX function library for general measurements and testing. These functions are intended for custom test scenarios for expert users who require a finer level of control over the test equipment.





Description:

This method gets the number of I and Q sample pairs that have been captured.

Note:

Following the use of Abort, afDigitzerDll_ciqeCompleted event will be issued but the CapturedSampleCount will be less than the numberOfIQSamples requested.

Function arguments



Parameter

Variable Type

Description



$handle

Object

The handle of the instrument returned from the AeroFlex Digitizer open function





Return parameters



Parameter

Variable Type

Description



$IQCaptureSampleCount

Integer

Number of IQ sample pairs





Example(s):





$SampleCount = AeroFlexDigitizer_GetIQCaptureSampleCount($handle);





AeroFlexDigitizer_GetRFAttenuation

Previous Top Next



* * *





AeroFlexDigitizer_GetRFAttenuation

Usage:





$RFAttenuation = AeroFlexDigitizer_GetRFAttenuation($handle);





Note: These are advanced low level control function for the AeroFlex PXI RF Digitizer. It is recommended to use the AeroFlex Spectrum Analyzer_XXX function library for general measurements and testing. These functions are intended for custom test scenarios for expert users who require a finer level of control over the test equipment.





Description:

This method gets the RF Attenuation (in dB) of the active channel being used by the digitizer when in manual mode.



Function arguments



Parameter

Variable Type

Description



$handle

Object

The handle of the instrument returned from the AeroFlex Digitizer open function





Return parameters



Parameter

Variable Type

Description



$RFattenuation

Integer

RF attenuation value in (db)





Example(s):





$Attenuation = AeroFlexDigitizer_GetRFAttenuation($handle);





AeroFlexDigitizer_GetRFInputLevel

Previous Top Next



* * *





AeroFlexDigitizer_GetRFInputLevel

Usage:





$InputLevel = AeroFlexDigitizer_GetRFInputLevel($handle);





Note: These are advanced low level control function for the AeroFlex PXI RF Digitizer. It is recommended to use the AeroFlex Spectrum Analyzer_XXX function library for general measurements and testing. These functions are intended for custom test scenarios for expert users who require a finer level of control over the test equipment.





Description:

This method gets the RF Input Level (in dBm) of the active channel being used by the digitizer when in manual mode

Function arguments



Parameter

Variable Type

Description



$handle

Object

The handle of the instrument returned from the AeroFlex Digitizer function





Return parameters



Parameter

Variable Type

Description



$inputlevel

Float

RF input level





Example(s):





$InputLevel = AeroFlexDigitizer_GetRFInputLevel($handle);





AeroFlexDigitizer_GetRFLevelCorrection

Previous Top Next



* * *





AeroFlexDigitizer_GetRFLevelCorrection





Usage:





$handle = AeroFlexDigitizer_GetRFLevelCorrection($handle, $RFLevelCorrection);





Note: These are advanced low level control function for the AeroFlex PXI RF Digitizer. It is recommended to use the AeroFlex Spectrum Analyzer_XXX function library for general measurements and testing. These functions are intended for custom test scenarios for expert users who require a finer level of control over the test equipment.





Description:

This method gets the level correction figure in dB that can be used in conjunction with IQ or IF data that has been captured by AF303x to calculate the power of the signal being applied to AF303x. This figure is only valid for the current hardware setting.

Notes:

To calculate the absolute power associated to a captured IQ data pair, perform the following calculation

Power (in dBm) = 10*log(I2 + Q2) + level correction figure

To calculate the absolute power associated with a series of IF data, the RMS value of that series has to be calculated. Once this has been computed, power can be computed as follows:

Power (in dBm) = 10 * log(RMS value of IF data series/maxIFvalue) + level correction figure + 3 dB

A frequency spectrum of the IQ data can be computed using an FFT. The "Get Power" function performs a FFT. It will return the power for a specified bin. The value of this power will be one for a full-scale tone. To calculate the power level associated with a tone within the FFT spectrum, the following steps are required.

Tone Power (in dBm) = Returned Power (in dBFS) + level correction figure

If using the afSpectrum Control to perform calibrated power measurements, the LevelCorrection property should be applied to the afSpectrum Control's LevelCal property, as follows:

· Capture the sample data

· Apply level correction figure.

· Use afSpectrum to perform calculations on the IQ data

Before using a proprietary FFT with the IQ or IF data, the user should first establish the scaling associated with a full-scale tone before computing power. The FFT and its associated windowing should be scaled to return a value of 0dB or 1 for a full-scale tone.





Function arguments



Parameter

Variable Type

Description



$handle

Object

The handle of the instrument returned from the AeroFlex Digitizer open function





Return parameters



Parameter

Variable Type

Description



$RFLevelCorrection

Float

level correction figure in db





Example(s):





AeroFlexDigitizer_GetRFLevelCorrection($handle,$RFLevelCorrection);





AeroFlexDigitizer_GetRFStepAttenuation

Previous Top Next



* * *





AeroFlexDigitizer_GetRFStepAttenuation





Usage:





$StepAttenuation = AeroFlexDigitizer_GetRFStepAttenuation($handle);





Note: These are advanced low level control function for the AeroFlex PXI RF Digitizer. It is recommended to use the AeroFlex Spectrum Analyzer_XXX function library for general measurements and testing. These functions are intended for custom test scenarios for expert users who require a finer level of control over the test equipment.





Description:

This method gets the IF attenuation step size (in dB) of the digitizer.

Function arguments



Parameter

Variable Type

Description



$handle

Object

The handle of the instrument returned from the AeroFlex Digitizer open function





Return parameters



Parameter

Variable Type

Description



$StepAttenuation

Integer

RF attenuation value in (dB)





Example(s):





$StepAttenuation = AeroFlexDigitizer_GetRFStepAttenuation($handle);





AeroFlexDigitizer_Open

Previous Top Next



* * *





AeroFlexDigitizer_Open





Usage:





$handle = AeroFlexDigitizer_Open($digititzerResource, $oscResource, $oscIsPlugin);





Description:

This method attempts to boot the digitizer using the parameters provided.

$DigitizerResource and $oscResource must be valid Visa resource strings.

$oscIsPlugin must be set to true if an AF3010 is not being used for the LO, in which case the $oscResource must have been preset to a valid plugin.

Note that using a plugin to drive the local oscillator will reduce the overall functionality of the digitizer.

This function initializes a session with the instrument and returns the handle to the test script.

Function arguments



Parameter

Variable Type

Description



$digitizerResource

String

The resource name of the digitizer.



$oscResource

String

The resource name of the oscillator.



$oscIsPlugin

Boolean

Local Oscillator input to the digitizer is plugin [TRUE or FALSE]





Return parameters



Parameter

Variable Type

Description



$handle

Object

The handle to the instrument session.





Example(s):





$handle = AeroFlexDigitizer_Open("PXI4::14::INSTR","PXI4::15::INSTR", FALSE);





AeroFlexDigitizer_SetCaptureIQTriggerArm

Previous Top Next



* * *





AeroFlexDigitizer_SetCaptureIQTriggerArm





Usage:





AeroFlexDigitizer_SetCaptureIQTriggerArm($handle, $TriggerArmNumSamples);





Note: These are advanced low level control function for the AeroFlex PXI RF Digitizer. It is recommended to use the AeroFlex Spectrum Analyzer_XXX function library for general measurements and testing. These functions are intended for custom test scenarios for expert users who require a finer level of control over the test equipment.





Description:

This method commands the AF303x to arm for a trigger event to capture the specified number of samples.

Notes:

The TriggerArm method should be used in hardware trigger and armed software trigger modes. It is not applicable in immediate software trigger mode.

Once the AF303x is armed, the application software can then check whether a trigger event has happened (using Detected property) or whether data capture is complete (see CaptComplete). The data capture can also be aborted before capture is complete using Abort() method.

In hardware trigger mode, the first trigger after this function initiates the data capture. In 'Armed' software trigger mode (see Trigger.SwTriggerMode), this function initiates the data capture of the specified number of samples.

This method is equivalent to setting Capture.SampleDataType to afDigitizerDll_sdtIQData and calling Trigger Arm.

Function arguments



Parameter

Variable Type

Description



$handle

Object

The handle of the instrument returned from the AeroFlex Digitizer Open function



$TriggerArmNumSamples

Integer

sets a trigger event to capture the specified number of samples





Return parameters



Parameter

Variable Type

Description



none





Example(s):

AeroFlexDigitizer_SetCaptureIQTriggerArm($handle,$TriggerArmNumSamples);





AeroFlexDigitizer_SetCenterFreq

Previous Top Next



* * *



AeroFlexDigitizer_SetCenterFreq



Usage:





AeroFlexDigitizer_SetCenterFreq($handle, $CenterFreq);





Note: These are advanced low level control function for the AeroFlex PXI RF Digitizer. It is recommended to use the AeroFlex Spectrum Analyzer_XXX function library for general measurements and testing. These functions are intended for custom test scenarios for expert users who require a finer level of control over the test equipment.





Description:

This method sets the center frequency (in Hz) of the active channel being used by the digitizer when in manual mode.

Notes:

It sets the AF303x to the specified centre frequency and the synthesizer (for example AF301x) to the corresponding local oscillator frequency.

Function arguments



Parameter

Variable Type

Description



$handle

Object

The handle of the instrument returned from the AeroFlex Digitizer open function



$CenterFreq

Double

Sets the desired frequency





Return parameters



Parameter

Variable Type

Description



none





Example(s):

AeroFlexDigitizer_SetCenterFreq($handle, 850000000);





AeroFlexDigitizer_SetIFAttenuation

Previous Top Next



* * *



AeroFlexDigitizer_SetIFAttenuation



Usage:





AeroFlexDigitizer_SetIFAttenuation($handle, $IFAttenuation);





Note: These are advanced low level control function for the AeroFlex PXI RF Digitizer. It is recommended to use the AeroFlex Spectrum Analyzer_XXX function library for general measurements and testing. These functions are intended for custom test scenarios for expert users who require a finer level of control over the test equipment.





Description:

This method sets the IF Attenuation (in dB) of the active channel being used by the digitizer when in manual mode.

Function arguments



Parameter

Variable Type

Description



$handle

Object

The handle of the instrument returned from the AeroFlex Digitizer open function



$IFAttenuation

Integer

Sets the desired attenuation from 0 to 35 dB in 1dB increments





Return parameters



Parameter

Variable Type

Description



none





Example(s):

AeroFlexDigitizer_SetIFAttenuation($handle, 4);





AeroFlexDigitizer_SetLOReference

Previous Top Next



* * *





AeroFlexDigitizer_SetLOReference





Usage:

AeroFlexDigitizer_SetLOReference($handle,$LOReferenceMode);





Description:

This function sets the LO external reference mode.

Function arguments



Parameter

Variable Type

Description



$handle

Object

The handle of the instrument returned from the AeroFlexDigitizer_Open function



$LOReferenceMode

String

Sets the desired LO reference mode:

· "OCXO" = Internal

· "INTERNAL" = Internal

· "EXTERNALDAISY" = External

· "EXTERNALTERMINATED" = External





Return parameters



Parameter

Variable Type

Description



none





Example(s):





AeroFlexDigitizer_SetLOReference($handle,"INTERNAL");





AeroFlexDigitizer_SetRFAttenuation

Previous Top Next



* * *



AeroFlexDigitizer_SetRFAttenuation



Usage:





AeroFlexDigitizer_SetRFAttenuation($handle, $RFAttenuation);





Note: These are advanced low level control function for the AeroFlex PXI RF Digitizer. It is recommended to use the AeroFlex Spectrum Analyzer_XXX function library for general measurements and testing. These functions are intended for custom test scenarios for expert users who require a finer level of control over the test equipment.





Description:

This method sets the RF Attenuation (in dB) of the active channel being used by the digitizer when in manual mode.

Function arguments



Parameter

Variable Type

Description



$handle

Object

The handle of the instrument returned from the AeroFlex Digitizer Open function



$RFAttenuation

Integer

Sets the desired attenuation





Return parameters



Parameter

Variable Type

Description



none





Example(s):

AeroFlexDigitizer_SetRFAttenuation($handle, 10);





AeroFlexDigitizer_SetRFExternalReferenceMode

Previous Top Next



* * *





AeroFlexDigitizer_SetRFExternalReferenceMode





Usage:

AeroFlexDigitizer_SetRFExternalReferenceMode($handle,$RFReferenceMode);





Description:

This function sets the RF External reference mode.

Function arguments



Parameter

Variable Type

Description



$handle

Object

The handle of the instrument returned from the AeroFlexDigitizer_Open function



$RFExternalReferenceMode

String

Sets the desired RF external reference mode:

· "FREERUN" = Free Run

· "LOCKEDTO10MHZ" = Lock to 10Mhz Reference





Return parameters



Parameter

Variable Type

Description



none





Example(s):





AeroFlexDigitizer_SetRFExternalReferenceMode($handle,"LOCKEDTO10MHZ");





AeroFlexDigitizer_SetRFInputLevel

Previous Top Next



* * *



AeroFlexDigitizer_SetRFInputLevel



Usage:





AeroFlexDigitizer_SetRFInputLevel($handle, $RFinputLevel);





Note: These are advanced low level control function for the AeroFlex PXI RF Digitizer. It is recommended to use the AeroFlex Spectrum Analyzer_XXX function library for general measurements and testing. These functions are intended for custom test scenarios for expert users who require a finer level of control over the test equipment.





Description:

This method sets the RF Input Level (in dBm) of the active channel being used by the digitizer when in manual mode.

Function arguments



Parameter

Variable Type

Description



$handle

Object

The handle of the instrument returned from the AeroFlex Digitizer Open function



$RFinputLevel

Float

Sets the desired RF input level in dBm





Return parameters



Parameter

Variable Type

Description



none





Example(s):





AeroFlexDigitizer_SetRFInputLevel($handle, 10);





AeroFlexDigitizer_SetRFReference

Previous Top Next



* * *





AeroFlexDigitizer_SetRFReference





Usage:

AeroFlexDigitizer_SetRFReference($handle,$RFReferenceMode);





Description:

This function sets the RF reference mode.

Function arguments



Parameter

Variable Type

Description



$handle

Object

The handle of the instrument returned from the AeroFlexDigitizer_Open function



$RFReferenceMode

String

Sets the desiredRF reference mode:

· "INTERNAL" = Internal

· "EXTERNALPCIBACKPLANE" = External

· "EXTERNALDAISY" = External





Return parameters



Parameter

Variable Type

Description



none





Example(s):





AeroFlexDigitizer_SetRFReference($handle,"INTERNAL");





AeroFlexSpectrumAnalyzer_AbortMeasurement

Previous Top Next



* * *



AeroFlexSpectrumAnalyzer_AbortMeasurement

Usage:

AeroFlexSpectrumAnalyzer_AbortMeasurement($SpecAn);

Description:

This function aborts all the enabled measurements.





Function arguments



Parameter

Variable Type

Description



$SpecAn

Object

Spectrum Analyzer Object





Example:





call Initialize();

SetFinalizeFunction("CloseInstruments");

AeroFlexCombiner_SetMode($Combiner, "AtoB");

AeroFlexSigGen_SetFrequency($SigGen,2100000000);

AeroFlexSigGen_SetLevel($SigGen, -10);

AeroFlexSigGen_EnableOutput($SigGen, "TRUE");

Sleep(1);





$CaptureState = AeroFlexSpectrumAnalyzer_GetCaptureState($SpecAn);

$Locked = AeroFlexSpectrumAnalyzer_CheckRFReferenceLocked($SpecAn);

AeroFlexSpectrumAnalyzer_SetTriggerSource($SpecAn,"IMMEDIATE");

AeroFlexSpectrumAnalyzer_SetReferenceLevel($SpecAn,0);

AeroFlexSpectrumAnalyzer_SetEnabledMeasurement($SpecAn,"POWERVSFREQ",true);

AeroFlexSpectrumAnalyzer_SetEnabledMeasurement($SpecAn,"NPEAKS",true);

AeroFlexSpectrumAnalyzer_SetStartFrequency($SpecAn,2000000000);

AeroFlexSpectrumAnalyzer_SetStopFrequency($SpecAn,2200000000);

AeroFlexSpectrumAnalyzer_SetCenterFrequency($SpecAn,2100000000);

//AeroFlexSpectrumAnalyzer_SetMeasurementSpan($SpecAn,10000000);

AeroFlexSpectrumAnalyzer_SetMeasurementRBW($SpecAn,200000);

AeroFlexSpectrumAnalyzer_SetMeasurementAveraging($SpecAn,25);

AeroFlexSpectrumAnalyzer_SetWindowMode($SpecAn,"GUASSIAN3DB");

AeroFlexSpectrumAnalyzer_SetRunMode($SpecAn,"CONTINUOUS");

AeroFlexSpectrumAnalyzer_StartMeasurement($SpecAn);

$Power = AeroFlexSpectrumAnalyzer_GetPowerAtFrequency($SpecAn,2100000000); //2.1G

($PeakFreq,$PeakPower) = AeroFlexSpectrumAnalyzer_GetPeak($SpecAn);

$Valid = AeroFlexSpectrumAnalyzer_GetMeasurementValidity($SpecAn,"POWERVSFREQ");

$Valid = AeroFlexSpectrumAnalyzer_GetMeasurementValidity($SpecAn,"NPEAKS");

$Locked = AeroFlexSpectrumAnalyzer_CheckRFReferenceLocked($SpecAn);

AeroFlexSpectrumAnalyzer_AbortMeasurement($SpecAn);

End;





function Initialize()

{

$Combiner = AeroFlexCombiner_Open("PXI4::12::INSTR");

$SpecAn = AeroFlexSpectrumAnalyzer_Open("PXI4::14::INSTR","PXI4::15::INSTR",false);

$SigGen = AeroflexSigGen_Open("PXI4::10::INSTR","PXI4::11::INSTR",false);

return;

}





function CloseInstruments()

{

AeroFlexSpectrumAnalyzer_Close($SpecAn);

AeroFlexSigGen_Close($SigGen);

AeroFlexCombiner_Close($Combiner);

End;

}





AeroFlexSpectrumAnalyzer_CheckRFReferenceLocked

Previous Top Next



* * *



AeroFlexSpectrumAnalyzer_CheckRFReferenceLocked

Usage:

$reflocked = AeroFlexSpectrumAnalyzer_CheckRFReferenceLocked($SpecAn);

Description:

This functions returns a boolean value indicating whether or not the RF reference is currently locked for the digitizer device.





Function arguments



Parameter

Variable Type

Description



$SpecAn

Object

Spectrum Analyzer Object





Return parameters



Parameter

Variable Type

Description



$reflocked

Boolean

The return value is a Boolean value indicating whether or not the RF reference signal has been locked.





Example:





call Initialize();

SetFinalizeFunction("CloseInstruments");

AeroFlexCombiner_SetMode($Combiner, "AtoB");

AeroFlexSigGen_SetFrequency($SigGen,2100000000);

AeroFlexSigGen_SetLevel($SigGen, -10);

AeroFlexSigGen_EnableOutput($SigGen, "TRUE");

Sleep(1);





$CaptureState = AeroFlexSpectrumAnalyzer_GetCaptureState($SpecAn);

$Locked = AeroFlexSpectrumAnalyzer_CheckRFReferenceLocked($SpecAn);

AeroFlexSpectrumAnalyzer_SetTriggerSource($SpecAn,"IMMEDIATE");

AeroFlexSpectrumAnalyzer_SetReferenceLevel($SpecAn,0);

AeroFlexSpectrumAnalyzer_SetEnabledMeasurement($SpecAn,"POWERVSFREQ",true);

AeroFlexSpectrumAnalyzer_SetEnabledMeasurement($SpecAn,"NPEAKS",true);

AeroFlexSpectrumAnalyzer_SetStartFrequency($SpecAn,2000000000);

AeroFlexSpectrumAnalyzer_SetStopFrequency($SpecAn,2200000000);

AeroFlexSpectrumAnalyzer_SetCenterFrequency($SpecAn,2100000000);

//AeroFlexSpectrumAnalyzer_SetMeasurementSpan($SpecAn,10000000);

AeroFlexSpectrumAnalyzer_SetMeasurementRBW($SpecAn,200000);

AeroFlexSpectrumAnalyzer_SetMeasurementAveraging($SpecAn,25);

AeroFlexSpectrumAnalyzer_SetWindowMode($SpecAn,"GUASSIAN3DB");

AeroFlexSpectrumAnalyzer_SetRunMode($SpecAn,"CONTINUOUS");

AeroFlexSpectrumAnalyzer_StartMeasurement($SpecAn);

$Power = AeroFlexSpectrumAnalyzer_GetPowerAtFrequency($SpecAn,2100000000); //2.1G

($PeakFreq,$PeakPower) = AeroFlexSpectrumAnalyzer_GetPeak($SpecAn);

$Valid = AeroFlexSpectrumAnalyzer_GetMeasurementValidity($SpecAn,"POWERVSFREQ");

$Valid = AeroFlexSpectrumAnalyzer_GetMeasurementValidity($SpecAn,"NPEAKS");

$Locked = AeroFlexSpectrumAnalyzer_CheckRFReferenceLocked($SpecAn);

AeroFlexSpectrumAnalyzer_AbortMeasurement($SpecAn);

End;





function Initialize()

{

$Combiner = AeroFlexCombiner_Open("PXI4::12::INSTR");

$SpecAn = AeroFlexSpectrumAnalyzer_Open("PXI4::14::INSTR","PXI4::15::INSTR",false);

$SigGen = AeroflexSigGen_Open("PXI4::10::INSTR","PXI4::11::INSTR",false);

return;

}





function CloseInstruments()

{

AeroFlexSpectrumAnalyzer_Close($SpecAn);

AeroFlexSigGen_Close($SigGen);

AeroFlexCombiner_Close($Combiner);

End;

}





AeroFlexSpectrumAnalyzer_Close

Previous Top Next



* * *



AeroFlexSpectrumAnalyzer_Close

Usage:

AeroFlexSpectrumAnalyzer_Close($SpecAn);

Description:

This function closes the AeroFlex spectrum analyzer, aborts any running measurements,a nd frees the instrument resources.





Function arguments



Parameter

Variable Type

Description



$SpectrumAnalyzer

Object

Spectrum Analyzer Object





Example:





call Initialize();

SetFinalizeFunction("CloseInstruments");

AeroFlexCombiner_SetMode($Combiner, "AtoB");

AeroFlexSigGen_SetFrequency($SigGen,2100000000);

AeroFlexSigGen_SetLevel($SigGen, -10);

AeroFlexSigGen_EnableOutput($SigGen, "TRUE");

Sleep(1);





$CaptureState = AeroFlexSpectrumAnalyzer_GetCaptureState($SpecAn);

$Locked = AeroFlexSpectrumAnalyzer_CheckRFReferenceLocked($SpecAn);

AeroFlexSpectrumAnalyzer_SetTriggerSource($SpecAn,"IMMEDIATE");

AeroFlexSpectrumAnalyzer_SetReferenceLevel($SpecAn,0);

AeroFlexSpectrumAnalyzer_SetEnabledMeasurement($SpecAn,"POWERVSFREQ",true);

AeroFlexSpectrumAnalyzer_SetEnabledMeasurement($SpecAn,"NPEAKS",true);

AeroFlexSpectrumAnalyzer_SetStartFrequency($SpecAn,2000000000);

AeroFlexSpectrumAnalyzer_SetStopFrequency($SpecAn,2200000000);

AeroFlexSpectrumAnalyzer_SetCenterFrequency($SpecAn,2100000000);

//AeroFlexSpectrumAnalyzer_SetMeasurementSpan($SpecAn,10000000);

AeroFlexSpectrumAnalyzer_SetMeasurementRBW($SpecAn,200000);

AeroFlexSpectrumAnalyzer_SetMeasurementAveraging($SpecAn,25);

AeroFlexSpectrumAnalyzer_SetWindowMode($SpecAn,"GUASSIAN3DB");

AeroFlexSpectrumAnalyzer_SetRunMode($SpecAn,"CONTINUOUS");

AeroFlexSpectrumAnalyzer_StartMeasurement($SpecAn);

$Power = AeroFlexSpectrumAnalyzer_GetPowerAtFrequency($SpecAn,2100000000); //2.1G

($PeakFreq,$PeakPower) = AeroFlexSpectrumAnalyzer_GetPeak($SpecAn);

$Valid = AeroFlexSpectrumAnalyzer_GetMeasurementValidity($SpecAn,"POWERVSFREQ");

$Valid = AeroFlexSpectrumAnalyzer_GetMeasurementValidity($SpecAn,"NPEAKS");

$Locked = AeroFlexSpectrumAnalyzer_CheckRFReferenceLocked($SpecAn);

AeroFlexSpectrumAnalyzer_AbortMeasurement($SpecAn);

End;





function Initialize()

{

$Combiner = AeroFlexCombiner_Open("PXI4::12::INSTR");

$SpecAn = AeroFlexSpectrumAnalyzer_Open("PXI4::14::INSTR","PXI4::15::INSTR",false);

$SigGen = AeroflexSigGen_Open("PXI4::10::INSTR","PXI4::11::INSTR",false);

return;

}





function CloseInstruments()

{

AeroFlexSpectrumAnalyzer_Close($SpecAn);

AeroFlexSigGen_Close($SigGen);

AeroFlexCombiner_Close($Combiner);

End;

}





AeroFlexSpectrumAnalyzer_ConfigureOBWMeasurement

Previous Top Next



* * *



AeroFlexSpectrumAnalyzer_ConfigureOBWMeasurement

Usage:



AeroFlexSpectrumAnalyzer_ConfigureOBWMeasurement($SpecAn, $OBWWidth, $OBWPercentage)

Description:





This function sets the OBW measurement parameters to configure the instrument's Occupied Bandwidth Measurement.





The measurement width expressed in hertz must be less than or equal to the instruments currently measurement span. The system places this centrally within the span.





The OBW percentage must be a floating point value between 0-99.





In addition to setting these two parameters, you must also set the following generic measurement parameters before performing an occupied bandwidth measurement:





· Window Type

· Input Level and Attenuation

· Resolution Bandwidth

· Number of Averages (If this value is set to greater than 1, the returned OBW measurement is based on RMS power)

· Max Hold (If Max Hold is enabled, the OBW will be based on the maximum values found during the measurement sampling).





Finally, the OBW measurement must be enabled to complete the measurement.





Function arguments



Parameter

Variable Type

Description



$SpecAn

Object

Spectrum Analyzer Object



$OBWWidth

Float

OBW Measurement Width (expressed in Hertz)



$OBWPercentage

Float

OBW Measurement Percentage (Expressed as a percentage 0-99)





Example:

AeroFlexSpectrumAnalyzer_ConfigureOBWMeasurement($SpecAn, 5000,99.0);





AeroFlexSpectrumAnalyzer_EnableMaxHold

Previous Top Next



* * *



AeroFlexSpectrumAnalyzer_EnableMaxHold

Usage:

AeroFlexSpectrumAnalyzer_EnableMaxHold($SpectrumAnalyzer, $maxHold);

Description:

This function configures the Max or Peak hold setting on the instrument. This function has been deprecated in favor of the new statistical measurement configurations, but is retained for it's simplicity and usefulness.





Function arguments



Parameter

Variable Type

Description



$SpectrumAnalyzer

Object

Spectrum Analyzer Object



$maxHold

Boolean

Sets Peak Hold configuration:

'True' = ON

'False' = OFF





Example:

AeroFlexSpectrumAnalyzer_EnableMaxHold($SpectrumAnalyzer, false);





AeroFlexSpectrumAnalyzer_EnableRFPreAmplifier

Previous Top Next



* * *



AeroFlexSpectrumAnalyzer_EnableRFPreAmplifier

Usage:

AeroFlexSpectrumAnalyzer_EnableRFPreAmplifier($SpectrumAnalyzer, $Enabled);

Description:



This function sets the RF pre-amplifier state. The RF pre-amplifier state is not supported by all AF303x digitizer resources. This value only takes affect of the 'Attenuator Mode' property is set to 'Manual', otherwise the value is ignored in automatic mode.





Function arguments



Parameter

Variable Type

Description



$SpectrumAnalyzer

Object

Spectrum Analyzer Object



$Enabled

Boolean

Enables/Disables the PreAmplifier





Example:

AeroFlexSpectrumAnalyzer_EnableRFPreAmplifier($SpectrumAnalyzer, false);





AeroFlexSpectrumAnalyzer_GetAverageSpectralPower

Previous Top Next



* * *



AeroFlexSpectrumAnalyzer_GetAverageSpectralPower

Usage:

$averageSpectralPower = AeroFlexSpectrumAnalyzer_GetAverageSpectralPower($SpectrumAnalyzer, $MeasurementType);

Description:

This function returns the average power measurement for the selected measurement. Linear power (watts) values are summed across the spectrum trace before conversion to DB.



Note: This operation is performed on the averaged or peak held trace and so the averaging and peak hold will affect the result obtained.





Function arguments



Parameter

Variable Type

Description



$SpectrumAnalyzer

Object

Spectrum Analyzer Object



$Measurement Type

String

The type of measurement. Valid values are:

· "ABSMAXHOLD"

· "ABSMINHOLD"

· "ALL"

· "LIVE"

· "MAXHOLD"

· "MEAN"

· "MINHOLD"

· "NONE"

· "STDDEV"





Return parameters



Parameter

Variable Type

Description



$averageSpectralPower

Float

Returns a float value indicating the Spectral Power.





Example:

$averageSpectralPower = AeroFlexSpectrumAnalyzer_GetAverageSpectralPower($SpectrumAnalyzer,"MEAN");





AeroFlexSpectrumAnalyzer_GetCaptureState

Previous Top Next



* * *



AeroFlexSpectrumAnalyzer_GetCaptureState

Usage:

$captureState = AeroFlexSpectrumAnalyzer_GetCaptureState($SpectrumAnalyzer);

Description:

This function returns a string indicating the measurement capture state.



Function arguments



Parameter

Variable Type

Description



$SpectrumAnalyzer

Object

Spectrum Analyzer Object





Return parameters



Parameter

Variable Type

Description



$captureState

String

Returns a String Specifying the Capture State. Possible values are:

· "IDLE"

· "TRIGGERING"

· "CAPTURING"

· "ANALYZING"





Example:





call Initialize();

SetFinalizeFunction("CloseInstruments");

AeroFlexCombiner_SetMode($Combiner, "AtoB");

AeroFlexSigGen_SetFrequency($SigGen,2100000000);

AeroFlexSigGen_SetLevel($SigGen, -10);

AeroFlexSigGen_EnableOutput($SigGen, "TRUE");

Sleep(1);





$CaptureState = AeroFlexSpectrumAnalyzer_GetCaptureState($SpecAn);

$Locked = AeroFlexSpectrumAnalyzer_CheckRFReferenceLocked($SpecAn);

AeroFlexSpectrumAnalyzer_SetTriggerSource($SpecAn,"IMMEDIATE");

AeroFlexSpectrumAnalyzer_SetReferenceLevel($SpecAn,0);

AeroFlexSpectrumAnalyzer_SetEnabledMeasurement($SpecAn,"POWERVSFREQ",true);

AeroFlexSpectrumAnalyzer_SetEnabledMeasurement($SpecAn,"NPEAKS",true);

AeroFlexSpectrumAnalyzer_SetStartFrequency($SpecAn,2000000000);

AeroFlexSpectrumAnalyzer_SetStopFrequency($SpecAn,2200000000);

AeroFlexSpectrumAnalyzer_SetCenterFrequency($SpecAn,2100000000);

//AeroFlexSpectrumAnalyzer_SetMeasurementSpan($SpecAn,10000000);

AeroFlexSpectrumAnalyzer_SetMeasurementRBW($SpecAn,200000);

AeroFlexSpectrumAnalyzer_SetMeasurementAveraging($SpecAn,25);

AeroFlexSpectrumAnalyzer_SetWindowMode($SpecAn,"GUASSIAN3DB");

AeroFlexSpectrumAnalyzer_SetRunMode($SpecAn,"CONTINUOUS");

AeroFlexSpectrumAnalyzer_StartMeasurement($SpecAn);

$Power = AeroFlexSpectrumAnalyzer_GetPowerAtFrequency($SpecAn,2100000000); //2.1G

($PeakFreq,$PeakPower) = AeroFlexSpectrumAnalyzer_GetPeak($SpecAn);

$Valid = AeroFlexSpectrumAnalyzer_GetMeasurementValidity($SpecAn,"POWERVSFREQ");

$Valid = AeroFlexSpectrumAnalyzer_GetMeasurementValidity($SpecAn,"NPEAKS");

$Locked = AeroFlexSpectrumAnalyzer_CheckRFReferenceLocked($SpecAn);

AeroFlexSpectrumAnalyzer_AbortMeasurement($SpecAn);

End;





function Initialize()

{

$Combiner = AeroFlexCombiner_Open("PXI4::12::INSTR");

$SpecAn = AeroFlexSpectrumAnalyzer_Open("PXI4::14::INSTR","PXI4::15::INSTR",false);

$SigGen = AeroflexSigGen_Open("PXI4::10::INSTR","PXI4::11::INSTR",false);

return;

}





function CloseInstruments()

{

AeroFlexSpectrumAnalyzer_Close($SpecAn);

AeroFlexSigGen_Close($SigGen);

AeroFlexCombiner_Close($Combiner);

End;

}





AeroFlexSpectrumAnalyzer_GetMeasurementValidity

Previous Top Next



* * *



AeroFlexSpectrumAnalyzer_GetMeasurementValidity

Usage:

$isvalid = AeroFlexSpectrumAnalyzer_GetMeasurementValidity($SpectrumAnalyzer,$MeasurementType);

Description:

This function returns a boolean value indicating whether or not the configuration parameters for the specified measurement type are currently valid. If the measurement has a valid configuration a value of 'TRUE' is returned, otherwise a value of 'FALSE' is returned.





Function arguments



Parameter

Variable Type

Description



$SpectrumAnalyzer

Object

Spectrum Analyzer Object



$MeasurementType

String

The measurement type to check for valid configuration parameters. Valid values are:

· "ALL"

· "ACP"

· "AVERAGEPOWER"

· "FREQVSTIME"

· "NPEAKS"

· "OBW"

· "PHASEVSTIME"

· "POWERVSFREQ"

· "POWERVSTIME"





Return parameters



Parameter

Variable Type

Description



$IsValid

Boolean

· Returns 'TRUE' or 'FALSE' depending on whether or not the measurement is configured properly.





Example:





call Initialize();

SetFinalizeFunction("CloseInstruments");

AeroFlexCombiner_SetMode($Combiner, "AtoB");

AeroFlexSigGen_SetFrequency($SigGen,2100000000);

AeroFlexSigGen_SetLevel($SigGen, -10);

AeroFlexSigGen_EnableOutput($SigGen, "TRUE");

Sleep(1);





$CaptureState = AeroFlexSpectrumAnalyzer_GetCaptureState($SpecAn);

$Locked = AeroFlexSpectrumAnalyzer_CheckRFReferenceLocked($SpecAn);

AeroFlexSpectrumAnalyzer_SetTriggerSource($SpecAn,"IMMEDIATE");

AeroFlexSpectrumAnalyzer_SetReferenceLevel($SpecAn,0);

AeroFlexSpectrumAnalyzer_SetEnabledMeasurement($SpecAn,"POWERVSFREQ",true);

AeroFlexSpectrumAnalyzer_SetEnabledMeasurement($SpecAn,"NPEAKS",true);

AeroFlexSpectrumAnalyzer_SetStartFrequency($SpecAn,2000000000);

AeroFlexSpectrumAnalyzer_SetStopFrequency($SpecAn,2200000000);

AeroFlexSpectrumAnalyzer_SetCenterFrequency($SpecAn,2100000000);

//AeroFlexSpectrumAnalyzer_SetMeasurementSpan($SpecAn,10000000);

AeroFlexSpectrumAnalyzer_SetMeasurementRBW($SpecAn,200000);

AeroFlexSpectrumAnalyzer_SetMeasurementAveraging($SpecAn,25);

AeroFlexSpectrumAnalyzer_SetWindowMode($SpecAn,"GUASSIAN3DB");

AeroFlexSpectrumAnalyzer_SetRunMode($SpecAn,"CONTINUOUS");

AeroFlexSpectrumAnalyzer_StartMeasurement($SpecAn);

$Power = AeroFlexSpectrumAnalyzer_GetPowerAtFrequency($SpecAn,2100000000); //2.1G

($PeakFreq,$PeakPower) = AeroFlexSpectrumAnalyzer_GetPeak($SpecAn);

$Valid = AeroFlexSpectrumAnalyzer_GetMeasurementValidity($SpecAn,"POWERVSFREQ");

$Valid = AeroFlexSpectrumAnalyzer_GetMeasurementValidity($SpecAn,"NPEAKS");

$Locked = AeroFlexSpectrumAnalyzer_CheckRFReferenceLocked($SpecAn);

AeroFlexSpectrumAnalyzer_AbortMeasurement($SpecAn);

End;





function Initialize()

{

$Combiner = AeroFlexCombiner_Open("PXI4::12::INSTR");

$SpecAn = AeroFlexSpectrumAnalyzer_Open("PXI4::14::INSTR","PXI4::15::INSTR",false);

$SigGen = AeroflexSigGen_Open("PXI4::10::INSTR","PXI4::11::INSTR",false);

return;

}





function CloseInstruments()

{

AeroFlexSpectrumAnalyzer_Close($SpecAn);

AeroFlexSigGen_Close($SigGen);

AeroFlexCombiner_Close($Combiner);

End;

}





AeroFlexSpectrumAnalyzer_GetNextPeak

Previous Top Next



* * *



AeroFlexSpectrumAnalyzer_GetNextPeak

Usage:

($peakFrequency, $peakLevel) = AeroFlexSpectrumAnalyzer_GetNextPeak($SpecAn);

Description:

This function locates the peak signal present in the calculated spectrum. It gets the frequency and power at the ne next highest point of the trace, between the search start and stop points, following an earlier 'PeakFind' or 'PeakFindNext'.





Function arguments



Parameter

Variable Type

Description



$SpecAn

Object

Spectrum Analyzer Object





Return parameters



Parameter

Variable Type

Description



$peakFrequency

Float

Returns the Peak Frequency (Hertz) of the next peak.



$peakLevel

Float

Returns the Peak Level (dBm) of the next peak.





Example:



($Freq,$Level) = AeroFlexSpectrumAnalyzer_GetNextPeak($SpecAn);

UpdateStatus($Freq);

UpdateStatus($Level);





AeroFlexSpectrumAnalyzer_GetOBWMeasurement

Previous Top Next



* * *



AeroFlexSpectrumAnalyzer_GetOBWMeasurement

Usage:

$OBWMeasurement = AeroFlexSpectrumAnalyzer_GetOBWMeasurement($SpecAn,$MeasurementType);

Description:

This function gets the Occupied Bandwidth Measurement Result. The type of measurement result returned is based on the value passed to the measurement type parameter.





Function arguments



Parameter

Variable Type

Description



$SpecAn

Object

Spectrum Analyzer Object



$MeasurementType

String

The type of OBW measurement. Valid values are:

· "ABSMAXHOLD"

· "ABSMINHOLD"

· "ALL"

· "LIVE"

· "MAXHOLD"

· "MEAN"

· "MINHOLD"

· "NONE"

· "STDDEV"





Return parameters



Parameter

Variable Type

Description



$OBWMeasurement

Float

Returns the OBW measurement (unit depends on the type of measurement requested)





Example:



$OBWMeasurement = AeroFlexSpectrumAnalyzer_GetOBWMeasurement($SpecAn,"MEAN");





AeroFlexSpectrumAnalyzer_GetPeak

Previous Top Next



* * *



AeroFlexSpectrumAnalyzer_GetPeak

Usage:

($peakFrequency, $peakLevel) = AeroFlexSpectrumAnalyzer_GetPeak($SpecAn);

Description:

This function locates the greatest peak signal present in the calculated spectrum. It gets the frequency and power at the highest point of the trace, between the search start and stop points. This function call can be followed by a call to 'PeakFindNext'.





Function arguments



Parameter

Variable Type

Description



$SpecAn

Object

Spectrum Analyzer Object





Return parameters



Parameter

Variable Type

Description



$peakFrequency

Float

Returns the Peak Frequency (Hertz) of the greatest peak.



$peakLevel

Float

Returns the Peak Level (dBm) of the greatest peak.





Example:



($Freq,$Level) = AeroFlexSpectrumAnalyzer_GetPeak($SpecAn);

UpdateStatus($Freq);

UpdateStatus($Level);





AeroFlexSpectrumAnalyzer_Open

Previous Top Next



* * *



AeroFlexSpectrumAnalyzer_Open

Usage:

$Handle = AeroFlexSpectrumAnalyzer_Open($DigitizerResourceString ,$OscillatorResourceString,$LOisLocal);

Description:



This function creates a handle to a spectrum analyzer object (actually an enhanced version of the AeroFlex digitizer object).





After calling the AeroFlexSpectrumAnalyzer_Open function, you must close the instrument using the AeroFlexSpectrumAnalyzer_Close function to release the instrument resources.





Note: Notice that the third parameter for specifying the LO resource is different from the functionality of the AeroFlex digitizer and AeroFlex Signal Generator open functions. In most cases, this calue needs to be set to 'TRUE', whereas in most cases it will be set to false for the other function libraries.



Function arguments



Parameter

Variable Type

Description



$DigitizerResourceString

String

Digitizer Resource String for the RF resource (301x module) that is to be created and used by the spectrum measurement library



$OscillatorResourceString

String

Oscillator Resource String for the LO (303x module) that is to be created and used by the spectrum measurement library.



$LOisLocal

Boolean

If set to false, an external standard is used, otherwise an internal standard is used.





Return parameters



Parameter

Variable Type

Description



$OBWMeasurement

Float

Returns the OBW measurement (unit depends on the type of measurement requested)





Example:

$SpecAn = AeroFlexSpectrumAnalyzer_Open("PXI4::14::INSTR","PXI4::15::INSTR",true);





AeroFlexSpectrumAnalyzer_Reset

Previous Top Next



* * *



AeroFlexSpectrumAnalyzer_Reset

Usage:

AeroFlexSpectrumAnalyzer_Reset($SpectrumAnalyzer);

Description:

This function is to reset the AeroFlex Spectrum Analyzer to it's initial "power-on" defaults.





Function arguments



Parameter

Variable Type

Description



$SpectrumAnalyzer

Object

Spectrum Analyzer Object





Example:





AeroFlexSpectrumAnalyzer_Reset($SpecAn);





AeroFlexSpectrumAnalyzer_SetAttenuation

Previous Top Next



* * *



AeroFlexSpectrumAnalyzer_SetAttenuation

Usage:

AeroFlexSpectrumAnalyzer_SetAttenuation($SpectrumAnalyzer, $Attenuation);

Description:



This function sets the value of the RF Attenuation (specified in DB). This value only takes affect is the Attenuation Mode is set to MANUAL, otherwise the value for this setting is ignored by the instrument.





Function arguments



Parameter

Variable Type

Description



$SpectrumAnalyzer

Object

Spectrum Analyzer Object



$Attenuation

Integer

Attenuation (specified in DB)





Example:





AeroFlexSpectrumAnalyzer_SetAttenuation($SpectrumAnalyzer,-2);





AeroFlexSpectrumAnalyzer_SetAttenuationMode

Previous Top Next



* * *



AeroFlexSpectrumAnalyzer_SetAttenuationMode

Usage:

AeroFlexSpectrumAnalyzer_SetAttenuationMode($SpectrumAnalyzer, $AttenuationMode);

Description:



This function sets the attenuation mode on the spectrum analyzer to 'automatic' or 'manual' mode.





With the attenuator mode set to 'AUTO', the reference level can be set manually. The attenuation is coupled with the reference level, so there is no direct control of the attenuation in Auto Mode.





With the attenuator mode set to 'MANUAL', direct control is provided for both the reference level, and the RF attenuation. This is required because the reference level and the RF attenuation together, determine how other gain and attenuation settings within the digitizer should be set.





If the attenuation mode is set to automatic, then the 'AeroFlexSpectrumAnalyzer_SetAttenuation' command has no effect on the instrument.





Function arguments



Parameter

Variable Type

Description



$SpectrumAnalyzer

Object

Spectrum Analyzer Object



$AttenuationMode

String

The desired attenuation mode. Valid values are:

· "AUTO" = Automatic Attenuation

· "MANUAL" = Attenuation settings are determined using the 'SetAttenuation' function





Example:





AeroFlexSpectrumAnalyzer_SetAttenuation($SpectrumAnalyzer,"AUTO");





AeroFlexSpectrumAnalyzer_SetCenterFrequency

Previous Top Next



* * *



AeroFlexSpectrumAnalyzer_SetCenterFrequency

Usage:

AeroFlexSpectrumAnalyzer_SetCenterFrequency($SpecAn,$Frequency);

Description:



This function sets the center frequency (specified in Hertz) to the given value.



Function arguments



Parameter

Variable Type

Description



$SpectrumAnalyzer

Object

Spectrum Analyzer Object



$Frequency

Float

The desired center frequency for the instrument.





Example:





AeroFlexSpectrumAnalyzer_SetCenterFrequency($SpecAn,2100000000); //2.1Ghz





AeroFlexSpectrumAnalyzer_SetEnabledMeasurement

Previous Top Next



* * *



AeroFlexSpectrumAnalyzer_SetEnabledMeasurement

Usage:

AeroFlexSpectrumAnalyzer_SetEnabledMeasurement($SpectrumAnalyzer, $MeasurementType, $Enabled);

Description:



This function sets the given measurement type to enabled or disabled depending on the value supplied for the $Enabled parameter.





Within the spectrum measurement library, there is a range of available measurements that may be performed. One or more of these measurements may therefore be enabled, however, the more measurements that are enabled will increase the duration required to complete the measurement due to the additional analysis time required.



The default setting is that all measurements are disabled, and the order in which specific measurements are enabled or disabled is immaterial and has no effect.





Function arguments



Parameter

Variable Type

Description



$SpectrumAnalyzer

Object

Spectrum Analyzer Object



$MeasurementType

String

The desired measurement type. Valid values are:

· "ALL"

· "ACP"

· "AVERAGEPOWER"

· "FREQVSTIME"

· "NPEAKS"

· "OBW"

· "PHASEVSTIME"

· "POWERVSFREQ"

· "POWERVSTIME"



$Enabled

Boolean

A true/false value indicating whether or not the measurement should be enabled.





Example:





AeroFlexSpectrumAnalyzer_SetEnabledMeasurement($SpecAn,"POWERVSFREQ",true);





AeroFlexSpectrumAnalyzer_SetMeasurementAveraging

Previous Top Next



* * *



AeroFlexSpectrumAnalyzer_SetMeasurementAveraging

Usage:

AeroFlexSpectrumAnalyzer_SetMeasurementAveraging($SpecAn, $AveragingCount);

Description:

This function sets the number of averages to be performed on the spectrum. This property is actually deprecated, but is included in the function library for it's ease of use, and convenience for user's familiar with configuring the averaging settings on a conventional spectrum analyzer.





Setting this value to greater than one disables 'Max (Peak) Hold'. Setting 'Max (Peak) Hold' to enabled, will disable averaging.





Setting the number of averages to a very large value will increase the measurement duration.





Note: Trace linear power (watts) values are averaged (arithmetic mean) before conversion to dB.





Function arguments



Parameter

Variable Type

Description



$SpectrumAnalyzer

Object

Spectrum Analyzer Object



$AveragingCount

Integer

The number of averages.





Example:





AeroFlexSpectrumAnalyzer_SetMeasurementAveraging($SpectrumAnalyzer,10);





AeroFlexSpectrumAnalyzer_SetMeasurementRBW

Previous Top Next



* * *



AeroFlexSpectrumAnalyzer_SetMeasurementRBW

Usage:

AeroFlexSpectrumAnalyzer_SetMeasurementRBW($SpecAn, $RBWValue);

Description:

This function sets the resolution bandwidth for the instrument specified in Hertz.



The valid values for the resolution bandwidth are dependent on the instruments current span setting. For example, a 30Khz span allows for a minimum RBW setting of 2 Hz, and a maximum RBW setting of 10 Mhz.



The default initial value is 1.0 Mhz.



Function arguments



Parameter

Variable Type

Description



$SpectrumAnalyzer

Object

Spectrum Analyzer Object



$RBWValue

Float

The desired resolution bandwidth





Example:





AeroFlexSpectrumAnalyzer_SetMeasurementRBW($SpectrumAnalyzer,1000000);





AeroFlexSpectrumAnalyzer_SetMeasurementSpan

Previous Top Next



* * *



AeroFlexSpectrumAnalyzer_SetReferenceLevel

Usage:

AeroFlexSpectrumAnalyzer_SetReferenceLevel($SpecAn, $ReferenceLevel);

Description:



Sets the instrument's reference level when the attenuation mode is set to 'AUTO'. The reference level value is specified in dBm.





Function arguments



Parameter

Variable Type

Description



$SpectrumAnalyzer

Object

Spectrum Analyzer Object



$ReferenceLevel

Float

The desired reference level (specified in dBm).





Example:





AeroFlexSpectrumAnalyzer_SetReferenceLevel($SpectrumAnalyzer,-5);





AeroFlexSpectrumAnalyzer_SetReferenceLevel

Previous Top Next



* * *



AeroFlexSpectrumAnalyzer_SetReferenceLevel

Usage:

AeroFlexSpectrumAnalyzer_SetReferenceLevel($SpecAn, $RefLevel);

Description:

This function sets the size of the instrument span, specified in Hertz, which is the value of the area on either side of the center frequency that will be visible on the trace display.

The permitted span will depend upon the minimum and maximum limits of the frequency range, and also upon spectrum stitching and the currently set resolution bandwidth.





Function arguments



Parameter

Variable Type

Description



$SpectrumAnalyzer

Object

Spectrum Analyzer Object



$Span

Float

The desired instrument span (Hertz)





Example:





AeroFlexSpectrumAnalyzer_SetMeasurementSpan($SpectrumAnalyzer,10000000);





AeroFlexSpectrumAnalyzer_SetRunMode

Previous Top Next



* * *



AeroFlexSpectrumAnalyzer_SetRunMode

Usage:

AeroFlexSpectrumAnalyzer_SetRunMode($SpecAn, $RunMode);

Description:



This function sets the run mode for the instrument to either perform a single or continuous measurement. Averaging and max hold are performed over multiple single measurements. If measurement mode is set to continuous, measurements are performed until the AeroFlex_AbortMeasurement function is called.





Function arguments



Parameter

Variable Type

Description



$SpectrumAnalyzer

Object

Spectrum Analyzer Object



$RunMode

String

The desired run mode for measurements. Valid values are:

· "SINGLE" = Takes a single measurement

· "CONTINUOUS" = repeats the specified measurement until Abort is called.

· "REPEATNTIMES" = Repeats the specified measurmenent until the required averaging has been completed.





Example:





AeroFlexSpectrumAnalyzer_SetRunMode($SpectrumAnalyzer,"CONTINUOUS");





AeroFlexSpectrumAnalyzer_SetStartFrequency

Previous Top Next



* * *



AeroFlexSpectrumAnalyzer_SetStartFrequency

Usage:

AeroFlexSpectrumAnalyzer_SetStartFrequency($SpecAn, $StartFrequency);

Description:

This function sets the starting frequency of the instruments span specified in Hertz.



The SetStartFrequency and SetStopFrequency are an alternative to using the SetSpan and SetCenterFrequency functions.





Function arguments



Parameter

Variable Type

Description



$SpectrumAnalyzer

Object

Spectrum Analyzer Object



$StartFrequency

Float

The desired starting frequency, expressed in Hertz.





Example:





AeroFlexSpectrumAnalyzer_SetStartFrequency($SpecAn,10000000);





AeroFlexSpectrumAnalyzer_SetStopFrequency

Previous Top Next



* * *



AeroFlexSpectrumAnalyzer_SetStopFrequency

Usage:

AeroFlexSpectrumAnalyzer_SetStopFrequency($SpecAn, $StopFrequency);

Description:

This function sets the stopping frequency of the instrument span specified in Hertz.



The SetStartFrequency and SetStopFrequency are an alternative to using the SetSpan and SetCenterFrequency functions.





Function arguments



Parameter

Variable Type

Description



$SpectrumAnalyzer

Object

Spectrum Analyzer Object



$StopFrequency

Float

The desired stopping frequency, expressed in Hertz.





Example:





AeroFlexSpectrumAnalyzer_SetStopFrequency($SpecAn,20000000);





AeroFlexSpectrumAnalyzer_SetTriggerMode

Previous Top Next



* * *



AeroFlexSpectrumAnalyzer_SetTriggerSource

Usage:

AeroFlexSpectrumAnalyzer_SetTriggerSource($SpecAn, $TriggerMode);

Description:



This function sets the instrument's current trigger source to Video, Immediate, or External.





Note: Immediate triggering is equivalent to a free-run mode.





Function arguments



Parameter

Variable Type

Description



$SpectrumAnalyzer

Object

Spectrum Analyzer Object



$TriggerMode

String

The desired triggering mode for the instrument. Valid values are:

· "IMMEDIATE"

· "EXTERNAL"

· "VIDEO"





Example:





call Initialize();

SetFinalizeFunction("CloseInstruments");

AeroFlexCombiner_SetMode($Combiner, "AtoB");

AeroFlexSigGen_SetFrequency($SigGen,2100000000);

AeroFlexSigGen_SetLevel($SigGen, -10);

AeroFlexSigGen_EnableOutput($SigGen, "TRUE");

Sleep(1);





$CaptureState = AeroFlexSpectrumAnalyzer_GetCaptureState($SpecAn);

$Locked = AeroFlexSpectrumAnalyzer_CheckRFReferenceLocked($SpecAn);

AeroFlexSpectrumAnalyzer_SetTriggerSource($SpecAn,"IMMEDIATE");

AeroFlexSpectrumAnalyzer_SetReferenceLevel($SpecAn,0);

AeroFlexSpectrumAnalyzer_SetEnabledMeasurement($SpecAn,"POWERVSFREQ",true);

AeroFlexSpectrumAnalyzer_SetEnabledMeasurement($SpecAn,"NPEAKS",true);

AeroFlexSpectrumAnalyzer_SetStartFrequency($SpecAn,2000000000);

AeroFlexSpectrumAnalyzer_SetStopFrequency($SpecAn,2200000000);

AeroFlexSpectrumAnalyzer_SetCenterFrequency($SpecAn,2100000000);

//AeroFlexSpectrumAnalyzer_SetMeasurementSpan($SpecAn,10000000);

AeroFlexSpectrumAnalyzer_SetMeasurementRBW($SpecAn,200000);

AeroFlexSpectrumAnalyzer_SetMeasurementAveraging($SpecAn,25);

AeroFlexSpectrumAnalyzer_SetWindowMode($SpecAn,"GUASSIAN3DB");

AeroFlexSpectrumAnalyzer_SetRunMode($SpecAn,"CONTINUOUS");

AeroFlexSpectrumAnalyzer_StartMeasurement($SpecAn);

$Power = AeroFlexSpectrumAnalyzer_GetPowerAtFrequency($SpecAn,2100000000); //2.1G

($PeakFreq,$PeakPower) = AeroFlexSpectrumAnalyzer_GetPeak($SpecAn);

$Valid = AeroFlexSpectrumAnalyzer_GetMeasurementValidity($SpecAn,"POWERVSFREQ");

$Valid = AeroFlexSpectrumAnalyzer_GetMeasurementValidity($SpecAn,"NPEAKS");

$Locked = AeroFlexSpectrumAnalyzer_CheckRFReferenceLocked($SpecAn);

AeroFlexSpectrumAnalyzer_AbortMeasurement($SpecAn);

End;





function Initialize()

{

$Combiner = AeroFlexCombiner_Open("PXI4::12::INSTR");

$SpecAn = AeroFlexSpectrumAnalyzer_Open("PXI4::14::INSTR","PXI4::15::INSTR",false);

$SigGen = AeroflexSigGen_Open("PXI4::10::INSTR","PXI4::11::INSTR",false);

return;

}





function CloseInstruments()

{

AeroFlexSpectrumAnalyzer_Close($SpecAn);

AeroFlexSigGen_Close($SigGen);

AeroFlexCombiner_Close($Combiner);

End;

}





AeroFlexSpectrumAnalyzer_SetWindowMode

Previous Top Next



* * *



AeroFlexSpectrumAnalyzer_SetWindowMode

Usage:

AeroFlexSpectrumAnalyzer_SetWindowMode($SpecAn, $WindowMode);

Description:



This function sets the window type to be used when performing the analysis on the capture digitizer data.





Gaussian windows determine their shape from the values of measurmeent resolution bandwidth and sampling frequency.



The default power-on value is set to Blackman-Harris.





Function arguments



Parameter

Variable Type

Description



$SpectrumAnalyzer

Object

Spectrum Analyzer Object



$TriggerMode

String

The desired windowing mode for the instrument's data analysis. Valid values are:

· "BLACKMANHARRIS"

· "GUASSIAN3DB"

· "GAUSSIANNOISE"





Example:





call Initialize();

SetFinalizeFunction("CloseInstruments");

AeroFlexCombiner_SetMode($Combiner, "AtoB");

AeroFlexSigGen_SetFrequency($SigGen,2100000000);

AeroFlexSigGen_SetLevel($SigGen, -10);

AeroFlexSigGen_EnableOutput($SigGen, "TRUE");

Sleep(1);





$CaptureState = AeroFlexSpectrumAnalyzer_GetCaptureState($SpecAn);

$Locked = AeroFlexSpectrumAnalyzer_CheckRFReferenceLocked($SpecAn);

AeroFlexSpectrumAnalyzer_SetTriggerSource($SpecAn,"IMMEDIATE");

AeroFlexSpectrumAnalyzer_SetReferenceLevel($SpecAn,0);

AeroFlexSpectrumAnalyzer_SetEnabledMeasurement($SpecAn,"POWERVSFREQ",true);

AeroFlexSpectrumAnalyzer_SetEnabledMeasurement($SpecAn,"NPEAKS",true);

AeroFlexSpectrumAnalyzer_SetStartFrequency($SpecAn,2000000000);

AeroFlexSpectrumAnalyzer_SetStopFrequency($SpecAn,2200000000);

AeroFlexSpectrumAnalyzer_SetCenterFrequency($SpecAn,2100000000);

//AeroFlexSpectrumAnalyzer_SetMeasurementSpan($SpecAn,10000000);

AeroFlexSpectrumAnalyzer_SetMeasurementRBW($SpecAn,200000);

AeroFlexSpectrumAnalyzer_SetMeasurementAveraging($SpecAn,25);

AeroFlexSpectrumAnalyzer_SetWindowMode($SpecAn,"GUASSIAN3DB");

AeroFlexSpectrumAnalyzer_SetRunMode($SpecAn,"CONTINUOUS");

AeroFlexSpectrumAnalyzer_StartMeasurement($SpecAn);

$Power = AeroFlexSpectrumAnalyzer_GetPowerAtFrequency($SpecAn,2100000000); //2.1G

($PeakFreq,$PeakPower) = AeroFlexSpectrumAnalyzer_GetPeak($SpecAn);

$Valid = AeroFlexSpectrumAnalyzer_GetMeasurementValidity($SpecAn,"POWERVSFREQ");

$Valid = AeroFlexSpectrumAnalyzer_GetMeasurementValidity($SpecAn,"NPEAKS");

$Locked = AeroFlexSpectrumAnalyzer_CheckRFReferenceLocked($SpecAn);

AeroFlexSpectrumAnalyzer_AbortMeasurement($SpecAn);

End;





function Initialize()

{

$Combiner = AeroFlexCombiner_Open("PXI4::12::INSTR");

$SpecAn = AeroFlexSpectrumAnalyzer_Open("PXI4::14::INSTR","PXI4::15::INSTR",false);

$SigGen = AeroflexSigGen_Open("PXI4::10::INSTR","PXI4::11::INSTR",false);

return;

}





function CloseInstruments()

{

AeroFlexSpectrumAnalyzer_Close($SpecAn);

AeroFlexSigGen_Close($SigGen);

AeroFlexCombiner_Close($Combiner);

End;

}





AeroFlexSpectrumAnalyzer_StartMeasurement

Previous Top Next



* * *



AeroFlexSpectrumAnalyzer_StartMeasurement

Usage:

AeroFlexSpectrumAnalyzer_StartMeasurement($SpecAn);

Description:



This function will start the measurement process on any configured enabled measurements. If a measurement is enabled, and it's configuration values are specified improperly, this function will not return an error message, or generate a script failure.





Instead, you should check the configuration of each enabled measurement using the AeroFlexSpectrumAnalyzer_GetMeasurementValidity function to ensure that the returned measurements are accurate and configured properly.





Function arguments



Parameter

Variable Type

Description



$SpectrumAnalyzer

Object

Spectrum Analyzer Object





Example:





call Initialize();

SetFinalizeFunction("CloseInstruments");

AeroFlexCombiner_SetMode($Combiner, "AtoB");

AeroFlexSigGen_SetFrequency($SigGen,2100000000);

AeroFlexSigGen_SetLevel($SigGen, -10);

AeroFlexSigGen_EnableOutput($SigGen, "TRUE");

Sleep(1);





$CaptureState = AeroFlexSpectrumAnalyzer_GetCaptureState($SpecAn);

$Locked = AeroFlexSpectrumAnalyzer_CheckRFReferenceLocked($SpecAn);

AeroFlexSpectrumAnalyzer_SetTriggerSource($SpecAn,"IMMEDIATE");

AeroFlexSpectrumAnalyzer_SetReferenceLevel($SpecAn,0);

AeroFlexSpectrumAnalyzer_SetEnabledMeasurement($SpecAn,"POWERVSFREQ",true);

AeroFlexSpectrumAnalyzer_SetEnabledMeasurement($SpecAn,"NPEAKS",true);

AeroFlexSpectrumAnalyzer_SetStartFrequency($SpecAn,2000000000);

AeroFlexSpectrumAnalyzer_SetStopFrequency($SpecAn,2200000000);

AeroFlexSpectrumAnalyzer_SetCenterFrequency($SpecAn,2100000000);

//AeroFlexSpectrumAnalyzer_SetMeasurementSpan($SpecAn,10000000);

AeroFlexSpectrumAnalyzer_SetMeasurementRBW($SpecAn,200000);

AeroFlexSpectrumAnalyzer_SetMeasurementAveraging($SpecAn,25);

AeroFlexSpectrumAnalyzer_SetWindowMode($SpecAn,"GUASSIAN3DB");

AeroFlexSpectrumAnalyzer_SetRunMode($SpecAn,"CONTINUOUS");

AeroFlexSpectrumAnalyzer_StartMeasurement($SpecAn);

$Power = AeroFlexSpectrumAnalyzer_GetPowerAtFrequency($SpecAn,2100000000); //2.1G

($PeakFreq,$PeakPower) = AeroFlexSpectrumAnalyzer_GetPeak($SpecAn);

$Valid = AeroFlexSpectrumAnalyzer_GetMeasurementValidity($SpecAn,"POWERVSFREQ");

$Valid = AeroFlexSpectrumAnalyzer_GetMeasurementValidity($SpecAn,"NPEAKS");

$Locked = AeroFlexSpectrumAnalyzer_CheckRFReferenceLocked($SpecAn);

AeroFlexSpectrumAnalyzer_AbortMeasurement($SpecAn);

End;





function Initialize()

{

$Combiner = AeroFlexCombiner_Open("PXI4::12::INSTR");

$SpecAn = AeroFlexSpectrumAnalyzer_Open("PXI4::14::INSTR","PXI4::15::INSTR",false);

$SigGen = AeroflexSigGen_Open("PXI4::10::INSTR","PXI4::11::INSTR",false);

return;

}





function CloseInstruments()

{

AeroFlexSpectrumAnalyzer_Close($SpecAn);

AeroFlexSigGen_Close($SigGen);

AeroFlexCombiner_Close($Combiner);

End;

}





HP856XE_Close

Previous Top Next



* * *



HP859XE_Close

Usage:

HP859XE_Close($HpInstance);

Description:

This function uses the Agilent VXI PNP 859XE driver in order to use the HP859XE functions in JabilTest.

This function closes the HP859XE and recovers used resources. It does not reset the unit or change it's existing settings. This function returns a passing result if the instrument can be closed successfully, otherwise a failure is generated by the script function.

Function Arguments



Parameter

Variable Type

Description



$HpInstance

Object

The Object representing the instance of the HP859XE to be closed. Closing the instrument releases all resources.





Return Parameters



Parameter

Variable Type

Description



None





HP856XE_GetMarkerXValue

Previous Top Next



* * *



HP856XE_GetMarkerXValue

Usage:

$Value = HP856XE_GetMarkerXValue($Handle,$Marker);

Description:

This function controls the Agilent 856x Series of spectrum Analyzers. In order to use these function the VXI pnp driver for the instrument must be installed on the system running Jabil Test. The latest version of this driver can be downloaded from Agilent.

This method measures the current X value of the designated marker on its assigned trace. The value is in the X-axis units for the current trace (which is often frequency (Hz) or time (seconds)).If the selected marker is not currently active, this method will return a value without any valid meaning.

Function Arguments



Parameter

Variable Type

Description



$Handle

Object

A Handle to the Resource object



$Marker

Integer

The Marker # to set to a specific peak. Valid marker numbers are (1)





Return Parameters



Parameter

Variable Type

Description



$Value

Float

Current X-axis value in the X-axis units for the current trace (which is often Hz or seconds).





HP856XE_GetMarkerYValue

Previous Top Next



* * *



HP856XE_GetMarkerYValue

Usage:

$Value = HP856XE_GetMarkerYValue($Handle,$Marker);

Description:

This function controls the Agilent 856x Series of spectrum Analyzers. In order to use these function the VXI pnp driver for the instrument must be installed on the system running Jabil Test. The latest version of this driver can be downloaded from Agilent.

This method measures the current Y value for the designated marker on its assigned trace. The trace is in the Y-axis units for the current trace (which is often dBm).

Function Arguments



Parameter

Variable Type

Description



$Handle

Object

A Handle to the Resource object



$Marker

Integer

The Marker # to set to a specific peak. Valid marker numbers are (1)





Return Parameters



Parameter

Variable Type

Description



$Value

Float

The trace is in the Y-axis units for the current trace (which is often dBm).





HP856XE_Init

Previous Top Next



* * *



HP856XE_Init

Usage:

$Handle = HP856XE_Init($ResourceString,$Reset);

Description:

This function controls the Agilent 856x Series of spectrum Analyzers. In order to use these function the VXI pnp driver for the instrument must be installed on the system running Jabil Test. The latest version of this driver can be downloaded from Agilent.

This function initializes the Spectrum Analyzer, and returns a handle to the instrument. If the $Reset argument is set to TRUE, the instrument is reset to it's default configuration.

Example:

$Handle = HP856XE_Init("GPIB0::5::INSTR","TRUE");



Function Arguments



Parameter

Variable Type

Description



$ResourceString

String

The Resource string of the instrument, for instance "GPIB0::18::INSTR"



$Reset

Boolean

Specifies whether or not to reset the instrument upon initialization.



Return Parameters



Parameter

Variable Type

Description



$Handle

Object

A reference handle to the Spectrum Analyzer





HP856XE_MarkerPeakSearch

Previous Top Next



* * *



HP856XE_MarkerPeakSearch

Usage:

HP856XE_MarkerPeakSearch($Handle,$Marker,$SearchType);

Description:

This function controls the Agilent 856x Series of spectrum Analyzers. In order to use these function the VXI pnp driver for the instrument must be installed on the system running Jabil Test. The latest version of this driver can be downloaded from Agilent.

This method sets the specified marker to the peak found specified by the search algorithm requested.

Function Arguments



Parameter

Variable Type

Description



$Handle

Object

A Handle to the Resource object



$Marker

Integer

The Marker # to set to a specific peak. Valid marker numbers are (1)



$SearchType

String

Specifies the type of peak search to perform. Please refer to the User's manual for additional information about the peak search algorithms. Allowable values for $SearchType are:

· "MARKER_PEAK"

· "MARKER_PEAKNEXT"

· "MARKER_PEAKLEFT"

· "MARKER_PEAKRIGHT"





Return Parameters



Parameter

Variable Type

Description



None





HP856XE_SetBWResolution

Previous Top Next



* * *



HP856XE_SetBWResolution

Usage:

HP856XE_SetBWResolution($Handle,$Mode,$Resolution);

Description:

This function controls the Agilent 856x Series of spectrum Analyzers. In order to use these function the VXI pnp driver for the instrument must be installed on the system running Jabil Test. The latest version of this driver can be downloaded from Agilent.

This function sets the resolution bandwidth mode or value of the instrument IF.

Function Arguments



Parameter

Variable Type

Description



$Handle

Object

A Handle to the Resource object



$Mode

String

Sets the BW resolution mode; Allowed Values are:

· "AUTO"

· "MANUAL"

· "IGNORE"



$Resolution

Integer

The bandwidth resolution in Hertz.





Return Parameters



Parameter

Variable Type

Description



None





HP856XE_SetCenterFrequency

Previous Top Next



* * *



HP856XE_SetCenterFrequency

Usage:

HP856XE_SetCenterFrequency($Handle,$CenterFreq);

Description:

This function controls the Agilent 856x Series of spectrum Analyzers. In order to use these function the VXI pnp driver for the instrument must be installed on the system running Jabil Test. The latest version of this driver can be downloaded from Agilent.

Sets the center frequency on the spectrum analyzer.

Function Arguments



Parameter

Variable Type

Description



$Handle

Object

A Handle to the Resource object



$CenterFreq

Integer

Sets the center frequency of the spectrum analyzer, specified in Hertz.





Return Parameters



Parameter

Variable Type

Description



None





HP856XE_SetFreqSpan

Previous Top Next



* * *



HP856XE_SetFreqSpan

Usage:

HP856XE_SetFreqSpan($Handle,$Span);

Description:

This function controls the Agilent 856x Series of spectrum Analyzers. In order to use these function the VXI pnp driver for the instrument must be installed on the system running Jabil Test. The latest version of this driver can be downloaded from Agilent.

This function sets the horizontal frequency span of the spectrum analyzer.

Function Arguments



Parameter

Variable Type

Description



$Handle

Object

A Handle to the Resource object



$Span

Integer

The frequency span specified in Hertz.





Return Parameters



Parameter

Variable Type

Description



None





HP856XE_SetReferenceAmplitude

Previous Top Next



* * *



HP856XE_SetReferenceAmplitude

Usage:

HP856XE_SetReferenceAmplitude($Handle,$ReferenceLevel);

This function controls the Agilent 856XE Series of spectrum Analyzers. In order to use these function the VXI pnp driver for the instrument must be installed on the system running Jabil Test. The latest version of this driver can be downloaded from Agilent.

This method sets the spectrum analyzer's amplitude reference level.

Function Arguments



Parameter

Variable Type

Description



$Handle

Object

The resource handle of the Spectrum Analyzer



$ReferenceLevel

Float

Instrument's new amplitude reference level in current amplitude display units.





Return Parameters



Parameter

Variable Type

Description



None





HP856XE_SetVideoAveraging

Previous Top Next



* * *



HP856XE_SetVideoAveraging

Usage:

HP856XE_SetVideoAveraging($Handle,$Mode,$NumberOfSamples);

Description:

This function controls the Agilent 856x Series of spectrum Analyzers. In order to use these function the VXI pnp driver for the instrument must be installed on the system running Jabil Test. The latest version of this driver can be downloaded from Agilent.

This function sets the video averaging mode on the HP856XE instrument.

Function Arguments



Parameter

Variable Type

Description



$Handle

Object

A Handle to the Resource object



$Mode

String

Sets the averaging mode; Allowed Values are:

· "OFF"

· "ON"

· "SETAVERAGES"



$NumberOfSamples

Integer

The number of samples to be used in the video averaging algorithm





Return Parameters



Parameter

Variable Type

Description



None





HP859XE_CenterFreqToMarker

Previous Top Next



* * *



HP859XE_CenterFreqToMarker

Usage:

HP859XE_CenterFreqToMarker($HpInstance);

Description:

This function uses the Agilent VXI PNP 859XE driver in order to use the HP859XE functions in JabilTest.

This function centers the display output to the frequency of the active marker. Function Arguments



Parameter

Variable Type

Description



$HpInstance

Object

The Object representing the instance of the HP859XE.





Return Parameters



Parameter

Variable Type

Description



None





HP859XE_Close

Previous Top Next



* * *



HP859XE_Close

Usage:

HP859XE_Close($HpInstance);

Description:

This function uses the Agilent VXI PNP 859XE driver in order to use the HP859XE functions in JabilTest.

This function closes the HP859XE and recovers used resources. It does not reset the unit or change it's existing settings. This function returns a passing result if the instrument can be closed successfully, otherwise a failure is generated by the script function.

Function Arguments



Parameter

Variable Type

Description



$HpInstance

Object

The Object representing the instance of the HP859XE to be closed. Closing the instrument releases all resources.





Return Parameters



Parameter

Variable Type

Description



None





HP859XE_Cmd

Previous Top Next



* * *



HP859XE_Cmd

Usage:

HP859XE_Cmd($HpInstance, $Command);

Description:

This function uses the Agilent VXI PNP 859XE driver in order to use the HP859XE functions in JabilTest.

This function executes a suppiled GPIB command directly on the analyzer.

Function Arguments



Parameter

Variable Type

Description



$HpInstance

Object

The Object representing the instance of the HP859XE.



$Command

String

Raw GPIB command for the HP859E to run.





Return Parameters



Parameter

Variable Type

Description



None





HP859XE_Init

Previous Top Next



* * *



HP859XE_Init

Usage:

$HpInstance = HP859XE_Init($ResourceString);

Description:

This function uses the Agilent VXI PNP 859XE driver in order to use the HP859XE functions in JabilTest.

This function initializes the HP859XE for operation. The insturment is reset after using this command. This function returns a passing result if the instrument can be initialized successfully, otherwise a failure is generated by the script function.

Function Arguments



Parameter

Variable Type

Description



$ResourceString

String

The resource string identifying the instrument. For example, "GPIB0::9::Instr".





Return Parameters



Parameter

Variable Type

Description



$AgInstance

Object

The object representing the instance of the HP859XE.





HP859XE_MarkerToPeak

Previous Top Next



* * *



HP859XE_MarkerToPeak

Usage:

HP859XE_MarkerToPeak($HpInstance);

Description:

This function uses the Agilent VXI PNP 859XE driver in order to use the HP859XE functions in JabilTest.

This function moves the active marker to the peak currently visable on the 859XE.

Function Arguments



Parameter

Variable Type

Description



$HpInstance

Object

The Object representing the instance of the HP859XE.





Return Parameters



Parameter

Variable Type

Description



None





HP859XE_MeasureMarkerAmp

Previous Top Next



* * *



HP859XE_MeasureMarkerAmp

Usage:

$Amplitude = HP859XE_MeasureMarkerAmp($HpInstance,$Units);

Description:

This function uses the Agilent VXI PNP 859XE driver in order to use the HP859XE functions in JabilTest.

This function returns an amplitiude measurement at the current active marker.

Function Arguments



Parameter

Variable Type

Description



$HpInstance

Object

The Object representing the instance of the HP859XE.



$Units

Int

1 = DBm

2 = DBmV

3 = DBuV

4 = V

5 = W

any other value causes the function to fail due to an invalid parameter





Return Parameters



Parameter

Variable Type

Description



$Amplitude

Int

The amplitude at the active marker. Returned in the units specified in $Unit.





HP859XE_MeasureMarkerFreq

Previous Top Next



* * *



HP859XE_MeasureMarkerFreq

Usage:

$Frequency = HP859XE_MeasureMarkerFreq($HpInstance);

Description:

This function uses the Agilent VXI PNP 859XE driver in order to use the HP859XE functions in JabilTest.

This function returns a frequency measurement at the current active marker.

Function Arguments



Parameter

Variable Type

Description



$HpInstance

Object

The Object representing the instance of the HP859XE.





Return Parameters



Parameter

Variable Type

Description



$Frequency

Int

The frequency at the active marker in Hz.





HP859XE_PeakClear

Previous Top Next



* * *



HP859XE_PeakClear

Usage:

HP859XE_PeakClear($HpInstance);

Description:

This function uses the Agilent VXI PNP 859XE driver in order to use the HP859XE functions in JabilTest.

This function clears the spectrum analyzer trace. Removes a peak hold command.

Function Arguments



Parameter

Variable Type

Description



$HpInstance

Object

The Object representing the instance of the HP859XE.





Return Parameters



Parameter

Variable Type

Description



None





HP859XE_PeakHold

Previous Top Next



* * *



HP859XE_PeakHold

Usage:

HP859XE_PeakHold($HpInstance);

Description:

This function uses the Agilent VXI PNP 859XE driver in order to use the HP859XE functions in JabilTest.

Puts the spectrum analyzer in peak hold mode.

Function Arguments



Parameter

Variable Type

Description



$HpInstance

Object

The Object representing the instance of the HP859XE.





Return Parameters



Parameter

Variable Type

Description



None





HP859XE_SetAmpScaleAndUnits

Previous Top Next



* * *



HP859XE_SetAmpScaleAndUnits

Usage:

HP859XE_SetAmpScaleAndUnits($HpInstance,$LogLin,$Scale,$Units);

Description:

This function uses the Agilent VXI PNP 859XE driver in order to use the HP859XE functions in JabilTest.

This function sets the amplitude scale and units.

Function Arguments



Parameter

Variable Type

Description



$HpInstance

Object

The Object representing the instance of the HP859XE.



$LogLin

Int

0 = Logritmic

1 = Linear

any other value causes the function to fail due to an invalid parameter



$Scale

Int

1 = 1 unit

10 = 10 units

17 = 0.1 units

2 = 2 units

20 = 20 units

26 = 0.2 units

5 = 5 units

55 = 0.5 units

any other value causes the function to fail due to an invalid parameter



$Units

Int

0 = Auto

1 = DBm

2 = DBmV

3 = DBuV

4 = V

5 = W

any other value causes the function to fail due to an invalid parameter





Return Parameters



Parameter

Variable Type

Description



None





HP856XE_SetFreqCenter

Previous Top Next



* * *



HP859XE_SetFreqCenter

Usage:

HP859XE_SetFreqCenter($HpInstance,$Frequency);

Description:

This function uses the Agilent VXI PNP 859XE driver in order to use the HP859XE functions in JabilTest.

This function sets the center frequency to $Frequency Hz.

Function Arguments



Parameter

Variable Type

Description



$HpInstance

Object

The Object representing the instance of the HP859XE.



$Frequency

Double

Frequency to center the Hp859XE on in Hz.





Return Parameters



Parameter

Variable Type

Description



None





HP859XE_SetFreqSpan

Previous Top Next



* * *



HP859XE_SetFreqSpan

Usage:

HP859XE_SetFreqSpan($HpInstance,$Span);

Description:

This function uses the Agilent VXI PNP 859XE driver in order to use the HP859XE functions in JabilTest.

This function sets the frequency span to $Span Hz wide.

Function Arguments



Parameter

Variable Type

Description



$HpInstance

Object

The Object representing the instance of the HP859XE.



$Span

Double

Frequency span for the active window on the Hp859XE in Hz.





Return Parameters



Parameter

Variable Type

Description



None





HP859XE_TriggerExternal

Previous Top Next



* * *



HP859XE_TriggerExternal

Usage:

HP859XE_TriggerExternal($HpInstance);

Description:

This function uses the Agilent VXI PNP 859XE driver in order to use the HP859XE functions in JabilTest.

Puts the spectrum analyzer in external trigger mode.

Function Arguments



Parameter

Variable Type

Description



$HpInstance

Object

The Object representing the instance of the HP859XE.





Return Parameters



Parameter

Variable Type

Description



None





HP859XE_TriggerFree

Previous Top Next



* * *



HP859XE_TriggerFree

Usage:

HP859XE_TriggerFree($HpInstance);

Description:

This function uses the Agilent VXI PNP 859XE driver in order to use the HP859XE functions in JabilTest.

Takes the spectrum analyzer out of external trigger mode.

Function Arguments



Parameter

Variable Type

Description



$HpInstance

Object

The Object representing the instance of the HP859XE.





Return Parameters



Parameter

Variable Type

Description



None





HPESA_Close

Previous Top Next



* * *



HPESA_Close

Usage:

$Handle = HPESA_Close($Handle);

Description:

This function controls the Agilent ESA Series of spectrum Analyzers. In order to use these function the VXI pnp driver for the instrument must be installed on the system running Jabil Test. The latest version of this driver can be downloaded from Agilent.

This function closes the ESA Spectrum Analyzer, and releases thehandle to the instrument.

Function Arguments



Parameter

Variable Type

Description



$Handle

Object

A Handle to the HPESA Resource object





Return Parameters



Parameter

Variable Type

Description



None





HPESA_ConfigChannelPower

Previous Top Next



* * *



HPESA_ConfigChannelPower

Usage:

HPESA_ConfigChannelPower($Handle,$AverageOn,$AverageCount,$IntegrationSpan,$Span);

Description:

This function controls the Agilent ESA Series of spectrum Analyzers. In order to use these function the VXI pnp driver for the instrument must be installed on the system running Jabil Test. The latest version of this driver can be downloaded from Agilent.

This method sets up the channel power measurement operation.

Function Arguments



Parameter

Variable Type

Description



$Handle

Object

A Handle to the HPESA Resource object



$AveragingOn

String

Instrument's new CHP average state.

· "ON"

· "OFF"



$AverageCount

Integer

Specifies the number of CHP measurements that are combined.



$IntegrationSpan

Float

Instrument's new frequency span (bandwidth) over which to integrate power.



$Span

Float

Instrument's new channel power span.





Return Parameters



Parameter

Variable Type

Description



None





HPESA_DoSweep

Previous Top Next



* * *



HPESA_DoSweep



Usage:

$sweepComplete = HPESA_DoSweep($HPESA_handle, $timeout)





Description:

This method causes a sweep to start and waits for it to complete. If sweep mode is continuous, the sweep will be re-started. If sweep is single, then the sweep is started.

Function arguments



Parameter

Variable Type

Description



$HPESA_handle

Object

The instrument's VISA session handle returned from hpesa_init().



$timeout

Float

Time in seconds for this method to wait for the sweep to complete.





Return parameters



Parameter

Variable Type

Description



$sweepComplete

Boolean

Status indicating whether sweep completed successfully.





HPESA_GetAmplitudeScale

Previous Top Next



* * *



HPESA_GetAmplitudeScale



Usage:

$scale = HPESA_GetAmplitudeScale($HPESA_handle)





Description:

This method gets the spectrum analyzer's per division display scaling for the y-axis (amplitude). This setting is only applicable to y-axis (amplitude) logarithmic scale format. The setting has no meaning for linear scale format.

Function arguments



Parameter

Variable Type

Description



$HPESA_handle

Object

The instrument's VISA session handle returned from hpesa_init().





Return parameters



Parameter

Variable Type

Description



$scale

Float

Instrument's current per division display scaling for y-axis in dB.





HPESA_GetMarkerXValue

Previous Top Next



* * *



HPESA_GetMarkerXValue

Usage:

$Value = HPESA_GetMarkerXValue($Handle,$Marker);

Description:

This function controls the Agilent ESA Series of spectrum Analyzers. In order to use these function the VXI pnp driver for the instrument must be installed on the system running Jabil Test. The latest version of this driver can be downloaded from Agilent.

This method measures the current X value of the designated marker on its assigned trace. The value is in the X-axis units for the current trace (which is often frequency (Hz) or time (seconds)).If the selected marker is not currently active, this method will return a value without any valid meaning.

Function Arguments



Parameter

Variable Type

Description



$Handle

Object

A Handle to the HPESA Resource object



$Marker

Integer

The Marker # to set to a specific peak. Valid marker numbers are (0,1,2,3)





Return Parameters



Parameter

Variable Type

Description



$Value

Float

Current X-axis value in the X-axis units for the current trace (which is often Hz or seconds).





HPESA_GetMarkerYValue

Previous Top Next



* * *



HPESA_GetMarkerYValue

Usage:

$Value = HPESA_GetMarkerYValue($Handle,$Marker);

Description:

This function controls the Agilent ESA Series of spectrum Analyzers. In order to use these function the VXI pnp driver for the instrument must be installed on the system running Jabil Test. The latest version of this driver can be downloaded from Agilent.

This method measures the current Y value for the designated marker on its assigned trace. The trace is in the Y-axis units for the current trace (which is often dBm).

Function Arguments



Parameter

Variable Type

Description



$Handle

Object

A Handle to the HPESA Resource object



$Marker

Integer

The Marker # to set to a specific peak. Valid marker numbers are (0,1,2,3)





Return Parameters



Parameter

Variable Type

Description



$Value

Float

The trace is in the Y-axis units for the current trace (which is often dBm).





HPESA_GetTimeoutValue

Previous Top Next



* * *



HPESA_GetTimeoutValue



Usage:



$TimeoutValue = HPESA_GetTimeoutValue($InstrumentHandle);





Description:





The HPESA_GetTimeoutValue function returns the timeout value for driver I/O transactions in milliseconds. The timeout period may vary on computer platforms.



Function arguments



Parameter

Variable Type

Description



$InstrumentHandle

Object

The instrument handle for the HP ESA Instrument





Return parameters



Parameter

Variable Type

Description



$TimeoutValue

Integer

The value for the I/O timeout for all functions for the instrument. It is specified in Milliseconds





HPESA_Init

Previous Top Next



* * *



HPESA_Init

Usage:

$Handle = HPESA_Init($ResourceString,$Reset);

Description:

This function controls the Agilent ESA Series of spectrum Analyzers. In order to use these function the VXI pnp driver for the instrument must be installed on the system running Jabil Test. The latest version of this driver can be downloaded from Agilent.

This function initializes the ESA Spectrum Analyzer, and returns a handle to the instrument. If the $Reset argument is set to TRUE, the instrument is reset to it's default configuration.

Example:

$Handle = HPESA_Init("GPIB0::5::INSTR","TRUE");



Function Arguments



Parameter

Variable Type

Description



$ResourceString

String

The Resource string of the instrument, for instance "GPIB0::18::INSTR"



$Reset

Boolean

Specifies whether or not to reset the instrument upon initialization.



Return Parameters



Parameter

Variable Type

Description



$Handle

Object

A reference handle to the HP-ESA Spectrum Analyzer





HPESA_MarkerPeakSearch

Previous Top Next



* * *



HPESA_MarkerPeakSearch

Usage:

HPESA_MarkerPeakSearch($Handle,$Marker,$SearchType);

Description:

This function controls the Agilent ESA Series of spectrum Analyzers. In order to use these function the VXI pnp driver for the instrument must be installed on the system running Jabil Test. The latest version of this driver can be downloaded from Agilent.

This method sets the specified marker to the peak found specified by the search algorithm requested.

Function Arguments



Parameter

Variable Type

Description



$Handle

Object

A Handle to the HPESA Resource object



$Marker

Integer

The Marker # to set to a specific peak. Valid marker numbers are (0,1,2,3)



$SearchType

String

Specifies the type of peak search to perform. Please refer to the User's manual for additional information about the peak search algorithms. Allowable values for $SearchType are:

· "MARKER_PEAK"

· "MARKER_PEAKNEXT"

· "MARKER_PEAKLEFT"

· "MARKER_PEAKRIGHT"

· "MARKER_MIN"





Return Parameters



Parameter

Variable Type

Description



None





HPESA_MeasureChannelPower

Previous Top Next



* * *



HPESA_MeasureChannelPower

Usage:

($ChannelPower,$PowerDensity) = HPESA_MeasureChannelPower($Handle,$MeasureTimeout,$MeasureMode);

Description:

This function controls the Agilent ESA Series of spectrum Analyzers. In order to use these function the VXI pnp driver for the instrument must be installed on the system running Jabil Test. The latest version of this driver can be downloaded from Agilent.

This method retrieves the scalar results of the main channel power and power density from the instrument, based on the method of retrieval (measure, read, or fetch).

Function Arguments



Parameter

Variable Type

Description



$Handle

Object

A Handle to the HPESA Resource object



$MeasureTimeout

Float

Temporary timeout value in seconds for measurement.



$MeasureMode

String

Specifies the Measurment Type; Allowed Values are:

· "READ"

· "FETCH"

· "MEASURE"





Return Parameters



Parameter

Variable Type

Description



$ChannelPower

Float

The value of the channel power in the current amplitude units.



$PowerDensity

Float

The value of the channel power density in amplitude units/Hz.





HPESA_SetAmplitudeScale

Previous Top Next



* * *



HPESA_SetAmplitudeScale



Usage:

HPESA_SetAmplitudeScale($HPESA_handle, $scale)





Description:

This method sets the spectrum analyzer's per division display scaling for the y-axis (amplitude) logarithmic scale format (type). This setting doesn't affect the y-axis linear scale format, where the per division display scaling is always the reference level divided by 10.

Function arguments



Parameter

Variable Type

Description



$HPESA_handle

Object

The instrument's VISA session handle returned from hpesa_init().



$scale

Float

Instrument's new per division display scaling for y-axis logarithmic scale. Units are in dB.

Log amplitude per division range is:

· 0.1 dB for steps 0.1 to 0.9

· 1.0 dB for steps 1.0 to 20.0





Return parameters



Parameter

Variable Type

Description



None

-

-





HPESA_SetCenterFrequency

Previous Top Next



* * *



HPESA_SetCenterFrequency

Usage:

HPESA_SetCenterFrequency($Handle,$CenterFreq);

Description:

This function controls the Agilent ESA Series of spectrum Analyzers. In order to use these function the VXI pnp driver for the instrument must be installed on the system running Jabil Test. The latest version of this driver can be downloaded from Agilent.

Sets the center frequency on the spectrum analyzer.

Function Arguments



Parameter

Variable Type

Description



$Handle

Object

A Handle to the HPESA Resource object



$CenterFreq

Integer

Sets the center frequency of the spectrum analyzer, specified in Hertz.





Return Parameters



Parameter

Variable Type

Description



None





HPESA.SetFreqSpan

Previous Top Next



* * *



HPESA_SetFreqSpan

Usage:

HPESA_SetFreqSpan($Handle,$Span);

Description:

This function controls the Agilent ESA Series of spectrum Analyzers. In order to use these function the VXI pnp driver for the instrument must be installed on the system running Jabil Test. The latest version of this driver can be downloaded from Agilent.

This function sets the horizontal frequency span of the spectrum analyzer.

Function Arguments



Parameter

Variable Type

Description



$Handle

Object

A Handle to the HPESA Resource object



$Span

Integer

The frequency span specified in Hertz.





Return Parameters



Parameter

Variable Type

Description



None





HPESA_SetMarkerXPosition

Previous Top Next



* * *



HPESA_SetMarkerXPosition

Usage:

HPESA_SetMarkerXPosition($Handle,$MarkerNumber,$Position);

This function controls the Agilent ESA Series of spectrum Analyzers. In order to use these function the VXI pnp driver for the instrument must be installed on the system running Jabil Test. The latest version of this driver can be downloaded from Agilent.

This method sets one of the spectrum analyzer's markers to the specified X Position

Function Arguments



Parameter

Variable Type

Description



$Handle

Object

The resource handle of the Spectrum Analyzer



$MarkerNumber

Integer

The marker number of the instrument



$Position

Integer

The X position for the marker in display points.





Return Parameters



Parameter

Variable Type

Description



None





HPESA_SetMeasureMode

Previous Top Next



* * *



HPESA_SetMeasureMode

Usage:

HPESA_SetMeasureMode($Handle,$Mode);

This function controls the Agilent ESA Series of spectrum Analyzers. In order to use these function the VXI pnp driver for the instrument must be installed on the system running Jabil Test. The latest version of this driver can be downloaded from Agilent.

This method configures the measurement mode of the Spectrum Analyzer.

Function Arguments



Parameter

Variable Type

Description



$Handle

Object

The resource handle of the Spectrum Analyzer



$Mode

String

Selects the measurement mode of the instrument; Valid Options are:

· "Adjacent" = Adjacent Channel Power

· "Channel" = Channel Power

· "Emission" = Spurious Emission

· "Occupied" = Occupied Power

· "Harmonic" = Harmonic

· "Off" = Measurement Mode Off





Return Parameters



Parameter

Variable Type

Description



None





HPESA_SetReferenceAmplitude

Previous Top Next



* * *



HPESA_SetReferenceAmplitude

Usage:

HPESA_SetReferenceAmplitude($Handle,$ReferenceLevel);

This function controls the Agilent ESG Series of spectrum Analyzers. In order to use these function the VXI pnp driver for the instrument must be installed on the system running Jabil Test. The latest version of this driver can be downloaded from Agilent. This function supports the following instruments: ESG-1000B, ESG-2000B, ESG-3000B, ESG-4000B, ESG-D1000B, ESG-D2000B, ESG-D3000B, ESG-D4000B, ESG-1000A, ESG-2000A, ESG-3000A, ESG-4000A, ESG-D1000A, ESG-D2000A, ESG-D3000A, ESG-D4000A, E4423B, E4424B, E4425B, E4426B, E4434B, E4435B, E4436B, and E4437B.

This method sets the spectrum analyzer's amplitude reference level.

Function Arguments



Parameter

Variable Type

Description



$Handle

Object

The resource handle of the Spectrum Analyzer



$ReferenceLevel

Float

Instrument's new amplitude reference level in current amplitude display units.





Return Parameters



Parameter

Variable Type

Description



None





HPESA_SetResolutionBW

Previous Top Next



* * *



HPESA_SetResolutionBW

Usage:

HPESA_SetResolutionBW($Handle,$Resolution);

Description:

This method sets the spectrum analyzer's resolution bandwidth. Setting the resolution bandwidth uncouples the setting from the frequency span.





This function controls the Agilent ESA Series of spectrum Analyzers. In order to use these function the VXI pnp driver for the instrument must be installed on the system running Jabil Test. The latest version of this driver can be downloaded from Agilent.





Function Arguments



Parameter

Variable Type

Description



$Handle

Object

A Handle to the HPESA Resource object



$Resolution

Float

The instruments selected resolution bandwith specified in Hertz





Return Parameters



Parameter

Variable Type

Description



None





HPESA_SetResolutionBWAuto

Previous Top Next



* * *



HPESA_SetResolutionBWAuto

Usage:

HPESA_SetResolutionBWAuto($Handle);

Description:

This method sets the spectrum analyzer's resolution bandwidth mode to AUTO, where the resolution bandwidth is coupled to the frequency span.





This function controls the Agilent ESA Series of spectrum Analyzers. In order to use these function the VXI pnp driver for the instrument must be installed on the system running Jabil Test. The latest version of this driver can be downloaded from Agilent.





Function Arguments



Parameter

Variable Type

Description



$Handle

Object

A Handle to the HPESA Resource object





Return Parameters



Parameter

Variable Type

Description



None





HPESA_SetSweepMode

Previous Top Next



* * *



HPESA_SetSweepMode

Usage:

HPESA_SetSweepMode($Handle,$SweepMode);

Description:

This function controls the Agilent ESA Series of spectrum Analyzers. In order to use these function the VXI pnp driver for the instrument must be installed on the system running Jabil Test. The latest version of this driver can be downloaded from Agilent.

This function sets the sweep mode of the Spectrum Analyzer

Function Arguments



Parameter

Variable Type

Description



$Handle

Object

A Handle to the HPESA Resource object



$SweepMode

String

Specifies the sweep mode of the instrument. Allowable Values are:

· "SINGLE"

· "CONTINUOUS"





Return Parameters



Parameter

Variable Type

Description



None





HPESA_SetSweepTime

Previous Top Next



* * *



HPESA_SetSweepTime

Usage:

HPESA_SetSweepTime($Handle,$Sweeptime);

This function controls the Agilent ESG Series of spectrum Analyzers. In order to use these function the VXI pnp driver for the instrument must be installed on the system running Jabil Test. The latest version of this driver can be downloaded from Agilent. This function supports the following instruments: ESG-1000B, ESG-2000B, ESG-3000B, ESG-4000B, ESG-D1000B, ESG-D2000B, ESG-D3000B, ESG-D4000B, ESG-1000A, ESG-2000A, ESG-3000A, ESG-4000A, ESG-D1000A, ESG-D2000A, ESG-D3000A, ESG-D4000A, E4423B, E4424B, E4425B, E4426B, E4434B, E4435B, E4436B, and E4437B.

This method sets the spectrum analyzer's sweep time.

Function Arguments



Parameter

Variable Type

Description



$Handle

Object

The resource handle of the Spectrum Analyzer



$SweepTime

Float

Instrument's new sweep time in seconds.





Return Parameters



Parameter

Variable Type

Description



None





HPESA_SetTimeoutValue

Previous Top Next



* * *



HPESA_SetTimeoutValue



Usage:



HPESA_SetTimeoutValue($InstrumentHandle,$TimeoutValue);





Description:





The timeout function sets the timeout value for driver I/O transactions in milliseconds. The timeout period may vary on computer platforms.





The default timeout period varies by VISA implementation. For HP VISA, it is 2 seconds.





Some implementations of VISA will only accept a limited number of timeout values. If you set the VISA timeout to a given value using one of those implementations, and then query the timeout, you may find that the query returns a different value than the one you set. HP VISA sets the timeout to the precise value you specify, and returns that value when queried.

Function arguments



Parameter

Variable Type

Description



$InstrumentHandle

Object

The instrument handle for the HP ESA Instrument



$TimeoutValue

Integer

The timeout value for all I/O operations with the instrument, specified in milliseconds.





Return parameters



Parameter

Variable Type

Description



None





Example:





HPESA_SetTimeoutValue($Handle,5000); // Set Timeout Value to 5 Seconds





HPESA_SetTraceMode

Previous Top Next



* * *



HPESA_SetTraceMode

Usage:

HPESA_SetTraceMode($Handle,$TraceNumber,$TraceMode);

This function controls the Agilent ESA Series of spectrum Analyzers. In order to use these function the VXI pnp driver for the instrument must be installed on the system running Jabil Test. The latest version of this driver can be downloaded from Agilent.

This method selects the spectrum analyzer's trace mode for the selected trace.

Function Arguments



Parameter

Variable Type

Description



$Handle

Object

The resource handle of the Spectrum Analyzer



$TraceNumber

Integer

Instrument's trace number to modify.

Trace 1 - 0

Trace 2 - 1

Trace 3 - 2



$TraceMode

String

Instrument's new trace mode. The different modes are "WRITE", "MAXHOLD", "MINHOLD", "VIEW", "BLANK".





Return Parameters



Parameter

Variable Type

Description



None





HPESA_SetTriggerSource

Previous Top Next



* * *



HPESA_SetTriggerSource

Usage:

HPESA_SetTriggerSource($Handle,$TriggerSource);

This function controls the Agilent ESA Series of spectrum Analyzers. In order to use these function the VXI pnp driver for the instrument must be installed on the system running Jabil Test. The latest version of this driver can be downloaded from Agilent.

This method selects the spectrum analyzer's trigger source.

Function Arguments



Parameter

Variable Type

Description



$Handle

Object

The resource handle of the Spectrum Analyzer



$TriggerSource

String

The trigger source. Valid values are

IMMEDIATE

VIDEO

LINE

EXTERNAL





Return Parameters



Parameter

Variable Type

Description



None





HPESA_SetVideoAverageMode

Previous Top Next



* * *



HPESA_SetVideoAverageMode

Usage:

HPESA_SetVideoAverageMode($Handle,$AveragingMode,$AverageCount);

This function controls the Agilent ESA Series of spectrum Analyzers. In order to use these function the VXI pnp driver for the instrument must be installed on the system running Jabil Test. The latest version of this driver can be downloaded from Agilent.

This method sets the spectrum analyzer's average type and count.

Function Arguments



Parameter

Variable Type

Description



$Handle

Object

The resource handle of the Spectrum Analyzer



$AveragingMode

String

Video Averaging Mode. Allowed Values:

· "AVERAGEPOWER" = averages the linear power of the successive measurements.

· "LOGPOWER" = logarithmically averages the power of the video data (default)



$AverageCount

Integer

Specifies the number of measurements that are combined.





Return Parameters



Parameter

Variable Type

Description



None





HPESA_SetVideoAverageOn

Previous Top Next



* * *



HPESA_SetVideoAverageOn

Usage:

HPESA_SetVideoAverageOn($Handle,$AveragingOn);



This function controls the Agilent ESA Series of spectrum Analyzers. In order to use these function the VXI pnp driver for the instrument must be installed on the system running Jabil Test. The latest version of this driver can be downloaded from Agilent.

This method turns the spectrum analyzer's video averaging mode on/off.

Function Arguments



Parameter

Variable Type

Description



$Handle

Object

The resource handle of the Spectrum Analyzer



$AveragingOn

String

Video Averaging On/Off. Allowed Values:

· "OFF"

· "ON"





Return Parameters



Parameter

Variable Type

Description



None





HPESA_SetVideoBW

Previous Top Next



* * *



HPESA_SetVideoBW

Usage:

HPESA_SetVideoBW($Handle,$Bandwidth);

This function controls the Agilent ESG Series of spectrum Analyzers. In order to use these function the VXI pnp driver for the instrument must be installed on the system running Jabil Test. The latest version of this driver can be downloaded from Agilent. This function supports the following instruments: ESG-1000B, ESG-2000B, ESG-3000B, ESG-4000B, ESG-D1000B, ESG-D2000B, ESG-D3000B, ESG-D4000B, ESG-1000A, ESG-2000A, ESG-3000A, ESG-4000A, ESG-D1000A, ESG-D2000A, ESG-D3000A, ESG-D4000A, E4423B, E4424B, E4425B, E4426B, E4434B, E4435B, E4436B, and E4437B.

This method sets the spectrum analyzer's video bandwidth.

Function Arguments



Parameter

Variable Type

Description



$Handle

Object

The resource handle of the Spectrum Analyzer



$Bandwidth

Float

Instrument's new video bandwidth in hertz.





Return Parameters



Parameter

Variable Type

Description



None





HPESA_StartSweep

Previous Top Next



* * *



HPESA_StartSweep

Usage:

HPESA_StartSweep($Handle);

Description:

This function controls the Agilent ESA Series of spectrum Analyzers. In order to use these function the VXI pnp driver for the instrument must be installed on the system running Jabil Test. The latest version of this driver can be downloaded from Agilent.

This function starts a sweep on the Spectrum Analyzer

Function Arguments



Parameter

Variable Type

Description



$Handle

Object

A Handle to the HPESA Resource object





Return Parameters



Parameter

Variable Type

Description



None





RS_FSL_Close

Previous Top Next



* * *



RS_FSL_Close



Usage:

RS_FSL_Close($DeviceHandle);



Description:

This function performs the following operations:

· Closes the instrument I/O session.

· Destroys the instrument driver session and all of its attributes.

· Deallocates any memory resources the driver uses.





Note: After calling rsspecan_close, you cannot use the instrument driver again until you call RS_FSL_Init

Function arguments



Parameter

Variable Type

Description



$DeviceHandle

Object

The device handle object returned by RS_FSL_Init





Return parameters



Parameter

Variable Type

Description



None





Usage Examples

RS_FSL_Close($Handle);





RS_FSL_ConfigureAveraging

Previous Top Next



* * *



RS_FSL_ConfigureAveraging



Usage:

RS_FSL_ConfigureAveraging($DeviceHandle,$Window,$Trace,$AveragingType,$Enabled);



Description:

This function switches on or off the average calculation for the selected trace.

Function arguments



Parameter

Variable Type

Description



$DeviceHandle

Object

The device handle object returned by the RS_FSL_Init function.



$Window

Integer

The measurement window [1,2]



$Trace

Integer

The trace to perform the average calculation on.



$AveragingType

String

The average function to implement.If Video is selected, the logarithmic power is averaged and, if Linear is selected, the power values are averaged before they are converted to logarithmic values. Allowable values are:

· LIN - Linear

· VID - Video

· POW - Power



$Active

Boolean

Enable the averaging function [TRUE,FALSE]





Return parameters



Parameter

Variable Type

Description



None





Usage Examples

RS_FSL_ConfigureAveraging($handle,1,1,"POW",true);





RS_FSL_ConfigureCenterFrequencyAndSpan

Previous Top Next



* * *



RS_FSL_ConfigureCenterFrequencyAndSpan



Usage:

RS_FSL_ConfigureCenterFrequencyAndSpan($DeviceHandle, $Window,$CenterFrequency,$Span);



Description:

This function configures the frequency range of the spectrum analyzer using the center frequency and the frequency span. If span corresponds to zero hertz, then the spectrum analyzer is in time-domain.

Function arguments



Parameter

Variable Type

Description



$DeviceHandle

Object

The device handle object returned by the RS_FSL_Init function.



&Window

Integer

The measurement window [1,2]



$CenterFrequency

Float

The center frequency of the frequency sweep (Hz).



$Span

Float

The frequency span of the frequency sweep (Hz).





Return parameters



Parameter

Variable Type

Description



None





Usage Examples

RS_FSL_ConfigureCenterFrequencyAndSpan($handle,1,2440000000,10000000);





RS_FSL_ConfigureMarker

Previous Top Next



* * *



RS_FSL_ConfigureMarker



Usage:

RS_FSL_ConfigureMarker($DeviceHandle,$Window,$Marker,$Trace,$Enabled);



Description:

This function enables the active marker on the selected trace.

Function arguments



Parameter

Variable Type

Description



$DeviceHandle

Object

The device handle object returned by the RS_FSL_Init function.



$Window

Integer

The measurement window [1,2]



$Marker

Integer

This control sets and selects the active marker.



$Trace

Integer

This controls sets the trace for the configured marker.



$Enabled

Boolean

Enable the configured marker





Return parameters



Parameter

Variable Type

Description



None





Usage Examples

RS_FSL_ConfigureMarker($handle,1,1,1,true);





RS_FSL_ConfigureChannelSpacing

Previous Top Next



* * *



RS_FSL_ConfigurePowerChannelSpacing



Usage:

RS_FSL_ConfigurePowerChannelSpacing($Handle,$Window,$Spacing,$ChanType,$Channel);



Description:

This function configures the adjacent channel power spacing.

Function arguments



Parameter

Variable Type

Description



$DeviceHandle

Object

The device handle object returned by the RS_FSL_Init function.



$Window

Integer

The measurement window [1,2]



$Spacing

Float

The selected channel spacing value (Hz).



$ChanType

String

The channel type. Allowable values are:

· TX - Separate Channel

· ADJ - Adjacent Channel

· ALT - Alternate Channel



$Channel

Integer

The channel number to configure.





Return parameters



Parameter

Variable Type

Description



None





Usage Examples

RS_FSL_ConfigurePowerChannelSpacing($handle,1,1000000,"ADJ",1);





RS_FSL_ConfigurePowerMeasurement

Previous Top Next



* * *



RS_FSL_ConfigurePowerMeasurement



Usage:

RS_FSL_ConfigurePowerMeasurement($Handle,$Window,$NumChannels,$ChanMode,$PowMode);



Description:

This function configures the adjacent power channels measurement.

Function arguments



Parameter

Variable Type

Description



$DeviceHandle

Object

The device handle object returned by the RS_FSL_Init function.



$Window

Integer

The measurement window [1,2]



$NumChannels

Integer

The start frequency of the frequency sweep [0-12]



$ChanMode

String

Sets absolute and relative adjacent channel measurement. Allowable values are:

· ABS - Absolute

· REL - Relative



$PowMode

String

Sets the clear write or max hold for channel power values. Allowable values are:

· WRITE - Clear/Write

· HOLD - Max Hold





Return parameters



Parameter

Variable Type

Description



None





Usage Examples

RS_FSL_ConfigurePowerMeasurement($handle,1,5,"REL","WRITE");





RS_FSL_ConfigureSweepAndBandwidth

Previous Top Next



* * *



RS_FSL_ConfigureSweepAndBandwidth



Usage:

RS_FSL_ConfigureSweepAndBandwidth($Handle,$Window,$Sweep,$RBW,$VBW);



Description:

This function configures the coupling values of the spectrum analyzer.

Function arguments



Parameter

Variable Type

Description



$DeviceHandle

Object

The device handle object returned by the RS_FSL_Init function.



$Window

Integer

The measurement window [1,2]



$Sweep

Float

The length of time to complete one sweep (s).



$RBW

Float

Specifies the measurement resolution bandwidth (Hz).



$VBW

Float

Specifies the video bandwidth of the post-detection filter (Hz).





Return parameters



Parameter

Variable Type

Description



None





Usage Examples

RS_FSL_ConfigureSweepAndBandwidth($handle,1,.015,30000,30000);





RS_FSL_DisableAllMarkers

Previous Top Next



* * *



RS_FSL_DisableAllMarkers



Usage:

RS_FSL_DisableAllMarkers($DeviceHandle,$Window);



Description:

This function turns off all the markers in the specified measurement window.



Function arguments



Parameter

Variable Type

Description



$DeviceHandle

Object

The device handle object returned by RS_FSL_Init



$Window

Integer

The measurement window [1,2]





Return parameters



Parameter

Variable Type

Description



None





Usage Examples

RS_FSL_DisableAllMarkers($Handle,1);





RS_FSL_EnableDisplay

Previous Top Next



* * *



RS_FSL_EnableDisplay



Usage:

RS_FSL_EnableDisplay($DeviceHandle,$Enable,$ShowButtons);



Description:

This function switches on or off the update of all display elements and buttons during remote control.

Note: The $Enable parameter must be set to TRUE for the $ShowButtons parameter to become active.

Function arguments



Parameter

Variable Type

Description



$DeviceHandle

Object

The device handle returned by RS_FSL_Init



$Enable

Boolean

This control enables or disables instrument display when in remote control [TRUE,FALSE]



$ShowButtons

Boolean

This control enables or disables front panel keys on the screen when in remote control mode [TRUE,FALSE]





Return parameters



Parameter

Variable Type

Description



None





Usage Examples

RS_FSL_EnableDisplay($handle,true,false);





RS_FSL_GetActiveWindow

Previous Top Next



* * *



RS_FSL_GetActiveWindow



Usage:

$Window = RS_FSL_GetActiveWindow($DeviceHandle);



Description:

This function returns the active measurement window ID to be used in other functions.



Function arguments



Parameter

Variable Type

Description



$DeviceHandle

Object

The device handle object returned by RS_FSL_Init





Return parameters



Parameter

Variable Type

Description



$Window

Integer

The active window measurement ID.





Usage Examples

$win = RS_FSL_GetActiveWindow($Handle);





RS_FSL_GetMarkerAmplitude

Previous Top Next



* * *



RS_FSL_GetMarkerAmplitude



Usage:

$Amp = RS_FSL_GetMarkerAmplitude($DeviceHandle,$Window,$Marker);



Description:

This function returns the amplitude level of the selected marker.

Function arguments



Parameter

Variable Type

Description



$DeviceHandle

Object

The device handle returned by RS_FSL_Init



$Window

Integer

The measurement window [1,2]



$Marker

Integer

The marker ID to be queried.





Return parameters



Parameter

Variable Type

Description



$Amp

Float

The amplitude value of the selected marker.





Usage Examples

$amp = RS_FSL_GetMarkerAmplitude($handle,1,1);





RS_FSL_GetMarkerFrequency

Previous Top Next



* * *



RS_FSL_GetMarkerFrequency



Usage:

$Freq = RS_FSL_GetMarkerFrequency($DeviceHandle,$Window,$Marker);



Description:

This function returns the horizontal position of the selected marker.

Function arguments



Parameter

Variable Type

Description



$DeviceHandle

Object

The device handle returned by RS_FSL_Init



$Window

Integer

The measurement window [1,2]



$Marker

Integer

The marker ID to be queried.





Return parameters



Parameter

Variable Type

Description



$Freq

Float

The horizontal position of the selected marker (Hz)





Usage Examples

$freq = RS_FSL_GetMarkerFrequency($handle,1,1);





RS_FSL_GetPowerChannelMeasure

Previous Top Next



* * *



RS_FSL_GetPowerChannelMeasure



Usage:

$Lower, $Upper = RS_FSL_GetPowerChannelMeasure($DeviceHandle,$Window,$Channel);



Description:

This function returns the power measurement results for the selected channel. If the selected channel equals '0', the power measurement for the transmission channel will be returned in the $Lower return variable and the $Upper return variable will equal '0'.

Function arguments



Parameter

Variable Type

Description



$DeviceHandle

Object

The device handle returned by RS_FSL_Init



$Window

Integer

The measurement window [1,2]



$Channel

Integer

The marker ID to be queried.





Return parameters



Parameter

Variable Type

Description



$Lower

Float

The lower power measurement for the channel.



$Upper

Float

The upper power measurement for the channel.





Usage Examples

$pow = RS_FSL_GetPowerChannelMeasure($handle,1,0);





RS_FSL_Init

Previous Top Next



* * *



RS_FSL_Init



Usage:

$DeviceHandle = RS_FSL_Init($ResourceString $IdQuery, $Reset);



Description:

This function performs the following initialization actions:

· Creates a new instrument driver session.

· Opens a session to the specified device using the interface and address you specify for the Resource Name parameter.

· If the ID Query parameter is set to VI_TRUE, this function queries the instrument ID and checks that it is valid for this instrument driver.

· If the Reset parameter is set to VI_TRUE, this function resets the instrument to a known state.

· Sends initialization commands to set the instrument to the state necessary for the operation of the instrument driver.





Note: It is generally a good programming habit to close the instrument handle when the program is done using the instrument. This can be done with the RS_FSL_Close function.

Function arguments



Parameter

Variable Type

Description



$DeviceName

String

Resource string of the R&S Spectrum Analyzer



$IDQuery

Boolean

Specify whether you want the instrument driver to perform an ID Query.



$Reset

Boolean

Specify whether you want to restart the instrument during the initialization procedure.





Return parameters



Parameter

Variable Type

Description



$DeviceHandle

Object

The handle of the device





Usage Examples

$DeviceHandle = RS_FSL_Init("TCPIP::192.168.1.3::INSTR",false,true);





RS_FSL_Reset

Previous Top Next



* * *



RS_FSL_Reset



Usage:

RS_FSL_Reset($DeviceHandle);



Description:

This function resets the instrument.





Function arguments



Parameter

Variable Type

Description



$DeviceHandle

Object

The device handle object returned by RS_FSL_Init





Return parameters



Parameter

Variable Type

Description



None





Usage Examples

RS_FSL_Reset($Handle);





RS_FSL_SelfTest

Previous Top Next



* * *



RS_FSL_SelfTest



Usage:

RS_FSL_SelfTest($DeviceHandle);



Description:

This function runs the instrument's self test function and displays the test result(s).





Function arguments



Parameter

Variable Type

Description



$DeviceHandle

Object

The device handle object returned by RS_FSL_Init





Return parameters



Parameter

Variable Type

Description



None





Usage Examples

RS_FSL_SelfTest($Handle);





RS_FSL_SetActiveWindow

Previous Top Next



* * *



RS_FSL_SetActiveWindow



Usage:

RS_FSL_SetActiveWindow($DeviceHandle,$Window);



Description:

This function sets the active measurement window to be used in other functions.



Function arguments



Parameter

Variable Type

Description



$DeviceHandle

Object

The device handle object returned by RS_FSL_Init



$Window

Integer

The measurement window to set active [1,2]





Return parameters



Parameter

Variable Type

Description



None





Usage Examples

RS_FSL_SetActiveWindow($Handle,1);





RS_FSL_SetInstrumentFromMarker

Previous Top Next



* * *



RS_FSL_SetInstrumentFromMarker



Usage:

RS_FSL_SetInstrumentFromMarker($DeviceHandle,$Window,$Marker,$Setting);



Description:

This function makes the selected marker frequency to be the center frequency or step width of the center frequency. It can also make the active marker amplitude the to be the reference level.

Function arguments



Parameter

Variable Type

Description



$DeviceHandle

Object

The device handle returned by RS_FSL_Init



$Window

Integer

The measurement window [1,2]



$Marker

Integer

The selected marker ID.



$Setting

String

Specifies the instrument setting to be set from the marker position. Allowable values are:

· CENTER - Center Frequency

· STEP - Step Width of Center Freq

· REF - Reference Level





Return parameters



Parameter

Variable Type

Description



None





Usage Examples

RS_FSL_SetInstrumentFromMarker($handle,1,1,"CENTER");





RS_FSL_SetMarkerFrequency

Previous Top Next



* * *



RS_FSL_SetMarkerFrequency



Usage:

RS_FSL_SetMarkerFrequency($DeviceHandle,$Window,$Marker,$Frequency);



Description:

This function moves the selected marker to the specified horizontal frequency position.

Function arguments



Parameter

Variable Type

Description



$DeviceHandle

Object

The device handle returned by RS_FSL_Init



$Window

Integer

The measurement window [1,2]



$Marker

Integer

The selected marker ID.



$Frequency

Float

The horizontal frequency position to move the maker (Hz).





Return parameters



Parameter

Variable Type

Description



None





Usage Examples

RS_FSL_SetMarkerFrequency($handle,1,$mkr,2440000000);





RS_FSL_SetReferenceAmplitude

Previous Top Next



* * *



RS_FSL_SetReferenceAmplitude



Usage:

RS_FSL_SetReferenceAmplitude($DeviceHandle,$Window,$RefLevel);



Description:

This function configures the reference level for the specified window.

Function arguments



Parameter

Variable Type

Description



$DeviceHandle

Object

The device handle returned by RS_FSL_Init



$Window

Integer

The measurement window [1,2]



$RefLevel

Float

The calibrated vertical position of the captured data used as a reference for amplitude measurements.





Return parameters



Parameter

Variable Type

Description



None





Usage Examples

RS_FSL_SetReferenceAmplitude($handle,0);





RS_FSL_SetSweepTime

Previous Top Next



* * *



RS_FSL_SetSweepTime



Usage:

RS_FSL_SetSweepTime($DeviceHandle,$Window,$SweepTime);



Description:

This function configures the sweep time values of the spectrum analyzer.

Function arguments



Parameter

Variable Type

Description



$DeviceHandle

Object

The device handle returned by RS_FSL_Init



$Window

Integer

The measurement window [1,2]



$SweepTime

Float

The length of time to complete one sweep (s).





Return parameters



Parameter

Variable Type

Description



None





Usage Examples

RS_FSL_SetSweepTime($handle,1,.015);





RS_SpecAn_Close

Previous Top Next



* * *



RS_SpecAn_Close



Usage:

RS_SpecAn_Close($DeviceHandle);



Description:

This function performs the following operations:

· Closes the instrument I/O session.

· Destroys the instrument driver session and all of its attributes.

· Deallocates any memory resources the driver uses.





Note: After calling RS_SpecAn_Close, you cannot use the instrument driver again until you call RS_SpecAn_Init

Function arguments



Parameter

Variable Type

Description



$DeviceHandle

Object

The device handle object returned by RS_SpecAn_Init()





Return parameters



Parameter

Variable Type

Description



None

--

--





Usage Examples

RS_SpecAn_Close($Handle);





RS_SpecAn_DisableMarker

Previous Top Next



* * *



RS_SpecAn_DisableMarker



Usage:

RS_SpecAn_DisableMarker($DeviceHandle);



Description:

This function turns off all the markers in the specified measurement window.



Function arguments



Parameter

Variable Type

Description



$DeviceHandle

Object

The device handle object returned by RS_SpecAn_Init





Return parameters



Parameter

Variable Type

Description



None

--

--





Usage Examples

RS_SpecAn_DisableMarker($DeviceHandle);





RS_SpecAn_GetMarkerAmplitude

Previous Top Next



* * *



RS_SpecAn_GetMarkerAmplitude



Usage:

$Amp = RS_SpecAn_GetMarkerAmplitude($DeviceHandle);



Description:

This function returns the amplitude level of the active marker. Function arguments



Parameter

Variable Type

Description



$DeviceHandle

Object

The device handle returned by RS_SpecAn_Init





Return parameters



Parameter

Variable Type

Description



$Amp

Float

The amplitude value of the active marker in current units.





Usage Examples

$Amplitude = RS_SpecAn_GetMarkerAmplitude($handle);





RS_SpecAn_GetMarkerPostion

Previous Top Next



* * *



RS_SpecAn_GetMarkerPostion



Usage:

$Freq = RS_SpecAn_GetMarkerPostion($DeviceHandle);



Description:

This function returns the horizontal position of the selected marker in current units.

Function arguments



Parameter

Variable Type

Description



$DeviceHandle

Object

The device handle returned by RS_FSL_Init





Return parameters



Parameter

Variable Type

Description



$Freq

Float

The horizontal position of the active marker in current units.





Usage Examples

$Freq = RS_SpecAn_GetMarkerPostion($DeviceHandle);





RS_SpecAn_Init

Previous Top Next



* * *



RS_SpecAn_Init



Usage:

$DeviceHandle = RS_SpecAn_Init($ResourceString $IdQuery, $Reset, $OptionString);



Description:

This function performs the following initialization actions:

· Creates a new instrument driver session.

· Opens a session to the specified device using the interface and address you specify for the Resource Name parameter.

· If the ID Query parameter is set to TRUE, this function queries the instrument ID and checks that it is valid for this instrument driver.

· If the Reset parameter is set to TRUE, this function resets the instrument to a known state.

· The user can use the OptionsString parameter to specify the initial values of certain IVI inherent attributes for the session

· Sends initialization commands to set the instrument to the state necessary for the operation of the instrument driver.





Note: It is generally a good programming habit to close the instrument handle when the program is done using the instrument. This can be done with the RS_SpecAn_Close function.

Function arguments



Parameter

Variable Type

Description



$DeviceName

String

Resource string of the R&S Spectrum Analyzer



$IDQuery

Boolean

Specify whether you want the instrument driver to perform an ID Query.



$Reset

Boolean

Specify whether you want to restart the instrument during the initialization procedure.



$OptionString

String

The format of an assignment in the OptionsString parameteris "Name=Value", where Name is one of: RangeCheck, QuerytInstrStatus, Cache, Simulate, RecordCoercions, InterchangeCheck,or DriverSetup. Value is either true or false except for DriverSetup. If the Options String parameter contains an assignment for the Driver Setup attribute, the Initialize function assumes that everything following "DriverSetup=" is part of the assignment.





Return parameters



Parameter

Variable Type

Description



$DeviceHandle

Object

The handle of the device





Usage Examples

$DeviceHandle = RS_SpecAn_Init($ResourceString true, true, "");





RS_SpecAn_InitiateSweep

Previous Top Next



* * *



RS_SpecAn_InitiateSweep

Usage:

RS_SpecAn_InitiateSweep($DeviceHandle,$timeoutms);



Description:

Initiates an acquisition and waits until the sweep completes or the timeout occurs. If an acquisition is already in progress, it is restarted.

Function arguments



Parameter

Variable Type

Description



$DeviceHandle

Object

The device handle returned by RS_SpecAn_Init



$timeoutms

Integer

Timeout period in milliseconds





Return parameters



Parameter

Variable Type

Description



None

--

--





Usage Examples

RS_SpecAn_InitiateSweep($DeviceHandle,1000);





RS_SpecAn_MarkerSearch

Previous Top Next



* * *



RS_SpecAn_MarkerSearch



Usage:

RS_SpecAn_MarkerSearch($DeviceHandle,$SearchType);



Description:

Performs the selected search for the active marker.

Function arguments



Parameter

Variable Type

Description



$DeviceHandle

Object

The device handle returned by RS_SpecAn_Init



$SearchType

String

Type of marker search to perform. Valid values are:

· "PEAK"

· "MINIMUM"

· "NEXTPEAK"

· "NEXTPEAKLEFT"

· "NEXTPEAKRIGHT"





Return parameters



Parameter

Variable Type

Description



None

--

--





Usage Examples

RS_SpecAn_MarkerSearch($DeviceHandle,"PEAK");





RS_SpecAn_MeasureChannelPower

Previous Top Next



* * *



RS_SpecAn_MeasureChannelPower



Usage:

$Ch_Power = RS_SpecAn_MeasureChannelPower($DeviceHandle,$Bandwidth,$timeoutms);



Description:

This function Performs a power measurement of a Tx channel of the given bandwidth, centered around the current frequency.

Function arguments



Parameter

Variable Type

Description



$DeviceHandle

Object

The device handle returned by RS_FSL_Init



$Bandwidth

Float

Bandwidth of Tx channel to measure power of



$timeoutms

Integer

Timeout in ms to wait for power measurement to complete





Return parameters



Parameter

Variable Type

Description



$Ch_Power

Float

Power in dBm.





Usage Examples

$Ch_Power = RS_SpecAn_MeasureChannelPower($DeviceHandle,100000,500);





RS_SpecAn_QuerySCPI

Previous Top Next



* * *



RS_SpecAn_QuerySCPI



Usage:

$response = RS_SpecAn_QuerySCPI($DeviceHandle,$Command,$desiredCount);



Description:

Outputs the supplied SCPI to the instrument and returns the respond as a string

Function arguments



Parameter

Variable Type

Description



$DeviceHandle

Object

The device handle returned by RS_SpecAn_Init



$Command

String

SCPI command



$desiredCount

Integer

Number of bytes to read back





Return parameters



Parameter

Variable Type

Description



$response

String

Instrument response





Usage Examples

$response = RS_SpecAn_QuerySCPI($DeviceHandle,$Command,$desiredCount);





RS_SpecAn_Reset

Previous Top Next



* * *



RS_SpecAn_Reset



Usage:

RS_SpecAn_Reset($DeviceHandle);



Description:

This function resets the instrument.





Function arguments



Parameter

Variable Type

Description



$DeviceHandle

Object

The device handle object returned by RS_SpecAn_Init





Return parameters



Parameter

Variable Type

Description



None

--

--





Usage Examples

RS_SpecAn_Reset($Handle);





RS_SpecAn_SetActiveMarker

Previous Top Next



* * *



RS_SpecAn_SetActiveMarker



Usage:

RS_SpecAn_SetActiveMarker($DeviceHandle, $Marker);



Description:

Sets the active marker for use in the marker functions.. This must be done prior to using any Marker Functions.

Function arguments



Parameter

Variable Type

Description



$DeviceHandle

Object

The device handle object returned by the RS_SpecAn_Init function.



$Marker

Integer

The marker number to set to active.





Return parameters



Parameter

Variable Type

Description



None

--

--





Usage Examples

RS_SpecAn_SetActiveMarker($DeviceHandle, 1);





RS_SpecAn_SetAmplitudeScale

Previous Top Next



* * *



RS_SpecAn_SetAmplitudeScale



Usage:

RS_SpecAn_SetAmplitudeScale($DeviceHandle, $Scale);



Description:

Sets or gets the scaling of the Y axis in the current unit. If an invalid value is entered, it is coerced to the nearest valid value.

Function arguments



Parameter

Variable Type

Description



$DeviceHandle

Object

The device handle object returned by the RS_SpecAn_Init function.



$Scale

Double

Y axis range (min - max) in current units.





Return parameters



Parameter

Variable Type

Description



None

--

--





Usage Examples

RS_SpecAn_SetAmplitudeScale($DeviceHandle, 50);





RS_SpecAn_SetAmplitudeUnits

Previous Top Next



* * *



RS_SpecAn_SetAmplitudeUnits



Usage:

RS_SpecAn_SetAmplitudeUnits($DeviceHandle, $Units);





Description:

Specifies the units of the Y-axis (amplitude).

Function arguments



Parameter

Variable Type

Description



$DeviceHandle

Object

The device handle object returned by the RS_SpecAn_Init function.



$Units

String

Units of amplitude (vertical scale). Valid values are:

· "DBM"

· "DBMV"

· "DBPW"

· "DBUA"

· "DBUV"

· "VOLTS"

· "WATTS"





Return parameters



Parameter

Variable Type

Description



None

--

--





Usage Examples

RS_SpecAn_SetAmplitudeUnits($DeviceHandle, "DBM");





RS_SpecAn_SetCenterSpan

Previous Top Next



* * *



RS_SpecAn_SetCenterSpan



Usage:

RS_SpecAn_SetCenterSpan($DeviceHandle,$Freq,$Span);



Description:

This function configures the frequency range using the center frequency and frequency span. If span corresponds to zero hertz, then the spectrum analyzer is in time-domain.





This function modifies the Frequency Start and Frequency Stop attributes as follows:

· Frequency Start = center frequency - span/2

· Frequency Stop = center frequency + span/2





Note:

In auto-coupled mode, RBW, VBW and sweep time may be affected by this function.



Function arguments



Parameter

Variable Type

Description



$DeviceHandle

Object

The device handle object returned by the RS_SpecAn_Init function.



$Freq

Float

The Center Frequency



$Span

Float

The Span.





Return parameters



Parameter

Variable Type

Description



None

--

--





Usage Examples

RS_SpecAn_SetCenterSpan($DeviceHandle, 1000000,100000);





RS_SpecAn_SetMarkerPosition

Previous Top Next



* * *



RS_SpecAn_SetMarkerPosition



Usage:

RS_SpecAn_SetMarkerPosition($DeviceHandle,$Position);



Description:

Specifies the frequency or time position of the active marker.

Function arguments



Parameter

Variable Type

Description



$DeviceHandle

Object

The device handle returned by RS_SpecAn_Init



$Position

Double

Position





Return parameters



Parameter

Variable Type

Description



None

--

--





Usage Examples

RS_SpecAn_SetMarkerPosition($DeviceHandle,1000000);





RS_SpecAn_SetReferenceLevel

Previous Top Next



* * *



RS_SpecAn_SetReferenceLevel



Usage:

RS_SpecAn_SetReferenceLevel($DeviceHandle,$Ref_Level);



Description:

Specifies the amplitude value of the reference level.

Function arguments



Parameter

Variable Type

Description



$DeviceHandle

Object

The device handle returned by RS_SpecAn_Init



$Ref_Level

Double

Reference level.





Return parameters



Parameter

Variable Type

Description



None

--

--





Usage Examples

RS_SpecAn_SetReferenceLevel($DeviceHandle,$Ref_Level);





RS_SpecAn_SetResolutionBW

Previous Top Next



* * *



RS_SpecAn_SetResolutionBW



Usage:

RS_SpecAn_SetResolutionBW($DeviceHandle, $resBW);



Description:

Specifies the width of the IF filter in Hertz.

Function arguments



Parameter

Variable Type

Description



$DeviceHandle

Object

The device handle object returned by the RS_SpecAn_Init function.



$resBW

Double

Width of the IF filter in Hertz.





Return parameters



Parameter

Variable Type

Description



None

--

--





Usage Examples

RS_SpecAn_SetResolutionBW($DeviceHandle, 500);





RS_SpecAn_SetResolutionBWAuto

Previous Top Next



* * *



RS_SpecAn_SetResolutionBWAuto



Usage:

RS_SpecAn_SetResolutionBWAuto($DeviceHandle, $auto);





Description:

Turns resolution bandwith auto coupling on/off.

Function arguments



Parameter

Variable Type

Description



$DeviceHandle

Object

The device handle object returned by the RS_SpecAn_Init function.



$auto

Boolean

True/False





Return parameters



Parameter

Variable Type

Description



None

--

--





Usage Examples

RS_SpecAn_SetResolutionBWAuto($DeviceHandle, true);





RS_SpecAn_SetStartStopFrequency

Previous Top Next



* * *



RS_SpecAn_SetStartStopFrequency



Usage:

RS_SpecAn_SetStartStopFrequency($DeviceHandle,$startFreq,$stopFreq);



Description:

This function configures the frequency range of using start frequency and stop frequency. If start frequency is equal to the stop frequency, then the spectrum analyzer is in time-domain mode.





Note:

In auto-coupled mode, resolution bandwidth (RBW), video bandwidth (VBW), and sweep time may be affected .

Function arguments



Parameter

Variable Type

Description



$DeviceHandle

Object

The device handle returned by RS_SpecAn_Init



$startFreq

Float

Start Frequency



$stopFreq

Float

Stop Frequency





Return parameters



Parameter

Variable Type

Description



None

--

--





Usage Examples

RS_SpecAn_SetStartStopFrequency($DeviceHandle,900000,1100000);





RS_SpecAn_SetSweepModeContinuous

Previous Top Next



* * *



RS_SpecAn_SetSweepModeContinuous

Usage:

RS_SpecAn_SetSweepModeContinuous($DeviceHandle,$SweepModeContinuous);



Description:

Turns continuous sweep on/off.

Function arguments



Parameter

Variable Type

Description



$DeviceHandle

Object

The device handle returned by RS_SpecAn_Init



$SweepModeContinuous

Boolean

True/false





Return parameters



Parameter

Variable Type

Description



None

--

--





Usage Examples

RS_SpecAn_SetSweepModeContinuous($DeviceHandle,true);





RS_SpecAn_SetVideoBW

Previous Top Next



* * *



RS_SpecAn_SetVideoBW



Usage:

RS_SpecAn_SetVideoBW($DeviceHandle, $vidBW);



Description:

Specifies the video bandwidth of the post-detection filter in Hertz.

Function arguments



Parameter

Variable Type

Description



$DeviceHandle

Object

The device handle object returned by the RS_SpecAn_Init function.



$vidBW

Float

Bandwidth in Hertz.





Return parameters



Parameter

Variable Type

Description



None

--

--





Usage Examples

RS_SpecAn_SetVideoBW($DeviceHandle, 500);





RS_SpecAn_SetVideoBWAuto

Previous Top Next



* * *



RS_SpecAn_SetVideoBWAuto



Usage:

RS_SpecAn_SetVideoBWAuto($DeviceHandle, $auto);





Description:

Turns video bandwith auto coupling on/off.

Function arguments



Parameter

Variable Type

Description



$DeviceHandle

Object

The device handle object returned by the RS_SpecAn_Init function.



$auto

Boolean

True/False





Return parameters



Parameter

Variable Type

Description



None

--

--





Usage Examples

RS_SpecAn_SetVideoBWAuto($DeviceHandle, true);





RS_SpecAn_SignalTrackEnabled

Previous Top Next



* * *



RS_SpecAn_SignalTrackEnabled



Usage:

RS_SpecAn_SignalTrackEnabled($DeviceHandle, $SignalTrackEnabled);





Description:

Enables/disables signal tracking of the marker.

Function arguments



Parameter

Variable Type

Description



$DeviceHandle

Object

The device handle object returned by the RS_SpecAn_Init function.



$SignalTrackEnabled

Boolean

True/False





Return parameters



Parameter

Variable Type

Description



None

--

--





Usage Examples

RS_SpecAn_SignalTrackEnabled($DeviceHandle, true);





RS_SpecAn_WriteSCPI

Previous Top Next



* * *



RS_SpecAn_WriteSCPI



Usage:

RS_SpecAn_WriteSCPI($DeviceHandle, $command);





Description:

Writes raw string (SCPI command) to the instrument input.

Function arguments



Parameter

Variable Type

Description



$DeviceHandle

Object

The device handle object returned by the RS_SpecAn_Init function.



$command

String

SCPI command.





Return parameters



Parameter

Variable Type

Description



None

--

--





Usage Examples

RS_SpecAn_WriteSCPI($DeviceHandle, $command);





Supported Instruments

Previous Top Next



* * *



Supported Instruments



Current revision of instrument driver supports these instruments and firmwares:



Instrument

Supported Firmware

Remarks



FSP

4.40





FSU

4.41





FSQ

4.45





FSG

4.49





FSL

2.00





FSUP

4.37





FSMR

4.36





FSV

1.40





FSW

1.10





Personalities

Version



FS-K5

4.40



FS-K7

4.40



FSL-K7

1.90



FSV-K7S

1.50



FS-K8

4.40



FSL-K8

1.90



FS-K9

4.50



FSL-K9

1.90



FSV-K10

1.50



FS-K30

4.40



FSL-K30

1.90



FS-K40

4.40



FSQ-K70

4.40



FS-K72

4.40



FSL-K72

1.90



FS-K73

4.40



FS-K74

4.40



FS-K82

4.40



FSL-K82

1.90



FS-K83

4.40



FS-K84

4.40



FSL-K84

1.90



FS-K85

4.40



FSQ-K90

4.40



FSP-K90

4.40



FSQ-K91

4.40



FSL-K91

1.90



FSQ-K92

4.40



FSL-K92

1.90



FSQ-K93

4.40



FSP-K93

4.40



FSL-K93

1.90



FSQ-K94

4.40



FSV-K100

1.55



FSMR-B2





FSP-B3





FSL-B5





FSP-B6





FS-B9





FSP-B10





FSP-B15





FSU-B21





FSL-B22





FS-B23





FSU-B24





FS-B25





FSUP-B60





FSQ-B71





FSMR-B73





FSU-B73





Driver version





IVI-COM Driver Version 2.0.5.0





ST400NT_GetConnectedControllers

Previous Top Next



* * *



ST400NT_GetConnectedControllers

Usage:

$value = ST400NT_GetConnectedControllers();

Description:

This function enables the motor controllers on all stations and returns a string representing the number of controllers connected. This function must be done after ST400NT_MotorStationsInit() and before the controller can be used.

Function Arguments



Parameter

Variable Type

Description



$none





Return Parameters



Parameter

Variable Type

Description



$value

String

A string representing the number of controllers connected. For Example: "0,1,2,3,N,N,N,N,N,N,N,N,N,N,N,N" indicates that there are 4 controllers connected and are addressed as "0" "1" "2" and "3".





ST400NT_MotorChangeJogSpeed

Previous Top Next



* * *



ST400NT_MotorChangeJogSpeed

Usage:

ST400NT_MotorChangeJogSpeed($address,$speed);

Description:

This function will change the JOG speed for the addressed motor.

Function Arguments



Parameter

Variable Type

Description



$address

String

Motor address for new jog speed



$speed

Integer

Speed





Return Parameters



Parameter

Variable Type

Description



$none





ST400NT_MotorGetPosition

Previous Top Next



* * *



ST400NT_MotorGetPosition

Usage:

$position = ST400NT_MotorGetPosition($address);

Description:

This function will get the internal position counter of the addressed motor.

Function Arguments



Parameter

Variable Type

Description



$address

String

Motor address to get position of.





Return Parameters



Parameter

Variable Type

Description



$position

Integer

Internal position counter for addressed motor.





ST400NT_MotorGetStatusRegister

Previous Top Next



* * *



ST400NT_MotorGetStatusRegister

Usage:

$status = ST400NT_MotorGetStatusRegister($address);

Description:

This function will get the internal status register of the addressed motor.

Function Arguments



Parameter

Variable Type

Description



$address

String

Motor address to get status register of.





Return Parameters



Parameter

Variable Type

Description



$status

Integer

Status register for the addressed motor. The bits are defined as:

· Bit 0 Trigger on

· Bit 1 Motor Paused

· Bit 2 Motor Stopped

· Bit 3 Motor Moving

· Bit 4 CCW Limit reached

· Bit 5 CW Limit reached

· Bit 6 Home Switch is on

· Bit 7 Motor Motion Complete

· Bit 8 Direction (1 = CW, 0 = CCW)

· Bit 9 Position error > 2 steps





ST400NT_MotorGoAbsPos

Previous Top Next



* * *



ST400NT_MotorGoAbsPos

Usage:

ST400NT_MotorGoAbsPos($address,$position);

Description:

This function will move the motor to the specified absolute position.

Function Arguments



Parameter

Variable Type

Description



$address

String

Address of the motor to move.



$position

Integer

Absolute position





Return Parameters



Parameter

Variable Type

Description



$none





ST400NT_MotorJog

Previous Top Next



* * *



ST400NT_MotorJog

Usage:

ST400NT_MotorJog($address,$direction);

Description:

This function will set the addressed motor in JOG mode.

Function Arguments



Parameter

Variable Type

Description



$address

String

Address of the motor to set in JOG mode. ("0" "1" ... Max controller number connected.



$direction

Integer

Direction of motor movement (0 = CW 1 = CWW)





Return Parameters



Parameter

Variable Type

Description



$none





ST400NT_MotorNumberStepRel

Previous Top Next



* * *



ST400NT_MotorNumberStepRel

Usage:

ST400NT_MotorNumberStepRel($address,$stepstogo);

Description:

This function will move the motor the specified number of relative steps.

Function Arguments



Parameter

Variable Type

Description



$address

String

Address of the motor to move.



$stepstogo

Integer

Relative number of steps to move.





Return Parameters



Parameter

Variable Type

Description



$none





ST400NT_MotorPauseOff

Previous Top Next



* * *



ST400NT_MotorPauseOff

Usage:

ST400NT_MotorPauseOff($address);

Description:

This function will un-pause the addressed motor.

Function Arguments



Parameter

Variable Type

Description



$address

String

Address of the motor to un-pause.





Return Parameters



Parameter

Variable Type

Description



$none





ST400NT_MotorPauseOn

Previous Top Next



* * *



ST400NT_MotorPauseOn

Usage:

ST400NT_MotorPauseOn($address);

Description:

This function will pause the addressed motor.

Function Arguments



Parameter

Variable Type

Description



$address

String

Address of the motor to pause.





Return Parameters



Parameter

Variable Type

Description



$none





ST400NT_MotorPowerOff

Previous Top Next



* * *



ST400NT_MotorPowerOff

Usage:

ST400NT_MotorPowerOff($address);

Description:

This function will turn the power to the addressed motor off.

Function Arguments



Parameter

Variable Type

Description



$address

String

Address of the motor to power off.





Return Parameters



Parameter

Variable Type

Description



$none





ST400NT_MotorPowerOn

Previous Top Next



* * *



ST400NT_MotorPowerOn

Usage:

ST400NT_MotorPowerOn($address,$powerdowntime);

Description:

This function will turn the power to the addressed motor on and set the auto power down time.

Function Arguments



Parameter

Variable Type

Description



$address

String

Address of the motor to power on.



$powerdowntime

Integer

Auto power down time in seconds.





Return Parameters



Parameter

Variable Type

Description



$none





ST400NT_MotorSetCurrent

Previous Top Next



* * *



ST400NT_MotorSetCurrent

Usage:

ST400NT_MotorSetCurrent($address,$current);

Description:

This function will set the winding current of the addressed motor.

Function Arguments



Parameter

Variable Type

Description



$address

String

Motor address to set current



$current

Integer

Current in MilliAmps





Return Parameters



Parameter

Variable Type

Description



$none





ST400NT_MotorSetPosition

Previous Top Next



* * *



ST400NT_MotorSetPosition

Usage:

ST400NT_MotorSetPosition($address,$position);

Description:

This function will set the internal position counter for the addressed motor to the specified position.

Function Arguments



Parameter

Variable Type

Description



$address

String

Motor address for new position



$position

Integer

Position





Return Parameters



Parameter

Variable Type

Description



$none





ST400NT_MotorStationsInit

Previous Top Next



* * *



ST400NT_MotorStationsInit

Usage:

ST400NT_MotorStationsInit();

Description:

This function initalizes the motor controllers on all stations to the default values. This function must be done before the controller can be used.

Function Arguments



Parameter

Variable Type

Description



$none





Return Parameters



Parameter

Variable Type

Description



$none





ST400NT_MotorStop

Previous Top Next



* * *



ST400NT_MotorStop

Usage:

ST400NT_MotorStop($address);

Description:

This function will stop the addressed motor's movement.

Function Arguments



Parameter

Variable Type

Description



$address

String

Address of the motor to stop.





Return Parameters



Parameter

Variable Type

Description



$none





ST400NT_MotorTriggerOff

Previous Top Next



* * *



ST400NT_MotorTriggerOff

Usage:

ST400NT_MotorTriggerOff($address);

Description:

This function will clear the addressed motor's trigger.

Function Arguments



Parameter

Variable Type

Description



$address

String

Address of the motor to clear the trigger.





Return Parameters



Parameter

Variable Type

Description



$none





ST400NT_MotorTriggerOn

Previous Top Next



* * *



ST400NT_MotorTriggerOn

Usage:

ST400NT_MotorTriggerOn($address);

Description:

This function will set the addressed motor's trigger.

Function Arguments



Parameter

Variable Type

Description



$address

String

Address of the motor to set the trigger.





Return Parameters



Parameter

Variable Type

Description



$none





ST400NT_PortClose

Previous Top Next



* * *



ST400NT_PortClose

Usage:

ST400NT_PortClose();

Description:

This function closes the com port used by the ST400NT Stepper Motor controller board.

Function Arguments



Parameter

Variable Type

Description



$none





Return Parameters



Parameter

Variable Type

Description



$none





ST400NT_PortOpen

Previous Top Next



* * *



ST400NT_PortOpen

Usage:

ST400NT_PortOpen($comportnumber,$baudrate);

Description:

This function opens the com port connected to the ST400NT Stepper Motor controller board.

Function Arguments



Parameter

Variable Type

Description



$comportnumber

Integer

The comport number used by the ST400NT



$baudrate

Integer

Baud Rate





Return Parameters



Parameter

Variable Type

Description



$none





AeroFlexCombiner_Close

Previous Top Next



* * *





AeroFlexCombiner_Close





Usage:





AeroFlexCombiner_Close($handle);





Description:





This method closes and frees up all resources used by the RF Switch/Combiner.

Function arguments



Parameter

Variable Type

Description



$handle

Object

The handle of the instrument returned from the AeroFlexCombiner_Open function





Return parameters



Parameter

Variable Type

Description



none





Example(s):





AeroFlexCombiner_Close($handle);





AeroFlexCombiner_Open

Previous Top Next



* * *





AeroFlexCombiner_Open





Usage:





$handle = AeroFlexCombiner_Open($CombinerResource);





Description:

This method attempts to boot the RF combiner using the resource string provided.

$CombinerResource must be valid Visa resource strings.

This function initializes a session with the instrument and returns the handle to the test script.





Note: The "boot" time of this instrument (like any PXI instrument) if fairly time consuming, so it's suggested to place any initializations for these instruments in a global initialization script to cut test time significantly, which can be up to 60 seconds when booting a common configuration consisting of an AeroFlex RF Signal Generator, Digitizer, and Combiner.

Function arguments



Parameter

Variable Type

Description



$CombinerResource

String

The resource name of the RF Combiner.





Return parameters



Parameter

Variable Type

Description



$handle

Object

The handle to the instrument session.





Example(s):





$handle = AeroFlexCombiner_Open("PXI2::12::INSTR");





AeroFlexCombiner_SetMode

Previous Top Next



* * *





AeroFlexCombiner_SetMode





Usage:





AeroFlexCombiner_SetMode($handle, $mode);





Description:





This function configures the RF combiner/switch for the desired signal routing. Please note that although this function supports all possible signal routings, not all routing modes are supported on each instrument. The supported modes for each instrument are listed in the parameter description below:

Note: The $Mode string parameter is not case sensitive, and the suggested character capitalization examples below are merely suggested to improve readability of the script.





Function arguments



Parameter

Variable Type

Description



$handle

Object

The handle of the instrument returned from the AeroFlexCombiner_Open function



$mode

String

The desired setting of the RF combiner/switch:





· "ABCtoSUM" = Switches inputs A,B,C to the SUM output (Applies to 3060 and 3065)

· "AtoB" = Routes Signal A to B (Applies to 3060 and 3065)

· "BtoC" = Routes Signal B to C (Applies to 3060 and 3065)

· "BCtoSUMandAtoD" = Routes signals B and C to SUM, and routes A to D (Applies to 3065 only)

· "ABtoSUMandCtoD" = Routes signals A and B to SUM, and C to D (Applies to 3065 only)

· "BtoCandAtoSUM" = Routes Signal B to C, and A to SUM (Applies to 3065 only)

· "AtoBandCtoSUM" = Routes signal A to B, and C to SUM (Applies to 3065 only)

· "BtoCandAtoD" = Routes signal B to C, and A to D (Applies to 3065 only)

· "AtoBandCtoD" = Routes signal A to B, and C to D (Applies to 3065 Only)





Return parameters



Parameter

Variable Type

Description



none





Example(s):





AeroFlexCombiner_SetMode($handle, "ABtoSUMandAtoD");





NI_SWITCH_AbortScan

Previous Top Next



* * *



NI_SWITCH_AbortScan



Usage:

NI_SWITCH_AbortScan($NI_SwitchHandle);



Description:

This function requires NI Switch drivers to be installed on the system.

Aborts the scan in progress.

Initiate a scan with NI_SWITCH_InitiateScan.





Remarks:

· This function is tested with a NI PXI-2569 device.

· When there occurs an error during the execution of the low level NI-Switch functions, Jabil Test while fail and return the error message.

· The function will verify if the given parameter exists, otherwise Jabil Test fails and returns the error message.



Result:

NI_SWITCH_AbortScan($NI_SwitchHandle);

Function arguments



Parameter

Variable Type

Description



$NI_SwitchHandle

Object

A particular NI-SWITCH session established with NI_SWITCH_InitWithTopology, NI_SWITCH_InitializeWithOptions, or NI_SWITCH_Initialize and used for all subsequent NI-SWITCH calls.





Return parameters



Parameter

Variable Type

Description





Example(s):

NI_SWITCH_AbortScan($NI_SwitchHandle);





NI_SWITCH_CanConnect

Previous Top Next



* * *



NI_SWITCH_CanConnect



Usage:

($pathCapability1, $pathCapability2) = NI_SWITCH_CanConnect($NI_SwitchHandle, $channel1, $channel2);



Description:

This function requires NI Switch drivers to be installed on the system.

Verifies that a path between channel1 and channel2 can be created.



Remarks:

· This function is tested with a NI PXI-2569 device.

· When there occurs an error during the execution of the low level NI-Switch functions, Jabil Test while fail and return the error message.

· The function will verify if the given parameter exists, otherwise Jabil Test fails and returns the error message.



Result:

($pathCapability1, $pathCapability2) = NI_SWITCH_CanConnect($NI_SwitchHandle, $channel1, $channel2);

Function arguments



Parameter

Variable Type

Description



$NI_SwitchHandle

Object

A particular NI-SWITCH session established with NI_SWITCH_InitWithTopology, NI_SWITCH_InitializeWithOptions, or NI_SWITCH_Initialize and used for all subsequent NI-SWITCH calls.



$channel1

String

Input one of the channel names of the desired path.



$channel2

String

Input two of the channel names of the desired path.





Return parameters



Parameter

Variable Type

Description



$pathCapability1

Integer

Indicates whether a path is valid.

Possible returned values:

· 1: Indicates that NI-SWITCH can create the path at this time.

· 2: Indicates that the path already exists.

· 3: Indicates that the instrument is not capable of creating a path between the channels you specify.

· 4: Indicates that although the path is valid, NI-SWITCH cannot create the path at this moment because the switch is currently using one or more of the required channels to create another path. You must destroy the other path before creating this one.

· 5: Indicates that the instrument cannot create a path because both channels are connected to different source channels.

· 6: Indicates that NI-SWITCH cannot create a path between the two channels because one of the channels is a configuration channel and unavailable for external connections.



$pathCapability2

String

Indicates whether a path is valid

Possible returned values:

· Path available: Indicates that NI-SWITCH can create the path at this time.

· Path exists: Indicates that the path already exists.

· Path unsupported: Indicates that the instrument is not capable of creating a path between the channels you specify.

· Path resource in use: Indicates that although the path is valid, NI-SWITCH cannot create the path at this moment because the switch is currently using one or more of the required channels to create another path. You must destroy the other path before creating this one.

· Source conflict: Indicates that the instrument cannot create a path because both channels are connected to different source channels.

· Channel not available: Indicates that NI-SWITCH cannot create a path between the two channels because one of the channels is a configuration channel and unavailable for external connections.





Example(s):

($pathCapability1, $pathCapability2) = NI_SWITCH_CanConnect($NI_SwitchHandle, "ch0", "com0");





NI_SWITCH_Close

Previous Top Next



* * *



NI_SWITCH_Close



Usage:

NI_SWITCH_Close($NI_SwitchHandle);



Description:

This function requires NI Switch drivers to be installed on the system.

Terminates the NI-SWITCH session and all of its attributes and deallocates any memory resources the driver uses. You must unlock the session before calling NI_SWITCH_Close. After calling NI_SWITCH_Close, you cannot use the NI-SWITCH again until you call NI_SWITCH_Initialize or NI_SWITCH_InitializeWithOptions.

Remarks:

· This function is tested with a NI PXI-2569 device.

· When there occurs an error during the execution of the low level NI-Switch functions, Jabil Test while fail and return the error message.

· The function will verify if the given parameter exists, otherwise Jabil Test fails and returns the error message.



Result:

NI_SWITCH_Close($NI_SwitchHandle);

Function arguments



Parameter

Variable Type

Description



$NI_SwitchHandle

Object

A particular NI-SWITCH session established with NI_SWITCH_InitWithTopology, NI_SWITCH_InitializeWithOptions, or NI_SWITCH_Initialize and used for all subsequent NI-SWITCH calls.





Return parameters



Parameter

Variable Type

Description





Example(s):

NI_SWITCH_Close($NI_SwitchHandle);





NI_SWITCH_CloseMultiRelais

Previous Top Next



* * *



NI_SWITCH_CloseMultiRelais



Usage:

NI_SWITCH_CloseMultiRelais($NI_SwitchHandle, $relayList, $waitTime);



Description:

This function requires NI Switch drivers to be installed on the system.

This function checks if the relay names exists. If not, the test will fail. Otherwise the relais will be closed. With the parameter waitTime, the function pauses untill all created paths have settled.

Remarks:

· This function is tested with a NI PXI-2569 device.

· When there occurs an error during the execution of the low level NI-Switch functions, Jabil Test while fail and return the error message.

· The function will verify if the given parameter exists, otherwise Jabil Test fails and returns the error message.



Result:

NI_SWITCH_CloseMultiRelais($NI_SwitchHandle, $relayList, $waitTime);

Function arguments



Parameter

Variable Type

Description



$NI_SwitchHandle

Object

A particular NI-SWITCH session established with NI_SWITCH_InitWithTopology, NI_SWITCH_InitializeWithOptions, or NI_SWITCH_Initialize and used for all subsequent NI-SWITCH calls.



$relayList

String

A enumeration of all the relais you want to open.



$waitTime

Integer

Specifies the maximum length of time to wait for all relays in the switch module to activate or deactivate. The wait time unit is milliseconds (ms).





Return parameters



Parameter

Variable Type

Description





Example(s):

NI_SWITCH_CloseMultiRelais($NI_SwitchHandle, "k20, k1, k2, k3", 20);





NI_SWITCH_Commit

Previous Top Next



* * *



NI_SWITCH_Commit



Usage:

NI_SWITCH_Commit($NI_SwitchHandle);



Description:

This function requires NI Switch drivers to be installed on the system.

Downloads the configured scan list and trigger settings to hardware. Calling NI_SWITCH_Commit is optional as it is implicitly called during NI_SWITCH_InitiateScan. Use NI_SWITCH_Commit to arm triggers in a given order or to control when expensive hardware operations are performed.



Remarks:

· This function is tested with a NI PXI-2569 device.

· When there occurs an error during the execution of the low level NI-Switch functions, Jabil Test while fail and return the error message.

· The function will verify if the given parameter exists, otherwise Jabil Test fails and returns the error message.



Result:

NI_SWITCH_Commit($NI_SwitchHandle);

Function arguments



Parameter

Variable Type

Description



$NI_SwitchHandle

Object

A particular NI-SWITCH session established with NI_SWITCH_InitWithTopology, NI_SWITCH_InitializeWithOptions, or NI_SWITCH_Initialize and used for all subsequent NI-SWITCH calls.





Return parameters



Parameter

Variable Type

Description





Example(s):

NI_SWITCH_Commit($NI_SwitchHandle);





NI_SWITCH_ConfigureScanList

Previous Top Next



* * *



NI_SWITCH_ConfigureScanList



Usage:

NI_SWITCH_ConfigureScanList($NI_SwitchHandle, $scanList, $scanMode);



Description:

This function requires NI Switch drivers to be installed on the system.

Configures the scan list and scan mode used for scanning.



Remarks:

· This function is tested with a NI PXI-2569 device.

· When there occurs an error during the execution of the low level NI-Switch functions, Jabil Test while fail and return the error message.

· The function will verify if the given parameter exists, otherwise Jabil Test fails and returns the error message.



Result:

NI_SWITCH_ConfigureScanList($NI_SwitchHandle, $scanList, $scanMode);

Function arguments



Parameter

Variable Type

Description



$NI_SwitchHandle

Object

A particular NI-SWITCH session established with NI_SWITCH_InitWithTopology, NI_SWITCH_InitializeWithOptions, or NI_SWITCH_Initialize and used for all subsequent NI-SWITCH calls.



$scanList

String

The scan list to use.





Scan list characters:

· -> is used in a connect action (channel1->channel2). For example, the string ch0->com0 connects CH0 to COM0.

· ~ is used with '->' in a disconnect action (~channel1->channel2). Valid only in No Action mode. For example, ~ch0->com0 means disconnect CH0 and COM0.

· ; means waiting for debounce, send scan advanced output signal, then wait for trigger input.

· & Separates connect and/or disconnect actions. For example, the string ch0->com0 & ch9->com1 means connect CH0 to COM0 and CH9 to COM1 (in no particular order).

· && means waiting for debounce. For example, ch0->com0 && ch9->com1 means connect CH0 to COM0, wait for the relays to settle, then connect CH9 to COM1.

· : is Used in a channel range (channelX:Y, where X and Y are integers). Text containing a channel range represents multiple scan list entries. For example, the string ch0:7->com0; represents eight scan list entries. A semicolon must appear after the connect action using a channel range.



$scanMode

String

Specifies how the switch module breaks existing connections when scanning.

Possible values:

· No action: Connections remain connected until they are explicitly disconnected by a disconnect action.

· Break before make: Connections from the previous scan list entry are automatically disconnected before executing the current scan list entry.

· Break after make: Currently not supported.





Return parameters



Parameter

Variable Type

Description





Example(s):

NI_SWITCH_ConfigureScanList($NI_SwitchHandle, "ch0->com0; ~ch0->com0 && ch1->com0; ~ch1->com0 &&", "No action");





Meaning:





1 Connect ch0 to com0.

2 Wait for debounce, send scan advanced signal, then wait for trigger input.

3 Disconnect ch0 from com0 and wait for debounce.

4 Connect ch1 to com0.

5 Wait for debounce, send scan advanced signal, then wait for trigger input.

6 Disconnect ch1 from com0 and wait for debounce.

7 If the scan is set to continuous, return to step 1; otherwise, end the scan.





NI_SWITCH_ConfigureScanList($NI_SwitchHandle, "ch0->com0; ch1->com0;", "Break Before Make");





Meaning:

The scan list in this example is equivalent to the scan list in Example 1. Notice that the disconnect actions in Example 1 are no longer required.





NI_SWITCH_ConfigureScanTrigger

Previous Top Next



* * *



NI_SWITCH_ConfigureScanTrigger



Usage:

NI_SWITCH_ConfigureScanTrigger($NI_SwitchHandle, $scanDelay, $triggerInput, $scanAdvancedOutput);



Description:

This function requires NI Switch drivers to be installed on the system.

Configures the scan triggers for the scan list established with NI_SWITCH_ConfigureScanList.

NI_SWITCH_ConfigureScanTrigger sets the location that the switch expects to receive an input trigger to advance through the scan list. This function also sets the location where it outputs a scan advanced signal after it completes an entry in the scan list.



Remarks:

· This function is tested with a NI PXI-2569 device.

· When there occurs an error during the execution of the low level NI-Switch functions, Jabil Test while fail and return the error message.

· The function will verify if the given parameter exists, otherwise Jabil Test fails and returns the error message.



Result:

NI_SWITCH_ConfigureScanTrigger($NI_SwitchHandle, $scanDelay, $triggerInput, $scanAdvancedOutput);

Function arguments



Parameter

Variable Type

Description



$NI_SwitchHandle

Object

A particular NI-SWITCH session established with NI_SWITCH_InitWithTopology, NI_SWITCH_InitializeWithOptions, or NI_SWITCH_Initialize and used for all subsequent NI-SWITCH calls.



$scanDelay

Float

The minimum length of time you want the switch to wait after it creates a path until it asserts a trigger on the scan advanced output line.



$triggerInput

String

Trigger source you want the switch module to use during scanning.

Possible values:

· IMMEDIATE

· EXTERNAL

· SOFTWARE TRIGGER

· TTL0

· TTL1

· TTL2

· TTL3

· TTL4

· TTL5

· TTL6

· TTL7

· PXI STAR

· REAR CONNECTOR

· REAR CONNECTOR MODULE 1

· REAR CONNECTOR MODULE 2

· REAR CONNECTOR MODULE 3

· REAR CONNECTOR MODULE 4

· REAR CONNECTOR MODULE 5

· REAR CONNECTOR MODULE 6

· REAR CONNECTOR MODULE 7

· REAR CONNECTOR MODULE 8

· REAR CONNECTOR MODULE 9

· REAR CONNECTOR MODULE 10

· REAR CONNECTOR MODULE 11

· REAR CONNECTOR MODULE 12

· FRONT CONNECTOR

· FRONT CONNECTOR MODULE 1

· FRONT CONNECTOR MODULE 2

· FRONT CONNECTOR MODULE 3

· FRONT CONNECTOR MODULE 4

· FRONT CONNECTOR MODULE 5

· FRONT CONNECTOR MODULE 6

· FRONT CONNECTOR MODULE 7

· FRONT CONNECTOR MODULE 8

· FRONT CONNECTOR MODULE 9

· FRONT CONNECTOR MODULE 10

· FRONT CONNECTOR MODULE 11

· FRONT CONNECTOR MODULE 12



$scanAdvancedOutput

String

Output destination of the scan advanced trigger signal.

Possible values:

· NONE

· EXTERNAL

· TTL0

· TTL1

· TTL2

· TTL3

· TTL4

· TTL5

· TTL6

· TTL7

· PXI STAR

· REAR CONNECTOR

· REAR CONNECTOR MODULE 1

· REAR CONNECTOR MODULE 2

· REAR CONNECTOR MODULE 3

· REAR CONNECTOR MODULE 4

· REAR CONNECTOR MODULE 5

· REAR CONNECTOR MODULE 6

· REAR CONNECTOR MODULE 7

· REAR CONNECTOR MODULE 8

· REAR CONNECTOR MODULE 9

· REAR CONNECTOR MODULE 10

· REAR CONNECTOR MODULE 11

· REAR CONNECTOR MODULE 12

· FRONT CONNECTOR

· FRONT CONNECTOR MODULE 1

· FRONT CONNECTOR MODULE 2

· FRONT CONNECTOR MODULE 3

· FRONT CONNECTOR MODULE 4

· FRONT CONNECTOR MODULE 5

· FRONT CONNECTOR MODULE 6

· FRONT CONNECTOR MODULE 7

· FRONT CONNECTOR MODULE 8

· FRONT CONNECTOR MODULE 9

· FRONT CONNECTOR MODULE 10

· FRONT CONNECTOR MODULE 11

· FRONT CONNECTOR MODULE 12





Return parameters



Parameter

Variable Type

Description





Example(s):

NI_SWITCH_ConfigureScanTrigger($NI_SwitchHandle, 2.0, "FRONT CONNECTOR", "REAR CONNECTOR");





NI_SWITCH_Connect

Previous Top Next



* * *



NI_SWITCH_Connect



Usage:

NI_SWITCH_Connect($NI_SwitchHandle, $channel1, $channel2);



Description:

This function requires NI Switch drivers to be installed on the system.

Creates a path between channel1 and channel2. NI-SWITCH calculates and uses the shortest path between the two channels.



Remarks:

· This function is tested with a NI PXI-2569 device.

· When there occurs an error during the execution of the low level NI-Switch functions, Jabil Test while fail and return the error message.

· The function will verify if the given parameter exists, otherwise Jabil Test fails and returns the error message.



Result:

NI_SWITCH_Connect($NI_SwitchHandle, $channel1, $channel2);

Function arguments



Parameter

Variable Type

Description



$NI_SwitchHandle

Object

A particular NI-SWITCH session established with NI_SWITCH_InitWithTopology, NI_SWITCH_InitializeWithOptions, or NI_SWITCH_Initialize and used for all subsequent NI-SWITCH calls.



$channel1

String

Input one of the channel names of the desired path.



$channel2

String

Input two of the channel names of the desired path.





Return parameters



Parameter

Variable Type

Description





Example(s):

NI_SWITCH_Connect($NI_SwitchHandle, "ch0", "com0");





NI_SWITCH_Disable

Previous Top Next



* * *



NI_SWITCH_Disable



Usage:

NI_SWITCH_Disable($NI_SwitchHandle);



Description:

This function requires NI Switch drivers to be installed on the system.

Places the switch module in a quiescent state, where it has minimal or no impact on the system to which it is connected. All channels are disconnected and any scan in progress is aborted.



Remarks:

· This function is tested with a NI PXI-2569 device.

· When there occurs an error during the execution of the low level NI-Switch functions, Jabil Test while fail and return the error message.

· The function will verify if the given parameter exists, otherwise Jabil Test fails and returns the error message.



Result:

NI_SWITCH_Disable($NI_SwitchHandle);

Function arguments



Parameter

Variable Type

Description



$NI_SwitchHandle

Object

A particular NI-SWITCH session established with NI_SWITCH_InitWithTopology, NI_SWITCH_InitializeWithOptions, or NI_SWITCH_Initialize and used for all subsequent NI-SWITCH calls.





Return parameters



Parameter

Variable Type

Description





Example(s):

NI_SWITCH_Disable($NI_SwitchHandle);





NI_SWITCH_Disconnect

Previous Top Next



* * *



NI_SWITCH_Disconnect



Usage:

NI_SWITCH_Disconnect($NI_SwitchHandle, $channel1, $channel2);



Description:

This function requires NI Switch drivers to be installed on the system.

Destroys the path between two channels that you create with the NI_SWITCH_Connect or NI_SWITCH_SetPath function.



Remarks:

· This function is tested with a NI PXI-2569 device.

· When there occurs an error during the execution of the low level NI-Switch functions, Jabil Test while fail and return the error message.

· The function will verify if the given parameter exists, otherwise Jabil Test fails and returns the error message.



Result:

NI_SWITCH_Disconnect($NI_SwitchHandle, $channel1, $channel2);

Function arguments



Parameter

Variable Type

Description



$NI_SwitchHandle

Object

A particular NI-SWITCH session established with NI_SWITCH_InitWithTopology, NI_SWITCH_InitializeWithOptions, or NI_SWITCH_Initialize and used for all subsequent NI-SWITCH calls.



$channel1

String

Input one of the channel names of the desired path.



$channel2

String

Input two of the channel names of the desired path.





Return parameters



Parameter

Variable Type

Description





Example(s):

NI_SWITCH_Disconnect($NI_SwitchHandle, "ch0", "com0");





NI_SWITCH_DisconnectAll

Previous Top Next



* * *



NI_SWITCH_DisconnectAll



Usage:

NI_SWITCH_DisconnectAll($NI_SwitchHandle);



Description:

This function requires NI Switch drivers to be installed on the system.

Breaks all existing paths.



Remarks:

· This function is tested with a NI PXI-2569 device.

· When there occurs an error during the execution of the low level NI-Switch functions, Jabil Test while fail and return the error message.

· The function will verify if the given parameter exists, otherwise Jabil Test fails and returns the error message.



Result:

NI_SWITCH_DisconnectAll($NI_SwitchHandle);

Function arguments



Parameter

Variable Type

Description



$NI_SwitchHandle

Object

A particular NI-SWITCH session established with NI_SWITCH_InitWithTopology, NI_SWITCH_InitializeWithOptions, or NI_SWITCH_Initialize and used for all subsequent NI-SWITCH calls.





Return parameters



Parameter

Variable Type

Description





Example(s):

NI_SWITCH_DisconnectAll($NI_SwitchHandle);





NI_SWITCH_GetPath

Previous Top Next



* * *



NI_SWITCH_GetPath



Usage:

$path = NI_SWITCH_GetPath($NI_SwitchHandle, $channel1, $channel2, $bufferSize);



Description:

This function requires NI Switch drivers to be installed on the system.

Returns a string that identifies the explicit path created with NI_SWITCH_Connect. Pass this string to NI_SWITCH_SetPath to establish the exact same path in future connections. In some cases, multiple paths are available between two channels. When you call NI_SWITCH_Connect, NI-SWITCH selects an available path; however, the driver may not always select the same path through the switch module. NI_SWITCH_GetPath only returns those paths explicitly created by NI_SWITCH_Connect or NI_SWITCH_SetPath. For example, if you connect channels CH1 and CH3, and then channels CH2 and CH3, an explicit path between channels CH1 and CH2 does not exist and an error is returned.



Remarks:

· This function is tested with a NI PXI-2569 device.

· When there occurs an error during the execution of the low level NI-Switch functions, Jabil Test while fail and return the error message.

· The function will verify if the given parameter exists, otherwise Jabil Test fails and returns the error message.



Result:

$path = NI_SWITCH_GetPath($NI_SwitchHandle, $channel1, $channel2, $bufferSize);

Function arguments



Parameter

Variable Type

Description



$NI_SwitchHandle

Object

A particular NI-SWITCH session established with NI_SWITCH_InitWithTopology, NI_SWITCH_InitializeWithOptions, or NI_SWITCH_Initialize and used for all subsequent NI-SWITCH calls.



$channel1

String

Input one of the channel names of the desired path. Pass the other channel name as channel2.



$channel2

String

Input two of the channel names of the desired path. Pass the other channel name as channel1.



$bufferSize

Integer

Pass the number of bytes for the returned path.





Return parameters



Parameter

Variable Type

Description



$path

String

A string composed of comma-separated paths between channel1 and channel2. The first and last names in the path are the endpoints of the path. All other channels in the path are configuration channels.





Example(s):

$path = NI_SWITCH_GetPath($NI_SwitchHandle, "ch0", "com0", 256);





NI_SWITCH_GetRelayCount

Previous Top Next



* * *



NI_SWITCH_GetRelayCount



Usage:

$relayCount = NI_SWITCH_GetRelayCount($NI_SwitchHandle, $relayName);



Description:

This function requires NI Switch drivers to be installed on the system.

Returns the number of times the relay has changed from closed to open. Relay count is useful for tracking relay lifetime and usage. Call NI_SWITCH_WaitForDebounce before NI_SWITCH_GetRelayCount to ensure an accurate count.



Remarks:

· This function is tested with a NI PXI-2569 device.

· When there occurs an error during the execution of the low level NI-Switch functions, Jabil Test while fail and return the error message.

· The function will verify if the given parameter exists, otherwise Jabil Test fails and returns the error message.



Result:

$relayCount = NI_SWITCH_GetRelayCount($NI_SwitchHandle, $relayName);

Function arguments



Parameter

Variable Type

Description



$NI_SwitchHandle

Object

A particular NI-SWITCH session established with NI_SWITCH_InitWithTopology, NI_SWITCH_InitializeWithOptions, or NI_SWITCH_Initialize and used for all subsequent NI-SWITCH calls.



$relayName

String

Name of the relay.





Return parameters



Parameter

Variable Type

Description



$relayCount

Integer

The number of relay cycles.





Example(s):

$relayCount = NI_SWITCH_GetRelayCount($NI_SwitchHandle, "k2");





NI_SWITCH_GetRelayName

Previous Top Next



* * *



NI_SWITCH_GetRelayName



Usage:

$relayName = NI_SWITCH_GetRelayName($NI_SwitchHandle, $index, $relayNameBufferSize);



Description:

This function requires NI Switch drivers to be installed on the system.

Returns the relay name string that is in the relay list at the specified index.





Remarks:

· This function is tested with a NI PXI-2569 device.

· When there occurs an error during the execution of the low level NI-Switch functions, Jabil Test while fail and return the error message.

· The function will verify if the given parameter exists, otherwise Jabil Test fails and returns the error message.



Result:

$relayName = NI_SWITCH_GetRelayName($NI_SwitchHandle, $index, $relayNameBufferSize);

Function arguments



Parameter

Variable Type

Description



$NI_SwitchHandle

Object

A particular NI-SWITCH session established with NI_SWITCH_InitWithTopology, NI_SWITCH_InitializeWithOptions, or NI_SWITCH_Initialize and used for all subsequent NI-SWITCH calls.



$index

Integer

A 1-based index into the channel table. The default value is 1.



$relayNameBufferSize

Integer

Pass the number of bytes for the relayNameBuffer parameter.





Return parameters



Parameter

Variable Type

Description



$relayName

String

Returns the relay name for the index you specify.





Example(s):

$relayName = NI_SWITCH_GetRelayName($NI_SwitchHandle, 3, 256);





NI_SWITCH_GetRelayPosition

Previous Top Next



* * *



NI_SWITCH_GetRelayPosition



Usage:

($relayPosition1, $relayPosition2) = NI_SWITCH_GetRelayPosition($NI_SwitchHandle, $relayName);



Description:

This function requires NI Switch drivers to be installed on the system.

Returns the relay position for the relay specified in the relayName parameter.



Remarks:

· This function is tested with a NI PXI-2569 device.

· When there occurs an error during the execution of the low level NI-Switch functions, Jabil Test while fail and return the error message.

· The function will verify if the given parameter exists, otherwise Jabil Test fails and returns the error message.



Result:

($relayPosition1, $relayPosition2) = NI_SWITCH_GetRelayPosition($NI_SwitchHandle, $relayName);

Function arguments



Parameter

Variable Type

Description



$NI_SwitchHandle

Object

A particular NI-SWITCH session established with NI_SWITCH_InitWithTopology, NI_SWITCH_InitializeWithOptions, or NI_SWITCH_Initialize and used for all subsequent NI-SWITCH calls.



$relayName

String

Name of the relay.





Return parameters



Parameter

Variable Type

Description



$relayPosition1

Integer

Indicates whether the relay is open or closed



$relayPosition2

String

Indicates whether the relay is open or closed





Example(s):

($relayPosition1, $relayPosition2) = NI_SWITCH_GetRelayPosition($NI_SwitchHandle, "k1");





NI_SWITCH_GetRevision

Previous Top Next



* * *



NI_SWITCH_GetRevision



Usage:

($instrumentDriverRevision, $firmwareRevision) = NI_SWITCH_GetRevision($NI_SwitchHandle);



Description:

This function requires NI Switch drivers to be installed on the system.

Returns the revision of the NI-SWITCH driver.



Remarks:

· This function is tested with a NI PXI-2569 device.

· When there occurs an error during the execution of the low level NI-Switch functions, Jabil Test while fail and return the error message.

· The function will verify if the given parameter exists, otherwise Jabil Test fails and returns the error message.



Result:

($instrumentDriverRevision, $firmwareRevision) = NI_SWITCH_GetRevision($NI_SwitchHandle);

Function arguments



Parameter

Variable Type

Description



$NI_SwitchHandle

Object

A particular NI-SWITCH session established with NI_SWITCH_InitWithTopology, NI_SWITCH_InitializeWithOptions, or NI_SWITCH_Initialize and used for all subsequent NI-SWITCH calls.





Return parameters



Parameter

Variable Type

Description



$instrumentDriverRevision

String

NI-SWITCH software revision numbers in the form of a string.



$firmwareRevision

String

Currently unsupported.





Example(s):

($instrumentDriverRevision, $firmwareRevision) = NI_SWITCH_GetRevision($NI_SwitchHandle);





NI_SWITCH_Initialize

Previous Top Next



* * *



NI_SWITCH_Initialize



Usage:

$NI_SwitchHandle = NI_SWITCH_Initialize($resourceName, $idQuery, $resetDevice);



Description:

This function requires NI Switch drivers to be installed on the system.

Returns a session handle used to identify the switch module in all subsequent instrument driver calls. NI_SWITCH_Initialize creates a new IVI instrument driver session for the switch module specified in the resourceName parameter. If multiple topologies are valid for that device, NI-SWITCH uses the default topology specified in MAX. By default, the switch module is reset to a known state. An error is returned if a session to the specified resource exists in another process. The same session is returned if NI_SWITCH_Initialize is called twice in the same process for the same resource with the same topology.





Remarks:

· This function is tested with a NI PXI-2569 device.

· When there occurs an error during the execution of the low level NI-Switch functions, Jabil Test while fail and return the error message.

· The function will verify if the given parameter exists, otherwise Jabil Test fails and returns the error message.



Result:

$NI_SwitchHandle = NI_SWITCH_Initialize($resourceName, $idQuery, $resetDevice);

Function arguments



Parameter

Variable Type

Description



$resourceName

String

Resource name of the switch module to initialize. The resource name is assigned in Measurement & Automation Explorer (MAX).



$idQuery

Boolean

Specifies whether the driver performs an ID query. When this parameter is set to "true", the driver verifies that the instrument is of a type that this driver supports.



$resetDevice

Boolean

Specifies whether to reset the switch module during the initialization process.

Possible values:

· True: reset the device.

· False: Currently unsupported. The device will not reset.





Return parameters



Parameter

Variable Type

Description



$NI_SwitchHandle

Object

Returns a handle that you use to identify the instrument in all subsequent instrument driver function calls.





Example(s):

$NI_SwitchHandle = NI_SWITCH_Initialize("Dev2", "true", "true");





NI_SWITCH_InitializeWithOptions

Previous Top Next



* * *



NI_SWITCH_InitializeWithOptions



Usage:

$NI_SwitchHandle = NI_SWITCH_InitializeWithOptions($resourceName, $idQuery, $resetDevice, $optionString);



Description:

This function requires NI Switch drivers to be installed on the system.

Returns a session handle used to identify the switch module in all subsequent instrument driver calls and optionally sets the initial state of the session. NI_SWITCH_InitializeWithOptions creates a new IVI instrument driver session for the switch module specified in the resourceName parameter. If multiple topologies are valid for that device, NI-SWITCH uses the default topology specified in MAX. The topology is also configurable in the optionString parameter. By default, the switch module is reset to a known state. Enable simulation in the optionString parameter. An error is returned if a session to the specified resource exists in another process. The same session is returned if NI_SWITCH_InitializeWithOptions is called twice in the same process for the same resource with the same topology.





Remarks:

· This function is tested with a NI PXI-2569 device.

· When there occurs an error during the execution of the low level NI-Switch functions, Jabil Test while fail and return the error message.

· The function will verify if the given parameter exists, otherwise Jabil Test fails and returns the error message.



Result:

$NI_SwitchHandle = NI_SWITCH_InitializeWithOptions($resourceName, $idQuery, $resetDevice, $optionString);

Function arguments



Parameter

Variable Type

Description



$resourceName

String

Resource name of the switch module to initialize. The resource name is assigned in Measurement & Automation Explorer (MAX).



$idQuery

Boolean

Specifies whether the driver performs an ID query. When this parameter is set to "true", the driver verifies that the instrument is of a type that this driver supports.



$resetDevice

Boolean

Specifies whether to reset the switch module during the initialization process.

Possible values:

· True: reset the device.

· False: The device will not reset.



$optionString

String

Sets initial values of certain attributes for the NI-SWITCH session. The format of the optionString is, "AttributeStringName=Value" where AttributeStringName is the name of the attribute shown above and Value is the value to which the attribute will be set. To set multiple attributes, separate assignments with a comma. If you pass an empty string for this parameter, the NI-SWITCH session uses the default values for the attributes. You can override the default values by explicitly assigning a value. You do not have to specify all of the available attributes. If you do not specify an attribute, its default value is used.

Possible attribute string names with default value:

· RangeCheck : 1

· QueryInstrStatus : 1

· Cache : 1

· Simulate : 0

· RecordCoercions : 0

· DriverSetup : topology 1127/2-Wire 32x1 Mux





Return parameters



Parameter

Variable Type

Description



$NI_SwitchHandle

Object

Returns a handle that you use to identify the instrument in all subsequent instrument driver function calls.





Example(s):

$NI_SwitchHandle = NI_SWITCH_InitializeWithOptions("Dev2", "true", "true", "Simulate=1, DriverSetup=topology:1127/2-Wire 32x1 Mux");





NI_SWITCH_InitiateScan

Previous Top Next



* * *



NI_SWITCH_InitiateScan



Usage:

NI_SWITCH_InitiateScan($NI_SwitchHandle);



Description:

This function requires NI Switch drivers to be installed on the system.

Commits the configured scan list and trigger settings to hardware and initiates the scan. If NI_SWITCH_Commit was called earlier, NI_SWITCH_InitiateScan only initiates the scan and returns immediately.



Remarks:

· This function is tested with a NI PXI-2569 device.

· When there occurs an error during the execution of the low level NI-Switch functions, Jabil Test while fail and return the error message.

· The function will verify if the given parameter exists, otherwise Jabil Test fails and returns the error message.



Result:

NI_SWITCH_InitiateScan($NI_SwitchHandle);

Function arguments



Parameter

Variable Type

Description



$NI_SwitchHandle

Object

A particular NI-SWITCH session established with NI_SWITCH_InitWithTopology, NI_SWITCH_InitializeWithOptions, or NI_SWITCH_Initialize and used for all subsequent NI-SWITCH calls.





Return parameters



Parameter

Variable Type

Description





Example(s):

NI_SWITCH_InitiateScan($NI_SwitchHandle);





NI_SWITCH_InitializeWithTopology

Previous Top Next



* * *



NI_SWITCH_InitializeWithTopology



Usage:

$NI_SwitchHandle = NI_SWITCH_InitializeWithTopology($resourceName, $topology, $simulate, $resetDevice);



Description:

This function requires NI Switch drivers to be installed on the system.

Returns a session handle used to identify the switch module in all subsequent instrument driver calls and sets the topology of the switch module.



NI_SWITCH_InitializeWithTopology creates a new IVI instrument driver session for the switch module specified in the resourceName parameter. The driver uses the topology specified in the topology parameter and overrides the topology specified in MAX. By default, the switch module is reset to a known state. Enable simulation by specifying the topology and setting the simulate parameter to true;





Remarks:

· This function is tested with a NI PXI-2569 device.

· When there occurs an error during the execution of the low level NI-Switch functions, Jabil Test while fail and return the error message.

· The function will verify if the given parameter exists, otherwise Jabil Test fails and returns the error message.



Result:

$NI_SwitchHandle = NI_SWITCH_InitializeWithTopology($resourceName, $topology, $simulate, $resetDevice);

Function arguments



Parameter

Variable Type

Description



$resourceName

String

Resource name of the switch module to initialize. The resource name is assigned in Measurement & Automation Explorer (MAX).



$topology

String

Pass the topology name you want to use for the switch you specify with the resourceName parameter.



$simulate

Boolean

Enables simulation of the switch module specified in the resourceName parameter.

Possible values:

· True: Simulate

· False: Do not simulate



$resetDevice

Boolean

Specifies whether to reset the switch module during the initialization process.

Possible values:

· True: reset the device.

· False: The device will not reset.





Return parameters



Parameter

Variable Type

Description



$NI_SwitchHandle

Object

Returns a handle that you use to identify the instrument in all subsequent instrument driver function calls.





Example(s):

$NI_SwitchHandle = NI_SWITCH_InitializeWithTopology("Dev2", "100-SPST topology", "false", "true");





NI_SWITCH_IsDebounced

Previous Top Next



* * *



NI_SWITCH_IsDebounced



Usage:

$isDebounced = NI_SWITCH_IsDebounced($NI_SwitchHandle);



Description:

This function requires NI Switch drivers to be installed on the system.

Indicates if all created paths have settled.



Remarks:

· This function is tested with a NI PXI-2569 device.

· When there occurs an error during the execution of the low level NI-Switch functions, Jabil Test while fail and return the error message.

· The function will verify if the given parameter exists, otherwise Jabil Test fails and returns the error message.



Result:

$isDebounced = NI_SWITCH_IsDebounced($NI_SwitchHandle);

Function arguments



Parameter

Variable Type

Description



$NI_SwitchHandle

Object

A particular NI-SWITCH session established with NI_SWITCH_InitWithTopology, NI_SWITCH_InitializeWithOptions, or NI_SWITCH_Initialize and used for all subsequent NI-SWITCH calls.





Return parameters



Parameter

Variable Type

Description



$isDebounced

Boolean

True indicates that all created paths have settled. False indicates that all created paths have not settled.





Example(s):

$isDebounced = NI_SWITCH_IsDebounced($NI_SwitchHandle);





NI_SWITCH_IsScanning

Previous Top Next



* * *



NI_SWITCH_IsScanning



Usage:

$isScanning = NI_SWITCH_IsScanning($NI_SwitchHandle);



Description:

This function requires NI Switch drivers to be installed on the system.

Indicates the status of the scan.



Remarks:

· This function is tested with a NI PXI-2569 device.

· When there occurs an error during the execution of the low level NI-Switch functions, Jabil Test while fail and return the error message.

· The function will verify if the given parameter exists, otherwise Jabil Test fails and returns the error message.



Result:

$isScanning = NI_SWITCH_IsScanning($NI_SwitchHandle);

Function arguments



Parameter

Variable Type

Description



$NI_SwitchHandle

Object

A particular NI-SWITCH session established with NI_SWITCH_InitWithTopology, NI_SWITCH_InitializeWithOptions, or NI_SWITCH_Initialize and used for all subsequent NI-SWITCH calls.





Return parameters



Parameter

Variable Type

Description



$isScanning

Boolean

True indicates that the switch is scanning. False indicates that the switch is idle.





Example(s):

$= NI_SWITCH_IsScanning($NI_SwitchHandle);





NI_SWITCH_Get

Previous Top Next



* * *



NI_SWITCH_OpenAllRelais



Usage:

NI_SWITCH_OpenAllRelais($NI_SwitchHandle, $waitTime);



Description:

This function requires NI Switch drivers to be installed on the system.

The function will open all the relais of associated with the created handle $Handle.



Remarks:

· This function is tested with a NI PXI-2569 device.

· When there occurs an error during the execution of the low level NI-Switch functions, Jabil Test while fail and return the error message.

· The function will verify if the given parameter exists, otherwise Jabil Test fails and returns the error message.



Result:

NI_SWITCH_OpenAllRelais($NI_SwitchHandle, $waitTime);

Function arguments



Parameter

Variable Type

Description



$NI_SwitchHandle

Object

A particular NI-SWITCH session established with NI_SWITCH_InitWithTopology, NI_SWITCH_InitializeWithOptions, or NI_SWITCH_Initialize and used for all subsequent NI-SWITCH calls.



$waitTime

Integer

Specifies the maximum length of time to wait for all relays in the switch module to activate or deactivate. The wait time unit is milliseconds (ms).





Return parameters



Parameter

Variable Type

Description





Example(s):

NI_SWITCH_OpenAllRelais($NI_SwitchHandle, 20);





NI_SWITCH_OpenMultiRelais

Previous Top Next



* * *



NI_SWITCH_OpenMultiRelais



Usage:

NI_SWITCH_OpenMultiRelais($NI_SwitchHandle, $relayList, $waitTime);



Description:

This function requires NI Switch drivers to be installed on the system.

This function checks if the relay names exists. If not, the test will fail. Otherwise the relais will be opened. With the parameter waitTime, the function pauses untill all created paths have settled.

Remarks:

· This function is tested with a NI PXI-2569 device.

· When there occurs an error during the execution of the low level NI-Switch functions, Jabil Test while fail and return the error message.

· The function will verify if the given parameter exists, otherwise Jabil Test fails and returns the error message.



Result:

NI_SWITCH_OpenMultiRelais($NI_SwitchHandle, $relayList, $waitTime);

Function arguments



Parameter

Variable Type

Description



$NI_SwitchHandle

Object

A particular NI-SWITCH session established with NI_SWITCH_InitWithTopology, NI_SWITCH_InitializeWithOptions, or NI_SWITCH_Initialize and used for all subsequent NI-SWITCH calls.



$relayList

String

A enumeration of all the relais you want to open.



$waitTime

Integer

Specifies the maximum length of time to wait for all relays in the switch module to activate or deactivate. The wait time unit is milliseconds (ms).





Return parameters



Parameter

Variable Type

Description





Example(s):

NI_SWITCH_OpenMultiRelais($NI_SwitchHandle, "k20, k1, k2, k3", 20);





NI_SWITCH_RelayControl

Previous Top Next



* * *



NI_SWITCH_RelayControl



Usage:

NI_SWITCH_RelayControl($NI_SwitchHandle, $relayName, $relayAction);



Description:

This function requires NI Switch drivers to be installed on the system.

Controls individual relays of the switch.



Remarks:

· This function is tested with a NI PXI-2569 device.

· When there occurs an error during the execution of the low level NI-Switch functions, Jabil Test while fail and return the error message.

· The function will verify if the given parameter exists, otherwise Jabil Test fails and returns the error message.



Result:

NI_SWITCH_RelayControl($NI_SwitchHandle, $relayName, $relayAction);

Function arguments



Parameter

Variable Type

Description



$NI_SwitchHandle

Object

A particular NI-SWITCH session established with NI_SWITCH_InitWithTopology, NI_SWITCH_InitializeWithOptions, or NI_SWITCH_Initialize and used for all subsequent NI-SWITCH calls.



$relayName

String

Name of the relay.



$relayAction

String

Specifies whether to open or close a given relay.

Possible values:

· Open

· Close





Return parameters



Parameter

Variable Type

Description





Example(s):

NI_SWITCH_RelayControl($NI_SwitchHandle, "k1", "Open");





NI_SWITCH_Reset

Previous Top Next



* * *



NI_SWITCH_Reset



Usage:

NI_SWITCH_Reset($NI_SwitchHandle);



Description:

This function requires NI Switch drivers to be installed on the system.

Disconnects all created paths and returns the switch module to the state at initialization. Configuration channel and source channel settings remain unchanged.



Remarks:

· This function is tested with a NI PXI-2569 device.

· When there occurs an error during the execution of the low level NI-Switch functions, Jabil Test while fail and return the error message.

· The function will verify if the given parameter exists, otherwise Jabil Test fails and returns the error message.



Result:

NI_SWITCH_Reset($NI_SwitchHandle);

Function arguments



Parameter

Variable Type

Description



$NI_SwitchHandle

Object

A particular NI-SWITCH session established with NI_SWITCH_InitWithTopology, NI_SWITCH_InitializeWithOptions, or NI_SWITCH_Initialize and used for all subsequent NI-SWITCH calls.





Return parameters



Parameter

Variable Type

Description





Example(s):

NI_SWITCH_Reset($NI_SwitchHandle);





NI_SWITCH_ResetWithDefaults

Previous Top Next



* * *



NI_SWITCH_ResetWithDefaults



Usage:

NI_SWITCH_ResetWithDefaults($NI_SwitchHandle);



Description:

This function requires NI Switch drivers to be installed on the system.

Resets the switch module and applies initial user specified settings from the logical name used to initialize the session. If the session was created without a logical name, this function is equivalent to NI_SWITCH_Reset.



Remarks:

· This function is tested with a NI PXI-2569 device.

· When there occurs an error during the execution of the low level NI-Switch functions, Jabil Test while fail and return the error message.

· The function will verify if the given parameter exists, otherwise Jabil Test fails and returns the error message.



Result:

NI_SWITCH_ResetWithDefaults($NI_SwitchHandle);

Function arguments



Parameter

Variable Type

Description



$NI_SwitchHandle

Object

A particular NI-SWITCH session established with NI_SWITCH_InitWithTopology, NI_SWITCH_InitializeWithOptions, or NI_SWITCH_Initialize and used for all subsequent NI-SWITCH calls.





Return parameters



Parameter

Variable Type

Description





Example(s):

NI_SWITCH_ResetWithDefaults($NI_SwitchHandle);





NI_SWITCH_RouteScanAdvancedOutput

Previous Top Next



* * *



NI_SWITCH_RouteScanAdvancedOutput



Usage:

NI_SWITCH_RouteScanAdvancedOutput($NI_SwitchHandle, $scanAdvancedOutputConnector, $scanAdvancedOutputBusLine, $invert);



Description:

This function requires NI Switch drivers to be installed on the system.

Routes the scan advanced output trigger from a trigger bus line (TTLx) to the front or rear connector.



Remarks:

· This function is tested with a NI PXI-2569 device.

· When there occurs an error during the execution of the low level NI-Switch functions, Jabil Test while fail and return the error message.

· The function will verify if the given parameter exists, otherwise Jabil Test fails and returns the error message.



Result:

NI_SWITCH_RouteScanAdvancedOutput($NI_SwitchHandle, $scanAdvancedOutputConnector, $scanAdvancedOutputBusLine, $invert);

Function arguments



Parameter

Variable Type

Description



$NI_SwitchHandle

Object

A particular NI-SWITCH session established with NI_SWITCH_InitWithTopology, NI_SWITCH_InitializeWithOptions, or NI_SWITCH_Initialize and used for all subsequent NI-SWITCH calls.



$scanAdvancedOutputConnector

String

The scan advanced output trigger destination.

Possible values:

· FRONT: front connector

· REAR: rear connector



$scanAdvancedOutputBusLine

String

The trigger line to route the scan advanced output trigger from the front or rear connector.

Possible values:

· NONE

· TTL0

· TTL1

· TTL2

· TTL3

· TTL4

· TTL5

· TTL6

· TTL7



$invert

Boolean

If true, inverts the input trigger signal from falling to rising or vice versa.





Return parameters



Parameter

Variable Type

Description





Example(s):

NI_SWITCH_RouteScanAdvancedOutput($NI_SwitchHandle, "FRONT", "TTL1", "true");





NI_SWITCH_RouteTriggerInput

Previous Top Next



* * *



NI_SWITCH_RouteTriggerInput



Usage:

NI_SWITCH_RouteTriggerInput($NI_SwitchHandle, $triggerInputConnector, $triggerInputBusLine, $invert);



Description:

This function requires NI Switch drivers to be installed on the system.

Routes the input trigger from the front or rear connector to a trigger bus line (TTLx). To disconnect the route, call this function again and specify None for trigger bus line parameter.



Remarks:

· This function is tested with a NI PXI-2569 device.

· When there occurs an error during the execution of the low level NI-Switch functions, Jabil Test while fail and return the error message.

· The function will verify if the given parameter exists, otherwise Jabil Test fails and returns the error message.



Result:

NI_SWITCH_RouteTriggerInput($NI_SwitchHandle, $triggerInputConnector, $triggerInputBusLine, $invert);

Function arguments



Parameter

Variable Type

Description



$NI_SwitchHandle

Object

A particular NI-SWITCH session established with NI_SWITCH_InitWithTopology, NI_SWITCH_InitializeWithOptions, or NI_SWITCH_Initialize and used for all subsequent NI-SWITCH calls.



$triggerInputConnector

String

The location of the input trigger source on the switch module.

Possible values:

· FRONT: front connector

· REAR: rear connector



$triggerInputBusLine

String

The trigger line to route the input trigger.

Possible values:

· NONE

· TTL0

· TTL1

· TTL2

· TTL3

· TTL4

· TTL5

· TTL6

· TTL7



$invert

Boolean

If true, inverts the input trigger signal from falling to rising or vice versa.





Return parameters



Parameter

Variable Type

Description





Example(s):

NI_SWITCH_RouteTriggerInput($NI_SwitchHandle, "FRONT", "TTL0", "false");





NI_SWITCH_Scan

Previous Top Next



* * *



NI_SWITCH_Scan



Usage:

NI_SWITCH_Scan($NI_SwitchHandle, $scanList, $initiation);



Description:

This function requires NI Switch drivers to be installed on the system.

Takes the scan list provided, programs the switching hardware and initiates the scan. Once initiation is complete, the operation will return. The scan list itself is comprised of a list of channel connections separated by semicolons. For example, the following scan list would scan the first three channels of a multiplexer. Example: com0->ch0; com0->ch1; com0->ch2;. Refer to scan lists for additional information. To see the status of the scan, you can call either NI_SWITCH_IsScanning or NI_SWITCH_WaitForScanComplete. Use the NI_SWITCH_ConfigureScanTrigger function to configure the scan trigger. Use the NI_SWITCH_AbortScan function to stop the scan if you are in continuous scan mode (Refer to NI_SWITCH_SetContinuousScan); otherwise the scan halts automatically when the end of the scan list is reached.



Remarks:

· This function is tested with a NI PXI-2569 device.

· When there occurs an error during the execution of the low level NI-Switch functions, Jabil Test while fail and return the error message.

· The function will verify if the given parameter exists, otherwise Jabil Test fails and returns the error message.



Result:

NI_SWITCH_Scan($NI_SwitchHandle, $scanList, $initiation);

Function arguments



Parameter

Variable Type

Description



$NI_SwitchHandle

Object

A particular NI-SWITCH session established with NI_SWITCH_InitWithTopology, NI_SWITCH_InitializeWithOptions, or NI_SWITCH_Initialize and used for all subsequent NI-SWITCH calls.



$scanList

String

Pass the scan list you want the instrument to use.



$initiation

String

Use the initiation parameter to specify whether the switch or the measurement device initiates the scan trigger handshake. This parameter determines whether to wait for the scan to reach a trigger point before completing.

Possible values:

· MEASUREMENT DEVICE INITIATED: the measurement device initiates the scan. This function then waits until the switch is waiting for a trigger from the measurement device before completing.

· SWITCH INITIATED: the switch initiates the scan. This function then completes immediately after initiating the scan.





Return parameters



Parameter

Variable Type

Description





Example(s):

NI_SWITCH_Scan($NI_SwitchHandle, $scanList, $initiation);





NI_SWITCH_SelfTest

Previous Top Next



* * *



NI_SWITCH_SelfTest



Usage:

($selfTestResult, $selfTestMessage) = NI_SWITCH_SelfTest($NI_SwitchHandle);



Description:

This function requires NI Switch drivers to be installed on the system.

Resets the switch module and applies initial user specified settings from the logical name used to initialize the session. If the session was created without a logical name, this function is equivalent to NI_SWITCH_Reset.



Remarks:

· This function is tested with a NI PXI-2569 device.

· When there occurs an error during the execution of the low level NI-Switch functions, Jabil Test while fail and return the error message.

· The function will verify if the given parameter exists, otherwise Jabil Test fails and returns the error message.



Result:

($selfTestResult, $selfTestMessage) = NI_SWITCH_SelfTest($NI_SwitchHandle);

Function arguments



Parameter

Variable Type

Description



$NI_SwitchHandle

Object

A particular NI-SWITCH session established with NI_SWITCH_InitWithTopology, NI_SWITCH_InitializeWithOptions, or NI_SWITCH_Initialize and used for all subsequent NI-SWITCH calls.





Return parameters



Parameter

Variable Type

Description



$selfTestResult

Integer

Value returned from the switch self-test.

Possible values:

· 0: Passed

· 1: Failed



$selfTestMessage

String

Self-test response string from the switch.





Example(s):

($selfTestResult, $selfTestMessage) = NI_SWITCH_SelfTest($NI_SwitchHandle);





NI_SWITCH_SendSoftwareTrigger

Previous Top Next



* * *



NI_SWITCH_SendSoftwareTrigger



Usage:

NI_SWITCH_SendSoftwareTrigger($NI_SwitchHandle);



Description:

This function requires NI Switch drivers to be installed on the system.

Sends a software trigger to the switch specified in the NI-SWITCH session. When the trigger input is set to software trigger through the NI_SWITCH_ConfigureScanTrigger function, the scan does not proceed from a semicolon (wait for trigger) until NI_SWITCH_SendSoftwareTrigger is called.



Remarks:

· This function is tested with a NI PXI-2569 device.

· When there occurs an error during the execution of the low level NI-Switch functions, Jabil Test while fail and return the error message.

· The function will verify if the given parameter exists, otherwise Jabil Test fails and returns the error message.



Result:

NI_SWITCH_SendSoftwareTrigger($NI_SwitchHandle);

Function arguments



Parameter

Variable Type

Description



$NI_SwitchHandle

Object

A particular NI-SWITCH session established with NI_SWITCH_InitWithTopology, NI_SWITCH_InitializeWithOptions, or NI_SWITCH_Initialize and used for all subsequent NI-SWITCH calls.





Return parameters



Parameter

Variable Type

Description





Example(s):

NI_SWITCH_SendSoftwareTrigger($NI_SwitchHandle);





NI_SWITCH_SetContinuousScan

Previous Top Next



* * *



NI_SWITCH_SetContinuousScan



Usage:

NI_SWITCH_SetContinuousScan($NI_SwitchHandle, $continuousScan);



Description:

This function requires NI Switch drivers to be installed on the system.

Sets the to loop continuously through the scan list or to stop scanning after one pass through the scan list.



Remarks:

· This function is tested with a NI PXI-2569 device.

· When there occurs an error during the execution of the low level NI-Switch functions, Jabil Test while fail and return the error message.

· The function will verify if the given parameter exists, otherwise Jabil Test fails and returns the error message.



Result:

NI_SWITCH_SetContinuousScan($NI_SwitchHandle, $continuousScan);

Function arguments



Parameter

Variable Type

Description



$NI_SwitchHandle

Object

A particular NI-SWITCH session established with NI_SWITCH_InitWithTopology, NI_SWITCH_InitializeWithOptions, or NI_SWITCH_Initialize and used for all subsequent NI-SWITCH calls.



$continuousScan

Boolean

If true, loops continuously through the scan list during scanning. If false, the scan stops after one pass through the scan list





Return parameters



Parameter

Variable Type

Description





Example(s):

NI_SWITCH_SetContinuousScan($NI_SwitchHandle, "true");





NI_SWITCH_SetPath

Previous Top Next



* * *



NI_SWITCH_SetPath



Usage:

NI_SWITCH_SetPath($NI_SwitchHandle, $pathList);



Description:

This function requires NI Switch drivers to be installed on the system.

Connects two channels by specifying an explicit path in pathList. NI_SWITCH_SetPath is particularly useful where path repeatability is important, such as in calibrated signal paths. If this is not necessary, use NI_SWITCH_Connect.



Remarks:

· This function is tested with a NI PXI-2569 device.

· When there occurs an error during the execution of the low level NI-Switch functions, Jabil Test while fail and return the error message.

· The function will verify if the given parameter exists, otherwise Jabil Test fails and returns the error message.



Result:

NI_SWITCH_SetPath($NI_SwitchHandle, $pathList);

Function arguments



Parameter

Variable Type

Description



$NI_SwitchHandle

Object

A particular NI-SWITCH session established with NI_SWITCH_InitWithTopology, NI_SWITCH_InitializeWithOptions, or NI_SWITCH_Initialize and used for all subsequent NI-SWITCH calls.



$pathList

String

A string composed of comma-separated paths between channel 1 and channel 2. The first and last names in the path are the endpoints of the path. Every other channel in the path are configuration channels.





Return parameters



Parameter

Variable Type

Description





Example(s):

NI_SWITCH_SetPath($NI_SwitchHandle, "ch0->com0");





NI_SWITCH_SetRelayPosition

Previous Top Next



* * *



NI_SWITCH_SetRelayPosition



Usage:

NI_SWITCH_SetRelayPosition($NI_SwitchHandle, $relayName, $relayAction, $waitTime);



Description:

This function requires NI Switch drivers to be installed on the system.

Controls individual relays of the switch.



Remarks:

· This function is tested with a NI PXI-2569 device.

· When there occurs an error during the execution of the low level NI-Switch functions, Jabil Test while fail and return the error message.

· The function will verify if the given parameter exists, otherwise Jabil Test fails and returns the error message.



Result:

NI_SWITCH_SetRelayPosition($NI_SwitchHandle, $relayName, $relayAction, $waitTime);

Function arguments



Parameter

Variable Type

Description



$NI_SwitchHandle

Object

A particular NI-SWITCH session established with NI_SWITCH_InitWithTopology, NI_SWITCH_InitializeWithOptions, or NI_SWITCH_Initialize and used for all subsequent NI-SWITCH calls.



$relayName

String

Name of the relay.



$relayAction

String

Specifies whether to open or close a given relay.

Possible values:

· Open

· Close



$waitTime

Integer

Specifies the maximum length of time to wait for all relays in the switch module to activate or deactivate. The wait time unit is milliseconds (ms).





Return parameters



Parameter

Variable Type

Description





Example(s):

NI_SWITCH_SetRelayPosition($NI_SwitchHandle, "k1", "Open", 20);





NI_SWITCH_WaitForDebounce

Previous Top Next



* * *



NI_SWITCH_WaitForDebounce



Usage:

NI_SWITCH_WaitForDebounce($NI_SwitchHandle, $waitTime);



Description:

This function requires NI Switch drivers to be installed on the system.

Pauses until all created paths have settled.



Remarks:

· This function is tested with a NI PXI-2569 device.

· When there occurs an error during the execution of the low level NI-Switch functions, Jabil Test while fail and return the error message.

· The function will verify if the given parameter exists, otherwise Jabil Test fails and returns the error message.



Result:

NI_SWITCH_WaitForDebounce($NI_SwitchHandle, $waitTime);

Function arguments



Parameter

Variable Type

Description



$NI_SwitchHandle

Object

A particular NI-SWITCH session established with NI_SWITCH_InitWithTopology, NI_SWITCH_InitializeWithOptions, or NI_SWITCH_Initialize and used for all subsequent NI-SWITCH calls.



$waitTime

Integer

Specifies the maximum length of time to wait for all relays in the switch module to activate or deactivate. The wait time unit is milliseconds (ms).





Return parameters



Parameter

Variable Type

Description





Example(s):

NI_SWITCH_WaitForDebounce($NI_SwitchHandle, 20);





NI_SWITCH_WaitForScanComplete

Previous Top Next



* * *



NI_SWITCH_WaitForScanComplete



Usage:

NI_SWITCH_WaitForScanComplete($NI_SwitchHandle, $maximumTime);



Description:

This function requires NI Switch drivers to be installed on the system.

Pauses until the switch stops scanning or until the maximum time has elapsed.



Remarks:

· This function is tested with a NI PXI-2569 device.

· When there occurs an error during the execution of the low level NI-Switch functions, Jabil Test while fail and return the error message.

· The function will verify if the given parameter exists, otherwise Jabil Test fails and returns the error message.



Result:

NI_SWITCH_WaitForScanComplete($NI_SwitchHandle, $maximumTime);

Function arguments



Parameter

Variable Type

Description



$NI_SwitchHandle

Object

A particular NI-SWITCH session established with NI_SWITCH_InitWithTopology, NI_SWITCH_InitializeWithOptions, or NI_SWITCH_Initialize and used for all subsequent NI-SWITCH calls.



$maximumTime

Integer

Specifies the maximum length of time to wait for the switch module to stop scanning.





Return parameters



Parameter

Variable Type

Description





Example(s):

NI_SWITCH_WaitForScanComplete($NI_SwitchHandle, 20);





SMX_SWITCH_Abort

Previous Top Next



* * *



SMX_SWITCH_Abort



Usage:

SMX_SWITCH_Abort($ResourceNumber);



Description:

This function requires SMX4032 drivers to be installed on the system.

Aborts the current operation and prepares the scanner to accept new commands.

Initiate a scan with SMX_SWITCH_AutoScan.





Remarks:

· This function is tested with a SMX4032 device.

· When there occurs an error during the execution of the low level SMX-Switch functions, Jabil Test while fail and return the error message.

· The function will verify if the given parameter exists, otherwise Jabil Test fails and returns the error message.



Result:

SMX_SWITCH_Abort($ResourceNumber);

Function arguments



Parameter

Variable Type

Description



$ResourceNumber

Integer

The number of the SMX4032 device to be used. (i.e. Device 0, 1, etc.)





Return parameters



Parameter

Variable Type

Description





Example(s):

SMX_SWITCH_Abort($ResourceNumber);





SMX_SWITCH_AutoScan

Previous Top Next



* * *



SMX_SWITCH_AutoScan



Usage:

SMX_SWITCH_AutoScan($ResourceNumber);



Description:

This function requires SMX4032 drivers to be installed on the system.

Scans iPoints of the ScanList. Steptime and Acutation time must be set prior to this call.





Remarks:

· This function is tested with a SMX4032 device.

· When there occurs an error during the execution of the low level SMX-Switch functions, Jabil Test while fail and return the error message.

· The function will verify if the given parameter exists, otherwise Jabil Test fails and returns the error message.



Result:

SMX_SWITCH_AutoScan($ResourceNumber,$iPoints);

Function arguments



Parameter

Variable Type

Description



$ResourceNumber

Integer

The number of the SMX4032 device to be used. (i.e. Device 0, 1, etc.)



$iPoints

Integer

The number of points in the scan. The number must be between 1 and 192, inclusive.





Return parameters



Parameter

Variable Type

Description





Example(s):

SMX_SWITCH_AutoScan($ResourceNumber,$iPoints);





SMX_SWITCH_CleanRelays

Previous Top Next



* * *



SMX_SWITCH_CleanRelays



Usage:

SMX_SWITCH_CleanRelays($ResourceNumber);



Description:

This function requires SMX4032 drivers to be installed on the system.

Cleans all Relays.





Remarks:

· This function is tested with a SMX4032 device.

· When there occurs an error during the execution of the low level SMX-Switch functions, Jabil Test while fail and return the error message.

· The function will verify if the given parameter exists, otherwise Jabil Test fails and returns the error message.



Result:

SMX_SWITCH_CleanRelays($ResourceNumber);

Function arguments



Parameter

Variable Type

Description



$ResourceNumber

Integer

The number of the SMX4032 device to be used. (i.e. Device 0, 1, etc.)





Return parameters



Parameter

Variable Type

Description





Example(s):

SMX_SWITCH_CleanRelays($ResourceNumber);





SMX_SWITCH_Delay

Previous Top Next



* * *



SMX_SWITCH_Delay



Usage:

SMX_SWITCH_Delay($dTime);



Description:

This function requires SMX4032 drivers to be installed on the system.

Waits for the delay of dTime in seconds.





Remarks:

· This function is tested with a SMX4032 device.

· When there occurs an error during the execution of the low level SMX-Switch functions, Jabil Test while fail and return the error message.

· The function will verify if the given parameter exists, otherwise Jabil Test fails and returns the error message.



Result:

SMX_SWITCH_Delay($dTime);

Function arguments



Parameter

Variable Type

Description



$dTime

Float

The number of seconds to wait.





Return parameters



Parameter

Variable Type

Description





Example(s):

SMX_SWITCH_Delay($dTime);





SMX_SWITCH_GetActuationTime

Previous Top Next



* * *



SMX_SWITCH_GetActuationTime



Usage:

$ActuationTime = SMX_SWITCH_GetActuationTime($ResourceNumber);



Description:

This function requires SMX4032 drivers to be installed on the system.

Reads the currently set actuation time.





Remarks:

· This function is tested with a SMX4032 device.

· When there occurs an error during the execution of the low level SMX-Switch functions, Jabil Test while fail and return the error message.

· The function will verify if the given parameter exists, otherwise Jabil Test fails and returns the error message.



Result:

$ActuationTime = SMX_SWITCH_GetActuationTime($ResourceNumber);

Function arguments



Parameter

Variable Type

Description



$ResourceNumber

Integer

The number of the SMX4032 device to be used. (i.e. Device 0, 1, etc.)





Return parameters



Parameter

Variable Type

Description



$ActuationTime

Float

The currently set relay actuation time.





Example(s):

$ActuationTime = SMX_SWITCH_GetActuationTime($ResourceNumber);





SMX_SWITCH_GetBusInfo

Previous Top Next



* * *



SMX_SWITCH_GetBusInfo



Usage:

($Bus, $Slot) = SMX_SWITCH_GetBusInfo($ResourceNumber);



Description:

This function requires SMX4032 drivers to be installed on the system.

Gets the PCI bus and slot number for the scanner.





Remarks:

· This function is tested with a SMX4032 device.

· When there occurs an error during the execution of the low level SMX-Switch functions, Jabil Test while fail and return the error message.

· The function will verify if the given parameter exists, otherwise Jabil Test fails and returns the error message.



Result:

($Bus, $Slot) = SMX_SWITCH_GetBusInfo($ResourceNumber);

Function arguments



Parameter

Variable Type

Description



$ResourceNumber

Integer

The number of the SMX4032 device to be used. (i.e. Device 0, 1, etc.)





Return parameters



Parameter

Variable Type

Description



$Bus

Integer

PCI Bus number for the scanner.



$Slot

Integer

PCI slot number for the scanner.





Example(s):

($Bus, $Slot) = SMX_SWITCH_GetBusInfo($ResourceNumber);





SMX_SWITCH_GetConfig

Previous Top Next



* * *



SMX_SWITCH_GetConfig



Usage:

($ConfigCode) = SMX_SWITCH_GetConfig($ResourceNumber);



Description:

This function requires SMX4032 drivers to be installed on the system.

Gets the configuration code for the selected scanner.





Remarks:

· This function is tested with a SMX4032 device.

· When there occurs an error during the execution of the low level SMX-Switch functions, Jabil Test while fail and return the error message.

· The function will verify if the given parameter exists, otherwise Jabil Test fails and returns the error message.



Result:

($ConfigCode) = SMX_SWITCH_GetConfig($ResourceNumber);

Function arguments



Parameter

Variable Type

Description



$ResourceNumber

Integer

The number of the SMX4032 device to be used. (i.e. Device 0, 1, etc.)





Return parameters



Parameter

Variable Type

Description



$ConfigCode

Integer

The configuration code for the scanner.





Example(s):

($ConfigCode) = SMX_SWITCH_GetConfig($ResourceNumber);





SMX_SWITCH_GetGrdVer

Previous Top Next



* * *



SMX_SWITCH_GetGrdVer



Usage:

($FirmwareVersion) = SMX_SWITCH_GetGrdVer($ResourceNumber);



Description:

This function requires SMX4032 drivers to be installed on the system.

Gets the scanner firmware version.





Remarks:

· This function is tested with a SMX4032 device.

· When there occurs an error during the execution of the low level SMX-Switch functions, Jabil Test while fail and return the error message.

· The function will verify if the given parameter exists, otherwise Jabil Test fails and returns the error message.



Result:

($FirmwareVersion) = SMX_SWITCH_GetGrdVer($ResourceNumber);

Function arguments



Parameter

Variable Type

Description



$ResourceNumber

Integer

The number of the SMX4032 device to be used. (i.e. Device 0, 1, etc.)





Return parameters



Parameter

Variable Type

Description



$FirmwareVersion

Integer

The firmware version for the scanner.





Example(s):

($FirmwareVersion) = SMX_SWITCH_GetGrdVer($ResourceNumber);





SMX_SWITCH_GetHWVer

Previous Top Next



* * *



SMX_SWITCH_GetHWVer



Usage:

($HardwareRevision) = SMX_SWITCH_GetHWVer($ResourceNumber);



Description:

This function requires SMX4032 drivers to be installed on the system.

Gets the hardware version of the selected scanner.





Remarks:

· This function is tested with a SMX4032 device.

· When there occurs an error during the execution of the low level SMX-Switch functions, Jabil Test while fail and return the error message.

· The function will verify if the given parameter exists, otherwise Jabil Test fails and returns the error message.



Result:

($HardwareRevision) = SMX_SWITCH_GetHWVer($ResourceNumber);

Function arguments



Parameter

Variable Type

Description



$ResourceNumber

Integer

The number of the SMX4032 device to be used. (i.e. Device 0, 1, etc.)





Return parameters



Parameter

Variable Type

Description



$HardwareRevision

Integer

The hardware version for the scanner.





Example(s):

($HardwareRevision) = SMX_SWITCH_GetHWVer($ResourceNumber);





SMX_SWITCH_GetID

Previous Top Next



* * *



SMX_SWITCH_GetID



Usage:

($ID) = SMX_SWITCH_GetID($ResourceNumber);



Description:

This function requires SMX4032 drivers to be installed on the system.

Gets the identification code for the selected scanner.





Remarks:

· This function is tested with a SMX4032 device.

· When there occurs an error during the execution of the low level SMX-Switch functions, Jabil Test while fail and return the error message.

· The function will verify if the given parameter exists, otherwise Jabil Test fails and returns the error message.



Result:

($ID) = SMX_SWITCH_GetID($ResourceNumber);

Function arguments



Parameter

Variable Type

Description



$ResourceNumber

Integer

The number of the SMX4032 device to be used. (i.e. Device 0, 1, etc.)





Return parameters



Parameter

Variable Type

Description



$ID

Integer

The unique ID code for the scanner.





Example(s):

($ID) = SMX_SWITCH_GetID($ResourceNumber);





SMX_SWITCH_GetManDate

Previous Top Next



* * *



SMX_SWITCH_GetManDate



Usage:

($Month,$Day,$Year) = SMX_SWITCH_GetManDate($ResourceNumber);



Description:

This function requires SMX4032 drivers to be installed on the system.

Gets the Manufacturing Date for the selected scanner.





Remarks:

· This function is tested with a SMX4032 device.

· When there occurs an error during the execution of the low level SMX-Switch functions, Jabil Test while fail and return the error message.

· The function will verify if the given parameter exists, otherwise Jabil Test fails and returns the error message.



Result:

($Month,$Day,$Year) = SMX_SWITCH_GetManDate($ResourceNumber);

Function arguments



Parameter

Variable Type

Description



$ResourceNumber

Integer

The number of the SMX4032 device to be used. (i.e. Device 0, 1, etc.)





Return parameters



Parameter

Variable Type

Description



$Month

Integer

The Month of manufacture.



$Day

Integer

The Day of manufacture.



$Year

Integer

The Year of manufacture.





Example(s):

($Month,$Day,$Year) = SMX_SWITCH_GetManDate($ResourceNumber);





SMX_SWITCH_GetScanList

Previous Top Next



* * *



SMX_SWITCH_GetScanList



Usage:

($Address) = SMX_SWITCH_GetScanList($ResourceNumber);



Description:

This function requires SMX4032 drivers to be installed on the system.

Gets the address of the on board scan list selected scanner.





Remarks:

· This function is tested with a SMX4032 device.

· When there occurs an error during the execution of the low level SMX-Switch functions, Jabil Test while fail and return the error message.

· The function will verify if the given parameter exists, otherwise Jabil Test fails and returns the error message.



Result:

($Address) = SMX_SWITCH_GetScanList($ResourceNumber);

Function arguments



Parameter

Variable Type

Description



$ResourceNumber

Integer

The number of the SMX4032 device to be used. (i.e. Device 0, 1, etc.)





Return parameters



Parameter

Variable Type

Description



$Address

Integer

The Address of the on board scan list.





Example(s):

($Address) = SMX_SWITCH_GetScanList($ResourceNumber);





SMX_SWITCH_GetShortedChannel

Previous Top Next



* * *



SMX_SWITCH_GetShortedChannel



Usage:

($Shorted) = SMX_SWITCH_GetShortedChannel($ResourceNumber);



Description:

This function requires SMX4032 drivers to be installed on the system.

Gets the first shorted channel.





Remarks:

· This function is tested with a SMX4032 device.

· When there occurs an error during the execution of the low level SMX-Switch functions, Jabil Test while fail and return the error message.

· The function will verify if the given parameter exists, otherwise Jabil Test fails and returns the error message.



Result:

($Shorted) = SMX_SWITCH_GetShortedChannel($ResourceNumber);

Function arguments



Parameter

Variable Type

Description



$ResourceNumber

Integer

The number of the SMX4032 device to be used. (i.e. Device 0, 1, etc.)





Return parameters



Parameter

Variable Type

Description



$Shorted

Integer

The first currently shorted channel.





Example(s):

($Shorted) = SMX_SWITCH_GetShortedChannel($ResourceNumber);





SMX_SWITCH_GetStepTime

Previous Top Next



* * *



SMX_SWITCH_GetStepTime



Usage:

($StepTime) = SMX_SWITCH_GetStepTime($ResourceNumber);



Description:

This function requires SMX4032 drivers to be installed on the system.

Gets the currently set step time.





Remarks:

· This function is tested with a SMX4032 device.

· When there occurs an error during the execution of the low level SMX-Switch functions, Jabil Test while fail and return the error message.

· The function will verify if the given parameter exists, otherwise Jabil Test fails and returns the error message.



Result:

($StepTime) = SMX_SWITCH_GetStepTime($ResourceNumber);

Function arguments



Parameter

Variable Type

Description



$ResourceNumber

Integer

The number of the SMX4032 device to be used. (i.e. Device 0, 1, etc.)





Return parameters



Parameter

Variable Type

Description



$StepTime

Float

The currently set Step Time.





Example(s):

($StepTime) = SMX_SWITCH_GetStepTime($ResourceNumber);





SMX_SWITCH_GetTriggerIn

Previous Top Next



* * *



SMX_SWITCH_GetTriggerIn



Usage:

($State) = SMX_SWITCH_GetTriggerIn($ResourceNumber);



Description:

This function requires SMX4032 drivers to be installed on the system.

Gets the logic state of the Hardware Trigger Input line of the scanner.





Remarks:

· This function is tested with a SMX4032 device.

· When there occurs an error during the execution of the low level SMX-Switch functions, Jabil Test while fail and return the error message.

· The function will verify if the given parameter exists, otherwise Jabil Test fails and returns the error message.



Result:

($State) = SMX_SWITCH_GetTriggerIn($ResourceNumber);

Function arguments



Parameter

Variable Type

Description



$ResourceNumber

Integer

The number of the SMX4032 device to be used. (i.e. Device 0, 1, etc.)





Return parameters



Parameter

Variable Type

Description



$State

Integer

The logic state of the Hardware Trigger.





Example(s):

($State) = SMX_SWITCH_GetTriggerIn($ResourceNumber);





SMX_SWITCH_GetType

Previous Top Next



* * *



SMX_SWITCH_GetType



Usage:

($State) = SMX_SWITCH_GetType($ResourceNumber);



Description:

This function requires SMX4032 drivers to be installed on the system.

Gets the logic state of the Hardware Trigger Input line of the scanner.





Remarks:

· This function is tested with a SMX4032 device.

· When there occurs an error during the execution of the low level SMX-Switch functions, Jabil Test while fail and return the error message.

· The function will verify if the given parameter exists, otherwise Jabil Test fails and returns the error message.



Result:

($State) = SMX_SWITCH_GetType($ResourceNumber);

Function arguments



Parameter

Variable Type

Description



$ResourceNumber

Integer

The number of the SMX4032 device to be used. (i.e. Device 0, 1, etc.)





Return parameters



Parameter

Variable Type

Description



$State

Integer

The logic state of the Hardware Trigger.





Example(s):

($State) = SMX_SWITCH_GetType($ResourceNumber);





SMX_SWITCH_GetVer

Previous Top Next



* * *



SMX_SWITCH_GetVer



Usage:

($DLLVersion) = SMX_SWITCH_GetVer($ResourceNumber);



Description:

This function requires SMX4032 drivers to be installed on the system.

Returns the scanner's DLL software driver version.





Remarks:

· This function is tested with a SMX4032 device.

· When there occurs an error during the execution of the low level SMX-Switch functions, Jabil Test while fail and return the error message.

· The function will verify if the given parameter exists, otherwise Jabil Test fails and returns the error message.



Result:

($DLLVersion) = SMX_SWITCH_GetVer($ResourceNumber);

Function arguments



Parameter

Variable Type

Description



$ResourceNumber

Integer

The number of the SMX4032 device to be used. (i.e. Device 0, 1, etc.)





Return parameters



Parameter

Variable Type

Description



$DLLVersion

Integer

The DLL Version of the Scanner'd driver.





Example(s):

($DLLVersion) = SMX_SWITCH_GetVer($ResourceNumber);





SMX_SWITCH_Init

Previous Top Next



* * *



SMX_SWITCH_Init



Usage:

($State) = SMX_SWITCH_Init($ResourceNumber);



Description:

This function requires SMX4032 drivers to be installed on the system.

Initializes the scanner.





Remarks:

· This function is tested with a SMX4032 device.

· When there occurs an error during the execution of the low level SMX-Switch functions, Jabil Test while fail and return the error message.

· The function will verify if the given parameter exists, otherwise Jabil Test fails and returns the error message.



Result:

($State) = SMX_SWITCH_Init($ResourceNumber);

Function arguments



Parameter

Variable Type

Description



$ResourceNumber

Integer

The number of the SMX4032 device to be used. (i.e. Device 0, 1, etc.)





Return parameters



Parameter

Variable Type

Description



$State

Integer

The logic state of the Hardware Trigger.





Example(s):

($State) = SMX_SWITCH_Init($ResourceNumber);





SMX_SWITCH_IsInitialized

Previous Top Next



* * *



SMX_SWITCH_IsInitialized



Usage:

($State) = SMX_SWITCH_IsInitialized($ResourceNumber);



Description:

This function requires SMX4032 drivers to be installed on the system.

Returns the active state of the scanner.





Remarks:

· This function is tested with a SMX4032 device.

· When there occurs an error during the execution of the low level SMX-Switch functions, Jabil Test while fail and return the error message.

· The function will verify if the given parameter exists, otherwise Jabil Test fails and returns the error message.



Result:

($State) = SMX_SWITCH_IsInitialized($ResourceNumber);

Function arguments



Parameter

Variable Type

Description



$ResourceNumber

Integer

The number of the SMX4032 device to be used. (i.e. Device 0, 1, etc.)





Return parameters



Parameter

Variable Type

Description



$State

Boolean

Whether or not the scanner is initialized.





Example(s):

($State) = SMX_SWITCH_IsInitialized($ResourceNumber);





SMX_SWITCH_OpenAllChannels

Previous Top Next



* * *



SMX_SWITCH_OpenAllChannels



Usage:

($State) = SMX_SWITCH_OpendAllChannels($ResourceNumber);



Description:

This function requires SMX4032 drivers to be installed on the system.

Opens all channel relays.





Remarks:

· This function is tested with a SMX4032 device.

· When there occurs an error during the execution of the low level SMX-Switch functions, Jabil Test while fail and return the error message.

· The function will verify if the given parameter exists, otherwise Jabil Test fails and returns the error message.



Result:

($State) = SMX_SWITCH_OpendAllChannels($ResourceNumber);

Function arguments



Parameter

Variable Type

Description



$ResourceNumber

Integer

The number of the SMX4032 device to be used. (i.e. Device 0, 1, etc.)





Return parameters



Parameter

Variable Type

Description



$State

Integer

Whether or not the operation was successful. Negative value indicates failure. A zero value indicates success.





Example(s):

($State) = SMX_SWITCH_OpendAllChannels($ResourceNumber);





SMX_SWITCH_Ready

Previous Top Next



* * *



SMX_SWITCH_Ready



Usage:

($State) = SMX_SWITCH_Ready($ResourceNumber);



Description:

This function requires SMX4032 drivers to be installed on the system.

Whether or not the scanner is done and ready to accept new commands.





Remarks:

· This function is tested with a SMX4032 device.

· When there occurs an error during the execution of the low level SMX-Switch functions, Jabil Test while fail and return the error message.

· The function will verify if the given parameter exists, otherwise Jabil Test fails and returns the error message.



Result:

($State) = SMX_SWITCH_Ready($ResourceNumber);

Function arguments



Parameter

Variable Type

Description



$ResourceNumber

Integer

The number of the SMX4032 device to be used. (i.e. Device 0, 1, etc.)





Return parameters



Parameter

Variable Type

Description



$State

Boolean

Whether or not the scanner is done and ready to accept new commands.





Example(s):

($State) = SMX_SWITCH_Ready($ResourceNumber);





SMX_SWITCH_SelectChannel

Previous Top Next



* * *



SMX_SWITCH_SelectChannel



Usage:

($State) = SMX_SWITCH_SelectChannel($ResourceNumber,$Channel);



Description:

This function requires SMX4032 drivers to be installed on the system.

Opens and closes relays based on the current channel configuration. (TwoWire, FourWire, etc.)





Remarks:

· This function is tested with a SMX4032 device.

· When there occurs an error during the execution of the low level SMX-Switch functions, Jabil Test while fail and return the error message.

· The function will verify if the given parameter exists, otherwise Jabil Test fails and returns the error message.



Result:

($State) = SMX_SWITCH_SelectChannel($ResourceNumber,$Channel);

Function arguments



Parameter

Variable Type

Description



$ResourceNumber

Integer

The number of the SMX4032 device to be used. (i.e. Device 0, 1, etc.)



$Channel

Integer

Integer value based on the scanner config.





Return parameters



Parameter

Variable Type

Description



$State

Integer

Whether or not the operation was successful. Negative value indicates failure. A zero value indicates success.





Example(s):

($State) = SMX_SWITCH_SelectChannel($ResourceNumber,$Channel);





SMX_SWITCH_SelectChannelCMD

Previous Top Next



* * *



SMX_SWITCH_SelectChannelCMD



Usage:

($State) = SMX_SWITCH_SelectChannelCMD($ResourceNumber,$Channel);



Description:

This function requires SMX4032 drivers to be installed on the system.

This is the polled version of the SelectChannel command.





Remarks:

· This function is tested with a SMX4032 device.

· When there occurs an error during the execution of the low level SMX-Switch functions, Jabil Test while fail and return the error message.

· The function will verify if the given parameter exists, otherwise Jabil Test fails and returns the error message.



Result:

($State) = SMX_SWITCH_SelectChannelCMD($ResourceNumber,$Channel);

Function arguments



Parameter

Variable Type

Description



$ResourceNumber

Integer

The number of the SMX4032 device to be used. (i.e. Device 0, 1, etc.)



$Channel

Integer

Integer value based on the scanner config.





Return parameters



Parameter

Variable Type

Description



$State

Integer

Whether or not the operation was successful. Negative value indicates failure. A zero value indicates success.





Example(s):

($State) = SMX_SWITCH_SelectChannelCMD($ResourceNumber,$Channel);





SMX_SWITCH_SetActuationTime

Previous Top Next



* * *



SMX_SWITCH_SetActuationTime



Usage:

($State) = SMX_SWITCH_SetActuationTime($ResourceNumber,$dActuate);



Description:

This function requires SMX4032 drivers to be installed on the system.

This is the polled version of the SelectChannel command.





Remarks:

· This function is tested with a SMX4032 device.

· When there occurs an error during the execution of the low level SMX-Switch functions, Jabil Test while fail and return the error message.

· The function will verify if the given parameter exists, otherwise Jabil Test fails and returns the error message.



Result:

($State) = SMX_SWITCH_SetActuationTime($ResourceNumber,$Channel);

Function arguments



Parameter

Variable Type

Description



$ResourceNumber

Integer

The number of the SMX4032 device to be used. (i.e. Device 0, 1, etc.)



$dActuate

Double

Actuation time from 0.25ms to 800ms





Return parameters



Parameter

Variable Type

Description



$State

Integer

Whether or not the operation was successful. Negative value indicates failure. A zero value indicates success.





Example(s):

($State) = SMX_SWITCH_SetActuationTime($ResourceNumber,$Channel);





SMX_SWITCH_SetChannelRelay

Previous Top Next



* * *



SMX_SWITCH_SetChannelRelay



Usage:

($State) = SMX_SWITCH_SetChannelRelay($ResourceNumber,$RelayState,$Channel);



Description:

This function requires SMX4032 drivers to be installed on the system.

Close or Open a channel relay.





Remarks:

· This function is tested with a SMX4032 device.

· When there occurs an error during the execution of the low level SMX-Switch functions, Jabil Test while fail and return the error message.

· The function will verify if the given parameter exists, otherwise Jabil Test fails and returns the error message.



Result:

($State) = SMX_SWITCH_SetChannelRelay($ResourceNumber,$RelayState,$Channel);

Function arguments



Parameter

Variable Type

Description



$ResourceNumber

Integer

The number of the SMX4032 device to be used. (i.e. Device 0, 1, etc.)



$RelayState

String

Open or Closed.



$Channel

Integer

Channel number range (1 to 35) depending on the configuration.





Return parameters



Parameter

Variable Type

Description



$State

Integer

Whether or not the operation was successful. Negative value indicates failure. A zero value indicates success.





Example(s):

($State) = SMX_SWITCH_SetChannelRelay($ResourceNumber,$RelayState,$Channel);





SMX_SWITCH_SetConfig

Previous Top Next



* * *



SMX_SWITCH_SetConfig



Usage:

($State) = SMX_SWITCH_SetConfig($ResourceNumber,$Configuration);



Description:

This function requires SMX4032 drivers to be installed on the system.

Sets the scanner configuration to one of the predefined modes. (TwoWire, FourWire, etc.)





Remarks:

· This function is tested with a SMX4032 device.

· When there occurs an error during the execution of the low level SMX-Switch functions, Jabil Test while fail and return the error message.

· The function will verify if the given parameter exists, otherwise Jabil Test fails and returns the error message.



Result:

($State) = SMX_SWITCH_SetConfig($ResourceNumber,$Configuration);

Function arguments



Parameter

Variable Type

Description



$ResourceNumber

Integer

The number of the SMX4032 device to be used. (i.e. Device 0, 1, etc.)



$Configuration

Integer

TwoWire, FourWire, SixWire, TwoGroups, Universal, ColdJuction, or Disabled.





Return parameters



Parameter

Variable Type

Description



$State

Integer

Whether or not the operation was successful. Negative value indicates failure. A zero value indicates success.





Example(s):

($State) = SMX_SWITCH_SetConfig($ResourceNumber,$Configuration);





SMX_SWITCH_SetConfigRelay

Previous Top Next



* * *



SMX_SWITCH_SetConfigRelay



Usage:

($State) = SMX_SWITCH_SetConfigRelay($ResourceNumber,$RelayState,$Relay);



Description:

This function requires SMX4032 drivers to be installed on the system.

Sets one of the configuration relays.





Remarks:

· This function is tested with a SMX4032 device.

· When there occurs an error during the execution of the low level SMX-Switch functions, Jabil Test while fail and return the error message.

· The function will verify if the given parameter exists, otherwise Jabil Test fails and returns the error message.



Result:

($State) = SMX_SWITCH_SetConfigRelay($ResourceNumber,$RelayState,$Relay);

Function arguments



Parameter

Variable Type

Description



$ResourceNumber

Integer

The number of the SMX4032 device to be used. (i.e. Device 0, 1, etc.)



$RelayState

String

Open or Closed.



$Relay

Integer

Relay Tree - AtoA, BtoA, BtoB, CtoA, CtoC, DtoD, DtoC.





Return parameters



Parameter

Variable Type

Description



$State

Integer

Whether or not the operation was successful. Negative value indicates failure. A zero value indicates success.





Example(s):

($State) = SMX_SWITCH_SetConfigRelay($ResourceNumber,$RelayState,$Relay);





SMX_SWITCH_SetScanList

Previous Top Next



* * *



SMX_SWITCH_SetScanList



Usage:

($State) = SMX_SWITCH_SetScanList($ResourceNumber,$Address,$Channel);



Description:

This function requires SMX4032 drivers to be installed on the system.

Set a single scan list entry.





Remarks:

· This function is tested with a SMX4032 device.

· When there occurs an error during the execution of the low level SMX-Switch functions, Jabil Test while fail and return the error message.

· The function will verify if the given parameter exists, otherwise Jabil Test fails and returns the error message.



Result:

($State) = SMX_SWITCH_SetScanList($ResourceNumber,$Address,$Relay);

Function arguments



Parameter

Variable Type

Description



$ResourceNumber

Integer

The number of the SMX4032 device to be used. (i.e. Device 0, 1, etc.)



$Address

String

The Address to write to (a value between 0 and 191).



$Channel

Integer

The Channel number (a value between 0 and 32).





Return parameters



Parameter

Variable Type

Description



$State

Integer

Whether or not the operation was successful. Negative value indicates failure. A zero value indicates success.





Example(s):

($State) = SMX_SWITCH_SetScanList($ResourceNumber,$Address,$Channel);





SMX_SWITCH_SetStepTime

Previous Top Next



* * *



SMX_SWITCH_SetStepTime



Usage:

($State) = SMX_SWITCH_SetStepTime($ResourceNumber,$Step);



Description:

This function requires SMX4032 drivers to be installed on the system.

Set auto scan step time.





Remarks:

· This function is tested with a SMX4032 device.

· When there occurs an error during the execution of the low level SMX-Switch functions, Jabil Test while fail and return the error message.

· The function will verify if the given parameter exists, otherwise Jabil Test fails and returns the error message.



Result:

($State) = SMX_SWITCH_SetStepTime($ResourceNumber,$Step);

Function arguments



Parameter

Variable Type

Description



$ResourceNumber

Integer

The number of the SMX4032 device to be used. (i.e. Device 0, 1, etc.)



$Step

Double

Default step time is 100ms. The allowed range is from 1 ms to 850 ms. The resolution is 0.25ms.





Return parameters



Parameter

Variable Type

Description



$State

Integer

Whether or not the operation was successful. Negative value indicates failure. A zero value indicates success.





Example(s):

($State) = SMX_SWITCH_SetStepTime($ResourceNumber,$Step);





SMX_SWITCH_SetTriggerOut

Previous Top Next



* * *



SMX_SWITCH_SetTriggerOut



Usage:

($State) = SMX_SWITCH_SetTriggerOut($ResourceNumber,$Level);



Description:

This function requires SMX4032 drivers to be installed on the system.

Set the scanner trigger output level.





Remarks:

· This function is tested with a SMX4032 device.

· When there occurs an error during the execution of the low level SMX-Switch functions, Jabil Test while fail and return the error message.

· The function will verify if the given parameter exists, otherwise Jabil Test fails and returns the error message.



Result:

($State) = SMX_SWITCH_SetTriggerOut($ResourceNumber,$Step);

Function arguments



Parameter

Variable Type

Description



$ResourceNumber

Integer

The number of the SMX4032 device to be used. (i.e. Device 0, 1, etc.)



$Level

String

Level may be "LOW" or "HIGH."





Return parameters



Parameter

Variable Type

Description



$State

Integer

Whether or not the operation was successful. Negative value indicates failure. A zero value indicates success.





Example(s):

($State) = SMX_SWITCH_SetTriggerOut($ResourceNumber,$Level);





SMX_SWITCH_SetupStep

Previous Top Next



* * *



SMX_SWITCH_SetupStep



Usage:

($State) = SMX_SWITCH_SetupStep($ResourceNumber);



Description:

This function requires SMX4032 drivers to be installed on the system.

Set the Scanner for stepped scanning operation.





Remarks:

· This function is tested with a SMX4032 device.

· When there occurs an error during the execution of the low level SMX-Switch functions, Jabil Test while fail and return the error message.

· The function will verify if the given parameter exists, otherwise Jabil Test fails and returns the error message.



Result:

($State) = SMX_SWITCH_SetupStep($ResourceNumber);

Function arguments



Parameter

Variable Type

Description



$ResourceNumber

Integer

The number of the SMX4032 device to be used. (i.e. Device 0, 1, etc.)





Return parameters



Parameter

Variable Type

Description



$State

Boolean

Whether or not the scanner is done and ready to accept new commands.





Example(s):

($State) = SMX_SWITCH_SetupStep($ResourceNumber);





SMX_SWITCH_Step

Previous Top Next



* * *



SMX_SWITCH_Step



Usage:

($State) = SMX_SWITCH_SetupStep($ResourceNumber);



Description:

This function requires SMX4032 drivers to be installed on the system.

Step to the next channel in the scan list.





Remarks:

· This function is tested with a SMX4032 device.

· When there occurs an error during the execution of the low level SMX-Switch functions, Jabil Test while fail and return the error message.

· The function will verify if the given parameter exists, otherwise Jabil Test fails and returns the error message.



Result:

($State) = SMX_SWITCH_SetupStep($ResourceNumber);

Function arguments



Parameter

Variable Type

Description



$ResourceNumber

Integer

The number of the SMX4032 device to be used. (i.e. Device 0, 1, etc.)





Return parameters



Parameter

Variable Type

Description



$State

Boolean

Whether or not the scanner is done and ready to accept new commands.





Example(s):

($State) = SMX_SWITCH_SetupStep($ResourceNumber);





SMX_SWITCH_StepCMD

Previous Top Next



* * *



SMX_SWITCH_StepCMD



Usage:

($State) = SMX_SWITCH_SetupStepCMD($ResourceNumber);



Description:

This function requires SMX4032 drivers to be installed on the system.

Step to the next channel in the scan list. This is the polled version of the SMX_SWITCH_Step command.





Remarks:

· This function is tested with a SMX4032 device.

· When there occurs an error during the execution of the low level SMX-Switch functions, Jabil Test while fail and return the error message.

· The function will verify if the given parameter exists, otherwise Jabil Test fails and returns the error message.



Result:

($State) = SMX_SWITCH_SetupStepCMD($ResourceNumber);

Function arguments



Parameter

Variable Type

Description



$ResourceNumber

Integer

The number of the SMX4032 device to be used. (i.e. Device 0, 1, etc.)





Return parameters



Parameter

Variable Type

Description



$State

Boolean

Whether or not the scanner is done and ready to accept new commands.





Example(s):

($State) = SMX_SWITCH_SetupStepCMD($ResourceNumber);





SMX_SWITCH_Terminate

Previous Top Next



* * *



SMX_SWITCH_Terminate



Usage:

($State) = SMX_SWITCH_Terminate($ResourceNumber);



Description:

This function requires SMX4032 drivers to be installed on the system.

Terminates scanner's operation, and removes it from PCI configuration.





Remarks:

· This function is tested with a SMX4032 device.

· When there occurs an error during the execution of the low level SMX-Switch functions, Jabil Test while fail and return the error message.

· The function will verify if the given parameter exists, otherwise Jabil Test fails and returns the error message.



Result:

($State) = SMX_SWITCH_Terminate($ResourceNumber);

Function arguments



Parameter

Variable Type

Description



$ResourceNumber

Integer

The number of the SMX4032 device to be used. (i.e. Device 0, 1, etc.)





Return parameters



Parameter

Variable Type

Description



$State

Boolean

Whether or not the scanner is done and ready to accept new commands.





Example(s):

($State) = SMX_SWITCH_Terminate($ResourceNumber);





SMX_SWITCH_TestChanIntegrity

Previous Top Next



* * *



SMX_SWITCH_TestChanIntegrity



Usage:

($State) = SMX_SWITCH_TestChanIntegrity($ResourceNumber,$Channel);



Description:

This function requires SMX4032 drivers to be installed on the system.

Test a channel relay.





Remarks:

· This function is tested with a SMX4032 device.

· When there occurs an error during the execution of the low level SMX-Switch functions, Jabil Test while fail and return the error message.

· The function will verify if the given parameter exists, otherwise Jabil Test fails and returns the error message.



Result:

($State) = SMX_SWITCH_TestChanIntegrity($ResourceNumber,$Channel);

Function arguments



Parameter

Variable Type

Description



$ResourceNumber

Integer

The number of the SMX4032 device to be used. (i.e. Device 0, 1, etc.)



$Channel

Integer

Identifies the Channel relay to be tested (1 to 32).





Return parameters



Parameter

Variable Type

Description



$State

Integer

Whether or not the operation was successful. Negative value indicates failure. A zero value indicates success.





Example(s):

($State) = SMX_SWITCH_TestChanIntegrity($ResourceNumber,$Channel);





SMX_SWITCH_TestConfigRelay

Previous Top Next



* * *



SMX_SWITCH_TestConfigRelay



Usage:

($State) = SMX_SWITCH_TestConfigRelay($ResourceNumber,$Config);



Description:

This function requires SMX4032 drivers to be installed on the system.

Tests a single configuration or a tree relay.





Remarks:

· This function is tested with a SMX4032 device.

· When there occurs an error during the execution of the low level SMX-Switch functions, Jabil Test while fail and return the error message.

· The function will verify if the given parameter exists, otherwise Jabil Test fails and returns the error message.



Result:

($State) = SMX_SWITCH_TestConfigRelay($ResourceNumber,$Config);

Function arguments



Parameter

Variable Type

Description



$ResourceNumber

Integer

The number of the SMX4032 device to be used. (i.e. Device 0, 1, etc.)



$Config

String

The relay tree (AtoA, BtoA, BtoB, CtoA, CtoC, DtoC, or DtoD)





Return parameters



Parameter

Variable Type

Description



$State

Integer

Whether or not the operation was successful. Negative value indicates failure. A zero value indicates success.





Example(s):

($State) = SMX_SWITCH_TestConfigRelay($ResourceNumber,$Config);





SMX_SWITCH_TrigAutoScan

Previous Top Next



* * *



SMX_SWITCH_TrigAutoScan



Usage:

($State) = SMX_SWITCH_TrigAutoScan($ResourceNumber,$Points);



Description:

This function requires SMX4032 drivers to be installed on the system.

Set scanner for triggered auto scan operation.





Remarks:

· This function is tested with a SMX4032 device.

· When there occurs an error during the execution of the low level SMX-Switch functions, Jabil Test while fail and return the error message.

· The function will verify if the given parameter exists, otherwise Jabil Test fails and returns the error message.



Result:

($State) = SMX_SWITCH_TrigAutoScan($ResourceNumber,$Points);

Function arguments



Parameter

Variable Type

Description



$ResourceNumber

Integer

The number of the SMX4032 device to be used. (i.e. Device 0, 1, etc.)



$Points

Integer

The number of points in the scan.





Return parameters



Parameter

Variable Type

Description



$State

Integer

Whether or not the operation was successful. Negative value indicates failure. A zero value indicates success.





Example(s):

($State) = SMX_SWITCH_TrigAutoScan($ResourceNumber,$Points);





SMX_SWITCH_TrigScan

Previous Top Next



* * *



SMX_SWITCH_TrigScan



Usage:

($State) = SMX_SWITCH_TrigScan($ResourceNumber,$Points);



Description:

This function requires SMX4032 drivers to be installed on the system.

Set scanner for trigger driven step scanning.





Remarks:

· This function is tested with a SMX4032 device.

· When there occurs an error during the execution of the low level SMX-Switch functions, Jabil Test while fail and return the error message.

· The function will verify if the given parameter exists, otherwise Jabil Test fails and returns the error message.



Result:

($State) = SMX_SWITCH_TrigScan($ResourceNumber,$Points);

Function arguments



Parameter

Variable Type

Description



$ResourceNumber

Integer

The number of the SMX4032 device to be used. (i.e. Device 0, 1, etc.)



$Points

Integer

The number of points in the scan.





Return parameters



Parameter

Variable Type

Description



$State

Integer

Whether or not the operation was successful. Negative value indicates failure. A zero value indicates success.





Example(s):

($State) = SMX_SWITCH_TrigScan($ResourceNumber,$Points);





SMX_SWITCH_TriggerInState

Previous Top Next



* * *



SMX_SWITCH_TriggerInState



Usage:

($State) = SMX_SWITCH_TriggerInState($ResourceNumber,$State,$Edge);



Description:

This function requires SMX4032 drivers to be installed on the system.

Set trigger input state.





Remarks:

· This function is tested with a SMX4032 device.

· When there occurs an error during the execution of the low level SMX-Switch functions, Jabil Test while fail and return the error message.

· The function will verify if the given parameter exists, otherwise Jabil Test fails and returns the error message.



Result:

($State) = SMX_SWITCH_TriggerInState($ResourceNumber,$State,$Edge);

Function arguments



Parameter

Variable Type

Description



$ResourceNumber

Integer

The number of the SMX4032 device to be used. (i.e. Device 0, 1, etc.)



$State

String

"Enabled" or "Disabled" are the valid states.



$Edge

String

"Positive" or "Negative" are the valid states.





Return parameters



Parameter

Variable Type

Description



$State

Integer

Whether or not the operation was successful. Negative value indicates failure. A zero value indicates success.





Example(s):

($State) = SMX_SWITCH_TriggerInState($ResourceNumber,$State,$Edge);





SMX_SWITCH_TriggerOutState

Previous Top Next



* * *



SMX_SWITCH_TriggerOutState



Usage:

($State) = SMX_SWITCH_TriggerOutState($ResourceNumber,$State,$Edge);



Description:

This function requires SMX4032 drivers to be installed on the system.

Set trigger output state.





Remarks:

· This function is tested with a SMX4032 device.

· When there occurs an error during the execution of the low level SMX-Switch functions, Jabil Test while fail and return the error message.

· The function will verify if the given parameter exists, otherwise Jabil Test fails and returns the error message.



Result:

($State) = SMX_SWITCH_TriggerOutState($ResourceNumber,$State,$Edge);

Function arguments



Parameter

Variable Type

Description



$ResourceNumber

Integer

The number of the SMX4032 device to be used. (i.e. Device 0, 1, etc.)



$State

String

"Enabled" or "Disabled" are the valid states.



$Edge

String

"Positive" or "Negative" are the valid states.





Return parameters



Parameter

Variable Type

Description



$State

Integer

Whether or not the operation was successful. Negative value indicates failure. A zero value indicates success.





Example(s):

($State) = SMX_SWITCH_TriggerOutState($ResourceNumber,$State,$Edge);





SmartSetTouchControl_SendTouch

Previous Top Next



* * *



SmartSetTouchControl_SendTouch



Usage:

SmartSetTouchControl_SendTouch($comPort, $horizPosition, $vertPosition, $touchType);





Description:

This function sends a touch command to a controller that uses the SmartSet 10 byte command set.





Remarks:

It takes two calls to this function to perform a single "touch" on the screen. One call with touch type of "INITIAL" followed by a call with touch type "UNTOUCH".

Function arguments



Parameter

Variable Type

Description



$comPort

String

The name of the Com port that the instrument is connected to.



$horizPosition

Integer

The horizontal position in pixels of where to touch the screen.



$vertPosition

Integer

The vertical position in pixels of where to touch the screen.



$touchType

String

The type of touch command to send.

Values:

· "INITIAL"

· "UNTOUCH"





Return parameters



Parameter

Variable Type

Description



None

--

--





Example(s):

// Set up the parameters to touch at location 50, 120.

$comPort = "COM3";

$horizPosition = 50;

$vertPosition = 120;

SmartSetTouchControl_SendTouch($comPort, $horizPosition, $vertPosition, "INITIAL");

SmartSetTouchControl_SendTouch($comPort, $horizPosition, $vertPosition, "UNTOUCH");





DekTec_DTA112_ChangeOutputChannel

Previous Top Next



* * *



DekTec_DTA112_ChangeOutputChannel



Usage:

DekTec_DTA112_ChangeOutputChannel($OutputHandle, $ChannelFreq);





Description:

This function changes the channel frequency for the device's active output channel.





Note: Please refer to the channel table below for corresponding channel frequencies.

Function arguments



Parameter

Variable Type

Description



$OutputHandle

Object

The handle of the output channel returned from the DekTeck_DTA112_OutputFileStream function



$ChannelFreq

Integer

Channel Frequency MHz.





Return parameters



Parameter

Variable Type

Description



None





Usage Examples

DekTec_DTA112_ChangeOutputChannel($handle, 67);

U.S. Broadcast Channels

6MHz



Channel

Frequency MHz



2

57



3

63



4

69



5

79



6

85



7

177



8

183



9

189



10

195



11

201



12

207



13

213



14

473



15

479



16

485



17

491



18

497



19

503



20

509



21

515



22

521



23

527



24

533



25

539



26

545



27

551



28

557



29

563



30

569



31

575



32

581



33

587



34

593



35

599



36

605



37

611



38

617



39

623



40

629



41

635



42

641



43

647



44

653



45

659



46

665



47

671



48

677



49

683



50

689



51

695



52

701



53

707



54

713



55

719



56

725



57

731



58

737



59

743



60

749



61

755



62

761



63

767



64

773



65

779



66

785



67

791



68

797



69

803





DekTec_DTA112_Close

Previous Top Next



* * *



DekTec_DTA112_Close



Usage:

DekTec_DTA112_Close($DeviceHandle);





Description:

The close function terminates the software connection to the DekTec DTA 112 PCI card and de-allocates system resources. It detaches the device object from the device hardware.

Function arguments



Parameter

Variable Type

Description



$DeviceHandle

Object

The handle of the device returned from the DekTeck_DTA112_Init function





Return parameters



Parameter

Variable Type

Description



None





Usage Examples

DekTec_DTA112_Close($handle);





DekTec_DTA112_Init

Previous Top Next



* * *



DekTec_DTA112_Init



Usage:

$DeviceHandle = DekTec_DTA112_Init($DeviceIndex);





Description:

This function establishes a connection to the DekTec DTA 112 PCI card and attaches the device object to the device hardware.





Note: It is generally a good programming habit to close the instrument handle when the program is done using the instrument. This can be done with the DekTec_DTA112_Close function.

Function arguments



Parameter

Variable Type

Description



$DeviceIndex

Integer

If the system contains multiple devices, this number distinguishes between the various devices. Number of the first device is 0, the next device 1, and so on.





Return parameters



Parameter

Variable Type

Description



$DeviceHandle

Object

The handle of the device





Usage Examples

$DeviceHandle = DekTec_DTA112_Init(0);





DekTec_DTA112_OutputFileStream

Previous Top Next



* * *



DekTec_DTA112_OutputFileStream



Usage:

$OutputHandle = DekTec_DTA112_OutputFileStream($DeviceHandle, $FilePath, $Bps, $Port, $Channel);





Description:

This function outputs a Transport-Stream file (.ts) to the specified port with the desired bps and channel frequency and returns a the handle of the output channel. The file will continuously loop so it is essential to close the output channel with DekTec_DTA112_StopFileStream





Note: Please refer to the channel table below for corresponding channel frequencies.

Function arguments



Parameter

Variable Type

Description



$DeviceHandle

Object

The handle of the device returned from the DekTeck_DTA112_Init function



$FilePath

String

The location of theTransport-Stream file to be output



$Bps

Integer

Transport-Stream rate specified in bits per second.



$Port

Integer

The output port number



$Channel

Integer

The frequency of the US Broadcast Channel in MHxz





Return parameters



Parameter

Variable Type

Description



$OutputHandle

Object

The handle of the output channel.





Usage Examples

$file = "C:\\stream.ts";

$outHandle = DekTec_DTA112_OutputFileStream($devHandle,$file,27000000,2,57);

U.S. Broadcast Channels

6MHz



Channel

Frequency MHz



2

57



3

63



4

69



5

79



6

85



7

177



8

183



9

189



10

195



11

201



12

207



13

213



14

473



15

479



16

485



17

491



18

497



19

503



20

509



21

515



22

521



23

527



24

533



25

539



26

545



27

551



28

557



29

563



30

569



31

575



32

581



33

587



34

593



35

599



36

605



37

611



38

617



39

623



40

629



41

635



42

641



43

647



44

653



45

659



46

665



47

671



48

677



49

683



50

689



51

695



52

701



53

707



54

713



55

719



56

725



57

731



58

737



59

743



60

749



61

755



62

761



63

767



64

773



65

779



66

785



67

791



68

797



69

803





DekTec_DTA112_SetOutputLevel

Previous Top Next



* * *



DekTec_DTA112_SetOutputLevel



Usage:

DekTec_DTA112_SetOutputLevel($OutputHandle, $PowerLevel);





Description:

This function sets the current level (in dB) for the output channel.





Note: The actual output level will be set to 10% of the passed value and negative.

For example, if you set DekTec_DTA_SetOutputLevel($handle, 100);, internally the card will set the output level to -10db

Function arguments



Parameter

Variable Type

Description



$OutputHandle

Object

The handle of the output channel returned from the DekTeck_DTA112_OutputFileStream function



$PowerLevel

Integer

Output level in units of dB. (see note above)





Return parameters



Parameter

Variable Type

Description



None





Usage Examples

DekTec_DTA112_SetOutputLevel($handle, 25); // actually sets the level to -2.5db





DekTec_DTA112_StopFileStream

Previous Top Next



* * *



DekTec_DTA112_StopFileStream



Usage:

DekTec_DTA112_StopFileStream($OutputHandle);





Description:

This function detaches the output channel from the hardware and frees resources allocated for the output channel, such as DMA buffers.

Function arguments



Parameter

Variable Type

Description



$OuputHandle

Object

The handle of the output channel returned from the DekTeck_DTA112_OutputFileStream function





Return parameters



Parameter

Variable Type

Description



None





Usage Examples

$file = "C:\\stream.ts";

$outHandle = DekTec_DTA112_OutputFileStream($devHandle,$file,27000000,2,57);

DekTec_DTA112_StopFileStream($OutputHandle);





AeroflexGSMAnalyzer_AbortMeasurement

Previous Top Next



* * *



AeroFlexGSMAnalyzer_AbortMeasurement

Usage:

AeroFlexGSMAnalyzer_AbortMeasurement($GSM);

Description:



Aborts all enabled measurements.



Function arguments



Parameter

Variable Type

Description



$GSM

Object

GSM Analysis Object





Return Values



Parameter

Variable Type

Description



None





Example:





AeroFlexGSMAnalyzer_AbortMeasurement($GSM);





AeroflexGSMAnalyzer_AssignDigitizerByInstance

Previous Top Next



* * *



AeroflexGSMAnalyzer_AssignDigitizerByInstance

Usage:

AeroflexGSMAnalyzer_AssignDigitizerByInstance($GSM,$DigitizerInstance);

Description:

This function assigns a digitizer to be used by the GSM measurement system as a measurement resource. The Digitizer instance is created by using the AeroFlexDigitizer_Open function.





Function arguments



Parameter

Variable Type

Description



$GSM

Object

GSM Analysis Object



$DigitizerInstance

Object

The Digitizer instance created by the AeroFlexDigitizer_Open function.





Return Values



Parameter

Variable Type

Description



None





Example:





$Digitizer = AeroFlexDigitizer_Open("PXI4::14::INSTR","PXI4::15::INSTR", FALSE);

AeroflexGSMAnalyzer_AssignDigitizerByInstance($GSM,$Digitizer);





AeroflexGSMAnalyzer_AssignDigitizerByResource

Previous Top Next



* * *



AeroFlexGSMAnalyzer_AssignDigitizerByResource

Usage:

AeroFlexGSMAnalyzer_AssignDigitizerByResource($GSM,$DigitizerResourceString ,$OscillatorResourceString,$LOisLocal);

Description:



This function assigns the digitizer hardware resources to a GSM measurement system by the PXI Resource string. The hardware will be booted automatically as soon as it's assigned to the GSM Measurement system.





Note:

If you have used the AeroflexGSMAnalyzer_Open function as opposed to the AeroflexGSMAnalyzer_Init function, then these extra steps are unnecessary.



Function arguments



Parameter

Variable Type

Description



$GSM

Object

The GSM Object created with the AeroflexGSMAnalyzer_Init function.



$DigitizerResourceString

String

Digitizer Resource String for the RF resource (301x module) that is to be created and used by the GSM measurement library



$OscillatorResourceString

String

Oscillator Resource String for the LO (303x module) that is to be created and used by the GSM measurement library.



$LOisLocal

Boolean

If set to false, an external standard is used, otherwise an internal standard is used. This parameter refers to the oscillator reference for the digitizer.





Return parameters



Parameter

Variable Type

Description



None





Example: AeroflexGSMAnalyzer_AssignDigitizerByResource($GSM,"PXI4::14::INSTR","PXI4::15",true);





AeroflexGSMAnalyzer_AssignSignalGeneratorByInstance

Previous Top Next



* * *



AeroflexGSMAnalyzer_AssignSignalGeneratorByInstance

Usage:

AeroflexGSMAnalyzer_AssignSignalGeneratorByInstance($GSM,$SigGenInstance);

Description:

This function assigns a signal generator to be used by the GSM measurement system as a measurement resource. The Signal Generator instance is created by using the AeroFlexSigGen_Open function.





Function arguments



Parameter

Variable Type

Description



$GSM

Object

GSM Analysis Object



$SigGenInstance

Object

The Signal Generator instance created by the AeroFlexDigitizer_Open function.





Return Values



Parameter

Variable Type

Description



None





Example:





$SigGen = AeroFlexSigGen_Open("PXI2::15::INSTR", "PXI2::14::INSTR", FALSE);

AeroflexGSMAnalyzer_AssignSignalGeneratorByInstance($GSM,$SigGen);





AeroflexGSMAnalyzer_AssignSignalGeneratorByResource

Previous Top Next



* * *



AeroFlexGSMAnalyzer_AssignSignalGeneratorByResource

Usage:

AeroFlexGSMAnalyzer_AssignSignalGeneratorByResource($GSM,$SigGenResourceString ,$OscillatorResourceString,$LOisLocal);

Description:



This function assigns the signal generator resources to a GSM measurement system by the PXI Resource string. The hardware will be booted automatically as soon as it's assigned to the GSM Measurement system.





Note:

If you have used the AeroflexGSMAnalyzer_Open function as opposed to the AeroflexGSMAnalyzer_Init function, then these extra steps are unnecessary.



Function arguments



Parameter

Variable Type

Description



$GSM

Object

The GSM Object created with the AeroflexGSMAnalyzer_Init function.



$SigGenResourceString

String

The resource name of the signal generator.



$OscillatorResourceString

String

The resource name for the LO (303x module) to be used for the signal generator.



$LOisLocal

Boolean

If set to false, an external standard is used, otherwise an internal standard is used. This parameter refers to the oscillator reference for the digitizer.





Return parameters



Parameter

Variable Type

Description



None





Example: AeroflexGSMAnalyzer_AssignSignalGeneratorByResource($GSM,"PXI4::14::INSTR","PXI4::15",true);





AeroflexGSMAnalyzer_Close

Previous Top Next



* * *



AeroFlexGSMAnalyzer_Close

Usage:

AeroFlexGSMAnalyzer_Close($GSM);

Description:

This function closes the AeroFlex GSM Analysis System, aborts any running measurements, and frees the assigned instrument resources.





Function arguments



Parameter

Variable Type

Description



$GSM

Object

GSM Analyzer Object





Example:





$GSM = AeroflexGSMAnalyzer_Open("PXI4::14::INSTR","PXI4::15",true,"PXI4::10::INSTR","PXI4::11::INSTR",true);

AeroflexGSMAnalyzer_Reset($GSM);

SetFinalizeFunction("CloseGSM");





function CloseGSM()

{

AeroflexGSMAnalyzer_Close($GSM);

End;

}





AeroflexGSMAnalyzer_GetMeasurementTrace

Previous Top Next



* * *



AeroFlexGSMAnalyzer_GetMeasurementTrace

Usage:

$Trace = AeroFlexGSMAnalyzer_GetMeasurementTrace($GSM,$MeasurementType);

Description:



This function returns the requested measurement value from the GSM analyzer. In order to retrieve a measurement value, the measurement must be configured as active, and the measurement must have been started before calling this function.





In order to validate that the returned measurement is reliable, the user may call the AeroflexGSMAnalyzer_GetMeasurementValidity function which will verify that the measurement has been configured properly, and that it has been acquired.





This function returns an object containing a plot of X/Y values which can be passed to the Jabil Test graphing function to display the data to the user.





Function arguments



Parameter

Variable Type

Description



$GSM

Object

GSM Analysis Object



$MeasurementType

String

The measurement type to check for valid configuration parameters. Valid values are:

· "CAPTUREPOWERVSTIME"

· "MODACCEVMVSTIMEAVG"

· "MODACCEVMVSTIMEMAX"

· "MODACCEVMVSTIMEMIN"

· "MODACCEVMVSTIME"

· "MODACCPHASEERRORVSTIMEAVG"

· "MODACCPHASEERRORVSTIMEMAX"

· "MODACCPHASEERRORVSTIMEMIN"

· "ORFSMODULATIONPOWERVSFREQAVG"

· "ORFSMODULATIONPOWERVSFREQMAX"

· "ORFSMODULATIONPOWERVSFREQMIN"

· "ORFSSWITCHINGPOWERVSFREQ"

· "POWERFALLINGVSTIMEAVG"

· "POWERFALLINGVSTIMEMASKLOWERLIMIT"

· "POWERFALLINGVSTIMEMASKUPPERLIMIT"

· "POWERFALLINGVSTIMEMAX"

· "POWERFALLINGVSTIMEMIN"

· "POWERFALLINGVSTIME"

· "POWERRISINGVSTIMEAVG"

· "POWERRISINGVSTIMEMASKLOWERLIMIT"

· "POWERRISINGVSTIMEMASKUPPERLIMIT"

· "POWERRISINGVSTIMEMAX"

· "POWERRISINGVSTIMEMIN"

· "POWERRISINGVSTIMEAVG"

· "POWERUSEFULVSTIMEAVG"

· "POWERUSEFULVSTIMEMASKLOWERLIMIT"

· "POWERUSEFULVSTIMEMASKUPPERLIMIT"

· "POWERUSEFULVSTIMEMAX"

· "POWERUSEFULVSTIMEMIN"

· "POWERUSEFULVSTIME"

· "POWERVSFREQAVG"

· "POWERVSFREQMAX"

· "POWERVSFREQMIN"

· "POWERVSFREQ"

· "POWERVSTIMEAVG"

· "POWERVSTIMEMASKLOWERLIMIT"

· "POWERVSTIMEMASKUPPERLIMIT"

· "POWERVSTIMEMAX"

· "POWERVSTIMEMIN"

· "POWERVSTIME"





Return parameters



Parameter

Variable Type

Description



$MeasurementTrace

Object (PlotTrace2D)

A measurement object containing a trace of the X,Y coordinates of the captured data for graphing.





Example:

$Trace = AeroFlexGSMAnalyzer_GetMeasurementTrace($GSM,"POWERVSTIME");





AeroflexGSMAnalyzer_GetMeasurementValidity

Previous Top Next



* * *



AeroFlexGSMAnalyzer_GetMeasurementValidity

Usage:

$isvalid = AeroFlexGSMAnalyzer_GetMeasurementValidity($GSM,$MeasurementType);

Description:

This function returns a boolean value indicating whether or not the configuration parameters for the specified measurement type are currently valid. If the measurement has a valid configuration a value of 'TRUE' is returned, otherwise a value of 'FALSE' is returned.





Function arguments



Parameter

Variable Type

Description



$GSM

Object

GSM Analysis Object



$MeasurementType

String

The measurement type to check for valid configuration parameters. Valid values are:

· "ALL"

· "BER"

· "BURSTPOWER"

· "BURSTPOWERAVG"

· "BURSTPOWERMAX"

· "BURSTPOWERMIN"

· "BURSTTIMINGERROR"

· "BURSTTIMINGERRORAVG"

· "BURSTTIMINGERRORMAX"

· "BURSTTIMINGERRORMIN"

· "BURSTTYPE"

· "CAPTUREPOWERVSTIME"

· "EDGEDROOP"

· "EDGEDROOPAVG"

· "EDGEDROOPMAX"

· "EDGEDROOPMIN"

· "EDGEOOSSUPPRESSION"

· "EDGEOOSSUPPRESSIONAVG"

· "EDGEOOSSUPPRESIONMIN"

· "EDGEOOSSUPPRESIONMAX"

· "EDGEPERCENTILE"

· "FASTBURSTPOWER"

· "FASTBURSTPOWERAVG"

· "FASTBURSTPOWERMAX"

· "FASTBURSTPOWERMIN"

· "MODACCEVMMAX"

· "MODACCEVMMAXMAX"

· "MODACCEVMMIN"

· "MODACCEVMMINMIN"

· "MODACCEVMPEAK"

· "MODACCEVMPEAKAVG"

· "MODACCEVMPEAKMAX"

· "MODACCEVMPEAKMIN"

· "MODACCEVMRMS"

· "MODACCEVMRMSAVG"

· "MODACCEVMRMSMAX"

· "MODACCEVMRMSMIN"

· "MODACCEVMVSTIME"

· "MODACCEVMVSTIMEAVG"

· "MODACCEVMVSTIMEMAX"

· "MODACCEVMVSTIMEMIN"

· "MODACCFREQERROR"

· "MODACCFREQERRORAVG"

· "MODACCFREQERRORMAX"

· "MODACCFREQERRORMIN"

· "MODACCPHASEERRORMAX"

· "MODACCPHASEERRORMIN"

· "MODACCPHASEERRORMINMIN"

· "MODACCPHASEERRORPEAK"

· "MODACCPHASEERRORPEAKAVG"

· "MODACCPHASEERRORPEAKMAX"

· "MODACCPHASEERRORPEAKMIN"

· "MODACCPHASEERRORRMS"

· "MODACCPHASEERRORRMSAVG"

· "MODACCPHASEERRORRMSMAX"

· "MODACCPHASEERRORRMSMIN"

· "MODACCPHASEERRORVSTIME"

· "MODACCPHASEERRORVSTIMEAVG"

· "MODACCPHASEERRORVSTIMEMAX"

· "MODACCPHASEERRORVSTIMEMIN"

· "ORFSMODULATIONPOWERVSFREQ"

· "ORFSMODULATIONPOWERVSFREQAVG"

· "ORFSMODULATIONPOWERVSFREQMAX"

· "ORFSMODULATIONPOWERVSFREQMIN"

· "POWERFALLINGVSTIME"

· "POWERFALLINGVSTIMEAVG"

· "POWERFALLINGVSTIMEMASKLOWERLIMIT"

· "POWERFALLINGVSTIMEMASKUPPERLIMIT"

· "POWERFALLINGVSTIMEMAX"

· "POWERFALLINGVSTIMEMIN"

· "POWERFALLINGVSTIMEPASSFAIL"

· "POWERRISINGINGVSTIME"

· "POWERRISINGINGVSTIMEAVG"

· "POWERRISINGINGVSTIMEMASKLOWERLIMIT"

· "POWERRISINGINGVSTIMEMASKUPPERLIMIT"

· "POWERRISINGINGVSTIMEMAX"

· "POWERRISINGINGVSTIMEMIN"

· "POWERRISINGINGVSTIMEPASSFAIL"

· "POWERUSEFULVSTIME"

· "POWERUSEFULVSTIMEAVG"

· "POWERUSEFULVSTIMEMASKLOWERLIMIT"

· "POWERUSEFULVSTIMEMASKUPPERLIMIT"

· "POWERUSEFULVSTIMEMAX"

· "POWERUSEFULVSTIMEMIN"

· "POWERUSEFULVSTIMEPASSFAIL"

· "POWERVSFREQ"

· "POWERVSFREQAVG"

· "POWERVSFREQMAX"

· "POWERVSFREQMIN"

· "POWERVSTIME"

· "POWERVSTIMEAVG"

· "POWERVSTIMEMASKLOWERLIMIT"

· "POWERVSTIMEMASKUPPERLIMIT"

· "POWERVSTIMEMAX"

· "POWERVSTIMEMIN"

· "POWERVSTIMEPASSFAIL"

· "TSC"





Return parameters



Parameter

Variable Type

Description



$IsValid

Boolean

· Returns 'TRUE' or 'FALSE' depending on whether or not the measurement is configured properly.





Example:

AeroFlexGSMAnalyzer_GetMeasurementValidity($GSM,"EDGEDROOPMAX");





AeroflexGSMAnalyzer_GetMeasurementValue

Previous Top Next



* * *



AeroFlexGSMAnalyzer_GetMeasurementValue

Usage:

$isvalid = AeroFlexGSMAnalyzer_GetMeasurementValue($GSM,$MeasurementType);

Description:



This function returns the requested measurement value from the GSM analyzer. In order to retrieve a measurement value, the measurement must be configured as active, and the measurement must have been started before calling this function.





In order to validate that the returned measurement is reliable, the user may call the AeroflexGSMAnalyzer_GetMeasurementValidity function which will verify that the measurement has been configured properly, and that it has been acquired.





Function arguments



Parameter

Variable Type

Description



$GSM

Object

GSM Analysis Object



$MeasurementType

String

The measurement type to check for valid configuration parameters. Valid values are:

· "BERBITSINERROR"

· "BERERRORRATE"

· "BERSPEECHERASEDFRAMES"

· "BERSPEECHFRAMEERASURERATE"

· "BERTOTALBITS"

· "BERTOTALFRAMES"

· "BURSTPOWER"

· "BURSTPOWERAVG"

· "BURSTPOWERMAX"

· "BURSTPOWERMIN"

· "BURSTTIMINGERROR"

· "BURSTTIMINGERRORAVG"

· "BURSTTIMINGERRORMAX"

· "BURSTTIMINGERRORMIN"

· "CARRIERFREQUENCY"

· "EDGEDROOP"

· "EDGEDROOPAVG"

· "EDGEDROOPMAX"

· "EDGEDROOPMIN"

· "EDGEOOSUPPRESSION"

· "EDGEOOSUPPRESSIONAVG"

· "EDGEOOSUPPRESSIONMAX"

· "EDGEOOSUPPRESSIONMIN"

· "EDGEPERCENTILE"

· "EDGEPERCENTILEBURSTS"

· "FASTBURSTPOWER"

· "FASTBURSTPOWERAVG"

· "FASTBURSTPOWERMAX"

· "FASTBURSTPOWERMIN"

· "MODACCEVMMAX"

· "MODACCEVMMAXMAX"

· "MODACCEVMMIN"

· "MODACCEVMMINMIN"

· "MODACCEVMPEAK"

· "MODACCEVMPEAKAVG"

· "MODACCEVMPEAKMAX"

· "MODACCEVMPEAKMIN"

· "MODACCEVMRMS"

· "MODACCEVMRMSAVG"

· "MODACCEVMRMSMAX"

· "MODACCEVMRMSMIN"

· "MODACCFREQERROR"

· "MODACCFREQERRORAVG"

· "MODACCFREQERRORMAX"

· "MODACCFREQERRORMIN"

· "MODACCPHASEERRORMAX"

· "MODACCPHASEERRORMIN"

· "MODACCPHASEERRORMINMIN"

· "MODACCPHASEERRORPEAK"

· "MODACCPHASEERRORPEAKAVG"

· "MODACCPHASEERRORPEAKMAX"

· "MODACCPHASEERRORPEAKMIN"

· "MODACCPHASEERRORRMS"

· "MODACCPHASEERRORRMSAVG"

· "MODACCPHASEERRORRMSMAX"

· "MODACCPHASEERRORRMSMIN"

· "POWERFALLINGVSTIMEFAILLEVEL"

· "POWERFALLINGVSTIMEFAILTIME"

· "POWERFALLINGVSTIMEPASSFAIL"

· "POWERRISINGVSTIMEFAILLEVEL"

· "POWERRISINGVSTIMEFAILTIME"

· "POWERRISINGVSTIMEPASSFAIL"

· "POWERUSEFULVSTIMEFAILLEVEL"

· "POWERUSEFULVSTIMEFAILTIME"

· "POWERUSEFULVSTIMEPASSFAIL"

· "POWERVSTIMEFAILLEVEL"

· "POWERVSTIMEFAILTIME"

· "POWERVSTIMEPASSFAIL"





Return parameters



Parameter

Variable Type

Description



$MeasurementValue

Boolean, Integer, Float

Returns a boolean, integer, or floating point value depending on the measurement type requested.





Example:

AeroFlexGSMAnalyzer_GetMeasurementValue($GSM,"BERBITSINERROR");





AeroflexGSMAnalyzer_GetVersion

Previous Top Next



* * *



AeroFlexGSMAnalyzer_GetVersion

Usage:

$Version = AeroFlexGSMAnalyzer_GetVersion($GSM);

Description:

This function returns the version number of the underlying measurement library DLL as a single string.





Function arguments



Parameter

Variable Type

Description



$GSM

Object

GSM Analysis Object





Return Values



Parameter

Variable Type

Description



$Version

String

A string containing the version information of the underlying measurement library.





Example:





$Version = AeroFlexGSMAnalyzer_GetVersion($GSM);





AeroflexGSMAnalyzer_Init

Previous Top Next



* * *



AeroFlexGSMAnalyzer_Init

Usage:

$Handle = AeroFlexGSMAnalyzer_Init();

Description:



This function creates a handle to a GSM analyzer object, which is a composite, user-friendly interface to using the Aeroflex PXI Signal Generator and Digitizer for making common GSM physical layer measurements.





Note:





This function does not assign any hardware to the GSM Analysis object and this must be done in separate test commands before using the GSM Analysis System.





If you would like to create and assign all the instruments to the GSM Analysis system in a single step, please see the AeroflexGSMAnalyzer_Open function which performs all these operations in a single step.





Function arguments



Parameter

Variable Type

Description





Return parameters



Parameter

Variable Type

Description



$Handle

Object

Returns the handle to the GSM analysis object used to pass to subsequent measurement functions.





Example:

$GSM = AeroflexGSMAnalyzer_Init();

AeroflexGSMAnalyzer_Reset($GSM);

SetFinalizeFunction("CloseGSM");





function CloseGSM()

{

AeroflexGSMAnalyzer_Close($GSM);

End;

}





AeroflexGSMAnalyzer_Open

Previous Top Next



* * *



AeroFlexSpectrumAnalyzer_Open

Usage:

$Handle = AeroFlexGSMAnalyzer_Open($DigitizerResourceString ,$OscillatorResourceString,$LOisLocal,$SigGenResourceString,$SigGenOscillatorResourceString,$SigGenLOIsLocal);

Description:



This function creates a handle to a GSM analyzer object, which is a composite, user-friendly interface to using the Aeroflex PXI Signal Generator and Digitizer for making common GSM physical layer measurements.





After calling the AeroFlexGSMAnalyzer_Open function, you must close the instrument using the AeroFlexGSMAnalyzer_Close function to release the instrument resources.





Note:

This function allocates the necessary digitizer, oscillators, and signal generators to the GSM analysis system. While these resources have been assigned to the GSM analysis system, they may not be used simultaneously with other operations, such as the Aeroflex Spectrum Analyzer interface.





Function arguments



Parameter

Variable Type

Description



$DigitizerResourceString

String

Digitizer Resource String for the RF resource (301x module) that is to be created and used by the GSM measurement library



$OscillatorResourceString

String

Oscillator Resource String for the LO (303x module) that is to be created and used by the GSM measurement library.



$LOisLocal

Boolean

If set to false, an external standard is used, otherwise an internal standard is used. This parameter refers to the oscillator reference for the digitizer.



$SigGenResourceString

String

The resource name of the signal generator.



$SigGenOscillatorResourceString

String

The resource name for the LO (303x module) to be used for the signal generator



$SigGenLOIsLocal

Boolean

If set to false, and external standard is used, otherwise an internal standard is used. This parameter refers to the oscillator reference for the signal generator.





Return parameters



Parameter

Variable Type

Description



$Handle

Object

Returns the handle to the GSM analysis object used to pass to subsequent measurement functions.





Example:

$GSM = AeroflexGSMAnalyzer_Open("PXI4::14::INSTR","PXI4::15",true,"PXI4::10::INSTR","PXI4::11::INSTR",true);

AeroflexGSMAnalyzer_Reset($GSM);

SetFinalizeFunction("CloseGSM");





function CloseGSM()

{

AeroflexGSMAnalyzer_Close($GSM);

End;

}





AeroflexGSMAnalyzer_Reset

Previous Top Next



* * *



AeroFlexGSMAnalyzer_Reset

Usage:

AeroFlexGSMAnalyzer_Reset($GSM);

Description:

This function is to reset the AeroFlex GSM Analysis stack and all allocated hardware resources to their initial "power-on" defaults.

Important Note:

This function will not reset the default state of any RF combiners in the system as they are not used as part of the GSM analysis system, but must be controlled externally.





Function arguments



Parameter

Variable Type

Description



$GSM

Object

GSM Analysis Object





Example:





AeroFlexGSMAnalyzer_Reset($GSM);





AeroflexGSMAnalyzer_SetARFChannelNumber

Previous Top Next



* * *



AeroFlexGSMAnalyzer_SetARFChannelNumber

Usage:

AeroFlexGSMAnalyzer_SetARFChannelNumber($GSM,$ARFCN);

Description:



Sets/gets the absolute radio frequency (ARF) channel number. Specifying a channel number will set a specific digitizer frequency, and where acquired a particular signal generator frequency. The frequencies that the channel number relates to are dependent upon the current system band.

The following table provides a summary of the relationship between system band, power control level, absolute radio frequency channel number (ARFCN) and uplink frequency ranges. System Band

Power

Control

Level

Output Power (dBm)

ARFCN

Uplink Frequency (MHz)



GSM400

0-31

39 - 5

259 - 293

306 - 340

450.6 - 457.4

479.0 - 485.8



GSM700

0-31

39 - 5

438 - 511

747.2 - 761.8



GSM850

0-31

39 - 5

128 - 251

824.2 - 848.8



GSM900

0-31

39 - 5

0 - 124

975 - 1023

890.0 - 914.8

880.2 - 889.8



DCS1800

0-31

36 - 0

512 - 885

1710.2 - 1784.8



PCS1900 *

0-15

30-31

30 - 0

33 - 32

512 - 810

1850.2 - 1909.8





* Note: for the PCS1900 band the PCL range 16-29 is reserved.



Function arguments



Parameter

Variable Type

Description



$GSM

Object

GSM Analysis Object



$ARFCN

Integer

The Absolute radio frequency channel number for analysis and measurement functions.





Return Values



Parameter

Variable Type

Description



None





Example:





AeroFlexGSMAnalyzer_SetARFChannelNumber($GSM,128);





AeroflexGSMAnalyzer_SetAttenuatorLevel

Previous Top Next



* * *



AeroFlexGSMAnalyzer_SetAttenuatorLevel

Usage:

AeroFlexGSMAnalyzer_SetAttenuatorLevel($GSM,$AttenuatorLevel);

Description:

Sets the digitizer's RF attenuation level specified in dB. The attenuation is specified as a positive integer.



Note:



This function only has an effect in the event that the attenuator mode is set to 'MANUAL'.





Function arguments



Parameter

Variable Type

Description



$GSM

Object

GSM Analysis Object



$AttenuatorLevel

Integer

The level of the attenuator specified in dB.





Return Values



Parameter

Variable Type

Description



None





Example:

AeroFlexGSMAnalyzer_SetAttenuatorLevel($GSM,6); // Sets attenuator to -6 dB





AeroflexGSMAnalyzer_SetAttenuatorMode

Previous Top Next



* * *



AeroFlexGSMAnalyzer_SetAttenuatorMode

Usage:

AeroFlexGSMAnalyzer_SetAttenuatorMode($GSM,$AttenuatorMode);

Description:

This function is used to toggle the attenuator mode between a manual mode setting and an automatic setting in which the attenuation is automatically calculated by the user setting the reference level. The attenuation is coupled with the reference level, so there is no direct control of the attenuation in auto mode.



With the Attenuator mode set to Manual, direct control is provided for both the reference level and the attenuation level.





Important Note:



Please be aware that when using the attenuator in a manual mode it may be possible to damage the test equipment if the reference level and the attenuator mode are not properly set in the correct order with a high input power applied to the RF digitizer input.





Function arguments



Parameter

Variable Type

Description



$GSM

Object

GSM Analysis Object



$AttenuatorMode

String

The desired attenuator mode of operation. Supported values are:

· "AUTO"

· "MANUAL"





Return Values



Parameter

Variable Type

Description



None





Example:

AeroFlexGSMAnalyzer_SetAttenuatorMode($GSM,"AUTO");





AeroflexGSMAnalyzer_SetAutoAnalysisTSC

Previous Top Next



* * *



AeroflexGSMAnalyzer_SetAutoAnalysisTSC



Usage:

AeroflexGSMAnalyzer_SetAutoAnalysisTSC($GSM,$DUT,$AutoTSCMode);

Description:

This function sets the automatic burst type detection mode for the specified device under test (DUT). When automatic mode is enabled, the burst type is detected from the burst analysis;

The GSM measurement library currently supports a single DUT. The DUT index is zero-based (i.e. 0 signifies DUT1). If support for multiple DUTs is added in the future, then an index of 1 would apply for DUT2, 2 for DUT3, and so on.





Function arguments



Parameter

Variable Type

Description



$GSM

Object

GSM Analysis Object



$DUT

Integer

The DUT Number for configuration of the TSC Mode. (Current API only supports 0)



$AutoTSCMode

Boolean

The desired auto type of the GSM measurement. Supported auto burst types are:

· true = Automatic TSC type detection is enabled for the specified DUT.

· false = Automatic TSC type detection is disabled for the specified DUT.





Return Values



Parameter

Variable Type

Description



None





Example:





AeroflexGSMAnalyzer_SetAutoAnalysisTSC($GSM,0,$TRUE); /// Configures to enable Auto burst detection;





AeroflexGSMAnalyzer_SetAutoBurstTypeDetection

Previous Top Next



* * *



AeroflexGSMAnalyzer_SetAutoBurstTypeDetection



Usage:

AeroflexGSMAnalyzer_SetAutoBurstTypeDetection($GSM,$DUT,$AutoBurstMode);

Description:

This function sets the automatic burst type detection mode for the specified device under test (DUT). When automatic mode is enabled, the burst type is detected from the burst analysis.

The GSM measurement library currently supports a single DUT. The DUT index is zero-based (i.e. 0 signifies DUT1). If support for multiple DUTs is added in the future, then an index of 1 would apply for DUT2, 2 for DUT3, and so on.





Function arguments



Parameter

Variable Type

Description



$GSM

Object

GSM Analysis Object



$AutoBurstMode

Boolean

The desired auto burst type detection of the GSM measurement. Supported auto burst detection types are:

· true = Automatic burst type detection is enabled for the specified DUT.

· false = Automatic burst type detection is disabled for the specified DUT.





Return Values



Parameter

Variable Type

Description



None





Example:





AeroflexGSMAnalyzer_SetAutoBurstTypeDetection($GSM,0,$TRUE); /// Configures to enable Auto burst detection;





AeroflexGSMAnalyzer_SetAveraging

Previous Top Next



* * *



AeroFlexGSMAnalyzer_SetAveraging

Usage:

AeroFlexGSMAnalyzer_SetAveraging($GSM,$AverageCount);

Description:

This function sets the number of averages taken by the digitizer and affects all measurement types that support averaging.





Function arguments



Parameter

Variable Type

Description



$GSM

Object

GSM Analysis Object



$AverageCount

Integer

The number of averages





Return Values



Parameter

Variable Type

Description



None





Example:

AeroFlexGSMAnalyzer_SetAveraging($GSM,20);





AeroflexGSMAnalyzer_SetBERBurstFrameToTest

Previous Top Next



* * *



AeroflexGSMAnalyzer_SetBERBurstFrameToTest



Usage:

AeroflexGSMAnalyzer_SetBERBurstFrameToTest($GSM,$BERBurstFrames);

Description:





Sets the BER burst frames to test.

The minimum is 1, the maximum is 1000 frames and default is 100 frames ;





Function arguments



Parameter

Variable Type

Description



$GSM

Object

GSM Analysis Object



$BERBurstFrames

Integer

Number of BER burst frames to test





Return Values



Parameter

Variable Type

Description



None





Example:

AeroflexGSMAnalyzer_SetBERBurstFrameToTest($GSM,200); // Sets BER burst frames to test to 200;





AeroflexGSMAnalyzer_SetBERSpeechFramesToTest

Previous Top Next



* * *



AeroflexGSMAnalyzer_SetBERSpeechFramesToTest



Usage:

AeroflexGSMAnalyzer_SetBERSpeechFramesToTest($GSM,$BERSpeechFrames);

Description:





Sets the BER speech frames to test.

The minimum is 1, the maximum is 250frames and default is 25 frames ;





Function arguments



Parameter

Variable Type

Description



$GSM

Object

GSM Analysis Object



$BERSpeechFrames

Integer

Number of BER speech frames to test





Return Values



Parameter

Variable Type

Description



None





Example:

AeroflexGSMAnalyzer_SetBERSpeechFramesToTest($GSM,50); // Sets BER speech frames to test to 50;





AeroflexGSMAnalyzer_SetBand

Previous Top Next



* * *



AeroFlexGSMAnalyzer_SetBand

Usage:

AeroFlexGSMAnalyzer_SetBand($GSM,$Band);

Description:

This function sets the system band used by the measurement object. The following table provides a summary of the relationship between system band, power control level, and ARFCN channels frequencies:



System Band

Power

Control

Level

Output Power (dBm)

ARFCN

Uplink Frequency (MHz)



GSM400

0-31

39 - 5

259 - 293

306 - 340

450.6 - 457.4

479.0 - 485.8



GSM700

0-31

39 - 5

438 - 511

747.2 - 761.8



GSM850

0-31

39 - 5

128 - 251

824.2 - 848.8



GSM900

0-31

39 - 5

0 - 124

975 - 1023

890.0 - 914.8

880.2 - 889.8



DCS1800

0-31

36 - 0

512 - 885

1710.2 - 1784.8



PCS1900 *

0-15

30-31

30 - 0

33 - 32

512 - 810

1850.2 - 1909.8



* Note: for the PCS1900 band the PCL range 16-29 is reserved.





Function arguments



Parameter

Variable Type

Description



$GSM

Object

GSM Analysis Object



$Band

String

The desired RF band of operation:

· "GSM400"

· "GSM700"

· "GSM850"

· "GSM900"

· "DCS1800"

· "PCS1900"





Return Values



Parameter

Variable Type

Description



None





Example:

AeroFlexGSMAnalyzer_SetBand($GSM,"PCS1900");





AeroflexGSMAnalyzer_SetBurstType

Previous Top Next



* * *



AeroflexGSMAnalyzer_SetBurstType



Usage:

AeroflexGSMAnalyzer_SetBurstType($GSM,$DUT,$BurstType);

Description:





Set the burst type for the specified device under test (DUT).

The allowed burst types are EDGE, NORNAL and ACCESS;

The GSM measurement library currently supports a single DUT. The DUT index is zero-based (i.e. 0 signifies DUT1). If support for multiple DUTs is added in the future, then an index of 1 would apply for DUT2, 2 for DUT3, and so on.





Function arguments



Parameter

Variable Type

Description



$GSM

Object

GSM Analysis Object



$DUT

Integer

The DUT number for configuring the anticipated burst type.



$BurstType

String

The desired burst type of the GSM measurement system. Supported burst types are:

· "EDGE"

· "NORMAL"

· "ACCESS"





Return Values



Parameter

Variable Type

Description



None





Example:





AeroflexGSMAnalyzer_SetBurstType($GSM,0,$EDGE); /// Configures EDGE burst type





AeroflexGSMAnalyzer_SetDUTTimeSlot

Previous Top Next



* * *



AeroflexGSMAnalyzer_SetDUTTimeSlot

Usage:

AeroflexGSMAnalyzer_SetDUTTimeslot($GSM,$DUT,$Timeslot);

Description:

Sets/gets the time slot to be tested for the specified device under test (DUT). Setting the time slot to -1 signifies any time slot.





Function arguments



Parameter

Variable Type

Description



$GSM

Object

GSM Analysis Object



$DUT

Integer

The DUT index for configuring the timeslot. (Note: Aeroflex API only supports 0 at the moment)



$Timeslot

Integer

The time slot to be tested





Return Values



Parameter

Variable Type

Description



None





Example:





AeroflexGSMAnalyzer_SetDUTTimeslot($GSM,0,0); // Sets DUT to 0 and Timeslot to 0





AeroflexGSMAnalyzer_SetDigitizerFrequency

Previous Top Next



* * *



AeroFlexGSMAnalyzer_SetDigitizerFrequency

Usage:

AeroFlexGSMAnalyzer_SetDigitizerFrequency($GSM,$Frequency);

Description:



This function sets the digitizer frequency in (hertz).





Function arguments



Parameter

Variable Type

Description



$GSM

Object

GSM Analysis Object



$Frequency

Float

The desired frequency of the digitizer





Return Values



Parameter

Variable Type

Description



None





Example:

AeroFlexGSMAnalyzer_SetDigitizerFrequency($GSM,1555000);





AeroflexGSMAnalyzer_SetDownlinkTSC

Previous Top Next



* * *



AeroflexGSMAnalyzer_SetDownlinkTSC



Usage:

AeroflexGSMAnalyzer_SetDownlinkTSC($GSM,,$DownlinkTSC);

Description:

Sets downlink training sequence code code to be used for GSM measurements.





(Not to be confused with the DUT TSC code... see the AeroflexGSMAnalyzer_SetTSC function for details)





Function arguments



Parameter

Variable Type

Description



$GSM

Object

GSM Analysis Object



$DownlinkTSC

Integer

The timeslot to be generated for the downlink TSC.





Return Values



Parameter

Variable Type

Description



None





Example:





AeroflexGSMAnalyzer_SetDownlinkTSC($GSM,0); // Sets the TSC to Time Slot 0;





AeroflexGSMAnalyzer_SetEnabledMeasurements

Previous Top Next



* * *



AeroFlexGSMAnalyzer_SetEnabledMeasurement

Usage:

AeroFlexGSMAnalyzer_SetEnabledMeasurement($GSMAnalyzer, $MeasurementType, $Enabled);

Description:



This function sets the given measurement type to enabled or disabled depending on the value supplied for the $Enabled parameter.





Within the GSM measurement library, there are a range of available measurements that may be performed. One or more of these measurements may therefore be enabled, however, the more measurements that are enabled will increase the duration required to complete the measurement due to the additional analysis time required.



The default setting is that all measurements are disabled, and the order in which specific measurements are enabled or disabled is immaterial and has no effect.





Function arguments



Parameter

Variable Type

Description



$GSMAnalyzer

Object

GSM Analysis Object



$MeasurementType

String

The desired measurement type. Valid values are:

· "ALL"

· "BER"

· "BURSTPOWER"

· "BURSTPOWERAVG"

· "BURSTPOWERMAX"

· "BURSTPOWERMIN"

· "BURSTTIMINGERROR"

· "BURSTTIMINGERRORAVG"

· "BURSTTIMINGERRORMAX"

· "BURSTTIMINGERRORMIN"

· "BURSTTYPE"

· "CAPTUREPOWERVSTIME"

· "EDGEDROOP"

· "EDGEDROOPAVG"

· "EDGEDROOPMAX"

· "EDGEDROOPMIN"

· "EDGEOOSSUPPRESSION"

· "EDGEOOSSUPPRESSIONAVG"

· "EDGEOOSSUPPRESSIONMIN"

· "EDGEOOSSUPPRESSIONMAX"

· "EDGEPERCENTILE"

· "FASTBURSTPOWER"

· "FASTBURSTPOWERAVG"

· "FASTBURSTPOWERMAX"

· "FASTBURSTPOWERMIN"

· "MODACCEVMMAX"

· "MODACCEVMMAXMAX"

· "MODACCEVMMIN"

· "MODACCEVMMINMIN"

· "MODACCEVMPEAK"

· "MODACCEVMPEAKAVG"

· "MODACCEVMPEAKMAX"

· "MODACCEVMPEAKMIN"

· "MODACCEVMRMS"

· "MODACCEVMRMSAVG"

· "MODACCEVMRMSMAX"

· "MODACCEVMRMSMIN"

· "MODACCEVMVSTIME"

· "MODACCEVMVSTIMEAVG"

· "MODACCEVMVSTIMEMAX"

· "MODACCEVMVSTIMEMIN"

· "MODACCFREQERROR"

· "MODACCFREQERRORAVG"

· "MODACCFREQERRORMAX"

· "MODACCFREQERRORMIN"

· "MODACCPHASEERRORMAX"

· "MODACCPHASEERRORMIN"

· "MODACCPHASEERRORMINMIN"

· "MODACCPHASEERRORPEAK"

· "MODACCPHASEERRORPEAKAVG"

· "MODACCPHASEERRORPEAKMAX"

· "MODACCPHASEERRORPEAKMIN"

· "MODACCPHASEERRORRMS"

· "MODACCPHASEERRORRMSAVG"

· "MODACCPHASEERRORRMSMAX"

· "MODACCPHASEERRORRMSMIN"

· "MODACCPHASEERRORRVSTIME"

· "MODACCPHASEERRORRVSTIMEAVG"

· "MODACCPHASEERRORRVSTIMEMAX"

· "MODACCPHASEERRORRVSTIMEMIN"

· "ORFSMODULATIONPOWERVSFREQ"

· "ORFSMODULATIONPOWERVSFREQAVG"

· "ORFSMODULATIONPOWERVSFREQMAX"

· "ORFSMODULATIONPOWERVSFREQMIN"

· "POWERFALLINGVSTIME"

· "POWERFALLINGVSTIMEAVG"

· "POWERFALLINGVSTIMEMASKLOWERLIMIT"

· "POWERFALLINGVSTIMEMASKUPPERLIMIT"

· "POWERFALLINGVSTIMEMAX"

· "POWERFALLINGVSTIMEMIN"

· "POWERFALLINGVSTIMEPASSFAIL"

· "POWERRISINGINGVSTIME"

· "POWERRISINGINGVSTIMEAVG"

· "POWERRISINGINGVSTIMEMASKLOWERLIMIT"

· "POWERRISINGINGVSTIMEMASKUPPERLIMIT"

· "POWERRISINGINGVSTIMEMAX"

· "POWERRISINGINGVSTIMEMIN"

· "POWERRISINGINGVSTIMEPASSFAIL"

· "POWERUSEFULVSTIME"

· "POWERUSEFULVSTIMEAVG"

· "POWERUSEFULVSTIMEMASKLOWERLIMIT"

· "POWERUSEFULVSTIMEMASKUPPERLIMIT"

· "POWERUSEFULVSTIMEMAX"

· "POWERUSEFULVSTIMEMIN"

· "POWERUSEFULVSTIMEPASSFAIL"

· "POWERVSFREQ"

· "POWERVSFREQAVG"

· "POWERVSFREQMAX"

· "POWERVSFREQMIN"

· "POWERVSTIME"

· "POWERVSTIMEAVG"

· "POWERVSTIMEMASKLOWERLIMIT"

· "POWERVSTIMEMASKUPPERLIMIT"

· "POWERVSTIMEMAX"

· "POWERVSTIMEMIN"

· "POWERVSTIMEPASSFAIL"

· "TSC"



$Enabled

Boolean

A true/false value indicating whether or not the measurement should be enabled.





Example:





AeroFlexGSMAnalyzer_SetEnabledMeasurement($GSMAnalyzer,"BURSTPOWER",true);





AeroflexGSMAnalyzer_SetHeadroomLevel

Previous Top Next



* * *



AeroFlexGSMAnalyzer_SetHeadroomLevel

Usage:

AeroFlexGSMAnalyzer_SetHeadroomLevel($GSM,$HeadroomLevel);

Description:



This function sets the headroom level specified in dB.

When a measurement is performed, the signal's peak power may tend to be higher than the RMS power level as specified for the device under test (specified by the reference level). Therefore, upon performing the measurement, an ADC overload may occur. To help ensure that the ADC does not overload, this difference between peak power and RMS power level may be accommodated by specifying the headroom level.





Function arguments



Parameter

Variable Type

Description



$GSM

Object

GSM Analysis Object



$HeadroomLevel

Float

The headroom level specified in dB





Return Values



Parameter

Variable Type

Description



None





Example:

AeroFlexGSMAnalyzer_SetHeadroomLevel($GSM,2); // Sets Headroom level to 2dB





AeroflexGSMAnalyzer_SetHighPowerCCH

Previous Top Next



* * *



AeroflexGSMAnalyzer_SetHighPowerCCH



Usage:

AeroflexGSMAnalyzer_SetHighPowerCCH($GSM,$Highpower);

Description:

This function sets the High Power CCH mode. This ensures the first timeslot is transmitted at 20dB higher than the other timeslots in the frame. This helps with synchronization.





Function arguments



Parameter

Variable Type

Description



$GSM

Object

GSM Analysis Object



$Highpower

Boolean

Sets High Power CCH mode.

· True = High power CCH mode is enabled.

· False = High power CCH mode is disabled.





Return Values



Parameter

Variable Type

Description



None





Example:





AeroflexGSMAnalyzer_SetHighPowerCCH($GSM,$TRUE); /// Configures to enable High power CCH mode;





AeroflexGSMAnalyzer_SetInputOffset

Previous Top Next



* * *



AeroFlexGSMAnalyzer_SetInputOffset

Usage:

AeroFlexGSMAnalyzer_SetInputOffset($GSM,$InputOffset);

Description:



Sets the input offset in dB that will be applied to the measurement library to accommodate a simple loss model between the DUT and the digitizer input.



Function arguments



Parameter

Variable Type

Description



$GSM

Object

GSM Analysis Object



$InputOffset

Float

The input offset specified in dB.





Return Values



Parameter

Variable Type

Description



None





Example:





AeroFlexGSMAnalyzer_SetInputOffset($GSM,18); // Sets the input offset to the Digitizer





AeroflexGSMAnalyzer_SetLoopbackMode

Previous Top Next



* * *



AeroflexGSMAnalyzer_SetLoopbackMode



Usage:

AeroflexGSMAnalyzer_SetLoopbackMode($GSM,$LoopbackMode);

Description:

This function sets the loopback mode to either A/B or C.





Function arguments



Parameter

Variable Type

Description



$GSM

Object

GSM Analysis Object



$LoopbackMode

String

The desired loopback mode of operation. Supported values are:

· "SPEECH " for mode A/B.

· "BURST" for Mode C.





Return Values



Parameter

Variable Type

Description



None





Example:

AeroFlexGSMAnalyzer_SetAttenuatorMode($GSM,"BURST"); // Configures loop back mode C.





AeroflexGSMAnalyzer_SetMeasurementRunMode

Previous Top Next



* * *



AeroflexGSMAnalyzer_SetMeasurementRunMode



Usage:

AeroflexGSMAnalyzer_SetMeasurementRunMode($GSM,$RunMode);

Description:

Sets the measurement run mode.





Function arguments



Parameter

Variable Type

Description



$GSM

Object

GSM Analysis Object



$RunMode

String

The desired auto burst type detection of the GSM measurement. Supported run modes are:

· "SINGLE" Takes one measurement.

· "CONTINUOUS" Repeats measurement.





Return Values



Parameter

Variable Type

Description



None





Example:





AeroflexGSMAnalyzer_SetMeasurementRunMode($GSM,"CONTINUOUS"); // Configures repeat measurement.





AeroflexGSMAnalyzer_SetMinCaptureTime

Previous Top Next



* * *



AeroFlexGSMAnalyzer_SetMinCaptureTime

Usage:

AeroFlexGSMAnalyzer_SetMinCaptureTime($GSM,$MinCaptureTime);

Description:



This function sets the minimum capture time in seconds. This value should be set long enough to guarantee finding a complete RF burst to analyze. This property is referred to as 'Search Length' in certain portions of the Aeroflex documentation, as well as PXI Studio.





Function arguments



Parameter

Variable Type

Description



$GSM

Object

GSM Analysis Object



$MinCaptureTime

Float

The minimum capture time after a trigger event occurs.

Minimum Value = 0.0 s

Maximum Value = 1.0s

Default Value = 0.0053s (capture 1 frame+1 slot)





Return Values



Parameter

Variable Type

Description



None





Example:





AeroFlexGSMAnalyzer_SetMinCaptureTime($GSM,0.500); // sets minimum capture time to 500 milliseconds.





AeroflexGSMAnalyzer_SetORFSSpectrumFrequency

Previous Top Next



* * *



AeroFlexGSMAnalyzer_SetORFSSpectrumFrequency

Usage:

AeroFlexGSMAnalyzer_SetORFSSpectrumFrequency($GSM,$FrequencyArray);

Description:

This function sets the analysis frequencies used for the ORFS readings. The $FrequencyArray argument is a 1D array containing the spectrum frequencies to be measured expressed in Hertz.

Note: The frequency array must begin at 0 Hertz.





Function arguments



Parameter

Variable Type

Description



$GSM

Object

GSM Analysis Object



$FrequencyArray

Array

The desired ORFS spectrum frequencies for measurement.





Return Values



Parameter

Variable Type

Description



None





Example:





$Array = Array_Create("Integer",5,1);

Array_SetValue($Array,1,0,0);

Array_SetValue($Array,1,1,-200000);

Array_SetValue($Array,1,2,200000);

Array_SetValue($Array,1,3,-400000);

Array_SetValue($Array,1,4,400000);





AeroFlexGSMAnalyzer_SetORFSSpectrumFrequency($GSM,$Array);

// Sets the ORFS frequencies to 0,-200K,200K,-400K,400K





AeroflexGSMAnalyzer_SetOutputOffset

Previous Top Next



* * *



AeroFlexGSMAnalyzer_SetOutputOffset

Usage:

AeroFlexGSMAnalyzer_SetOutputOffset($GSM,$OutputOffset);

Description:



Sets the output offset in dB that will be applied to the measurement library to accommodate a simple loss model between the DUT and the signal generator output.



Function arguments



Parameter

Variable Type

Description



$GSM

Object

GSM Analysis Object



$OutputOffset

Float

The output offset specified in dB.





Return Values



Parameter

Variable Type

Description



None





Example:





AeroFlexGSMAnalyzer_SetOutputOffset($GSM,6); // Sets the output offset to the Signal Generator





AeroflexGSMAnalyzer_SetPCLLevel

Previous Top Next



* * *



AeroFlexGSMAnalyzer_SetPCLLevel

Usage:

AeroFlexGSMAnalyzer_SetPCLLevel($GSM,$PCLLevel);

Description:



This function sets the power control level.

This property defines the nominal power control level setting of the mobile being analysed. When used in conjunction with the system band setting, it defines the power profile template mask that is used when burst modulation analysis is performed. The power control level can be set within the range 0 to 31, according to the following table.

The table provides a summary of the relationship between system band, power control level, absolute radio frequency channel number (ARFCN) and uplink frequency ranges.

Note: This function needs to be used in conjunction with the 'SetBand' function in order to properly apply the power level. The AeroflexGSMAnalyzer_SetBand command should be run before setting the PCL level.

System Band

Power

Control

Level

Output Power (dBm)

ARFCN

Uplink Frequency (MHz)



GSM400

0-31

39 - 5

259 - 293

306 - 340

450.6 - 457.4

479.0 - 485.8



GSM700

0-31

39 - 5

438 - 511

747.2 - 761.8



GSM850

0-31

39 - 5

128 - 251

824.2 - 848.8



GSM900

0-31

39 - 5

0 - 124

975 - 1023

890.0 - 914.8

880.2 - 889.8



DCS1800

0-31

36 - 0

512 - 885

1710.2 - 1784.8



PCS1900 *

0-15

30-31

30 - 0

33 - 32

512 - 810

1850.2 - 1909.8





* Note: for the PCS1900 band the PCL range 16-29 is reserved.





Function arguments



Parameter

Variable Type

Description



$GSM

Object

GSM Analysis Object



$PCLLevel

Integer

The power control level





Return Values



Parameter

Variable Type

Description



None





Example:

AeroFlexGSMAnalyzer_SetPCLLevel($GSM,6); // Sets PCL level to 6





AeroflexGSMAnalyzer_SetPowerVsFreqRBW

Previous Top Next



* * *



AeroFlexGSMAnalyzer_SetPowerVsFreqRBW

Usage:

AeroFlexGSMAnalyzer_SetPowerVsFreqRBW($GSM,$ResolutionBandwidth);

Description:

This function sets the resolution bandwidth for the power vs. frequency measurement.



Function arguments



Parameter

Variable Type

Description



$GSM

Object

GSM Analysis Object



$ResolutionBandwidth

Integer

The resolution bandwidth. Allowable values are 10kHz, 30kHz, and 100 kHz.





Return Values



Parameter

Variable Type

Description



None





Example:





AeroFlexGSMAnalyzer_SetPowerVsFreqRBW($GSM,30000); // Sets RBW to 30kHz.





AeroflexGSMAnalyzer_SetPowerVsFreqSpan

Previous Top Next



* * *



AeroFlexGSMAnalyzer_SetPowerVsFreqSpan

Usage:

AeroFlexGSMAnalyzer_SetPowerVsFreqSpan($GSM,$Span);

Description:

This function sets the span for the power vs. frequency measurement.

The minimum possible value is 500kHz and the maximum value is 10.0MHz



Function arguments



Parameter

Variable Type

Description



$GSM

Object

GSM Analysis Object



$Span

Float

The desired span for the Power vs. Frequency Measurement.





Return Values



Parameter

Variable Type

Description



None





Example:





AeroFlexGSMAnalyzer_SetPowerVsFreqSpan($GSM,500000); // Sets span to 500kHz.





AeroflexGSMAnalyzer_SetReferenceLevel

Previous Top Next



* * *



AeroFlexGSMAnalyzer_SetReferenceLevel

Usage:

AeroFlexGSMAnalyzer_SetReferenceLevel($GSM,$ReferenceLevel);

Description:



This command sets the reference level of the digitizer. Note that the attenuator has two modes of control, both an automatic and manual mode. In automatic mode, setting the reference level automatically sets an appropriate value for the attenuator. In manual mode, the user must set both the reference level and the attenuation level.

The reference level is specified in dBm.





Important Note:



Please be aware that when using the attenuator in a manual mode it may be possible to damage the test equipment if the reference level and the attenuator mode are not properly set in the correct order with a high input power applied to the RF digitizer input.





Function arguments



Parameter

Variable Type

Description



$GSM

Object

GSM Analysis Object



$ReferenceLevel

Float

The reference level specified in dBm.





Return Values



Parameter

Variable Type

Description



None





Example:





AeroFlexGSMAnalyzer_SetReferenceLevel($GSM,15); // Sets Reference level to 15dBm.





AeroflexGSMAnalyzer_SetReferenceLevelMode

Previous Top Next



* * *



AeroFlexGSMAnalyzer_SetReferenceLevelMode

Usage:

AeroFlexGSMAnalyzer_SetReferenceLevelMode($GSM,$Mode);

Description:



This command sets the mode of controlling the reference level between manual mode and PCL mode.





Function arguments



Parameter

Variable Type

Description



$GSM

Object

GSM Analysis Object



$Mode

String

The desired mode of reference level operation:

· "MANUAL"

· "PCL"





Return Values



Parameter

Variable Type

Description



None





Example:





AeroFlexGSMAnalyzer_SetReferenceLevelMode($GSM,"MANUAL"); // Sets Reference level mode to manual





AeroflexGSMAnalyzer_SetSignalGeneratorARBFile

Previous Top Next



* * *



AeroFlexGSMAnalyzer_SetSignalGeneratorARBFile

Usage:

AeroflexGSMAnalyzer_SetSignalGeneratorARBFile($GSM,$AIQFilePath);

Description:



This sets the filename and path for the AIQ file to be played back by the signal generator for BER testing.





If the file is not found, or is an invalid format, the function will generate a failing test result.





Function arguments



Parameter

Variable Type

Description



$GSM

Object

GSM Analysis Object



$AIQFilePath

String

The filename and path to the AIQ File





Return Values



Parameter

Variable Type

Description



None





Example:





AeroflexGSMAnalyzer_SetSignalGeneratorARBFile($GSM,"c:\\testfiles\\berfile.aiq");





AeroflexGSMAnalyzer_SetSignalGeneratorFrequency

Previous Top Next



* * *



AeroflexGSMAnalyzer_SetSignalGeneratorFrequency



Usage:

AeroflexGSMAnalyzer_SetSignalGeneratorFrequency($GSM,$Frequency);

Description:





This function sets the signal generator frequency in (hertz).





Function arguments



Parameter

Variable Type

Description



$GSM

Object

GSM Analysis Object



$Frequency

Float

The desired frequency of the signal generator.





Return Values



Parameter

Variable Type

Description



None





Example:

AeroflexGSMAnalyzer_SetSignalGeneratorFrequency($GSM,836600000); // set signal generator to 836.6MHz.





AeroflexGSMAnalyzer_SetSignalGeneratorLevel

Previous Top Next



* * *



AeroflexGSMAnalyzer_SetSignalGeneratorLevel

Usage:

AeroflexGSMAnalyzer_SetSignalGeneratorLevel($GSM,$Level);

Description:



This function sets the signal generator in (dBm).





Notes:

Minimum and maximum is depended on the model.



< 3GHz

> 3GHz



Min

-120.0dBm

3020A: N/A

3020C: N/A

3025: -120.0dBm

43025C: -120.0dBm



Max

3020A: +5.0dBm

3020C: +6.0dBm

3025: +5.0dBm

3025C: +6.0dBm.

3020A: N/A

3020C: N/A

3025: 0dBm

3025C: +1dBm



Default

0.0 dBm





Function arguments



Parameter

Variable Type

Description



$GSM

Object

GSM Analysis Object



$Level

Float

The desired level dBm of the signal generator.





Return Values



Parameter

Variable Type

Description



None





Example:

AeroflexGSMAnalyzer_SetSignalGeneratorLevel($GSM,-15); // set signal generator to-15dBm.





AeroflexGSMAnalyzer_SetTSC

Previous Top Next



* * *



AeroflexGSMAnalyzer_SetTSC



Usage:

AeroflexGSMAnalyzer_SetTSC($GSM,$DUT,$TSC);

Description:

This function sets the training sequence code (TSC) of the specified device under test (DUT). Analysis of GSM and EDGE bursts requires the TSC to be set.

For GSM bursts, the range of values that TSC may be set to is 0 to 7. Access bursts are represented by 8. EDGE bursts allow a range from 0 to 7.

The GSM measurement library currently supports a single DUT. The DUT index is zero-based (i.e. 0 signifies DUT1). If support for multiple DUTs is added in the future, then an index of 1 would apply for DUT2, 2 for DUT3, and so on.





Function arguments



Parameter

Variable Type

Description



$GSM

Object

GSM Analysis Object



$DUT

Integer

The DUT index for configuring the training sequence code (Note: Aeroflex API only supports 0 at the moment)



$Timeslot

Integer

The anticipated time slot for the DUT.





Return Values



Parameter

Variable Type

Description



None





Example:





AeroflexGSMAnalyzer_SetTSC($GSM,0,0); // Sets DUT to 0 and TSC to 0





AeroflexGSMAnalyzer_SetTriggerDelay

Previous Top Next



* * *



AeroFlexGSMAnalyzer_SetTriggerDelay

Usage:

AeroFlexGSMAnalyzer_SetTriggerDelay($GSM,$TriggerDelay);

Description:



Sets the trigger delay in seconds.



Function arguments



Parameter

Variable Type

Description



$GSM

Object

GSM Analysis Object



$TriggerDelay

Float

The trigger delay specified in seconds. Allowable values range from 0 to 10000.





Return Values



Parameter

Variable Type

Description



None





Example:





AeroFlexGSMAnalyzer_SetTriggerDelay($GSM,0.0500); // Sets trigger delay to 50 Milliseconds.





AeroflexGSMAnalyzer_SetTriggerLevel

Previous Top Next



* * *



AeroFlexGSMAnalyzer_SetTriggerLevel

Usage:

AeroFlexGSMAnalyzer_SetTriggerLevel($GSM,$TriggerLevel);

Description:



Sets the burst trigger level threshold specified in dBm.

Important Notes:

Notes: ·

The Burst trigger source corresponds to the 303x Internal trigger source.





·

The measurement starts in synchronization with the rising edge of the signal when it exceeds the trigger threshold level.





·

Burst trigger is not available when the measurement span exceeds two-thirds of the IF bandwidth. The conflict handling mechanism will therefore report appropriately if this situation applies.





Function arguments



Parameter

Variable Type

Description



$GSM

Object

GSM Analysis Object



$TriggerLevel

Float

The trigger level specified in dBm





Return Values



Parameter

Variable Type

Description



None





Example:





AeroFlexGSMAnalyzer_SetTriggerLevel($GSM,10); // Sets trigger level to 10 dBm





AeroflexGSMAnalyzer_SetTriggerPolarity

Previous Top Next



* * *



AeroFlexGSMAnalyzer_SetTriggerPolarity

Usage:

AeroFlexGSMAnalyzer_SetTriggerPolarity($GSM,$TriggerPolarity);

Description:



Sets the trigger polarity to control whether the instrument is triggered on the rising or falling edge of the signal.



Function arguments



Parameter

Variable Type

Description



$GSM

Object

GSM Analysis Object



$TriggerPolarity

String

The desired trigger polarity. Supported values are:

· "POSITIVE"

· "NEGATIVE"





Return Values



Parameter

Variable Type

Description



None





Example:





AeroFlexGSMAnalyzer_SetTriggerPolarity($GSM,"POSITIVE"); // Sets trigger to rising edge triggering.





AeroflexGSMAnalyzer_SetTriggerSource

Previous Top Next



* * *



AeroFlexGSMAnalyzer_SetTriggerSource

Usage:

AeroFlexGSMAnalyzer_SetTriggerSource($GSM,$TriggerSource);

Description:



This function sets the trigger source of the GSM Measurement system.



Function arguments



Parameter

Variable Type

Description



$GSM

Object

GSM Analysis Object



$TriggerSource

String

The desired triggering source of the GSM measurement system. Supported Values are:

· "BURST"

· "IMMEDIATE"

· "EXTERNAL"





Return Values



Parameter

Variable Type

Description



None





Example:





AeroFlexGSMAnalyzer_SetTriggerSource($GSM,"BURST"); // Configures Burst Triggering.





AeroflexGSMAnalyzer_StartMeasurement

Previous Top Next



* * *



AeroFlexGSMAnalyzer_StartMeasurement

Usage:

AeroFlexGSMAnalyzer_StartMeasurement($GSM);

Description:



This functions starts all the current measurement types that have been enabled using the AeroflexGSMAnalyzer_SetEnabledMeasurements command.





If the trigger source is IMMEDIATE, then this starts the measurement immediately.





If the trigger source is EXTERNAL or BURST, then this arms the trigger ready for the measurement to begin.





Function arguments



Parameter

Variable Type

Description



$GSM

Object

GSM Analysis Object





Return Values



Parameter

Variable Type

Description



None





Example:





AeroFlexGSMAnalyzer_StartMeasurement($GSM); // Starts all enabled measurements





AeroflexGSMAnalyzer_UnAssignSignalGeneratorByInstance

Previous Top Next



* * *



AeroflexGSMAnalyzer_UnAssignSignalGeneratorByInstance

Usage:

AeroflexGSMAnalyzer_UnAssignSignalGeneratorByInstance($GSM);

Description:

This function releases any signal generator from the GSM Measurement system that has been previously assigned using the AeroflexGSMAnalyzer_AssignSignalGeneratorByInstance function.

In the event that no signal generator has been assigned to the GSM Measurement system, this function will generate a failing test result.





Function arguments



Parameter

Variable Type

Description



$GSM

Object

GSM Analysis Object





Return Values



Parameter

Variable Type

Description



None





Example:





AeroflexGSMAnalyzer_UnAssignSignalGeneratorByInstance($GSM);





AeroflexGSMAnalyzer_WaitForMeasurementComplete

Previous Top Next



* * *



AeroFlexGSMAnalyzer_WaitForMeasurementComplete

Usage:

AeroFlexGSMAnalyzer_WaitForMeasurementComplete($GSM,$Timeout,$PollFrequency);

Description:



This is a convenience function to simplify scripting which waits for the measurement to be completed by the GSM Analysis system before continuing with the test script.





If the measurement does not complete within the time allotted, the function generates a failing test result.



Function arguments



Parameter

Variable Type

Description



$GSM

Object

GSM Analysis Object



$Timeout

Integer

The timeout value specified in seconds.



$PollFrequency

Integer

The polling interval specified in milliseconds. A more frequent polling places a higher load on the CPU and PXI bus. but will result in a faster acquisition time.





Return Values



Parameter

Variable Type

Description



None





Example:





AeroFlexGSMAnalyzer_WaitForMeasurementComplete($GSM,20,100); // waits a maximum of 20 seconds for the measurement to complete, polls every 100 milliseconds





AeroflexGSMAnalyzer_WaitForTSCDetect

Previous Top Next



* * *



AeroFlexGSMAnalyzer_WaitForTSCDetect

Usage:

$TSCDetected = AeroFlexGSMAnalyzer_WaitForTSCDetect($GSM,$Timeout,$PollFrequency);

Description:



This is a convenience function to simplify scripting which waits for the TSC (Training Sequence Code) to be detected by the GSM Analysis system before continuing with the test script. If the TSC is detected in the sample, a value of TRUE is returned, otherwise false. The $Timeout parameter specifies the maximum amount of time that the function will wait looking for the TSC before returning with a value of false. The $PollFrequency parameter sets the delay time between one poll for the TSC to the next attempt at locating the TSC.





Note: This function returns a value of True as soon as TSC is detected, regardless of the timeout or polling frequency.



Function arguments



Parameter

Variable Type

Description



$GSM

Object

GSM Analysis Object



$Timeout

Integer

The timeout value specified in seconds.



$PollFrequency

Integer

The polling interval specified in milliseconds. A more frequent polling places a higher load on the CPU and PXI bus. but will result in a faster acquisition time.





Return Values



Parameter

Variable Type

Description



$TSCDetected

Boolean

Returns True if the TSC is found in the signal, otherwise returns False if no TSC is detected in the allotted timeout period.





Example:





AeroFlexGSMAnalyzer_WaitForTSCDetect($GSM,20,100); // waits a maximum of 20 seconds to locate TSC, polls every 100 milliseconds





Array1DContains

Previous Top Next



* * *



Array1DContains



Usage:

($found, $index) = Array1DContains($array, $element);





Description:

This function will search the supplied array for the specified element and return whether the element was found and the index of the element, if it was found.





Remarks:

The array can be any type of array usable by Jabil Test.

The array and the element being searched for must be of the same type.

If the element is not found, the index will be -1.

If the element appears in more than one location in the array, only the first (lowest) index will be returned.

Function arguments



Parameter

Variable Type

Description



$array

Array

A 1 dimensional array.



$element

Varies

The element to search for in the array. Must be the same type as the array.





Return parameters



Parameter

Variable Type

Description



$found

Boolean

True if the element was found in the array, False otherwise.



$index

Integer

The first index in the array where the value was found. If the element is not found, this will be -1.





Example(s):

// Create an Integer array and find a value.

$intArr = Array1DCreate("INTEGER", 7);

Array1DSetValue($intArr, 0, 9);

Array1DSetValue($intArr, 1, 7);

Array1DSetValue($intArr, 2, 8);

Array1DSetValue($intArr, 3, 12);

Array1DSetValue($intArr, 4, 5);

Array1DSetValue($intArr, 5, 2);

Array1DSetValue($intArr, 6, 6);





($found, $index) = Array1DContains($intArr, 5);





// This value should be found at Index 4.

$outStr = "Element not found";





if ($found)

{

$outStr = "\nElement found at index:\t " + $index;

}

UpdateStatus($outStr);





Array1DConvert

Previous Top Next



* * *



Array1DConvert



Usage:

$outArray = Array1DConvert($inArray, $convertTo);



Description:

This function will convert the array to the type specified and return it as a new array.



Remarks:

The original array is unchanged.



Converting from a floating point number to an integer will truncate any digits after the decimal point (no rounding).



When converting a number to a Boolean, any positive number = true. 0 and negative numbers = false.



When converting a Boolean to a number, true = 1, false = 0.



When converting a string to a Boolean, "TRUE", "1", "YES", or "ON" = true. Anything else = false.





Note: This function can also be used to copy an array to a new array by converting it to an array of the same type.



Function arguments



Parameter

Variable Type

Description



$inArray

Array

A 1 dimensional array of booleans, floats, integers or strings.



$convertTo

String

The type of variable to convert the array to. Must be one of: BOOLEAN

FLOAT

INTEGER

STRING





Return parameters



Parameter

Variable Type

Description



$outArray

Array

The converted array.





Example:





// Create a Float array to be converted.

$fltArr = Array1DCreate("FLOAT", 7);

Array1DSetValue($fltArr, 0, 9.2);

Array1DSetValue($fltArr, 1, 7.7);

Array1DSetValue($fltArr, 2, 8.1);

Array1DSetValue($fltArr, 3, 12.0);

Array1DSetValue($fltArr, 4, 5.9);

Array1DSetValue($fltArr, 5, 2.6);

Array1DSetValue($fltArr, 6, 6.3);



// Convert to Integer.

$intArr = Array1DConvert($fltArr, "INTEGER");

// The converted array will contain: { 9, 7, 8, 12, 5, 2, 6 }.





Array1DCreate

Previous Top Next



* * *



Array1DCreate



Usage:

$Array = Array1DCreate($ArrayType, $Length);





Description:

Creates a one dimensional array of the Jabil Test supported type and length specified.





Note:

Array indices are zero-based; e.g., a 10 element array contains elements 0-9.

ALL elements of the created array will be set to the default value for that variable type. For example, an array of BOOLEAN has every element set to false. An array of INTEGER has every element set to 0.

Function arguments



Parameter

Variable Type

Description



$ArrayType

String

The type of the array elements. Variable types supported:

· BOOLEAN

· INTEGER

· FLOAT

· STRING

· OBJECT*





* use object array to hold any non-value type or user-defined data.



$Length

Integer

The number of elements in the array.





Return parameters



Parameter

Variable Type

Description



$Array

Object

Reference to the newly created array.





Example:

$new1DArray = Array1DCreate("FLOAT", 10); //create a 10-element array of floats.

// NOTE: every element will contain 0.0 for a value.





Array1DGetColFrom2D

Previous Top Next



* * *



Array1DGetColFrom2D



Usage:

$colArray = Array1DGetColFrom2D($array2D, $columnNum);



Description:

This function returns one column of data from a 2D array.

Function arguments



Parameter

Variable Type

Description



$array2D

Array

A 2 dimensional array.



$columnNum

Integer

The number of the column to return from the 2 dimensional array.





Return parameters



Parameter

Variable Type

Description



$colArray

Array

A 1 dimensional array of the data from the specified column of the 2 dimensional array. The type of the data will match the data type of the 2 dimensional array.





Example(s):

// Get column 2 from a 2 dimensional array.

$colNum = 2;

$colArray = Array1DGetColFrom2D($inputArray, $colNum);





Array1DGetRowFrom2D

Previous Top Next



* * *



Array1DGetRowFrom2D



Usage:

$rowArray = Array1DGetRowFrom2D($array2D, $rowNum);



Description:

This function returns one row of data from a 2D array.

Function arguments



Parameter

Variable Type

Description



$array2D

Array

A 2 dimensional array.



$rowNum

Integer

The number of the row to return from the 2 dimensional array.





Return parameters



Parameter

Variable Type

Description



$rowArray

Array

A 1 dimensional array of the data from the specified row of the 2 dimensional array. The type of the data will match the data type of the 2 dimensional array.





Example(s):

// Get row 1 from a 2 dimensional array.

$rowNum = 1;

$rowArray = Array1DGetRowFrom2D($inputArray, $rowNum);





Array1DGetValue

Previous Top Next



* * *



Array1DGetValue



Usage:

$ReturnValue = Array1DGetValue($Array, $Index);





Description:

Returns the element located at the specified index of the array.





Note:

Array indices are zero-based; e.g., a 10 element array contains elements 0-9.

Function arguments



Parameter

Variable Type

Description



$Array

Object

The reference to the array to get a value from.



$Index

Integer

Zero-based index of the element to return.





Return parameters



Parameter

Variable Type

Description



$ReturnValue

Varies

Value of the element returned. The type of the element will match the type of the input array.

NOTE: If the array is an array of bytes, the returned value will be an INTEGER.





Example:

$Value = Array1DGetValue($Array, 0); //returns the first element of the array





Array1DMaxMin

Previous Top Next



* * *



Array1DMaxMin



Usage:

($arrayMax, $maxIndex, $arrayMin, $minIndex) = Array1DMaxMin($numArray);





Description:

This function will find the maximum and minimum values in the array and return those values along with the indices where they were found.





Remarks:

If the array is an array of integers, the Max and Min returned will be integers.

If the array is an array of floats, the Max and Min returned will be floats.

The indices are always integers.

If the maximum or minimum value appear in more than one location in the array, only the first (lowest) index will be returned.

Function arguments



Parameter

Variable Type

Description



$numArray

Array

A 1 dimensional array of integers or floats.





Return parameters



Parameter

Variable Type

Description



$arrayMax

Integer, Float

The maximum value found within the array.



$maxIndex

Integer

The first index in the array where the maximum value was found.



$arrayMin

Integer, Float

The minimum value found in the array.



$minIndex

Integer

The first index in the array where the minimum value was found.





Example(s):

// Create an Integer array and find the maximum and minimum values.

$intArr = Array1DCreate("INTEGER", 7);

Array1DSetValue($intArr, 0, 9);

Array1DSetValue($intArr, 1, 7);

Array1DSetValue($intArr, 2, 8);

Array1DSetValue($intArr, 3, 12);

Array1DSetValue($intArr, 4, 5);

Array1DSetValue($intArr, 5, 2);

Array1DSetValue($intArr, 6, 6);





($intMax, $MaxIndex, $intMin, $MinIndex) = Array1DMaxMin($intArr);





// Max is 12 in index 3. Min is 2 in index 5.

$outStr = "\nInteger Max = " + $intMax + "\t Index = " + $MaxIndex + "\nIntegerMin = " + $intMin + "\t Index = " + $MinIndex;

UpdateStatus($outStr);





Array1DSetValue

Previous Top Next



* * *



Array1DSetValue



Usage:

Array1DSetValue($Array, $Index, $InputValue);





Description:

Sets the specified element in the given array to the supplied value. If the array does not support the given input value type, an error will be generated.





Note:

Array indices are zero-based; e.g., a 10 element array contains elements 0-9.

Function arguments



Parameter

Variable Type

Description



$Array

Object

The reference to the array to set the value in.



$Index

Integer

Zero-based index of the element to set.



$InputValue

Varies

The value to enter into the array. The type of the element must match the type of the array.





Return parameters



Parameter

Variable Type

Description



None





Example:

Array1DSetValue($Array, 0, 1.5); //sets the first element of the array to the value 1.5





Array1DSort

Previous Top Next



* * *



Array1DSort



Usage:

Array1DSort($array, $reverse);





Description:

This function will sort the one dimensional array.





Remarks:

The array can be numeric or string.

The array is sorted in-place. The original array is modified.

Function arguments



Parameter

Variable Type

Description



$array

Array

A 1 dimensional array of strings, integers or floats.



$reverse

Boolean

If FALSE, the array will be sorted into ascending order.

If TRUE, the array will be sorted into descending order.





Return parameters



Parameter

Variable Type

Description



None





Example(s):

// Create an Integer array to be sorted.

$intArr = Array1DCreate("INTEGER", 7);

Array1DSetValue($intArr, 0, 9);

Array1DSetValue($intArr, 1, 7);

Array1DSetValue($intArr, 2, 8);

Array1DSetValue($intArr, 3, 12);

Array1DSetValue($intArr, 4, 5);

Array1DSetValue($intArr, 5, 2);

Array1DSetValue($intArr, 6, 6);





// Sort ascending.

Array1DSort($intArr, false);





Array1DSubArray

Previous Top Next



* * *



Array1DSubArray



Usage:

$subArray = Array1DSubArray($inArray, $start, $length);





Description:

This function will return a sub-array of the same type as the input array, with the elements from $start and going for $length elements.





Remarks:

The array can be numeric or string.

The original array is unchanged.

The sub-array will be of the same type as the original array.

The $start + $length must not go beyond the last element of the original array.

Row and column numbers are 0 based (ie. the first row or column is number 0).

Function arguments



Parameter

Variable Type

Description



$inArray

Array

A 1 dimensional array of strings, integers or floats.



$start

Integer

The first element of the original array to include in the sub-array.



$length

Integer

The number of elements from the original array to include in the sub-array.





Return parameters



Parameter

Variable Type

Description



$subArray

Array

The sub-Array of the original array.





Example(s):

// Create a Float array to start with..

$fltArr = Array1DCreate("FLOAT", 7);

Array1DSetValue($fltArr, 0, 9.2);

Array1DSetValue($fltArr, 1, 7.7);

Array1DSetValue($fltArr, 2, 8.1);

Array1DSetValue($fltArr, 3, 12.0);

Array1DSetValue($fltArr, 4, 5.9);

Array1DSetValue($fltArr, 5, 2.6);

Array1DSetValue($fltArr, 6, 6.3);





// Get the elements from element 2 for 4 elements.

$subArr = Array1DSubArray($fltArr, 2, 4);

// The returned array will contain: { 8.1, 12, 5.9, 2.6 }.





Array2DColumnContains

Previous Top Next



* * *



Array2DColumnContains



Usage:

($found, $index) = Array2DColumnContains($array, $column, $element);





Description:

This function will search the supplied array in the specified column for the element and return whether the element was found and the row index of the element, if it was found.





Remarks:

The array can be any type of array usable by Jabil Test.

The array and the element being searched for must be of the same type.

If the element is not found, the index will be -1.

If the element appears in more than one location in the array, only the first (lowest) index will be returned.

Function arguments



Parameter

Variable Type

Description



$array

Array

A 2 dimensional array.



$column

Integer

The column to search for the element.



$element

Varies

The element to search for in the column. Must be the same type as the array.





Return parameters



Parameter

Variable Type

Description



$found

Boolean

True if the element was found in the column, False otherwise.



$index

Integer

The first index in the column where the value was found. If the element is not found, this will be -1.





Example(s):

// Create an Integer array and fill with random values.

$numRows = 7;

$numCols = 8;

$intArr = Array2DCreate("INTEGER", $numRows, $numCols);





$lc = 0;

while ($lc < $numCols)

{

$lr = 0;

while ($lr < $numRows)

{

SleepMilliseconds(15); // Required wait between random number picks.

$newNum = GetRandomInteger(1, 1000);

Array2DSetValue($intArr, $lr, $lc, $newNum);

$lr = $lr + 1;

}

$lc = $lc + 1;

}





// Check to see if column 5 contains the number 500.

($found, $index) = Array2DColumnContains($intArr, 5, 500);





// Print out where the element was found (or not).

$outStr = "Element not found";





if ($found)

{

$outStr = "\nElement found at index:\t " + $index;

}

UpdateStatus($outStr);





Array2DCreate

Previous Top Next



* * *



Array2DCreate



Usage:

$Array = Array2DCreate($ArrayType, $Rows, $Columns);





Description:

Creates a two dimensional array of the Jabil Test supported type and dimensions specified. Array indexes are zero-based; e.g., a 10x10 array contains elements 0-9x0-9.





Note:

Array indices are zero-based; e.g., a 10 element array contains elements 0-9.





Elements are laid out in the array object in row-major order, per the CLI spec (section 8.9.1). E.g., a 3x4 array would be laid out like so in memory:





[A11 A12 A13 A14]

[A21 A22 A23 A24] = [A11 A12 A13 A14 A21 A22 A23 A24 A31 A32 A33 A34]

[A31 A32 A33 A34]





ALL elements of the created array will be set to the default value for that variable type. For example, an array of BOOLEAN has every element set to false. An array of INTEGER has every element set to 0.

Function arguments



Parameter

Variable Type

Description



$ArrayType

String

The type of the array elements. Variable types supported:

· BOOLEAN

· INTEGER

· FLOAT

· STRING

· OBJECT*





* use object array to hold any non-value type or user-defined data.



$Rows

Integer

The number of rows in the new array.



$Columns

Integer

The number of columns in the new array.





Return parameters



Parameter

Variable Type

Description



$Array

Object

Reference to the newly created array.





Example:

$new2DArray = Array2DCreate("FLOAT", 10, 10); //create a 10x10 matrix of floats.

// NOTE: every element will contain 0.0 for a value.





Array2DGetValue

Previous Top Next



* * *



Array2DGetValue



Usage:

$ReturnValue = Array2DGetValue($Array, $Row, $Column);





Description:

Returns the element located at the specified location of the array.





Note:

Array indices are zero-based; e.g., a 10 element array contains elements 0-9.

Function arguments



Parameter

Variable Type

Description



$Array

Object

Reference to the array to get a value from.



$Row

Integer

Zero-based row index of the element to return.



$Columns

Integer

Zero-based column index of the element to return.





Return parameters



Parameter

Variable Type

Description



$ReturnValue

Object

Value of the element returned. The type of the element will match the type of the input array.

NOTE: If the array is an array of bytes, the returned value will be an INTEGER.





Example:

$Value = Array2DGetValue($Array, 0, 0); //returns the top-left element of the array





Array2DMaxMinColumn

Previous Top Next



* * *



Array2DMaxMinColumn



Usage:

($maxValue, $maxPosition, $minValue, $minPosition) = Array2DMaxMinColumn($inArray, $rcolumnNum);





Description:

This function will return the maximum and minimum values (and their row numbers) from the specified column of the input array.





Remarks:

The array must be numeric.

The maximum and minimum values returned will be the same numeric type as the array.

Row and column numbers are 0 based (ie. the first row or column is number 0).

Function arguments



Parameter

Variable Type

Description



$inArray

Array

A 2 dimensional array of integers or floats.



$columnNum

Integer

The column number to get the maximum and minimum values from.





Return parameters



Parameter

Variable Type

Description



$maxValue

Varies

The maximum value found in the specified column.



$maxPosition

Integer

The row number that the maximum value was found in.



$minValue

Varies

The minimum value found in the specified column.



$minPosition

Integer

The row number that the minimum value was found in.





Example(s):

// Check column 3 for the max and min values.

($maxValue, $maxPosiiton, $minValue, $minPosition) = Array2DMaxMinColumn($fltArr, 3);





Array2DMaxMinRow

Previous Top Next



* * *



Array2DMaxMinRow



Usage:

($maxValue, $maxPosition, $minValue, $minPosition) = Array2DMaxMinRow($inArray, $rowNum);





Description:

This function will return the maximum and minimum values (and their column numbers) from the specified row of the input array.





Remarks:

The array must be numeric.

The maximum and minimum values returned will be the same numeric type as the array.

Row and column numbers are 0 based (ie. the first row or column is number 0).

Function arguments



Parameter

Variable Type

Description



$inArray

Array

A 2 dimensional array of integers or floats.



$rowNum

Integer

The row number to get the maximum and minimum values from.





Return parameters



Parameter

Variable Type

Description



$maxValue

Varies

The maximum value found on the specified row.



$maxPosition

Integer

The column number that the maximum value was found in.



$minValue

Varies

The minimum value found on the specified row.



$minPosition

Integer

The column number that the minimum value was found in.





Example(s):

// Check row 3 for the max and min values.

($maxValue, $maxPosiiton, $minValue, $minPosition) = Array2DMaxMinRow($fltArr, 3);





Array2DReplaceColumn

Previous Top Next



* * *



Array2DReplaceColumn



Usage:

Array2DReplaceColumn($dataArray, $column, $newColumn);





Description:

This function will replace the contents of one column in a 2D array with the contents of a 1D array.





Remarks:

The arrays can be of any type, but the type of the 2D array and the 1D array must be the same (ie. both INTEGER or both STRING).

The replacement data for the column must be the same size as the column.

Array indices are zero-based; e.g., a 10 element array contains elements 0-9.

Array changes are made in-place. Ie. the original $dataArray is modified.

Function arguments



Parameter

Variable Type

Description



$dataArray

Array

A 2 dimensional array of any data type.



$column

Integer

The number of the column to replace (the first column is number 0).



$newColumn

Array

A 1 dimensional array of the same data type as the $dataArray and having as many elements as $dataArray has rows.





Return parameters



Parameter

Variable Type

Description



None





Example(s):

// Replace column 7 of an array.

Array2DReplaceColumn($dataArray, 7, $newColumn);





Array2DReplaceRow

Previous Top Next



* * *



Array2DReplaceRow



Usage:

Array2DReplaceRow($dataArray, $row, $newRow);





Description:

This function will replace the contents of one row in a 2D array with the contents of a 1D array.





Remarks:

The arrays can be of any type, but the type of the 2D array and the 1D array must be the same (ie. both INTEGER or both STRING).

The replacement data for the row must be the same size as the row.

Array indices are zero-based; e.g., a 10 element array contains elements 0-9.

Array changes are made in-place. Ie. the original $dataArray is modified.

Function arguments



Parameter

Variable Type

Description



$dataArray

Array

A 2 dimensional array of any data type.



$row

Integer

The number of the row to replace (the first row is number 0).



$newRow

Array

A 1 dimensional array of the same data type as the $dataArray and having as many elements as $dataArray has columns.





Return parameters



Parameter

Variable Type

Description



None





Example(s):

// Replace row 7 of an array.

Array2DReplaceRow($dataArray, 7, $newRow);





Array2DRowContains

Previous Top Next



* * *



Array2DRowContains



Usage:

($found, $index) = Array2DRowContains($array, $row, $element);





Description:

This function will search the supplied array in the specified row for the element and return whether the element was found and the column index of the element, if it was found.





Remarks:

The array can be any type of array usable by Jabil Test.

The array and the element being searched for must be of the same type.

If the element is not found, the index will be -1.

If the element appears in more than one location in the array, only the first (lowest) index will be returned.

Function arguments



Parameter

Variable Type

Description



$array

Array

A 2 dimensional array.



$row

Integer

The row to search for the element.



$element

Varies

The element to search for in the row. Must be the same type as the array.





Return parameters



Parameter

Variable Type

Description



$found

Boolean

True if the element was found in the row, False otherwise.



$index

Integer

The first index in the row where the value was found. If the element is not found, this will be -1.





Example(s):

// Create an Integer array and fill with random values.

$numRows = 7;

$numCols = 8;

$intArr = Array2DCreate("INTEGER", $numRows, $numCols);





$lc = 0;

while ($lc < $numCols)

{

$lr = 0;

while ($lr < $numRows)

{

SleepMilliseconds(15); // Required wait between random number picks.

$newNum = GetRandomInteger(1, 1000);

Array2DSetValue($intArr, $lr, $lc, $newNum);

$lr = $lr + 1;

}

$lc = $lc + 1;

}





// Check to see if row 5 contains the number 500.

($found, $index) = Array2DRowContains($intArr, 5, 500);





// Print out where the element was found (or not).

$outStr = "Element not found";





if ($found)

{

$outStr = "\nElement found at index:\t " + $index;

}

UpdateStatus($outStr);





Array2DSetValue

Previous Top Next



* * *



Array2DSetValue



Usage:

Array2DSetValue($Array, $Row, $Column, $InputValue);





Description:

Sets the specified element in the given array to the supplied value. If the array does not support the given input value type, an error will be generated.





Note:

Array indices are zero-based; e.g., a 10 element array contains elements 0-9.

Function arguments



Parameter

Variable Type

Description



$Array

Object

The reference to the array to set the value in.



$Row

Integer

Zero-based row index of the element to set.



$Column

Integer

Zero-based column index of the element to set.



$InputValue

Varies

The value to enter into the array. The type of the element must match the type of the array.





Return parameters



Parameter

Variable Type

Description



None





Example:

Array2DSetValue($Array, 0, 0, 1.5); //sets the top-left element of the array to the value 1.5





Array2DSortColumn

Previous Top Next



* * *



Array2DSortColumn



Usage:

Array2DSortColumn($array, $columnNumber, $reverse);



Description:

This function will sort the two dimensional array using the specified column number as the key for sorting.



Remarks:

The array can be numeric or string.

The array is sorted in-place. The original array is modified.

All data in a row is kept together. For example, if sorting on column 2: and column 2, row 3 is to move to row 1 - ALL of row 3 will move to row 1 (every column changes the same).



Function arguments



Parameter

Variable Type

Description



$array

Array

A 2 dimensional array of strings, integers or floats.



$columnNumber

Integer

The column to use as a key for sorting the entire array.



$reverse

Boolean

If FALSE, the array will be sorted into ascending order.

If TRUE, the array will be sorted into descending order.





Return parameters



Parameter

Variable Type

Description



None





Example:





// Create an Integer array to be sorted.

$intArr = Array2DCreate("INTEGER", 7, 5);



// Fill the array with random integers.

$rCount = 0;

while ($rCount < 7)

{

$cCount = 0;

while ($cCount < 5)

{



$tempNum = GetRandomInteger(0, 50);

Array2DSetValue($intArr, $rCount, $cCount, $tempNum);

$cCount = $cCount + 1;



}

$rCount = $rCount + 1;



}



// Sort ascending on column 2.

Array2DSortColumn($intArr, 2, false);





Array2DSortRow

Previous Top Next



* * *



Array2DSortRow



Usage:

Array2DSortRow($array, $rowNumber, $reverse);





Description:

This function will sort the two dimensional array using the specified row number as the key for sorting.





Remarks:

The array can be numeric or string.

The array is sorted in-place. The original array is modified.

All data in a column is kept together. For example, if sorting on row 2: and row 2, column 3 is to move to column 1 - ALL of column 3 will move to column 1 (every row changes the same).

Function arguments



Parameter

Variable Type

Description



$array

Array

A 2 dimensional array of strings, integers or floats.



$rowNumber

Integer

The row to use as a key for sorting the entire array.



$reverse

Boolean

If FALSE, the array will be sorted into ascending order.

If TRUE, the array will be sorted into descending order.





Return parameters



Parameter

Variable Type

Description



None





Example(s):

// Create an Integer array to be sorted.

$intArr = Array2DCreate("INTEGER", 7, 5);





// Fill the array with random integers.

$rCount = 0;

while ($rCount < 7)

{

$cCount = 0;

while ($cCount < 5)

{

$tempNum = GetRandomInteger(0, 50);

Array2DSetValue($intArr, $rCount, $cCount, $tempNum);

$cCount = $cCount + 1;

}

$rCount = $rCount + 1;

}





// Sort ascending on row 2.

Array2DSortRow($intArr, 2, false);





Array2DSubColumn

Previous Top Next



* * *



Array2DSubColumn



Usage:

$subArray = Array2DSubColumn($inArray, $columnNum, $start, $length);





Description:

This function will return a 1D sub-array of the same type as the input array, with the elements from $start and going for $length elements from the specified column.





Remarks:

The array can be numeric or string.

The original array is unchanged.

The sub-array will be of the same type as the original array.

The $start + $length must not go beyond the last element of the original array.

Row and column numbers are 0 based (ie. the first row or column is number 0).

Function arguments



Parameter

Variable Type

Description



$inArray

Array

A 2 dimensional array of strings, integers or floats.



$columnNum

Integer

The column number to get the sub-array from.



$start

Integer

The first row of the original array to include in the sub-array.



$length

Integer

The number of elements from the original array to include in the sub-array.





Return parameters



Parameter

Variable Type

Description



$subArray

Array

The sub-Array of the original array.





Example(s):

// Get the elements from column 3, row 2 for 4 elements.

$subArr = Array2DSubColumn($fltArr, 3, 2, 4);





Array2DSubRow

Previous Top Next



* * *



Array2DSubRow



Usage:

$subArray = Array2DSubRow($inArray, $rowNum, $start, $length);





Description:

This function will return a 1D sub-array of the same type as the input array, with the elements from $start and going for $length elements from the specified row.





Remarks:

The array can be numeric or string.

The original array is unchanged.

The sub-array will be of the same type as the original array.

The $start + $length must not go beyond the last element of the original array.

Row and column numbers are 0 based (ie. the first row or column is number 0).

Function arguments



Parameter

Variable Type

Description



$inArray

Array

A 2 dimensional array of strings, integers or floats.



$rowNum

Integer

The row number to get the sub-array from.



$start

Integer

The first column of the original array to include in the sub-array.



$length

Integer

The number of elements from the original array to include in the sub-array.





Return parameters



Parameter

Variable Type

Description



$subArray

Array

The sub-Array of the original array.





Example(s):

// Get the elements from row 3, column 2 for 4 elements.

$subArr = Array2DSubRow($fltArr, 3, 2, 4);





Array2DToPlot2DTrace

Previous Top Next



* * *



Array2DToPlot2DTrace



Usage:

$Trace = Array2DToPlot2DTrace($Array);





Description:

Converts the 2D input array to a JabilTestCoreLibs.PlotWindow.PlotTrace2D type used by the charting functions.





The input array must have two rows of numeric data (valid numeric strings or numeric data types). The first row will be the x-values of the PlotTrace2D object, the second row will be the corresponding y-values. Invalid array sizes or types will generate an error.

Function arguments



Parameter

Variable Type

Description



$Array

Object

The reference to the array to the array to convert.





Return parameters



Parameter

Variable Type

Description



$Trace

Object

PlotTrace2D object containing the data from the input array.





Example:

$array2D = Array2DCreate("FLOAT", 2, 3);

Array2DSetValue($array2D, 0, 0, 100);

Array2DSetValue($array2D, 0, 1, 200);

Array2DSetValue($array2D, 0, 2, 300);

Array2DSetValue($array2D, 1, 0, -2.5);

Array2DSetValue($array2D, 1, 1, 3.2);

Array2DSetValue($array2D, 1, 2, 8.8);





$Trace1 = Array2DToPlot2DTrace($array2D);





SetExtendedPanelMode("CHARTING");

ChartPanel_Plot2DTrace(0, "TEST PLOT 1", $Trace1, 0, 0, 255);





ArrayCreate

Previous Top Next



* * *



ArrayCreate

Usage:

$Array = ArrayCreate($ArrayType, $ArrayDimension1, $ArrayDimension2);

Description:

This function creates a new variable containing an array created according to the parameters supplied to the function. If $ArrayDimension1 is defined as 1 and $ArrayDimension2 is defined as 10, then for the other operating Array functions Dimension1 will be 0 and Dimension2 will be 0-9.

Function Arguments



Parameter

Variable Type

Description



$ArrayType

String

The type of array to create. Valid types are:

· "STRING"

· "FLOAT"

· "INTEGER"

· "BOOLEAN"



$ArrayDimension1

Integer

The first dimension of the array.



$ArrayDimension2

Integer

The second dimension of the array.





Return parameters



Parameter

Variable Type

Description



$Array

Array

The newly created array of the specified type and dimensions.





Example:

$Array = ArrayCreate("INTEGER", 1, 100); // Create an array with 1 row and 100 columns.

// NOTE: every element will contain 0 for a value.





ArrayGetDimensionSize

Previous Top Next



* * *



ArrayGetDimensionSize



Usage:

$Length = ArrayGetDimensionSize($Array, $Dimension);





Description:

Returns the size of the specified dimension of the input array. Dimension indexes are zero-based; e.g., for 2D arrays dimension 0 is the number of rows, and dimension 1 is the number of columns.





Specifying an invalid dimension size will generate an error.

Function Arguments



Parameter

Variable Type

Description



$Array

Object

Variable containing reference to the input array.



$Dimension

Integer

Dimension to get the length of.





Return parameters



Parameter

Variable Type

Description



$Length

Integer

Number of elements in the specified dimension.





Example:

$Length = ArrayGetDimensionSize($Array, 0); //# of elements in the 1st dimension of the array





ArrayGetLength

Previous Top Next



* * *



ArrayGetLength

Usage:

$Length = ArrayGetLength($Array);

Description:

This function returns the total number of elements in an array for all dimensions.

Function Arguments



Parameter

Variable Type

Description



$Array

Object

The input array.





Return parameters



Parameter

Variable Type

Description



$Length

Integer

The total number of elements in the array.





Example:





$Length = ArrayGetLength($Array);





ArrayGetP2P

Previous Top Next



* * *



ArrayGetP2P

Usage:

$Value = ArrayGetP2P($Array, $Start, $Length);

Description:

This function returns the peak to peak value of the waveform stored in the specified portion of the array. This function requires the "ArrayCreate" function to define the Array type as "Integer" or "Float".

Function Arguments



Parameter

Variable Type

Description



$Array

Object

The input array.



$Start

Integer

The starting element of the array to analyze.



$Length

Integer

The number of array elements to analyze.





Return parameters



Parameter

Variable Type

Description



$Value

Float

The peak to peak value of the analyzed elements.





Example:





// Process the entire array to find the peak to peak value.

$length = ArrayGetLength($array);

$p2pValue = ArrayGetP2P($array, 0, $length);





ArrayGetRank

Previous Top Next



* * *



ArrayGetRank



Usage:

$Rank = ArrayGetRank($Array);





Description:

Returns the rank (number of dimensions) of the input array.

Function Arguments



Parameter

Variable Type

Description



$Array

Object

Variable containing reference to the input array.





Return parameters



Parameter

Variable Type

Description



$Rank

Integer

The rank of the input array (number of dimensions).





Example:

$Rank = ArrayGetRank($Array); //returns the # of dimensions of the array.





ArrayGetValue

Previous Top Next



* * *



ArrayGetValue

Usage:

$Value = ArrayGetValue($Array, $Dimension1, $Dimension2);

Description:

This function returns the value from the specified location in the array. If the requested value is beyond the range of the array, a failure is returned by the function.

Function Arguments



Parameter

Variable Type

Description



$Array

Object

The input array.



$Dimension1

Integer

The first dimension of the array.



$Dimension2

Integer

The second dimension of the array.





Return parameters



Parameter

Variable Type

Description



$Value

Various

The returned value. This can be string, integer, float or boolean depending on the type of the array.

NOTE: If the array is an array of bytes, the returned value will be an Integer.





Example:

// Get the value from location (0,4).

$Value = ArrayGetValue($array, 0, 4);





ArraySetValue

Previous Top Next



* * *



ArraySetValue

Usage:

ArraySetValue($Array, $Dimension1, $Dimension2, $Value);

Description:

This function sets the specified element of the array to the supplied value. If an invalid value type is passed to an array of a differing type, an error will be returned.

Function Arguments



Parameter

Variable Type

Description



$Array

Object

The input array.



$Dimension1

Integer

The first dimension of the array.



$Dimension2

Integer

The second dimension of the array.



$Value

Various

The value to set the specified element to.

NOTE: The type of this element must match the type of the array.





Return parameters



Parameter

Variable Type

Description



None.





Example:

// Create an array of string that is 3 x 12.

$array = ArrayCreate("STRING", 3, 12);

// Put the word "Dog" in location (2, 6).

ArraySetValue($array, 2, 6, "Dog");





ArrayAnalyzeAmplitudeAtFrequency

Previous Top Next



* * *



ArrayAnalyzeAmplitudeAtFrequency

Usage:

$amplitude = ArrayAnalyzeAmplitudeAtFrequency($array, $samplesPerSecond, $desiredFrequency);

Description:

This function takes the values in an array, and performs an fast-fourier transform on the array to obtain the frequency domain. The $desiredFrequency is then read and the amplitude returned.

Remarks:

The $SamplesPerSecond parameter must contain the rate at which the data was sampled in order to return an accurate measurement of the frequency.

The sample rate should be at least 3 times the frequency rate for an accurate result from this function.

A minimum array length of 512 elements is required for the function.

If the requested frequency is outside of the waveform's frequency spectrum, the function will fail the test.

Function Arguments



Parameter

Variable Type

Description



$array

Array

The input array.



$samplesPerSecond

Integer

The number of samples per second.



$desiredFrequency

Float

The frequency to return the amplitude of.





Return parameters



Parameter

Variable Type

Description



$amplitude

Float

The calculated amplitude at the requested frequency.





Example:





$samplesPerSecond = 1000;

$frequency = 5000.0;

$amplitude = ArrayAnalyzeAmplitudeAtFrequency($array, $samplesPerSecond, $frequency);





ArrayAnalyzeFrequency

Previous Top Next



* * *



ArrayAnalyzeFrequency

Usage:

$Frequency = ArrayAnalyzeFrequency($Array, $SamplesPerSecond);

Description:

This function takes the values in an array, and performs an fast-fourier transform on the array to obtain the principle harmonic of the input frequency. The $SamplesPerSecond parameter must contain the rate at which the data was sampled in order to return an accurate measurement of the frequency. The sample rate should be at least 3 times the frequency rate for an accurate result from this function. A minimum array length of 512 elements is required for the function.

Example Application:

As an example application let's assume that a number of samples were taken using the multi-sample function while measuring a voltage on a DAQ card. The resulting array that was returned from the function could be passed into this function along with the sampling rate at which the data was captured to compute the signal frequency of the captured data.

Function Arguments



Parameter

Variable Type

Description



$Array

Array

The input array



$SamplesPerSecond

Integer

The number of samples per second.





Return parameters



Parameter

Variable Type

Description



$Frequency

Float

The calculated frequency in Hertz.





Example:





$samplesPerSecond = 1000;

$frequency = ArrayAnalyzeFrequency($array, $samplesPerSecond);





ArrayAnalyzeFrequencyRange

Previous Top Next



* * *



ArrayAnalyzeFrequencyRange

Usage:

$Frequency = ArrayAnalyzeFrequencyRange($Array, $SamplesPerSecond, $minFrequency, $maxFrequency);

Description:

This function takes the values in an array, and performs an fast-fourier transform on the array to obtain the highest amplitude frequency within the specified range. The $SamplesPerSecond parameter must contain the rate at which the data was sampled in order to return an accurate measurement of the frequency. The sample rate should be at least 3 times the frequency rate for an accurate result from this function. A minimum array length of 512 elements is required for the function.

Example Application:

Play an audio tone through a sound system and analyze a recording of the sound produced to ensure the tone was reproduced at the correct frequency while ignoring harmonics.

Function Arguments



Parameter

Variable Type

Description



$Array

Array

The input array



$SamplesPerSecond

Integer

The number of samples per second.



$minFrequency

Float

The lowest frequency to check to see if it is the highest amplitude.



$maxFrequency

Float

The highest frequency to check to see if it is the highest amplitude.





Return parameters



Parameter

Variable Type

Description



$Frequency

Float

The calculated frequency in Hertz.





Example:





// The wave file to load and analyze.

$fName = "C:\\SoundTest\\RecordedSound.wav";





// Set up the frequencies to check.

$minF = 100;

$maxF = 2750;





// Read the wave file and get the left channel (in row 0).

($sampRate, $dArray, $len, $numC) = Audio_ReadWaveFile($fName);

$oneChan = Array1DGetRowFrom2D($dArray, 0);





// Let's find the frequency.

$freq = ArrayAnalyzeFrequencyRange($oneChan, $sampRate, $minF, $maxF);





$outStr = "Frequency:\t" + $freq;

UpdateStatus($outStr);





ArrayComputeTHD

Previous Top Next



* * *



ArrayComputeTHD

Usage:

($THD, $FundamentalFrequency) = ArrayComputeTHD($Array, $SampleRate, $NumberofHarmonics);

Description:

This function computes the THD for an array of measurements that were captured in the time domain.

Remarks:

The calculations will attempt to find all of the harmonics even if they are beyond the frequency spectrum of the waveform. All harmonics that are beyond the frequency spectrum will be calculated as having a 0 amplitude.

Total harmonic distortion is calculated as:

SQRT(sum of squares of harmonic amplitudes) / amplitude of fundamental * 100%

Function Arguments



Parameter

Variable Type

Description



$Array

Array

The input array.



$SampleRate

Float

The sample rate (in Hertz) at which the time-domain array data was acquired.



$NumberOfHarmonics

Integer

The number of harmonics to include in the THD calculation.





Return parameters



Parameter

Variable Type

Description



$THD

Float

The THD measurement returned as a percentage of the overall power.



$FundamentalFrequency

Float

The Fundamental Frequency found by the FFT operation.





Example:





$sampleRate = 10000;

$numberofHarmonics = 5;

($THD, $fundFreq) = ArrayComputeTHD($array, $sampleRate, $numberOfHarmonics);





ArraySimulateWaveFormData

Previous Top Next



* * *



ArraySimulateWaveFormData

Usage:

$Array = ArraySimulateWaveFormData($Frequency, $OffSetValue, $Amplitude, $NumberOfSamples, $SampleRate, $PercentNoise);

Description:

This function generates a simulation of sample data acquired from sampling a sine wave with the supplied parameters.

Function Arguments



Parameter

Variable Type

Description



$Frequency

Float

The desired since wave frequency in Hertz.



$OffsetValue

Float

The DC Offset fo the simulated since wave data.



$Amplitude

Float

The Peak-to-Peak value of the simulated sine wave data.



$NumberOfSamples

Integer

The total number of simulated samples to take from the sinewave data.



$SampleRate

Integer

The simulated sample rate.



$PercentNoise

Float

The percent noise (as compared to the total amplitude) to insert into the sine wave data. The generated noise is based on a random number generator.





Return parameters



Parameter

Variable Type

Description



$Array

Array

The newly created array containing the simulated, sampled waveform data.





Example:



$Array = ArraySimulateWaveFormData(11000, 0, 10, 50000, 25000, 0);





ArrayWindowAnalyzeFrequency

Previous Top Next



* * *



ArrayWindowAnalyzeFrequency

Usage:

$Value = ArrayWindowAnalyzeFrequency($Array, $Start, $Length, $SampleRate);

Description:

This function returns the frequency of the waveform stored in the specified portion of the array.

Function Arguments



Parameter

Variable Type

Description



$Array

Object

The input array.



$Start

Integer

The starting element of the array to analyze.



$Length

Integer

The number of array elements to analyze.



$SampleRate

Integer

Sample rate of the waveform stored in the array.





Return parameters



Parameter

Variable Type

Description



$Value

Float

The frequency.





Example:

// Find the frequency in an array.

$start = 0;

$length = ArrayGetLength($array);

$value = ArrayWindowAnalyzeFrequency($array, $start, $length, $sampleRate);





GetTestCellCount

Previous Top Next



* * *



GetTestCellCount



Usage:

$TotalCells = GetTestCellCount();



Description:

This function returns the number of Jabil Test cells which are currently configured in the Global Options dialog.

Function Arguments



Parameter

Variable Type

Description



None





Return parameters



Parameter

Variable Type

Description



$TotalCells

Integer

The number of test cells currently configured.





GetTestCellStatus

Previous Top Next



* * *



GetTestCellStatus



Usage:

$Status = GetTestCellStatus($CellNumber);



Description:

This function returns a text string with the current status of the test cell.

Function Arguments



Parameter

Variable Type

Description



$CellNumber

Integer

The test cell number to poll for status





Return parameters



Parameter

Variable Type

Description



$Status

String

A text string indicating the present status of the test cell. Possible values are:

· "READY"

· "RUNNING"

· "PASS"

· "FAIL"

· "ABORT"

· "WAITING"





SetAutomationCell

Previous Top Next



* * *



SetAutomationCell



Usage:

$success = SetAutomationCell($cellNumber, $cellStatus);



Description:

This function sets or ends automation mode for the specified cell. When a cell is in Automation Mode, the Serial Number text box and Start buttons are disabled. Setting the serial number and starting the cell is controlled from another cell using StartTestCell, SetTestCellDefaultStartupScript and StartTestCellWithSerialNumber.





Remarks:

The test cell can only be placed into or taken out of Automation Mode if there is no script running in that cell.





Function arguments



Parameter

Variable Type

Description



$cellNumber

Integer

The cell number to set the Automation Mode status of.



$cellStatus

Boolen

true = turn on Automation Mode

false = turn off Automation Mode.





Return parameters



Parameter

Variable Type

Description



$success

Boolean

Returns true or false depending on whether the test cell Automation Mode was updated successfully.





Example:





// Turn on Automation Mode in cell 2.

$cellNumber = 2;

$automMode = true;

$success = SetAutomationCell($cellNumber, $automMode);





SetTestCellDefaultStartupScript

Previous Top Next



* * *



SetTestCellDefaultStartupScript



Usage:

$Success = SetTestCellDefaultStartupScript($CellNumber,$TestScript,$ValidateFileExists);



Description:

This function sets the default test script for a test cell that will load automatically when Jabil Test is started. This function is different from 'SetTestCellTestScript' since this function actually modifies the Jabil Test configuration database and stores the script as the configured default test script for the test cell. If the test script is already configured for the test cell, it will simply be set as the default script. If the test cell previously wasn't configured to run the script, the new script will be added and set as default.





Note: The test cell number does not need to be currently configured as a running cell for this function to work properly. (In other words, if Jabil Test is currently configured to run 3 cells, and you set the default test script for the 4th cell, it will work normally, and the default test script for cell 4 will be set properly).





Function Arguments



Parameter

Variable Type

Description



$CellNumber

Integer

The test cell number to poll for status



$TestScript

String

The file path and name of the desired test script



$ValidateFileExists

Boolean

If this variable is set to 'True', then the function will validate that the requested script currently exists on the file system. If the file can not be found, the function returns a failing test result. If this parameter is set to false, than the database will be updated with the new script, even if it can't be found on the file system.





Return parameters



Parameter

Variable Type

Description



$Success

Boolean

Returns a value of true if the test script was configured successfully, otherwise returns false.





SetTestCellTestScript

Previous Top Next



* * *



SetTestCellTestScript



Usage:

$Successful = SetTestCellTestScript($CellNumber,$CellScript);



Description:

This function sets the current test script of a test cell to the supplied value. If the test cell is currently running, or if the test script doesn't exist, the function will return a false result, otherwise true is returned if the test script could be set successfully.



Note: The test script can only be set to a specific test script that has already been configured for the test cell.

Function Arguments



Parameter

Variable Type

Description



$CellNumber

Integer

The cell number to set the test script.



$CellScript

String

A text string indicating the test script to set.





Return parameters



Parameter

Variable Type

Description



$Successful

Boolean

Returns true or false depending on whether the test script for the specified cell could be set successfully.





SetTestCellToReadyStatus

Previous Top Next



* * *



SetTestCellToReadyStatus



Usage:

$Successful = SetTestCellToReadyStatus($CellNumber, $resetBrowser, $resetTestDisplay);



Description:

This function sets Ready Status for the specified cell. When a cell is in Ready Status the Serial Number text box and Start buttons are enabled.



Note: The test cell can only be placed into Ready Status if there is no script running in that cell and the cell is not set as an Automation Cell.

Function Arguments



Parameter

Variable Type

Description



$CellNumber

Integer

The cell number to set Ready Status of.



$resetBrowser

Boolean

Whether to reset the browser window as well as the test cell status.



$resetTestDisplay

Boolean

Whether to reset the Test Display Box as well as the test cell status.





Return parameters



Parameter

Variable Type

Description



$Successful

Boolean

Returns true or false depending on whether the test cell Ready Status was updated successfully.





Example:





// turn on Ready Status in cell 2.

// Also reset the Browser Window and the Test Display Box.

$CellNumber = 2;

$Successful = SetTestCellToReadyStatus($CellNumber, true, true);





SetTestCellViewTab

Previous Top Next



* * *



SetTestCellViewTab



Usage:

$Successful = SetTestCellViewTab($CellNumber, $viewTab);



Description:

This function sets the viewing tab on the specified test cell.



Function Arguments



Parameter

Variable Type

Description



$CellNumber

Integer

The cell number to set the tab of.



$viewTab

String

The name of the tab to swithc the view to.

Values:

· BROWSER

· STATUS

· DEBUG





Return parameters



Parameter

Variable Type

Description



$Successful

Boolean

Returns true or false depending on whether the test cell view tab was updated successfully.





Example:





// Change cell 2 to the Browser tab.

$CellNumber = 2;

$tab = "BROWSER";

$Successful = SetTestCellViewTab($CellNumber, $tab);





StartTestCell

Previous Top Next



* * *



StartTestCell



Usage:

StartTestCell($CellNumber);



Description:



This function sends a start request to the specified test cell. If the function is already running, the request is ignored.

Function Arguments



Parameter

Variable Type

Description



$CellNumber

Integer

The cell number to start.





Return parameters



Parameter

Variable Type

Description



None





StartTestCellWithSerialNumber

Previous Top Next



* * *



StartTestCellWithSerialNumber



Usage:

StartTestCellWithSerialNumber($CellNumber,$SerialNumber);



Description:



This function sends a start request to the specified test cell, and also supplies the serial number of the product under test. If the function is already running, the request is ignored.

Function Arguments



Parameter

Variable Type

Description



$CellNumber

Integer

The cell number to start.



$SerialNumber

String

The serial number of the product currently to load into the test cell before sending the start request.





Return parameters



Parameter

Variable Type

Description



None





StopTestCell

Previous Top Next



* * *



StopTestCell



Usage:

StopTestCell($CellNumber);



Description:



This function sends an "Abort" request to the test cell. If the test cell is currently idle, the request is ignored.





Note: This function has the exact same effect as the operator clicking the abort button on the test cell. The current test function will run to completion, and the script will abort and run the cleanup function.

Function Arguments



Parameter

Variable Type

Description



$CellNumber

Integer

The cell number to stop.





Return parameters



Parameter

Variable Type

Description



None





Automation_CheckElementExistsByAutomationId

Previous Top Next



* * *



Automation_CheckElementExistsByAutomationId



Usage:

$found = Automation_CheckElementExistsByAutomationId($RootElement,$AutomationId);



Description:

This function checks for the existence of an automation element within the root element that matches the specified Automation Id.





Requirements:

This function implements the UI Automation Framework which allows you to automate Win32, Windows Forms and WPF applications. Every part of a UI (window, button, menu, …) is represented as an AutomationElement. An AutomationElement is an object that represents the accessible properties of a control.





You can use the Microsoft Program: UI Spy to view and interact with the user interface (UI) elements of an application.





Note: UI Spy is installed with the Microsoft Windows SDK. It is located in the \bin folder of the SDK installation path (uispy.exe) or can be accessed from the Start menu (Start\All Programs\Microsoft Windows SDK\Tools\UISpy).

Function arguments



Parameter

Variable Type

Description



$RootElement

Object

The root automation element which contains the element you'd like to check for.



$AutomationId

String

The Automation ID for the element.





Return parameters



Parameter

Variable Type

Description



$found

Boolean

True if any automation element matching the search parameter was found, otherwise false.





Usage Example:

$Window = Automation_GetRootAutomationElement("SciCalc");

$elementFound = Automation_CheckElementExistsByAutomationId($Window,"131");

if($elementFound)

{

$Button7 = Automation_GetElementByAutomationId($Window,"131");

}





Automation_CheckElementExistsByAutomationIdAndName

Previous Top Next



* * *



Automation_CheckElementExistsByAutomationIdAndName



Usage:

$found = Automation_CheckElementExistsByAutomationIdAndName($RootElement, $AutomationId, $Name);



Description:

This function checks for the existence of an automation element within the root element that matches the specified Automation Id AND name.





Requirements:

This function implements the UI Automation Framework which allows you to automate Win32, Windows Forms and WPF applications. Every part of a UI (window, button, menu, …) is represented as an AutomationElement. An AutomationElement is an object that represents the accessible properties of a control.





You can use the Microsoft Program: UI Spy to view and interact with the user interface (UI) elements of an application.





Note: UI Spy is installed with the Microsoft Windows SDK. It is located in the \bin folder of the SDK installation path (uispy.exe) or can be accessed from the Start menu (Start\All Programs\Microsoft Windows SDK\Tools\UISpy).

Function arguments



Parameter

Variable Type

Description



$RootElement

Object

The root automation element which contains the element you'd like to check for.



$AutomationId

String

The Automation ID for the element.



$Name

String

The Name of the element.





Return parameters



Parameter

Variable Type

Description



$found

Boolean

True if any automation element matching the search parameter was found, otherwise false.





Usage Example:

$Window = Automation_GetRootAutomationElement("SciCalc");

$elementFound = Automation_CheckElementExistsByAutomationIdAndName ($Window,"131", "7");

if($elementFound)

{

$Button7 = Automation_GetElementByAutomationIdAndName($Window, "131", "7");

}





Automation_CheckElementExistsByName

Previous Top Next



* * *



Automation_CheckElementExistsByName



Usage:

$found = Automation_CheckElementExistsByName($RootElement, $Name);



Description:

This function checks for the existence of an automation element within the root element that matches the specified name.





Requirements:

This function implements the UI Automation Framework which allows you to automate Win32, Windows Forms and WPF applications. Every part of a UI (window, button, menu, …) is represented as an AutomationElement. An AutomationElement is an object that represents the accessible properties of a control.





You can use the Microsoft Program: UI Spy to view and interact with the user interface (UI) elements of an application.





Note: UI Spy is installed with the Microsoft Windows SDK. It is located in the \bin folder of the SDK installation path (uispy.exe) or can be accessed from the Start menu (Start\All Programs\Microsoft Windows SDK\Tools\UISpy).

Function arguments



Parameter

Variable Type

Description



$RootElement

Object

The root automation element which contains the element you'd like to check for.



$Name

String

The Name of the element.





Return parameters



Parameter

Variable Type

Description



$found

Boolean

True if any automation element matching the search parameter was found, otherwise false.





Usage Example:

$Window = Automation_GetRootAutomationElement("SciCalc");

$elementFound = Automation_CheckElementExistsByName ($Window, "7");

if($elementFound)

{

$Button7 = Automation_GetElementByName($Window, "7");

}





Automation_CheckRootAutomationElementExistsByAutomationId

Previous Top Next



* * *



Automation_CheckRootAutomationElementExistsByAutomationId



Usage:

$found = Automation_CheckRootAutomationElementExistsByAutomationId($AutomationId);



Description:

This function checks for the existence of an automation element within the current desktop root that matches the specified AutomationId.





Requirements:

This function implements the UI Automation Framework which allows you to automate Win32, Windows Forms and WPF applications. Every part of a UI (window, button, menu, …) is represented as an AutomationElement. An AutomationElement is an object that represents the accessible properties of a control.





You can use the Microsoft Program: UI Spy to view and interact with the user interface (UI) elements of an application. By viewing the application's UI hierarchical structure, property values, and raised events, developers and testers can verify that the UI they are creating is programmatically accessible to assistive technology devices such as screen readers.





Note: UI Spy is installed with the Microsoft Windows SDK. It is located in the \bin folder of the SDK installation path (uispy.exe) or can be accessed from the Start menu (Start\All Programs\Microsoft Windows SDK\Tools\UISpy).

Function arguments



Parameter

Variable Type

Description



$AutomationId

String

The AutomationId of the root automation element to be checked for.





Return parameters



Parameter

Variable Type

Description



$found

Object

True if any automation element matching the search parameter was found, otherwise false.





Usage Example:

$elementFound = Automation_CheckRootAutomationElementExistsByAutomationId ("JabilMainForm");

if($elementFound)

{

$Window = Automation_GetRootAutomationElementByAutomationId("JabilMainForm");

}

if(!$elementFound)

{

UpdateStatus("JabilMainForm not found! ");

}





Automation_CheckRootAutomationElementExistsByName

Previous Top Next



* * *



Automation_CheckRootAutomationElementExistsByName



Usage:

$found = Automation_CheckRootAutomationElementExistsByName($Name);



Description:

This function checks for the existence of an automation element within the current desktop root that matches the specified name.





Requirements:

This function implements the UI Automation Framework which allows you to automate Win32, Windows Forms and WPF applications. Every part of a UI (window, button, menu, …) is represented as an AutomationElement. An AutomationElement is an object that represents the accessible properties of a control.





You can use the Microsoft Program: UI Spy to view and interact with the user interface (UI) elements of an application. By viewing the application's UI hierarchical structure, property values, and raised events, developers and testers can verify that the UI they are creating is programmatically accessible to assistive technology devices such as screen readers.





Note: UI Spy is installed with the Microsoft Windows SDK. It is located in the \bin folder of the SDK installation path (uispy.exe) or can be accessed from the Start menu (Start\All Programs\Microsoft Windows SDK\Tools\UISpy).

Function arguments



Parameter

Variable Type

Description



$Name

String

The Name of the root automation element to be checked for.





Return parameters



Parameter

Variable Type

Description



$found

Object

True if any automation element matching the search parameter was found, otherwise false.





Usage Example:

$elementFound = Automation_CheckRootAutomationElementExistsByName("Calculator");

if($elementFound)

{

$Window = Automation_GetRootAutomationElementByName("Calculator");

}

if(!$elementFound)

{

UpdateStatus("Calculator not found!");

}





Automation_ElementCollapse

Previous Top Next



* * *



Automation_ElementCollapse



Usage:

Automation_ElementCollapse($Element);



Description:

This function sends a request to the automation element to visually collapse the element and hide content.

Note:

· The element must support the ExpandCollapsePattern control pattern

· The element can not be a leaf node.

· The only the parent element must support the ExpandCollapsePattern.

· A menu control, even though an aggregate of individual menu items, is an exception to the above rule. The menu items support the ExpandCollapsePattern control pattern, but the parent menu control does not. A similar exception applies to the tree and tree item controls.





Requirements:

This function implements the UI Automation Framework which allows you to automate Win32, Windows Forms and WPF applications. Every part of a UI (window, button, menu, …) is represented as an AutomationElement. An AutomationElement is an object that represents the accessible properties of a control.





You can use the Microsoft Program: UI Spy to view and interact with the user interface (UI) elements of an application.





Note: UI Spy is installed with the Microsoft Windows SDK. It is located in the \bin folder of the SDK installation path (uispy.exe) or can be accessed from the Start menu (Start\All Programs\Microsoft Windows SDK\Tools\UISpy).

Function arguments



Parameter

Variable Type

Description



$Element

Object

The automation element to collapse





Return parameters



Parameter

Variable Type

Description



None





Usage Example:

$comboBox = Automation_GetElementByAutomationId($Window,"131");

Automation_ElementCollapse($comboBox);





Automation_ElementExpand

Previous Top Next



* * *



Automation_ElementExpand



Usage:

Automation_ElementExpand($Element);



Description:

This function sends a request to the automation element to visually expand and display additional content.





Note:

· The element must support the ExpandCollapsePattern control pattern

· The element can not be a leaf node.

· The only the parent element must support the ExpandCollapsePattern.

· A menu control, even though an aggregate of individual menu items, is an exception to the above rule. The menu items support the ExpandCollapsePattern control pattern, but the parent menu control does not. A similar exception applies to the tree and tree item controls.





Requirements:

This function implements the UI Automation Framework which allows you to automate Win32, Windows Forms and WPF applications. Every part of a UI (window, button, menu, …) is represented as an AutomationElement. An AutomationElement is an object that represents the accessible properties of a control.





You can use the Microsoft Program: UI Spy to view and interact with the user interface (UI) elements of an application.





Note: UI Spy is installed with the Microsoft Windows SDK. It is located in the \bin folder of the SDK installation path (uispy.exe) or can be accessed from the Start menu (Start\All Programs\Microsoft Windows SDK\Tools\UISpy).

Function arguments



Parameter

Variable Type

Description



$Element

Object

The automation element to expand





Return parameters



Parameter

Variable Type

Description



None





Usage Example:

$comboBox = Automation_GetElementByAutomationId($Window,"131");

Automation_ElementExpand($comboBox);





Automation_ElementGetDocumentText

Previous Top Next



* * *



Automation_ElementGetDocumentText



Usage:

$Text = Automation_ElementGetDocumentText($Element, $maxLength);



Description:

This function returns the plain text of the element. The text may possibly be truncated at the specified $maxLength. This function respects both hidden and visible text.

If $maxLength is greater than the length of the text span, the string returned will be the plain text of the text range.





Note:

· The element must support the TextPattern control pattern.





Requirements:

This function implements the UI Automation Framework which allows you to automate Win32, Windows Forms and WPF applications. Every part of a UI (window, button, menu, …) is represented as an AutomationElement. An AutomationElement is an object that represents the accessible properties of a control.





You can use the Microsoft Program: UI Spy to view and interact with the user interface (UI) elements of an application.





Note: UI Spy is installed with the Microsoft Windows SDK. It is located in the \bin folder of the SDK installation path (uispy.exe) or can be accessed from the Start menu (Start\All Programs\Microsoft Windows SDK\Tools\UISpy).

Function arguments



Parameter

Variable Type

Description



$Element

Object

The automation element to get text from



$maxLength

Integer

The maximum length of the string to return. Use -1 if no limit is required





Return parameters



Parameter

Variable Type

Description



$Text

String

The plain text of the element, possibly truncated at the specified $maxLength.





Usage Example:

$Document = Automation_GetElementByAutomationId($Window,"15");

$Text = Automation_ElementGetDocumentText($Document, 100);





Automation_ElementGetToggleValue

Previous Top Next



* * *



Automation_ElementGetToggleValue



Usage:

$Value = Automation_ElementGetToggleValue($Element);



Description:

This function gets the current Automation property value for the toggle element (for example: a checkbox) as a string.





Note:

· The element must support the TogglePattern control pattern.





Requirements:

This function implements the UI Automation Framework which allows you to automate Win32, Windows Forms and WPF applications. Every part of a UI (window, button, menu, …) is represented as an AutomationElement. An AutomationElement is an object that represents the accessible properties of a control.





You can use the Microsoft Program: UI Spy to view and interact with the user interface (UI) elements of an application.





Note: UI Spy is installed with the Microsoft Windows SDK. It can also be downloaded from the Jabil Test Wiki.

Function arguments



Parameter

Variable Type

Description



$Element

Object

The automation element to get value from





Return parameters



Parameter

Variable Type

Description



$Value

String

The value of the Automation element as a string. The default is an empty string. For a checkbox, this will be "On" or "Off".





Usage Example:

$checkBox = Automation_GetElementByAutomationId($Window, "m_cbUseFile");

$value = Automation_ElementGetToggleValue($checkBox);





Automation_ElementGetValue

Previous Top Next



* * *



Automation_ElementGetValue



Usage:

$Value = Automation_ElementGetValue($Element);



Description:

This function gets the current Automation property value for the element as a string.





Note:

· The element must support the ValuePattern control pattern.

· This function does not support multi-line edit controls. To retrieve the textual contents of multi-line edit controls use the Automation_GetElementDocumentText function.





Requirements:

This function implements the UI Automation Framework which allows you to automate Win32, Windows Forms and WPF applications. Every part of a UI (window, button, menu, …) is represented as an AutomationElement. An AutomationElement is an object that represents the accessible properties of a control.





You can use the Microsoft Program: UI Spy to view and interact with the user interface (UI) elements of an application.





Note: UI Spy is installed with the Microsoft Windows SDK. It is located in the \bin folder of the SDK installation path (uispy.exe) or can be accessed from the Start menu (Start\All Programs\Microsoft Windows SDK\Tools\UISpy).

Function arguments



Parameter

Variable Type

Description



$Element

Object

The automation element to get value from





Return parameters



Parameter

Variable Type

Description



$Value

String

The value of the Automation element as a string. The default is an empty string.





Usage Example:

$Button7 = Automation_GetElementByAutomationId($Window,"131");

Automation_ElementGetValue($Button7);





Automation_ElementInvoke

Previous Top Next



* * *



Automation_ElementInvoke



Usage:

Automation_ElementInvoke($Element);



Description:

This function sends a request to activate a control and initiate its single, unambiguous action.





Note:

· The element must support the InvokePattern control pattern and can not be hidden or blocked.

· The element must be enabled.





Requirements:

This function implements the UI Automation Framework which allows you to automate Win32, Windows Forms and WPF applications. Every part of a UI (window, button, menu, …) is represented as an AutomationElement. An AutomationElement is an object that represents the accessible properties of a control.





You can use the Microsoft Program: UI Spy to view and interact with the user interface (UI) elements of an application.





Note: UI Spy is installed with the Microsoft Windows SDK. It is located in the \bin folder of the SDK installation path (uispy.exe) or can be accessed from the Start menu (Start\All Programs\Microsoft Windows SDK\Tools\UISpy).

Function arguments



Parameter

Variable Type

Description



$Element

Object

The automation element to invoke





Return parameters



Parameter

Variable Type

Description



None





Usage Example:

$Button7 = Automation_GetElementByAutomationId($Window,"131");

Automation_ElementInvoke($Button7);





Automation_ElementListSupportedPatterns

Previous Top Next



* * *



Automation_ElementListSupportedPatterns



Usage:

$PatternList = Automation_ElementListSupportedPatterns($Element);



Description:

This function retrieves the control patterns that the passed Automation Element supports. The patterns are returned as semicolon ; delimited string.





Requirements:

This function implements the UI Automation Framework which allows you to automate Win32, Windows Forms and WPF applications. Every part of a UI (window, button, menu, …) is represented as an AutomationElement. An AutomationElement is an object that represents the accessible properties of a control.





You can use the Microsoft Program: UI Spy to view and interact with the user interface (UI) elements of an application.





Note: UI Spy is installed with the Microsoft Windows SDK. It is located in the \bin folder of the SDK installation path (uispy.exe) or can be accessed from the Start menu (Start\All Programs\Microsoft Windows SDK\Tools\UISpy).

Function arguments



Parameter

Variable Type

Description



$Element

Object

The automation element to retrieve supported patterns.





Return parameters



Parameter

Variable Type

Description



$PatternList

String

Semicolon ; delimited string of patterns supported by the passed element.





Usage Example:

$Button7 = Automation_GetElementByAutomationId($Window,"131");

$PatternList = Automation_ElementListSupportedPatterns($Button7);





Automation_ElementSelectAllDocumentText

Previous Top Next



* * *



Automation_ElementSelectAllDocumentText



Usage:

Automation_ElementSelectAllDocumentText($Element);



Description:

This function selects the entire text range that encloses the main text of a document.





Note:

· The element must support the TextPattern control pattern.

· Some auxiliary text such as headers, footnotes, or annotations might not be included.





Requirements:

This function implements the UI Automation Framework which allows you to automate Win32, Windows Forms and WPF applications. Every part of a UI (window, button, menu, …) is represented as an AutomationElement. An AutomationElement is an object that represents the accessible properties of a control.





You can use the Microsoft Program: UI Spy to view and interact with the user interface (UI) elements of an application.





Note: UI Spy is installed with the Microsoft Windows SDK. It is located in the \bin folder of the SDK installation path (uispy.exe) or can be accessed from the Start menu (Start\All Programs\Microsoft Windows SDK\Tools\UISpy).

Function arguments



Parameter

Variable Type

Description



$Element

Object

The automation element to select text from





Return parameters



Parameter

Variable Type

Description



None





Usage Example:

$Document = Automation_GetElementByAutomationId($Window,"15");

Automation_ElementSelectAllDocumentText($Document);





Automation_ElementSetFocus

Previous Top Next



* * *



Automation_ElementSetFocus



Usage:

Automation_ElementSetFocus($Element);



Description:

This function sets focus on the automation element.The behavior of this method depends on the implementation by the UI Automation provider for the element. Setting focus does not necessarily bring the element to the foreground or make it visible.





Requirements:

This function implements the UI Automation Framework which allows you to automate Win32, Windows Forms and WPF applications. Every part of a UI (window, button, menu, …) is represented as an AutomationElement. An AutomationElement is an object that represents the accessible properties of a control.





You can use the Microsoft Program: UI Spy to view and interact with the user interface (UI) elements of an application.





Note: UI Spy is installed with the Microsoft Windows SDK. It is located in the \bin folder of the SDK installation path (uispy.exe) or can be accessed from the Start menu (Start\All Programs\Microsoft Windows SDK\Tools\UISpy).

Function arguments



Parameter

Variable Type

Description



$Element

Object

The automation element to focus on





Return parameters



Parameter

Variable Type

Description



None





Usage Example:

$Button7 = Automation_GetElementByAutomationId($Window,"131");

Automation_ElementSetFocus($Button7);





Automation_ElementSetValue

Previous Top Next



* * *



Automation_ElementSetValue



Usage:

Automation_ElementSetValue($Element, $Value);



Description:

This function sets the current Automation property value for the element.





Note:

· The element must support the ValuePattern control pattern.

· This function does not support multi-line edit controls.

· The control can not be read-only

· The control must be enabled





Requirements:

This function implements the UI Automation Framework which allows you to automate Win32, Windows Forms and WPF applications. Every part of a UI (window, button, menu, …) is represented as an AutomationElement. An AutomationElement is an object that represents the accessible properties of a control.





You can use the Microsoft Program: UI Spy to view and interact with the user interface (UI) elements of an application.





Note: UI Spy is installed with the Microsoft Windows SDK. It is located in the \bin folder of the SDK installation path (uispy.exe) or can be accessed from the Start menu (Start\All Programs\Microsoft Windows SDK\Tools\UISpy).

Function arguments



Parameter

Variable Type

Description



$Element

Object

The automation element to set the value of



$Value

String

The value the control will be set to





Return parameters



Parameter

Variable Type

Description



None





Usage Example:

$Document= Automation_GetElementByAutomationId($Window,"15");

Automation_ElementSetValue($Document, "Hello World");





Automation_GetDialogElementByName

Previous Top Next



* * *



Automation_GetDialogElementByName



Usage:

$Element = Automation_GetDialogElementByName($RootElement, $Name);



Description:

This function returns the first dialog element that matches the specified Name within the root element.





Requirements:

This function implements the UI Automation Framework which allows you to automate Win32, Windows Forms and WPF applications. Every part of a UI (window, button, menu, …) is represented as an AutomationElement. An AutomationElement is an object that represents the accessible properties of a control.

You can use the Microsoft Program: UI Spy to view and interact with the user interface (UI) elements of an application.





Notes: UI Spy is installed with the Microsoft Windows SDK. It is located in the \bin folder of the SDK installation path (uispy.exe) or can be accessed from the Start menu (Start\All Programs\Microsoft Windows SDK\Tools\UISpy).

The dialog window must already be open for the element to be found. You may have to delay after opening the dialog before the element ID can be returned.

Function arguments



Parameter

Variable Type

Description



$RootElement

Object

The root automation element which contains the dialog you'd like to retrieve.



$Name

String

The Name of the dialog.





Return parameters



Parameter

Variable Type

Description



$Element

Object

The Dialog Element with the matching name within the specified root element. Note: Dialog elements can be used as root elements to access the controls in the dialog.





Usage Example:

// Get a handle to the program.

$Window = Automation_GetRootAutomationElement("Notepad");

// Ensure the new program has focus.

Automation_ElementSetFocus($Window);

// Open the "Save" dialog by sending <ctrl-s>.

Automation_SendKeysWait("^s");

// Get a link to the dialog that opened.

$saveHandle = Automation_GetDialogElementByName($Window, "Save");





Automation_GetElementByAutomationId

Previous Top Next



* * *



Automation_GetElementByAutomationId



Usage:

$Element = Automation_GetElementByAutomationId($RootElement,$AutomationId);



Description:

This function returns the first element that matches the specified Automation Id within the root element.





Requirements:

This function implements the UI Automation Framework which allows you to automate Win32, Windows Forms and WPF applications. Every part of a UI (window, button, menu, …) is represented as an AutomationElement. An AutomationElement is an object that represents the accessible properties of a control.





You can use the Microsoft Program: UI Spy to view and interact with the user interface (UI) elements of an application.





Note: UI Spy is installed with the Microsoft Windows SDK. It is located in the \bin folder of the SDK installation path (uispy.exe) or can be accessed from the Start menu (Start\All Programs\Microsoft Windows SDK\Tools\UISpy).

Function arguments



Parameter

Variable Type

Description



$RootElement

Object

The root automation element which contains the element you'd like to retrieve.



$AutomationId

String

The Automation ID for the element.





Return parameters



Parameter

Variable Type

Description



$Element

Object

The Automation Element with the matching automation ID within the specified root element.





Usage Example:

$Window = Automation_GetRootAutomationElement("SciCalc");

$Button7 = Automation_GetElementByAutomationId($Window,"131");





Automation_GetElementByAutomationIdAndClassName

Previous Top Next



* * *



Automation_GetElementByAutomationIdAndClassName



Usage:

$Element = Automation_GetElementByAutomationIdAndClassName($RootElement,$AutomationId,$ClassName);



Description:

This function returns the first element that matches both the specified Automation Id AND Class Name within the root element.





Requirements:

This function implements the UI Automation Framework which allows you to automate Win32, Windows Forms and WPF applications. Every part of a UI (window, button, menu, …) is represented as an AutomationElement. An AutomationElement is an object that represents the accessible properties of a control.





You can use the Microsoft Program: UI Spy to view and interact with the user interface (UI) elements of an application.





Note: UI Spy is installed with the Microsoft Windows SDK. It is located in the \bin folder of the SDK installation path (uispy.exe) or can be accessed from the Start menu (Start\All Programs\Microsoft Windows SDK\Tools\UISpy).

Function arguments



Parameter

Variable Type

Description



$RootElement

Object

The root automation element which contains the element you'd like to retrieve.



$AutomationId

String

The AutomationId of the element



$Class Name

String

The Class Name of the element.





Return parameters



Parameter

Variable Type

Description



$Element

Object

The Automation Element with the matching automation ID within the specified root element.





Usage Example:

$Window = Automation_GetRootAutomationElement("SciCalc");

$Button = Automation_GetElementByAutomationIdAndClassName($Window,"314","Button");





Automation_GetElementByAutomationIdAndName

Previous Top Next



* * *



Automation_GetElementByAutomationIdAndName



Usage:

$Element = Automation_GetElementByAutomationIdAndName($RootElement,$AutomationId,$Name);



Description:

This function returns the first element that matches both the specified Automation Id AND Name within the root element.





Requirements:

This function implements the UI Automation Framework which allows you to automate Win32, Windows Forms and WPF applications. Every part of a UI (window, button, menu, …) is represented as an AutomationElement. An AutomationElement is an object that represents the accessible properties of a control.





You can use the Microsoft Program: UI Spy to view and interact with the user interface (UI) elements of an application.





Note: UI Spy is installed with the Microsoft Windows SDK. It is located in the \bin folder of the SDK installation path (uispy.exe) or can be accessed from the Start menu (Start\All Programs\Microsoft Windows SDK\Tools\UISpy).

Function arguments



Parameter

Variable Type

Description



$RootElement

Object

The root automation element which contains the element you'd like to retrieve.



$AutomationId

String

The AutomationId of the element



$Name

String

The Name of the element.





Return parameters



Parameter

Variable Type

Description



$Element

Object

The Automation Element with the matching automation ID within the specified root element.





Usage Example:

$Window = Automation_GetRootAutomationElement("SciCalc");

$Button = Automation_GetElementByAutomationIdAndName($Window,"314","Degrees");





Automation_GetElementByClassName

Previous Top Next



* * *



Automation_GetElementByClassName



Usage:

$Element = Automation_GetElementByClassName($RootElement,$ClassName);



Description:

This function returns the first element that matches the specified Class Name within the root element.





Requirements:

This function implements the UI Automation Framework which allows you to automate Win32, Windows Forms and WPF applications. Every part of a UI (window, button, menu, …) is represented as an AutomationElement. An AutomationElement is an object that represents the accessible properties of a control.





You can use the Microsoft Program: UI Spy to view and interact with the user interface (UI) elements of an application.





Note: UI Spy is installed with the Microsoft Windows SDK. It is located in the \bin folder of the SDK installation path (uispy.exe) or can be accessed from the Start menu (Start\All Programs\Microsoft Windows SDK\Tools\UISpy).

Function arguments



Parameter

Variable Type

Description



$RootElement

Object

The root automation element which contains the element you'd like to retrieve.



$ClassName

String

The Class Name of the element.





Return parameters



Parameter

Variable Type

Description



$Element

Object

The Automation Element with the matching automation ID within the specified root element.





Usage Example:

$Window = Automation_GetRootAutomationElement("SciCalc");

$Button = Automation_GetElementByClassName($Window,"Edit");





Automation_GetElementByName

Previous Top Next



* * *



Automation_GetElementByName



Usage:

$Element = Automation_GetElementByName($RootElement,$Name);



Description:

This function returns the first element that matches the specified Name within the root element.





Requirements:

This function implements the UI Automation Framework which allows you to automate Win32, Windows Forms and WPF applications. Every part of a UI (window, button, menu, …) is represented as an AutomationElement. An AutomationElement is an object that represents the accessible properties of a control.





You can use the Microsoft Program: UI Spy to view and interact with the user interface (UI) elements of an application.





Note: UI Spy is installed with the Microsoft Windows SDK. It is located in the \bin folder of the SDK installation path (uispy.exe) or can be accessed from the Start menu (Start\All Programs\Microsoft Windows SDK\Tools\UISpy).

Function arguments



Parameter

Variable Type

Description



$RootElement

Object

The root automation element which contains the element you'd like to retrieve.



$Name

String

The Name of the element.





Return parameters



Parameter

Variable Type

Description



$Element

Object

The Automation Element with the matching automation ID within the specified root element.





Usage Example:

$Window = Automation_GetRootAutomationElement("Notepad");

$Button = Automation_GetElementByName($Window,"Save");





Automation_GetElementByNameAndClassName

Previous Top Next



* * *



Automation_GetElementByNameAndClassName



Usage:

$Element = Automation_GetElementByNameAndClassName($RootElement,$Name,$ClassName);



Description:

This function returns the first element that matches both the specified Name AND Class Name within the root element.





Requirements:

This function implements the UI Automation Framework which allows you to automate Win32, Windows Forms and WPF applications. Every part of a UI (window, button, menu, …) is represented as an AutomationElement. An AutomationElement is an object that represents the accessible properties of a control.





You can use the Microsoft Program: UI Spy to view and interact with the user interface (UI) elements of an application.





Note: UI Spy is installed with the Microsoft Windows SDK. It is located in the \bin folder of the SDK installation path (uispy.exe) or can be accessed from the Start menu (Start\All Programs\Microsoft Windows SDK\Tools\UISpy).

Function arguments



Parameter

Variable Type

Description



$RootElement

Object

The root automation element which contains the element you'd like to retrieve.



$Name

String

The Name of the element



$ClassName

String

The Class Name of the element





Return parameters



Parameter

Variable Type

Description



$Element

Object

The Automation Element with the matching automation ID within the specified root element.





Usage Example:

$Window = Automation_GetRootAutomationElement("SciCalc");

$Button = Automation_GetElementByNameAndClassName($Window,"Degrees","Button");





Automation_GetElementByNameSubstring

Previous Top Next



* * *



Automation_GetElementByNameSubstring



Usage:

$Element = Automation_GetElementByNameSubstring($RootElement,$NameSubstring);



Description:

This function returns the first element whose name contains the specified substring within the specified root element.





Requirements:

This function implements the UI Automation Framework which allows you to automate Win32, Windows Forms and WPF applications. Every part of a UI (window, button, menu, …) is represented as an AutomationElement. An AutomationElement is an object that represents the accessible properties of a control.





You can use the Microsoft Program: UI Spy to view and interact with the user interface (UI) elements of an application.





Note: UI Spy is installed with the Microsoft Windows SDK. It is located in the \bin folder of the SDK installation path (uispy.exe) or can be accessed from the Start menu (Start\All Programs\Microsoft Windows SDK\Tools\UISpy).

Function arguments



Parameter

Variable Type

Description



$RootElement

Object

The root automation element which contains the element you'd like to retrieve.



$NameSubstring

String

The substring to search for in the name of the element.





Return parameters



Parameter

Variable Type

Description



$Element

Object

The Automation Element with the matching automation ID within the specified root element.





Usage Example:

$child = Automation_GetElementByNameSubstring($root, "App");





Automation_GetElementByPropertyIndex

Previous Top Next



* * *



Automation_GetElementByPropertyIndex



Usage:

$Count = Automation_GetElementByPropertyIndex($Root,$PropertyValue,$PropertyType,$Index);



Description:

This function returns the automation element within the root element at the required index that matches the specified property value for the specified property type. The index is zero based.





Property Type Values:

· CLASS = Element Class Name

· AUTOID = Element Automation Id

· NAME = Element Name

· CTRL = Element Control Type





Requirements:

This function implements the UI Automation Framework which allows you to automate Win32, Windows Forms and WPF applications. Every part of a UI (window, button, menu, …) is represented as an AutomationElement. An AutomationElement is an object that represents the accessible properties of a control.





You can use the Microsoft Program: UI Spy to view and interact with the user interface (UI) elements of an application.





Note: UI Spy is installed with the Microsoft Windows SDK. It is located in the \bin folder of the SDK installation path (uispy.exe) or can be accessed from the Start menu (Start\All Programs\Microsoft Windows SDK\Tools\UISpy).

Function arguments



Parameter

Variable Type

Description



$Root

Object

The root automation element which contains the elements you'd like to count.



$PropertyValue

String

The property value that you'd like to match



$PropertyType

String

The property type you'd like to compare the value against. [CLASS,AUTOID,NAME,CTRL]



$Index

Integer

The zero based index of the matching elements





Return parameters



Parameter

Variable Type

Description



$Count

Integer

The number of matching elements





Usage Example:

$Window = Automation_GetRootAutomationElement("SciCalc");

$element = Automation_GetElementByPropertyIndex($Window,"ControlType.RadioButton","CTRL",0);





Automation_GetElementCountByProperty

Previous Top Next



* * *



Automation_GetElementCountByProperty



Usage:

$Count = Automation_GetElementCountByProperty($Root,$PropertyValue,$PropertyType);



Description:

This function returns the number of elements within the root element that match the specified property value for the specified property type.





Property Type Values:

· CLASS = Element Class Name

· AUTOID = Element Automation Id

· NAME = Element Name

· CTRL = Element Control Type





Requirements:

This function implements the UI Automation Framework which allows you to automate Win32, Windows Forms and WPF applications. Every part of a UI (window, button, menu, …) is represented as an AutomationElement. An AutomationElement is an object that represents the accessible properties of a control.





You can use the Microsoft Program: UI Spy to view and interact with the user interface (UI) elements of an application.





Note: UI Spy is installed with the Microsoft Windows SDK. It is located in the \bin folder of the SDK installation path (uispy.exe) or can be accessed from the Start menu (Start\All Programs\Microsoft Windows SDK\Tools\UISpy).

Function arguments



Parameter

Variable Type

Description



$Root

Object

The root automation element which contains the elements you'd like to count.



$PropertyValue

String

The property value that you'd like to match



$PropertyType

String

The property type you'd like to compare the value against. [CLASS,AUTOID,NAME,CTRL]





Return parameters



Parameter

Variable Type

Description



$Count

Integer

The number of matching elements





Usage Example:

$Window = Automation_GetRootAutomationElement("SciCalc");

$c = Automation_GetElementCountByProperty($Window,"ControlType.RadioButton","CTRL");





Automation_GetElementDescript

Previous Top Next



* * *



Automation_GetElementDescript



Usage:

($className, $controlType, $automationId, $elementName, $processId) = Automation_GetElementDescript($elementHandle);



Description:

This function returns information about an automation element.



Note:

· Not all data will be populated by all elements. This is a function for how the software being automated was created.

· Some automation elements will not support returning the process ID. For these, the returned value will be "Not Supported".

· The process ID is the Windows process ID.

Function arguments



Parameter

Variable Type

Description



$elementHandle

Object

The handle to the element that you wish to get information about. This will have been created with any of the Automation_GetElement* functions or Automation_GetRootAutomationElement, or Automation_GetDialogElementByName.





Return parameters



Parameter

Variable Type

Description



$className

String

The class name of the automation element.



$controlType

String

The type of control for the automation element. This may include "Window", "Button", "Text", or any of a variety of elements.



$automationID

String

The automation ID of the automation element.



$elementName

String

The name of the automation element.



$processId

String

The process ID of the automation element or of the owning element. For example, the process ID of a button will be the same as for the window that contains the button.





Example(s):

// Get the root automation element for the program.

$rootHandle = Automation_GetRootAutomationElement("Notepad++");

// Get the information about the root element.

($rootClass, $rootType, $rootId, $rootName, $rootProcess) = Automation_GetElementDescript($rootHandle);





Automation_GetRootAutomationElement

Previous Top Next



* * *



Automation_GetRootAutomationElement



Usage:

$RootElement= Automation_GetRootAutomationElement($ClassName);



Description:

This function returns the first automation element within the current desktop root that matches the specified ClassName of that element.





Requirements:

This function implements the UI Automation Framework which allows you to automate Win32, Windows Forms and WPF applications. Every part of a UI (window, button, menu, …) is represented as an AutomationElement. An AutomationElement is an object that represents the accessible properties of a control.





You can use the Microsoft Program: UI Spy to view and interact with the user interface (UI) elements of an application. By viewing the application's UI hierarchical structure, property values, and raised events, developers and testers can verify that the UI they are creating is programmatically accessible to assistive technology devices such as screen readers.





Note: UI Spy is installed with the Microsoft Windows SDK. It is located in the \bin folder of the SDK installation path (uispy.exe) or can be accessed from the Start menu (Start\All Programs\Microsoft Windows SDK\Tools\UISpy).

Function arguments



Parameter

Variable Type

Description



$ClassName

String

The ClassName of the root automation element to be returned.





Return parameters



Parameter

Variable Type

Description



$RootElement

Object

The root automation element which contains the element you'd like to retrieve.





Usage Example:

$Window = Automation_GetRootAutomationElement("SciCalc");





Automation_GetRootAutomationElementByAutomationId

Previous Top Next



* * *



Automation_GetRootAutomationElementByAutomationId



Usage:

$RootElement= Automation_GetRootAutomationElementByAutomationId($AutomationId);



Description:

This function returns the first automation element within the current desktop root that matches the specified AutomationId of that element.





Requirements:

This function implements the UI Automation Framework which allows you to automate Win32, Windows Forms and WPF applications. Every part of a UI (window, button, menu, …) is represented as an AutomationElement. An AutomationElement is an object that represents the accessible properties of a control.





You can use the Microsoft Program: UI Spy to view and interact with the user interface (UI) elements of an application. By viewing the application's UI hierarchical structure, property values, and raised events, developers and testers can verify that the UI they are creating is programmatically accessible to assistive technology devices such as screen readers.





Note: UI Spy is installed with the Microsoft Windows SDK. It is located in the \bin folder of the SDK installation path (uispy.exe) or can be accessed from the Start menu (Start\All Programs\Microsoft Windows SDK\Tools\UISpy).

Function arguments



Parameter

Variable Type

Description



$AutomationId

String

The AutomationId of the root automation element to be returned.





Return parameters



Parameter

Variable Type

Description



$RootElement

Object

The root automation element which contains the element you'd like to retrieve.





Usage Example:

$Window = Automation_GetRootAutomationElementByAutomationId("JabilMainForm");





Automation_GetRootAutomationElementByName

Previous Top Next



* * *



Automation_GetRootAutomationElementByName



Usage:

$RootElement= Automation_GetRootAutomationElementByName($Name);



Description:

This function returns the first automation element within the current desktop root that matches the specified Name of that element.





Requirements:

This function implements the UI Automation Framework which allows you to automate Win32, Windows Forms and WPF applications. Every part of a UI (window, button, menu, …) is represented as an AutomationElement. An AutomationElement is an object that represents the accessible properties of a control.





You can use the Microsoft Program: UI Spy to view and interact with the user interface (UI) elements of an application. By viewing the application's UI hierarchical structure, property values, and raised events, developers and testers can verify that the UI they are creating is programmatically accessible to assistive technology devices such as screen readers.





Note: UI Spy is installed with the Microsoft Windows SDK. It is located in the \bin folder of the SDK installation path (uispy.exe) or can be accessed from the Start menu (Start\All Programs\Microsoft Windows SDK\Tools\UISpy).

Function arguments



Parameter

Variable Type

Description



$Name

String

The Name of the root automation element to be returned.





Return parameters



Parameter

Variable Type

Description



$RootElement

Object

The root automation element which contains the element you'd like to retrieve.





Usage Example:

$Window = Automation_GetRootAutomationElementByName("Untitled - Notepad");





Automation_GetRootAutomationElementByNameSubstring

Previous Top Next



* * *



Automation_GetRootAutomationElementByNameSubstring



Usage:

$RootElement= Automation_GetRootAutomationElementByNameSubstring($NameSubstring);



Description:

This function returns the first automation element within the current desktop root whose name contains the specified substring.





Requirements:

This function implements the UI Automation Framework which allows you to automate Win32, Windows Forms and WPF applications. Every part of a UI (window, button, menu, …) is represented as an AutomationElement. An AutomationElement is an object that represents the accessible properties of a control.





You can use the Microsoft Program: UI Spy to view and interact with the user interface (UI) elements of an application. By viewing the application's UI hierarchical structure, property values, and raised events, developers and testers can verify that the UI they are creating is programmatically accessible to assistive technology devices such as screen readers.





Note: UI Spy is installed with the Microsoft Windows SDK. It is located in the \bin folder of the SDK installation path (uispy.exe) or can be accessed from the Start menu (Start\All Programs\Microsoft Windows SDK\Tools\UISpy).

Function arguments



Parameter

Variable Type

Description



$NameSubstring

String

The substring of the root automation element's name.





Return parameters



Parameter

Variable Type

Description



$RootElement

Object

The root automation element which contains the element you'd like to retrieve.





Usage Example:

$root = Automation_GetRootAutomationElementByNameSubstring("Not");





Automation_GridGetItem

Previous Top Next



* * *



Automation_GridGetItem



Usage:

$GridItem= Automation_GridGetItem($ParentElement, $Row, $Column);



Description:

This function retrieves an Automation Element that represents the specified cell within the specified source element containing the grid.





Note:

· The element must support the GridPattern control pattern.

· Grid coordinates are zero-based with the upper left (or upper right cell depending on locale) having coordinates (0,0).

· If a cell is empty, a UI Automation element is still returned in order to support retrieval of the ContainingGrid property for that cell. This is possible when the layout of child elements in the grid are staggered.





Requirements:

This function implements the UI Automation Framework which allows you to automate Win32, Windows Forms and WPF applications. Every part of a UI (window, button, menu, …) is represented as an AutomationElement. An AutomationElement is an object that represents the accessible properties of a control.





You can use the Microsoft Program: UI Spy to view and interact with the user interface (UI) elements of an application.





Note: UI Spy is installed with the Microsoft Windows SDK. It is located in the \bin folder of the SDK installation path (uispy.exe) or can be accessed from the Start menu (Start\All Programs\Microsoft Windows SDK\Tools\UISpy).

Function arguments



Parameter

Variable Type

Description



$SourceElement

Object

The automation element containing the grid.



$Row

Integer

The row of the grid item to retrieve



$Column

Integer

The column of the grid item to retrieve.





Return parameters



Parameter

Variable Type

Description



$GridItem

Object

The automation element retrieved from the specified grid cell.





Usage Example:

$Container = Automation_GetElementByAutomationId($Window,"1");

$Element = Automation_GridGetItem($Container, 0, 0);

$value = Automation_ElementGetValue($Element);





Automation_SendKeys

Previous Top Next



* * *



Automation_SendKeys



Usage:

Automation_SendKeys($KeyStrokes);



Description:





Use the SendKeys method to send keystrokes to applications that have no automation interface. Most keyboard characters are represented by a single keystroke. Some keyboard characters are made up of combinations of keystrokes (CTRL+SHIFT+HOME, for example). To send a single keyboard character, send the character itself as the string argument. For example, to send the letter x, send the string argument "x".





You can use SendKeys to send more than one keystroke at a time. To do this, create a compound string argument that represents a sequence of keystrokes by appending each keystroke in the sequence to the one before it. For example, to send the keystrokes a, b, and c, you would send the string argument "abc". The SendKeys method uses some characters as modifiers of characters (instead of using their face-values). This set of special characters consists of parentheses, brackets, braces, and the:





· * plus sign "+",

· caret "^",

· percent sign "%",

· and tilde "~"





Send these characters by enclosing them within braces "{}". For example, to send the plus sign, send the string argument "{+}". Brackets "[ ]" have no special meaning when used with SendKeys, but you must enclose them within braces to accommodate applications that do give them a special meaning (for dynamic data exchange (DDE) for example).





· To send bracket characters, send the string argument "{[}" for the left bracket and "{]}" for the right one.

· To send brace characters, send the string argument "{{}" for the left brace and "{}}" for the right one.





Some keystrokes do not generate characters (such as ENTER and TAB). Some keystrokes represent actions (such as BACKSPACE and BREAK). To send these kinds of keystrokes, send the arguments shown in the following table:

Key

Argument



BACKSPACE

{BACKSPACE}, {BS}, or {BKSP}



BREAK

{BREAK}



CAPS LOCK

{CAPSLOCK}



DEL or DELETE

{DELETE} or {DEL}



DOWN ARROW

{DOWN}



END

{END}



ENTER

{ENTER} or ~



ESC

{ESC}



HELP

{HELP}



HOME

{HOME}



INS or INSERT

{INSERT} or {INS}



LEFT ARROW

{LEFT}



NUM LOCK

{NUMLOCK}



PAGE DOWN

{PGDN}



PAGE UP

{PGUP}



PRINT SCREEN

{PRTSC}



RIGHT ARROW

{RIGHT}



SCROLL LOCK

{SCROLLLOCK}



TAB

{TAB}



UP ARROW

{UP}



F1

{F1}



F2

{F2}



F3

{F3}



F4

{F4}



F5

{F5}



F6

{F6}



F7

{F7}



F8

{F8}



F9

{F9}



F10

{F10}



F11

{F11}



F12

{F12}



F13

{F13}



F14

{F14}



F15

{F15}



F16

{F16}





Key

Argument



SHIFT

+



CTRL

^



ALT

%





Function arguments



Parameter

Variable Type

Description



$KeyStrokes

String

The keystroke combinations to send to the application which currently has focus. Please see the information above for sending key-combinations or special non-alphanumeric key strokes.





Usage Example:

SendKeys("Every Good Boy Does Fine");





Automation_SendKeysWait

Previous Top Next



* * *



Automation_SendKeysWait



Usage:

Automation_SendKeysWait($KeyStrokes);



Description:





Use the SendKeys method to send keystrokes to applications that have no automation interface. Most keyboard characters are represented by a single keystroke. Some keyboard characters are made up of combinations of keystrokes (CTRL+SHIFT+HOME, for example). To send a single keyboard character, send the character itself as the string argument. For example, to send the letter x, send the string argument "x".





Note: This function differs from the SendKeys function since it waits for the window to process all events before continuing to the next script command. If you aren't sure which function to use, try 'SendKeysWait' first.





You can use SendKeys to send more than one keystroke at a time. To do this, create a compound string argument that represents a sequence of keystrokes by appending each keystroke in the sequence to the one before it. For example, to send the keystrokes a, b, and c, you would send the string argument "abc". The SendKeys method uses some characters as modifiers of characters (instead of using their face-values). This set of special characters consists of parentheses, brackets, braces, and the:





· * plus sign "+",

· caret "^",

· percent sign "%",

· and tilde "~"





Send these characters by enclosing them within braces "{}". For example, to send the plus sign, send the string argument "{+}". Brackets "[ ]" have no special meaning when used with SendKeys, but you must enclose them within braces to accommodate applications that do give them a special meaning (for dynamic data exchange (DDE) for example).





· To send bracket characters, send the string argument "{[}" for the left bracket and "{]}" for the right one.

· To send brace characters, send the string argument "{{}" for the left brace and "{}}" for the right one.





Some keystrokes do not generate characters (such as ENTER and TAB). Some keystrokes represent actions (such as BACKSPACE and BREAK). To send these kinds of keystrokes, send the arguments shown in the following table:

Some keystrokes do not generate characters (such as ENTER and TAB). Some keystrokes represent actions (such as BACKSPACE and BREAK). To send these kinds of keystrokes, send the arguments shown in the following table:

Key

Argument



BACKSPACE

{BACKSPACE}, {BS}, or {BKSP}



BREAK

{BREAK}



CAPS LOCK

{CAPSLOCK}



DEL or DELETE

{DELETE} or {DEL}



DOWN ARROW

{DOWN}



END

{END}



ENTER

{ENTER} or ~



ESC

{ESC}



HELP

{HELP}



HOME

{HOME}



INS or INSERT

{INSERT} or {INS}



LEFT ARROW

{LEFT}



NUM LOCK

{NUMLOCK}



PAGE DOWN

{PGDN}



PAGE UP

{PGUP}



PRINT SCREEN

{PRTSC}



RIGHT ARROW

{RIGHT}



SCROLL LOCK

{SCROLLLOCK}



TAB

{TAB}



UP ARROW

{UP}



F1

{F1}



F2

{F2}



F3

{F3}



F4

{F4}



F5

{F5}



F6

{F6}



F7

{F7}



F8

{F8}



F9

{F9}



F10

{F10}



F11

{F11}



F12

{F12}



F13

{F13}



F14

{F14}



F15

{F15}



F16

{F16}





Key

Argument



SHIFT

+



CTRL

^



ALT

%





Function arguments



Parameter

Variable Type

Description



$KeyStrokes

String

The keystroke combinations to send to the application which currently has focus. Please see the information above for sending key-combinations or special non-alphanumeric key strokes.





Usage Example:

SendKeysWait("Every Good Boy Does Fine");





Automation_SendMouseClick

Previous Top Next



* * *



Automation_SendMouseClick



Usage:

Automation_SendMouseClick($Xposition, $Yposition, $button);



Description:



This function will move the cursor to the specified coordinates on screen and perform a mouse click at that location.

The location is in pixels from the top left of the screen.

A button down followed by a button up event is simulated.

Function arguments



Parameter

Variable Type

Description



$Xposition

Integer

The horizontal position to move the cursor to. Counted in pixels from the left edge of the screen.



$Yposition

Integer

The vertical position to move the cursor to. Counted in pixels from the top edge of the screen.



$button

String

The mouse button to simulate the click of.

Value:

· "Left"

· "Middle"

· "Right"





Return parameters



Parameter

Variable Type

Description



None





Example(s):





// Click the left mouse button at location 100,200.

$Xposition = 100;

$Yposition = 200;

$button = "Left";

Automation_SendMouseClick($Xposition, $Yposition, $button);





InvokeViewWindowScript

Previous Top Next



* * *



BrowserInvokeScript



Usage:

$ReturnVariable = BrowserInvoke($FunctionName [, $Argument1, .., $ArgumentN]);





Description:

This function invokes a Javascript function within the current view window's document.





Note:

The Javascript function arguments are optional and this function can accept as many as needed.

Function arguments



Parameter

Variable Type

Description



$FunctionName

String

The name of the Javascript Function to invoke.



$Arguments

Object

[optional] A variable number of Javascript function arguments can be passed as needed to invoke.





Return parameters



Parameter

Variable Type

Description



$ReturnVariable

Object

The return variable from the Javascript function if one exists.





Example:

$str = BrowserInvokeScript("TestReturn");

BrowserInvokeScript("PopItUp", $str);





*** Javascript Functions Below ***





function TestReturn()

{

return 'Hello World';

}





function PopItUp(text)

{

alert(text);

}





RefreshViewWindow

Previous Top Next



* * *



BrowserRefresh



Usage:

BrowserRefresh();





Description:

This function refreshes the view window and reloads the current document and/or text.

Function arguments



Parameter

Variable Type

Description



None





Return parameters



Parameter

Variable Type

Description



None





Example:

BrowserRefresh();





UpdateViewWindowDocument

Previous Top Next



* * *



BrowserSetDocument



Usage:

BrowserSetDocument($Path);





Description:

This function sets the browser document to the html file at the specified path.





Function arguments



Parameter

Variable Type

Description



$Path

String

Path to the HTML file to set in the browser.





Return parameters



Parameter

Variable Type

Description



None





Example:

BrowserSetDocument("C:\\html\\window.html");





UpdateViewWindowText

Previous Top Next



* * *



BrowserSetText



Usage:

BrowserSetText($Text);





Description:

This function sets the browser text to the specified string.





Note: The string can contain HTML syntax to be rendered in the browser.





Function arguments



Parameter

Variable Type

Description



$Text

String

Text to display in the browser.





Return parameters



Parameter

Variable Type

Description



None





Example:

BrowserSetText("<b>Display this test string</b>");





BrowserUpdateTag

Previous Top Next



* * *



BrowserUpdateTag



Usage:

BrowserUpdateTag($TagId, $Contents [,$Action]);





Description:

This function finds the HTML Element within the current browser document with a matching tag id and either replaces or appends the content of the element with the specified text.





Notes:

· The contents string can contain HTML syntax to be rendered in the browser.

· The element to be replaced is found by the Id, not the tag. For example, the line <span id="changetag"> Change this text. </span> would be located by the Id "changetag" and not by the tag name "span".

Function Arguments



Parameter

Variable Type

Description



$TagId

String

The Id of the HTML element to update.



$Contents

String

The text to display within the element.



$Action

String

[OPTIONAL] Specifies whether the content should replace the existing element content or append to it. This argument is optional and set to REPLACE by default. Acceptable inputs are REPLACE or APPEND.





Return parameters



Parameter

Variable Type

Description



None.





Example:

BrowserSetDocument("C:\\JabilTest\\Resources\\BrowserTemplate.html");

Sleep(1);

BrowserUpdateTag("header", "this is a header");

BrowserUpdateTag("body", "put this in the body");

BrowserUpdateTag("optional1", "bold italics");

BrowserUpdateTag("optional1", "<br />append this", "APPEND");

BrowserUpdateTag("optional2", "italics");

BrowserUpdateTag("optional3", "small");

BrowserUpdateTag("test", "test");

Sleep(5);

End;





RequestCableLabsCertificate

Previous Top Next



* * *



RequestCableLabsCertificate

Usage:

($RequestedKey,$KeyStatus) = RequestCableLabsCertificate($ServerURL,$CustomerName,$ProductType,$TestOperator,$SerialNumber);

Description:

This function will request a Cable Labs end entity certificate for the supplied customer, product type, and serial number. In order to use this function, the Cable Labs certificate server administration utility must be used to authorize the given client to request certificates for a customer.Example:

($Key,$KeyStatus) = RequestCableLabsCertificate("http://gtsstgsvr/datamanagerservice/service.asmx","MyCompany","MyProduct",$TestOperator,$SerialNumber);





Function Arguments



Parameter

Variable Type

Description



$ServerURL

String

This is the URL of the server which is hosting the web service used to request certificates from the cable labs management server



$CustomerName

String

The name of the customer for whom you are requesting a certificate



$ProductType

String

The product type for which you are requesting a certificate



$TestOperator

String

The test operator whom you would like recorded as being the requestor of the certificate



$SerialNumber

String

The serial number of the product to assign to the requested certificate. Note: Once a certificate has been requested for a given customer, product style, and serial number, the same certificate will always be returned by the function.





Return Parameters



Parameter

Variable Type

Description



$key

String

The cable labs certificate requested. This certificate will be returned completely unencrypted in clear text



$keyStatus

String

The status string indicating if this key was newly assigned by this request, or if the key was previously assigned to the product in a past test run.





ChartPanel_AddNewPane

Previous Top Next



* * *



ChartPanel_AddNewPane



Usage:

ChartPanel_AddNewPane();



Description:





This function adds a new pane to the existing chart panel. Each pane is identified by a zero based index. Each pane can contain a single chart or plot of any type. The pane is automatically scaled and placed within the window based on the current size of the control.





Important Note: In order to use the Jabil Test Chart Panel Functionality, make sure that the current test cell extended panel mode is set to Charting Mode.

Function arguments



Parameter

Variable Type

Description



None





Return parameters



Parameter

Variable Type

Description



None





Usage Example:

ChartPanel_AddNewPane();





ChartPanel_ClearAllPanes

Previous Top Next



* * *



ChartPanel_ClearAllPanes



Usage:

ChartPanel_ClearAllPanes();



Description:





This function removes all existing panes from the chart panel window.





Important Note: In order to use the Jabil Test Chart Panel Functionality, make sure that the current test cell extended panel mode is set to Charting Mode.

Function arguments



Parameter

Variable Type

Description



None





Return parameters



Parameter

Variable Type

Description



None





Usage Example:

ChartPanel_AddNewPane();





ChartPanel_ClearAllSeriesOnPane

Previous Top Next



* * *



ChartPanel_ClearAllSeriesOnPane

Usage:

ChartPanel_ClearAllSeriesOnPane($PaneIndex);



Description:





This function removes all plotted series on a given pane on the graphing panel. If the current pane does not exist, the function will generate a failing test result.





Important Note: In order to use the Jabil Test Chart Panel Functionality, make sure that the current test cell extended panel mode is set to Charting Mode.

Function arguments



Parameter

Variable Type

Description



$PaneIndex

Integer

The zero based index of the pane for which to remove all trace and plot information.





Return parameters



Parameter

Variable Type

Description



None





Usage Example:

ChartPanel_ClearAllSeriesOnPane(0); // Clears all graph data on the first pane.





ChartPanel_Plot1DArray

Previous Top Next



* * *



ChartPanel_Plot1DArray



Usage:

ChartPanel_Plot1DArray($PaneIndex,$SeriesLabel,$Array,$Red,$Green,$Blue);



Description:





This function plots a 1 dimensional array on the specified graph pane. The series added to the graph is identified via the $SeriesLabel parameter. The user may also specify the color of the series drawn on the graph by specifying it's Red, Green, and Blue color components.





Important Note: In order to use the Jabil Test Chart Panel Functionality, make sure that the current test cell extended panel mode is set to Charting Mode.

Function arguments



Parameter

Variable Type

Description



$PaneIndex

Integer

The index of the pane on which to graph the array data.



$SeriesLabel

String

The series label which will be displayed in the legend of the graph pane



$Array

Array

The 1 dimensional array to plot on the graph object. Note this array must be an array of numerics such as integers, doubles, floats, etc.



$Red

Integer

The value of the red component for the plotted data. Valid values are 0 to 255.



$Green

Integer

The value of the green component for the plotted data. Valid values are 0 to 255.



$Blue

Integer

The value of the blue component for the plotted data. Valid values are 0 to 255.





Return parameters



Parameter

Variable Type

Description



None





Usage Example:

ChartPanel_Plot1DArray(0,"Power",$Array,255,0,0);





ChartPanel_Plot2DArray

Previous Top Next



* * *



ChartPanel_Plot2DArray



Usage:

ChartPanel_Plot2DArray($PaneIndex,$SeriesLabel,$Array,$Red,$Green,$Blue);



Description:

This function plots a 2 dimensional array on the specified graph pane. The series added to the graph is identified via the $SeriesLabel parameter. The user may also specify the color of the series drawn on the graph by specifying it's Red, Green, and Blue color components.





The first dimension of the 2 dimensional array is plotted as X values, and the second dimension will be plotted as the corresponding Y values.





Important Note: In order to use the Jabil Test Chart Panel Functionality, make sure that the current test cell extended panel mode is set to Charting Mode.

Function arguments



Parameter

Variable Type

Description



$PaneIndex

Integer

The index of the pane on which to graph the array data.



$SeriesLabel

String

The series label which will be displayed in the legend of the graph pane




$Array


Array

The 2 dimensional array to plot on the graph object. Note this array must be an array of numerics such as integers, doubles, floats, etc. The first dimension of the 2 dimensional array is plotted as X values, and the second dimension will be plotted as the corresponding Y values.



$Red

Integer

The value of the red component for the plotted data. Valid values are 0 to 255.



$Green

Integer

The value of the green component for the plotted data. Valid values are 0 to 255.



$Blue

Integer

The value of the blue component for the plotted data. Valid values are 0 to 255.





Return parameters



Parameter

Variable Type

Description



None





Usage Example:

ChartPanel_Plot2DArray(0, "Power", $Array, 255, 0, 0);





ChartPanel_Plot2DBarGraphFromTrace

Previous Top Next



* * *



ChartPanel_Plot2DBarGraphFromTrace



Usage:

ChartPanel_Plot2DBarGraphTrace($PaneIndex,$SeriesLabel,$Trace,$Red,$Green,$Blue);



Description:





This function plots a 2 dimensional bargraph on the specified graph pane. The series added to the graph is identified via the $SeriesLabel parameter. The user may also specify the color of the series drawn on the graph by specifying it's Red, Green, and Blue color components.

This function differs from the ChartPanel_Plot2DTrace function as each X/Y value in the Trace2D object is represented as a vertical bar at the X position specified, and the height is specified by the Y value.





Note: This function uses the new native Trace2D data type which has recently been added to the Jabil Test Core Library. Most older instrument libraries actually return their non-scalar measurement data as array data types, so you should use the corresponding ChartPanel_Plot1DArray or ChartPanel_Plot2DArray functions for these types of data objects.

The Trace2D data type is a convenience feature to simplify Jabil Test scripting since all necessary data regarding how the data should be plotted is contained in the data structure returned from the instrument library.





Going forward, all instrument driver functions which return an array of data that is intended for graphing such as spectrum analyzers, oscilloscopes, vector signal analyzers, etc should return the new Trace2D data type which is contained in the Jabil Test Core Library.





Important Note: In order to use the Jabil Test Chart Panel Functionality, make sure that the current test cell extended panel mode is set to Charting Mode.

Function arguments



Parameter

Variable Type

Description



$PaneIndex

Integer

The index of the pane on which to graph the array data.



$SeriesLabel

String

The series label which will be displayed in the legend of the graph pane



$Trace

Object (JabilTestCoreLibs.PlotWindow.PlotTrace2D)

The data in a trace object to be plotted on the graph. New instrument functions added to Jabil Test will return their data in a trace object which specifies the type of data that is contained within the trace, and how it should be formatted on the graph.



$Red

Integer

The value of the red component for the plotted data. Valid values are 0 to 255.



$Green

Integer

The value of the green component for the plotted data. Valid values are 0 to 255.



$Blue

Integer

The value of the blue component for the plotted data. Valid values are 0 to 255.





Return parameters



Parameter

Variable Type

Description



None





Usage Example:

ChartPanel_Plot2DBarGraphTrace(0,"Power",$Trace,255,0,0);





ChartPanel_PlotTrace

Previous Top Next



* * *



ChartPanel_Plot2DTrace



Usage:

ChartPanel_Plot2DTrace($PaneIndex,$SeriesLabel,$Trace,$Red,$Green,$Blue);



Description:





This function plots a 2 dimensional trace on the specified graph pane. The series added to the graph is identified via the $SeriesLabel parameter. The user may also specify the color of the series drawn on the graph by specifying it's Red, Green, and Blue color components.





Note: This function uses the new native Trace2D data type which has recently been added to the Jabil Test Core Library. Most older instrument libraries actually return their non-scalar measurement data as array data types, so you should use the corresponding ChartPanel_Plot1DArray or ChartPanel_Plot2DArray functions for these types of data objects.

The Trace2D data type is a convenience feature to simplify Jabil Test scripting since all necessary data regarding how the data should be plotted is contained in the data structure returned from the instrument library.





Going forward, all instrument driver functions which return an array of data that is intended for graphing such as spectrum analyzers, oscilloscopes, vector signal analyzers, etc should return the new Trace2D data type which is contained in the Jabil Test Core Library.





Important Note: In order to use the Jabil Test Chart Panel Functionality, make sure that the current test cell extended panel mode is set to Charting Mode.

Function arguments



Parameter

Variable Type

Description



$PaneIndex

Integer

The index of the pane on which to graph the array data.



$SeriesLabel

String

The series label which will be displayed in the legend of the graph pane



$Trace

Object (JabilTestCoreLibs.PlotWindow.PlotTrace2D)

The data in a trace object to be plotted on the graph. New instrument functions added to Jabil Test will return their data in a trace object which specifies the type of data that is contained within the trace, and how it should be formatted on the graph.



$Red

Integer

The value of the red component for the plotted data. Valid values are 0 to 255.



$Green

Integer

The value of the green component for the plotted data. Valid values are 0 to 255.



$Blue

Integer

The value of the blue component for the plotted data. Valid values are 0 to 255.





Return parameters



Parameter

Variable Type

Description



None





Usage Example:

ChartPanel_Plot2DTrace(0,"Power",$Trace,255,0,0);





ChartPanel_PlotXYArrays

Previous Top Next



* * *



ChartPanel_PlotXYArrays



Usage:

ChartPanel_PlotXYArrays($PaneIndex,$SeriesLabel,$XArray,$YArray,$Red,$Green,$Blue);



Description:





This function plots an array on the specified graph panel. The function takes one dimensional arrays of X coordinates and Y coordinates of the same length and plots the values together as points on the graph. The series added to the graph is identified via the $SeriesLabel parameter. The user may also specify the color of the series drawn on the graph by specifying it's Red, Green, and Blue color components.





The first one dimensional array is plotted as X values, and the second one dimensional array will be plotted as the corresponding Y values.





Important Note: In order to use the Jabil Test Chart Panel Functionality, make sure that the current test cell extended panel mode is set to Charting Mode.

Function arguments



Parameter

Variable Type

Description



$PaneIndex

Integer

The index of the pane on which to graph the array data.



$SeriesLabel

String

The series label which will be displayed in the legend of the graph pane



$XArray

Array

The one dimensional array to plot as X values on the graph object. Note this array must be an array of numerics such as integers, doubles, floats, etc.



$YArray

Array

The one dimensional array to plot as Y values on the graph object. Note this array must be an array of numerics such as integers, doubles, floats, etc.



$Red

Integer

The value of the red component for the plotted data. Valid values are 0 to 255.



$Green

Integer

The value of the green component for the plotted data. Valid values are 0 to 255.



$Blue

Integer

The value of the blue component for the plotted data. Valid values are 0 to 255.





Return parameters



Parameter

Variable Type

Description



None





Usage Example:

ChartPanel_PlotXYArrays(0,"Power",$XArray,$YArray,255,0,0);





ChartPanel_RefreshPanel

Previous Top Next



* * *



ChartPanel_RefreshPanel



Usage:

ChartPanel_RefreshPanel();



Description:





This function causes all panes on the current graphing window to be refreshed and redrawn. In the event that the data on a particular chart is outside of the current scale, the scale of each pane will also be recalculated.





Important Note: In order to use the Jabil Test Chart Panel Functionality, make sure that the current test cell extended panel mode is set to Charting Mode.

Function arguments



Parameter

Variable Type

Description



None





Return parameters



Parameter

Variable Type

Description



None





Usage Example:

ChartPanel_RefreshPanel();





ChartPanel_RemovePane

Previous Top Next



* * *



ChartPanel_RemovePane



Usage:

ChartPanel_RemovePane($PaneIndex);



Description:





This function removes the specified pane from the current charting window. Each pane is identified by a zero based index. Each pane can contain a single chart or plot of any type. The remaining panes on the charting window (if any) will automatically be rescaled and resized to fill the available area.





Important Note: In order to use the Jabil Test Chart Panel Functionality, make sure that the current test cell extended panel mode is set to Charting Mode.

Function arguments



Parameter

Variable Type

Description



$PaneIndex

Integer

The index for the pane to be removed from the window.





Return parameters



Parameter

Variable Type

Description



None





Usage Example:

ChartPanel_RemovePane($PaneIndex);





ChartPanel_SetAxisLabels

Previous Top Next



* * *



ChartPanel_SetAxisLabels

Usage:

ChartPanel_SetAxisLabels($PaneIndex,$XAxisLabel,$YAxisLabel);



Description:





This function sets the label of the X and Y axis on the graphing pane specified by the supplied index parameter. If the pane specified does not exist in the graphing window, then a failing test result will be returned.





If no data exists on the graph, the axis labels will not be displayed.





Important Note: In order to use the Jabil Test Chart Panel Functionality, make sure that the current test cell extended panel mode is set to Charting Mode.

Function arguments



Parameter

Variable Type

Description



$PaneIndex

Integer

The index for the pane to set the desired axis labels



$XAxisLabel

String

The label for the X Axis



$YAxisLabel

String

The label for the Y Axis





Return parameters



Parameter

Variable Type

Description



None





Usage Example:

ChartPanel_SetAxisLabels(0,"Time in seconds","Power in dBm");





ChartPanel_SetTitle

Previous Top Next



* * *



ChartPanel_SetTitle



Usage:

ChartPanel_SetTitle($PaneIndex,$Title);



Description:





This function sets the titled to be displayed for a given graph pane. If the graph pane does not exist, the function will generate a failing test result.





Important Note: In order to use the Jabil Test Chart Panel Functionality, make sure that the current test cell extended panel mode is set to Charting Mode.

Function arguments



Parameter

Variable Type

Description



$PaneIndex

Integer

The zero based index of the graph pane to be titled.



$Title

String

The desired title for the given graph pane.





Return parameters



Parameter

Variable Type

Description



None





Usage Example:

ChartPanel_SetTitle(0,"Power Vs. Time");





ChartPanel_SetXAxisRange

Previous Top Next



* * *



ChartPanel_SetXAxisRange

Usage:

ChartPanel_SetXAxisRange($PaneIndex, $XAxisMin, $XAxisMax);



Description:





This function sets the range of the X-Axis to the minimum and maximum specified.





Important Note: In order to use the Jabil Test Chart Panel Functionality, make sure that the current test cell extended panel mode is set to Charting Mode.

Function arguments



Parameter

Variable Type

Description



$PaneIndex

Integer

The index for the pane to set the desired axis labels



$XAxisMin

Float

The minimum value for the X Axis.



$XAxisMax

Float

The maximum value for the X Axis.





Return parameters



Parameter

Variable Type

Description



None





Usage Example:

ChartPanel_SetXAxisRange(0, -10, 110);





ChartPanel_SetYAxisRange

Previous Top Next



* * *



ChartPanel_SetYAxisRange

Usage:

ChartPanel_SetYAxisRange($PaneIndex, $YAxisMin, $YAxisMax);



Description:





This function sets the range of the Y-Axis to the minimum and maximum specified.





Important Note: In order to use the Jabil Test Chart Panel Functionality, make sure that the current test cell extended panel mode is set to Charting Mode.

Function arguments



Parameter

Variable Type

Description



$PaneIndex

Integer

The index for the pane to set the desired axis labels



$YAxisMin

Float

The minimum value for the Y Axis.



$YAxisMax

Float

The maximum value for the Y Axis.





Return parameters



Parameter

Variable Type

Description



None





Usage Example:

ChartPanel_SetYAxisRange(0, -10, 110);





Introduction To Charting Function Library

Previous Top Next



* * *



The Jabil Test Charting Panel function library allows using the Jabil Test extended panel mode to graph a variety of measurements or instrument data for display to the operator in real-time.

These functions are especially useful for instrumentation which doesn't include a user interface such as USB or PXI instrumentation.





The Jabil Test charting and graphing functions allow creating multiple graphs or charts of various types on the display and manipulating those charts via the functions supplied in the charting and graphing library.





A screenshot below illustrates using the Charting and Graphing functions to output measurement data from three different measurements taken on an oscilloscope as an example.





Each separate graph on the display is considered a Pane on the window. The window may contain an unlimited number of panes.



Each separate plot or curve on each graph is considered a Series and may be manipulated independently.





Each graph may be individually scaled, and also supports zoom, trace, and printing/export to image functions.





Plot2DTrace_GetLength

Previous Top Next



* * *



Plot2DTrace_GetLength

Usage:

($XLength,$YLength) = Plot2DTrace_GetLength($Trace);



Description:





This function takes a Jabil Test Plot2DTrace variable and returns the number elements stored in the X and Y value arrays of the 2D Plot Object.

This function is usually used for index limit testing, and in nearly all situations the number of X and Y values will be equal.

Function arguments



Parameter

Variable Type

Description



$Trace

Object (Plot2DTrace)

The Plot2DTrace returned from an instrument function.





Return parameters



Parameter

Variable Type

Description



$XLength

Integer

The number of X values contained in the array inside the Plot2DTrace object.



$YLength

Integer

The number of Y values contained in the array inside the Plot2DTrace object





Usage Example:

($XLength,$YLength) = Plot2DTrace_GetLength($Trace)





Plot2DTrace_GetValuesByIndex

Previous Top Next



* * *



Plot2DTrace_GetValuesByIndex

Usage:

($XValue,$YValue) = Plot2DTrace_GetValuesByIndex($Trace,$Index);



Description:





This function returns the X and Y values from the 2D Trace object at the specified index position. The total length of the 2D Trace can be determined by using the Plot2DTrace_GetLength function.

Function arguments



Parameter

Variable Type

Description



$Trace

Object (Plot2DTrace)

The Plot2DTrace returned from an instrument function.



$Index

Integer

The index of the trace to retrieve the X and Y values from...





Return parameters



Parameter

Variable Type

Description



$XValue

Float

The value of the X element array inside the plot at the specified index.



$YValue

Float

The value of the Y element array inside the plot at the specified index





Usage Example:

($XValue,$YValue) = Plot2DTrace_GetValue($Trace,150);

// Get the values at the 150th index of the plot array





Bluetooth_CloseSerialConnection

Previous Top Next



* * *



Bluetooth_CloseSerialConnection



Usage:

Bluetooth_CloseSerialConnection($Connection);



Description:

This function closes a bluetooth serial connection that was previously created using the Bluetooth_CreateSerialConnection function.



Notes:





This function requires the ThirtyTwoFeet .NET libraries (created by In The Hand Ltd.) to be installed on the system.





This collection of bluetooth functions are compatible with any bluetooth device which uses the Microsoft Bluetooth stack. This library is not compatible with functions using the WIDCOMM Bluetooth stack.





Function arguments



Parameter

Variable Type

Description



$Connection

Object

A bluetooth serial connection which was previously created using the Bluetooth_CreateSerialConnection function.





Return parameters



Parameter

Variable Type

Description



None





Example(s):

Bluetooth_CloseSerialConnection($Connection);





Bluetooth_CreateSerialConnection

Previous Top Next



* * *



Bluetooth_CreateSerialConnection



Usage:

$BTConnection = Bluetooth_CreateSerialConnection($BluetoothAddress);



Description:

This function creates a new bluetooth serial connection. In order to create a new serial connection with the bluetooth device, it must be in a discoverable state, or have previously been paired with the computer. If the device requires a secure bluetooth connection with a PIN, it first must be paired before creating a serial connection.



Notes:





This function requires the ThirtyTwoFeet .NET libraries (created by In The Hand Ltd.) to be installed on the system.





This collection of bluetooth functions are compatible with any bluetooth device which uses the Microsoft Bluetooth stack. This library is not compatible with functions using the WIDCOMM Bluetooth stack.





Function arguments



Parameter

Variable Type

Description



$BluetoothAddress

String

The bluetooth address of the discoverable device with which you would like to establish a connection. The address format is "aa:bb:cc:dd:ee:ff" or "aabbccddeeff".





Return parameters



Parameter

Variable Type

Description



BTConnection

Object

The bluetooth serial connection.





Example(s):

$BTConnection = Bluetooth_CreateSerialConnection("00:11:22:33:44:55:66");





Bluetooth_GetDiscoverableCount

Previous Top Next



* * *



Bluetooth_GetDiscoverableCount



Usage:

$DeviceCount = Bluetooth_GetDiscoverableCount();



Description:

· This function checks the list of bluetooth discoverable devices and returns the number of devices in the list.



Notes:





This function requires the ThirtyTwoFeet .NET libraries (created by In The Hand Ltd.) to be installed on the system.





This collection of bluetooth functions are compatible with any bluetooth device which uses the Microsoft Bluetooth stack. This library is not compatible with functions using the WIDCOMM Bluetooth stack.





Checking for discoverable devices will take a few seconds.





Function arguments



Parameter

Variable Type

Description



None





Return parameters



Parameter

Variable Type

Description



$DeviceCount

Integer

The number of discoverable bluetooth devices in the range of the computer.





Example(s):

$DeviceCount = Bluetooth_GetDiscoverableCount();





Bluetooth_GetDiscoverableDevices

Previous Top Next



* * *



Bluetooth_GetDiscoverableDevices



Usage:

$DeviceNames, $DeviceAddresses = Bluetooth_GetDiscoverableDevices();



Description:

· This function returns the names and addresses of the bluetooth discoverable devices within range of the computer.



Notes:





This function requires the ThirtyTwoFeet .NET libraries (created by In The Hand Ltd.) to be installed on the system.





This collection of bluetooth functions are compatible with any bluetooth device which uses the Microsoft Bluetooth stack. This library is not compatible with functions using the WIDCOMM Bluetooth stack.





Checking for discoverable devices will take a few seconds.





Function arguments



Parameter

Variable Type

Description



None





Return parameters



Parameter

Variable Type

Description



$DeviceNames

Array

The list of Bluetooth discoverable device names.



$DeviceAddresses

Array

The list of Bluetooth discoverable device addresses.





Example(s):

$DeviceNames, $DeviceAddresses = Bluetooth_GetDiscoverableDevices();





Bluetooth_GetRadioCount

Previous Top Next



* * *



Bluetooth_GetRadioCount



Usage:

$RadioCount = Bluetooth_GetRadioCount($BluetoothAddress);



Description:

This function iterates through all the supported bluetooth radios which are present on the host computer, and returns the number of available radios found. In the debug text, the details of each radio are listed, including:

· Radio ID

· Device Name

· Manufacturer

· Local Address

· Device Class

· Software Manufacturer



Notes:





This function requires the ThirtyTwoFeet .NET libraries (created by In The Hand Ltd.) to be installed on the system.





This collection of bluetooth functions are compatible with any bluetooth device which uses the Microsoft Bluetooth stack. This library is not compatible with functions using the WIDCOMM Bluetooth stack.





Function arguments



Parameter

Variable Type

Description



None





Return parameters



Parameter

Variable Type

Description



$RadioCount

Integer

The number of bluetooth radios installed on the local computer.





Example(s):

$RadioCount = Bluetooth_GetRadioCount();





Bluetooth_ListDiscoverableDevices

Previous Top Next



* * *



Bluetooth_ListDiscoverableDevices



Usage:

$DeviceCount = Bluetooth_ListDiscoverableDevices();



Description:

This function iterates through all the discoverable bluetooth devices in the range of the local test computer. In the debug text, the details of each discoverable device is listed, including:

· Device Name

· Device Address

· Boolean Value indicating if the device is authenticated



Notes:





This function requires the ThirtyTwoFeet .NET libraries (created by In The Hand Ltd.) to be installed on the system.





This collection of bluetooth functions are compatible with any bluetooth device which uses the Microsoft Bluetooth stack. This library is not compatible with functions using the WIDCOMM Bluetooth stack.





Function arguments



Parameter

Variable Type

Description



None





Return parameters



Parameter

Variable Type

Description



$DeviceCount

Integer

The number of discoverable bluetooth devices in the range of the computer.





Example(s):

$DeviceCount = Bluetooth_ListDiscoverableDevices();





Bluetooth_PairWithDevice

Previous Top Next



* * *



Bluetooth_PairWithDevice



Usage:

$Success = Bluetooth_PairWithDevice($BluetoothAddress,$SecurityPIN,$FailOnPairingFailure);



Description:

This function attempts to pair with a device using the bluetooth address and security pin supplied to the function. If the device doesn't require a PIN, you can specify a blank string. If the $FailOnPairingFailure is set to 'TRUE', it will automatically generate a test failure on pairing failure. Otherwise, the function returns a pass, but will set the return variable to 'FALSE' so that it can be ignored, or retried.



Tip: Some devices require a null character at the end of the security pin such as "1234\0".





Notes:





This function requires the ThirtyTwoFeet .NET libraries (created by In The Hand Ltd.) to be installed on the system.





This collection of bluetooth functions are compatible with any bluetooth device which uses the Microsoft Bluetooth stack. This library is not compatible with functions using the WIDCOMM Bluetooth stack.





Function arguments



Parameter

Variable Type

Description



$BluetoothAddress

String

The bluetooth address of the device with which to pair. The address should be supplied as a string in this format '00:11:22:33:44:55' or "001122334455".



$SecurityPIN

String

The security pin of the device, for example '7517'.



$FailOnPairingFailure

Boolean

If this parameter is set to 'TRUE', the function will return a test failure if the device doesn't pair successfully.





Return parameters



Parameter

Variable Type

Description



$Success

Boolean

Returns 'TRUE' if the device pairs successfully, otherwise returns 'FALSE'.





Example(s):

$Success = Bluetooth_PairWithDevice("00:11:22:aa:bb:cc", "1123", true);





Bluetooth_SerialReadHexString

Previous Top Next



* * *



Bluetooth_SerialReadHexString



Usage:

$hexString = Bluetooth_SerialReadHexString($btSerialHandle, $numBytes, $timeout);



Description:

This function reads a series of bytes from a Bluetooth device that has been connected to using Bluetooth_CreateSerialConnection and returns those bytes as a hex string.

If the number of bytes is not specified, the serial stream will be read to its end or until the timeout has elapsed.

If the timeout value is not specified, the serial stream will be read to its end or until the specified number of bytes has been read.





Notes:





This function requires the ThirtyTwoFeet .NET libraries (created by In The Hand Ltd.) to be installed on the system.





If both number of bytes and timeout are zero, it is possible to have an infinite wait time.





This collection of bluetooth functions are compatible with any bluetooth device which uses the Microsoft Bluetooth stack. This library is not compatible with functions using the WIDCOMM Bluetooth stack.





Function arguments



Parameter

Variable Type

Description



$btHandle

Object

The serial Bluetooth connection created with Bluetooth_CreateSerialConnection.



$numBytes

Integer

The number of bytes to read from the serial Bluetooth stream. Once the specified number of bytes has been read, the result will be returned. If set to 0, the stream will be read to its end or until the timeout is reached.



$timeout

Integer

The number of milliseconds to wait before returning any bytes that were read. If set to 0, the stream will be read to its end or until the specified number of bytes are received.





Return parameters



Parameter

Variable Type

Description



$hexString

String

A hexadecimal encoded string containing all of the bytes read.





Example(s):





// Connect to device at address aa:bb:cc:dd:ee:ff.

$btAddress = "aabbccddeeff";

$btHandle = Bluetooth_CreateSerialConnection($btAddress);

// Read serial bytes for 5 seconds.

$timeout = 5000;

$hexString = Bluetooth_SerialReadHexString($btHandle, 0, $timeout);





Bluetooth_SerialSendHexString

Previous Top Next



* * *



Bluetooth_SerialSendHexString



Usage:

Bluetooth_SerialSendHexString($btSerialHandle, $hexString, $timeout);



Description:

This function sends a series of bytes to a Bluetooth device that has been connected to using Bluetooth_CreateSerialConnection.

If the timeout value is not specified, the function will wait until all bytes have been sent.





Notes:





This function requires the ThirtyTwoFeet .NET libraries (created by In The Hand Ltd.) to be installed on the system.





If the timeout is zero, it is possible to have an infinite wait time.





This collection of bluetooth functions are compatible with any bluetooth device which uses the Microsoft Bluetooth stack. This library is not compatible with functions using the WIDCOMM Bluetooth stack.





Function arguments



Parameter

Variable Type

Description



$btHandle

Object

The serial Bluetooth connection created with Bluetooth_CreateSerialConnection.



$hexString

String

The bytes to send to the Bluetooth device represented as a hex string. (eg. aa bb 11 66)



$timeout

Integer

The number of milliseconds to wait for th Bluetooth device to receive all the bytes. If set to 0, the function will wait until all bytes are sent.





Return parameters



Parameter

Variable Type

Description



None.





Example(s):





// Connect to device at address aa:bb:cc:dd:ee:ff.

$btAddress = "aabbccddeeff";

$btHandle = Bluetooth_CreateSerialConnection($btAddress);

// Send "Hello" as ASCII and wait a maximum of 5 seconds.

$hexString = "48 65 6C 6C 6F";

$timeout = 5000;

$hexString = Bluetooth_SerialSendHexString($btHandle, $hexString, $timeout);





ExxoTest_CANActivate

Previous Top Next



* * *



ExxoTest_CANActivate



Usage:

ExxoTest_CANActivate($CardId,$BusId);

Description:



This function activates the specific CAN Bus on the ExxoTest USB Mux and prepares it for communication. This function must be run after the CAN operation and bus have been properly configured. Please see the Usage Example below for complete details.





Function arguments



Parameter

Variable Type

Description



$CardId

Integer

The ID of the ExxoTest device



$BusId

Integer

The Can Bus to be configured.





Return parameters



Parameter

Variable Type

Description



None





Usage Examples

ExxoTest_Init(0);

ExxoTest_ConfigureCANOperation(0,0,"FIFO",256);

ExxoTest_ConfigureCANBus(0,0,2,12,3,1,1);

ExxoTest_CANActivate(0,0);

ExxoTest_CANDeactivate(0,0);





Supported Instruments

All ExxoTest USB Communication Devices





ExxoTest_CANCreateMessage

Previous Top Next



* * *



ExxoTest_CANCreateMessage



Usage:

$CanMessage = ExxoTest_CANCreateMessage($MessageId,$MessageType,$ServiceType,$MessageData)

Description:



This function creates a new CAN message to prepare to send. This function only builds the message, and does not send it. For complete details on the CAN message structure and the definition of the message fields, please consult the CAN-BUS specification.





Function arguments



Parameter

Variable Type

Description



$MessageId

String

A hexadecimal string indicating the Message ID



$MessageType

String

The type of the message, allowable values are:

· "STANDARD"

· "EXTENDED"



$ServiceType

String

Specifies the service type of the message. The allowable values are:

· "TRANSMIT_DATA"

· "RECEIVE_DATA"

· "TRANSMIT_REMOTE"

· "RECEIVE_REMOTE"





$MessageData

String

A comma separated byte string containing the bytes to send in the CAN Message.





Return parameters



Parameter

Variable Type

Description



$CanMessage

Object

The newly constructed CAN Message which can be passed to the other ExxoTest CAN functions.





Usage Examples

$MyMessage = ExxoTest_CANCreateMessage("01","STANDARD","TRANSMIT_DATA","11,22,33,AA,BB,CC");





Supported Instruments

All ExxoTest USB Communication Devices





ExxoTest_CANDeactivate

Previous Top Next



* * *



ExxoTest_CANDeactivate



Usage:

ExxoTest_CANDeactivate($CardId,$BusId);

Description:



This function deactivates the specified CAN bus on the specified device. If the CAN bus was not previously activated, this function will return without failure. If the CAN bus is busy, this function will block until the CAN bus can be deactivated.





Function arguments



Parameter

Variable Type

Description



$CardId

Integer

The ID of the ExxoTest device



$BusId

Integer

The Can Bus to be configured.





Return parameters



Parameter

Variable Type

Description



None





Usage Examples

ExxoTest_CANDeactivate(0,0);





Supported Instruments

All ExxoTest USB Communication Devices





ExxoTest_CanGetNextMessage

Previous Top Next



* * *



ExxoTest_CANGetNextMessage



Usage:

($MesageFound,$QueueDepth,$MessageId,$MessageLength,$MessageData) = ExxoTest_CANGetNextMessage($CardId,$BusId);

Description:



This function will search the FIFO stack for the next available received CAN message, and return it to the scripting environment. If no CAN messages have been received, the $MessageFound parameter is set to false. Otherwise, the $MessageFound parameter is set to TRUE and the respective fields pertaining to the message are returned. The $QueueDepth return value specifies the number of CAN events that remain in the FIFO queue.

Function arguments



Parameter

Variable Type

Description



$CardId

Integer

The identifier for the CAN device.



$BusId

Integer

The identifier for the BUS that should be checked for received CAN messages.





Return parameters



Parameter

Variable Type

Description



$MessageFound

Boolean

Specifies whether or not a received message was found in the FIFO queue.



$QueueDepth

Integer

The number of CAN events that remain in the FIFO queue.



$MessageId

Integer

The message identifier for the CAN message



$MessageLength

Integer

The number of bytes in the CAN message.



$MessageData

String

The hexadecimal string representing the contents of the CAN message.





Usage Examples

($MessageFound,$QueueDepth,$MessageId,$MessageLength,$MessageData) = ExxoTest_CANGetNextMessage(0,2);

UpdateStatus($MessageFound);

UpdateStatus($QueueDepth);

UpdateStatus($MessageId);

UpdateStatus($MessageLength);

UpdateStatus($MessageData);





Supported Instruments

All ExxoTest USB Communication Devices





ExxoTest_CANSelectTransceiverHS

Previous Top Next



* * *



ExxoTest_CANSelectTransceiverHS



Usage:

ExxoTest_CANSelectTransceiverHS($CardId,$BusId,$HighSpeed);



Description:

This function selects the appropriate CAN transceiver type to use on a CAN bus that supports both High Speed and Low Speed CAN.





Function arguments



Parameter

Variable Type

Description



$CardId

Integer

The identifier of the device to be configured.



$BusId

Integer

The identifier of the CAN bus to be configured.



$HighSpeed

Boolean

Specifies whether or not the BUS should use the high speed CAN transceiver:

· "FALSE" = Low Speed CAN

· "TRUE" = High Speed CAN





Return parameters



Parameter

Variable Type

Description



None





Usage Examples

ExxoTest_CANSelectTransceiverHS(0,0,"FALSE"));





Supported Instruments

All ExxoTest USB Communication Devices





ExxoTest_CANSendMessage

Previous Top Next



* * *



ExxoTest_CANSendMessage



Usage:

ExxoTest_CANSendMessage($CardId,$BusID,$CanMessage);

Description:



This function sends a message created with the ExxoTest_CANCreateMessage function on the specified card and bus. If the message can't be sent successfully on the bus, the function generates a failure.

Function arguments



Parameter

Variable Type

Description



$CardId

Integer

The ID of the ExxoTest device



$BusId

Integer

The Can Bus on which to send the message.



$CanMessage

Object

A Can Message object created using the ExxoTest_CANSendMessage command.





Return parameters



Parameter

Variable Type

Description



None





Usage Examples

$CanMessage = ExxoTest_CANCreateMessage("01","STANDARD","TRANSMIT_DATA","11,22,33,AA,BB,CC");

ExxoTest_CANSendMessage(0,0,$CanMessage);





Supported Instruments

All ExxoTest USB Communication Devices





Below is a complete script demonstrating how to send and receive messages on a looped back CAN port:





UpdateStatus("ExxoTest");

call Init();

SetFinalizeFunction("Cleanup");





// CAN BUS 0

ExxoTest_ConfigureCANOperation(0,0,"FIFO",2047);

ExxoTest_ConfigureCANParameters(0,0,"STANDARD","0","0","TRUE","TRUE");

ExxoTest_ConfigureCANBus(0,0,64,16,8,1,1);

ExxoTest_CANSelectTransceiverHS(0,0,"FALSE");

ExxoTest_CANActivate(0,0);





// CAN BUS 2

ExxoTest_ConfigureCANOperation(0,2,"FIFO",2047);

ExxoTest_ConfigureCANParameters(0,2,"STANDARD","0","0","TRUE","TRUE");

ExxoTest_ConfigureCANBus(0,2,64,16,8,1,1);

ExxoTest_CANActivate(0,2);





$CanMessage = ExxoTest_CANCreateMessage("01","STANDARD","TRANSMIT_DATA","AA,BB,CC,DD,EE,FF,00,11");





ExxoTest_CANSendMessage(0,0,$CanMessage);

ExxoTest_CANSendMessage(0,0,$CanMessage);

ExxoTest_CANSendMessage(0,0,$CanMessage);

Sleep(1);

($MessageFound,$QueueDepth,$MessageId,$MessageLength,$MessageData) = ExxoTest_CANGetNextMessage(0,2);

UpdateStatus($MessageFound);

UpdateStatus($QueueDepth);

UpdateStatus($MessageId);

UpdateStatus($MessageLength);

UpdateStatus($MessageData);





ExxoTest_CANDeactivate(0,0);

ExxoTest_CANDeactivate(0,2);

End;





function Init()

{

ExxoTest_Init(0);

return;

}





function Cleanup()

{

ExxoTest_Close(0);

End;

}





ExxoTest_Close

Previous Top Next



* * *



ExxoTest_Close



Usage:

ExxoTest_Close($CardId);

Description:



This function closes the communcation with the ExxoTest communication MUX. This should be the final function called when the test script has finished using the device. This function should always be called anytime that the ExxoTest_Open function has been used to initiate communication with the instrument.

Function arguments



Parameter

Variable Type

Description



$CardId

Integer

The ID of the ExxoTest device





Return parameters



Parameter

Variable Type

Description



None





Usage Examples

ExxoTest_Close(0);





Supported Instruments

All ExxoTest USB Communication Devices





ExxoTest_ConfigureCANBus

Previous Top Next



* * *



ExxoTest_ConfigureCANBus



Usage:

ExxoTest_ConfigureCANBus($CardId,$BusId,$BRP,$TSEG1,TSEG2,$SJF,$SPL);



Description:

This function configures the CAN bus for communication. Please see the ExxoTest Manual for complete details over all the configuration parameters used to initialize the CAN communication bus.





Here are a few examples:





The baudrate is calculated as follows:

Baud rate = (8Mhz/(1+TSEG1+TSEG2)*BRP)





The sampling point is calculated as follows:

Point position = (1+TSEG1)(1+TSEG1+TSEG2)

Example: A 250 kbit/sec baudrate with an 81% sampling point BRP=2, TSEG1=12, TSEG2=3





Function arguments



Parameter

Variable Type

Description



$CardId

Integer

The identifier of the device to be configured.



$BusId

Integer

The identifier of the CAN bus to be configured.



$BRP

Integer

The Baud Rate Prescaler Value.



$TSEG1

Integer

The time before the sampling point. The allowable values are 3-16.



$TSEG2

Integer

The time after the sampling point. The allowable values are 2-8.



$SJF

Integer

The Maximum Value of the Resynchronization Jump. The allowable values are 1-4.



$SPL

Integer

The sampling mode (this should generally be set to 1)





Return parameters



Parameter

Variable Type

Description



None





Usage Examples

ExxoTest_ConfigureCANBus(0,0,2,12,3,1,1);





Supported Instruments

All ExxoTest USB Communication Devices





ExxoTest_ConfigureCANOperation

Previous Top Next



* * *



ExxoTest_ConfigureCANOperation



Usage:

ExxoTest_ConfigureCANOperation($CardId,$BusId,$OperationMode,$FifoSize);



Description:





This function determines the interface mode between the application and the card. It supports buffer and FIFO modes.





· FIFO Storage: In this mode, the events to be transferred to the application are stocked in a waiting list. These events are of the following types: end of transmition, reception, errors... When the application calls the GetEvent function, the first event (the oldest in time) is popped from the list. If the waiting list is full and an event takes place, then a bit indicating loss of event is placed on the last event.

· BUFFER Storage: In this mode, the events to be transferred to the application are in a unique buffer allocated during message configuration (regardless of its service). These events are either end of transmission or reception (not errors). When the application calls the CanGetEvent function, the message's communication handle allows the user to find the buffer to be read. This buffer contains the last event that has been received (the most recent in time). THe buffer is reset with each reading. If no event takes place btween two readings, the summary (EVENT_EMPTY) tells the application.





Additional Notes:

This function must be called in the correct sequence in order for it to function correctly. Please see the usage example below for details of the correct calling order and an example of using the function.

Function arguments



Parameter

Variable Type

Description



$CardId

Integer

The identifier of the device to be configured.



$BusId

Integer

The identifier of the CAN bus to be configured.



$OperationMode

String

The desired operation mode of the CAN interface. The allowable values are:

· "BUFFER"

· "FIFO"



$FifoSize

Integer

The desired size of the FIFO buffer.





Return parameters



Parameter

Variable Type

Description



None





Usage Examples

ExxoTest_Init(0);

ExxoTest_ConfigureCANOperation(0,0,"FIFO",256);

ExxoTest_ConfigureCANBus(0,0,2,12,3,1,1);

ExxoTest_CANActivate(0,0);

ExxoTest_CANDeactivate(0,0);





Supported Instruments

All ExxoTest USB Communication Devices





ExxoTest_ConfigureCANParameters

Previous Top Next



* * *



ExxoTest_ConfigureCANParameters



Usage:

ExxoTest_ConfigureCANParameters($CardId,$BusId,$CanType,$IdentityMask,$FilterMask,$EnableAcknowledge,$ReceiveAll);



Description:





This function allows configuration of additional operational parameters for the CAN bus.





Function arguments



Parameter

Variable Type

Description



$CardId

Integer

The identifier of the device to be configured.



$BusId

Integer

The identifier of the CAN bus to be configured.



$CanType

String

Specifies the CAN messaging mode. Allowable values are:

· "STANDARD" = Standard 11 Bit CAN Messaging

· "EXTENDED" = Extended 29 Bit CAN Messaging



$IdentityMask

String

Identifier of acceptance filter (0x000 by default) THe acceptance filter is situated in the reception buffer.

[0-0x7FF] = Standard Identifier

[0x1FFFFFFFF] = Extended Identifier



$FilterMask

String

The Hexidecimal string representing the mask acceptance filter. (0x000 is default).

[0-0x7FF] = Standard Identifier

[0x1FFFFFFF] = Extended Identifier



$EnableAcknowledgement

Boolean

Specifies whether or not the CAN receiver will send acknowledgement of received messages. The default setting is "TRUE". If this parameter is set to false, the CAN adapter is in "SPY" mode meaning it will only monitor, but not interact on the CAN Bus. In order to send messages, this parameter must be set to TRUE.



$ReceiveAll

Boolean

If this parameter is set to true, all messages received apart from those programmed are transferred to the application through the reception FIFO. If this parameter is set to FALSE, only those messages received which were programmed at reception are transferred to the application.





Return parameters



Parameter

Variable Type

Description



None





Usage Examples

ExxoTest_ConfigureCANParameters(0,2,"STANDARD","0","0","TRUE","TRUE");





ExxoTest_ConfigureLINBus

Previous Top Next



* * *



ExxoTest_ConfigureLINBus



Usage:

ExxoTest_ConfigureLINBus($CardId,$BusId,$BaudRate);



Description:

This function configures the LIN bus for communication. Please see the ExxoTest Manual for complete details over all the configuration parameters used to initialize the CAN communication bus.





Function arguments



Parameter

Variable Type

Description



$CardId

Integer

The identifier of the device to be configured.



$BusId

Integer

The identifier of the CAN bus to be configured.



$BaudRate

Integer

The selected Baud Rate. Allowable Values are:

· 2400

· 9600

· 19200





Return parameters



Parameter

Variable Type

Description



None





Usage Examples

ExxoTest_ConfigureLINBus(0,0,9600);





Supported Instruments

All ExxoTest USB Communication Devices





ExxoTest_ConfigureLINOperation

Previous Top Next



* * *



ExxoTest_ConfigureLINOperation



Usage:

ExxoTest_ConfigureLINOperation($CardId,$BusId,$OperationMode,$FifoSize);



Description:





This function determines the interface mode between the application and the card. It supports only FIFO mode.





· FIFO Storage: In this mode, the events to be transferred to the application are stocked in a waiting list. These events are of the following types: end of transmition, reception, errors... When the application calls the GetEvent function, the first event (the oldest in time) is popped from the list. If the waiting list is full and an event takes place, then a bit indicating loss of event is placed on the last event.

Additional Notes:

This function must be called in the correct sequence in order for it to function correctly. Please see the usage example below for details of the correct calling order and an example of using the function.

Function arguments



Parameter

Variable Type

Description



$CardId

Integer

The identifier of the device to be configured.



$BusId

Integer

The identifier of the LIN bus to be configured.



$OperationMode

String

The desired operation mode of the LIN interface. The allowable values are:

· "FIFO"



$FifoSize

Integer

The desired size of the FIFO buffer.





Return parameters



Parameter

Variable Type

Description



None





Usage Examples

ExxoTest_ConfigureLINOperation(0,0,"FIFO",2047);

ExxoTest_ConfigureLINBus(0,0,9600);

ExxoTest_LINActivate(0,0);

ExxoTest_LINDeactivate(0,0);





Supported Instruments

All ExxoTest USB Communication Devices





ExxoTest_Init

Previous Top Next



* * *



ExxoTest_Init



Usage:

ExxoTest_Init($CardId);



Description:





This function opens communcation with the device and prepares it for operation. This is the first function that should be called when using the ExxoTest communcation MUX.





Function arguments



Parameter

Variable Type

Description



$CardId

Integer

The identifier of the device to be configured.





Return parameters



Parameter

Variable Type

Description



None





Usage Examples

ExxoTest_Init(0);





Supported Instruments

All ExxoTest USB Communication Devices





ExxoTest_LINActivate

Previous Top Next



* * *



ExxoTest_LINActivate



Usage:

ExxoTest_LINActivate($CardId,$BusId);

Description:



This function activates the specific LIN Bus on the ExxoTest USB Mux and prepares it for communication. This function must be run after the LIN operation and bus have been properly configured. Please see the Usage Example below for complete details.





Function arguments



Parameter

Variable Type

Description



$CardId

Integer

The ID of the ExxoTest device



$BusId

Integer

The LIN Bus to be configured.





Return parameters



Parameter

Variable Type

Description



None





Usage Examples

ExxoTest_ConfigureLINOperation(0,0,"FIFO",2047);

ExxoTest_ConfigureLINBus(0,0,9600);

ExxoTest_LINActivate(0,0);

ExxoTest_LINDeactivate(0,0);

ExxoTest_LINCreateMessage("01","TRANSMIT_DATA","GEN_NO_ERROR","AA,BB,CC,DD,EE,FF,00,11");





Supported Instruments

All ExxoTest USB Communication Devices





ExxoTest_LINCreateMessage

Previous Top Next



* * *



ExxoTest_LINCreateMessage



Usage:

$LinMessage = ExxoTest_LINCreateMessage($MessageId,$ServiceType,$GenerateErrorOptions,$MessageData)

Description:



This function creates a new LIN message to prepare to send. This function only builds the message, and does not send it. For complete details on the LIN message structure and the definition of the message fields, please consult the LIN protocol specification.





Note: This function allows introducing errors into the LIN message to simulate bus failures or communication contention. See the parameters below for additional details.





Function arguments



Parameter

Variable Type

Description



$MessageId

String

A hexadecimal string indicating the Message ID



$ServiceType

String

The Type of LIN service. Allowable values are:

· "TRANSMIT_DATA" = Sends Data

· "REQUEST_IFR" = Request In-Frame Response

· "UPDATE_IFR" = Update In-Frame Response



$ServiceType

String

Specifies the service type of the message. The allowable values are:

· "TRANSMIT_DATA"

· "RECEIVE_DATA"

· "TRANSMIT_REMOTE"

· "RECEIVE_REMOTE"





$GenerateErrorOptions

String

Allows for creating errors in the LIN message. The allowable options are:

· "GEN_NO_ERROR" = No Errors

· "GEN_ERR_PO" = Parity Bit Error on P0 Bit

· "GEN_ERR_P1" = Parity Bit Error on P1 Bit

· "GEN_ERR_CRC" = Generate CRC Error

· "GEN_ERR_SYNCH" = Synchro byte Error (Sends 0xAA instead of 0x55)

· ""GEN_ERR_DATP1" = Extra Data Byte (0xFF) is added to the data field

· "GEN_ERR_DATP2" = Two Extra Data Bytes (OxFF) are added to the data field

· "GEN_ERR_DATL1" = 1 Data Byte is removed from the Data Field

· "GEN_ER_DATL2" = 2 Data Bytes are removed from the Data Field

· "GEN_FREE_IDENT" = Allows sending a message without a data length defined by the identifier. The identifier can take a value between 0 to 63 and data length can take a value between 0 and 8 bytes.





$MessageData

String

A comma separated byte string containing the bytes to send in the LIN Message.





Return parameters



Parameter

Variable Type

Description



$LinMessage

Object

The newly constructed LIN Message which can be passed to the other ExxoTest CAN functions.





Usage Examples

$MyMessage =ExxoTest_LINCreateMessage("01","TRANSMIT_DATA","GEN_NO_ERROR","AA,BB,CC,DD,EE,FF,00,11");





Supported Instruments

All ExxoTest USB Communication Devices





ExxoTest_LINDeactivate

Previous Top Next



* * *



ExxoTest_LINDeactivate



Usage:

ExxoTest_LINDeactivate($CardId,$BusId);

Description:



This function deactivates the specified LIN bus on the specified device. If the LIN bus was not previously activated, this function will return without failure. If the LIN bus is busy, this function will block until the LIN bus can be deactivated.





Function arguments



Parameter

Variable Type

Description



$CardId

Integer

The ID of the ExxoTest device



$BusId

Integer

The Can Bus to be configured.





Return parameters



Parameter

Variable Type

Description



None





Usage Examples

ExxoTest_LINDeactivate(0,0);





Supported Instruments

All ExxoTest USB Communication Devices





ExxoTest_LINGetNextMessage

Previous Top Next



* * *



ExxoTest_LINGetNextMessage



Usage:

($MesageFound,$QueueDepth,$MessageId,$MessageLength,$MessageData) = ExxoTest_LINGetNextMessage($CardId,$BusId);

Description:



This function will search the FIFO stack for the next available received LIN message, and return it to the scripting environment. If no LIN messages have been received, the $MessageFound parameter is set to false. Otherwise, the $MessageFound parameter is set to TRUE and the respective fields pertaining to the message are returned. The $QueueDepth return value specifies the number of LIN events that remain in the FIFO queue.

Function arguments



Parameter

Variable Type

Description



$CardId

Integer

The identifier for the LIN device.



$BusId

Integer

The identifier for the BUS that should be checked for received LIN messages.





Return parameters



Parameter

Variable Type

Description



$MessageFound

Boolean

Specifies whether or not a received message was found in the FIFO queue.



$QueueDepth

Integer

The number of LIN events that remain in the FIFO queue.



$MessageId

Integer

The message identifier for the LIN message



$MessageLength

Integer

The number of bytes in the LIN message.



$MessageData

String

The hexadecimal string representing the contents of the LIN message.





Usage Examples

($MessageFound,$QueueDepth,$MessageId,$MessageLength,$MessageData) = ExxoTest_LINGetNextMessage(0,2);

UpdateStatus($MessageFound);

UpdateStatus($QueueDepth);

UpdateStatus($MessageId);

UpdateStatus($MessageLength);

UpdateStatus($MessageData);





Supported Instruments

All ExxoTest USB Communication Devices





ExxoTest_LINSendMessage

Previous Top Next



* * *



ExxoTest_LINSendMessage



Usage:

ExxoTest_LINSendMessage($CardId,$BusID,$LinMessage);

Description:



This function sends a message created with the ExxoTest_LINCreateMessage function on the specified card and bus. If the message can't be sent successfully on the bus, the function generates a failure.

Function arguments



Parameter

Variable Type

Description



$CardId

Integer

The ID of the ExxoTest device



$BusId

Integer

The LIN Bus to send the message.



$CanMessage

Object

A LIN Message object created using the ExxoTest_LINSendMessage command.





Return parameters



Parameter

Variable Type

Description



None





Usage Examples

ExxoTest_LINSendMessage(0,0,$LinMessage);





Supported Instruments

All ExxoTest USB Communication Devices





Below is a complete script demonstrating how to send and receive messages on a looped back LIN port:





// Configue LIN 0

ExxoTest_ConfigureLINOperation(0,0,"FIFO",2047);

ExxoTest_ConfigureLINBus(0,0,9600);

ExxoTest_LINActivate(0,0);





// Configure LIN 1

ExxoTest_ConfigureLINOperation(0,1,"FIFO",2047);

ExxoTest_ConfigureLINBus(0,1,9600);

ExxoTest_LINActivate(0,1);





// Send the messages

$LinMessage =ExxoTest_LINCreateMessage("02","TRANSMIT_DATA","GEN_NO_ERROR","AA,BB,CC,DD,EE,FF,00,11");

ExxoTest_LINSendMessage(0,0,$LinMessage);

ExxoTest_LINSendMessage(0,0,$LinMessage);

Sleep(1);

($MessageFound,$QueueDepth,$MessageId,$MessageLength,$MessageData) = ExxoTest_LINGetNextMessage(0,1);





ExxoTest_LINDeactivate(0,0);

ExxoTest_LINDeactivate(0,1);





NI_CAN_Close

Previous Top Next



* * *



NI_CAN_Close



Usage:

NI_CAN_Close($canHandle);





Description:

This function will close communication with a CAN bus.





Remarks:

The bus to close communication with must have been opened using the function NI_CAN_Open.

Communication actions should be stopped before closing by using the function NI_CAN_Stop.

Function arguments



Parameter

Variable Type

Description



$canHandle

Object

A handle to a CAN bus interface that was opened using the function NI_CAN_Open.





Return parameters



Parameter

Variable Type

Description



None





Example(s):

// Open communication with CAN bus interface "CAN0".

$canName = "CAN0";

$baud = 1000000; // 1Mb/s





$canHandle = NI_CAN_Open($canName, $baud);





// Close communication with the CAN bus.





NI_CAN_Close($canHandle);





NI_CAN_GetAttributes

Previous Top Next



* * *



NI_CAN_GetAttributes



Usage:

($serialNumber, $baudRate, $filterMode, $filterMask) = NI_CAN_GetAttributes($canHandle);





Description:

This function will return some pertinent attributes (settings) from a CAN bus.





Remarks:

The bus to close communication with must have been opened using the function NI_CAN_Open.

The communication does not need to be started before reading the attributes.

Function arguments



Parameter

Variable Type

Description



$canHandle

Object

A handle to a CAN bus interface that was opened using the function NI_CAN_Open.





Return parameters



Parameter

Variable Type

Description



$serialNumber

String

The serial number reported by the CAN bus interface (in hexadecimal).



$baudRate

String

The baud rate reported by the CAN bus interface.



$filterMode

String

The filter mode reported by the CAN bus interface (in hexadecimal).



$filterMask

String

The filter mask reported by the CAN bus interface (in hexadecimal).





Example(s):

// Open communication with CAN bus interface "CAN0".

$canName = "CAN0";

$baud = 1000000; // 1Mb/s





$canHandle = NI_CAN_Open($canName, $baud);





// Read the attributes.

($serialNumber, $baudRate, $filterMode, $filterMask) = NI_CAN_GetAttributes($canHandle);





NI_CAN_GetHWInfo

Previous Top Next



* * *



NI_CAN_GetHWInfo



Usage:

($serialNumber, $cardSeries, $transceiver) = NI_CAN_GetHWInfo($cardIndex, $portIndex);





Description:

This function will return some hardware information from a CAN bus card.





Remarks:

The hardware to get information from does not need to be opened first.

Function arguments



Parameter

Variable Type

Description



$cardIndex

Integer

The index to the card in the system.



$portIndex

Integer

The index to the port to get information from in the system.





Return parameters



Parameter

Variable Type

Description



$serialNumber

String

The serial number reported by the CAN bus hardware (in hexadecimal).



$cardSeries

String

The card series reported by the CAN bus hardware.



$transciever

String

The transceiver reported by the CAN bus hardware (in hexadecimal).





Example(s):

// Get hardware information from card 1, port 1.

$card = 1;

$port = 1;





// Read the HW information.

($serialNumber, $cardSeries, $transceiver) = NI_CAN_GetHWInfo($card, $port);





NI_CAN_GetNumberInReadBuffer

Previous Top Next



* * *



NI_CAN_GetNumberInReadBuffer



Usage:

$numFrames = NI_CAN_GetNumberInReadBuffer($canHandle);





Description:

This function will return the number of unread frames in the incoming buffer.





Remarks:

The bus must have been opened using the function NI_CAN_Open.

The communication must have been started before reading the number of frames using the function NI_CAN_Start.

The unread frames can be cleared out of the buffer by reading them or by using the function NI_CAN_Reset.

Function arguments



Parameter

Variable Type

Description



$canHandle

Object

A handle to a CAN bus interface that was opened using the function NI_CAN_Open.





Return parameters



Parameter

Variable Type

Description



$numFrames

Integer

The number of unread frames in the incoming buffer.





Example(s):

// Open communication with CAN bus interface "CAN0".

$canName = "CAN0";

$baud = 1000000; // 1Mb/s





$canHandle = NI_CAN_Open($canName, $baud);





// Read the number of waiting frames.

$numFrames = NI_CAN_GetNumberInReadBuffer($canHandle);





NI_CAN_Open

Previous Top Next



* * *



NI_CAN_Open



Usage:

$canHandle = NI_CAN_Open($canBusName, $baudRate);





Description:

This function will open communication with a specified CAN bus interface and set the specified baud rate. The interface will also be set to not start automatically on power-up.





Remarks:

$canBusName must match the name of the CAN bus interface as listed National Instruments' Measurement and Automation Explorer (MAX).

Before reading or writing data, the interface must be started using the function NI_CAN_Start.

The baud rate can be changed later using the function NI_CAN_SetAttribute.

When communication is complete, use the function NI_CAN_Close.

Function arguments



Parameter

Variable Type

Description



$canBusName

String

The name of the CAN bus as listed in NI MAX.



$baudRate

Integer

The baud rate to set the interface to.





Return parameters



Parameter

Variable Type

Description



$canHandle

Object

A handle to the CAN bus interface for use in other NI-CAN functions.





Example(s):

// Open communication with CAN bus interface "CAN0".

$canName = "CAN0";

$baud = 1000000; // 1Mb/s





$canHandle = NI_CAN_Open($canName, $baud);





NI_CAN_ReadMultipleFrames

Previous Top Next



* * *



NI_CAN_ReadMultipleFrames



Usage:

($framesRead, $timeStamps, $arbIDs, $frameTypes, $dataLengths, $data64s) = NI_CAN_ReadMultipleFrames($canHandle, $numFrames, $byteOrder);





Description:

This function will return the specified number of frames from the incoming buffer.





Remarks:

The bus must have been opened using the function NI_CAN_Open.

The communication must have been started before reading the number of frames using the function NI_CAN_Start.

If the requested number of frames do not exist, the existing frames will be returned and the number of frames read will indicate the number of frames returned.

The arrays of data returned will all be the same length with the data for the first frame being in the first element of all of the arrays.

Function arguments



Parameter

Variable Type

Description



$canHandle

Object

A handle to a CAN bus interface that was opened using the function NI_CAN_Open.



$numFrames

Integer

The maximum number of frames to read from the incoming buffer.



$byteOrder

String

The incoming byte order. This adjusts for different systems sending order; whether it is Little Endian or Big Endian. Valid entries are:

· Normal (data returned in the order the bytes are received).

· Reversed (byte order reversed before being returned).





Return parameters



Parameter

Variable Type

Description



$framesRead

Integer

The number of frames returned from the incoming buffer.



$timeStamps

Array

An array containing all of the timestamps for the frames returned.



$arbIDs

Array

An array containing all of the arbitration IDs for the frames returned.



$frameTypes

Array

An array containing all of the frame types for the frames returned.



$dataLengths

Array

An array containing all of the data lengths for the frames returned.



$data64s

Array

An array containing the 64 bit data for the frames returned.





Example(s):

// Open communication with CAN bus interface "CAN0".

$canName = "CAN0";

$baud = 1000000; // 1Mb/s





$canHandle = NI_CAN_Open($canName, $baud);





// Start the interface.

NI_CAN_Start($canHandle);





// Read the number of waiting frames.

$numFrames = NI_CAN_GetNumberInReadBuffer($canHandle);





// Read all of the waiting frames with Little-Endian data.

$order = "Reversed";

($framesRead, $timeStamps, $arbIDs, $frameTypes, $dataLengths, $data64s) = NI_CAN_ReadMultipleFrames($canHandle, $numFrames, $order);





NI_CAN_ReadSingleFrame

Previous Top Next



* * *



NI_CAN_ReadSingleFrame



Usage:

($timeStamp, $arbID, $frameType, $dataLength, $data64, $data7) = NI_CAN_ReadSingleFrame($canHandle, $byteOrder);





Description:

This function will return a single frame from the incoming buffer.





Remarks:

The bus must have been opened using the function NI_CAN_Open.

The communication must have been started before reading the number of frames using the function NI_CAN_Start.

Function arguments



Parameter

Variable Type

Description



$canHandle

Object

A handle to a CAN bus interface that was opened using the function NI_CAN_Open.



$byteOrder

String

The incoming byte order. This adjusts for different systems sending order; whether it is Little Endian or Big Endian. Valid entries are:

· Normal (data returned in the order the bytes are received).

· Reversed (byte order reversed before being returned).





Return parameters



Parameter

Variable Type

Description



$timeStamp

String

The timestamp for the read frame in hexadecimal.



$arbID

String

The arbitration ID for the read frame in hexadecimal.



$frameType

String

The frame type for the read frame in hexadecimal.



$dataLength

Integer

The number of data byte in the read frame.



$data64

String

The 64 bit data in the read frame in hexadecimal.



$data7

String

The 7 bit data in the read frame in hexadecimal.





Example(s):

// Open communication with CAN bus interface "CAN0".

$canName = "CAN0";

$baud = 1000000; // 1Mb/s





$canHandle = NI_CAN_Open($canName, $baud);





// Start the interface.

NI_CAN_Start($canHandle);





// Read one frame with Little Endian data.

$order = "Reversed";

($timeStamp, $arbID, $frameType, $dataLength, $data64, $data7) = NI_CAN_ReadSingleFrame($canHandle, $order);





NI_CAN_Reset

Previous Top Next



* * *



NI_CAN_Reset



Usage:

NI_CAN_Reset($canHandle);





Description:

This function will clear the incoming buffer of a CAN bus and reset the current pointer to the start of the buffer.





Remarks:

The bus to reset communication with must have been opened using the function NI_CAN_Open.

Function arguments



Parameter

Variable Type

Description



$canHandle

Object

A handle to a CAN bus interface that was opened using the function NI_CAN_Open.





Return parameters



Parameter

Variable Type

Description



None





Example(s):

// Open communication with CAN bus interface "CAN0".

$canName = "CAN0";

$baud = 1000000; // 1Mb/s





$canHandle = NI_CAN_Open($canName, $baud);





// Reset communication with the CAN bus.





NI_CAN_Reset($canHandle);





NI_CAN_SetAttribute

Previous Top Next



* * *



NI_CAN_SetAttribute



Usage:

NI_CAN_Attribute($canHandle, $attribName, $attribValue);





Description:

This function will set an attribute on one CAN bus interface.





Remarks:

The bus to set the attribute on must have been opened using the function NI_CAN_Open.

Communication actions should be stopped before closing by using the function NI_CAN_Stop.

Function arguments



Parameter

Variable Type

Description



$canHandle

Object

A handle to a CAN bus interface that was opened using the function NI_CAN_Open.



$attribName

String

The name of the attribute to change. Must be one of:

· Single Shot

· Filter Mode

· Filter Mask

· Baud Rate



$attribValue

String

The value to set the attribute to.





Return parameters



Parameter

Variable Type

Description



None





Example(s):

// Open communication with CAN bus interface "CAN0".

$canName = "CAN0";

$baud = 1000000; // 1Mb/s





$canHandle = NI_CAN_Open($canName, $baud);





// Set the Filter Mask.

$attrib = "Filter Mask";

$value = "FFFFFFFE";





NI_CAN_SetAttribute($canHandle, $attrib, $value);





NI_CAN_Start

Previous Top Next



* * *



NI_CAN_Start



Usage:

NI_CAN_Start($canHandle);





Description:

This function will start action, including frame acquisition, on a CAN bus.





Remarks:

The bus to close communication with must have been opened using the function NI_CAN_Open.

To stop the actions use the function NI_CAN_Stop.

Function arguments



Parameter

Variable Type

Description



$canHandle

Object

A handle to a CAN bus interface that was opened using the function NI_CAN_Open.





Return parameters



Parameter

Variable Type

Description



None





Example(s):

// Open communication with CAN bus interface "CAN0".

$canName = "CAN0";

$baud = 1000000; // 1Mb/s





$canHandle = NI_CAN_Open($canName, $baud);





// Start the action on the CAN bus.





NI_CAN_Start($canHandle);





NI_CAN_Stop

Previous Top Next



* * *



NI_CAN_Stop



Usage:

NI_CAN_Stop($canHandle);





Description:

This function will stop action, including frame acquisition, on a CAN bus.





Remarks:

The bus to close communication with must have been opened using the function NI_CAN_Open.

The CAN bus must already have been started using the function NI_CAN_Start.

Function arguments



Parameter

Variable Type

Description



$canHandle

Object

A handle to a CAN bus interface that was opened using the function NI_CAN_Open.





Return parameters



Parameter

Variable Type

Description



None





Example(s):

// Open communication with CAN bus interface "CAN0".

$canName = "CAN0";

$baud = 1000000; // 1Mb/s





$canHandle = NI_CAN_Open($canName, $baud);





// Start the action on the CAN bus.

NI_CAN_Start($canHandle);





// Stop the action on the CAN bus.





NI_CAN_Stop($canHandle);





NI_CAN_WriteMultipleFrames

Previous Top Next



* * *



NI_CAN_WriteMultipleFrames



Usage:

$numberWritten = NI_CAN_WriteMultipleFrames($canHandle, $destination, $dataToWrite);





Description:

This function will write a number of frames to the CAN bus.





Remarks:

The bus to close communication with must have been opened using the function NI_CAN_Open.

To CAN bus actions must have been started using the function NI_CAN_Start.

The data to send must be in a array that is a multiple of 8 in length (each frame sent will contain 8 bytes of data).

Function arguments



Parameter

Variable Type

Description



$canHandle

Object

A handle to a CAN bus interface that was opened using the function NI_CAN_Open.



$destination

Integer

The ID of the destination node to send the data to.



$dataToWrite

Array

An array of bytes containing the data to send to the destination node. This array must be a multiple of 8 bytes long.





Return parameters



Parameter

Variable Type

Description



$numberWritter

Integer

The number of frames that were written.





Example(s):

// Open communication with CAN bus interface "CAN0".

$canName = "CAN0";

$baud = 1000000; // 1Mb/s





$canHandle = NI_CAN_Open($canName, $baud);





// Start the action on the CAN bus.

NI_CAN_Start($canHandle);





// Assuming the data is stored in an array called $data.

// Send to destination node 6.

$dest = 6;





$numFrames = NI_CAN_WriteMultipleFrames($canHandle, $dest, $data);





NI_CAN_WriteSingleFrame

Previous Top Next



* * *



NI_CAN_WriteSingleFrame



Usage:

NI_CAN_Frame($canHandle, $destination, $dataToWrite);





Description:

This function will write a single frame to the CAN bus.





Remarks:

The bus to close communication with must have been opened using the function NI_CAN_Open.

To CAN bus actions must have been started using the function NI_CAN_Start.

The data to send must be in a array that is 8 bytes in length.

Function arguments



Parameter

Variable Type

Description



$canHandle

Object

A handle to a CAN bus interface that was opened using the function NI_CAN_Open.



$destination

Integer

The ID of the destination node to send the data to.



$dataToWrite

Array

An array of bytes containing the data to send to the destination node. This array must be 8 bytes long.





Return parameters



Parameter

Variable Type

Description



None





Example(s):

// Open communication with CAN bus interface "CAN0".

$canName = "CAN0";

$baud = 1000000; // 1Mb/s





$canHandle = NI_CAN_Open($canName, $baud);





// Start the action on the CAN bus.

NI_CAN_Start($canHandle);





// Assuming the data is stored in an array called $data.

// Send to destination node 6.

$dest = 6;





$numFrames = NI_CAN_WriteSingleFrame($canHandle, $dest, $data);





CAN_Close

Previous Top Next



* * *



CAN_Close



Usage:

CAN_Close();





Description:

This function will close communication with a Phytec PCAN-USB adapter.





Remarks:

This function will always return a passing result. Even if the PCAN adapter was never opened with the CAN_Init function, or is disconnected from the system.

Function arguments



Parameter

Variable Type

Description



None





Return parameters



Parameter

Variable Type

Description



None





Example(s):

// Open communication with CAN bus interface.

$canBaud = "CAN_BAUD_100K";

$messType = "CAN_INIT_TYPE_EX";





CAN_Init($canBaud, $messType);





// Close the interface.

CAN_Close();





CAN_Init

Previous Top Next



* * *



CAN_Init



Usage:

CAN_Init($baudRate, $messageType);





Description:

This function will open communication with a Phytec PCAN-USB adapter.





Remarks:

If the PCAN-USB interface can not be initialized, a Fail result is returned.

Function arguments



Parameter

Variable Type

Description



$baudRate

String

The baud rate to initialize the adapter to. Valid values are:

· CAN_BAUD_1M

· CAN_BAUD_500K

· CAN_BAUD_250K

· CAN_BAUD_125K

· CAN_BAUD_100K

· CAN_BAUD_50K



$messageType

String

The type of messages to support (either standard or extended frames). Valid values are:

· CAN_INIT_TYPE_EX

· CAN_INIT_TYPE_ST





Return parameters



Parameter

Variable Type

Description



None





Example(s):

// Open communication with CAN bus interface.

$canBaud = "CAN_BAUD_100K";

$messType = "CAN_INIT_TYPE_EX";





CAN_Init($canBaud, $messType);





CAN_Read

Previous Top Next



* * *



CAN_Read



Usage:

($msgId, $msgType, $msgLength, $msgData) = CAN_Read();





Description:

This function will return the next available message from the PCAN-USB CAN bus.





Remarks:

Communication must have been opened with the CAN_Init function.

CAN bus messages are stored in a FIFO buffer and accumulate until read.

If no message exists in the buffer, the function will return "NO MESSAGE" in $msgData.

Function arguments



Parameter

Variable Type

Description



None





Return parameters



Parameter

Variable Type

Description



$msgId

String

A hexadecimal string representing the ID of the CAN message sender. Any CAN node which has its filter set up appropriately will receive this message.



$msgType

Integer

An integer representing the type of message received. The types of messages that can be received are:

· 0 = MSGTYPE_STANDARD

· 1 = MSGTYPE_RTR

· 2 = MSGTYPE_EXTENDED

· 128 = MSGTYPE_STATUS



$msgLength

Integer

The length of the CAN message in bytes. Valid range is 0 to 8.



$msgData

String

A hexidecimal string representing the contents of the CAN message. These bytes are transmitted in big endian order, meaning that the most significant byte will be first in the string. In the event that no message exists to be Read, this return value will contain "No Message".





Example(s):

// Open communication with CAN bus interface.

$canBaud = "CAN_BAUD_100K";

$messType = "CAN_INIT_TYPE_EX";





CAN_Init($canBaud, $messType);





// Wait a second for a messages to come in.

Sleep(1);





// Read one message from the buffer.

($msgId, $msgType, $msgLength, $msgData) = CAN_Read();





// Close the interface.

CAN_Close();





CAN_Send

Previous Top Next



* * *



CAN_Send



Usage:

CAN_Send($msgId, $msgType, $msgLength, $msgData);





Description:

This function sends the CAN message specified in the function arguments out on the CAN Bus.





Remarks:

Communication must have been opened with the CAN_Init function.

This function returns a PASS result if the message could be placed on the BUS successfully. In the event that a BUSOFF or BUSHEAVY error occurs, the function returns a FAIL result.

Function arguments



Parameter

Variable Type

Description



$msgId

String

A hexadecimal string representing the ID of the CAN message recipient. Any CAN node which has its filter set up appropriately will receive this message.



$msgType

Integer

An integer representing the type of message to send. The types of messages that can be sent are:

· 0 = MSGTYPE_STANDARD

· 1 = MSGTYPE_RTR

· 2 = MSGTYPE_EXTENDED

· 128 = MSGTYPE_STATUS



$msgLength

Integer

The length of the CAN message in bytes. Valid range is 0 to 8.



$msgData

String

A hexidecimal string representing the contents of the CAN message. These bytes are transmitted in little endian order, meaning that the most signficant byte should be placed last in the string. If the number of bytes in the $msgData parameter is longer than the message length specified in the $msgLength parameter, the extra bytes will be ignored which will cause an error since the most significant byte will be discarded.





Return parameters



Parameter

Variable Type

Description



None





Example(s):

// Open communication with CAN bus interface.

$canBaud = "CAN_BAUD_100K";

$messType = "CAN_INIT_TYPE_EX";





CAN_Init($canBaud, $messType);





// Send one message.

$msgId = 31;

$msgType = 2;

$msgData = "F8E7D6C5B4A39281";

$messStrLen = StringLength($msgData);

$msgLength = $messStrLen / 2; // 2 characters per byte.

CAN_Send($msgId, $msgType, $msgLength, $msgData);





// Close the interface.

CAN_Close();





CAN_Status

Previous Top Next



* * *



CAN_Status



Usage:

$returnValue = CAN_Status();





Description:

This function will query the PCAN-USB interface for its current status.





Remarks:

This function will always return a passing result. Even if the PCAN adapter was never opened with the CAN_Init function, or is disconnected from the system.

Function arguments



Parameter

Variable Type

Description



None





Return parameters



Parameter

Variable Type

Description



$returnValue

Integer

The numeric value returned from the status function provided in the PCAN_USB API. The definitions of these values (there are several) can be found in the help file that's installed along with the 'PCAN Light' developer kit.





Example(s):

// Open communication with CAN bus interface.

$canBaud = "CAN_BAUD_100K";

$messType = "CAN_INIT_TYPE_EX";





CAN_Init($canBaud, $messType);





// Get the CAN but status.

$status = CAN_Status();





// Close the interface.

CAN_Close();





SoftingCAN_Close

Previous Top Next



* * *



SoftingCAN_Close



Usage:

SoftingCAN_Close($canHandle);



Description:

This function will close communications on the specified CAN bus.





Remarks:

Uses the Softing CANbus drivers. Tested using version 5.17.015.

The CAN bus interface must have been opened using the SoftingCAN_Init function.

Function arguments



Parameter

Variable Type

Description



$canHandle

Object

The handle to the CAN bus to close.





Return parameters



Parameter

Variable Type

Description



None





Example(s):

// Open communication with a CANpro USB adapter.

$canName = "CANpro USB_1";

$baud = "1M";

$canHandle = SoftingCAN_Init($canName, $baud);





// Close communication.

SoftingCAN_Close($canHandle);





SoftingCAN_GetAllCanChannels

Previous Top Next



* * *



SoftingCAN_GetAllCanChannels



Usage:

($numChans, $isOpens, $chanNames, $devTypes, $FirmIds, $chanNums, $serialNums) = SoftingCAN_GetAllCanChannels($canHandle);





Description:

This function will return a number of arrays with data about all of the CAN channels on the computer system.





Remarks:

Uses the Softing CANbus drivers. Tested using version 5.17.015.

The CAN bus interface must have been opened using the SoftingCAN_Init function.

If multiple CAN but interfaces are open, it does not matter which one is used - they will all return the same data.

Each of the arrays of data will be the same length. That length will be equal to $numChans.

If one physical device contains multiple CAN channels, the data that refers to the hardware (device type, firmware ID and serial number) will be the same for each channel.

Function arguments



Parameter

Variable Type

Description



$canHandle

Object

The handle to one CAN bus.





Return parameters



Parameter

Variable Type

Description



$numChans

Integer

The number of CAN bus channels on the system.



$isOpens

Boolean Array

Whether each of the channels is open.



$chanNames

String Array

The name of each of the channels.



$devTypes

String Array

The device type for each of the channels.



$FirmIds

Integer Array

The Firmware ID for each of the channels.



$chanNums

Integer Array

The physical channel number for each of the channels.



$serialNums

Integer Array

The serial number of each of the channels.





Example(s):

// Open communication with a CANpro USB adapter.

$canName = "CANpro USB_1";

$baud = "1M";

$canHandle = SoftingCAN_Init($canName, $baud);





// Get information on the channels.

($numChans, $isOpens, $chanNames, $devTypes, $FirmIds, $chanNums, $serialNums) = SoftingCAN_GetAllCanChannels($canHandle);





// Print out the channel information.

$outStr = "Number of CAN channels = " + $numC;

UpdateStatus($outStr);

$loopCount = 0;

while ($loopCount < $numC)

{

$chanNum = $loopCount + 1;

$outStr = "\r\nChannel number:\t" + $chanNum;

UpdateStatus($outStr);

$arrVal = Array1DGetValue($ioA, $loopCount);

$outStr = "\tChannel Is Open:\t" + $arrVal;

UpdateStatus($outStr);

$arrVal = Array1DGetValue($cnA, $loopCount);

$outStr = "\tChannel Name:\t" + $arrVal;

UpdateStatus($outStr);

$arrVal = Array1DGetValue($dtA, $loopCount);

$outStr = "\tDevice Type:\t" + $arrVal;

UpdateStatus($outStr);

$arrVal = Array1DGetValue($fiA, $loopCount);

$outStr = "\tFirmware ID:\t" + $arrVal;

UpdateStatus($outStr);

$arrVal = Array1DGetValue($cNumsA, $loopCount);

$outStr = "\tPhysical Channel Number:\t" + $arrVal;

UpdateStatus($outStr);

$arrVal = Array1DGetValue($snA, $loopCount);

$outStr = "\tSerial Number:\t" + $arrVal;

UpdateStatus($outStr);

$loopCount = $loopCount + 1;

}





// Close communication.

SoftingCAN_Close($canHandle);





SoftingCAN_GetNumberInReadFifo

Previous Top Next



* * *



SoftingCAN_GetNumberInReadFifo



Usage:

$number = SoftingCAN_GetNumberInReadFifo($canHandle);





Description:

This function will return the number of unread messages in the incoming message FIFO.





Remarks:

Uses the Softing CANbus drivers. Tested using version 5.17.015.

The CAN bus interface must have been opened using the SoftingCAN_Init function.

Function arguments



Parameter

Variable Type

Description



$canHandle

Object

The handle to the CAN bus.





Return parameters



Parameter

Variable Type

Description



$number

Integer

The number of unread messages in the incoming message FIFO.





Example(s):

// Open communication with a CANpro USB adapter.

$canName = "CANpro USB_1";

$baud = "1M";

$canHandle = SoftingCAN_Init($canName, $baud);





// Get the number of messages and print on the Debug tab.

$numMess = SoftingCAN_GetNumberInReadFifo($canHandle);





$outStr = "Number of unread messages = " + $numMess;

UpdateStatus($outStr);





// Close communication.

SoftingCAN_Close($canHandle);





SoftingCAN_Init

Previous Top Next



* * *



SoftingCAN_Init



Usage:

$canHandle = SoftingCAN_Init($canBusName, $baudRate, $stdCode, $stdMask, $extCode, $extMask);





Description:

This function will open communications on the specified CAN bus, set the baud rate and the acceptance codes and acceptance masks for incoming message IDs. Message acquisition will begin immediately after this function runs.





Remarks:

Uses the Softing CANbus drivers. Tested using version 5.17.015.

Some CANbus adapters have interfaces to two different CAN buses. Both can be opened using their CAN bus names.

The CAN bus names can be found (and set) using the Softing CAN Interface Manager (SCIM) program.

Acceptance codes and acceptance masks can be integers or hex strings. Hex strings can include spaces to make them easier to read. For example "0xFFFFFFFF" = "0xFF FF FF FF" = "0xFFFF FFFF".

Acceptance codes and masks work together to determine which message IDs are passed through from the CANbus to the buffer. Bitwise - any 1 in the mask means that the corresponding bit in the message ID must exactly match that bit in the acceptance code. A 0 in the mask means that bit can be any state. See the Softing CAN Layer 2 manual for more information on codes and masks.

Function arguments



Parameter

Variable Type

Description



$canBusName

String

The name of the CAN bus to open communications with.



$baudRate

String

The baud rate to set the CAN bus adapter to use. Valid entries are:

· 1M

· 800k

· 500k

· 250k

· 125k

· 100k

· 10k



$stdCode

String

Integer

The acceptance code for standard frames.

If this is a hexadecimal string, it must start with "0x" and valid numbers are "0x0" to "0x1FF". Setting to "0xFFFFFFFF" will force the use of the setting from the SCIM program.

If this is an integer, valid numbers are 0 to 2047. Setting to 4,294,967,295 will force the use of the setting from the SCIM program.



$stdMask

String

Integer

The acceptance mask for standard frames.

If this is a hexadecimal string, it must start with "0x" and valid numbers are "0x0" to "0x1FF". Setting to "0xFFFFFFFF" will force the use of the setting from the SCIM program.

If this is an integer, valid numbers are 0 to 2047. Setting to 4,294,967,295 will force the use of the setting from the SCIM program.



$extCode

String

Integer

The acceptance code for extended frames.

If this is a hexadecimal string, it must start with "0x" and valid numbers are "0x0" to "0x1FFFFFFF". Setting to "0xFFFFFFFF" will force the use of the setting from the SCIM program.

If this is an integer, valid numbers are 0 to 536,870,911. Setting to 4,294,967,295 will force the use of the setting from the SCIM program.



$extMask

String

Integer

The acceptance mask for extended frames.

If this is a hexadecimal string, it must start with "0x" and valid numbers are "0x0" to "0x1FFFFFFF". Setting to "0xFFFFFFFF" will force the use of the setting from the SCIM program.

If this is an integer, valid numbers are 0 to 536,870,911. Setting to 4,294,967,295 will force the use of the setting from the SCIM program.





Return parameters



Parameter

Variable Type

Description



$canHandle

Object

A handle to the opened CAN bus adapter.





Example(s):

// Open communication with a CANpro USB adapter.

$canName = "CANpro USB_1";

$baud = "1M";

$stdCode = 0;

$stdMask = 0; // We do not care about the ID in the standard messages - we will see them all.

$extCode = "0x18EF4041";

$extMask = "0x1FFF FFFF"; // Only IDs equal to 0x18EF4041 will be seen.

$canHandle = SoftingCAN_Init($canName, $baud, $stdCode, $stdMask, $extCode, $extMask);





SoftingCAN_ReadData

Previous Top Next



* * *



SoftingCAN_ReadData



Usage:

($numBytes, $dataTime, $data, $messageType) = SoftingCAN_ReadData($canHandle);





Description:

This function will return the first data in the FIFO and include the number of bytes in the message, the time the message was sent and the type of message.





Remarks:

Uses the Softing CANbus drivers. Tested using version 5.17.015.

The CAN bus interface must have been opened using the SoftingCAN_Init function.

The $dataTime is the number of microseconds since the interface was last reset.

Message types can include: No new event

Extended data frame received



Standard data frame received

Transmission of extended data frame confirmed



Standard remote frame received

Transmission of extended remote frame confirmed



Transmission of standard data frame confirmed

Extended remote frame received



Overrun of remote transmit FIFO

Error frame detected



Change of bus status

Unknown function return code: #



Transmission of standard remote frame confirmed





NOTE: Sending data will give you a read packet with one of the Transmission Confirmed messages listed above. For incoming data, call the read function until the $messageType is either "Standard data frame received" or "Extended data frame received".

Function arguments



Parameter

Variable Type

Description



$canHandle

Object

The handle to the CAN bus.





Return parameters



Parameter

Variable Type

Description



$numBytes

Integer

The number of data bytes in the message.



$dataTime

Integer

The number of microseconds since the last reset.



$data

Array

The data in an array of bytes.



$messageType

String

The type of message. See table above for message types.





Example(s):

// Open communication with a CANpro USB adapter.

$canName = "CANpro USB_1";

$baud = "1M";

$canHandle = SoftingCAN_Init($canName, $baud);





// Read one message.

($numBytes, $dataTime, $data, $messageType) = SoftingCAN_ReadData($canHandle);





// Close communication.

SoftingCAN_Close($canHandle);





SoftingCAN_Reinitialize

Previous Top Next



* * *



SoftingCAN_Reinitialize



Usage:

SoftingCAN_Reinitialize($canHandle);





Description:

This function will reinitialize the CAN bus FIFO and stops acquisition. You must run this function in order to change the acceptance codes and masks. To change the acceptance codes and masks, use the SoftingCAN_Init function.





Remarks:

Uses the Softing CANbus drivers. Tested using version 5.17.015.

The CAN bus interface must have been opened using the SoftingCAN_Init function.

Function arguments



Parameter

Variable Type

Description



$canHandle

Object

The handle to the CAN bus to reinitialize the FIFO of.





Return parameters



Parameter

Variable Type

Description



None





Example(s):

// Open communication with a CANpro USB adapter.

$canName = "CANpro USB_1";

$baud = "1M";

$canHandle = SoftingCAN_Init($canName, $baud);





// Reinitialize the FIFO.

SoftingCAN_Reinitialize($canHandle);





SoftingCAN_ResetReceiveFifo

Previous Top Next



* * *



SoftingCAN_ResetReceiveFifo



Usage:

SoftingCAN_ResetReceiveFifo($canHandle);





Description:

This function will reset and clear the incoming FIFO on the specified CAN bus.





Remarks:

Uses the Softing CANbus drivers. Tested using version 5.17.015.

The CAN bus interface must have been opened using the SoftingCAN_Init function.

Function arguments



Parameter

Variable Type

Description



$canHandle

Object

The handle to the CAN bus to clear the incoming FIFO of.





Return parameters



Parameter

Variable Type

Description



None





Example(s):

// Open communication with a CANpro USB adapter.

$canName = "CANpro USB_1";

$baud = "1M";

$canHandle = SoftingCAN_Init($canName, $baud);





// Clear the incoming FIFO.

SoftingCAN_ResetReceiveFifo($canHandle);





SoftingCAN_ResetXmitFifo

Previous Top Next



* * *



SoftingCAN_ResetXmitFifo



Usage:

SoftingCAN_ResetXmitFifo($canHandle);





Description:

This function will reset and clear the outgoing FIFO on the specified CAN bus.





Remarks:

Uses the Softing CANbus drivers. Tested using version 5.17.015.

The CAN bus interface must have been opened using the SoftingCAN_Init function.

Function arguments



Parameter

Variable Type

Description



$canHandle

Object

The handle to the CAN bus to clear the outgoing FIFO of.





Return parameters



Parameter

Variable Type

Description



None





Example(s):

// Open communication with a CANpro USB adapter.

$canName = "CANpro USB_1";

$baud = "1M";

$canHandle = SoftingCAN_Init($canName, $baud);





// Clear the outgoing FIFO.

SoftingCAN_ResetXmitFifo($canHandle);





SoftingCAN_WriteData

Previous Top Next



* * *



SoftingCAN_WriteData



Usage:

SoftingCAN_WriteData($canHandle, $destID, $extend, $messDLC, $messData);





Description:

This function will write one frame of data to one location.





Remarks:

Uses the Softing CANbus drivers. Tested using version 5.17.015.

The CAN bus interface must have been opened using the SoftingCAN_Init function.

Function arguments



Parameter

Variable Type

Description



$canHandle

Object

The handle to the CAN bus.



$destID

Integer

The ID of the destination for the message.



$extend

String

Whether to use the extended (29 bit) ID or the standard (11 bit) ID.



$messDLC

Integer

The DLC for the message.



$messData

Array

An array of bytes to send on the CAN bus. Sent in order from lowest element to highest (array element 0 sent first).





Return parameters



Parameter

Variable Type

Description



None





Example(s):

// Open communication with a CANpro USB adapter.

$canName = "CANpro USB_1";

$baud = "1M";

$canHandle = SoftingCAN_Init($canName, $baud);





// Write one message.

$dest = 123456;

$extend = "true";

$messDLC = 123;

$messData = Array1DCreate("INTEGER", 8);

Array1DSetValue($messData, 0, 23);

Array1DSetValue($messData, 1, 253);

Array1DSetValue($messData, 2, 34);

Array1DSetValue($messData, 3, 110);

Array1DSetValue($messData, 4, 56);

Array1DSetValue($messData, 5, 207);

Array1DSetValue($messData, 6, 05);

Array1DSetValue($messData, 7, 32);





SoftingCAN_WriteData($canHandle, $dest, $extend, $messDLC, $messData);





// Close communication.

SoftingCAN_Close($canHandle);





Systec_CAN_CloseCan

Previous Top Next



* * *



Systec_CAN_CloseCan



Usage:

$ErrorCode = Systec_CAN_CloseCan($CanHandle, $Channel);



Description:

This function requires Systec device drivers V3.0 or higher to be installed on the system.

This function shuts down a selective CAN interface of a USB-CANmodul. This function sets the operating voltage of the CAN controller to 0 V. After calling this function, all CAN messages received from CAN bus are ignored and not transferred to the PC.



Remarks:

· This function is tested with a Systec USB-CANmodul GW001/GW002.

· This function will fail when you use wrong parameter values.

· The corresponding error message is displayed when an error or a warning occurs.

· For detailed information, read the Systec manual delivered with the software package.



Result:

$ErrorCode = Systec_CAN_CloseCan($CanHandle, $Channel);

Function arguments



Parameter

Variable Type

Description



$CanHandle

Object

The USB-CANmodul handle returned with the function Systec_CAN_InitHardware.



$Channel

Integer

CAN-channel, which is to be initialized.

Possible values:

· 0: channel 0

· 1: channel 1

· 255: any available channel





Return parameters



Parameter

Variable Type

Description



$ErrorCode

Integer

The error code of the function.

Possible values:

· 0 : successful

· < 128 : warning





For detailed error codes, see the Systec manual.





Example(s):

$ErrorCode = Systec_CAN_CloseCan($CanHandle, 0);





Systec_CAN_CloseHardware

Previous Top Next



* * *



Systec_CAN_CloseHardware



Usage:

Systec_CAN_CloseHardware($CanHandle);



Description:

This function requires Systec device drivers V3.0 or higher to be installed on the system.

This function shuts down an initialized USB-CANmodul that was initialized with Systec_CAN_InitHardware. The software returns to the state DLL_INIT. After the function call, the USB-CAN handle is not valid.



Remarks:

· This function is tested with a Systec USB-CANmodul GW001/GW002.

· For detailed information, read the Systec manual delivered with the software package.



Result:

Systec_CAN_CloseHardware($CanHandle);

Function arguments



Parameter

Variable Type

Description



$CanHandle

Object

The USB-CANmodul handle returned with the function Systec_CAN_InitHardware.





Return parameters



Parameter

Variable Type

Description





Example(s):

Systec_CAN_CloseHardware($CanHandle);





Systec_CAN_InitCan

Previous Top Next



* * *



Systec_CAN_InitCan



Usage:

$ErrorCode = Systec_CAN_InitCan($CanHandle, $Channel, $Baudrate, $BusTimingRegister0, $BusTimingRegister1, $TransmissionMode, $AcceptanceMaskRegister, $AcceptanceCodeRegister, $OutputControlRegister, $Receivebuffer, $TransmitBuffer);



Description:

This function requires Systec device drivers V3.0 or higher to be installed on the system.

This function initializes the specified CAN-channel of a USB-CANmodul.



Remarks:

· This function is tested with a Systec USB-CANmodul GW001/GW002.

· This function will fail when you use wrong parameter values.

· The corresponding error message is displayed when an error or a warning occurs.

· For detailed information, read the Systec manual delivered with the software package.



Result:

$ErrorCode = Systec_CAN_InitCan($CanHandle, $Channel, $Baudrate, $BusTimingRegister0, $BusTimingRegister1, $TransmissionMode, $AcceptanceMaskRegister, $AcceptanceCodeRegister, $OutputControlRegister, $Receivebuffer, $TransmitBuffer);

Function arguments



Parameter

Variable Type

Description



$CanHandle

Object

The USB-CANmodul handle returned with the function Systec_CAN_InitHardware.



$Channel

Integer

CAN-channel, which is to be initialized.

Possible values:

· 0: channel 0

· 1: channel 1

· 255: any available channel



$Baudrate

String

The baudrate register for Multiport, USB-CANmodul1 and USB-CANmodul2.

Possible values:

· 100K: CAN baud rate 100 kBit/s

· 10K: CAN baud rate 10 kBit/s

· 125K: CAN baud rate 125 kBit/s

· 1M: CAN baud rate 1 MBit/s

· 20K: CAN baud rate 20 kBit/s

· 250K: CAN baud rate 250 kBit/s

· 500K: CAN baud rate 500 kBit/s

· 50K: CAN baud rate 50 kBit/s

· 800K: CAN baud rate 800 kBit/s

· AUTO: Automatic baudrate detection.

· USE BUS TIMING REGISTERS: Uses predefined values of BTR0/BTR1 for GW-001/002



$BusTimingRegister0

Integer

The bus timing register 0 of SJA1000.



$BusTimingRegister1

Integer

The bus timing register 1 of SJA1000.



$TransmissionMode

String

The transmission mode of the CAN-channel.

Possible values:

· TX ECHO: return messages as transmit echo.

· NORMAL: normal transmit- and receive mode.

· LISTEN ONLY: Listen-only mode. Transmitted CAN messages are not sent out via CAN-bus. Received CAN-messages of remote nodes are not acknowledged.



$AcceptanceMaskRegister

Integer

The acceptance mask register of SJA1000.



$AcceptanceCodeRegister

Integer

The acceptance code register of SJA1000.



$OutputControlRegister

string

The output control register of SJA1000. Should be 0x1A



$Receivebuffer

Integer

Number of receive buffer entries



$TransmitBuffer

Integer

Number of transmit buffer entries





Return parameters



Parameter

Variable Type

Description



$ErrorCode

Integer

The error code of the function.

Possible values:

· 0 : successful

· < 128 : warning





For detailed error codes, see the Systec manual.





Example(s):

$ErrorCode = Systec_CAN_InitCan($CanHandle, 0, "125k", 0, 0, "normal", -1, 0, "0x1A", 4096, 4096);





Systec_CAN_InitHardware

Previous Top Next



* * *



Systec_CAN_InitHardware



Usage:

$CanHandle = Systec_CAN_InitHardware($DeviceNumber);



Description:

This function requires Systec device drivers V3.0 or higher to be installed on the system.

This function initializes an USB-CANmodul using the device number. The software changes into the state HW_INIT. From this point, other functions can be called. If the function was executed successfully, the function transfers a USB-CAN handle to the variable Handle. Other functions have to be called with this handle.



Remarks:

· This function is tested with a Systec USB-CANmodul GW001/GW002.

· This function will fail if there is an error in the system.

· For detailed information, read the Systec manual delivered with the software package.



Result:

$CanHandle = Systec_CAN_InitHardware($DeviceNumber);

Function arguments



Parameter

Variable Type

Description



$DeviceNumber

Integer

The device number of the USB-CANmodul (0 – 254).

The value 255 makes sure that the first allocated USB-CANmodul is used.





Return parameters



Parameter

Variable Type

Description



$CanHandle

Object

The USB-CANmodul handle to use in other functions.





Example(s):

$CanHandle = Systec_CAN_InitHardware(0);

$CanHandle = Systec_CAN_InitHardware(255);





Systec_CAN_ReadCanMessage

Previous Top Next



* * *



Systec_CAN_ReadCanMessage



Usage:

$ErrorCode = Systec_CAN_ReadCanMessage($CanHandle, $Channel, $Identifier, $MessageCount, $Timeout);



Description:

This function requires Systec device drivers V3.0 or higher to be installed on the system.

This function reads a CAN message from the buffer of a specific CAN-channel until the timeout is reached.



Remarks:

· This function is tested with a Systec USB-CANmodul GW001/GW002.

· This function will fail when you use wrong parameter values.

· The corresponding error message is displayed when an error or a warning occurs.

· For detailed information, read the Systec manual delivered with the software package.



Result:

$ErrorCode = Systec_CAN_ReadCanMessage($CanHandle, $Channel, $Identifier, $MessageCount, $Timeout);

Function arguments



Parameter

Variable Type

Description



$CanHandle

Object

The USB-CANmodul handle returned with the function Systec_CAN_InitHardware.



$Channel

Integer

CAN-channel, which is to read data from.

Possible values:

· 0: channel 0

· 1: channel 1

· 255: any available channel



$Identifier

String

The CAN identifier.

Example:

"0x581"



$MessageCount

Integer

The message count is the number of messages the USB-CANmodul reads in one time.



$Timeout

Float

The timeout in seconds.





Return parameters



Parameter

Variable Type

Description



$ErrorCode

Integer

The error code of the function.

Possible values:

· 0 : successful

· < 128 : warning





For detailed error codes, see the Systec manual.





Example(s):

($ErrorCode,$ReadData) = Systec_CAN_ReadCanMessage($CanHandle, 0, "0x581", 10, 1.0);





Systec_CAN_ResetCan

Previous Top Next



* * *



Systec_CAN_ResetCan



Usage:

$ErrorCode = Systec_CAN_ResetCan($CanHandle, $Channel, $ResetFlag);



Description:

This function requires Systec device drivers V3.0 or higher to be installed on the system.

This function resets parametered global features of features of a separate CAN channel

of a USB-CANmodul.





Remarks:

· This function is tested with a Systec USB-CANmodul GW001/GW002.

· This function will fail when you use wrong parameter values.

· The corresponding error message is displayed when an error or a warning occurs.

· For detailed information, read the Systec manual delivered with the software package.

· When you use the reset flag "reset firmware", you have to execute the Systec_CAN_InitHardware and Systec_CAN_InitCan again since the handle previously created with those functions is also resetted.



Result:

$ErrorCode = Systec_CAN_ResetCan($CanHandle, $Channel, $ResetFlag);

Function arguments



Parameter

Variable Type

Description



$CanHandle

Object

The USB-CANmodul handle returned with the function Systec_CAN_InitHardware.



$Channel

Integer

CAN-channel, which is to be initialized.

Possible values:

· 0: channel 0

· 1: channel 1

· 255: any available channel



$ResetFlag

String

The flag specify what components are to be reset.

Possible values:

· RESET ALL: Reset all components. However, the firmware is not reset

· completely.

· RESET NO STATUS: Skip reset of the CAN error status (not supported for GW-001

· and/or GW-002).

· RESET NO CAN CONTROLLER: Skip reset of the CAN controller.

· RESET NO TX COUNTER: Skip reset of the transmit message counter.

· RESET NO RX COUNTER: Skip reset of the receive message counter.

· RESET NO TX BUFFER CHANNEL: Skip reset of the transmit buffers of a specific CAN-channel

· RESET NO TX BUFFER DLL: Skip reset of the transmit buffer for both CAN-channels within

· the DLL.

· RESET NO TX BUFFER SYS: Skip reset of the transmit message counter of both CAN-channels

· within the Kernel-Mode driver.

· RESET NO TX BUFFER FIRMWARE: Skip reset of the transmit buffers of both CAN-channels within

· the device’s firmware.

· RESET NO RX BUFFER CHANNEL: Skip reset of the receive buffers of a specific CAN-channel

· RESET NO RX BUFFER DLL: Skip reset of both receive message counters within the DLL

· RESET NO RX BUFFER SYS: Skip reset of the receive message counter of both CAN-channels

· within the Kernel-Mode driver.

· RESET NO RX BUFFER FIRMWARE: Skip reset of receive message counters of both CAN-channels

· within the device’s firmware.

· RESET FIRMWARE: Complete reset of the device firmware.

· RESET NO COUNTER ALL: Skip reset of the transmit and receive counters in all software parts.

· RESET NO TX BUFFER COMM: Skip reset of the firmware transmit buffer, the kernel transmit buffer and the usbcan32.dll transmit buffer.

· RESET NO RX BUFFER COM: Skip reset of the firmware receive buffer, the kernel receive buffer and the usbcan32.dll receive buffer.

· RESET NO TX BUFFER ALL: Skip reset of the firmware transmit buffer, the kernel transmit buffer,the usbcan32.dll transmit buffer and the usbcan32.dll channel transmit buffer.

· RESET NO RX BUFFER ALL: Skip reset of the firmware receive buffer, the kernel receive buffer,the usbcan32.dll receive buffer and the usbcan32.dll channel receive buffer.

· RESET NO BUFFER COMM: Skip reset of the transmit and receive buffer in the kernel buffer, firmware buffer and the usbcan32.dll buffer.

· RESET NO BUFFER ALL: Skip reset of the transmit and receive buffer in the kernel buffer, firmware buffer, the usbcan32.dll buffer and the usbcan32.dll channel buffer.

· RESET ONLY STATUS: Reset of the CAN error status only.

· RESET ONLY CAN CONTROLLER: Reset the CAN controller only.

· RESET ONLY TX BUFFER FIRMWARE: Skip reset of the transmit buffers of both CAN-channels within the device's firmware.

· RESET ONLY RX BUFFER FIRMWARE: Skip reset of the receive message counters of both CAN-channels within the device's firmware.

· RESET ONLY RX CHANNEL BUFFER: Reset of the receive buffer of only one CAN-channel.

· RESET ONLY TX CHANNEL BUFFER: Reset of the transmit buffer of o nly one CAN-channel.

· RESET ONLY RX BUFFER: Reset of the receive buffers in all software parts and reset of the receive message counter.

· RESET ONLY RX BUFFER GW002: Reset of the receive buffers in all software parts and reset of the receive message counter for GW002.

· RESET ONLY TX BUFFER: Reset of the transmit buffers in all software parts and reset of the

· transmit message counter.

· RESET ONLY ALL BUFFERS: Reset off all message buffers (receive and transmit buffers) in all

· software parts and reset of the receive and transmit message counter.

· RESET ONLY ALL COUNTERS: Reset of the receive and transmit counter.





Return parameters



Parameter

Variable Type

Description



$ErrorCode

Integer

The error code of the function.

Possible values:

· 0 : successful

· < 128 : warning





For detailed error codes, see the Systec manual.





Example(s):

Systec_CAN_ResetCan($CanHandle1, 0, "RESET FIRMWARE");





Systec_CAN_WriteCanMessage

Previous Top Next



* * *



Systec_CAN_WriteCanMessage



Usage:

$ErrorCode = Systec_CAN_WriteCanMessage($CanHandle, $Channel, $Identifier, $FrameFormat, $DataToWrite);



Description:

This function requires Systec device drivers V3.0 or higher to be installed on the system.

This function transmits one CAN messages through the specified CAN-channel

of the USB-CANmodul using a specific frame format and identifier.



Remarks:

· This function is tested with a Systec USB-CANmodul GW001/GW002.

· This function will fail when you use wrong parameter values.

· The corresponding error message is displayed when an error or a warning occurs.

· For detailed information, read the Systec manual delivered with the software package.



Result:

$ErrorCode = Systec_CAN_WriteCanMessage($CanHandle, $Channel, $Identifier, $FrameFormat, $DataToWrite);

Function arguments



Parameter

Variable Type

Description



$CanHandle

Object

The USB-CANmodul handle returned with the function Systec_CAN_InitHardware.



$Channel

Integer

CAN-channel, which is to write data.

Possible values:

· 0: channel 0

· 1: channel 1

· 255: any available channel



$Identifier

String

The CAN identifier.

Example:

"0x601"



$FrameFormat

String

The CAN frame format.

Possible values:

· CAN 2.0A MESSAGE: CAN2.0A message with 11-bit CANID

· CAN 2.0B MESSAGE: CAN2.0B message with 29-bit CAN-ID

· REMOTE FRAME: CAN Remote Frame

· TRANSMIT ECHO: transmit echo.



$DataToWrite

String

HEX data to write to the CAN bus. The data can be seperated with a space, a dash and a comma. The prefix 0x can be used or not.

Example(s):

· "0x23,0xff - 0x5f , 0x00 0x00 0x00 0x00 0x00"

· "0x23 0xff 0x5f 0x00 0x00 0x00 0x00 0x00"

· "23 ff 5f 00 00 00 00 00"





Return parameters



Parameter

Variable Type

Description



$ErrorCode

Integer

The error code of the function.

Possible values:

· 0 : successful

· < 128 : warning





For detailed error codes, see the Systec manual.





Example(s):

$ErrorCode = Systec_CAN_WriteCanMessage($CanHandle, 0, "0x601", "CAN 2.0A MESSAGE", "0x23,0xff - 0x5f , 0x00 0x00 0x00 0x00 0x00");





OneWire_Close

Previous Top Next



* * *



OneWire_Close

Usage:

OneWire_Close($OneWireAdapter);

The OneWire_xxx functions support a wide array of OneWire™ Protocol adapters distributed by Maxim (formally Dallas Semiconductor) For more information see the Maxim website at http://www.maxim-ic.com/.

Remarks:

· In order to use this function library, you must have the Microsoft .Net J# Runtime installed which is used by the OneWire.Net. API

Description:

This function closes the OneWire protocol adapter and releases any used resources.

Function Arguments



Parameter

Variable Type

Description



$OneWireAdapter

Object

The instance of the initialized OneWire adapter





Return Parameters



Parameter

Variable Type

Description



None





OneWire_ComputeCRC8

Previous Top Next



* * *



OneWire_ComputeCRC8

Usage:

$Checksum = OneWire_ComputeCRC8($ByteString);

The OneWire_xxx functions support a wide array of OneWire™ Protocol adapters distributed by Maxim (formally Dallas Semiconductor) For more information see the Maxim website at http://www.maxim-ic.com/.

Remarks:

· In order to use this function library, you must have the Microsoft .Net J# Runtime installed which is used by the OneWire.Net. API

Description:

This function takes a supplied byte string in "xx xx xx xx " format and computes the 1 byte checksum. (Note: The string must end in a whitespace character to signify the end of the string)

Example:.

$Checksum = OneWire_ComputeCRC8("A0 DA 0C 00 02 F1");

Function Arguments



Parameter

Variable Type

Description



$ByteString

String

A string in the format specified above





Return Parameters



Parameter

Variable Type

Description



$Checksum

String

A two digit hexidecimal string indicating the checksum value of the supplied string.





OneWire_CreateNewFile

Previous Top Next



* * *



OneWire_CreateNewFile



Usage:

OneWire_CreateNewFile($Adapter,$Container,$FilePathAndName,$FileMode,$FileData);



The OneWire_xxx functions support a wide array of OneWire™ Protocol adapters distributed by Maxim (formally Dallas Semiconductor) For more information see the Maxim website at http://www.maxim-ic.com/.





Description:





This function can be used to create a new file on a Dallas Semiconductor One Wire memory device. This function can be used with any One Wire device which supports a psuedo-file system such as EEPROM, EPROM, or any unpaged, or paged memory devices.





· The filename must be a maximum of 4 characters in length, with a 3 character file extension.

· There are two modes for writing data to the file, 'HEX' and 'ASCII'. If the parameter is specified as hex, the $FileData parameter is first passed through a conversion routine to translate the text to an array of bytes before writing it to the device. If the parameter is specified as ASCII, the data is written unchanged to the device.





If the function fails to create the new file on the device for any reason, a test failure is returned back to the test executive.





Remarks:

· In order to use this function library, you must have the Microsoft .Net J# Runtime installed which is used by the OneWire.Net. API



Function arguments



Parameter

Variable Type

Description



$Adapter

Object

An instance of the One-Wire Adapter returned from the OneWire_Init function



$Container

Object

The OneWireDeviceContainer returned from the OneWire_GetDeviceContainer function.



$DirectoryPathAndName

String

The directory path and file name for the file to be created.



$FileMode

String

The filemode to use when writing to the device. The supported options are:

· "HEX" - The string is converted to an array of bytes before being written to the device. The string must contain only valid hexidecimal characters (0-0, A-F)

· "ASCII" - The string is written to the device 'As Is' by converting each string character to it's equivalent ascii encoding.



$FileData

String

A string containing the hex or ASCII data to write to the file





Return parameters



Parameter

Variable Type

Description



None





Example Code:





$OneWireAdapter = OneWire_Init("","");

SetFinalizeFunction("Cleanup");

($DeviceCount,$Addresses) = OneWire_FindAllDevices($OneWireAdapter);

$Address = StringReplace($Addresses,";","");

UpdateStatus($Address);

$Container = OneWire_GetDeviceContainer($OneWireAdapter,$Address);

UpdateStatus($Container);

OneWire_FormatDevice($OneWireAdapter,$Container);

($FileCount,$FileArray) = OneWire_ReadDirectory($OneWireAdapter,$Container,"");

UpdateStatus($FileCount);

OneWire_CreateNewFile($OneWireAdapter,$Container,"0000.000","ASCII","TEST DATA TO WRITE TO CHIP");





End;





function Cleanup()

{

OneWire_Close($OneWireAdapter);

End;

}





OneWire_FindAllDevices

Previous Top Next



* * *



OneWire_FindAllDevices



Usage:

($DeviceCount,$Addresses) = OneWire_FindAllDevices($Adapter);



The OneWire_xxx functions support a wide array of OneWire™ Protocol adapters distributed by Maxim (formally Dallas Semiconductor) For more information see the Maxim website at http://www.maxim-ic.com/.



Description:





This function queries the OneWire device bus and enumerates all OneWire devices on the network. The function returns the number of devices found, and also a single string containing the address of all the devices on the bus in a semi-colon delimited list.



Remarks:

· In order to use this function library, you must have the Microsoft .Net J# Runtime installed which is used by the OneWire.Net. API



Function arguments



Parameter

Variable Type

Description



$Adapter

Object

An instance of the One-Wire Adapter returned from the OneWire_Init function





Return parameters



Parameter

Variable Type

Description



$DeviceCount

Integer

The number of one wire devices found on the network connected to the OneWire communication adapter.



$Addresses

String

A Semi-colon delimited list of all the addresses of the One-Wire devices found on the current One-Wire bus.





OneWire_FormatDevice

Previous Top Next



* * *



OneWire_FormatDevice



Usage:

OneWire_FormatDevice($Adapter,$Container);



The OneWire_xxx functions support a wide array of OneWire™ Protocol adapters distributed by Maxim (formally Dallas Semiconductor) For more information see the Maxim website at http://www.maxim-ic.com/.



Description:





This function formats the file system for a specific device on the Dallas Semiconductor One-Wire Network. This function can be used with any One Wire device which supports a psuedo-file system such as EEPROM, EPROM, or any unpaged, or paged memory devices.

If the device being used is a 'Write Once' device, it can still be formatted multiple times, however each additional format consumes unused space in the device memory.



Remarks:

· In order to use this function library, you must have the Microsoft .Net J# Runtime installed which is used by the OneWire.Net. API



Function arguments



Parameter

Variable Type

Description



$Adapter

Object

An instance of the One-Wire Adapter returned from the OneWire_Init function



$Container

Object

The OneWireDeviceContainer returned from the OneWire_GetDeviceContainer function.





Return parameters



Parameter

Variable Type

Description



None





Example Code:





$OneWireAdapter = OneWire_Init("","");

SetFinalizeFunction("Cleanup");

($DeviceCount,$Addresses) = OneWire_FindAllDevices($OneWireAdapter);

$Address = StringReplace($Addresses,";","");

UpdateStatus($Address);

$Container = OneWire_GetDeviceContainer($OneWireAdapter,$Address);

UpdateStatus($Container);

OneWire_FormatDevice($OneWireAdapter,$Container);

($FileCount,$FileArray) = OneWire_ReadDirectory($OneWireAdapter,$Container,"");

UpdateStatus($FileCount);

OneWire_CreateNewFile($OneWireAdapter,$Container,"0000.000","ASCII","TEST DATA TO WRITE TO CHIP");





End;





function Cleanup()

{

OneWire_Close($OneWireAdapter);

End;

}





OneWire_GetDeviceContainer

Previous Top Next



* * *



OneWire_GetDeviceContainer



Usage:

$Container = OneWire_GetDeviceContainer($Adapter,$DeviceAddress);



The OneWire_xxx functions support a wide array of OneWire™ Protocol adapters distributed by Maxim (formally Dallas Semiconductor) For more information see the Maxim website at http://www.maxim-ic.com/.



Description:





This function returns a handle for a specific device on the Dallas Semiconductor One-Wire Network that can be passed to other functions for specific actions. The device is specified by it's address which can be obtained by the OneWire_FindAllDevices function. If the device is not found, the function returns a failing test result.



Remarks:

· In order to use this function library, you must have the Microsoft .Net J# Runtime installed which is used by the OneWire.Net. API



Function arguments



Parameter

Variable Type

Description



$Adapter

Object

An instance of the One-Wire Adapter returned from the OneWire_Init function



$DeviceAddress

String

The address of the OneWire Device





Return parameters



Parameter

Variable Type

Description



$Container

Object

A handle to the device container specified by the address string.





Example Code:





$OneWireAdapter = OneWire_Init("","");

SetFinalizeFunction("Cleanup");

($DeviceCount,$Addresses) = OneWire_FindAllDevices($OneWireAdapter);

$Address = StringReplace($Addresses,";","");

UpdateStatus($Address);

$Container = OneWire_GetDeviceContainer($OneWireAdapter,$Address);

UpdateStatus($Container);

OneWire_FormatDevice($OneWireAdapter,$Container);

($FileCount,$FileArray) = OneWire_ReadDirectory($OneWireAdapter,$Container,"");

UpdateStatus($FileCount);

OneWire_CreateNewFile($OneWireAdapter,$Container,"0000.000","ASCII","TEST DATA TO WRITE TO CHIP");





End;





function Cleanup()

{

OneWire_Close($OneWireAdapter);

End;

}





OneWire_GetFreeMemorySpace

Previous Top Next



* * *



OneWire_GetFreeMemorySpace

Usage:

$FreeSpace = OneWire_GetFreeMemorySpace($Adapter,$Container);



The OneWire_xxx functions support a wide array of OneWire™ Protocol adapters distributed by Maxim (formally Dallas Semiconductor) For more information see the Maxim website at http://www.maxim-ic.com/.



Description:





This function returns the number of unused bytes available on the One-Wire Storage device. This function can be used with any One Wire device which supports a psuedo-file system such as EEPROM, EPROM, or any unpaged, or paged memory devices.





Note: On any 'Write-Once' device, the available storage is not recovered after the device is formatted, only the inodes on the file system are rewritten to create the appearance of a blank storage device.





Remarks:

· In order to use this function library, you must have the Microsoft .Net J# Runtime installed which is used by the OneWire.Net. API



Function arguments



Parameter

Variable Type

Description



$Adapter

Object

An instance of the One-Wire Adapter returned from the OneWire_Init function



$Container

Object

The OneWireDeviceContainer returned from the OneWire_GetDeviceContainer function.





Return parameters



Parameter

Variable Type

Description



$FreeSpace

Integer

The number of unused bytes available on the OneWire memory/storage device.





Example Code:

$OneWireAdapter = OneWire_Init("","");

SetFinalizeFunction("Cleanup");

($DeviceCount,$Addresses) = OneWire_FindAllDevices($OneWireAdapter);

$Address = StringReplace($Addresses,";","");

UpdateStatus($Address);

$Container = OneWire_GetDeviceContainer($OneWireAdapter,$Address);

UpdateStatus($Container);

OneWire_FormatDevice($OneWireAdapter,$Container);

($FileCount,$FileArray) = OneWire_ReadDirectory($OneWireAdapter,$Container,"");

UpdateStatus($FileCount);

OneWire_CreateNewFile($OneWireAdapter,$Container,"0000.000","ASCII","Hello Word!");

$contents = OneWire_ReadFileAsString($OneWireAdapter,$Container,"0000.000");

$FreeSpace = OneWire_GetFreeMemorySpace($OneWireAdapter,$Container);

UpdateStatus($FreeSpace);





End;





function Cleanup()

{

OneWire_Close($OneWireAdapter);

End;

}





OneWireInit

Previous Top Next



* * *



OneWire_Init

Usage:

$OneWireAdapter = OneWire_Init($AdapterName,$AdapterPort);



The OneWire_xxx functions support a wide array of OneWire™ Protocol adapters distributed by Maxim (formally Dallas Semiconductor) For more information see the Maxim website at http://www.maxim-ic.com/.

Remarks:

· In order to use this function library, you must have the Microsoft .Net J# Runtime installed which is used by the OneWire.Net. API

Description:

This function opens the OneWire protocol adapter according to the supplied AdapterName and AdapterPort. For full documentation concerning these two parameters refer to the OneWire API programmers interface. This function supports all three family of adapters, including Serial, Parallel, and USB protocol adapters.

Examples:

$OneWireAdapter = OneWire_Init("{DS9097U}","COM1");

$OneWireAdapter = OneWire_Init("{DS1490}","USB0");

Function Arguments



Parameter

Variable Type

Description



$AdapterName

String

The string specifying the adapter to use for communicating with the OneWire network



$AdapterPort

String

The string specifying the port on which the adapter is connected. This can be a string identifier for Parrallel (LPTx), Serial (COMx), or USB (USBx).





Return Parameters



Parameter

Variable Type

Description



$OneWireAdapter

Object

An instance of the opened OneWire adapter object.





OneWireReadBytes

Previous Top Next



* * *



OneWire_ReadBytes

Usage:

$Bytes = OneWire_ReadBytes($OneWireAdapter,$NumBytesToRead);



The OneWire_xxx functions support a wide array of OneWire™ Protocol adapters distributed by Maxim (formally Dallas Semiconductor) For more information see the Maxim website at http://www.maxim-ic.com/.

Remarks:

· In order to use this function library, you must have the Microsoft .Net J# Runtime installed which is used by the OneWire.Net. API

Description:

This function reads the specified number of bytes from the onewire network.

Examples:

$Bytes = OneWire_ReadBytes($OneWireAdapter,10);

Function Arguments



Parameter

Variable Type

Description



$OneWireAdapter

Object

An instance of the opened OneWire adapter object.



$NumBytesToRead

Integer

The number of bytes to read from the OneWire network.





Return Parameters



Parameter

Variable Type

Description



$Bytes

String

The returned Byte String





OneWire_ReadDirectory

Previous Top Next



* * *



OneWire_ReadDirectory

Usage:

($FileCount,$FileArray) = OneWire_ReadDirectory($Adapter,$Container,$DirectoryPath);



The OneWire_xxx functions support a wide array of OneWire™ Protocol adapters distributed by Maxim (formally Dallas Semiconductor) For more information see the Maxim website at http://www.maxim-ic.com/.



Description:





This function reads the contents of a directory of the file system for a specific device on the Dallas Semiconductor One-Wire Network. This function can be used with any One Wire device which supports a psuedo-file system such as EEPROM, EPROM, or any unpaged, or paged memory devices.





You can read the root node of a device by specifying a blank string for the $DirectoryPath argument.



Remarks:

· In order to use this function library, you must have the Microsoft .Net J# Runtime installed which is used by the OneWire.Net. API



Function arguments



Parameter

Variable Type

Description



$Adapter

Object

An instance of the One-Wire Adapter returned from the OneWire_Init function



$Container

Object

The OneWireDeviceContainer returned from the OneWire_GetDeviceContainer function.



$DirectoryPath

String

The directory path on the device. If the directory is not found, a failure is generated for this test step.





Return parameters



Parameter

Variable Type

Description



$FileCount

Integer

The number of files or sub-directories contained in the specified directory



$FileArray

Array

An array of the file and directory names contained in the directory.





Example Code:





$OneWireAdapter = OneWire_Init("","");

SetFinalizeFunction("Cleanup");

($DeviceCount,$Addresses) = OneWire_FindAllDevices($OneWireAdapter);

$Address = StringReplace($Addresses,";","");

UpdateStatus($Address);

$Container = OneWire_GetDeviceContainer($OneWireAdapter,$Address);

UpdateStatus($Container);

OneWire_FormatDevice($OneWireAdapter,$Container);

($FileCount,$FileArray) = OneWire_ReadDirectory($OneWireAdapter,$Container,"");

UpdateStatus($FileCount);

OneWire_CreateNewFile($OneWireAdapter,$Container,"0000.000","ASCII","TEST DATA TO WRITE TO CHIP");





End;





function Cleanup()

{

OneWire_Close($OneWireAdapter);

End;

}





OneWire_ReadFileAsString

Previous Top Next



* * *



OneWire_ReadFileAsString

Usage:

$FileContents = OneWire_ReadFileAsString($Adapter,$Container,$FileName);



The OneWire_xxx functions support a wide array of OneWire™ Protocol adapters distributed by Maxim (formally Dallas Semiconductor) For more information see the Maxim website at http://www.maxim-ic.com/.



Description:





This function reads an ASCII file that has been created on the Maxim One-Wire memory storage device. This function can be used with any One Wire device which supports a psuedo-file system such as EEPROM, EPROM, or any unpaged, or paged memory devices.





· This function should generally be used to only read the contents from ASCII files which are stored on the device.

· The entire ASCII contents of the specified file are returned as a single string.



Remarks:

· In order to use this function library, you must have the Microsoft .Net J# Runtime installed which is used by the OneWire.Net. API



Function arguments



Parameter

Variable Type

Description



$Adapter

Object

An instance of the One-Wire Adapter returned from the OneWire_Init function



$Container

Object

The OneWireDeviceContainer returned from the OneWire_GetDeviceContainer function.



$FileName

String

The filename and path of the ASCII text file to be read from the storage device.





Return parameters



Parameter

Variable Type

Description



$FileContents

String

The ASCII contents of the file specified by the $FileName parameter





Example Code:

$OneWireAdapter = OneWire_Init("","");

SetFinalizeFunction("Cleanup");

($DeviceCount,$Addresses) = OneWire_FindAllDevices($OneWireAdapter);

$Address = StringReplace($Addresses,";","");

UpdateStatus($Address);

$Container = OneWire_GetDeviceContainer($OneWireAdapter,$Address);

UpdateStatus($Container);

OneWire_FormatDevice($OneWireAdapter,$Container);

($FileCount,$FileArray) = OneWire_ReadDirectory($OneWireAdapter,$Container,"");

UpdateStatus($FileCount);

OneWire_CreateNewFile($OneWireAdapter,$Container,"0000.000","ASCII","Hello Word!");

$contents = OneWire_ReadFileAsString($OneWireAdapter,$Container,"0000.000");

$FreeSpace = OneWire_GetFreeMemorySpace($OneWireAdapter,$Container);

UpdateStatus($FreeSpace);





End;





function Cleanup()

{

OneWire_Close($OneWireAdapter);

End;

}





OneWire_Reset

Previous Top Next



* * *



OneWire_Reset

Usage:

OneWire_Reset($OneWireAdapter);

The OneWire_xxx functions support a wide array of OneWire™ Protocol adapters distributed by Maxim (formally Dallas Semiconductor) For more information see the Maxim website at http://www.maxim-ic.com/.

Remarks:

· In order to use this function library, you must have the Microsoft .Net J# Runtime installed which is used by the OneWire.Net. API

Description:

Sends a reset on the one-wire network.

Function Arguments



Parameter

Variable Type

Description



$OneWireAdapter

Object

An instance of the opened OneWire adapter object.





Return Parameters



Parameter

Variable Type

Description



None





OneWireSendBytes

Previous Top Next



* * *



OneWire_SendBytes

Usage:

OneWire_SendBytes($OneWireAdapter,$ByteString);



The OneWire_xxx functions support a wide array of OneWire™ Protocol adapters distributed by Maxim (formally Dallas Semiconductor) For more information see the Maxim website at http://www.maxim-ic.com/.

Remarks:

· In order to use this function library, you must have the Microsoft .Net J# Runtime installed which is used by the OneWire.Net. API

Description:

This function sends the supplied byte array out to the one wire network.

Examples:

OneWire_SendBytes($OneWireAdapter,"FF 00 FF 12 AE");

Function Arguments



Parameter

Variable Type

Description



$OneWireAdapter

Object

An instance of the opened OneWire adapter object.



$ByteString

String

The string specifying the bytes to send to the network. The bytes should be supplied in hexadecimal format separated by whitespace.





Return Parameters



Parameter

Variable Type

Description



None





GPIB_Clear

Previous Top Next



* * *



GPIB_Clear

Usage:

GPIB_Clear($GPIBInstance)

Description:

This function sends either an SDC (Selected Device Clear) or DCL (Device Clear) command to the specified instrument on the GPIB bus. This can be used to clear communication or instrument errors. It may be useful in some circumstances to add this command immediately after opening an instrument.

Function arguments



Parameter

Variable Type

Description



$GPIBInstance

Object

The object representing the instance of the GPIB Instrument.





Return parameters



Parameter

Variable Type

Description



None





Usage Example:





GPIB_Clear($Handle);





GPIB_Close

Previous Top Next



* * *



GPIB_Close

Usage:

GPIB_Close($GPIBInstance);

Description:

This function uses the Agilent IO Libraries, in order to use these universal GPIB functions in JabilTest, you need to have the Agilent IO Libraries installed.

This function closes the GPIB object and attempts to recover used resources. It does not reset the unit or change it's existing settings. This function returns a passing result if the object exists, otherwise a failure is generated by the script function.

Function Arguments



Parameter

Variable Type

Description



$GPIBInstance

Object

The object representing the instance of the GPIB Instrument.





Return Parameters



Parameter

Variable Type

Description



None





GPIB.Open

Previous Top Next



* * *



GPIB_Open

Usage:

$GPIBInstance = GPIB_Open($ResourceString);

Description:

This function uses the Agilent IO Libraries, in order to use these universal GPIB functions in JabilTest, you need to have the Agilent IO Libraries installed.

This function returns a generic object referencing the GPIB device at the given resource string identifier. Since this command is meant to be universal, no device specific initialization is performed.

Function Arguments



Parameter

Variable Type

Description



$ResourceString

String

The resource string identifying the instrument. For example, "GPIB0::9::Instr".





Return Parameters



Parameter

Variable Type

Description



$GPIBInstance

Object

The object representing the instance of the GPIB Instrument.





GPIB_OpenBool

Previous Top Next



* * *



GPIB_OpenBool



Usage:

($GPIBHandle, $success) = GPIB_OpenBool($resourceString);





Description:

This function returns a generic object referencing the GPIB device at the given resource string identifier. Since this command is meant to be universal, no device specific initialization is performed. This function also returns a boolean to indicate whether the GPIB device was successfully connected to.





Notes:

This function uses the Agilent IO Libraries, in order to use these universal GPIB functions in Jabil Test, you need to have the Agilent IO Libraries installed.

If the GPIB device is not successfully connected to, this function will not fail, but will return a FALSE in the success boolean.

Function arguments



Parameter

Variable Type

Description



$resourceString

String

The resource string identifying the instrument. For example, "GPIB0::9::Instr".





Return parameters



Parameter

Variable Type

Description



$GPIBHandle

Object

The object representing the instance of the GPIB instrument.



$success

Boolean

True if the instrument was successfully connected to, False otherwise.





Usage Example:

// Connect to the instrument.

Label InstrConnect:





($GPIBHandle, $success) = GPIB_OpenBool("GPIB0::11::Instr");





if (!$success)

{

// Did not connect, wait 1 second and try again.

Sleep(1);

goto InstrConnect;

}





GPIB_Read

Previous Top Next



* * *



GPIB_Read

Usage:

$Reading = GPIB_Read($GPIBInstance);

Description:

This function uses the Agilent IO Libraries, in order to use these universal GPIB functions in JabilTest, you need to have the Agilent IO Libraries installed.

This function returns a string containing the measurement result of a GPIB device. In general, this command will always be proceeded by a GPIB.Write. Reading from a device with an empty buffer will cause unpredictable result depending on the device.

Function Arguments



Parameter

Variable Type

Description



$GPIBInstance

Object

The object representing the instance of the GPIB Instrument.





Return Parameters



Parameter

Variable Type

Description



$Reading

String

The reading currently waiting in the GPIB buffer.





GPIB_Write

Previous Top Next



* * *



GPIB_Write

Usage:

GPIB_Write($GPIBInstance, $CommandString);

Description:

This function uses the Agilent IO Libraries, in order to use these universal GPIB functions in JabilTest, you need to have the Agilent IO Libraries installed.

This function writes a command string to a given GPIB instrument object. Refer to programming documentation for your device for proper command syntax as this command will not detect the failure of a given GPIB command. A failure will occur if the command cannot be delivered.

Function Arguments



Parameter

Variable Type

Description



$GPIBInstance

Object

The object representing the instance of the GPIB Instrument.



$CommandString

String

The command written to the GPIB device.





Return Parameters



Parameter

Variable Type

Description



None





IviGPIB_Clear

Previous Top Next



* * *



IviGPIB_Clear



Usage:

IviGPIB_Clear($GpibHandle);



Description:

This function sends a Clear command to the instrument.



Remarks:

· This function requires the IVI Foundation VISA drivers. Both the IVI Shared Components and the VISA Shared Components.

Function arguments



Parameter

Variable Type

Description



$GpibHandle

Object

The GPIB resource handle opened with the IviGPIB_Open or IviGPIB_OpenBool function.





Return parameters



Parameter

Variable Type

Description



None





Example(s):

// Connect to the instrument.

$resourceString = "GPIB::11::INSTR";

$timeOut = 2000; // Time out = 2 seconds.

$gpib = IviGPIB_Open($resourceString, $timeOut);





IviGPIB_Clear($gpib);





IviGPIB_Close

Previous Top Next



* * *



IviGPIB_Close



Usage:

IviGPIB_Close($GpibHandle);



Description:

This function closes communication with the instrument.



Remarks:

· This function requires the IVI Foundation VISA drivers. Both the IVI Shared Components and the VISA Shared Components.

Function arguments



Parameter

Variable Type

Description



$GpibHandle

Object

The GPIB resource handle opened with the IviGPIB_Open or IviGPIB_OpenBool function.





Return parameters



Parameter

Variable Type

Description



None





Example(s):

// Connect to the instrument.

$resourceString = "GPIB::11::INSTR";

$timeOut = 2000; // Time out = 2 seconds.

$gpib = IviGPIB_Open($resourceString, $timeOut);





// Other functions to work with the instrument.





IviGPIB_Close($gpib);





IviGPIB_Open

Previous Top Next



* * *



IviGPIB_Open



Usage:

$GpibHandle = IviGPIB_Open($resourceString, $timeOut);



Description:

This function creates a connection to the instrument specified in the resource string.



Remarks:

· This function requires the IVI Foundation VISA drivers. Both the IVI Shared Components and the VISA Shared Components.

Function arguments



Parameter

Variable Type

Description



$resourceString

String

The GPIB address of the instrument. Prefix with either GPIB:: or GPIB<busNumber> Followed by the address of the instrument and the instrument designation ::INSTR.



$timeOut

Integer

The time out value to use for communicating with the instrument in milliseconds.





Return parameters



Parameter

Variable Type

Description



$GpibHandle

Object

The reference to the instrument that will be used in other GPIB functions.





Example(s):

// Connect to the instrument.

$resourceString = "GPIB::11::INSTR";

$timeOut = 2000; // Time out = 2 seconds.

$gpib = IviGPIB_Open($resourceString, $timeOut);





IviGPIB_OpenBool

Previous Top Next



* * *



IviGPIB_OpenBool



Usage:

($GpibHandle, $success) = IviGPIB_OpenBool($resourceString, $timeOut);



Description:

This function creates a connection to the instrument specified in the resource string and returns the connection reference and a success boolean.



Remarks:

· This function requires the IVI Foundation VISA drivers. Both the IVI Shared Components and the VISA Shared Components.

· This function will not Fail a test.

Function arguments



Parameter

Variable Type

Description



$resourceString

String

The GPIB address of the instrument. Prefix with either GPIB:: or GPIB<busNumber> Followed by the address of the instrument and the instrument designation ::INSTR.



$timeOut

Integer

The time out value to use for communicating with the instrument in milliseconds.





Return parameters



Parameter

Variable Type

Description



$GpibHandle

Object

The reference to the instrument that will be used in other GPIB functions.



$success

Boolean

A status boolean indicating whether the connection succeeded.





Example(s):

// Connect to the instrument.

$resourceString = "GPIB::11::INSTR";

$timeOut = 2000; // Time out = 2 seconds.

($gpib, $success) = IviGPIB_OpenBool($resourceString, $timeOut);





IviGPIB_Read

Previous Top Next



* * *



IviGPIB_Read



Usage:

$inString = IviGPIB_Read($GpibHandle);



Description:

This function reads a string from the instrument up to a termination character.



Remarks:

· This function requires the IVI Foundation VISA drivers. Both the IVI Shared Components and the VISA Shared Components.

Function arguments



Parameter

Variable Type

Description



$GpibHandle

Object

The GPIB resource handle opened with the IviGPIB_Open or IviGPIB_OpenBool function.





Return parameters



Parameter

Variable Type

Description



$inString

String

The string read back from the instrument.





Example(s):

// Connect to the instrument.

$resourceString = "GPIB::11::INSTR";

$timeOut = 2000; // Time out = 2 seconds.

$gpib = IviGPIB_Open($resourceString, $timeOut);





$inString = IviGPIB_Read($gpib);





$outStr = "The instrument responded: " + $inString;

UpdateStatus($outStr);





IviGPIB_ReadBool

Previous Top Next



* * *



IviGPIB_ReadBool



Usage:

($inString, $success) = IviGPIB_ReadBool($GpibHandle);



Description:

This function reads a string from the instrument up to a termination character and also returns a boolean indicating whether the read was successful.



Remarks:

· This function requires the IVI Foundation VISA drivers. Both the IVI Shared Components and the VISA Shared Components.

· This function will not fail a test.

Function arguments



Parameter

Variable Type

Description



$GpibHandle

Object

The GPIB resource handle opened with the IviGPIB_Open or IviGPIB_OpenBool function.





Return parameters



Parameter

Variable Type

Description



$inString

String

The string read back from the instrument.



$success

Boolean

A status boolean indicating whether the read was successful.





Example(s):

// Connect to the instrument.

$resourceString = "GPIB::11::INSTR";

$timeOut = 2000; // Time out = 2 seconds.

$gpib = IviGPIB_Open($resourceString, $timeOut);





($inString, $success) = IviGPIB_ReadBool($gpib);





$outStr = "The instrument responded: " + $inString;

UpdateStatus($outStr);





IviGPIB_Write

Previous Top Next



* * *



IviGPIB_Write



Usage:

IviGPIB_Write($GpibHandle, $outString);



Description:

This function writes a string to the instrument.





Remarks:

· This function requires the IVI Foundation VISA drivers. Both the IVI Shared Components and the VISA Shared Components.

Function arguments



Parameter

Variable Type

Description



$GpibHandle

Object

The GPIB resource handle opened with the IviGPIB_Open or IviGPIB_OpenBool function.



$outString

String

The string to send to the instrument.





Return parameters



Parameter

Variable Type

Description



None





Example(s):

// Connect to the instrument.

$resourceString = "GPIB::11::INSTR";

$timeOut = 2000; // Time out = 2 seconds.

$gpib = IviGPIB_Open($resourceString, $timeOut);





$outString = "*RST"; // Reset the instrument.

IviGPIB_Write($gpib, $outString);





IviGPIB_WriteBool

Previous Top Next



* * *



IviGPIB_WriteBool



Usage:

$success = IviGPIB_WriteBool($GpibHandle, $outString);



Description:

This function writes a string to the instrument and returns a boolean indicating whether the write was successful.





Remarks:

· This function requires the IVI Foundation VISA drivers. Both the IVI Shared Components and the VISA Shared Components.

· This function will not fail a test.

Function arguments



Parameter

Variable Type

Description



$GpibHandle

Object

The GPIB resource handle opened with the IviGPIB_Open or IviGPIB_OpenBool function.



$outString

String

The string to send to the instrument.





Return parameters



Parameter

Variable Type

Description



$success

Boolean

A status boolean indicating whether the write was successful.





Example(s):

// Connect to the instrument.

$resourceString = "GPIB::11::INSTR";

$timeOut = 2000; // Time out = 2 seconds.

$gpib = IviGPIB_Open($resourceString, $timeOut);





$outString = "*RST"; // Reset the instrument.

$success = IviGPIB_WriteBool($gpib, $outString);





HTTP_Request

Previous Top Next



* * *



HTTP_Request



Usage:

$returnVar = HTTP_Request($url, $userName, $password, $domain, $returnVarType, $retryCount);



Description:

This function accesses the requested URL destination via HTTP and returns either a WebResponse object or a String containing the contents of the web page. If the web page requires authentification credentials, they can be supplied with the $userName, $password, and $domain arguments. In the event that the authentication arguments are left blank, they are ignored. The $returnVariableType determines whether this function should return a reference to the WebResponse object to the script, or if a string containing the HTML contents of the web-page should be returned to the script interpreter.





Remarks:

If the web-page is not reachable, can't be found, or times out, an error is returned.

In the event that Access is Denied an error is also returned.



Function arguments



Parameter

Variable Type

Description



$url

String

The URL of the website to retrieve data from.



$userName

String

The user name to supply for authentification credentials. If authentification is not required, this string should be empty.



$password

String

The password to supply for authentification credentials. If authentication is not required, this string should be empty.



$domain

String

The domain to supply for authentification credentials. If authentification is not required, this string should be empty.



$returnVarType

String

The type of variable that should be returned to the script. Valid entries are: "String"

"WebResponse"

"None"





$retryCount

Integer

The number of attempts to retry before returning a failure.





Return parameters



Parameter

Variable Type

Description



$returnVar

String or Object

Either a string containing the HTML contents of a web-page are returned, or a WebResponse object which can then be passed to other HTTP functions. If "None" is specified as the return type, no variable will be returned to the test script.





Example:





// Get the data from a web page.

$url = "http://www.google.com";

$userName = "";

$password = "";

$domain = "";

$returnType = "String";

$retry = 5;



$webData = HTTP_Request($url, $userName, $password, $domain, $returnType, $retry);





HTTP_SubmitForm

Previous Top Next



* * *



HTTP_SubmitForm



Usage:

$returnVar = HTTP_SubmitForm($url, $userName, $password, $domain, $returnVarType, $formData, $retryCount);



Description:

This function accesses the requested URL destination via HTTP, submits the form data and returns either a WebResponse object or a String containing the contents of the web page. If the web page requires authentification credentials, they can be supplied with the $userName, $password, and $domain arguments. In the event that the authentication arguments are left blank, they are ignored. The $returnVariableType determines whether this function should return a reference to the WebResponse object to the script, or if a string containing the HTML contents of the web-page should be returned to the script interpreter.





Remarks:

If the web-page is not reachable, can't be found, or times out, an error is returned.

In the event that Access is Denied an error is also returned.

The form data included must be in standard HTML form encoded format. Example: On a form with inputs for UserName and Password, use: "UserName"="MyName"&"Password"="myPassword"



Function arguments



Parameter

Variable Type

Description



$url

String

The URL of the website to retrieve data from.



$userName

String

The user name to supply for authentification credentials. If authentification is not required, this string should be empty.



$password

String

The password to supply for authentification credentials. If authentication is not required, this string should be empty.



$domain

String

The domain to supply for authentification credentials. If authentification is not required, this string should be empty.



$returnVarType

String

The type of variable that should be returned to the script. Valid entries are: "String"

"WebResponse"

"None"





$formData

String

The data to be submitted to the url before getting the return data.



$retryCount

Integer

The number of attempts to retry before returning a failure.





Return parameters



Parameter

Variable Type

Description



$returnVar

String or Object

Either a string containing the HTML contents of a web-page are returned, or a WebResponse object which can then be passed to other HTTP functions. If "None" is specified as the return type, no variable will be returned to the test script.





Example:





// Get the data from a web page that wants to know your UserName and Password.

$url = "http://www.google.com";

$userName = "";

$password = "";

$domain = "";

$returnType = "String";

$formData = "\"UserName\"=\"MyUserName\"&\"Password\"=\"MyPassWord\""; //Escape quote marks within the string.

$retry = 5;



$webData = HTTP_SubmitForm($url, $userName, $password, $domain, $returnType, $formData, $retry);





HTTP_SubmitFormWithContentType

Previous Top Next



* * *



HTTP_SubmitFormWithContentType



Usage:

$returnVar = HTTP_SubmitFormWithContentType($url, $userName, $password, $domain, $returnVarType, $formData, $contentType, $retryCount);



Description:

This function accesses the requested URL destination via HTTP, submits the form data and returns either a WebResponse object or a String containing the contents of the web page. If the web page requires authentification credentials, they can be supplied with the $userName, $password, and $domain arguments. In the event that the authentication arguments are left blank, they are ignored. The $returnVariableType determines whether this function should return a reference to the WebResponse object to the script, or if a string containing the HTML contents of the web-page should be returned to the script interpreter.





Remarks:

If the web-page is not reachable, can't be found, or times out, an error is returned.

In the event that Access is Denied an error is also returned.

The form data included must be in standard HTML form encoded format. Example: On a form with inputs for UserName and Password, use: "UserName"="MyName"&"Password"="myPassword"



Function arguments



Parameter

Variable Type

Description



$url

String

The URL of the website to retrieve data from.



$userName

String

The user name to supply for authentification credentials. If authentification is not required, this string should be empty.



$password

String

The password to supply for authentification credentials. If authentication is not required, this string should be empty.



$domain

String

The domain to supply for authentification credentials. If authentification is not required, this string should be empty.



$returnVarType

String

The type of variable that should be returned to the script. Valid entries are: "String"

"WebResponse"





$formData

String

The data to be submitted to the url before getting the return data.



$contentType

String

The content type to be specified in the send header. Examples: "application/x-www-form-urlencoded"

"application/xml; charset=iso-8859-1"





$retryCount

Integer

The number of attempts to retry before returning a failure.





Return parameters



Parameter

Variable Type

Description



$returnVar

String or Object

Either a string containing the HTML contents of a web-page are returned, or a WebResponse object which can then be passed to other HTTP functions.





Example:





// Get the data from a web page that wants to know your UserName and Password.

$url = "http://www.google.com";

$userName = "";

$password = "";

$domain = "";

$returnType = "String";

$formData = "\"UserName\"=\"MyUserName\"&\"Password\"=\"MyPassWord\""; //Escape quote marks within the string.

$contentType = "application/x-www-form-urlencoded";

$retry = 5;



$webData = HTTP_SubmitFormWithContentType($url, $userName, $password, $domain, $returnType, $formData, $contentType, $retry);





AA_Adaptor_I2C_BitRate_Set

Previous Top Next



* * *



AA_Adaptor_I2C_BitRate_Set



Usage:

$bitRateCurrent = AA_Adaptor_I2C_BitRate_Set($adaptorHandle, $bitRate);





Description:

This function will set the adaptor to the specified bit rate.





Remarks:

· The USB driver "TotalPhazeUSB-v2.02.exe" must be installed to use this function.

Function arguments



Parameter

Variable Type

Description



$adaptorHandle

Object

The instance of the adaptor that was opened using AA_Adaptor_I2CSPI_Open_With_Config.



$bitRate

Integer

The bit rate to set on the adaptor.





Return parameters



Parameter

Variable Type

Description



$bitRateCurrent

Integer

The actual bit rate that was set after this function has executed.





Example(s):

$adaptSN = "2237419378";

$portID = AA_Adaptor_Get_PortID_By_SN($adaptSN);





// Get a handle to the adaptor.

$adaptConfig = "SPI_I2C";

$powerConfig = "POWER_BOTH";

$adaptorHandle = AA_Adaptor_I2CSPI_Open_With_Config($portID, $adaptConfig, $powerConfig);





// Set the bit rate on the adaptor to 400kHz.

$bitRate = 400;

$currentRate = AA_Adaptor_I2C_BitRate_Set($adaptorHandle, $bitRate);





AA_Adaptor_Get_PortID_By_SN

Previous Top Next



* * *



AA_Adaptor_Get_PortID_By_SN



Usage:

$PortID = AA_Adaptor_Get_PortID_By_SN($adaptorSN);





Description:

This function gets the I2C adaptor port ID of the adaptor specified by the serial number.





Remarks:

· The USB driver "TotalPhazeUSB-v2.02.exe" must be installed to use this function.

· The serial number can be found using the Aardvark GUI.exe program.

Function arguments



Parameter

Variable Type

Description



$adaptorSN

String

The serial number of the adaptor.





Return parameters



Parameter

Variable Type

Description



$PortID

Integer

The Port ID of the specified adaptor. The test will be Failed if the adaptor is not found.





Example(s):

// Get the port ID for adaptor SN "2237419378".

$adaptorSN = "2237419378";

$PortID = AA_Adaptor_Get_PortID_By_SN($adaptorSN);





AA_Adaptor_I2CSPI_Close

Previous Top Next



* * *



AA_Adaptor_I2CSPI_Close



Usage:

AA_Adaptor_I2CSPI_Close($adaptorHandle);





Description:

This function will close communications with the specified I2C adaptor.





Remarks:

· The USB driver "TotalPhazeUSB-v2.02.exe" must be installed to use this function.

Function arguments



Parameter

Variable Type

Description



$adaptorHandle

Object

The instance of the adaptor that was opened using AA_Adaptor_I2CSPI_Open_With_Config





Return parameters



Parameter

Variable Type

Description



None.





Example(s):

AA_Adaptor_I2CSPI_Close($adaptorHandle);





AA_Adaptor_I2CSPI_Open_With_Config

Previous Top Next



* * *



AA_Adaptor_I2CSPI_Open_With_Config



Usage:

$adaptorHandle = AA_Adaptor_I2CSPI_Open_With_Config($portID, $adaptorConfig, $powerConfig);





Description:

This function will open communication through an adaptor using the specified configuration





Remarks:

· The USB driver "TotalPhazeUSB-v2.02.exe" must be installed to use this function.

· The Power configuration is only required when opening communications with an I2C adaptor (it is not required for SPI adaptors).

Function arguments



Parameter

Variable Type

Description



$portID

Integer

The adaptor Port ID. This can be found using the function AA_Adaptor_Get_PortID_By_SN.



$adaptorConfig

String

The adaptor mode. Valid inputs are:

· SPI_I2C

· GPIO_I2C

· SPI_GPIO

· GPIO_ONLY

· QUERY



$powerConfig

String

The adaptor power option (I2C Only). Valid inputs are:

· POWER_NONE

· POWER_BOTH

· POWER_QUERY





Return parameters



Parameter

Variable Type

Description



$adaptorHandle

Object

A pointer to this instance of the adaptor driver.





Example(s):

// Get the portID first.

$adaptSN = "2237419378";

$portID = AA_Adaptor_Get_PortID_By_SN($adaptSN);





// Get a handle to the adaptor.

$adaptConfig = "SPI_I2C";

$powerConfig = "POWER_BOTH";

$adaptorHandle = AA_Adaptor_I2CSPI_Open_With_Config($portID, $adaptConfig, $powerConfig);





AA_Adaptor_I2C_Host_Read

Previous Top Next



* * *



AA_Adaptor_I2C_Host_Read



Usage:

$dataRead = AA_Adaptor_I2C_Host_Read($adaptorHandle, $slaveAddress, $expectedLength);





Description:

This function will read data from the specified slave address.





Remarks:

· The USB driver "TotalPhazeUSB-v2.02.exe" must be installed to use this function.

Function arguments



Parameter

Variable Type

Description



$adaptorHandle

Object

The instance of the adaptor that was opened using AA_Adaptor_I2CSPI_Open_With_Config.



$slaveAddress

String

The slave device address in hexadecimal. Example: "5E"



$expectedLength

Integer

The number of bytes expected to be returned by the slave device.





Return parameters



Parameter

Variable Type

Description



$dataRead

String

The data read from the slave device.





Example(s):

$adaptSN = "2237419378";

$portID = AA_Adaptor_Get_PortID_By_SN($adaptSN);





// Get a handle to the adaptor.

$adaptConfig = "SPI_I2C";

$powerConfig = "POWER_BOTH";

$adaptorHandle = AA_Adaptor_I2CSPI_Open_With_Config($portID, $adaptConfig, $powerConfig);





// Read 10 bytes from slave device at address 5E.

$slaveAdd = "5E";

$expect = 10;

$dataRead = AA_Adaptor_I2C_Host_Read($adaptorHandle, $slaveAdd, $expect);





AA_Adaptor_I2C_Host_Write

Previous Top Next



* * *



AA_Adaptor_I2C_Host_Write



Usage:

$wBytes = AA_Adaptor_I2C_Host_Write($adaptorHandle, $slaveAddress, $hexData);





Description:

This function will write data to the specified slave address.





Remarks:

· The USB driver "TotalPhazeUSB-v2.02.exe" must be installed to use this function.

Function arguments



Parameter

Variable Type

Description



$adaptorHandle

Object

The instance of the adaptor that was opened using AA_Adaptor_I2CSPI_Open_With_Config.



$slaveAddress

String

The slave device address in hexadecimal. Example: "5E"



$hexData

String

Hexadecimal data in a string.





Return parameters



Parameter

Variable Type

Description



$wBytes

Integer

The number of bytes written to the target.





Example(s):

$adaptSN = "2237419378";

$portID = AA_Adaptor_Get_PortID_By_SN($adaptSN);





// Get a handle to the adaptor.

$adaptConfig = "SPI_I2C";

$powerConfig = "POWER_BOTH";

$adaptorHandle = AA_Adaptor_I2CSPI_Open_With_Config($portID, $adaptConfig, $powerConfig);





// Write "02 F9 01 FA" to slave device at address 5E.

$slaveAdd = "5E";

$hexData = "02 F9 01 FA";

$numBytes = AA_Adaptor_I2C_Host_Write($adaptorHandle, $slaveAdd, $hexData);





AA_Adaptor_I2C_TargetPower_Set

Previous Top Next



* * *



AA_Adaptor_I2C_TargetPower_Set



Usage:

AA_Adaptor_I2C_TargetPower_Set($adaptorHandle, $powerConfig);





Description:

This function will set the adaptor's power mode.





Remarks:

· The USB driver "TotalPhazeUSB-v2.02.exe" must be installed to use this function.

Function arguments



Parameter

Variable Type

Description



$adaptorHandle

Object

The instance of the adaptor that was opened using AA_Adaptor_I2CSPI_Open_With_Config.



$powerConfig

String

The adaptor power option (I2C Only). Valid inputs are:

· POWER_NONE

· POWER_BOTH

· POWER_QUERY





Return parameters



Parameter

Variable Type

Description



None.





Example(s):

$adaptSN = "2237419378";

$portID = AA_Adaptor_Get_PortID_By_SN($adaptSN);





// Get a handle to the adaptor.

$adaptConfig = "SPI_I2C";

$powerConfig = "POWER_BOTH";

$adaptorHandle = AA_Adaptor_I2CSPI_Open_With_Config($portID, $adaptConfig, $powerConfig);





// Change the Power Config to "None".

$newPowConfig = "POWER_NONE";

AA_Adaptor_I2C_TargetPower_Set($adaptorHandle, $newPowConfig);





USBI2cIo_Close

Previous Top Next



* * *



USBI2cIo_Close

Usage:

UsbI2cIo_Close($USBIO_DeviceHandle);

Description:

This function closes the USB session with a DevaSys I2C board specified by the USBIO_DeviceHandle handle variable which was previously opened by the UsbI2cIo_Open function.

Function Arguments



Parameter

Variable Type

Description



$USBIO_DeviceHandle

Integer

The handle of the device which is to be closed.





Return Parameters



Parameter

Variable Type

Description





none





UsbI2cIo Examples

Previous Top Next



* * *



Opening a session with the DevaSys:



$USBIO_DeviceNumber = New("Integer",0);

$USBIO_SlaveDeviceAddres = HexStringToInteger("34");

$USBIO_TransactionType = New("String", "I2C_TRANS_8ADR");

$USBIO_MemoryAddress = HexStringToInteger("00");

$USBIO_WordCount = HexStringToInteger("05");

$USBIO_WriteBuffer = New("String", "01 FF AA BB DD 00 01 03");

$USBIO_DeviceHandle = UsbI2cIo_Open($USBIO_DeviceNumber);





Writing operations:

Lets write a single byte of 0x78 to address 0x1A inside device 0x34

$USBIO_MemoryAddress = HexStringToInteger("1A");

$USBIO_WriteBuffer = New("String", "78");

$USBIO_WordCount = HexStringToInteger("01");

UsbI2cIo_I2cWrite($USBIO_DeviceHandle,$USBIO_SlaveDeviceAddres,

$USBIO_MemoryAddress, $USBIO_WordCount, $USBIO_TransactionType,

$USBIO_WriteBuffer);





//we could also use the followign format: since 0x34 = 52 and 0x1A = 26

//UsbI2cIo_I2cWrite($USBIO_DeviceHandle,52, 26, 1, "I2C_TRANS_8ADR", "78");





Read operations:





($returnBufferStr,$returnBufferIntArray,$returnBufferStrArray) =

UsbI2cIo_I2cRead($USBIO_DeviceHandle,$USBIO_SlaveDeviceAddres, $USBIO_MemoryAddress, $USBIO_WordCount, $USBIO_TransactionType);



UpdateStatus($returnBufferStr);



UpdateStatus($returnBufferIntArray);

$Value = ArrayGetValue($returnBufferIntArray,1,0);

UpdateStatus($Value);

$Value = ArrayGetValue($returnBufferIntArray,1,1);

UpdateStatus($Value);

$Value = ArrayGetValue($returnBufferIntArray,1,2);

UpdateStatus($Value);

$Value = ArrayGetValue($returnBufferIntArray,1,3);

UpdateStatus($Value);

$Value = ArrayGetValue($returnBufferIntArray,1,4);

UpdateStatus($Value);



UpdateStatus($returnBufferStrArray);

$Value = ArrayGetValue($returnBufferStrArray,1,0);

UpdateStatus($Value);

$Value = ArrayGetValue($returnBufferStrArray,1,1);

UpdateStatus($Value);

$Value = ArrayGetValue($returnBufferStrArray,1,2);

UpdateStatus($Value);

$Value = ArrayGetValue($returnBufferStrArray,1,3);

UpdateStatus($Value);

$Value = ArrayGetValue($returnBufferStrArray,1,4);

UpdateStatus($Value);



For more info and tools on troubleshooting go to www.devasys.com DevaSys has a program called Debug Voyeur that can be used to monitor the operations between the control computer and the I2C USB device, this is very helpful in debugging script functions.





UsbI2cIo_I2cRead

Previous Top Next



* * *



USBI2cIo_I2cRead

Usage:



($returnBufferStr,$returnBufferIntArray,$returnBufferStrArray) = UsbI2cIo_I2cRead

(

$USBIO_DeviceHandle,

$USBIO_SlaveDeviceAddres,

$USBIO_MemoryAddress,

$USBIO_WordCount,

$USBIO_TransactionType

);





Description:

This function assumes that a session with the DevaSys Usb I2C device has already been initiated and that the handle is contained in the USBIO_DeviceHandle argument. This function performs a read operation from a device with the addresses specified in the $USBIO_SlaveDeviceAddres and $USBIO_MemoryAddress arguments.

The USBIO_TransactionType variable determines the transaction type and weather the USBIO_MemoryAddress variable is used, see the table below for further details.

Function Arguments



Parameter

Variable Type

Description



USBIO_DeviceHandle

Integer

This is the device handle obtained fromt he UsbI2cIo_Open function call.



USBIO_SlaveDeviceAddres

Integer

This is the address of the device with which we want to communicate. The address in the script must match the address setting of the end device with which we want to communicate.



USBIO_MemoryAddress

Integer

Depending on the Transaction Type (see below) the MemorryAddress can be used to specify the internal address of the device. See I2C spec for further details.



USBIO_WordCount

Integer

The number of bytes we want to read.



USBIO_TransactionType

String

There are 4 types of Transaction Types supported by the DevaSysDevice and the transaction types determine how the device is addressed internally

I2C_TRANS_NOADR: read or write with no address cycle

I2C_TRANS_8ADR: read or write with 8 bit address cycle

I2C_TRANS_16ADR: read or write with 16 bit address cycle

I2C_TRANS_NOADR_NS: read or write with no address cycle, stop signaling suppressed





Return Parameters



Parameter

Variable Type

Description



returnBufferStr

String

Contains the contents of the return buffer as a string each byte being delimited by a space.



returnBufferIntArray

IntArray

Contains the contents of the return buffer as an Integer array.



returnBufferStrArray

StrArray

Contains the contents of the return buffer as a string array.





UsbI2CIo_Open

Previous Top Next



* * *



USBI2cIo_Open

Usage:

$USBIO_DeviceHandle = UsbI2cIo_Open($USBIO_DeviceNumber);

Description:

This function opens a USB session with a DevaSys I2C board specified by the USBIO_DeviceNumber argument. This function checks that there is at least one device connected to the Computer and if none are present it aborts. If at least one device is present the functions attempts to obtain a handle to the device through the dll supplied by DevaSys as part of the driver.

Function Arguments



Parameter

Variable Type

Description



$USBIO_DeviceNumber

Integer

The DevaSys devices are usually assigned sequential numbers so if only one device is plugged in it will be device 0, if more than one devices are plugged in they will be numbered sequentially.





Return Parameters



Parameter

Variable Type

Description



$USBIO_DeviceHandle

Ineger

The function returns an object of type Ingeger which can be passed to the other UsbI2CIo script commands.





UsbI2cIo_Write

Previous Top Next



* * *



USBI2cIo_I2cWrite

Usage:



UsbI2cIo_I2cWrite

(

$USBIO_DeviceHandle,

$USBIO_SlaveDeviceAddres,

$USBIO_MemoryAddress,

$USBIO_WordCount,

$USBIO_TransactionType,

$USBIO_WriteBuffer);





Description:

This function assumes that a session with the DevaSys Usb I2C device has already been initiated and that the handle is contained in the USBIO_DeviceHandle argument. This function performs a write operation to the device with the addresses specified in the $USBIO_SlaveDeviceAddres and $USBIO_MemoryAddress arguments.

The USBIO_TransactionType variable determines the transaction type and weather the USBIO_MemoryAddress variable is used, see the table below for further details.

Function Arguments



Parameter

Variable Type

Description



USBIO_DeviceHandle

Integer

This is the device handle obtained fromt he UsbI2cIo_Open function call.



USBIO_SlaveDeviceAddres

Integer

This is the address of the device with which we want to communicate. The address in the script must match the address setting of the end device with which we want to communicate.



USBIO_MemoryAddress

Integer

Depending on the Transaction Type (see below) the MemorryAddress can be used to specify the internal address of the device. See I2C spec for further details.



USBIO_WordCount

Integer

The number of bytes we want to read.



USBIO_TransactionType

String

There are 4 types of Transaction Types supported by the DevaSysDevice and the transaction types determine how the device is addressed internally

I2C_TRANS_NOADR: read or write with no address cycle

I2C_TRANS_8ADR: read or write with 8 bit address cycle

I2C_TRANS_16ADR: read or write with 16 bit address cycle

I2C_TRANS_NOADR_NS: read or write with no address cycle, stop signaling suppressed



USBIO_WriteBuffer

String

A space delimited string of bytes to be written to the device, for example "00 00 1F FF"





Return Parameters



Parameter

Variable Type

Description



None





TelosMasterReceiver

Previous Top Next



* * *



TelosMasterReceiver



Usage:

$Data = TelosMasterReceiver($DeviceNumber, $Address, $NrOfBytes, $ClockSpeed);



Description:

This function reads data as master transmitter from an I2C device.



Remarks:

· This function requires Telos I2C framework to be installed on the system (I2C studio V4.3.1+). Previous versions will no longer function with this library.

· This function is tested with a Connii MM.

Function arguments



Parameter

Variable Type

Description



$DeviceNumber

Integer

The number of Telos I2C device you want to use.



$Address

String

The 7 bit i2C address

Reference the Telos manual and interface



$Data

String

The Hex data.

None Hex characters will be ignored



$ClockSpeed

Integer

The speed: 100000 represents 100Khz.

All other values will use default the highest speed of 400Khz





Return parameters



Parameter

Variable Type

Description



$Data

String

The data you requested to read at an address.

Each byte is seperated with a space.





Example(s):

$Data = TelosMasterReceiver(1, "33", "2", 100000);





TelosMasterTransmitter

Previous Top Next



* * *



TelosMasterTransmitter



Usage:

TelosMasterTransmitter($DeviceNumber, $Address, $Data, $ClockSpeed);



Description:

This function sents data as master transmitter to an I2C device.



Remarks:

· This function requires Telos I2C framework to be installed on the system (I2C studio V4.3.1+). Previous versions will no longer function with this library.

· This function is tested with a Connii MM.

Function arguments



Parameter

Variable Type

Description



$DeviceNumber

Integer

The number of Telos I2C device you want to use.



$Address

String

The 7 bit i2C address

Reference the Telos manual and interface



$Data

String

The Hex data.

None Hex characters will be ignored



$ClockSpeed

Integer

The speed: 100000 represents 100Khz.

All other values will use default the highest speed of 400Khz





Return parameters



Parameter

Variable Type

Description





Example(s):

TelosMasterTransmitter(1, "33", "C3 C3", 100000);





Telos_I2C_Close

Previous Top Next



* * *



Telos_I2C_Close



Usage:

Telos_I2C_Close($board);



Description:

This function closes a board object to the defined board type and the serial number.



Remarks:

· This function requires Telos I2C framework to be installed on the system (I2C studio V4.3.1+). Previous versions will no longer function with this library.

· This function is tested with a Connii MM.

· When there occurs an error during the execution of the low level functions, Jabil Test will fail and return the error message.

· The function will verify if the given parameter exists, otherwise Jabil Test fails and returns the error message.

· The functions TelosMasterTransmitter and TelosMasterReceiver are opening and closing the interface during every function execution. The open interface is time consuming. With the function Telos_I2C_Initialize, we are able to open the interface and leave it in that state. Now we don't lose time with the Telos_I2C_MasterTransmitter and Telos_I2C_MasterReceiver functions. We use the Telos_I2C_Close function to close the connection once we are done with it.

Function arguments



Parameter

Variable Type

Description



$board

Object

Handle for the I2C board created with Telos_I2C_Initialize





Return parameters



Parameter

Variable Type

Description





Example(s):

Telos_I2C_Close($board);





Telos_I2C_Initialize

Previous Top Next



* * *



Telos_I2C_Initialize



Usage:

$board = Telos_I2C_Initialize($BoardTypeName, $SerialNumber);



Description:

This function opens a board object to the defined board type and the serial number. When your are finished using the Telos device, execute the Telos_I2C_Close to destroy the $board object.



Remarks:

· This function requires Telos I2C framework to be installed on the system (I2C studio V4.3.1+). Previous versions will no longer function with this library.

· This function is tested with a Connii MM.

· When there occurs an error during the execution of the low level functions, Jabil Test will fail and return the error message.

· The function will verify if the given parameter exists, otherwise Jabil Test fails and returns the error message.

· The functions TelosMasterTransmitter and TelosMasterReceiver are opening and closing the interface during every function execution. The open interface is time consuming. With the function Telos_I2C_Initialize, we are able to open the interface and leave it in that state. Now we don't lose time with the Telos_I2C_MasterTransmitter and Telos_I2C_MasterReceiver functions.

Function arguments



Parameter

Variable Type

Description



$BoardTypeName

String

Board type of the board to be opened.

Possible values:

· "DUMMY" : dummy device.

· "CONNII" : I2C Fast Mode Interface for USB, Single Master.

· "CONNII_MM" : I2C Fast Mode Interface for USB, I2C Multimaster

· "TRACII_400" : Fast Mode I2C Monitor and Interface

· "TRACII_XL" : I2C High Speed Interface for USB

· "TRACII_XL2" : I2C High Speed Interface for USB



$SerialNumber

String

The serial number of the board to be opened (hexadecimal value). You can find the serial number of the Telos hardware on the box identify sticker or in the I2C studio application in the left bottom corner.





Return parameters



Parameter

Variable Type

Description



$board

Object

Handle for the I2C board.





Example(s):

$board = Telos_I2C_Initialize("CONNII_MM", "6489");





Telos_I2C_MasterCombined

Previous Top Next



* * *



Telos_I2C_MasterCombined



Usage:

$Data = Telos_I2C_MasterCombined($board, $I2C_Address, $Data_To_Send, $Bytes_To_Read, $Clock_Speed);



Description:

This function executes a master combined transfer. The combined mode transfer consists of one master transmitter transfer and one master receiver transfer. On the I2C bus the transfer looks like START, ADDR/W, DATA, START, ADDR/R, DATA, STOP



Remarks:

· This function requires Telos I2C framework to be installed on the system (I2C studio V4.3.1+). Previous versions will no longer function with this library.

· This function is tested with a Telos CONNII_MM 2.0 device.

· If this function returns an error, it will fail the test, but it will not close the connection. The connection must be closed in the Fail or Finalize functions of the script. Us the function Telos_I2C_Close.

Function arguments



Parameter

Variable Type

Description



$board

Object

Handle for the I2C board.



$I2C_Address

String

The 7 bit i2C address. Reference the Telos manual and interface for more information.



$Data_To_Send

String

The Hex data.

None Hex characters will be ignored



$Bytes_To_Read

Integer

Number of bytes to read after transmit of the data to send.



$Clock_Speed

Integer

The speed: 100000 represents 100Khz.

All other values will use default the highest speed of 400Khz





Return parameters



Parameter

Variable Type

Description



$Data

String

Bytes returned by I2C slave.





Example(s):

$ReturnValues = Telos_I2C_MasterCombined($objTelos, "59", "05 04 02 81 8D BD", 3, 400000);





Telos_I2C_MasterCombinedBool

Previous Top Next



* * *



Telos_I2C_MasterCombinedBool



Usage:

($Data,$Status) = Telos_I2C_MasterCombinedBool($board, $I2C_Address, $Data_To_Send, $Bytes_To_Read, $Clock_Speed);



Description:

This function executes a master combined transfer. The combined mode transfer consists of one master transmitter transfer and one master receiver transfer. On the I2C bus the transfer looks like START, ADDR/W, DATA, START, ADDR/R, DATA, STOP



Remarks:

· This function requires Telos I2C framework to be installed on the system (I2C studio V4.3.1+). Previous versions will no longer function with this library.

· This function is tested with a Telos CONNII_MM 2.0 device.

· If this function returns an error, it will fail the test, but it will not close the connection. The connection must be closed in the Fail or Finalize functions of the script. Us the function Telos_I2C_Close.

Function arguments



Parameter

Variable Type

Description



$board

Object

Handle for the I2C board.



$I2C_Address

String

The 7 bit i2C address. Reference the Telos manual and interface for more information.



$Data_To_Send

String

The Hex data.

None Hex characters will be ignored



$Bytes_To_Read

Integer

Number of bytes to read after transmit of the data to send.



$Clock_Speed

Integer

The speed: 100000 represents 100Khz.

All other values will use default the highest speed of 400Khz





Return parameters



Parameter

Variable Type

Description



$Data

String

Bytes returned by I2C slave.



$Status

Boolean

False if an error occurred during the master combined transfer. True if no error.





Example(s):

($ReturnValues, $Status) = Telos_I2C_MasterCombinedBool($objTelos, "59", "05 04 02 81 8D BD", 3, 400000);





Telos_I2C_MasterReceiver

Previous Top Next



* * *



Telos_I2C_MasterReceiver



Usage:

$bytes = Telos_I2C_MasterReceiver($board, $I2C_Address, $Nr_Of_Bytes, $Clock_Speed);



Description:

This function reads data as master transmitter from an I2C device.



Remarks:

· This function requires Telos I2C framework to be installed on the system (I2C studio V4.3.1+). Previous versions will no longer function with this library.

· This function is tested with a Connii MM.

· When there occurs an error during the execution of the low level functions, Jabil Test will fail and return the error message.

· The function will verify if the given parameter exists, otherwise Jabil Test fails and returns the error message.

· The functions TelosMasterTransmitter and TelosMasterReceiver are opening and closing the interface during every function execution. The open interface is time consuming. With the function Telos_I2C_Initialize, we are able to open the interface and leave it in that state. Now we don't lose time with the Telos_I2C_MasterTransmitter and Telos_I2C_MasterReceiver functions.

· Be sure to execute first the function Telos_I2C_Initialize to estabilish a connection to the Telos hardware.

· If this function returns an error, it will fail the test, but it will not close the connection. The connection must be closed in the Fail or Finalize functions of the script. Us the function Telos_I2C_Close.

Function arguments



Parameter

Variable Type

Description



$board

Object

Handle for the I2C board.



$I2C_Address

String

The 7 bit i2C address. Reference the Telos manual and interface for more information.



$Nr_Of_Bytes

Integer

The amount of bytes you want to read.



$Clock_Speed

Integer

The speed: 100000 represents 100Khz.

All other values will use default the highest speed of 400Khz





Return parameters



Parameter

Variable Type

Description



$bytes

String

The data you requested to read at an address.

Each byte is separated with a space.





Example(s):

$I2C_Address = New("String", "01");

$Nr_Of_Bytes = New("Integer", 8);

$Clock_Speed = New("Integer", 100000);

$bytes = Telos_I2C_MasterReceiver($board, $I2C_Address, $Nr_Of_Bytes, $Clock_Speed);





Telos_I2C_MasterTransmitter

Previous Top Next



* * *



Telos_I2C_MasterTransmitter



Usage:

Telos_I2C_MasterTransmitter($board, $I2C_Address, $Data_To_Send, $Clock_Speed);



Description:

This function sends data as master transmitter to an I2C device.



Remarks:

· This function requires Telos I2C framework to be installed on the system (I2C studio V4.3.1+). Previous versions will no longer function with this library.

· This function is tested with a Connii MM.

· When there occurs an error during the execution of the low level functions, Jabil Test will fail and return the error message.

· The function will verify if the given parameter exists, otherwise Jabil Test fails and returns the error message.

· The functions TelosMasterTransmitter and TelosMasterReceiver are opening and closing the interface during every function execution. The open interface is time consuming. With the function Telos_I2C_Initialize, we are able to open the interface and leave it in that state. Now we don't lose time with the Telos_I2C_MasterTransmitter and Telos_I2C_MasterReceiver functions.

· Be sure to execute first the function Telos_I2C_Initialize to estabilish a connection to the Telos hardware.

· If this function returns an error, it will fail the test, but it will not close the connection. The connection must be closed in the Fail or Finalize functions of the script. Us the function Telos_I2C_Close.

Function arguments



Parameter

Variable Type

Description



$board

Object

Handle for the I2C board.



$I2C_Address

String

The 7 bit i2C address. Reference the Telos manual and interface for more information.



$Data_To_Send

String

The Hex data.

None Hex characters will be ignored



$Clock_Speed

Integer

The speed: 100000 represents 100Khz.

All other values will use default the highest speed of 400Khz





Return parameters



Parameter

Variable Type

Description





Example(s):

$I2C_Address = New("String", "01");

$Data_To_Send = New("String", "53 43 01");

$Clock_Speed = New("Integer", 100000);

Telos_I2C_MasterTransmitter($board, $I2C_Address, $Data_To_Send, $Clock_Speed);





RedRat_irNetBox_Close

Previous Top Next



* * *



RedRat_irNetBox_Close



Usage:

RedRat_irNetBox_Close($RedRatHandle);



Description:

· This function requires the .NET Framework 1.1 and development environment (SDK, VisualStudio .NET or other).

· This function requires The RedRat SDK. You can download the RedRat SDK from http://www.redrat.co.uk/SDK

· First you have to assign an IP address to the RedRat irNetBox device to be able to use it:

· Ensure that your irNetBox is connected to the same network as your computer, start the XPort Installer application (installed by default under Lantronix -> Device Installer), then press Search.

· Your NetBox will appear as an XPort in the list, so select it and press Assign IP.

· A wizard will start that will allow you to configure the IP settings. Once complete, the device reboots and will then be seen with its new IP address.

· If you have given it a fixed IP address, but want to return to using DHCP, then set all fields in the IP settings page to 0.0.0.0.

IMPORTANT: Do not adjust the "OEM configurable pins" or the "Ports" values as this will stop the XPort communicating with the IR I/O processor.



The closing step closes the session and deallocates any resources the session used.



Remarks:

· This function is tested with a irNetBox-Pro device.



Result:

RedRat_irNetBox_Close($RedRatHandle);

Function arguments



Parameter

Variable Type

Description



$RedRatHandle

Object

The instrument handle you obtain from RedRat_irNetBox_Init that identifies a particular instrument's session.





Return parameters



Parameter

Variable Type

Description





Example(s):

RedRat_irNetBox_Close($RedRatHandle);





RedRat_irNetBox_Init

Previous Top Next



* * *



RedRat_irNetBox_Init



Usage:

$RedRatHandle = RedRat_irNetBox_Init($IPAddress, $MACAddress);



Description:

· This function requires the .NET Framework 1.1 and development environment (SDK, VisualStudio .NET or other).

· This function requires The RedRat SDK. You can download the RedRat SDK from http://www.redrat.co.uk/SDK

· First you have to assign an IP address to the RedRat irNetBox device to be able to use it:

· Ensure that your irNetBox is connected to the same network as your computer, start the XPort Installer application (installed by default under Lantronix -> Device Installer), then press Search.

· Your NetBox will appear as an XPort in the list, so select it and press Assign IP.

· A wizard will start that will allow you to configure the IP settings. Once complete, the device reboots and will then be seen with its new IP address.

· If you have given it a fixed IP address, but want to return to using DHCP, then set all fields in the IP settings page to 0.0.0.0.

· IMPORTANT: Do not adjust the "OEM configurable pins" or the "Ports" values as this will stop the XPort communicating with the IR I/O processor.



The user has to provide the MAC address and the IP address of the RedRat device. When the function finds such a device, we create an object that we use to communicate with the RedRat device.



Remarks:

· This function is tested with a irNetBox-Pro device.



Result:





$RedRatHandle = RedRat_irNetBox_Init($IPAddress, $MACAddress);

Function arguments



Parameter

Variable Type

Description



$IPAddress

String

The IP address that you assigned to the irNetBox device. This IP address is stored in the registry together with the MAC address.



$MACAddress

String

The MAC address of the irNetBox device.





Return parameters



Parameter

Variable Type

Description



$RedRatHandle

Object

The RedRat irNetBox handle to use in further functions





Example(s):





$RedRatHandle = RedRat_irNetBox_Init("172.29.6.49", "00-20-4A-8B-FA-91");





RedRat_irNetBox_SendFromFile

Previous Top Next



* * *



RedRat_irNetBox_SendFromFile



Usage:

RedRat_irNetBox_SendFromFile($RedRatHandle, $XmlFile, $SignalName, $Output);



Description:

· This function requires the .NET Framework 1.1 and development environment (SDK, VisualStudio .NET or other).

· This function requires The RedRat SDK. You can download the RedRat SDK from http://www.redrat.co.uk/SDK

· First you have to assign an IP address to the RedRat irNetBox device to be able to use it:

· Ensure that your irNetBox is connected to the same network as your computer, start the XPort Installer application (installed by default under Lantronix -> Device Installer), then press Search.

· Your NetBox will appear as an XPort in the list, so select it and press Assign IP.

· A wizard will start that will allow you to configure the IP settings. Once complete, the device reboots and will then be seen with its new IP address.

· If you have given it a fixed IP address, but want to return to using DHCP, then set all fields in the IP settings page to 0.0.0.0.

· IMPORTANT: Do not adjust the "OEM configurable pins" or the "Ports" values as this will stop the XPort communicating with the IR I/O processor.



The user can send IR-signals from a certain database on the specified output channel. That database is build with the RedRat tool "Signal DB Utility". You learn the IR signals with that tool and the signals will be saved into a database.



Remarks:

· This function is tested with a irNetBox-Pro device.



Result:





RedRat_irNetBox_SendFromFile($RedRatHandle, $XmlFile, $SignalName, $Output);

Function arguments



Parameter

Variable Type

Description



$RedRatHandle

Object

The RedRat handle created with the function RedRat_irNetBox_Init.



$XmlFile

String

This argument contains the path and the filename of the created database. This database contains all the signals the user wants to send.



$SignalName

String

This argument is the signal name in the database that the user wants to send.



$Output

Integer

The RedRat output the user wants to use to output the signal of the database.





Return parameters



Parameter

Variable Type

Description





Example(s):

RedRat_irNetBox_SendFromFile($RedRat4, "c:\\mytv.xml", "MyTV", "0", 6);





RedRat3USB_CaptureSignal

Previous Top Next



* * *



RedRat3USB_CaptureSignal



Usage:

RedRat3USB_CaptureSignal($InstrumentHandle,$SignalFileNameAndPath);





Description:

This function uses the RedRat3 IR device to capture an incoming IR signal and save the data collected to an XML file.





Function arguments



Parameter

Variable Type

Description



$InstrumentHandle

Object

The handle to the APX525 instrument session.



$SignalFileNameAndPath

String

Path and filename used for storing the captured IR data.





Return parameters



Parameter

Variable Type

Description



None

NA

NA





Usage Examples

RedRat3USB_CaptureSignal($InstrumentHandle,$SignalFileNameAndPath);





Supported Instruments

RedRat3 USB device





RedRat3USB_Close

Previous Top Next



* * *



RedRat3USB_Close



Usage:

RedRat3USB_Close($InstrumentHandle);





Description:

The close function terminates the software connection to the instrument and de-allocates system resources. It is generally a good programming habit to close the instrument handle when the program is done using the instrument.

Function arguments



Parameter

Variable Type

Description



$InstrumentHandle

Object

The handle of the instrument returned from the RedRat3USB_Init function





Return parameters



Parameter

Variable Type

Description



None





Usage Examples

RedRat3USB_Close($handle);





Supported Instruments

RedRat3 USB device





RedRat3USB_Init

Previous Top Next



* * *



RedRat3USB_Init



Usage:

$handle = RedRat3USB_Init($DeviceNo);





Description:

This function initializes a session with a RedRateUSB device and returns the handle to the test script.





Function arguments



Parameter

Variable Type

Description



$DeviceNo

Integer

The number of the RedRat3 device connected to the system. (i.e. If 2 RedRat3 USB devices are connected you may set $DeviceNo to 1 or 2.)





Return parameters



Parameter

Variable Type

Description



$handle

Object

The handle to the RedRat3 USB instrument session.





Usage Examples

$handle = RedRat3USB_Init($DeviceNo);





Supported Instruments

RedRat3 USB device





RedRat3USB_OutputSignal

Previous Top Next



* * *



RedRat3USB_OutputSignal



Usage:

RedRat3USB_OutputSignal($InstrumentHandle,$SignalFileNameAndPath);





Description:

This function uses the RedRat3 IR device to send the IR data contained in a stored XML file.





Function arguments



Parameter

Variable Type

Description



$InstrumentHandle

Object

The handle to the APX525 instrument session.



$SignalFileNameAndPath

String

Path and filename of the previously stored IR data to transmit.





Return parameters



Parameter

Variable Type

Description



None

NA

NA





Usage Examples

RedRat3USB_OutputSignal($InstrumentHandle,$SignalFileNameAndPath);





Supported Instruments

RedRat3 USB device





TIRA_CaptureToFile

Previous Top Next



* * *



TIRA_CaptureToFile

Usage:

TIRA_CaptureToFile($CaptureTime,$FileName);

Description:

The TIRA_xxx functions support the TIRA USB IR Transmitter from Home Electronics.

TIRA Website: http://www.home-electro.com/tira2.php

This command waits for an IR code to be received by the TIRA device, and saves it to a file in a proprietary binary format. The $CaptureTime argument specifies the maximum amount of time to wait for an IR code to be received. If no IR code is detected the function will exit after the $CaptureTime (in seconds) has expired. In the event that an IR code is received, the function saves it to the specified file and exits immediately.

Function Arguments



Parameter

Variable Type

Description



$RepeatCount

Integer

The number of times to transmit the IR code



$FileName

String

The full path to save the captured transmitted IR code.





Return Parameters



Parameter

Variable Type

Description



None





TIRA_Close

Previous Top Next



* * *



TIRA_Close

Usage:

TIRA_Close();

Description:

The TIRA_xxx functions support the TIRA USB IR Transmitter from Home Electronics.

TIRA Website: http://www.home-electro.com/tira2.php

This command closes the TIRA device and frees all the consumed resources.

Function Arguments



Parameter

Variable Type

Description



None





Return Parameters



Parameter

Variable Type

Description



None





TIRA_Init

Previous Top Next



* * *



TIRA_Init

Usage:

TIRA_Init($ComPort);

Description:

The TIRA_xxx functions support the TIRA USB IR Transmitter from Home Electronics.

TIRA Website: http://www.home-electro.com/tira2.php

This command initializes the TIRA device and prepares it to either capture IR codes or transmit previously captured IR codes.

Function Arguments



Parameter

Variable Type

Description



$ComPort

Integer

The Virtual USB COM port where the TIRA device is installed.





Return Parameters



Parameter

Variable Type

Description



None





TIRA_Receive

Previous Top Next



* * *



TIRA_ReceiveUsage:

$receivedCode = TIRA_Receive();

Description:

This command receives IR codes using the tira_get_ir_data function from Tira2.dll, the API dll supplied by vendor.

Function Arguments



Parameter

Variable Type

Description



None





Return Parameters



Parameter

Variable Type

Description



$receivedCode

String

Byte string in Hex format containing the six bytes of most recent received IR code.





The TIRA_xxx functions support the TIRA USB IR Transceiver from Home Electronics.

TIRA Website: http://www.home-electro.com/tira2.php





TIRA_SendFromFile

Previous Top Next



* * *



TIRA_SendFromFile

Usage:

TIRA_SendFromFile($RepeatCount,$FileName);

Description:

The TIRA_xxx functions support the TIRA USB IR Transmitter from Home Electronics.

TIRA Website: http://www.home-electro.com/tira2.php

This command sends an IR code that has been previously captured to a file using the TIRA_CaptureToFile command. The $RepeatCount argument specifies the number of times that the IR code will be repeated.

Function Arguments



Parameter

Variable Type

Description



$RepeatCount

Integer

The number of times to transmit the IR code



$FileName

String

The full path to the IR code file that has been previously created using the TIRA_CaptureToFile command.





Return Parameters



Parameter

Variable Type

Description



None





SerialClose

Previous Top Next



* * *



SerialClose



Usage:

SerialClose($comPort);



Description:

Closes an open Serial Port. If the port was already closed, no error is returned.



NOTE:

This function has been deprecated. Please use the Serial_Open, Serial_Close functions.

Function Arguments



Parameter

Variable Type

Description



$comPort

Object

The instance of the serial port to close. The $comPort object is created by a call to SerialOpen.





Return parameters



Parameter

Variable Type

Description



None.





Example:





SerialClose($comPort);





SerialCloseWithLogging

Previous Top Next



* * *



SerialCloseWithLogging

Usage:

SerialCloseWithLogging($comPort);

Description:

Closes an open Serial Port, and also closes and flushes the associated text log file. If the port was already closed when the function is run, no error is returned.

Important Note: This function should only be used to close a serial port which has been opened with the SerialOpenWithLogging function. If you are using a serial port that has been opened with the SerialOpen function, use the standard SerialClose function instead.

NOTE:

This function has been deprecated. Please use the Serial_OpenWithLogging, Serial_CloseWithLogging functions.

Function Arguments



Parameter

Variable Type

Description



$comPort

Object

The instance of the serial port to close. The $comPort object is created by a call to SerialOpenWithLogging.





Return parameters



Parameter

Variable Type

Description



None.





Example:





SerialCloseWithLogging($comPort);





SerialGetPortNumber

Previous Top Next



* * *



SerialGetPortNumber

Usage:

$comPortNumber = SerialGetPortNumber($ComObject);

Description:

This function retrieves the Com Port number associated with a comport object created using the SerialOpen function.



NOTE:

This function has been deprecated. Please use the Serial_GetPortNumber function.

Function Arguments



Parameter

Variable Type

Description



$ComObject

Object

The instance of the serial port object created by a call to SerialOpen.





Return parameters



Parameter

Variable Type

Description



$comPortNumber

Integer

The number of the com port associated with the comport scripting object.





Example:





$comPortNumber = SerialGetPortNumber($ComObject);





SerialHandshakingManualRead

Previous Top Next



* * *



SerialHandshakingManualRead

Usage:

$Status = SerialHandshakingManualRead ($comPort,$Pin);

Description:

This function can read the Handshaking of COM. The pre-condition is the COM initialize should be used SerialOpenWithHandshaking function and setting the Handshaking type as “None”.



NOTE:

This function has been deprecated. Please use the Serial_OpenWithHandshaking, Serial_HandshakingManualRead functions.

Function Arguments



Parameter

Variable Type

Description



$comPort

Object

The instance of the serial port object created by a call to SerialOpenWithHandshaking.





$Pin





String

The Pin for which handshaking will be controlled.

Value:

· “CTS”

· “DSR”

· “RI”

· “DCD”





Return parameters



Parameter

Variable Type

Description



$Status

Boolean

The status of the Pin.





Example:

// Read the “CTS” Pin.

$Status = SerialHandshakingManualRead($comPort,”CTS”);





SerialHandshakingManualSet

Previous Top Next



* * *



SerialHandshakingManualSet

Usage:

SerialHandshakingManualSet($comPort,$Pin,$Status);

Description:

This function is used to set the Handshaking of COM port. The pre-condition is that the COM port should be initialized using SerialOpenWithHandshaking and the Handshaking type set to “None”.



NOTE:

This function has been deprecated. Please use the Serial_OpenWithHandshaking, Serial_HandshakingManualSet functions.

Function Arguments



Parameter

Variable Type

Description



$ComObject

Object

The instance of the serial port object created by a call to SerialOpenWithHandshaking.





$Pin





String

The Pin for which Handshaking will be controlled.

Value:

· "RTS"

· "DTR"





$Status





String

The Status to set. Use "TRUE" to set the pin high and "FALSE" to set the pin low.

Value:

· "TRUE"

· "FALSE"





Return parameters



Parameter

Variable Type

Description



None.





Example:

// Set the “RTS” Pin to “1”.

SerialHandshakingManualSet($comPort, ”RTS”, ”TRUE”);





SerialOpen

Previous Top Next



* * *



SerialOpen

Usage:

$comObject = SerialOpen($comPort,$baudRate,$byteSize,$parity,$stopBits);

Description:

Opens a Serial port object for communication. The resulting object is then used with the other serial functions to support communication. In order to close the serial port after it has been opened, use the SerialClose function. If the specified comPort is in use, this function returns a failure.



NOTE:

This function has been deprecated. Please use the Serial_Open, Serial_Close functions.

Function Arguments



Parameter

Variable Type

Description



$comPort

Integer

The COM port you wish to open.





$baudRate





Integer

The baud rate to initialize the COM port at.

Values:

· 300

· 1200

· 2400

· 4800

· 9600

· 14400

· 19200

· 38400

· 115200



$byteSize

Integer

The number of data bits in each byte sent or received. Usually set to '7' or '8'.





$parity





String

The data parity to use.

Value:

· "E" = Even

· "N" = None (* Most common)

· "O" = Odd



$stopBits

Integer

The number of stop bits used for each byte sent or received.





Return parameters



Parameter

Variable Type

Description



$comObject

Object

The instance of a Serial Port Object that is returned.





Example:





$comPort = 3;

$baudRate = 9600;

$byteSize = 8;

$parity = "N";

$stopBits = 1;

$comObject = SerialOpen($comPort, $baudRate, $byteSize, $parity, $stopBits);





SerialOpenBool

Previous Top Next



* * *



SerialOpenBool

Usage:

($comObject, $success) = SerialOpenBool($comPort,$baudRate,$byteSize,$parity,$stopBits);

Description:

Opens a Serial port object for communication. The resulting object is then used with the other serial functions to support communication. In order to close the serial port after it has been opened, use the SerialClose function.



NOTE:

If the specified comPort can not be opened, this function will return a false in the $success variable.

This function has been deprecated. Please use the Serial_Open, Serial_Close functions.

Function Arguments



Parameter

Variable Type

Description



$comPort

Integer

The COM port you wish to open.





$baudRate





Integer

The baud rate to initialize the COM port at.

Values:

· 300

· 1200

· 2400

· 4800

· 9600

· 14400

· 19200

· 38400

· 115200



$byteSize

Integer

The number of data bits in each byte sent or received. Usually set to '7' or '8'.





$parity





String

The data parity to use.

Value:

· "E" = Even

· "N" = None (* Most common)

· "O" = Odd



$stopBits

Integer

The number of stop bits used for each byte sent or received.





Return parameters



Parameter

Variable Type

Description



$comObject

Object

The instance of a Serial Port Object that is returned.



$success

Boolean

Returns True if the functions succeeded and False otherwise.





Example:





$comPort = 3;

$baudRate = 9600;

$byteSize = 8;

$parity = "N";

$stopBits = 1;

($comObject, $success) = SerialOpenBool($comPort, $baudRate, $byteSize, $parity, $stopBits);





SerialOpenWithHandshaking

Previous Top Next



* * *



SerialOpenWithHandshaking

Usage:

$comObject = SerialOpenWithHandshaking($comPort, $baudRate, $byteSize, $parity, $stopBits, $handShakingMode);

Description:

Creates an Opens a Serial port object for communication. The resulting object is then used with the other serial functions to support communication. In order to close the serial port after it has been created, use the SerialClose function. If the specified comPort is in use, this function returns a failure.



NOTE:

This function has been deprecated. Please use the Serial_OpenWithHandshaking, Serial_Close functions.

Function Arguments



Parameter

Variable Type

Description



$comPort

Integer

The COM port you wish to open.





$baudRate





Integer

The baud rate to initialize the COM port at.

Values:

· 300

· 1200

· 2400

· 4800

· 9600

· 14400

· 19200

· 38400

· 115200



$byteSize

Integer

The number of data bits in each byte sent or received. Usually set to '7' or '8'.





$parity





String

The data parity to use.

Value:

· "E" = Even

· "N" = None (* Most common)

· "O" = Odd



$stopBits

Integer

The number of stop bits used for each byte sent or received.





$handshakingMode





String

The type of handshaking/flowcontrol to be used when opening the Comport.

Values:

· "DTR"

· "None"

· "RTS"

· "Xon/Xoff"





Return parameters



Parameter

Variable Type

Description



$comObject

Object

The instance of a Serial Port Object that is returned.





Example:





$comPort = 3;

$baudRate = 9600;

$byteSize = 8;

$parity = "N";

$stopBits = 1;

$handShakingMode = "Xon/Xoff";

$comObject = SerialOpenWithHandshaking($comPort, $baudRate, $byteSize, $parity, $stopBits, $handShakingMode);





SerialOpenWithHandshakingBool

Previous Top Next



* * *



SerialOpenWithHandshakingBool

Usage:

($comObject, $success) = SerialOpenWithHandshakingBool($comPort, $baudRate, $byteSize, $parity, $stopBits, $handShakingMode);

Description:

Creates an Opens a Serial port object for communication. The resulting object is then used with the other serial functions to support communication. In order to close the serial port after it has been created, use the SerialClose function.



NOTE:

If the specified comPort can not be opened, this function will return a false in the $success variable.

This function has been deprecated. Please use the Serial_OpenWithHandshaking, Serial_Close functions.

Function Arguments



Parameter

Variable Type

Description



$comPort

Integer

The COM port you wish to open.





$baudRate





Integer

The baud rate to initialize the COM port at.

Values:

· 300

· 1200

· 2400

· 4800

· 9600

· 14400

· 19200

· 38400

· 115200



$byteSize

Integer

The number of data bits in each byte sent or received. Usually set to '7' or '8'.





$parity





String

The data parity to use.

Value:

· "E" = Even

· "N" = None (* Most common)

· "O" = Odd



$stopBits

Integer

The number of stop bits used for each byte sent or received.





$handshakingMode





String

The type of handshaking/flowcontrol to be used when opening the Comport.

Values:

· "DTR"

· "None"

· "RTS"

· "Xon/Xoff"





Return parameters



Parameter

Variable Type

Description



$comObject

Object

The instance of a Serial Port Object that is returned.



$success

Boolean

Returns True if the functions succeeded and False otherwise.





Example:





$comPort = 3;

$baudRate = 9600;

$byteSize = 8;

$parity = "N";

$stopBits = 1;

$handShakingMode = "Xon/Xoff";





$comObject = SerialOpenWithHandshakingBool($comPort, $baudRate, $byteSize, $parity, $stopBits, $handShakingMode);





SerialOpenWithLogging

Previous Top Next



* * *



SerialOpenWithLogging

Usage:

$comObject = SerialOpenWithLogging($comPort, $baudRate, $byteSize, $parity, $stopBits, $logFilePath);



Description:

Creates an Opens a Serial port object for communication, and creates a log file that will record all the information sent to/from the serial port.

In order to record data sent to and from the serial port, use the SerialSendWithLogging function. If you do not wish a particular serial action to be recorded to the log, use the standard SerialSend function.

The resulting object is then used with the other serial functions to support communication. In order to close the serial port after it has been created, use the SerialCloseWithLogging function.

Notes:

If the specified comPort is in use, this function returns a failure. If you use the standard SerialClose function with a COM port which was opened using the SerialOpenWithLogging function, the data log file will never be properly closed.





NOTE:

This function has been deprecated. Please use the Serial_OpenWithLogging, Serial_CloseWithLogging functions.

Function Arguments



Parameter

Variable Type

Description



$comPort

Integer

The COM port you wish to open.





$baudRate





Integer

The baud rate to initialize the COM port at.

Values:

· 300

· 1200

· 2400

· 4800

· 9600

· 14400

· 19200

· 38400

· 115200



$byteSize

Integer

The number of data bits in each byte sent or received. Usually set to '7' or '8'.





$parity





String

The data parity to use.

Value:

· "E" = Even

· "N" = None (* Most common)

· "O" = Odd



$stopBits

Integer

The number of stop bits used for each byte sent or received.



$logFilePath

String

The path and filename for the log file.





Return parameters



Parameter

Variable Type

Description



$comObject

Object

The instance of a Serial Port Object that is returned.





Example:





$Com = SerialOpenWithLogging(1, 9600, 8, "N", 1, "c:\\log.txt");

SetFinalizeFunction("CloseCom");

SerialSendWithLogging($Com, "\r\r", ">" ,2);

SerialSendWithLogging($Com, "en\r", "assword:" ,2);

SerialSendWithLogging($Com, "c\r", "#", 2);

SerialSendWithLogging($Com, "exit\r", "started.", 2);

End;





function CloseCom()

{

SerialCloseWithLogging($Com);

End;

}





SerialOpenWithLoggingBool

Previous Top Next



* * *



SerialOpenWithLoggingBool

Usage:

($comObject, $success) = SerialOpenWithLogging($comPort, $baudRate, $byteSize, $parity, $stopBits, $logFilePath);



Description:

Creates an Opens a Serial port object for communication, and creates a log file that will record all the information sent to/from the serial port. Returns a Boolean for whether opening the comport and the file was successful.

In order to record data sent to and from the serial port, use the SerialSendWithLogging function. If you do not wish a particular serial action to be recorded to the log, use the standard SerialSend function.

The resulting object is then used with the other serial functions to support communication. In order to close the serial port after it has been created, use the SerialCloseWithLogging function.

Notes:

If the specified comPort can not be opened, this function will return a false in the $success variable.

If you use the standard SerialClose function with a COM port which was opened using the SerialOpenWithLogging function, the data log file will never be properly closed.





NOTE:

This function has been deprecated. Please use the Serial_OpenWithLoggingBool, Serial_CloseWithLogging functions.

Function arguments



Parameter

Variable Type

Description



$comPort

Integer

The COM port you wish to open.



$baudRate

Integer

The baud rate to initialize the COM port at.

Values:

· 300

· 1200

· 2400

· 4800

· 9600

· 14400

· 19200

· 38400



$byteSize

Integer

The number of data bits in each byte sent or received. Usually set to '7' or '8'.



$parity

String

The data parity to use.

Value:

· "E" = Even

· "N" = None (* Most common)

· "O" = Odd



$stopBits

Integer

The number of stop bits used for each byte sent or received.



$logFilePath

String

The path and filename for the log file.





Return parameters



Parameter

Variable Type

Description



$comObject

Object

The instance of a Serial Port Object that is returned.



$success

Boolean

Returns True if the functions succeeded and False otherwise.





Example:

SetFinalizeFunction("CloseCom");





($Com, $success) = SerialOpenWithLoggingBool(1, 9600, 8, "N", 1, "c:\\log.txt");





if ($success)

{

SerialSendWithLogging($Com, "\r\r", ">" ,2);

SerialSendWithLogging($Com, "en\r", "assword:" ,2);

SerialSendWithLogging($Com, "c\r", "#", 2);

SerialSendWithLogging($Com, "exit\r", "started.", 2);

}

End;





function CloseCom()

{

SerialCloseWithLogging($Com);

End;

}





SerialPurge

Previous Top Next



* * *



SerialPurge



Usage:

SerialPurge($ComPort);



Description:



This function clears all data out of the send and receive buffers of the communications port.





NOTE:

This function has been deprecated. Please use the Serial_DiscardInBuffer, Serial_DiscardOutBuffer functions.

Function arguments



Parameter

Variable Type

Description



$ComPort

Object

An instance of an serial port object created using the SerialOpen, SerialOpenWithHandshaking or SerialOpenWithLogging script function.





Return parameters



Parameter

Variable Type

Description



None





Example:





SerialPurge($ComPort);





SerialReceiveBinaryToArray

Previous Top Next



* * *



SerialReceiveBinaryToArray

Usage:

$receiveArray = SerialReceiveBinaryToArray($comPort,$waitTime);

Description:

Receives binary data from the serial port for the specified time and returns it in the returned array.



NOTE:

This function has been deprecated. Please use the Serial_Open, Serial_ReceiveBinaryToArray functions.

Function arguments



Parameter

Variable Type

Description



$ComPort

Object

An instance of an serial port object created using the SerialOpen, SerialOpenWithHandshaking or SerialOpenWithLogging script function.



$waitTime

Integer

The number of seconds to receive data before returning the data in an array.





Return parameters



Parameter

Variable Type

Description



$receiveArray

Array

All of the binary data received during the wait time.





Example:

// Receive binary data for 10 seconds and return it in $receiveArray.

$receiveArray = SerialReceiveBinaryToArray($comPort, 10);





SerialReceiveBinaryToArrayWithCount

Previous Top Next



* * *



SerialReceiveBinaryToArrayWithCount

Usage:

$receiveArray = SerialReceiveBinaryToArrayWithCount($comPort, $count, $waitTime);

Description:

Receives the specified number of data items from the serial port and returns them in an array. This function will return an error if the number of data items were not received in the specified time.



NOTE:

This function has been deprecated. Please use the Serial_Open, Serial_ReceiveBinaryToArrayWithCount functions.

Function arguments



Parameter

Variable Type

Description



$comPort

Object

An instance of a SerialPort object created using the SerialOpen function.



$count

Integer

Number of data items to wait for.



$waitTime

Integer

The number of milliseconds to wait for the specified number of data items to arrive.





Return parameters



Parameter

Variable Type

Description



$receiveArray

Array

The specified number of data items.





Example:

// The following example will wait 10 milliseconds to receive 5 bytes of data from the serial port.

$receiveArray = SerialReceiveBinaryToArrayWithCount($comPort, 5, 10);





SerialSend

Previous Top Next



* * *



SerialSend

Usage:

$receiveBuffer = SerialSend($comPort, $sendString, $waitString, $timeOut);

Description:

Sends the $sendString via the $comPort parameter. The function will then wait for the $waitString to be received on the serial port. If the waitString is not found within the $timeOut parameter specified, the function will return a failure. Both the $sendString and the $waitString can be set to an empty string. Before using a serial port, it first must be opened with the SerialOpen function. After use of the serial port is completed, it should be closed with the SerialClose function.



NOTE:

This function has been deprecated. Please use the Serial_Open, Serial_Send functions.

Function arguments



Parameter

Variable Type

Description



$comPort

Object

An instance of a SerialPort object created with the SerialOpen function.



$sendString

String

The string to be sent via the comPort.



$waitString

String

The string to wait for in response before continuing. This can be set to an empty string, in which case the test will send the $sendString and wait the $timeOut time.



$timeOut

Integer

The number of seconds to wait for the $waitString parameter before generating a failure.





Return parameters



Parameter

Variable Type

Description



$receiveBuffer

String

All the characters that have been received on the serial Port since the $sendString had been sent.





Example:

// Get a reference to the COM port.

$comPort = 3;

$baudRate = 9600;

$byteSize = 8;

$parity = "N";

$stopBits = 1;

$comObject = SerialOpen($comPort, $baudRate, $byteSize, $parity, $stopBits);





// Now send our string.

$receiveBuffer = SerialSend($comObject, "Hello", "", 10);





SerialSendBinary

Previous Top Next



* * *



SerialSendBinary

Usage:

$receiveBuffer = SerialSendBinary($comPort,$sendString,$waitString,$timeOut);

Description:

Sends the $sendString via the $comPort parameter. The function will then wait for the $waitString to be received on the serial port. If the waitString is not found within the $timeOut parameter specified, the function will return a failure. Both the $sendString and the $waitString can be set to an empty string. Before using a serial port, it first must be opened with the SerialOpen function. After use of the serial port is completed, it should be closed with the SerialClose function.

The SerialSendBinary function differs from the SerialSend function in the fact that the $SendString,$waitStirng and $receiveBuffer are text string representing the hexadecimal values to be sent and received via the comPort. The format of the strings is a collection of 2 digit hexadecimal values separated by spaces.

The same functionality can be implementing using escape strings with the SerialSend function, but it's much easier to parse binary output with this function than trying to decode a receive string from the other function since you must deal with ANSI/UNICODE conversion, etc.



NOTE:

This function has been deprecated. Please use the Serial_Open, Serial_SendBinary functions.

Function arguments



Parameter

Variable Type

Description



$comPort

Object

An instance of a Serial Port object created with the SerialOpen function.



$sendString

String

The string to be sent via the Com Port.



$waitString

String

The string to wait for in response before continuing. This can be set to an empty string, in which case, the function will send the $sendString and wait the $timeOut time.



$timeOut

Integer

The number of seconds to wait for the $waitString before generating a failure.





Return parameters



Parameter

Variable Type

Description



$receiveBuffer

String

All the characters that have been received on the serial port since the $sendString was sent.





Example:

// Send the string "DOG" and wait 10 seconds for the string "CAT".

$receiveBuffer = SerialSendBinary($comPort, "44 4F 47", "43 41 54", 10);





SerialSendBinaryBool

Previous Top Next



* * *



SerialSendBinaryBool

Usage:

($receiveBuffer, $waitStringFound) = SerialSendBinaryBool($comPort ,$sendString, $waitString, $timeOut);

Description:

Sends the $sendString via the $comPort parameter. The function will then wait for the $waitString to be received on the serial port. If the waitString is not found within the $timeOut parameter specified, the function will return a failure. Both the $sendString and the $waitString can be set to an empty string. Before using a serial port, it first must be opened with the SerialOpen function. After use of the serial port is completed, it should be closed with the SerialClose function.

The SerialSendBinary function differs from the SerialSend function in the fact that the $SendString,$waitStirng and $receiveBuffer are text string representing the hexadecimal values to be sent and received via the comPort. The format of the strings is a collection of 2 digit hexadecimal values separated by spaces.

The same functionality can be implementing using escape strings with the SerialSend function, but it's much easier to parse binary output with this function than trying to decode a receive string from the other function since you must deal with ANSI/UNICODE conversion, etc.



NOTE:

This function has been deprecated. Please use the Serial_Open, Serial_SendBinaryBool functions.

Function arguments



Parameter

Variable Type

Description



$comPort

Object

An instance of a Serial Port object created with the SerialOpen function.



$sendString

String

The string to be sent via the Com Port.



$waitString

String

The string to wait for in response before continuing. This can be set to an empty string, in which case, the function will send the $sendString and wait the $timeOut time.



$timeOut

Integer

The number of seconds to wait for the $waitString before generating a failure.





Return parameters



Parameter

Variable Type

Description



$receiveBuffer

String

All the characters that have been received on the serial port since the $sendString was sent.



$waitStringFound

Boolean

Returns true if the wait string was found within the $timeOut period, otherwise returns false.





Example:

// Send the string "DOG" and wait 10 seconds for the string "CAT".

($receiveBuffer, $waitStringFound) = SerialSendBinaryBool($comPort, "44 4F 47", "43 41 54", 10);





SerialSendBinaryFromArray

Previous Top Next



* * *



SerialSendBinaryFromArray

Usage:

SerialSendBinaryFromArray($comPort, $sendArray, $startIndex, $length);



Description:

Sends the specified part of the send array out the serial port. The array must be of type integer and the lower 8 bits of the array value is sent.





NOTE:

This function has been deprecated. Please use the Serial_Open, Serial_SendBinaryFromArary functions.

Function arguments



Parameter

Variable Type

Description



$comPort

Object

An instance of a Serial Port object created with the SerialOpen function.



$sendArray

Array

The array from which the data is sent.



$startIndex

Integer

The starting index in the array of the data to send.



$length

Integer

The number of data bytes to send from the array.





Return parameters



Parameter

Variable Type

Description



None





Example:

// Send 8 bytes of data starting at index 3 from the array.

SerialSendBinaryFromArray($comPort, $sendArray, 3, 8);





SerialSendBinaryInUnicode

Previous Top Next



* * *



SerialSendBinaryInUnicode

Usage:

$receiveBuffer = SerialSendBinaryInUnicode($comPort, $sendString, $waitString, $timeOut);



Description:

The function is similar to SerialSendBinary. The difference is that the output of this function is in Unicode Hex. If you have some Unicode characters to wait for, you can use this function.





NOTE:

This function has been deprecated. Please use the Serial_Open, Serial_SendBinaryInUnicode functions.

Function arguments



Parameter

Variable Type

Description



$comPort

Object

An instance of a SerialPort object created using the SerialOpen command.



$sendString

String

The string to be sent via the comPort.



$waitString

String

The string to wait for in response before continuing. This can be set to an empty string, in which case the test will send the $sendString and wait the $timeOut time.



$timeOut

Integer

The number of seconds to wait for the $waitString before generating a failure.





Return parameters



Parameter

Variable Type

Description



$receiveBuffer

String

All the characters that have received on the serial Port since the $sendString was sent.





Example:

// Send the string "FF FF FF" and wait 10 seconds for the string "FF FF FF". Assuming this is a synthesis signal of communication.





$receiveBuffer = SerialSendBinary($comPort, "FF FF FF", "FF FF FF", 10);





SerialSendBinaryMilliseconds

Previous Top Next



* * *



SerialSendBinaryMilliseconds

Usage:

$receiveBuffer = SerialSendBinaryMilliseconds($comPort, $sendString, $waitString, $timeOut);

Description:

Sends the $sendString via the $comPort parameter. The function will then wait for the $waitString to be received on the serial port. If the waitString is not found within the $timeOut parameter specified, the function will return a failure. Both the $sendString and the $waitString can be set to an empty string. Before using a serial port, it first must be opened with the SerialOpen function. After use of the serial port is completed, it should be closed with the SerialClose function.

The SerialSendBinaryMilliseconds function differs from the SerialSend function in the fact that the $SendString,$waitStirng and $receiveBuffer are text string representing the hexadecimal values to be sent and received via the comPort. The format of the strings is a collection of 2 digit hexidecimal values seperated by spaces.

The same functionality can be implementing using escape strings with the SerialSend function, but it's much easier to parse binary output with this function than trying to decode a receive string from the other function since you must deal with ANSI/UNICODE conversion, etc.



NOTE:

This function has been deprecated. Please use the Serial_Open, Serial_SendBinaryMilliseconds functions.

Function arguments



Parameter

Variable Type

Description



$comPort

Object

An instance of a SerialPort object created with the SerialOpen function.



$sendString

String

The string to be sent via the comPort.



$waitString

String

The string to wait for in response before continuing. This can be set to an empty string, in which case the test will send the $sendString and wait the $timeOut time.



$timeOut

Integer

The number of milliseconds to wait for the $waitString parameter before generating a failure.





Return parameters



Parameter

Variable Type

Description



$receiveBuffer

String

All the characters that have been received on the serial Port since the $sendString had been sent.





Example:

// Send the string "DOG" and wait 10 seconds for the string "CAT".

$receiveBuffer = SerialSendBinaryMilliseconds($comPort, "44 4F 47", "43 41 54", 10000);





SerialSendBinaryMillisecondsBool

Previous Top Next



* * *



SerialSendBinaryMillisecondsBool

Usage:

($receiveBuffer,$WaitStringFound) = SerialSendBinaryMillisecondsBool($comPort,$sendString,$waitString,$timeOut);

Description:

Sends the $sendString via the $comPort parameter. The function will then wait for the $waitString to be received on the serial port. The function will return whether or not the wait string which was specified was found in the allotted time in the $WaitStringFound return variable.. Both the $sendString and the $waitString can be set to an empty string. Before using a serial port, it first must be opened with the SerialOpen function. After use of the serial port is completed, it should be closed with the SerialClose function.

The SerialSendBinaryMillisecondsBool function differs from the SerialSend function in the fact that the $SendString,$waitStirng and $receiveBuffer are text string representing the hexadecimal values to be sent and received via the comPort. The format of the strings is a collection of 2 digit hexidecimal values seperated by spaces.

The same functionality can be implementing using escape strings with the SerialSend function, but it's much easier to parse binary output with this function than trying to decode a receive string from the other function since you must deal with ANSI/UNICODE conversion, etc.



NOTE:

This function has been deprecated. Please use the Serial_Open, Serial_SendBinaryMillisecondsBool functions.

Function arguments



Parameter

Variable Type

Description



$comPort

Object

An instance of a Serial Port object created with the SerialOpen function.



$sendString

String

The string to be sent via the Com Port.



$waitString

String

The string to wait for in response before continuing. This can be set to an empty string, in which case, the function will send the $sendString and wait the $timeOut time.



$timeOut

Integer

The number of milliseconds to wait for the $waitString before generating a failure.





Return parameters



Parameter

Variable Type

Description



$receiveBuffer

String

All the characters that have been received on the serial port since the $sendString was sent.



$WaitStringFound

Boolean

Returns true if the "Wait String" was found within the timeout period. Otherwise, returns false.





Example:

// Send the string "DOG" and wait 10 seconds for the string "CAT".

($receiveBuffer, $WaitStringFound) = SerialSendBinaryMillisecondsBool($comPort, "44 4F 47", "43 41 54", 10);





SerialSendBinaryWithDelays

Previous Top Next



* * *



SerialSendBinaryWithDelays

Usage:

$receiveBuffer = SerialSendBinaryWithDelays($comPort, $sendString, $waitString, $timeOut, $delayMS);

Description:

Sends the $sendString via the $comPort parameter. The function will then wait for the $waitString to be received on the serial port. If the waitString is not found within the $timeOut parameter specified, the function will return a failure. Both the $sendString and the $waitString can be set to an empty string. Before using a serial port, it first must be opened with the SerialOpen function. After use of the serial port is completed, it should be closed with the SerialClose function.

The SerialSendBinaryWithDelays function differs from the SerialSend function in the fact that the $SendString,$waitStirng and $receiveBuffer are text string representing the hexadecimal values to be sent and received via the comPort. The format of the strings is a collection of 2 digit hexidecimal values seperated by spaces.

The same functionality can be implementing using escape strings with the SerialSend function, but it's much easier to parse binary output with this function than trying to decode a receive string from the other function since you must deal with ANSI/UNICODE conversion, etc.

This function differs from the traditional SerialSendBinary command because it inserts a delay specified by the $DelayMS argument between each character that is sent out of the serial port. This function is useful for DUT's that don't support a proper FIFO buffer and aren't able to process characters sent at the native baud rate setting of the serial port. The $DelayMS parameter is specified in milliseconds.



NOTE:

This function has been deprecated. Please use the Serial_Open, Serial_SendBinaryWithDelays functions.

Function arguments



Parameter

Variable Type

Description



$comPort

Object

An instance of a Serial Port object created with the SerialOpen function.



$sendString

String

The string to be sent via the Com Port.



$waitString

String

The string to wait for in response before continuing. This can be set to an empty string, in which case, the function will send the $sendString and wait the $timeOut time.



$timeOut

Integer

The number of milliseconds to wait for the $waitString before generating a failure.



$delayMS

Integer

The number of milliseconds to delay between sending each character.





Return parameters



Parameter

Variable Type

Description



$receiveBuffer

String

All the characters that have been received on the serial port since the $sendString was sent.





Example:

// Send the string "DOG" with a 25 millisecond delay between each character, and wait 10 seconds for the string "CAT".

$receiveBuffer = SerialSendBinaryWithDelays($comPort, "44 4F 47", "43 41 54", 10, 25);





SerialSendBool

Previous Top Next



* * *



SerialSendBool

Usage:

($receiveBuffer,$WaitStringFound) = SerialSendBool($comPort, $sendString, $waitString, $timeOut);

Description:

Sends the $sendString via the $comPort parameter. The function will then wait for the $waitString to be received on the serial port. If the waitString is not found within the $timeOut parameter specified, the function will return a passing result, but set the $WaitStringFound return variable to 'False'. In the event that the wait string is found, the $WaitStringFound will be set to 'True'.

Both the $sendString and the $waitString can be set to an empty string. Before using a serial port, it first must be opened with the SerialOpen function. After use of the serial port is completed, it should be closed with the SerialClose function.



NOTE:

This function has been deprecated. Please use the Serial_Open, Serial_SendBool functions.

Function arguments



Parameter

Variable Type

Description



$comPort

Object

An instance of a SerialPort object created with the SerialOpen function.



$sendString

String

The string to be sent via the comPort.



$waitString

String

The string to wait for in response before continuing. This can be set to an empty string, in which case the test will send the $sendString and wait the $timeOut time.



$timeOut

Integer

The number of seconds to wait for the $waitString parameter before generating a failure.





Return parameters



Parameter

Variable Type

Description



$receiveBuffer

String

All the characters that have been received on the serial Port since the $sendString had been sent.



$WaitStringFound

Boolean

A boolean value indicating whether or not the wait string was found in the receive buffer.





Example(s):

// Get a reference to the COM port.

$comPort = 3;

$baudRate = 9600;

$byteSize = 8;

$parity = "N";

$stopBits = 1;

$comObject = SerialOpen($comPort, $baudRate, $byteSize, $parity, $stopBits);





// now send our string.

($receiveBuffer, $WaitStringFound) = SerialSendBool($comObject, "Hello", "", 10);





SerialSendBreak

Previous Top Next



* * *



SerialSendBreak



Usage:

Serial_SendBreak($comPort, $breakLength);





Description:

Sends a break signal on the com port.

A break signal is defined as the voltage level that represents a zero, held for a time longer than one character space. This function lets the user define the length to hold it in milliseconds.





Notes:

The serial port object must have been opened with SerialOpen, SerialOpenWithHandshaking, or SerialOpenWithLogging.

At 9600 baud, each bit is 0.104 milliseconds. Since the minimum hold time for this function is 1 millisecond, this is equivalent to almost 10 bits and should be recognized by the instrument connected to the computer.

Function Arguments



Parameter

Variable Type

Description



$comPort

Object

An instance of a Serial Port object created with one of the open functions.



$breakLength

Integer

The number of milliseconds to hold the break signal before releasing the com port for normal operations.





Return parameters



Parameter

Variable Type

Description



None.





Example:





$breakLength = 2; // Hold Break for 2 milliseconds.

SerialSendBreak($comPort, $breakLength);





SerialSendHex

Previous Top Next



* * *



SerialSendHex

Usage:

SerialSendHex($comPort, $sendValue);

Description:

Sends the ASCII encoded character equivalent of the $sendValue parameter.



NOTE:

This function has been deprecated. Please use the Serial_Open, Serial_SendHex functions.

Function arguments



Parameter

Variable Type

Description



$comPort

Object

An instance of a SerialPort object created with the SerialOpen function.



$sendValue

Integer

The integer value of the ASCII character to send of the Serial port.





Return parameters



Parameter

Variable Type

Description



None





Example(s):





// Get a reference to the COM port.

$comPort = 3;

$baudRate = 9600;

$byteSize = 8;

$parity = "N";

$stopBits = 1;

$comObject = SerialOpen($comPort, $baudRate, $byteSize, $parity, $stopBits);





// now send our character (the space character).

$charToSend = 32;

SerialSendHex($comObject, $charToSend);





SerialSendMilliseconds

Previous Top Next



* * *



SerialSendMilliseconds

Usage:

$receiveBuffer = SerialSendMilliseconds($comPort, $sendString, $waitString, $timeOut);

Description:

Sends the $sendString via the $comPort parameter. The function will then wait for the $waitString to be received on the serial port. If the waitString is not found within the $timeOut parameter specified, the function will return a failure. Both the $sendString and the $waitString can be set to an empty string. Before using a serial port, it first must be opened with the SerialOpen function. After use of the serial port is completed, it should be closed with the SerialClose function.



NOTE:

This function has been deprecated. Please use the Serial_Open, Serial_SendMilliseconds functions.

Function arguments



Parameter

Variable Type

Description



$comPort

Object

An instance of a SerialPort object created with the SerialOpen function.



$sendString

String

The string to be sent via the comPort.



$waitString

String

The string to wait for in response before continuing. This can be set to an empty string, in which case the test will send the $sendString and wait the $timeOut time.



$timeOut

Integer

The number of milliseconds to wait for the $waitString parameter before generating a failure.





Return parameters



Parameter

Variable Type

Description



$receiveBuffer

String

All the characters that have been received on the serial Port since the $sendString had been sent.





Example:

// Get a reference to the COM port.

$comPort = 3;

$baudRate = 9600;

$byteSize = 8;

$parity = "N";

$stopBits = 1;

$comObject = SerialOpen($comPort, $baudRate, $byteSize, $parity, $stopBits);





// Now send our string and wait 1 second (1000 milliseconds).

$receiveBuffer = SerialSendMilliseconds($comObject, "Hello", "", 1000);





SerialSendMillisecondsBool

Previous Top Next



* * *



SerialSendMillisecondsBool

Usage:

($receiveBuffer,$WaitStringFound) = SerialSendMillisecondsBool($comPort, $sendString, $waitString, $timeOut);

Description:

Sends the $sendString via the $comPort parameter. The function will then wait for the $waitString to be received on the serial port. If the waitString is not found within the $timeOut parameter specified, the function will return a passing result, but set the $WaitStringFound return variable to 'False'. In the event that the wait string is found, the $WaitStringFound will be set to 'True'.

Both the $sendString and the $waitString can be set to an empty string. Before using a serial port, it first must be opened with the SerialOpen function. After use of the serial port is completed, it should be closed with the SerialClose function.



NOTE:

This function has been deprecated. Please use the Serial_Open, Serial_SendMillisecondsBool functions.

Function arguments



Parameter

Variable Type

Description



$comPort

Object

An instance of a SerialPort object created with the SerialOpen function.



$sendString

String

The string to be sent via the comPort.



$waitString

String

The string to wait for in response before continuing. This can be set to an empty string, in which case the test will send the $sendString and wait the $timeOut time.



$timeOut

Integer

The number of milliseconds to wait for the $waitString parameter before generating a failure.





Return parameters



Parameter

Variable Type

Description



$receiveBuffer

String

All the characters that have been received on the serial Port since the $sendString had been sent.



$WaitStringFound

Boolean

A boolean value indicating whether or not the wait string was found in the receive buffer.





Example(s):

// Get a reference to the COM port.

$comPort = 3;

$baudRate = 9600;

$byteSize = 8;

$parity = "N";

$stopBits = 1;

$comObject = SerialOpen($comPort, $baudRate, $byteSize, $parity, $stopBits);





// Now send our string and wait 1 second (1000 milliseconds).

($receiveBuffer, $WaitStringFound) = SerialSendMillisecondsBool($comObject, "Hello", "", 1000);





SerialSendRawBinary

Previous Top Next



* * *



SerialSendRawBinary



Usage:

$receive = SerialSendRawBinary($comPort, $sendString, $expectString, $timeoutms);





Description:

Writes to the serial port and waits for the given response. Returns the receive buffer if the response is found before the timeout expires, fails otherwise.





Send, receive, and expect strings are all raw byte data (formatted as space-separated hexadecimal values). This makes these functions useful when the character encoding of the serial data is unknown.





Note: If the response is found, the receive buffer will contain all data up to the expected response.





NOTE:

This function has been deprecated. Please use the Serial_Open, Serial_SendBinary functions.

Function arguments



Parameter

Variable Type

Description



$comPort

Object

An instance of a SerialPort object created with the SerialOpen function.



$sendString

String

The string of space-separated HEX values to be sent via the comPort.



$expectString

String

The string (represented as a series of space-separated HEX values) to wait for in response before continuing. This can be set to an empty string, in which case the test will send the $sendString and wait the $timeOut time.



$timeoutms

Integer

The number of milliseconds to wait for the $waitString parameter before generating a failure.





Return parameters



Parameter

Variable Type

Description



$receive

String

All the characters that have been received on the serial Port since the $sendString had been sent.





Example:





//sends "*IDN?\r\n" query to instrument, wait up to 1s for response

$receiveBuffer = SerialSendRawBinary($comPort, "2A 49 44 4E 3F 0D 0A", "", 1000);

//convert byte return to ASCII text

$receiveBuffer = HexStringToString($receiveBuffer," ");

UpdateStatus($receiveBuffer);





SerialSendRawBinaryBool

Previous Top Next



* * *



SerialSendRawBinaryBool



Usage:

($found, $receive) = SerialSendRawBinaryBool($comPort, $sendString, $expectString, $timeoutms);





Description:

Writes to the serial port and waits for the given response. Returns the receive buffer and true if the response is found before the timeout expires, false otherwise.





Send, receive, and expect strings are all raw byte data (formatted as space-separated hexadecimal values). This makes these functions useful when the character encoding of the serial data is unknown.





Note: If the response is found, the receive buffer will contain all data up to the expected response. If the response is not found before the timeout expires, the receive buffer will still contain all data received up until the timeout.





NOTE:

This function has been deprecated. Please use the Serial_Open, Serial_SendBinaryBool functions.

Function arguments



Parameter

Variable Type

Description



$comPort

Object

An instance of a SerialPort object created with the SerialOpen function.



$sendString

String

The string of space-separated HEX values to be sent via the comPort.



$expectString

String

The string (represented as a series of space-separated HEX values) to wait for in response before continuing. This can be set to an empty string, in which case the test will send the $sendString and wait the $timeOut time.



$timeoutms

Integer

The number of milliseconds to wait for the $waitString parameter before generating a failure.





Return parameters



Parameter

Variable Type

Description



$found

Boolean

True if the expected response was received before the timeout, false otherwise.



$receive

String

All the characters that have been received on the serial Port since the $sendString had been sent.





Example:





//sends "*IDN?\r\n" query to instrument, wait up to 1s for response

($found, $receiveBuffer) = SerialSendRawBinaryBool($comPort, "2A 49 44 4E 3F 0D 0A", "", 1000);

//convert byte return to ASCII text

$receiveBuffer = HexStringToString($receiveBuffer," ");

UpdateStatus("FOUND:");

UpdateStatus($found);

UpdateStatus($receiveBuffer);





SerialSendWithDelays

Previous Top Next



* * *



SerialSendWithDelays

Usage:

$receiveBuffer = SerialSendWithDelays($comPort, $sendString, $waitString, $timeOut, $DelayMS);

Description:

Sends the $sendString via the $comPort parameter. The function will then wait for the $waitString to be received on the serial port. If the waitString is not found within the $timeOut parameter specified, the function will return a failure. Both the $sendString and the $waitString can be set to an empty string. Before using a serial port, it first must be opened with the SerialOpen function. After use of the serial port is completed, it should be closed with the SerialClose function.

This function differs from the traditional SerialSend command because it inserts a delay specified by the $DelayMS argument between each character that is sent out of the serial port. This function is useful for DUT's that don't support a proper FIFO buffer and aren't able to process characters sent at the native baud rate setting of the serial port. The $DelayMS parameter is specified in milliseconds.



NOTE:

This function has been deprecated. Please use the Serial_Open, Serial_SendWithDelays functions.

Function arguments



Parameter

Variable Type

Description



$comPort

Object

An instance of a Serial Port object created with the SerialOpen function.



$sendString

String

The string to be sent via the Com Port.



$waitString

String

The string to wait for in response before continuing. This can be set to an empty string, in which case, the function will send the $sendString and wait the $timeOut time.



$timeOut

Integer

The number of milliseconds to wait for the $waitString before generating a failure.



$DelayMS

Integer

The number of milliseconds to delay between sending each character.





Return parameters



Parameter

Variable Type

Description



$receiveBuffer

String

All the characters that have been received on the serial port since the $sendString was sent.





Example:





$Received = SerialSendWithDelays($ComPort, "ls\r", ">", 1, 100); // Waits 100 Milliseconds between characters





SerialSendWithLogging

Previous Top Next



* * *



SerialSendWithLogging



Usage:

$receiveBuffer = SerialSendWithLogging($comPort,$sendString,$waitString,$timeOut);

Description:

Sends the $sendString via the $comPort parameter. The function will then wait for the $waitString to be received on the serial port. If the waitString is not found within the $timeOut parameter specified, the function will return a failure. Both the $sendString and the $waitString can be set to an empty string. Before using a serial port, it first must be opened with the SerialOpen function. After use of the serial port is completed, it should be closed with the SerialClose function.





Important Note: The SerialSendWithLogging function is only compatible with a serial port that has been opened using the SerialOpenWithLogging function. If the serial port was opened with the SerialOpen function, you should use the standard SerialSend command.





NOTE:

This function has been deprecated. Please use the Serial_Open, Serial_SendWithLogging functions.

Function arguments



Parameter

Variable Type

Description



$comPort

Object

An instance of a Serial Port object created with the SerialOpen function.



$sendString

String

The string to be sent via the Com Port.



$waitString

String

The string to wait for in response before continuing. This can be set to an empty string, in which case, the function will send the $sendString and wait the $timeOut time.



$timeOut

Integer

The number of milliseconds to wait for the $waitString before generating a failure.





Return parameters



Parameter

Variable Type

Description



$receiveBuffer

String

All the characters that have been received on the serial port since the $sendString was sent.





Usage Examples:

$Com = SerialOpenWithLogging(1, 9600, 8, "N", 1, "c:\\log.txt");

SetFinalizeFunction("CloseCom");

SerialSendWithLogging($Com, "\r\r", ">", 2);

SerialSendWithLogging($Com, "en\r", "assword:", 2);

SerialSendWithLogging($Com, "c\r", "#", 2);

SerialSendWithLogging($Com, "exit\r", "started.", 2);

End;





function CloseCom()

{

SerialCloseWithLogging($Com);

End;

}





SerialXModem1KReceive

Previous Top Next



* * *



SerialXModem1KReceive

Usage:

$ReturnValue = SerialXModem1KReceive ($comPort,$FileName,$TimeOut,$TimeofRetries);





Description:

Receives packets of information over the com port specified by $comPort and writes the packets to the specified file $FileName using Xmodem 1K file transfer protocol. Before using a serial port, it first must be opened with the SerialOpen function.





Result:

0 if the file be received successfully test produces a pass.

-1 if canceled by remote.

-2 if Synchronization error.

-3 if too many retries error.

Remarks:

This function was tested with Hyper Terminal.

This function use Xmodem 1K protocol with 1024 byte packet size and CRC16-CCITT error check.

Function arguments



Parameter

Variable Type

Description



$comPort

Object

An instance of a Serial Port object created with the SerialOpen function.



$FileName

String

Path and file name of the file to save.



$TimeOut

Integer

Specifies the interval (in seconds) during which to send the initial handshake character to the transmitter. The character is sent every $TimeOut seconds, up to $TimeofRetries times.



$TimeofRetries

Integer

Sets the maximum number of times for handshake and packet receive.





Return parameters



Parameter

Variable Type

Description



$ReturnValue

Integer

The result of the test





Example:

// Receive the file using XModem 1K protocol.

$fileName = "C:\\Temp\\ReceiveFile.bin";

$comPort = 3;

$baudRate = 9600;

$byteSize = 8;

$parity = "N";

$stopBits = 1;

$comPort = SerialOpen($comPort, $baudRate, $byteSize, $parity, $stopBits);





// Get the file. Handshake 1 second intervals for 10 times.

$result = SerialXModem1KReceive($comPort, $fileName, 1, 10);





SerialXModem1KSend

Previous Top Next



* * *



SerialXModem1KSend



Usage:

($ReturnValue, $numBytes) = SerialXModem1KSend($comPort, $FileName, $TimeOut, $TimeofRetries);



Description:

Reads data from $FileName file and sends it in packets over the com port specified by $comPort using Xmodem 1K file transfer protocol. This function uses an internal 30 seconds timeout for handshaking. Before using a serial port, it first must be opened with the SerialOpen function.





Result:

0 if the file be sent successfully and test produces a pass.

-1 if cancel by remote.

-2 if handshaking fail.

-3 if Exceed the $TimeofRetries

-4 if unknown error exists.





Remarks:

· This function is tested with HyperTerminal

· This function uses the XModem 1K protocol with 1024 byte packet size and CRC16-CCITT error checking.

Function arguments



Parameter

Variable Type

Description



$comPort

Object

An instance of a Serial Port object created with the SerialOpen function.



$FileName

String

Path and file name of the file to send.



$TimeOut

Integer

Specifies the interval (in seconds) during which to send the initial handshake character to the transmitter. The character is sent every $TimeOut seconds, up to $TimeofRetries times.



$TimeofRetries

Integer

Sets the maximum number of times for handshake and packet receive.





Return parameters



Parameter

Variable Type

Description



$ReturnValue

Integer

The result of the test





Example:

// Send the file using XModem 1K protocol.

$fileName = "C:\\Temp\\ReceiveFile.bin";

$comPort = 3;

$baudRate = 9600;

$byteSize = 8;

$parity = "N";

$stopBits = 1;

$comPort = SerialOpen($comPort, $baudRate, $byteSize, $parity, $stopBits);





// Send the file. Handshake 1 second intervals for 10 times.

($result, $numBytes) = SerialXModem1KSend($comPort, $fileName, 1, 10);





ModbusTCP_Close

Previous Top Next



* * *



ModbusTCP_Close



Usage:

ModbusTCP_Close($modbusHandle);





Description:

This function will close a TCP connection that was opened with ModbusTCP_Init.

Function arguments



Parameter

Variable Type

Description



$modbusHandle

Object

The Modbus instance pointer opened previously.





Return parameters



Parameter

Variable Type

Description



None.





Example(s):

// Set up the address and port.

$serverAddr = "192.168.1.1";

$portNum = 502;

$modbusHandle = ModbusTCP_Init($serverAddr, $portNum);





ModbusTCP_Close($modbusHandle);





ModbusTCP_Init

Previous Top Next



* * *



ModbusTCP_Init



Usage:

$modbusHandle = ModbusTCP_Init($serverAddr, $portNum);





Description:

This function will open a TCP connection to the specified server at the specified port.





Remarks:

· TCP port number default is 502. Use 502 as the port number unless you know it has been changed.

Function arguments



Parameter

Variable Type

Description



$serverAddr

String

The IP Address (eg. 192.168.1.1) or server name



$portNum

Integer

The port number to connect to.





Return parameters



Parameter

Variable Type

Description



$modbusHandle

Object

A pointer to this instance of the modbusTCP driver.





Example(s):

// Set up the address and port.

$serverAddr = "192.168.1.1";

$portNum = 502;

$modbusHandle = ModbusTCP_Init($serverAddr, $portNum);





ModbusTCP_ReadCoilStatus

Previous Top Next



* * *



ModbusTCP_ReadCoilStatus



Usage:

$coilArray = ModbusTCP_ReadCoilStatus($mbHandle, $instrAddr, $startAddr, $numCoils);





Description:

This function will query the Modbus instrument and return a number of coil statuses as a boolean array.

Function arguments



Parameter

Variable Type

Description



$mbHandle

Object

The Modbus instance pointer opened previously with ModbusTCP_Init.



$instrAddr

Integer

The address of the instrument to query (only used for slave devices connected to a server).



$startAddr

Integer

The starting address of the coils to return the status of. Must be in the range of 0 to 9999.



$numCoils

Integer

The number of coils to return the status of. $startAddr + $numCoils must be less than 10000.





Return parameters



Parameter

Variable Type

Description



$coilArray

Array

An array of booleans indicating the status of the requested coils.





Example(s):

// Set up the address and port.

$serverAddr = "192.168.1.1";

$portNum = 502;

$mbHandle = ModbusTCP_Init($serverAddr, $portNum);





$instrAddr = 17;

$startAddr = 10;

$numCoils = 57;

$coilArray = ModbusTCP_ReadCoilStatus($mbHandle, $instrAddr, $startAddr, $numCoils);





ModbusTCP_ReadDeviceID

Previous Top Next



* * *



ModbusTCP_ReadDeviceID



Usage:

$deviceID = ModbusTCP_ReadDeviceID($mbHandle, $instrAddr, $idItem);





Description:

This function will return the requested ID item for the instrument.





Remarks:

· Only the first 3 items (VendorName, ProductCode and MajorMinorRevision) are required by the Modbus specification. The other items may be included at the manufacturer's discretion.

Function arguments



Parameter

Variable Type

Description



$mbHandle

Object

The Modbus instance pointer opened previously with ModbusTCP_Init.



$instrAddr

Integer

The address of the instrument to write to (only used for slave devices connected to a server).



$idItem

String

The ID item to return. Valid items are:

· "VENDOR" (vendor name)

· "CODE" (product code)

· "REVISION" (product major/minor revision)

· "URL" (vendor URL)

· "PRODUCT" (product name)

· "MODEL" (model name)

· "APPLICATION" (application name)





Return parameters



Parameter

Variable Type

Description



$deviceID

String

The requested device ID item.





Example(s):

// Set up the address and port.

$serverAddr = "192.168.1.1";

$portNum = 502;

$mbHandle = ModbusTCP_Init($serverAddr, $portNum);





// Get the Vendor Name for this instrument.

$instrAddr = 17;

$idItem = "VENDOR";

$vendName = ModbusTCP_ReadDeviceID($mbHandle, $instrAddr, $idItem);





ModbusTCP_ReadHoldingRegisters

Previous Top Next



* * *



ModbusTCP_ReadHoldingRegisters



Usage:

$regArray = ModbusTCP_ReadHoldingRegisters($mbHandle, $instrAddr, $startAddr, $numRegs);





Description:

This function will query the Modbus instrument and return a number of values from the holding registers as an array of integers.

Function arguments



Parameter

Variable Type

Description



$mbHandle

Object

The Modbus instance pointer opened previously with ModbusTCP_Init.



$instrAddr

Integer

The address of the instrument to query (only used for slave devices connected to a server).



$startAddr

Integer

The starting address of the registers to return the value of. Must be in the range of 40000 to 49999.



$numRegs

Integer

The number of registers to return the value of. $startAddr + $numRegs must be less than 50000.





Return parameters



Parameter

Variable Type

Description



$regArray

Array

An array of integers holding the values of the requested registers.





Example(s):

// Set up the address and port.

$serverAddr = "192.168.1.1";

$portNum = 502;

$mbHandle = ModbusTCP_Init($serverAddr, $portNum);





$instrAddr = 17;

$startAddr = 40003;

$numRegs = 57;

$regArray = ModbusTCP_ReadHoldingRegisters($mbHandle, $instrAddr, $startAddr, $numRegs);





ModbusTCP_ReadInputRegisters

Previous Top Next



* * *



ModbusTCP_ReadInputRegisters



Usage:

$regArray = ModbusTCP_ReadInputRegisters($mbHandle, $instrAddr, $startAddr, $numRegs);





Description:

This function will query the Modbus instrument and return a number of values from the input registers as an array of integers.

Function arguments



Parameter

Variable Type

Description



$mbHandle

Object

The Modbus instance pointer opened previously with ModbusTCP_Init.



$instrAddr

Integer

The address of the instrument to query (only used for slave devices connected to a server).



$startAddr

Integer

The starting address of the registers to return the value of. Must be in the range of 30000 to 39999.



$numRegs

Integer

The number of registers to return the value of. $startAddr + $numRegs must be less than 40000.





Return parameters



Parameter

Variable Type

Description



$regArray

Array

An array of integers holding the values of the requested registers.





Example(s):

// Set up the address and port.

$serverAddr = "192.168.1.1";

$portNum = 502;

$mbHandle = ModbusTCP_Init($serverAddr, $portNum);





$instrAddr = 17;

$startAddr = 30010;

$numRegs = 57;

$regArray = ModbusTCP_ReadInputRegisters($mbHandle, $instrAddr, $startAddr, $numRegs);





ModbusTCP_ReadInputStatus

Previous Top Next



* * *



ModbusTCP_ReadInputStatus



Usage:

$inpArray = ModbusTCP_ReadInputStatus($mbHandle, $instrAddr, $startAddr, $numInputs);





Description:

This function will query the Modbus instrument and return a number of discrete digital input statuses as a boolean array.

Function arguments



Parameter

Variable Type

Description



$mbHandle

Object

The Modbus instance pointer opened previously with ModbusTCP_Init.



$instrAddr

Integer

The address of the instrument to query (only used for slave devices connected to a server).



$startAddr

Integer

The starting address of the inputs to return the status of. Must be in the range of 10000 to 19999.



$numInputs

Integer

The number of inputs to return the status of. $startAddr + $numInputs must be less than 20000.





Return parameters



Parameter

Variable Type

Description



$inpArray

Array

An array of booleans indicating the status of the requested inputs.





Example(s):

// Set up the address and port.

$serverAddr = "192.168.1.1";

$portNum = 502;

$mbHandle = ModbusTCP_Init($serverAddr, $portNum);





$instrAddr = 17;

$startAddr = 10003;

$numInputs = 57;

$inpArray = ModbusTCP_ReadInputStatus($mbHandle, $instrAddr, $startAddr, $numInputs);





ModbusTCP_WriteMultipleCoils

Previous Top Next



* * *



ModbusTCP_WriteMultipleCoils



Usage:

$numWritten = ModbusTCP_WriteMultipleCoils($mbHandle, $instrAddr, $startAddr, $coilArray);





Description:

This function will write the status of a number of coils to the instrument.

Function arguments



Parameter

Variable Type

Description



$mbHandle

Object

The Modbus instance pointer opened previously with ModbusTCP_Init.



$instrAddr

Integer

The address of the instrument to write to (only used for slave devices connected to a server).



$startAddr

Integer

The starting address of the coils to write to. Must be in the range of 0 to 9999.



$coilArray

Array

An array of boolean values to set the coils to. Note: a string array with "ON", TRUE", "1", or "T" for each coil will work as well.





Return parameters



Parameter

Variable Type

Description



$numWritten

Integer

The number of coils that were written to.





Example(s):

// Set up the address and port.

$serverAddr = "192.168.1.1";

$portNum = 502;

$mbHandle = ModbusTCP_Init($serverAddr, $portNum);





// Turn on coils 10 to 19 (10 coils total).

$instrAddr = 17;

$startAddr = 10;

$coilArray = Array1DCreate("BOOLEAN", 10);

$coilCount = 0;

while ($coilCount < 10)

{

Array1DSetValue($coilArray, $coilCount, true);

$coilCount = $coilCount + 1;

}

$numWritten = ModbusTCP_WriteMultipleCoils($mbHandle, $instrAddr, $startAddr, $coilArray);





ModbusTCP_WriteMultipleCoilsHex

Previous Top Next



* * *



ModbusTCP_WriteMultipleCoilsHex



Usage:

$numWritten = ModbusTCP_WriteMultipleCoilsHex($mbHandle, $instrAddr, $startAddr, $coilStr);





Description:

This function will write the status of a number of coils to the instrument. All numbers and the status are represented as hexadecimal numbers contained in strings.





Remarks

· The values sent are big-endian. ie. The high bytes and high bits are on the left, the low bytes and low bits are on the right.

eg. A5A5 5A5A in binary is: 1010010110100101 101101001011010

This number will set 32 coils, with bit 0 being on the right (a '0') and bit 31 on the left (a '1').





Function arguments



Parameter

Variable Type

Description



$mbHandle

Object

The Modbus instance pointer opened previously with ModbusTCP_Init.



$instrAddr

String

The address of the instrument to write to (only used for slave devices connected to a server) in hexadecimal.



$startAddr

String

The starting address of the coils to write to. Must be in the range of 0 to 0x270F.



$coilStr

String

A string with bit-encoded hexadecimal values to set the coils to. For each bit, a 1 sets the coil on and a 0 sets the coil off.





Return parameters



Parameter

Variable Type

Description



$numWritten

Integer

The number of coils that were written to.





Example(s):

// Set up the address and port.

$serverAddr = "192.168.1.1";

$portNum = 502;

$mbHandle = ModbusTCP_Init($serverAddr, $portNum);





// Turn on coils 10 to 19 (10 coils total).

$instrAddr = "11";

$startAddr = "0A";

$coilStr = "3F28CA5";

$numWritten = ModbusTCP_WriteMultipleCoilsHex($mbHandle, $instrAddr, $startAddr, $coilStr);





ModbusTCP_WriteMultipleRegisters

Previous Top Next



* * *



ModbusTCP_WriteMultipleRegisters



Usage:

$numWritten = ModbusTCP_WriteMultipleRegisters($mbHandle, $instrAddr, $startAddr, $regArray);





Description:

This function will write values to a number of holding registers on the instrument.

Function arguments



Parameter

Variable Type

Description



$mbHandle

Object

The Modbus instance pointer opened previously with ModbusTCP_Init.



$instrAddr

Integer

The address of the instrument to query (only used for slave devices connected to a server).



$startAddr

Integer

The starting address of the registers to write to. Must be in the range of 40000 to 49999.



$regArray

Array

An array of integer values to set the registers to. $startAddr + numberOfRegisters can not exceed 50000. Integers can not exceed the value of 16 bits or 65535.





Return parameters



Parameter

Variable Type

Description



$numWritten

Integer

The number of registers that were written to.





Example(s):

// Set up the address and port.

$serverAddr = "192.168.1.1";

$portNum = 502;

$mbHandle = ModbusTCP_Init($serverAddr, $portNum);





// Set values in the registers 40010 to 40019 (10 total).

$instrAddr = 17;

$startAddr = 40010;

$regArray = Array1DCreate("INTEGER", 10);

$regCount = 0;

while ($coilCount < 10)

{

$tempNum = GetRandomInteger(0, 65536); // Note: that the upper bound in non-inclusive.

Array1DSetValue($coilArray, $regCount, $tempNum);

$regCount = $regCount + 1;

}

$numWritten = ModbusTCP_WriteMultipleRegisters($mbHandle, $instrAddr, $startAddr, $regArray);





ModbusTCP_WriteMultipleRegistersHex

Previous Top Next



* * *



ModbusTCP_WriteMultipleRegistersHex



Usage:

$numWritten = ModbusTCP_WriteMultipleRegistersHex($mbHandle, $instrAddr, $startAddr, $regStr);





Description:

This function will write values to a number of holding registers on the instrument. The values are represented by a series of 16 bit (2 byte) hexadecimal number with spaces between them.





Remarks:

· The values sent are big-endian. ie. The high bytes and high bits are on the left, the low bytes and low bits are on the right.

eg. A5A5 5A5A will set the first register to 5A5A and the second register to A5A5.

Function arguments



Parameter

Variable Type

Description



$mbHandle

Object

The Modbus instance pointer opened previously with ModbusTCP_Init.



$instrAddr

String

The address of the instrument to write to in hexadecimal (only used for slave devices connected to a server).



$startAddr

String

The starting address of the registers to write to. Must be in the range of 0x9C40 to 0xC350.



$regAStr

String

An string of integer values with spaces between them to set the registers to. $startAddr + numberOfRegisters can not exceed 0xC351. Integers can not exceed the value of 16 bits or 0xFFFF.





Return parameters



Parameter

Variable Type

Description



$numWritten

Integer

The number of registers that were written to.





Example(s):

// Set up the address and port.

$serverAddr = "192.168.1.1";

$portNum = 502;

$mbHandle = ModbusTCP_Init($serverAddr, $portNum);





// Set values in the registers 40010 to 40019 (10 total).

$instrAddr = "11";

$startAddr = "9C4A";

$regStr = "FDCA 3FB8 5486 ABC9 0FCE 34AB CBCB B67A 98F0 2A3D";

$numWritten = ModbusTCP_WriteMultipleRegistersHex($mbHandle, $instrAddr, $startAddr, $regStr);





ModbusTCP_WriteSingleCoil

Previous Top Next



* * *



ModbusTCP_WriteSingleCoil



Usage:

ModbusTCP_WriteSingleCoil($mbHandle, $instrAddr, $coilAddr, $coilStatus);





Description:

This function will write the status to a single coil on the instrument.

Function arguments



Parameter

Variable Type

Description



$mbHandle

Object

The Modbus instance pointer opened previously with ModbusTCP_Init.



$instrAddr

Integer

The address of the instrument to write to (only used for slave devices connected to a server).



$coilAddr

Integer

The address of the coil to write to. Must be in the range of 0 to 9999.



$coilStatus

String

The status to write to the coil. If the status is "ON", "1", "TRUE", "T", the coil will be turned on. Otherwise, the coil will be turned off.





Return parameters



Parameter

Variable Type

Description



None.





Example(s):

// Set up the address and port.

$serverAddr = "192.168.1.1";

$portNum = 502;

$mbHandle = ModbusTCP_Init($serverAddr, $portNum);





// Turn on coil 10.

$instrAddr = 17;

$coilAddr = 10;

$coilStatus = "ON";

ModbusTCP_WriteSingleCoil($mbHandle, $instrAddr, $coilAddr, $coilStatus);





ModbusTCP_WriteSingleRegister

Previous Top Next



* * *



ModbusTCP_WriteSingleRegister



Usage:

ModbusTCP_WriteSingleRegister($mbHandle, $instrAddr, $regAddr, $regValue);





Description:

This function will write the value to a single holding register on the instrument.

Function arguments



Parameter

Variable Type

Description



$mbHandle

Object

The Modbus instance pointer opened previously with ModbusTCP_Init.



$instrAddr

Integer

The address of the instrument to write to (only used for slave devices connected to a server).



$regAddr

Integer

The address of the register to write to. Must be in the range of 40000 to 49999.



$regValue

Integer

The value to write to the register. Must be between 0 and 65535.





Return parameters



Parameter

Variable Type

Description



None.





Example(s):

// Set up the address and port.

$serverAddr = "192.168.1.1";

$portNum = 502;

$mbHandle = ModbusTCP_Init($serverAddr, $portNum);





// Send Value to register at 40010.

$instrAddr = 17;

$regAddr = 40010;

$regValue = 45357;

ModbusTCP_WriteSingleRegister($mbHandle, $instrAddr, $regAddr, $regValue);





ModbusTCP_WriteSingleRegisterHex

Previous Top Next



* * *



ModbusTCP_WriteSingleRegisterHex



Usage:

ModbusTCP_WriteSingleRegisterHex($mbHandle, $instrAddr, $regAddr, $regStr);





Description:

This function will write the value to a single holding register on the instrument.

Function arguments



Parameter

Variable Type

Description



$mbHandle

Object

The Modbus instance pointer opened previously with ModbusTCP_Init.



$instrAddr

String

The address of the instrument to write to in hexadecimal (only used for slave devices connected to a server).



$regAddr

String

The address of the register to write to in hexadecimal. Must be in the range of 0x9C40 to 0xC350.



$regStr

String

The value to write to the holding register in hexadecimal. Must be in the range of 0x0 to 0xFFFF.





Return parameters



Parameter

Variable Type

Description



None.





Example(s):

// Set up the address and port.

$serverAddr = "192.168.1.1";

$portNum = 502;

$mbHandle = ModbusTCP_Init($serverAddr, $portNum);





// Send Value to register at 40010.

$instrAddr = "11";

$regAddr = "9C4A";

$regStr = "4FAB";

ModbusTCP_WriteSingleRegisterHex($mbHandle, $instrAddr, $regAddr, $regStr);





OPCReadItem

Previous Top Next



* * *



OPCReadItem



Usage:

$return = OPCReadItem($OPCSrvHandle, $itemID, $dataSource);





Description:

This function will read a value from an OPC Data Server. The returned data will be one of: Byte, Byte Array, Integer or Float. The Byte and Byte Array data types will be returned in a hex string variable.





Remarks:

If the value is a byte, the data will be in a hex string. Example: "FF".

If the value is a byte array, the data will be in a space delimited hex string. Example: "FF 4D 5E".

Before using this command, you should use an OPC Data Server Explorer program to check the data item availability and type.

Function arguments



Parameter

Variable Type

Description



$OPCSrvHandle

Object

A handle to an OPC server that was opened previously using OPCServerConnectLocal.



$itemID

String

The item ID of the data to read.



$dataSource

String

The data source from the server. This must be either CACHE or DEVICE.





Return parameters



Parameter

Variable Type

Description



$return

String, Float, Integer

The value returned from the OPC server.





Example(s):





// Set up the parameters.

$OPCsrv = "TestServer.OPC.6";

$item = "Dev01\\G1\\D100.S.10";

$dSource = "DEVICE";





// Open Communication

$srvHandle = OPCServerConnectLocal($OPCsrv);





// Read one item.

$return = OPCReadItem($srvHandle, $item, $dSource);





OPCServerConnectLocal

Previous Top Next



* * *



OPCServerConnectLocal



Usage:

$OPCSrvHandle = OPCServerConnectLocal($serverName);





Description:

This function will create a connection to a local OPC server.





Remarks:

This command ONLY supports local servers.

Function arguments



Parameter

Variable Type

Description



$serverName

String

The name of the local OPC server to connect to.





Return parameters



Parameter

Variable Type

Description



$OPCSrvHandle

Object

A handle to the OPC server that can be passed to other OPC functions.





Example(s):





// Set up the parameters.

$OPCsrv = "TestServer.OPC.6";

$item = "Dev01\\G1\\D100.S.10";

$dSource = "DEVICE";





// Open Communication

$srvHandle = OPCServerConnectLocal($OPCsrv);





OPCServerDisconnect

Previous Top Next



* * *



OPCServerConnectLocal



Usage:

OPCServerDisconnect($OPCSrvHandle);





Description:

This function will disconnect from an OPC server.





Remarks:

If the server connection has already been closed, this function will generate an error.

Function arguments



Parameter

Variable Type

Description



$OPCSrvHandle

Object

A handle to an OPC server.





Return parameters



Parameter

Variable Type

Description



None





Example(s):





OPCServerDisconnect($OPCSrvHandle);





OPCWriteItem

Previous Top Next



* * *



OPCWriteItem



Usage:

OPCWriteItem($OPCSrvHandle, $itemID, $value);





Description:

This function will write a value to an OPC Data Server. The data will be one of: Byte, Byte Array, Integer or Float. The Byte and Byte Array data types should be in a hex string variable.





Remarks:

If the value is a byte, the data will be in a hex string. Example: "FF".

If the value is a byte array, the data will be in a space delimited hex string. Example: "FF 4D 5E".

Before using this command, you should use an OPC Data Server Explorer program to check the data item availability and type.

Function arguments



Parameter

Variable Type

Description



$OPCSrvHandle

Object

A handle to an OPC server that was opened previously using OPCServerConnectLocal.



$itemID

String

The item ID of the data to write.



$value

String, Float, Integer

The data to send to the server.





Return parameters



Parameter

Variable Type

Description



None





Example(s):





// Set up the parameters.

$OPCsrv = "TestServer.OPC.6";

$item = "Dev01\\G1\\D100.S.10";

$data = "FF D5 C8";





// Open Communication

$srvHandle = OPCServerConnectLocal($OPCsrv);





// Write the data.

OPCWriteItem($srvHandle, $item, $data);





SFTP_Close

Previous Top Next



* * *



SFTP_Close



Usage:

SFTP_Close($sftpSession);





Description:

Closes SFTP connection, disposing of all resources.



Function Arguments





Parameter



Variable Type

Description



$sftpSession



Object

Handle to SFTP connection returned by the SFTP_Connect() function.





Return Parameters





Parameter



Variable Type

Description



None

--





Example:

SFTP_Close($sftpSession);





SFTP_Connect

Previous Top Next



* * *



SFTP_Connect



Usage:

$sftpSession = SFTP_Connect($host, $port, $username, $password, $timeoutms);





Description:

Opens a new connection to the SFTP server and authenticates the user using password authentication method. Returns a handle to the connection.



Function Arguments





Parameter



Variable Type

Description



$host

String

Hostname or IP address of server to connect to.



$port

Integer

Port # server is listening on (typically 22).



$username

String

Name of user to login as.



$password

String

User's password.



$timeoutms

Integer

Time to wait for successful connection, in milliseconds. Authentication can take additional time.





Return Parameters





Parameter



Variable Type

Description



$sftpSession

Object

Handle to SFTP connection.





Example:

$sftpSession = SFTP_Connect("localhost", 22, "root", "password123", 5000); //connect to local SFTP server with a 5s timeout





SFTP_ConnectBool

Previous Top Next



* * *



SFTP_ConnectBool



Usage:

($success, $sftpSession) = SFTP_ConnectBool($host, $port, $username, $password, $timeoutms);





Description:

Opens a new connection to the SFTP server and authenticates the user using password authentication method. Returns whether the connection was successful and a handle to the connection.





Note:

· A failed connection will not cause the test to fail. The boolean should be checked for a successful connection before attempting any other functions.

· An invalid log in name and password will still cause the test to fail.



Function Arguments





Parameter



Variable Type

Description



$host

String

Hostname or IP address of server to connect to.



$port

Integer

Port # server is listening on (typically 22).



$username

String

Name of user to login as.



$password

String

User's password.



$timeoutms

Integer

Time to wait for successful connection, in milliseconds. Authentication can take additional time.





Return Parameters





Parameter



Variable Type

Description



$success

Boolean

Whether the connection was successful



$sftpSession

Object

Handle to SFTP connection.





Example:

//connect to local SFTP server with a 5s timeout

($success, $sftpSession) = SFTP_ConnectBool("localhost", 22, "root", "password123", 5000);





SFTP_CreateDirectory

Previous Top Next



* * *



SFTP_CreateDirectory



Usage:

SFTP_CreateDirectory($sftpSession, $path, $posixPermissions);





Description:

Creates a directory at the path specified. Errors out if the directory already exists.



Function Arguments





Parameter



Variable Type

Description



$sftpSession



Object

Handle to SFTP connection returned by the SFTP_Connect() function.



$path

String

The absolute or relative path of the directory to be created.



$posixPermissions

Integer

The POSIX permissions for this directory, e.g., "0700" (which must be given as 0x1c0 – Jabil Test does not support constants in octal notation).





Return Parameters





Parameter



Variable Type

Description



None

--





Example:

//Create directory with full read/write/execute permissions for all users

$remoteDirectory = "TEST-DIRECTORY";

$POSIX = 0x1FF; //”777”

SFTP_CreateDirectory($SftpSession, $remoteDirectory, $POSIX);





SFTP_DeleteDirectory

Previous Top Next



* * *



SFTP_DeleteDirectory



Usage:

SFTP_DeleteDirectory($sftpSession, $path);





Description:

Deletes an empty directory.





Remarks:

Will error out if the directory is not empty.

Errors out if the directory cannot be found.



Function Arguments





Parameter



Variable Type

Description



$sftpSession



Object

Handle to SFTP connection returned by the SFTP_Connect() function.



$path

String

The absolute or relative path of the directory to remove.





Return Parameters





Parameter



Variable Type

Description



None

--





Example:

//Remove directory and all files and subdirectories

$remoteDirectory = "TEST-DIRECTORY";

SFTP_DeleteDirectory($SftpSession, $remoteDirectory);





SFTP_DeleteFile

Previous Top Next



* * *



SFTP_DeleteFile



Usage:

SFTP_DeleteFile($sftpSession, $path);





Description:

Deletes a file. Errors out if the file cannot be found.



Function Arguments





Parameter



Variable Type

Description



$sftpSession



Object

Handle to SFTP connection returned by the SFTP_Connect() function.



$path

String

An absolute or relative path specifying the file. Use "/" as the directory delimiter.





Return Parameters





Parameter



Variable Type

Description



None

--





Example:

//Delete file on remote server

$remoteFile = "TEST-RENAME.TXT";

SFTP_DeleteFile($SftpSession, $remoteFile);





SFTP_DownloadFile

Previous Top Next



* * *



SFTP_DownloadFile



Usage:

SFTP_DownloadFile($sftpSession, $remoteFile, $localFile, $copyMode);





Description:

Copies a file from the remote server to the local client.



Function Arguments





Parameter



Variable Type

Description



$sftpSession



Object

Handle to SFTP connection returned by the SFTP_Connect() function.



$remoteFile

String

An absolute or relative (from WorkingDirectory) path specifying the file on the server. Use "/" as the directory delimiter.



$localFile

String

An absolute or relative (from the current working directory) path specifying the file on the client. Use "/" as the directory delimiter.



$copyMode

String

Determines the type of copy to perform. Valid modes are:

· APPEND – Appends the source file to the destination file. Upon completion of a copy operation, indicates the source file was appended to the destination file.

· COPY – Always over-write existing files with a new copy. Upon completion of a copy operation, indicates the file was overwritten.

· RESTART – If the file timestamps match and the source is larger than the destination, then the necessary trailing bytes from the source are appended to the destination. This mode should only be used to restart a failed copy. If the timestamps match and the sizes match, then no copy is performed (like copy mode ‘SYNCHRONIZE’). If the timestamps do not match or the source is smaller than the destination, then a full copy is performed. Upon completion of a copy operation, indicates a restart was performed.

· SYNCHRONIZE – If the file timestamps and sizes match, then no copy is performed. Otherwise a full copy is performed. Upon completion of a copy operation, indicates no copy was performed.





Return Parameters





Parameter



Variable Type

Description



None

--





Example:

//Download file, overwriting it if it already exists

$remoteFile = "TEST.TXT";

$localFile = "C:\\TEST\\TEST-DL.TXT";

SFTP_DownloadFile($SftpSession, $remoteFile, $localFile, "COPY");





SFTP_Rename

Previous Top Next



* * *



SFTP_Rename



Usage:

SFTP_Rename($sftpSession, $oldPath, $newPath);





Description:

Renames or moves a file or directory.



Function Arguments





Parameter



Variable Type

Description



$sftpSession



Object

Handle to SFTP connection returned by the SFTP_Connect() function.



$oldPath

String

The absolute or relative path of an existing directory or file.



$newPath

String

The absolute or relative new path.





Return Parameters





Parameter



Variable Type

Description



None

--





Example:

//Rename directory

$remoteDirectory = "TEST-DIRECTORY";

$newDirectoryName = "TEST-DIRECTORY-RENAME";

SFTP_Rename($SftpSession, $remoteDirectory, $newDirectoryName);





SFTP_UploadFile

Previous Top Next



* * *



SFTP_UploadFile



Usage:

SFTP_UploadFile($sftpSession, $localFile, $remoteFile, $copyMode);





Description:

Copies a file from the local client to the remote server.



Function Arguments





Parameter



Variable Type

Description



$sftpSession



Object

Handle to SFTP connection returned by the SFTP_Connect() function.



$localFile

String

An absolute or relative (from the current working directory) path specifying the file on the client. Use "/" as the directory delimiter.



$remoteFile

String

An absolute or relative (from WorkingDirectory) path specifying the file on the server. Use "/" as the directory delimiter.



$copyMode

String

Determines the type of copy to perform. Valid modes are:

· APPEND – Appends the source file to the destination file. Upon completion of a copy operation, indicates the source file was appended to the destination file.

· COPY – Always over-write existing files with a new copy. Upon completion of a copy operation, indicates the file was overwritten.

· RESTART – If the file timestamps match and the source is larger than the destination, then the necessary trailing bytes from the source are appended to the destination. This mode should only be used to restart a failed copy. If the timestamps match and the sizes match, then no copy is performed (like copy mode ‘SYNCHRONIZE’). If the timestamps do not match or the source is smaller than the destination, then a full copy is performed. Upon completion of a copy operation, indicates a restart was performed.

· SYNCHRONIZE – If the file timestamps and sizes match, then no copy is performed. Otherwise a full copy is performed. Upon completion of a copy operation, indicates no copy was performed.





Return Parameters





Parameter



Variable Type

Description



None

--





Example:

//Upload a file, overwriting it if it already exists on server

$localFile = "C:\\TEST\\TEST.TXT";

$remoteFile = "TEST-UL.TXT";

SFTP_UploadFile($SftpSession, $localFile, $remoteFile, "COPY");





Aardvark_SPI_Close

Previous Top Next



* * *



Aardvark_SPI_Close



Usage:

Aardvark_SPI_Close($Aardvark_Handle);



Description:

This function closes the instrument I/O session created with Aardvark_SPI_Init. It deallocates any memory resources Aardvark uses.



Remarks:

This function requires the Aardvark USB drivers from Total Phase to be installed.

This function is tested with a total phase TP240141 usb device.

Function arguments



Parameter

Variable Type

Description



$Aardvark_Handle

Object

The instrument handle obtained from Aardvark_SPI_Init that identifies a particular instrument's session.





Return parameters



Parameter

Variable Type

Description



None





Example(s):

Aardvark_SPI_Close($Aardvark_Handle);





Aardvark_SPI_GetSlaveData

Previous Top Next



* * *



Aardvark_SPI_GetSlaveData



Usage:

$returnString = Aardvark_SPI_GetSlaveData($Aardvark_Handle, $Timeoutms);





Description:

This function reads/gets data sent to the slave device in the SPI chain.





Remarks:

This function requires the Aardvark USB drivers from Total Phase to be installed.

This function is tested with a total phase TP240141 usb device.

Function arguments



Parameter

Variable Type

Description



$Aardvark_Handle

Object

The instrument handle obtained from Aardvark_SPI_Init that identifies a particular instrument's session.



$Timeoutms

Integer

Timeout value in ms.





Return parameters



Parameter

Variable Type

Description



$returnString

String

Data received by slave device.





Example(s):

// Get data received by the slave device and timeout in 10 ms if no data received.

$returnString = Aardvark_SPI_GetSlaveData($Aardvark_Handle, 10);





Aardvark_SPI_Init

Previous Top Next



* * *



Aardvark_SPI_Init



Usage:

$Aardvark_Handle = Aardvark_SPI_Init($PortNumber, $Mode);



Description:

This function configures and returns a handle to the Aardvark SPI/I2C interface device.



Remarks:

This function requires the Aardvark USB drivers from Total Phase to be installed.

This function is tested with a total phase TP240141 usb device.

Function arguments



Parameter

Variable Type

Description



$PortNumber

Integer

The serial port number of the Aardvark SPI device.



$Mode

Integer

Mode of the operation of the device.

Values:

· bit 0: Phase 0 = Sample_Setup

1 = Setup_Sample

· bit 1: Polarity 0 = Falling

1 = Rising





Return parameters



Parameter

Variable Type

Description



$Handle

Object

A handle to the Aardvark SPI/I2C controller.





Example(s):

$Aardvark_Handle = Aardvark_SPI_Init($PortNumber, $Mode);

$Aardvark_Handle = Aardvark_SPI_Init(0, 1);





Aardvark_SPI_MasterBlastDataFile

Previous Top Next



* * *



Aardvark_SPI_MasterBlastDataFile



Usage:

$returnString = Aardvark_SPI_MasterBlastDataFile($Aardvark_Handle, $DataFileName);



Description:

This function sends data from the device defined as the Master Device in the SPI chain by reading a file containing the data to send.





Remarks:

This function requires the Aardvark USB drivers from Total Phase to be installed.

This function is tested with a total phase TP240141 usb device.

Function arguments



Parameter

Variable Type

Description



$Aardvark_Handle

Object

The instrument handle obtained from Aardvark_SPI_Init that identifies a particular instrument's session.



$DataFileName

String

The name and path of the file containing the data to send.





Return parameters



Parameter

Variable Type

Description



$returnString

String

Returns any information from the target device in the SPI chain.





Example(s):

$returnString = Aardvark_SPI_MasterBlastDataFile($Aardvark_Handle, ”c:\\Datafile”);





Aardvark_SPI_MasterSendData

Previous Top Next



* * *



Aardvark_SPI_MasterSendData



Usage:

$returnString = Aardvark_SPI_MasterSendData($Aardvark_Handle,$SPIMsg);





Description:

This function sends data from the device defined as the Master Device in the SPI chain.





Remarks:

This function requires the Aardvark USB drivers from Total Phase to be installed.

This function is tested with a total phase TP240141 usb device.

Function arguments



Parameter

Variable Type

Description



$Aardvark_Handle

Object

The instrument handle obtained from Aardvark_SPI_Init that identifies a particular instrument's session.



$SPIMsg

String

HEX string to send to the target.





Return parameters



Parameter

Variable Type

Description



$returnString

String

Returns any information from the target device in the SPI chain.





Example(s):

$returnString = Aardvark_SPI_MasterSendData($Aardvark_Handle, $SPIMsg);





Aardvark_SPI_SetMaster

Previous Top Next



* * *



Aardvark_SPI_SetMaster



Usage:

Aardvark_SPI_SetMaster($Aardvark_Handle, $BitRate);





Description:

This function sets the Aardvark as the Master device in the SPI chain.



Remarks:

This function requires the Aardvark USB drivers from Total Phase to be installed.

This function is tested with a total phase TP240141 usb device.

Function arguments



Parameter

Variable Type

Description



$Aardvark_Handle

Object

The instrument handle obtained from Aardvark_SPI_Init that identifies a particular instrument's session.



$BitRate

Integer

Bit Rate in kHz.





Return parameters



Parameter

Variable Type

Description



None





Example(s):

// Sets the Aardvark as Master with a 125 kHz bit rate.

Aardvark_SPI_SetMaster($Aardvark_Handle, 125);





Aardvark_SPI_SetSlave

Previous Top Next



* * *



Aardvark_SPI_SetSlave



Usage:

Aardvark_SPI_SetSlave($Aardvark_Handle);





Description:

This function sets the Aardvark as a slave device in the SPI chain.





Remarks:

This function requires the Aardvark USB drivers from Total Phase to be installed.

This function is tested with a total phase TP240141 usb device.

Function arguments



Parameter

Variable Type

Description



$Aardvark_Handle

Object

The instrument handle obtained from Aardvark_SPI_Init that identifies a particular instrument's session.





Return parameters



Parameter

Variable Type

Description



None





Example(s):

Aardvark_SPI_SetSlave($Aardvark_Handle);





Aardvark_SPI_SlaveDisable

Previous Top Next



* * *



Aardvark_SPI_SlaveDisable



Usage:

Aardvark_SPI_SlaveDisable($Aardvark_Handle);





Description:

This function disables the slave device and closes the instrument I/O session created with Aardvark_SPI_Init. It deallocates any memory resources Aardvark uses.





Remarks:

This function requires the Aardvark USB drivers from Total Phase to be installed.

This function is tested with a total phase TP240141 usb device.

Function arguments



Parameter

Variable Type

Description



$Aardvark_Handle

Object

The instrument handle obtained from Aardvark_SPI_Init that identifies a particular instrument's session.





Return parameters



Parameter

Variable Type

Description



None





Example(s):

Aardvark_SPI_SlaveDisable($Aardvark_Handle);





NI_845x_Close

Previous Top Next



* * *



NI_845x_Close



Usage:

$status = NI_845x_Close($deviceHandle);





Description:

This function closes communication with the NI-845x adapter that was previously opened with the function NI_845x_Open.

Function arguments



Parameter

Variable Type

Description



$deviceHandle

Object

Reference to the NI-845x device.





Return parameters



Parameter

Variable Type

Description



$status

String

Description of any errors or warnings returned from the device. This will be blank, "", if there is no error.





Example(s):

// Open reference to device.

$MAXname = "NI-8452";

($status, $deviceHandle) = NI_845x_Open($MAXname);





// Close the reference.

$status =NI_845x_Close($deviceHandle);





if ($status == "")

{

UpdateStatus("No error while closing.");

End;

}





// If we got here then there was an error reported.

$outStr = "Error reported: " + $status;

UpdateStatus($outStr);

End;





NI_845x_DioReadLine

Previous Top Next



* * *



NI_845x_DioReadLine



Usage:

($status, $dataRead) = NI_845x_DioReadLine($deviceHandle, $portNumber, $lineNumber);





Description:

This function returns the status of one line from one DIO port on the specified device.

Function arguments



Parameter

Variable Type

Description



$deviceHandle

Object

Reference to the NI-845x device.



$portNumber

Integer

The DIO port to read the line from.



$lineNumber

Integer

The line number to read from.





Return parameters



Parameter

Variable Type

Description



$status

String

Description of any errors or warnings returned from the device. This will be blank, "", if there is no error.



$dataRead

Integer

The status of the line that was read. 0 = line is low, 1 = line is high.





Example(s):

// Open reference to device.

$MAXname = "NI-8452";

($status, $deviceHandle) = NI_845x_Open($MAXname);





// Read the status from port 0, line 1.

$portNum = 0;

$lineNum = 1;

($status, $data) = NI_845x_DioReadLine($deviceHandle, $portNum, $lineNum);





// Close the reference.

$status =NI_845x_Close($deviceHandle);





NI_845x_DioReadPort

Previous Top Next



* * *



NI_845x_DioReadPort



Usage:

($status, $dataRead) = NI_845x_DioReadPort($deviceHandle, $portNumber);





Description:

This function returns the status of all lines from one DIO port on the specified device.

Function arguments



Parameter

Variable Type

Description



$deviceHandle

Object

Reference to the NI-845x device.



$portNumber

Integer

The DIO port to read data from.





Return parameters



Parameter

Variable Type

Description



$status

String

Description of any errors or warnings returned from the device. This will be blank, "", if there is no error.



$dataRead

Integer

The status of the port that was read. bit 0 = line 0, bit 1 = line 1, etc.





Example(s):

// Open reference to device.

$MAXname = "NI-8452";

($status, $deviceHandle) = NI_845x_Open($MAXname);





// Read the status from port 0.

$portNum = 0;

($status, $data) = NI_845x_DioReadPort($deviceHandle, $portNum);





// Close the reference.

$status =NI_845x_Close($deviceHandle);





NI_845x_DioSetDriverType

Previous Top Next



* * *



NI_845x_DioSetDriverType



Usage:

$status = NI_845x_DioSetDriverType($deviceHandle, $portNumber, $driverType);





Description:

This function sets the output driver type for one port.

Function arguments



Parameter

Variable Type

Description



$deviceHandle

Object

Reference to the NI-845x device.



$portNumber

Integer

The DIO port to set the driver type of.



$driverType

String

The output driver type to set. Valid values are:

· OPENDRAIN

· PUSHPULL





Return parameters



Parameter

Variable Type

Description



$status

String

Description of any errors or warnings returned from the device. This will be blank, "", if there is no error.





Example(s):

// Open reference to device.

$MAXname = "NI-8452";

($status, $deviceHandle) = NI_845x_Open($MAXname);





// Set port 0 to Push-Pull.

$portNum = 0;

$driveType = "PUSHPULL";

$status = NI_845x_DioSetDriverType($deviceHandle, $portNum, $driveType);





// Close the reference.

$status =NI_845x_Close($deviceHandle);





NI_845x_DioSetPortLineDirectionMap

Previous Top Next



* * *



NI_845x_DioSetPortLineDirectionMap



Usage:

$status = NI_845x_DioSetPortLineDirectionMap($deviceHandle, $portNumber, $directionMap);





Description:

This function sets the lines of the port to output or input depending on the bits of $directionMap.

Function arguments



Parameter

Variable Type

Description



$deviceHandle

Object

Reference to the NI-845x device.



$portNumber

Integer

The DIO port to set the DIO line direction of.



$directionMap

Integer

Bit representation of the line in the port. bit 0 = line 0, bit 1 = line 1, etc. Setting a bit to 0 makes it a digital input line, setting a bit to 1 makes it a digital output line.





Return parameters



Parameter

Variable Type

Description



$status

String

Description of any errors or warnings returned from the device. This will be blank, "", if there is no error.





Example(s):

// Open reference to device.

$MAXname = "NI-8452";

($status, $deviceHandle) = NI_845x_Open($MAXname);





// Set odd numbered lines to outputs.

$portNum = 0;

$dirMap = 85; // This is binary 0101 0101

$status = NI_845x_DioSetPortLineDirectionMap($deviceHandle, $portNum, $dirMap);





// Close the reference.

$status =NI_845x_Close($deviceHandle);





NI_845x_DioSetPortVoltageType

Previous Top Next



* * *



NI_845x_DioSetPortVoltageType



Usage:

$status = NI_845x_DioSetPortVoltageType($deviceHandle, $portNumber, $voltageType);





Description:

This function sets the voltage type for one port.

Function arguments



Parameter

Variable Type

Description



$deviceHandle

Object

Reference to the NI-845x device.



$portNumber

Integer

The DIO port to set the voltage type of.



$voltageType

Integer

The voltage type for the port.





Return parameters



Parameter

Variable Type

Description



$status

String

Description of any errors or warnings returned from the device. This will be blank, "", if there is no error.





Example(s):

// Open reference to device.

$MAXname = "NI-8452";

($status, $deviceHandle) = NI_845x_Open($MAXname);





// Set port 0..

$portNum = 0;

$voltType = 0;

$status = NI_845x_DioSetDriverType($deviceHandle, $portNum, $voltType);





// Close the reference.

$status =NI_845x_Close($deviceHandle);





NI_845x_DioWriteLine

Previous Top Next



* * *



NI_845x_DioWriteLine



Usage:

$status = NI_845x_DioWriteLine($deviceHandle, $portNumber, $lineNumber, $dataToWrite);





Description:

This function will output data on one line of one port.

Function arguments



Parameter

Variable Type

Description



$deviceHandle

Object

Reference to the NI-845x device.



$portNumber

Integer

The DIO port to set an output line of.



$lineNumber

Integer

The line to set the output of.



$dataToWrite

Integer

The data to send to the line. 0 = set the line low, 1 = set the line high.





Return parameters



Parameter

Variable Type

Description



$status

String

Description of any errors or warnings returned from the device. This will be blank, "", if there is no error.





Example(s):

// Open reference to device.

$MAXname = "NI-8452";

($status, $deviceHandle) = NI_845x_Open($MAXname);





// Set port 0, line 1 to high.

$portNum = 0;

$lineNum = 1;

$data = 1;

$status = NI_845x_DioWriteLine($deviceHandle, $portNum, $lineNum, $data);





// Close the reference.

$status =NI_845x_Close($deviceHandle);





NI_845x_DioWritePort

Previous Top Next



* * *



NI_845x_DioWritePort



Usage:

$status = NI_845x_DioWritePort($deviceHandle, $portNumber, $dataToWrite);





Description:

This function will output the data on one port. Only lines configured for output will be updated.

Function arguments



Parameter

Variable Type

Description



$deviceHandle

Object

Reference to the NI-845x device.



$portNumber

Integer

The DIO port to set an output line of.



$dataToWrite

Integer

The data to send to the port.





Return parameters



Parameter

Variable Type

Description



$status

String

Description of any errors or warnings returned from the device. This will be blank, "", if there is no error.





Example(s):

// Open reference to device.

$MAXname = "NI-8452";

($status, $deviceHandle) = NI_845x_Open($MAXname);





// Set port 0, even numbered lines high.

$portNum = 0;

$data = 170; // binary 1010 1010.

$status = NI_845x_DioWritePort($deviceHandle, $portNum, $data);





// Close the reference.

$status =NI_845x_Close($deviceHandle);





NI_845x_Open

Previous Top Next



* * *



NI_845x_Open



Usage:

($status, $devicHandle) = NI_845x_Open($deviceName);





Description:

This function opens communication with the named NI-845x adapter.

Function arguments



Parameter

Variable Type

Description



$deviceName

String

The name of the device from NI-MAX or the NI-MAX alias for the device.





Return parameters



Parameter

Variable Type

Description



$status

String

Description of any errors or warnings returned from the device. This will be blank, "", if there is no error.



$deviceHandle

Object

A reference to the device that can be used by other NI-845x functions.





Example(s):

// Open reference to device.

$MAXname = "NI-8452";

($status, $deviceHandle) = NI_845x_Open($MAXname);





NI_845x_SetIOVoltageLevel

Previous Top Next



* * *



NI_845x_SetIOVoltageLevel



Usage:

$status = NI_845x_SetIOVoltgeLevel($deviceHandle, $voltageLevel);





Description:

This function will set the voltage level that equates to a high level (1) on ti DIO lines.

Function arguments



Parameter

Variable Type

Description



$deviceHandle

Object

Reference to the NI-845x device.



$voltageLevel

Integer

The voltage level to set the device to. Valid entries are:

· 12 = 1.2 volts

· 15 = 1.5 volts

· 18 = 1.8 volts

· 25 = 2.5 volts

· 33 = 3.3 volts.





Return parameters



Parameter

Variable Type

Description



$status

String

Description of any errors or warnings returned from the device. This will be blank, "", if there is no error.





Example(s):

// Open reference to device.

$MAXname = "NI-8452";

($status, $deviceHandle) = NI_845x_Open($MAXname);





// Set the device to 2.5 volt operation..

$voltLevel = 25;

$status = NI_845x_SetIOVoltageLevel($deviceHandle, $voltLevel);





// Close the reference.

$status =NI_845x_Close($deviceHandle);





NI_845x_SpiConfigurationClose

Previous Top Next



* * *



NI_845x_SpiConfigurationClose



Usage:

$status = NI_845x_SpiConfigurationClose($configHandle);





Description:

This function will close a reference to the SPI configuration that was previously opened with NI_845x_SpiConfigurationOpen.

Function arguments



Parameter

Variable Type

Description



$configHandle

Object

A reference to the SPI configuration.





Return parameters



Parameter

Variable Type

Description



$status

String

Description of any errors or warnings returned from the device. This will be blank, "", if there is no error.





Example(s):

// Open reference to SPI configuration.

($status, $configHandle) = NI_845x_SpiConfigurationOpen();





// Close the reference to the configuration.

$status = NI_845x_SpiConfigurationClose($configHandle);





NI_845x_SpiConfigurationGetChipSelect

Previous Top Next



* * *



NI_845x_SpiConfigurationGetChipSelect



Usage:

($status, $chipSelected) = NI_845x_SpiConfigurationGetChipSelect($configHandle);





Description:

This function will return the selected chip on the SPI adapter.

Function arguments



Parameter

Variable Type

Description



$configHandle

Object

A reference to the SPI configuration.





Return parameters



Parameter

Variable Type

Description



$status

String

Description of any errors or warnings returned from the device. This will be blank, "", if there is no error.



$chipSelected

Integer

The number of the chip selected.





Example(s):

// Open reference to SPI configuration.

($status, $configHandle) = NI_845x_SpiConfigurationOpen();





// Get the chip selected.

($status, $chipSel) = NI_845x_SpiConfigurationGetChipSelect($configHandle);





NI_845x_SpiConfigurationGetClockRate

Previous Top Next



* * *



NI_845x_SpiConfigurationGetClockRate



Usage:

($status, $clockRate) = NI_845x_SpiConfigurationGetClockRate($configHandle);





Description:

This function will return the clock speed on the SPI adapter.

Function arguments



Parameter

Variable Type

Description



$configHandle

Object

A reference to the SPI configuration.





Return parameters



Parameter

Variable Type

Description



$status

String

Description of any errors or warnings returned from the device. This will be blank, "", if there is no error.



$clockRate

Integer

The clock rate of the SPI adapter.





Example(s):

// Open reference to SPI configuration.

($status, $configHandle) = NI_845x_SpiConfigurationOpen();





// Get the clock rate.

($status, $clockRate) = NI_845x_SpiConfigurationGetClockRate($configHandle);





NI_845x_SpiConfigurationOpen

Previous Top Next



* * *



NI_845x_SpiConfigurationOpen



Usage:

($status, $configHandle) = NI_845x_SpiConfigurationOpen();





Description:

This function will open and create a handle to the SPI configuration.

Function arguments



Parameter

Variable Type

Description



None





Return parameters



Parameter

Variable Type

Description



$status

String

Description of any errors or warnings returned from the device. This will be blank, "", if there is no error.



$configHandle

Object

A reference to the SPI configuration that can be used by other SPI configuration functions.





Example(s):

// Open reference to SPI configuration.

($status, $configHandle) = NI_845x_SpiConfigurationOpen();





NI_845x_SpiConfigurationSetChipSelect

Previous Top Next



* * *



NI_845x_SpiConfigurationSetChipSelect



Usage:

$status = NI_845x_SpiConfigurationSetChipSelect($configHandle, $chipSelect);





Description:

This function will set the selected chip on the SPI adapter.

Function arguments



Parameter

Variable Type

Description



$configHandle

Object

A reference to the SPI configuration.



$chipSelect

Integer

The number of the chip to select.





Return parameters



Parameter

Variable Type

Description



$status

String

Description of any errors or warnings returned from the device. This will be blank, "", if there is no error.





Example(s):

// Open reference to SPI configuration.

($status, $configHandle) = NI_845x_SpiConfigurationOpen();





// Set the selected chip.

$chipSelect = 0;

$status = NI_845x_SpiConfigurationSetChipSelect($configHandle, $chipSelect);





NI_845x_SpiConfiguration_SetClockRate

Previous Top Next



* * *



NI_845x_SpiConfigurationSetClockRate



Usage:

$status = NI_845x_SpiConfigurationSetClockRate($configHandle, $clockRate);





Description:

This function will set the selected chip on the SPI adapter.

Function arguments



Parameter

Variable Type

Description



$configHandle

Object

A reference to the SPI configuration.



$clockRate

Integer

The clock rate to set for the SPI adapter (in kHz).





Return parameters



Parameter

Variable Type

Description



$status

String

Description of any errors or warnings returned from the device. This will be blank, "", if there is no error.





Example(s):

// Open reference to SPI configuration.

($status, $configHandle) = NI_845x_SpiConfigurationOpen();





// Set the clock rate to 100 kHz.

$clockRate = 100;

$status = NI_845x_SpiConfigurationSetClockRate($configHandle, $clockRate);





NI_845x_SpiReadWrite

Previous Top Next



* * *



NI_845x_SpiReadWrite



Usage:

($status, $readSize, $readData) = NI_845x_SpiReadWrite($deviceHandle, $configHandle, $writeSizw, $writeData);





Description:

This function will write data to the SPI adapter and then read any returned data.

Function arguments



Parameter

Variable Type

Description



$deviceHandle

Object

A reference to the SPI device.



$configHandle

Object

A reference to the SPI configuration.



$writeSize

Integer

The number of bytes to write (must not be 0).



$writeData

Array

Array of bytes to write to the SPI bus.





Return parameters



Parameter

Variable Type

Description



$status

String

Description of any errors or warnings returned from the device. This will be blank, "", if there is no error.



$readSize

Integer

The number of bytes read from the SPI bus.



$readData

Array

Array of bytes read from the SPI bus.





Example(s):

//Open the device.

($status, $deviceHandle) = NI_845x_Open($MAXname);





// Open reference to SPI configuration.

($status, $configHandle) = NI_845x_SpiConfigurationOpen();





// Send some data and read some back.

$writeData = Array1DCreate("INTEGER", 2);

Array1DSetValue($writeData, 0, 3);

Array1DSetValue($writeData, 1, 4);

$writeSize = ArrayGetLength($writeData);





($status, $readSize, $readData) = NI_845x_SpiReadWrite($deviceHandle, $configHandle, $writeSize, $writeData);





SshClose

Previous Top Next



* * *



SshClose



Usage:

SshClose($SshConnection);





Description:

This function closes a connection to an SSH server, disposing of all resources and closing all open sessions. Failure to call this function can leave the receiver thread running forever.

Function arguments



Parameter

Variable Type

Description



$SshConnection

Object

Handle to SSH connection returned by the SshConnect function.





Return parameters



Parameter

Variable Type

Description



None





Example:

SshClose($SshConnection);





SshConnect

Previous Top Next



* * *



SshConnect



Usage:

$SshConnection = SshConnect($host, $port, $userName, $password, $timeoutms);





Description:

This function opens a new connection to an SSH server and authenticates the user using a password authentication method. Returns a handle to the connection.

Function arguments



Parameter

Variable Type

Description



$host

String

Hostname or IP address of the server to connect to.



$port

Integer

Port number the server is listening on (typically 22).



$userName

String

Name of the user to log in as.



$password

String

The user's password.



$timeoutms

Integer

Time to wait for a successful connection, in milliseconds. Authentication can take additional time.





Return parameters



Parameter

Variable Type

Description



$SshConnection

Object

Handle to the SSH connection for use in other functions.





Example:

// Connect to a server on this computer with a 5 second timeout.

$host = "localhost";

$port = 22;

$userName = "root";

$password = "password123";

$timeout = 5000;





$SshConnection = SshConnect($host, $port, $userName, $password, $timeout);





SshConnectBool

Previous Top Next



* * *



SshConnectBool



Usage:

($success, $SshConnection) = SshConnectBool($host, $port, $userName, $password, $timeoutms);





Description:

Opens a new connection to the SSH server and authenticates the user using password authentication method. Returns whether the connection was successful and a handle to the connection.





Note:

· A failed connection will not cause the test to fail. The boolean should be checked for a successful connection before attempting any other functions.

· An invalid log in name and password will still cause the test to fail.

Function arguments



Parameter

Variable Type

Description



$host

String

Hostname or IP address of the server to connect to.



$port

Integer

Port number the server is listening on (typically 22).



$userName

String

Name of the user to log in as.



$password

String

The user's password.



$timeoutms

Integer

Time to wait for a successful connection, in milliseconds. Authentication can take additional time.





Return parameters



Parameter

Variable Type

Description



$success

Boolean

Whether the connection was successful.



$SshConnection

Object

Handle to the SSH connection for use in other functions.





Example:

// Connect to a server on this computer with a 5 second timeout.

$host = "localhost";

$port = 22;

$userName = "root";

$password = "password123";

$timeout = 5000;





($success, $SshConnection) = SshConnectBool($host, $port, $userName, $password, $timeout);





SshExecuteCommand

Previous Top Next



* * *



SshExecuteCommand



Usage:

$receive = SshExecuteCommand($SshConnection, $command);





Description:

Executes a command on the given SSH connection. The response is returned. This command is executed in its own temporary session, and does not affect the state of other sessions already opened. Multiple commands can be issued by separating them with a semi-colon.





This command is useful for when you want to execute independent commands on the server. To execute multiple, dependent commands in a persistent state (a terminal shell), open a new session on the connection with the SshOpenSession() command.



Function Arguments





Parameter



Variable Type

Description



$SshConnection

Object

Handle to SSH connection returned by the SshConnect() function.



$command

String

Command to execute on the server.





Return Parameters





Parameter



Variable Type

Description



$receive

String

Contents of receive buffer after command executes.





Example:

$receive = SshExecuteCommand($SshConnection, "pwd;cd ../netapp;pwd;ls -l\n"); //change directory and get a listing of files





SshOpenSession

Previous Top Next



* * *



SshOpenSession



Usage:

$SshSession = SshOpenSession($SshConnection);





Description:

Opens a persistent SHH session on the given SSH connection and returns a handle to the SSH session stream.





The session acts like a terminal shell, preserving its state over multiple command executions.



Function Arguments





Parameter



Variable Type

Description



$SshConnection

Object

Handle to SSH connection returned by the SshConnect() function.





Return Parameters





Parameter



Variable Type

Description



$SshSession

Object

Handle to the new SSH session stream.





Example:

$SshSession = SshOpenSession($SshConnection);





SshOpenSessionBool

Previous Top Next



* * *



SshOpenSessionBool



Usage:

($success, $SshSession) = SshOpenSessionBool($SshConnection);





Description:

Opens a persistent SHH session on the given SSH connection and returns whether the session opening worked and a handle to the SSH session stream.





The session acts like a terminal shell, preserving its state over multiple command executions.





Note:

· A failed connection will not cause the test to fail. The boolean should be checked for a successful connection before attempting any other functions.



Function Arguments





Parameter



Variable Type

Description



$SshConnection

Object

Handle to SSH connection returned by the SshConnect() function.





Return Parameters





Parameter



Variable Type

Description



$success

Boolean

Whether opening the session was successful.



$SshSession

Object

Handle to the new SSH session stream.





Example:

($success, $SshSession) = SshOpenSessionBool($SshConnection);





SshSessionClose

Previous Top Next



* * *



SshSessionClose



Usage:

SshSessionClose($SshSession);





Description:

Closes the SSH session stream. This call is optional; when the connection to the SSH server is closed with the SshClose() function, all open session are automatically closed.



Function Arguments





Parameter



Variable Type

Description



$SshSession

Object

Handle to SSH session stream returned by the SshOpenSession() function.





Return Parameters





Parameter



Variable Type

Description



None

--





Example:

SshSessionClose($SshSession);





SshSessionSend

Previous Top Next



* * *



SshSessionSend



Usage:

$receive = SshSessionSend($SshSession, $sendString, $expectString, $timeoutms);





Description:

Writes to the SSH stream and waits for the given response. Returns the receive buffer if the response is found before the timeout expires, returns a failure to Jabil Test otherwise.





To execute commands on the server, add the system's newline character at the end of the send string. E.g., on Unix-based systems, add a line feed character ("\n"); on Windows-based systems, a CR+LF is generally needed ("\r\n").



Function Arguments





Parameter



Variable Type

Description



$SshSession

Object

Handle to SSH session stream returned by the SshOpenSession() function.



$sendString

String

Data to write to SSH session.



$expectString

String

Receive response to wait for.



$timeoutms

Integer

Time to wait for the expected response, in milliseconds.





Return Parameters





Parameter



Variable Type

Description



$receive

String

Contents of receive buffer up to $expectString, if response was found.





Example:

$receive = SshSessionSend($SshSession, "pwd\n", "#", 2000); //check working directory and wait up to 2s for the bash command prompt





SshSessionSendBool

Previous Top Next



* * *



SshSessionSendBool



Usage:

($found, $receive) = SshSessionSendBool($SshSession, $sendString, $expectString, $timeoutms);





Description:

Writes to the SSH stream and waits for the given response. Returns the receive buffer and true if the response is found before the timeout expires, false otherwise.





To execute commands on the server, add the system's newline character at the end of the send string. E.g., on Unix-based systems, add a line feed character ("\n"); on Windows-based systems, a CR+LF is generally needed ("\r\n").





Note: If the response is found, the receive buffer will contain all data up to the expected response. If the response is not found before the timeout expires, the receive buffer will still contain all data received up until the timeout.



Function Arguments





Parameter



Variable Type

Description



$SshSession

Object

Handle to SSH session stream returned by the SshOpenSession() function.



$sendString

String

Data to write to SSH session.



$expectString

String

Receive response to wait for.



$timeoutms

Integer

Time to wait for the expected response, in milliseconds.





Return Parameters





Parameter



Variable Type

Description



$found

Boolean

True if the expected response was received before the timeout, false otherwise.



$receive

String

Contents of receive buffer up to $expectString (if response was found) or up to when the timeout occurs (if response not found).





Example:

($found, $receive) = SshSessionSendBool($SshSession, "pwd\n", "#", 2000); //check working directory and wait up to 2s for the bash command prompt





SshSessionShowTerminal

Previous Top Next



* * *



SshSessionShowTerminal



Usage:

SshSessionShowTerminal($SshSession);





Description:

Opens an interactive terminal window to the SSH session. The session is preserved in whatever state it was left at when the window closes.



Function Arguments





Parameter



Variable Type

Description



$SshSession

Object

Handle to SSH session stream returned by the SshOpenSession() function.





Return Parameters





Parameter



Variable Type

Description



None

--





Example:

SshSessionShowTerminal($SshSession);





Serial_ChangeEncoding

Previous Top Next



* * *



Serial_ChangeEncoding



Usage:

Serial_ChangeEncoding($comPort, $encoding);





Description:

This function will set the encoding to use when sending and receiving on a serial port.

Function Arguments



Parameter

Variable Type

Description



$comPort

Object

The instance of the serial port to change the encoding of. The $comPort object is created by a call to Serial_Open or to Serial_OpenBool.



$encoding

String

The name of the encoding to change the port to.





Return parameters



Parameter

Variable Type

Description



None.





Example:





$encoding = "utf-8";

Serial_ChangeEncoding($comPort, $encoding);





Serial_Close

Previous Top Next



* * *



Serial_Close



Usage:

Serial_Close($comPort);





Description:

Closes an open Serial Port. If the port was already closed, no error is returned.

Function Arguments



Parameter

Variable Type

Description



$comPort

Object

The instance of the serial port to close. The $comPort object is created by a call to Serial_Open.





Return parameters



Parameter

Variable Type

Description



None.





Example:





Serial_Close($comPort);





Serial_CloseWithLogging

Previous Top Next



* * *



Serial_CloseWithLogging

Usage:

Serial_CloseWithLogging($comPort);

Description:

Closes an open Serial Port, and also closes and flushes the associated text log file. If the port was already closed when the function is run, no error is returned.

Important Note: This function should only be used to close a serial port which has been opened with the Serial_OpenWithLogging function. If you are using a serial port that has been opened with the Serial_Open function, use the standard Serial_Close function instead.

Function Arguments



Parameter

Variable Type

Description



$comPort

Object

The instance of the serial port to close. The $comPort object is created by a call to Serial_OpenWithLogging.





Return parameters



Parameter

Variable Type

Description



None.





Example:





Serial_CloseWithLogging($comPort);





Serial_DiscardInBuffer

Previous Top Next



* * *



Serial_DiscardInBuffer



Usage:

Serial_DiscardInBuffer($comPort);



Description:

Discards (clears) all of the data in the serial port's incoming buffer. The data is not read, nor is it retrievable.





Note:

The serial port object must have been opened with Serial_Open, Serial_OpenWithHandshaking, or Serial_OpenWithLogging.

Function Arguments



Parameter

Variable Type

Description



$comPort

Object

An instance of a Serial Port object created with one of the open functions.





Return parameters



Parameter

Variable Type

Description



None.





Example:





Serial_DiscardInBuffer($comPort);





Serial_DiscardOutBuffer

Previous Top Next



* * *



Serial_DiscardOutBuffer



Usage:

Serial_DiscardOutBuffer($comPort);



Description:

Discards (clears) all of the data in the serial port's outgoing buffer. The data is not read, nor is it retrievable.





Note:

The serial port object must have been opened with Serial_Open, Serial_OpenWithHandshaking, or Serial_OpenWithLogging.

Function Arguments



Parameter

Variable Type

Description



$comPort

Object

An instance of a Serial Port object created with one of the open functions.





Return parameters



Parameter

Variable Type

Description



None.





Example:





Serial_DiscardOutBuffer($comPort);





Serial_GetNumberBytesToRead

Previous Top Next



* * *



Serial_GetNumberBytesToRead



Usage:

$numBytes = Serial_GetNumberBytesToRead($comPort);



Description:

Returns the number of unread bytes in the incoming buffer for the serial port.

Function Arguments



Parameter

Variable Type

Description



$comPort

Object

An instance of a Serial Port object created with one of the open functions.





Return parameters



Parameter

Variable Type

Description



$numBytes

Integer

The number of unread bytes in the incoming buffer.





Example:





$numBytes = Serial_GetNumberBytesToRead($comPort);





Serial_GetParameters

Previous Top Next



* * *



Serial_GetParameters



Usage:

($baud, $dataBits, $parity, $stopBits) = Serial_GetParameters($comPort);



Description:

Returns the serial communication parameters for the specified serial port.

Function Arguments



Parameter

Variable Type

Description



$comPort

Object

An instance of a Serial Port object created with one of the open functions.





Return parameters



Parameter

Variable Type

Description



$baud

Integer

The baud rate that the port is set to.



$dataBits

Integer

The number of data bits in one character for this port.



$parity

String

The parity that the port is set to.



$stopBits

String

The number of stop bits in one character for this port.





Example:





($baud, $dataBits, $parity, $stopBits) = Serial_GetParameters($comPort);





Serial_GetPortNames

Previous Top Next



* * *



Serial_GetPortNames



Usage:

$portNames = Serial_GetPortNames();



Description:

Returns the names of all of the available serial ports on the computer.

Function Arguments



Parameter

Variable Type

Description



None.





Return parameters



Parameter

Variable Type

Description



$portNames

String Array

The names of the available ports.





Example:





$portNames = Serial_GetPortNames();





// Print out all of the port names.

$total = ArrayGetLength($portNames);

$loopCount = 0;

while ($loopCount < $total)

{

$tempStr = Array1DGetValue($portNames, $loopCount);

UpdateStatus($tempStr);

$loopCount = $loopCount + 1;

}





Serial_GetPortNamesDescriptions

Previous Top Next



* * *



Serial_GetPortNamesDescriptions



Usage:

($portNames, $portDescripts) = Serial_GetPortNamesDescriptions();





Description:

This function returns the names and the descriptions of all of the serial (COM) ports on the computer.





Note:

No serial ports need to be opened to use this function.

This will also return the names of virtual COM ports that were created for USB to serial adapters.

Function Arguments



Parameter

Variable Type

Description



None





Return parameters



Parameter

Variable Type

Description



$portNames

String Array

The names of all of the serial ports on the computer.



$portDescripts

String Array

The descriptions of all of the serial ports on the computer.





Example:





($ports, $descripts) = Serial_GetPortNamesDescriptions();





$numPorts = ArrayGetLength($ports);





// Ouput the names and descriptions of the ports.

$loopCount = 0;

while ($loopCount < $numPorts)

{

$onePort = Array1DGetValue($ports, $loopCount);

$oneDesc = Array1DGetValue($descripts, $loopCount);



$outStr = "Port: " + $onePort + "\tDescription: " + $oneDesc;

UpdateStatus($outStr);

$loopCount = $loopCount + 1;

}





Serial_GetPortNumber

Previous Top Next



* * *



Serial_GetPortNumber



Usage:

$portNum = Serial_GetPortNumber($comPort);



Description:

Returns the serial port number for a serial port object that was opened with Serial_Open, Serial_OpenWithHandshaking, or Serial_OpenWithLogging.

Function Arguments



Parameter

Variable Type

Description



$comPort

Object

An instance of a Serial Port object created with one of the open functions.





Return parameters



Parameter

Variable Type

Description



$portNum

Integer

The number of the serial port.





Example:





$portNum = Serial_GetPortNumber($comPort);





Serial_HandshakingManualRead

Previous Top Next



* * *



Serial_HandshakingManualRead



Usage:

$pinStatus = Serial_HandshakingManualRead($comPort, $pinName);



Description:

Returns the state of the specified handshaking pin for a serial port object that was opened with Serial_Open, Serial_OpenWithHandshaking, or Serial_OpenWithLogging.



Notes:

The state of the "ring" signal (sometimes called RI) can not be read by this function. This signal is transitory and the pin would have to be watched constantly in order to catch the signal.

Function Arguments



Parameter

Variable Type

Description



$comPort

Object

An instance of a Serial Port object created with one of the open functions.



$pinName

String

The name of the handshaking pin to read. Valid inputs are:

· CTS

· DSR

· DCD





Return parameters



Parameter

Variable Type

Description



$pinStatus

Boolean

The status of the specified pin.





Example:





$pinName = "CTS";

$pinStatus = Serial_HandshakingManualRead($comPort, $pinName);





Serial_HandshakingManualSet

Previous Top Next



* * *



Serial_HandshakingManualSet



Usage:

Serial_HandshakingManualSet($comPort, $pinName, $pinState);



Description:

Sets the state of the specified handshaking pin on a serial port object that was opened with Serial_Open, Serial_OpenWithHandshaking, or Serial_OpenWithLogging.

Function Arguments



Parameter

Variable Type

Description



$comPort

Object

An instance of a Serial Port object created with one of the open functions.



$pinName

String

The name of the handshaking pin to set. Valid inputs are:

· RTS

· DTR



$pinState

Boolean

The state to set the specified pin to.





Return parameters



Parameter

Variable Type

Description



None.





Example:





$pinName = "RTS";

$pinState = true;

Serial_HandshakingManualSet($comPort, $pinName, $pinState);





Serial_IsOpen

Previous Top Next



* * *



Serial_IsOpen



Usage:

$openState = Serial_IsOpen($comPort);



Description:

Returns whether the serial port is open or not.

Function Arguments



Parameter

Variable Type

Description



$comPort

Object

An instance of a Serial Port object created with one of the open functions.





Return parameters



Parameter

Variable Type

Description



$openState

Boolean

True if the port is already open, False otherwise.





Example:





$openState = Serial_IsOpen($comPort);





Serial_Open

Previous Top Next



* * *



Serial_Open

Usage:

$portHandle = Serial_Open($portNumber, $baudRate, $dataBits, $parity, $stopBits);

Description:

Opens a Serial port object for communication. The resulting object is then used with the other serial functions to support communication. In order to close the serial port after it has been opened, use the Serial_Close function. If the specified comPort is in use, this function returns a failure.

Function arguments



Parameter

Variable Type

Description



$portNumber

Integer

The COM port number to connect to.



$baudRate

Integer

The baud rate to open communications at. This must be a baud rate that is supported by the serial port.



$dataBits

Integer

The number of bits in each character of data (must be 7 or 8).



$parity

Character

The parity for the serial port. Valid inputs are:

· "N" for no parity

· "M" for mark parity

· "E" for even parity

· "O" for odd parity

· "S" for space parity



$stopBits

Integer

The number of stop bits (must be 0, 1, or 2).





Return parameters



Parameter

Variable Type

Description



$portHandle

Object

The instance of the serial port that is returned.





Examples:





// Open COM3 at 9600 baud with 8 bits, no parity, 1 stop bit.

$portNum = 3;

$baud = 9600;

$bits = 8;

$parity = "N";

$stopBits = 1;

$portHandle = Serial_Open($portNum, $baud, $bits, $parity, $stopBits);





Serial_OpenBool

Previous Top Next



* * *



Serial_OpenBool

Usage:

($portHandle, $success) = Serial_OpenBool($portNumber, $baudRate, $dataBits, $parity, $stopBits);

Description:

Opens a Serial port object for communication. The resulting object is then used with the other serial functions to support communication. In order to close the serial port after it has been opened, use the Serial_Close function.



Notes:

If the specified comPort can not be opened, this function will return a false in the $success variable.

Function arguments



Parameter

Variable Type

Description



$portNumber

Integer

The COM port number to connect to.



$baudRate

Integer

The baud rate to open communications at. This must be a baud rate that is supported by the serial port.



$dataBits

Integer

The number of bits in each character of data (must be 7 or 8).



$parity

Character

The parity for the serial port. Valid inputs are:

· "N" for no parity

· "M" for mark parity

· "E" for even parity

· "O" for odd parity

· "S" for space parity



$stopBits

Integer

The number of stop bits (must be 0, 1, or 2).





Return parameters



Parameter

Variable Type

Description



$portHandle

Object

The instance of the serial port that is returned.



$success

Boolean

Returns True if the com port is successfully opened, False otherwise.





Examples:





// Open COM3 at 9600 baud with 8 bits, no parity, 1 stop bit.

$portNum = 3;

$baud = 9600;

$bits = 8;

$parity = "N";

$stopBits = 1;





($portHandle, $success) = Serial_OpenBool($portNum, $baud, $bits, $parity, $stopBits);





Serial_OpenWithHandshaking

Previous Top Next



* * *



Serial_OpenWithHandshaking

Usage:

$portHandle = Serial_OpenWithHandshaking($portNumber, $baudRate, $dataBits, $parity, $stopBits, $handshakeMode);

Description:

Opens a Serial port object for communication. The resulting object is then used with the other serial functions to support communication. In order to close the serial port after it has been opened, use the Serial_Close function. If the specified comPort is in use, this function returns a failure.

Function arguments



Parameter

Variable Type

Description



$portNumber

Integer

The COM port number to connect to.



$baudRate

Integer

The baud rate to open communications at. This must be a baud rate that is supported by the serial port.



$dataBits

Integer

The number of bits in each character of data (must be 7 or 8).



$parity

Character

The parity for the serial port. Valid inputs are:

· "N" for no parity

· "M" for mark parity

· "E" for even parity

· "O" for odd parity

· "S" for space parity



$stopBits

Integer

The number of stop bits (must be 0, 1, or 2).



$handshakeMode

String

The handshaking mode to use with the serial port. Valid inputs are:

· "NONE"

· "RTS"

· "XON/XOFF"

· RTSXON/XOFF





Return parameters



Parameter

Variable Type

Description



$portHandle

Object

The instance of the serial port that is returned.





Examples:





// Open COM3 at 9600 baud with 8 bits, no parity, 1 stop bit.

$portNum = 3;

$baud = 9600;

$bits = 8;

$parity = "N";

$stopBits = 1;

$handshake = "Xon/Xoff"; // NOTE: not case sensitive.

$portHandle = Serial_OpenWithHandshaking($portNum, $baud, $bits, $parity, $stopBits, $handshake);





Serial_OpenWithHandshakingBool

Previous Top Next



* * *



Serial_OpenWithHandshakingBool

Usage:

($portHandle, $success) = Serial_OpenWithHandshakingBool($portNumber, $baudRate, $dataBits, $parity, $stopBits, $handshakeMode);

Description:

Opens a Serial port object for communication. The resulting object is then used with the other serial functions to support communication. In order to close the serial port after it has been opened, use the Serial_Close function.



Notes:

If the specified comPort can not be opened, this function will return a false in the $success variable.

Function arguments



Parameter

Variable Type

Description



$portNumber

Integer

The COM port number to connect to.



$baudRate

Integer

The baud rate to open communications at. This must be a baud rate that is supported by the serial port.



$dataBits

Integer

The number of bits in each character of data (must be 7 or 8).



$parity

Character

The parity for the serial port. Valid inputs are:

· "N" for no parity

· "M" for mark parity

· "E" for even parity

· "O" for odd parity

· "S" for space parity



$stopBits

Integer

The number of stop bits (must be 0, 1, or 2).



$handshakeMode

String

The handshaking mode to use with the serial port. Valid inputs are:

· "NONE"

· "RTS"

· "XON/XOFF"

· RTSXON/XOFF





Return parameters



Parameter

Variable Type

Description



$portHandle

Object

The instance of the serial port that is returned.



$success

Boolean

Returns True if the com port is successfully opened, False otherwise.





Examples:





// Open COM3 at 9600 baud with 8 bits, no parity, 1 stop bit.

$portNum = 3;

$baud = 9600;

$bits = 8;

$parity = "N";

$stopBits = 1;

$handshake = "Xon/Xoff"; // NOTE: not case sensitive.





($portHandle, $success) = Serial_OpenWithHandshakingBool($portNum, $baud, $bits, $parity, $stopBits, $handshake);





Serial_OpenWithLogging

Previous Top Next



* * *



Serial_OpenWithLogging



Usage:

$portHandle = Serial_OpenWithLogging($portNumber, $baudRate, $dataBits, $parity, $stopBits, $logFilePath);



Description:

Creates and Opens a Serial port object for communication, and creates a log file that will record all the information sent to/from the serial port.





Remarks:

In order to record data sent to and from the serial port, use the Serial_SendWithLogging function.

If you do not wish a particular serial action to be recorded to the log, use the standard Serial_Send function.

The resulting object is then used with the other serial functions to support communication. In order to close the serial port after it has been created, use the Serial_CloseWithLogging function.

If the specified comPort is in use, this function returns a failure.

If you use the standard Serial_Close function with a COM port which was opened using the Serial_OpenWithLogging function, the data log file will never be properly closed.



Function arguments



Parameter

Variable Type

Description



$portNumber

Integer

The COM port number to connect to.



$baudRate

Integer

The baud rate to open communications at. This must be a baud rate that is supported by the serial port.



$dataBits

Integer

The number of bits in each character of data (must be 7 or 8).



$parity

Character

The parity for the serial port. Valid inputs are: "N" for no parity

"M" for mark parity

"E" for even parity

"O" for odd parity

"S" for space parity





$stopBits

Integer

The number of stop bits (must be 0, 1, or 2).



$logFilePath

String

The path and filename for the log file.





Return parameters



Parameter

Variable Type

Description



$portHandle

Object

The instance of the port handle that is returned.





Example:





// Open COM3 at 9600 baud with 8 bits, no parity, 1 stop bit.

$portNum = 3;

$baud = 9600;

$bits = 8;

$parity = "N";

$stopBits = 1;

$logFile = "C:\\Temp\\Serial_Log.txt";



$portHandle = Serial_OpenWithLogging($portNum, $baud, $bits, $parity, $stopBits, $logFile);





Serial_OpenWithLoggingBool

Previous Top Next



* * *



Serial_OpenWithLoggingBool



Usage:

($portHandle, $success) = Serial_OpenWithLoggingBool($portNumber, $baudRate, $dataBits, $parity, $stopBits, $logFilePath);



Description:

Creates and Opens a Serial port object for communication, and creates a log file that will record all the information sent to/from the serial port.





Remarks:

In order to record data sent to and from the serial port, use the Serial_SendWithLogging function.

If you do not wish a particular serial action to be recorded to the log, use the standard Serial_Send function.

The resulting object is then used with the other serial functions to support communication. In order to close the serial port after it has been created, use the Serial_CloseWithLogging function.

If you use the standard Serial_Close function with a COM port which was opened using the Serial_OpenWithLoggingBool function, the data log file will never be properly closed.



Function arguments



Parameter

Variable Type

Description



$portNumber

Integer

The COM port number to connect to.



$baudRate

Integer

The baud rate to open communications at. This must be a baud rate that is supported by the serial port.



$dataBits

Integer

The number of bits in each character of data (must be 7 or 8).



$parity

Character

The parity for the serial port. Valid inputs are: "N" for no parity

"M" for mark parity

"E" for even parity

"O" for odd parity

"S" for space parity





$stopBits

Integer

The number of stop bits (must be 0, 1, or 2).



$logFilePath

String

The path and filename for the log file.





Return parameters



Parameter

Variable Type

Description



$portHandle

Object

The instance of the port handle that is returned.



$success

Boolean

Returns True if the comp port is successfully opened, False otherwise.





Example:





// Open COM3 at 9600 baud with 8 bits, no parity, 1 stop bit.

$portNum = 3;

$baud = 9600;

$bits = 8;

$parity = "N";

$stopBits = 1;

$logFile = "C:\\Temp\\Serial_Log.txt";



($portHandle, $success) = Serial_OpenWithLoggingBool($portNum, $baud, $bits, $parity, $stopBits, $logFile);





Serial_ReadByte

Previous Top Next



* * *



Serial_ReadByte



Usage:

$oneByte = Serial_ReadByte($comPort, $timeout);





Description:

Returns one byte from the input buffer of the specified serial port object that was opened with Serial_Open, Serial_OpenWithHandshaking, or Serial_OpenWithLogging.





Remarks:

If no data is received before the timeout has expired, this function will return a FAIL. To avoid the fail result, use the function Serial_GetNumberBytesToRead to ensure there is data in the buffer.

Function Arguments



Parameter

Variable Type

Description



$comPort

Object

An instance of a Serial Port object created with one of the open functions.



$timeout

Integer

The maximum number of seconds to wait for a byte to appear in the incoming buffer.





Return parameters



Parameter

Variable Type

Description



$oneByte

Integer

One byte from the incoming data buffer.





Example:





$timeout = 2; // wait for two seconds.

$oneByte = Serial_ReadByte($comPort, $timeout);





Serial_ReadExisting

Previous Top Next



* * *



Serial_ReadExisting



Usage:

$input = Serial_ReadExisting($comPort, $timeout);





Description:

Returns all of the data from the input buffer of the specified serial port object that was opened with Serial_Open, Serial_OpenWithHandshaking, or Serial_OpenWithLogging.





Remarks:

If no data is received before the timeout has expired, this function will return a FAIL. To avoid the fail result, use the function Serial_GetNumberBytesToRead to ensure there is data in the buffer.

Function Arguments



Parameter

Variable Type

Description



$comPort

Object

An instance of a Serial Port object created with one of the open functions.



$timeout

Integer

The maximum number of seconds to wait for data coming in to the incoming buffer.





Return parameters



Parameter

Variable Type

Description



$input

String

All of the data currently in the incoming buffer.





Example:





$timeout = 2; // wait for two seconds.

$input = Serial_ReadExisting($comPort, $timeout);





Serial_ReadExistingWithLogging

Previous Top Next



* * *



Serial_ReadExistingWithLogging



Usage:

$input = Serial_ReadExisting($comPort, $timeout);





Description:

Returns all of the data from the input buffer of the specified serial port object that was opened with Serial_OpenWithLogging. Also saves all of the data to the file that was opened when the serial port was opened.





Remarks:

If no data is received before the timeout has expired, this function will return a FAIL. To avoid the fail result, use the function Serial_GetNumberBytesToRead to ensure there is data in the buffer.

Function Arguments



Parameter

Variable Type

Description



$comPort

Object

An instance of a Serial Port object created with one of the open functions.



$timeout

Integer

The maximum number of seconds to wait for data coming in to the incoming buffer.





Return parameters



Parameter

Variable Type

Description



$input

String

All of the data currently in the incoming buffer.





Example:





$timeout = 2; // wait for two seconds.

$input = Serial_ReadExistingWithLogging($comPort, $timeout);





Serial_ReadLine

Previous Top Next



* * *



Serial_ReadLine



Usage:

$line = Serial_ReadLine($comPort, $timeout);





Description:

Returns one line from the data in the input buffer of the specified serial port up to a New Line character.





Remarks:

The serial port object must have been opened with Serial_Open, Serial_OpenWithHandshaking, or Serial_OpenWithLogging.

The New Line character(s) is set using the Serial_SetNewLine function.

If no data is received before the timeout has expired, this function will return a FAIL. To avoid the fail result, use the function Serial_GetNumberBytesToRead to ensure there is data in the buffer.

Function Arguments



Parameter

Variable Type

Description



$comPort

Object

An instance of a Serial Port object created with one of the open functions.



$timeout

Integer

The maximum number of seconds to wait for a line of data to come into the incoming buffer.





Return parameters



Parameter

Variable Type

Description



$line

String

One line of data from the incoming buffer.





Example:





$newLineChar = "\r\n"; // Set end of line to the carriage return, line feed characters.

Serial_SetNewLine($comPort, $newLineChar);





$timeout = 2; // wait for two seconds.

$line = Serial_ReadLine($comPort, $timeout);





Serial_ReceiveBinaryToArray

Previous Top Next



* * *



Serial_ReceiveBinaryToArray



Usage:

$byteArray = Serial_ReceiveBinaryToArray($comPort, $timeout);





Description:

Receives data from a serial port for a specified amount of time. The data is returned in an integer array.





Note:

The serial port object must have been opened with Serial_Open, Serial_OpenWithHandshaking, or Serial_OpenWithLogging.

Function Arguments



Parameter

Variable Type

Description



$comPort

Object

An instance of a Serial Port object created with one of the open functions.



$timeout

Integer

The maximum number of seconds to wait for a line of data to come into the incoming buffer.





Return parameters



Parameter

Variable Type

Description



$byteArray

Integer Array

The data received by the serial port.





Example:





$timeout = 2; // wait for two seconds.

$byteArray = Serial_ReceiveBinaryToArray($comPort, $timeout);





Serial_ReceiveBinaryToArrayWithCount

Previous Top Next



* * *



Serial_ReceiveBinaryToArrayWithCount



Usage:

($byteArray, $numBytes) = Serial_ReceiveBinaryToArrayWithCount($comPort, $timeout);





Description:

Receives data from a serial port for a specified amount of time. The data is returned in an integer array. The number of bytes received is also returned.





Note:

The serial port object must have been opened with Serial_Open, Serial_OpenWithHandshaking, or Serial_OpenWithLogging.

Function Arguments



Parameter

Variable Type

Description



$comPort

Object

An instance of a Serial Port object created with one of the open functions.



$timeout

Integer

The maximum number of seconds to wait for a line of data to come into the incoming buffer.





Return parameters



Parameter

Variable Type

Description



$byteArray

Integer Array

The data received by the serial port.



$numBytes

Integer

The number of bytes received by the serial port.





Example:





$timeout = 2; // wait for two seconds.

($byteArray, $numBytes) = Serial_ReceiveBinaryToArrayWithCount($comPort, $timeout);





Serial_Send

Previous Top Next



* * *



Serial_Send



Usage:

$returned = Serial_Send($comPort, $sendString, $waitString, $timeout);



Description:

This function sends a string to the output buffer of a serial port and waits for a specified string to be returned.



Remarks:

The serial port object must have been opened with Serial_Open, Serial_OpenWithHandshaking, or Serial_OpenWithLogging.

If the wait string is not received within the time out time, the test will return a Fail.

If the send string is empty, the function will send nothing and wait for the wait string to be received.

If the wait string is empty, the send string will be sent and the function will return after the timeout has expired.

If the wait string is empty and the timeout value is set to 0, the send string will be sent and anything already in the receive buffer will be immediately returned.



Function arguments



Parameter

Variable Type

Description



$comPort

Object

An instance of a Serial Port object created with one of the open functions.



$sendString

String

The string to be sent to the com port.



$waitString

String

The string to wait for in response before continuing.



$timeout

Integer

The maximum number of seconds to wait for data to come into the incoming buffer.





Return parameters



Parameter

Variable Type

Description



$returned

String

The data received by the serial port. This will include all of the data received including the wait string, if it was received.





Example:





$sendString = "Send To Port";

$waitString = "Return";

$timeout = 2; // Wait for two seconds.



$returned = Serial_Send($comPort, $sendString, $waitString, $timeout);





Serial_SendBinary

Previous Top Next



* * *



Serial_SendBinary



Usage:

$returned = Serial_SendBinary($comPort, $sendString, $waitString, $timeout);





Description:

Sends a string to the output buffer of a serial port and waits for a specified string to be returned.





The Serial_SendBinary function differs from the Serial_Send function in the fact that the $sendString, $waitStirng and $returned are text strings representing the hexadecimal values to be sent and received via the comPort. The format of the strings is a collection of 2 digit hexadecimal values separated by spaces.





Note:

The serial port object must have been opened with Serial_Open, Serial_OpenWithHandshaking, or Serial_OpenWithLogging.

If the wait string is not received within the time out time, the test will return a Fail.

If the send string is empty, the function will send nothing and wait for the wait string to be received.

If the wait string is empty, the send string will be sent and the function will return after the timeout has expired.

If the wait string is empty and the timeout value is set to 0, the send string will be sent and anything already in the receive buffer will be immediately returned.

Function Arguments



Parameter

Variable Type

Description



$comPort

Object

An instance of a Serial Port object created with one of the open functions.



$sendString

String

The string to be sent to the com port.



$waitString

String

The string to wait for in response before continuing.



$timeout

Integer

The maximum number of seconds to wait for data to come into the incoming buffer.





Return parameters



Parameter

Variable Type

Description



$returned

String

The data received by the serial port. This will include all of the data received including the wait string, if it was received.





Example:





// Send the string "DOG" and wait 2 seconds for the string "CAT".

$sendString = "44 4F 47";

$waitString = "43 41 54";

$timeout = 2; // wait for two seconds.

$returned = Serial_SendBinary($comPort, $sendString, $waitString, $timeout);





Serial_SendBinaryBool

Previous Top Next



* * *



Serial_SendBinaryBool



Usage:

($returned, $found) = Serial_SendBinaryBool($comPort, $sendString, $waitString, $timeout);





Description:

Sends a string to the output buffer of a serial port and waits for a specified string to be returned.





The Serial_SendBinary function differs from the Serial_Send function in the fact that the $sendString, $waitStirng and $returned are text strings representing the hexadecimal values to be sent and received via the comPort. The format of the strings is a collection of 2 digit hexadecimal values separated by spaces.





Note:

The serial port object must have been opened with Serial_Open, Serial_OpenWithHandshaking, or Serial_OpenWithLogging.

If the wait string is not received within the time out time, the test will not return a Fail. The boolean value for whether the string was found will be false.

If the send string is empty, the function will send nothing and wait for the wait string to be received or the timeout to expire.

If the wait string is empty, the send string will be sent and the function will return after the timeout has expired. Anything in the receive buffer will be returned.

If the wait string is empty and the timeout value is set to 0, the send string will be sent and anything already in the receive buffer will be immediately returned.

Function Arguments



Parameter

Variable Type

Description



$comPort

Object

An instance of a Serial Port object created with one of the open functions.



$sendString

String

The string to be sent to the com port.



$waitString

String

The string to wait for in response before continuing.



$timeout

Integer

The maximum number of seconds to wait for data to come into the incoming buffer.





Return parameters



Parameter

Variable Type

Description



$returned

String

The data received by the serial port. This will include all of the data received including the wait string, if it was received.



$found

Boolean

True if the wait string was found, False otherwise.





Example:





// Send the string "DOG" and wait 2 seconds for the string "CAT".

$sendString = "44 4F 47";

$waitString = "43 41 54";

$timeout = 2; // wait for two seconds.

($returned, $found) = Serial_SendBinaryBool($comPort, $sendString, $waitString, $timeout);





Serial_SendBinaryFromArray

Previous Top Next



* * *



Serial_SendBinaryFromArray



Usage:

Serial_SendBinaryFromArray($comPort, $sendArray, $index, $numBytes);





Description:

Sends a string to the output buffer of a serial port from the starting index of an array for the specified number of bytes.





Note:

The serial port object must have been opened with Serial_Open, Serial_OpenWithHandshaking, or Serial_OpenWithLogging.

The array must be of integers and only the lower 8 bits will be sent.

Array indices are zero-based. The first byte in the array has an index of zero.

Function Arguments



Parameter

Variable Type

Description



$comPort

Object

An instance of a Serial Port object created with one of the open functions.



$sendArray

Integer Array

The data to be sent to the com port.



$index

Integer

The byte of the array to start sending from.



$numBytes

Integer

The number of bytes to send from the buffer (from the starting index).





Return parameters



Parameter

Variable Type

Description



None.





Example:





// Send 8 bytes of data starting at index 3 from the array.

Serial_SendBinaryFromArray($comPort, $sendArray, 3, 8);





Serial_SendBinaryInUnicode

Previous Top Next



* * *



Serial_SendBinaryInUnicode



Usage:

$returned = Serial_SendBinaryInUnicode($comPort, $sendString, $waitString, $timeout);



Description:

This function sends a string to the output buffer of a serial port and waits for a specified string to be returned.

The Serial_SendBinaryInUnicode function differs from the Serial_SendBinary function in the fact that the values are interpreted as multi-byte Unicode characters where appropriate.



Remarks:

The serial port object must have been opened with Serial_Open, Serial_OpenWithHandshaking, or Serial_OpenWithLogging.

If the wait string is not received within the time out time, the test will return a Fail.

If the send string is empty, the function will send nothing and wait for the wait string to be received.

If the wait string is empty, the send string will be sent and the function will return after the timeout has expired.

If the wait string is empty and the timeout value is set to 0, the send string will be sent and anything already in the receive buffer will be immediately returned.



Function arguments



Parameter

Variable Type

Description



$comPort

Object

An instance of a Serial Port object created with one of the open functions.



$sendString

String

The string to be sent to the com port.



$waitString

String

The string to wait for in response before continuing.



$timeout

Integer

The maximum number of seconds to wait for data to come into the incoming buffer.





Return parameters



Parameter

Variable Type

Description



$returned

String

The data received by the serial port. This will include all of the data received including the wait string, if it was received.





Example:





// Send the string "DOG" and wait 2 seconds for the string "CAT".

$sendString = "44 4F 47";

$waitString = "43 41 54";

$timeout = 2; // Wait for two seconds.



$returned = Serial_SendBinaryInUnicode($comPort, $sendString, $waitString, $timeout);





Serial_SendBinaryMilliseconds

Previous Top Next



* * *



Serial_SendBinaryMilliseconds



Usage:

$returned = Serial_SendBinaryMilliseconds($comPort, $sendString, $waitString, $timeout);





Description:

Sends a string to the output buffer of a serial port and waits for a specified string to be returned.





The Serial_SendBinaryMilliseconds function differs from the Serial_Send function in the fact that the $sendString, $waitStirng and $returned are text strings representing the hexadecimal values to be sent and received via the comPort and the timeout value is in milliseconds. The format of the strings is a collection of 2 digit hexadecimal values separated by spaces.





Note:

The serial port object must have been opened with Serial_Open, Serial_OpenWithHandshaking, or Serial_OpenWithLogging.

If the wait string is not received within the time out time, the test will return a Fail.

If the send string is empty, the function will send nothing and wait for the wait string to be received.

If the wait string is empty, the send string will be sent and the function will return after the timeout has expired.

If the wait string is empty and the timeout value is set to 0, the send string will be sent and anything already in the receive buffer will be immediately returned.

Function Arguments



Parameter

Variable Type

Description



$comPort

Object

An instance of a Serial Port object created with one of the open functions.



$sendString

String

The string to be sent to the com port.



$waitString

String

The string to wait for in response before continuing.



$timeout

Integer

The maximum number of milliseconds to wait for a line of data to come into the incoming buffer.





Return parameters



Parameter

Variable Type

Description



$returned

String

The data received by the serial port. This will include all of the data received including the wait string, if it was received.





Example:





// Send the string "DOG" and wait 2 seconds for the string "CAT".

$sendString = "44 4F 47";

$waitString = "43 41 54";

$timeout = 2000; // wait for two seconds.

$returned = Serial_SendBinary($comPort, $sendString, $waitString, $timeout);





Serial_SendBinaryMillisecondsBool

Previous Top Next



* * *



Serial_SendBinaryMillisecondsBool



Usage:

($returned, $found) = Serial_SendBinaryMillisecondsBool($comPort, $sendString, $waitString, $timeout);





Description:

Sends a string to the output buffer of a serial port and waits for a specified string to be returned.





The Serial_SendBinaryMillisecondsBool function differs from the Serial_Send function in the fact that the $sendString, $waitStirng and $returned are text strings representing the hexadecimal values to be sent and received via the comPort and the timeout value is in milliseconds. The format of the strings is a collection of 2 digit hexadecimal values separated by spaces.





Note:

The serial port object must have been opened with Serial_Open, Serial_OpenWithHandshaking, or Serial_OpenWithLogging.

If the wait string is not received within the time out time, the test will not return a Fail. The boolean value for whether the string was found will be false.

If the send string is empty, the function will send nothing and wait for the wait string to be received.

If the wait string is empty, the send string will be sent and the function will return after the timeout has expired. Anything in the receive buffer will be returned.

If the wait string is empty and the timeout value is set to 0, the send string will be sent and anything already in the receive buffer will be immediately returned.

Function Arguments



Parameter

Variable Type

Description



$comPort

Object

An instance of a Serial Port object created with one of the open functions.



$sendString

String

The string to be sent to the com port.



$waitString

String

The string to wait for in response before continuing.



$timeout

Integer

The maximum number of milliseconds to wait for a line of data to come into the incoming buffer.





Return parameters



Parameter

Variable Type

Description



$returned

String

The data received by the serial port. This will include all of the data received including the wait string, if it was received.



$found

Boolean

True if the wait string was found, False otherwise.





Example:





// Send the string "DOG" and wait 2 seconds for the string "CAT".

$sendString = "44 4F 47";

$waitString = "43 41 54";

$timeout = 2000; // wait for two seconds.

($returned, $found) = Serial_SendBinaryMillisecondsBool($comPort, $sendString, $waitString, $timeout);





Serial_SendBinaryWithDelays

Previous Top Next



* * *



Serial_SendBinaryWithDelays



Usage:

$returned = Serial_SendBinaryWithDelays($comPort, $sendString, $waitString, $timeout, $delay);



Description:

This function sends a string to the output buffer of a serial port and waits for a specified string to be returned.

The Serial_SendBinaryWithDelays function differs from the Serial_Send function in the fact that the $sendString, $waitString and $returned are text strings representing the hexadecimal values to be sent and received via the comPort and the timeout value is in milliseconds. The format of the strings is a collection of 2 digit hexadecimal values separated by spaces.

The Serial_SendBinaryWithDelays function differs from the Serial_SendBinary function in the fact that it inserts a delay specified by the $delay argument between each character that is sent out of the serial port. This function is useful for DUT's that don't support a proper FIFO buffer and aren't able to process characters sent at the native baud rate setting of the serial port.



Remarks:

The serial port object must have been opened with Serial_Open, Serial_OpenWithHandshaking, or Serial_OpenWithLogging.

If the wait string is not received within the time out time, the test will return a Fail.

If the send string is empty, the function will send nothing and wait for the wait string to be received.

If the wait string is empty, the send string will be sent and the function will return after the timeout has expired.

If the wait string is empty and the timeout value is set to 0, the send string will be sent and anything already in the receive buffer will be immediately returned.



Function arguments



Parameter

Variable Type

Description



$comPort

Object

An instance of a Serial Port object created with one of the open functions.



$sendString

String

The string to be sent to the com port.



$waitString

String

The string to wait for in response before continuing.



$timeout

Integer

The maximum number of seconds to wait for data to come into the incoming buffer.



$delay

Integer

The number of milliseconds to wait between each byte sent.





Return parameters



Parameter

Variable Type

Description



$returned

String

The data received by the serial port. This will include all of the data received including the wait string, if it was received.





Example:





// Send the string "DOG" and wait 2 seconds for the string "CAT".

$sendString = "44 4F 47";

$waitString = "43 41 54";

$timeout = 2; // Wait for two seconds.

$delay = 15; // Fifteen milliseconds between bytes.



$returned = Serial_SendBinaryWithDelays($comPort, $sendString, $waitString, $timeout, $delay);





Serial_SendBool

Previous Top Next



* * *



Serial_SendBool



Usage:

($returned, $found) = Serial_SendBool($comPort, $sendString, $waitString, $timeout);



Description:

This function sends a string to the output buffer of a serial port and waits for a specified string to be returned. Returns all the data received and a boolean indicating whether the wait string was found.



Remarks:

The serial port object must have been opened with Serial_Open, Serial_OpenWithHandshaking, or Serial_OpenWithLogging.

If the wait string is not received within the time out time, the test will return a Fail.

If the send string is empty, the function will send nothing and wait for the wait string to be received.

If the wait string is empty, the send string will be sent and the function will return after the timeout has expired.

If the wait string is empty and the timeout value is set to 0, the send string will be sent and anything already in the receive buffer will be immediately returned.



Function arguments



Parameter

Variable Type

Description



$comPort

Object

An instance of a Serial Port object created with one of the open functions.



$sendString

String

The string to be sent to the com port.



$waitString

String

The string to wait for in response before continuing.



$timeout

Integer

The maximum number of seconds to wait for data to come into the incoming buffer.





Return parameters



Parameter

Variable Type

Description



$returned

String

The data received by the serial port. This will include all of the data received including the wait string, if it was received.



$found

Boolean

True if the wait string was found, False otherwise.





Example:





$sendString = "Send To Port";

$waitString = "Return";

$timeout = 2; // Wait for two seconds.



($returned, $found) = Serial_SendBool($comPort, $sendString, $waitString, $timeout);





Serial_SendBreak

Previous Top Next



* * *



Serial_SendBreak



Usage:

Serial_SendBreak($comPort, $breakLength);





Description:

Sends a break signal on the com port.

A break signal is defined as the voltage level that represents a zero, held for a time longer than one character space. This function lets the user define the length to hold it in milliseconds.





Notes:

The serial port object must have been opened with Serial_Open, Serial_OpenWithHandshaking, or Serial_OpenWithLogging.

At 9600 baud, each bit is 0.104 milliseconds. Since the minimum hold time for this function is 1 millisecond, this is equivalent to almost 10 bits and should be recognized by the instrument connected to the computer.

Function Arguments



Parameter

Variable Type

Description



$comPort

Object

An instance of a Serial Port object created with one of the open functions.



$breakLength

Integer

The number of milliseconds to hold the break signal before releasing the com port for normal operations.





Return parameters



Parameter

Variable Type

Description



None.





Example:





$breakLength = 2; // Hold Break for 2 milliseconds.

Serial_SendBreak($comPort, $breakLength);





Serial_SendHex

Previous Top Next



* * *



Serial_SendHex

Usage:

Serial_SendHex($comPort, $sendValue);

Description:

Sends the ASCII encoded character equivalent of the $sendValue parameter.

Note:

The serial port object must have been opened with Serial_Open, Serial_OpenWithHandshaking, or Serial_OpenWithLogging.

Function arguments



Parameter

Variable Type

Description



$comPort

Object

An instance of a Serial Port object created with one of the open functions.



$sendValue

Integer

The integer value of the ASCII character to send of the Serial port.





Return parameters



Parameter

Variable Type

Description



None.





Example(s):





// Get a reference to the COM port.

$comPort = 3;

$baudRate = 9600;

$byteSize = 8;

$parity = "N";

$stopBits = 1;

$comObject = Serial_Open($comPort, $baudRate, $byteSize, $parity, $stopBits);





// now send our character (the space character).

$charToSend = 32;

Serial_SendHex($comObject, $charToSend);





Serial_SendMilliseconds

Previous Top Next



* * *



Serial_SendMilliseconds



Usage:

$returned = Serial_SendMilliseconds($comPort, $sendString, $waitString, $timeout);



Description:

This function sends a string to the output buffer of a serial port and waits for a specified string to be returned.



Remarks:

The serial port object must have been opened with Serial_Open, Serial_OpenWithHandshaking, or Serial_OpenWithLogging.

If the wait string is not received within the time out time, the test will return a Fail.

If the send string is empty, the function will send nothing and wait for the wait string to be received.

If the wait string is empty, the send string will be sent and the function will return after the timeout has expired.

If the wait string is empty and the timeout value is set to 0, the send string will be sent and anything already in the receive buffer will be immediately returned.



Function arguments



Parameter

Variable Type

Description



$comPort

Object

An instance of a Serial Port object created with one of the open functions.



$sendString

String

The string to be sent to the com port.



$waitString

String

The string to wait for in response before continuing.



$timeout

Integer

The maximum number of milliseconds to wait for data to come into the incoming buffer.





Return parameters



Parameter

Variable Type

Description



$returned

String

The data received by the serial port. This will include all of the data received including the wait string, if it was received.





Example:





$sendString = "Send To Port";

$waitString = "Return";

$timeout = 2000; // Wait for two seconds.



$returned = Serial_SendMilliseconds($comPort, $sendString, $waitString, $timeout);





Serial_SendMillisecondsBool

Previous Top Next



* * *



Serial_SendMillisecondsBool



Usage:

($returned, $found) = Serial_SendMillisecondsBool($comPort, $sendString, $waitString, $timeout);



Description:

This function sends a string to the output buffer of a serial port and waits for a specified string to be returned. Returns all the data received and a boolean indicating whether the wait string was found.



Remarks:

The serial port object must have been opened with Serial_Open, Serial_OpenWithHandshaking, or Serial_OpenWithLogging.

If the wait string is not received within the time out time, the test will return a Fail.

If the send string is empty, the function will send nothing and wait for the wait string to be received.

If the wait string is empty, the send string will be sent and the function will return after the timeout has expired.

If the wait string is empty and the timeout value is set to 0, the send string will be sent and anything already in the receive buffer will be immediately returned.



Function arguments



Parameter

Variable Type

Description



$comPort

Object

An instance of a Serial Port object created with one of the open functions.



$sendString

String

The string to be sent to the com port.



$waitString

String

The string to wait for in response before continuing.



$timeout

Integer

The maximum number of milliseconds to wait for data to come into the incoming buffer.





Return parameters



Parameter

Variable Type

Description



$returned

String

The data received by the serial port. This will include all of the data received including the wait string, if it was received.



$found

Boolean

True if the wait string was found, False otherwise.





Example:





$sendString = "Send To Port";

$waitString = "Return";

$timeout = 2000; // Wait for two seconds.



($returned, $found) = Serial_SendMillisecondsBool($comPort, $sendString, $waitString, $timeout);





Serial_SendMillisecondsMultiWait

Previous Top Next



* * *



Serial_SendMillisecondsMultiWait



Usage:

$returned = Serial_SendMillisecondsMultiWait($comPort, $sendString, $waitStrings, $timeout);



Description:

This function sends a string to the output buffer of a serial port and waits for any of the specified strings to be returned.



Remarks:

The serial port object must have been opened with Serial_Open, Serial_OpenWithHandshaking, or Serial_OpenWithLogging.

If one of the wait strings is not received within the time out time, the test will return a Fail.

If the send string is empty, the function will send nothing and wait for one of the wait strings to be received.

The array of wait strings must contain at least one string.



Function arguments



Parameter

Variable Type

Description



$comPort

Object

An instance of a Serial Port object created with one of the open functions.



$sendString

String

The string to be sent to the com port.



$waitStrings

Array

An array of strings to wait for in response before continuing. Only one of the strings must be received.



$timeout

Integer

The maximum number of milliseconds to wait for data to come into the incoming buffer.





Return parameters



Parameter

Variable Type

Description



$returned

String

The data received by the serial port. This will include all of the data received including the wait string, if it was received.





Example:





$sendString = "Send To Port";

$waitStrings = Array1DCreate("STRING", 3);

Array1DSetValue($waitStrings, 0, "Wait_String_1");

Array1DSetValue($waitStrings, 1, "Wait_String_2");

Array1DSetValue($waitStrings, 2, "Wait_String_3");

$timeout = 2000; // Wait for two seconds.



$returned = Serial_SendMillisecondsMultiWait($comPort, $sendString, $waitStrings, $timeout);





Serial_SendMillisecondsMultiWaitBool

Previous Top Next



* * *



Serial_SendMillisecondsMultiWaitBool



Usage:

($returned, $found) = Serial_SendMillisecondsMultiWaitBool($comPort, $sendString, $waitStrings, $timeout);



Description:

This function sends a string to the output buffer of a serial port and waits for any of the specified strings to be returned. Returns all the data received and a boolean indicating whether the wait string was found.



Remarks:

The serial port object must have been opened with Serial_Open, Serial_OpenWithHandshaking, or Serial_OpenWithLogging.

If one of the wait strings is not received within the time out time, the test will not return a Fail. The boolean value for whether the string was found will be false.

If the send string is empty, the function will send nothing and wait for one of the wait strings to be received.

The array of wait strings must contain at least one string.



Function arguments



Parameter

Variable Type

Description



$comPort

Object

An instance of a Serial Port object created with one of the open functions.



$sendString

String

The string to be sent to the com port.



$waitStrings

Array

An array of strings to wait for in response before continuing. Only one of the strings must be received.



$timeout

Integer

The maximum number of milliseconds to wait for data to come into the incoming buffer.





Return parameters



Parameter

Variable Type

Description



$returned

String

The data received by the serial port. This will include all of the data received including the wait string, if it was received.



$found

Boolean

True if one of the wait strings was found, False otherwise.





Example:





$sendString = "Send To Port";

$waitStrings = Array1DCreate("STRING", 3);

Array1DSetValue($waitStrings, 0, "Wait_String_1");

Array1DSetValue($waitStrings, 1, "Wait_String_2");

Array1DSetValue($waitStrings, 2, "Wait_String_3");

$timeout = 2000; // Wait for two seconds.



($returned, $found) = Serial_SendMillisecondsMultiWait($comPort, $sendString, $waitStrings, $timeout);





Serial_SendWithDelays

Previous Top Next



* * *



Serial_SendWithDelays



Usage:

$returned = Serial_SendWithDelays($comPort, $sendString, $waitString, $timeout, $delay);



Description:

This function sends a string to the output buffer of a serial port and waits for a specified string to be returned.

The Serial_SendWithDelays function differs from the Serial_Send function in the fact that it inserts a delay specified by the $delay argument between each character that is sent out of the serial port. This function is useful for DUT's that don't support a proper FIFO buffer and aren't able to process characters sent at the native baud rate setting of the serial port.



Remarks:

The serial port object must have been opened with Serial_Open, Serial_OpenWithHandshaking, or Serial_OpenWithLogging.

If the wait string is not received within the time out time, the test will return a Fail.

If the send string is empty, the function will send nothing and wait for the wait string to be received.

If the wait string is empty, the send string will be sent and the function will return after the timeout has expired.

If the wait string is empty and the timeout value is set to 0, the send string will be sent and anything already in the receive buffer will be immediately returned.



Function arguments



Parameter

Variable Type

Description



$comPort

Object

An instance of a Serial Port object created with one of the open functions.



$sendString

String

The string to be sent to the com port.



$waitString

String

The string to wait for in response before continuing.



$timeout

Integer

The maximum number of seconds to wait for data to come into the incoming buffer.



$delay

Integer

The number of milliseconds to wait between every bytes sent.





Return parameters



Parameter

Variable Type

Description



$returned

String

The data received by the serial port. This will include all of the data received including the wait string, if it was received.





Example:





$sendString = "Send To Port";

$waitString = "Return";

$timeout = 2; // Wait for two seconds.

$delay = 15; // Fifteen milliseconds between bytes.



$returned = Serial_SendWithDelays($comPort, $sendString, $waitString, $timeout, $delay);





Serial_SendWithLogging

Previous Top Next



* * *



Serial_SendWithLogging



Usage:

$returned = Serial_SendWithLogging($comPort, $sendString, $waitString, $timeout);



Description:

This function sends a string to the output buffer of a serial port and waits for a specified string to be returned. Both the sent string and the returned string are recorded in the previously opened logging file.



Remarks:

The serial port object must have been opened with Serial_OpenWithLogging.

If the wait string is not received within the time out time, the test will return a Fail.

If the send string is empty, the function will send nothing and wait for the wait string to be received.

If the wait string is empty, the send string will be sent and the function will return after the timeout has expired.

If the wait string is empty and the timeout value is set to 0, the send string will be sent and anything already in the receive buffer will be immediately returned.



Function arguments



Parameter

Variable Type

Description



$comPort

Object

An instance of a Serial Port object created with Serial_OpenWithLogging



$sendString

String

The string to be sent to the com port.



$waitString

String

The string to wait for in response before continuing.



$timeout

Integer

The maximum number of seconds to wait for data to come into the incoming buffer.





Return parameters



Parameter

Variable Type

Description



$returned

String

The data received by the serial port. This will include all of the data received including the wait string, if it was received.





Example:





$sendString = "Send To Port";

$waitString = "Return";

$timeout = 2; // Wait for two seconds.



$returned = Serial_SendWithLogging($comPort, $sendString, $waitString, $timeout);





Serial_SendWithLoggingBool

Previous Top Next



* * *



Serial_SendWithLoggingBool



Usage:

($returned, $found) = Serial_SendWithLoggingBool($comPort, $sendString, $waitString, $timeout);



Description:

This function sends a string to the output buffer of a serial port and waits for a specified string to be returned. Both the sent string and the returned string are recorded in the previously opened logging file. If the string waited for is not found, the test does not fail.



Remarks:

The serial port object must have been opened with Serial_OpenWithLogging.

If the send string is empty, the function will send nothing and wait for the wait string to be received.

If the wait string is empty, the send string will be sent and the function will return after the timeout has expired.

If the wait string is empty and the timeout value is set to 0, the send string will be sent and anything already in the receive buffer will be immediately returned.



Function arguments



Parameter

Variable Type

Description



$comPort

Object

An instance of a Serial Port object created with Serial_OpenWithLogging



$sendString

String

The string to be sent to the com port.



$waitString

String

The string to wait for in response before continuing.



$timeout

Integer

The maximum number of seconds to wait for data to come into the incoming buffer.





Return parameters



Parameter

Variable Type

Description



$returned

String

The data received by the serial port. This will include all of the data received including the wait string, if it was received.



$found

Boolean

True if one of the wait strings was found, False otherwise.





Example:





$sendString = "Send To Port";

$waitString = "Return";

$timeout = 2; // Wait for two seconds.



($returned, $found) = Serial_SendWithLoggingBool($comPort, $sendString, $waitString, $timeout);



if($found)

{ UpdateStatus("The wait string was found.");

}





Serial_SetNewLine

Previous Top Next



* * *



Serial_SetNewLine



Usage:

Serial_SetNewLine($comPort, $newLineChar);





Description:

Sets the newline character(s) for Serial_ReadLine and Serial_WriteLine functions for the specified serial port object that was opened with Serial_Open, Serial_OpenWithHandshaking, or Serial_OpenWithLogging.

Function Arguments



Parameter

Variable Type

Description



$comPort

Object

An instance of a Serial Port object created with one of the open functions.



$newLineChar

String

The character or characters that will designate the end of a line for Serial_ReadLine and will be appended to the end of a line for Serial_WriteLine.





Return parameters



Parameter

Variable Type

Description



None.





Example:





$newLineChar = "\r\n"; // Set end of line to the carriage return, line feed characters.

Serial_SetNewLine($comPort, $newLineChar);





Serial_Write

Previous Top Next



* * *



Serial_Write



Usage:

Serial_Write($comPort, $sendString);





Description:

Sends the send string to the specified serial port object that was opened with Serial_Open, Serial_OpenWithHandshaking, or Serial_OpenWithLogging.





This function differs from the Serial_Send function in that this function does not wait for any returned data or wait for a specified amount of time.

Function Arguments



Parameter

Variable Type

Description



$comPort

Object

An instance of a Serial Port object created with one of the open functions.



$sendString

String

The string of characters that will be sent to the serial port.





Return parameters



Parameter

Variable Type

Description



None.





Example:





$sendString = "Data to Send";

Serial_Write($comPort, $sendString);





Serial_WriteLine

Previous Top Next



* * *



Serial_WriteLine



Usage:

Serial_WriteLine($comPort, $sendString);





Description:

Sends the send string to the specified serial port object that was opened with Serial_Open, Serial_OpenWithHandshaking, or Serial_OpenWithLogging. The NewLine character(s) that are specified with the Serial_SetNewLine function are appended to the string.





This function differs from the Serial_Send function in that this function does not wait for any returned data or wait for a specified amount of time.

Function Arguments



Parameter

Variable Type

Description



$comPort

Object

An instance of a Serial Port object created with one of the open functions.



$sendString

String

The string of characters that will be sent to the serial port with the NewLine character(s) appended.





Return parameters



Parameter

Variable Type

Description



None.





Example:





$newLineChar = "\r\n"; // Set end of line to the carriage return, line feed characters.

Serial_SetNewLine($comPort, $newLineChar);





$sendString = "Data to Send";

Serial_WriteLine($comPort, $sendString);





Serial_XModem1KReceive

Previous Top Next



* * *



Serial_XModem1KReceive

Usage:

$ReturnValue = Serial_XModem1KReceive ($comPort, $FileName, $TimeOut, $NumberRetries);





Description:

Receives packets of information over the com port specified by $comPort and writes the packets to the specified file $FileName using Xmodem 1K file transfer protocol. Before using a serial port, it first must be opened with the Serial_Open function.





Result:

0 if the file be received successfully test produces a pass.

-1 if canceled by remote.

-2 if Synchronization error.

-3 if too many retries error.





Remarks:

This function was tested with Tera Term on 64 bit Windows 7.

This function uses XModem protocol with 1024 bye packet size and CRC16-CCITT error checking.

Function arguments



Parameter

Variable Type

Description



$comPort

Object

An instance of a Serial Port object created with the Serial_Open function.



$FileName

String

Path and file name of the file to save.



$TimeOut

Integer

Specifies the interval (in seconds) during which to send the initial handshake character to the transmitter. The character is sent every $TimeOut seconds, up to $NumberRetries times.



$NumberRetries

Integer

Sets the maximum number of times for handshake and packet receive.





Return parameters



Parameter

Variable Type

Description



$ReturnValue

Integer

The result of the test





Example:

// Receive the file using XModem 1K protocol.

$fileName = "C:\\Temp\\ReceiveFile.bin";

$comPort = 3;

$baudRate = 9600;

$byteSize = 8;

$parity = "N";

$stopBits = 1;

$comPort = Serial_Open($comPort, $baudRate, $byteSize, $parity, $stopBits);





// Get the file. Handshake 1 second intervals for 10 times.

$result = Serial_XModem1KReceive($comPort, $fileName, 1, 10);





Serial_XModem1KSend

Previous Top Next



* * *



Serial_XModem1KSend



Usage:

($ReturnValue, $numBytes) = Serial_XModem1KSend($comPort, $FileName, $TimeOut, $NumberRetries);



Description:

Reads data from $FileName file and sends it in packets over the com port specified by $comPort using Xmodem 1K file transfer protocol. This function uses an internal 30 second timeout for handshaking. Before using a serial port, it first must be opened with the Serial_Open function.





Result:

0 if the file be sent successfully and test produces a pass.

-1 if cancel by remote.

-2 if handshaking fail.

-3 if Exceed the $TimeofRetries

-4 if unknown error exists.





Remarks:

This function was tested with Tera Term on 64 bit Windows 7.

This function uses XModem protocol with 1024 bye packet size and CRC16-CCITT error checking.

Function arguments



Parameter

Variable Type

Description



$comPort

Object

An instance of a Serial Port object created with the Serial_Open function.



$FileName

String

Path and file name of the file to send.



$TimeOut

Integer

Specifies the interval (in seconds) during which to send the initial handshake character to the transmitter. The character is sent every $TimeOut seconds, up to $NumberRetries times.



$NumberRetries

Integer

Sets the maximum number of times for handshake and packet receive.





Return parameters



Parameter

Variable Type

Description



$ReturnValue

Integer

The result of the test





Example:

// Send the file using XModem 1K protocol.

$fileName = "C:\\Temp\\ReceiveFile.bin";

$comPort = 3;

$baudRate = 9600;

$byteSize = 8;

$parity = "N";

$stopBits = 1;

$comPort = Serial_Open($comPort, $baudRate, $byteSize, $parity, $stopBits);





// Send the file. Handshake 1 second intervals for 10 times.

($result, $numBytes) = Serial_XModem1KSend($comPort, $fileName, 1, 10);





TelnetClose

Previous Top Next



* * *



TelnetClose

Usage:

TelnetClose($telnetHandle);

Description:

This function closes a connection with a Telnet server.

Function arguments



Parameter

Variable Type

Description



$telnetHandle

Object

Telnet connection handle from TelnetConnect, TelnetConnectBool, or TelnetConnectBoolRaw.





Return parameters



Parameter

Variable Type

Description



None





Examples:





// Example without timeout value.

$target = "india.colorado.edu"; // Univ. of Colorado telnet time server.

$portNumber = 13;





$telnetHandle = TelnetConnect($target, $portNumber);





// Do some Telnet communication here.





TelnetClose($telnetHandle);





TelnetConnect

Previous Top Next



* * *



TelnetConnect

Usage:

$telnetHandle = TelnetConnect($target, $portNumber, [$timeout]);

Description:

This function opens a telnet connection to the $target parameter using the port number specified in the $portNumber argument. This function does not login to the telnet server, it merely creates the telnet connection. Any steps required for logging into the server (such as supplying a user name or password) must be scripted after opening the connection. For an automatic login to a server, see the TelnetLogin function. If the server port can't be opened, a failure will be generated by this function.

Function arguments



Parameter

Variable Type

Description



$target

String

The DNS name or IP address in xxx.xxx.xxx.xxx notation of the telnet server.



$portNumber

Integer

The port number (1 - 65535) of the telnet server.



$timeout

Integer

Optional: The number of seconds to wait for a response from the server. If the timeout value is not specified, the default of 10 seconds will be used.





Return parameters



Parameter

Variable Type

Description



$telnetHandle

Object

The handle to the telnet connection for other telnet commands to use.





Examples:





// Example without timeout value.

$target = "india.colorado.edu"; // Univ. of Colorado telnet time server.

$portNumber = 13;





$telnetHandle = TelnetConnect($target, $portNumber);





// Example with timeout.

$target = "192.168.1.21";

$portNumber = 59123;

$timeout = 25; // 25 second timeout.





$telnetHandle = TelnetConnect($target, $portNumber, $timeout);





TelnetConnectBool

Previous Top Next



* * *



TelnetConnectBool

Usage:

($Success,$telnetHandle) = TelnetConnectBool($target, $portNumber, [$timeout]);

Description:

This function opens a telnet connection to the $target parameter using the port number specified in the $portNumber argument. This function does not login to the telnet server, it merely creates the telnet connection. Any steps required for logging into the server (such as supplying a user name or password) must be scripted after opening the connection. For an automatic login to a server, see the TelnetLogin function.

If a connection to the telnet server can not be established, the $Success variable is returned as false, and the $telnetHandle is returned in an unconnected status.

Upon successful connection, the $Success return value is set to true, and the returned $TelnetHandle is functionally connected to the server.

Function arguments



Parameter

Variable Type

Description



$target

String

The DNS name or IP address in xxx.xxx.xxx.xxx notation of the telnet server.



$portNumber

Integer

The port number (1 - 65535) of the telnet server.



$timeout

Integer

Optional: The number of seconds to wait for a response from the server. If the timeout value is not specified, the default of 10 seconds will be used.





Return parameters



Parameter

Variable Type

Description



$Success

Boolean

A boolean variable indicating whether or not the connection to the server was successful. This variable can be used to retry the connection multiple times.



$telnetHandle

Object

The handle to the telnet connection for other telnet commands to use.





Examples:





// Example without timeout value.

$target = "india.colorado.edu"; // Univ. of Colorado telnet time server.

$portNumber = 13;





($Success, $telnetHandle) = TelnetConnectBool($target, $portNumber);





// Example with timeout.

$target = "192.168.1.21";

$portNumber = 59123;

$timeout = 25; // 25 second timeout.





// Set up the loop and loop until connected.

$Success = false;

while (!$Success)

{

($Success, $telnetHandle) = TelnetConnectBool($target, $portNumber, $timeout);

}





TelnetConnectBoolRaw

Previous Top Next



* * *



TelnetConnectBoolRaw

Usage:

($Success,$telnetHandle) = TelnetConnectBoolRaw($target, $portNumber, [$timeout]);

Description:

This function opens a telnet connection to the $target parameter using the port number specified in the $portNumber argument. All terminal type negotiation is turned off. This function does not login to the telnet server, it merely creates the telnet connection. Any steps required for logging into the server (such as supplying a user name or password) must be scripted after opening the connection. For an automatic login to a server, see the TelnetLogin function.

If a connection to the telnet server can not be established, the $Success variable is returned as false, and the $telnetHandle is returned in an unconnected status.

Upon successful connection, the $Success return value is set to true, and the returned $TelnetHandle is functionally connected to the server.

Function arguments



Parameter

Variable Type

Description



$target

String

The DNS name or IP address in xxx.xxx.xxx.xxx notation of the telnet server.



$portNumber

Integer

The port number (1 - 65535) of the telnet server.



$timeout

Integer

Optional: The number of seconds to wait for a response from the server. If the timeout value is not specified, the default of 10 seconds will be used.





Return parameters



Parameter

Variable Type

Description



$Success

Boolean

A boolean variable indicating whether or not the connection to the server was successful. This variable can be used to retry the connection multiple times.



$telnetHandle

Object

The handle to the telnet connection for other telnet commands to use.





Examples:





// Example without timeout value.

$target = "india.colorado.edu"; // Univ. of Colorado telnet time server.

$portNumber = 13;





($Success, $telnetHandle) = TelnetConnectBoolRaw($target, $portNumber);





// Example with timeout.

$target = "192.168.1.21";

$portNumber = 59123;

$timeout = 25; // 25 second timeout.





// Set up the loop and loop until connected.

$Success = false;

while (!$Success)

{

($Success, $telnetHandle) = TelnetConnectBoolRaw($target, $portNumber, $timeout);

}





TelnetFlush

Previous Top Next



* * *



TelnetFlush

Usage:

$success = TelnetFlush($telnetHandle);

Description:

This function flushes the output stream and clears the receive buffer.

Function arguments



Parameter

Variable Type

Description



$telnetHandle

Object

Telnet connection handle from TelnetConnect, TelnetConnectBool, or TelnetConnectBoolRaw.





Return parameters



Parameter

Variable Type

Description



$success

Boolean

True if the stream was successfully flushed and the receive buffer successfully cleared.





Examples:





// Example without timeout value.

$target = "india.colorado.edu"; // Univ. of Colorado telnet time server.

$portNumber = 13;





$telnetHandle = TelnetConnect($target, $portNumber);





$success = TelnetFlush($telnetHandle);





TelnetLogin

Previous Top Next



* * *



TelnetLogin

Usage:

$telnetHandle = TelnetLogin($target,$userName,$password,$timeOut,$prompt);

Description:

This function automatically logs into a telnet server session hosted by the $target argument, with the supplied $userName and $password arguments. If the $prompt response is not found before the $timeOut argument has expired, the function will return a failure. This function works by recogizing several different typical username and password prompts commonly used for telnet services. In the event that this function is unsuccessful, you can also use the TelnetConnect function, and manually script the login steps involved for the host.

Function Arguments



Parameter

Variable Type

Description



$target

String

The DNS name or IP address in xxx.xxx.xxx.xxx notation of the telnet server.



$userName

String

The username to be issued in response to the login prompt.



$password

String

The password to be issued in response to the password prompt.



$timeOut

Integer

The time in seconds to wait to see the $prompt variable after the $password argument has been sent.



$prompt

String

This argument can be used to verify a successful connection by specifying the prompt that the telnet session should expect to receive after a successful login. This argument is optional, and a blank string ("")may be supplied for this parameter.





Return Parameters



Parameter

Variable Type

Description



$telnetHandle

Object

The function returns an object of type Telnet which can be passed to the other telnet script commands.





TelnetLoginBool

Previous Top Next



* * *



TelnetLoginBool

Usage:

($success, $telnetHandle) = TelnetLoginBool($target, $userName, $password, $timeOut, $prompt);

Description:

This function automatically logs into a telnet server session hosted by the $target argument, with the supplied $userName and $password arguments. If the $prompt response is not found before the $timeOut argument has expired, the function will return a False in the $success variable. This function works by recognizing several different typical username and password prompts commonly used for telnet services. In the event that this function is unsuccessful, you can also use the TelnetConnect function, and manually script the login steps involved for the host.

Notes:

This function will not fail a test.

Function arguments



Parameter

Variable Type

Description



$target

String

The DNS name or IP address in xxx.xxx.xxx.xxx notation of the telnet server.



$userName

String

The username to be issued in response to the login prompt.



$password

String

The password to be issued in response to the password prompt.



$timeOut

Integer

The time in seconds to wait to see the $prompt variable after the $password argument has been sent.



$prompt

String

This argument can be used to verify a successful connection by specifying the prompt that the telnet session should expect to receive after a successful login. This argument is optional, and a blank string ("")may be supplied for this parameter.





Return parameters



Parameter

Variable Type

Description



$success

Boolean

True if successfully connected and logged in to the specified telnet server.



$telnetHandle

Object

An object of type Telnet which can be passed to the other telnet script commands.





Example(s):





// Set up the parameters to log in to the server.

$target = "telnet.server.com";

$userName = "myLogin";

$password = "myPassword";

$timeOut = 10;

$prompt = "Command>";





($success, $tnHandle) = TelnetLoginBool($target, $userName, $password, $timeOut, $prompt);





TelnetLogout

Previous Top Next



* * *



TelnetLogout

Usage:

TelnetLogout($telnetHandle);

Description:

This function automatically closes and logs out of a telnet connection. This function will always generate a passing result, assuming that the input parameter was a valid Telnet object. In the event that the argument passed in is not a valid Telnet object, a failure will be generated.

Function Arguments



Parameter

Variable Type

Description



$telnetHandle

Object

The instance of a Telnet object to be closed.





Return Parameters



Parameter

Variable Type

Description



None





TelnetReceiveBool

Previous Top Next



* * *



TelnetReceiveBool

Usage:

($found, $received) = TelnetReceiveBool($telnetHandle, $waitForString, $timeOut);

Description:

This function will read data from the Telnet server specified in the $telnetHandle.

If the $waitForString is received before the $timeOut variable expires, the function returns a 'true' value to the $found return variable, and all the characters in the receive buffer are returned as a string to the executive. If the $waitForString is not received before the $timeOut period, the function returns a 'false' value to the $found return variable and all received data.

If $waitForString is an empty string, function waits for period of time (equal to $timeOut) and returns all data received. When there is no data received, returns 'false' and $received will be empty.

Function arguments



Parameter

Variable Type

Description



$telnetHandle

Object

Telnet connection handle from TelnetConnect, TelnetConnectBool, or TelnetConnectBoolRaw.



$waitForString

String

The string to wait for before continuing. If left blank, the function will wait until $timeOut has expired before continuing.



$timeOut

Integer

The time in seconds to wait for $waitForString to be received before failing.





Return parameters



Parameter

Variable Type

Description



$found

Boolean

True if $waitForString was received before the time specified in $timeOut



$received

String

All of the characters received from the time the function was called until either $waitForString was received or $timeOut happened.





Examples:





// Example without timeout value.

$target = "india.colorado.edu"; // Univ. of Colorado telnet time server.

$portNumber = 13;





$telnetHandle = TelnetConnect($target, $portNumber);





// Get characters until ">" or 10 seconds.

($found, $received) = TelnetReceiveBool($telnetHandle, ">", 10);





TelnetClose($telnetHandle);





TelnetReceiveMillisecondsBool

Previous Top Next



* * *



TelnetReceiveMillisecondsBool

Usage:

($found, $received) = TelnetReceiveMillisecondsBool($telnetHandle, $waitForString, $timeOut);

Description:

This function will read data from the Telnet server specified in the $telnetHandle.

If the $waitForString is received before the $timeOut variable expires, the function returns a 'true' value to the $found return variable, and all the characters in the receive buffer are returned as a string to the executive. If the $waitForString is not received before the $timeOut period, the function returns a 'false' value to the $found return variable and all received data.

If $waitForString is an empty string, function waits for period of time (equal to $timeOut) and returns all data received. When there is no data received, returns 'false' and $received will be empty.

This function differs from TelnetReceiveBool in that this function has a millisecond time out value (as opposed to a second time out value).

Function arguments



Parameter

Variable Type

Description



$telnetHandle

Object

Telnet connection handle from TelnetConnect, TelnetConnectBool, or TelnetConnectBoolRaw.



$waitForString

String

The string to wait for before continuing. If left blank, the function will wait until $timeOut has expired before continuing.



$timeOut

Integer

The time in milliseconds to wait for $waitForString to be received before failing.





Return parameters



Parameter

Variable Type

Description



$found

Boolean

True if $waitForString was received before the time specified in $timeOut



$received

String

All of the characters received from the time the function was called until either $waitForString was received or $timeOut happened.





Examples:





// Example without timeout value.

$target = "india.colorado.edu"; // Univ. of Colorado telnet time server.

$portNumber = 13;





$telnetHandle = TelnetConnect($target, $portNumber);





// Get characters until ">" or 10 seconds.

($found, $received) = TelnetReceiveMillisecondsBool($telnetHandle, ">", 10);





TelnetClose($telnetHandle);





TelnetSend

Previous Top Next



* * *



TelnetSend

Usage:

$receiveBuffer = TelnetSend($telnetHandle,$sendString,$waitForString,$timeOut);

Description:

This function will send the $sendString argument on the $telnetHandle supplied. If the $waitForString is received before the $timeOut variable expires, a pass is generated, and all the characters in the receive buffer are returned as a string to the executive. If the $waitForString is not received before the $timeOut period, a failure is generated.

Function Arguments



Parameter

Variable Type

Description



$telnetHandle

Object

The instance of a Telnet object to be closed.



$sendString

String

The string to be sent.



$waitForString

String

The string to be received before continuing. A blank $waitForString is a valid argument. When a blank string is supplied, the executive will send the $sendString argument, and then continue immediately.



$timeOut

Integer

The time in seconds to wait for the $waitForString before failing. If the $waitForString is an empty string, this argument has no effect.





Return Parameters



Parameter

Variable Type

Description



$receiveBuffer

String

All the characters received from the time that the send string is sent, to the time that the $waitFor string is received.





TelnetSendBool

Previous Top Next



* * *



TelnetSendBool

Usage:

($Found,$receiveBuffer) = TelnetSendBool($telnetHandle,$sendString,$waitForString,$timeOut);

Description:

This function will send the $sendString argument on the $telnetHandle supplied.

If the $waitForString is received before the $timeOut variable expires, the function returns a 'True' value to the $Found return variable, and all the characters in the receive buffer are returned as a string to the executive. If the $waitForString is not received before the $timeOut period, the function returns a 'False' value to the $Found return variable. This function works in exactly the same way as the TelnetSend function, but is useful for occasions when you want to decide a specific behavior other than forcing a test failure in the event that the $waitForString is not found in the time allotted.

In other words, as long as the function is able to send it's sendString successfully via the Telnet protocol, this function will never generate a test failure.

Function Arguments



Parameter

Variable Type

Description



$telnetHandle

Object

The instance of a Telnet object to be closed.



$sendString

String

The string to be sent.



$waitForString

String

The string to be received before continuing. A blank $waitForString is a valid argument. When a blank string is supplied, the executive will send the $sendString argument, and then continue immediately.



$timeOut

Integer

The time in seconds to wait for the $waitForString before failing. If the $waitForString is an empty string, this argument has no effect.





Return Parameters



Parameter

Variable Type

Description



$Found

Boolean

Returns true of false depending on whether or not the expect string was found in the receive buffer.



$receiveBuffer

String

All the characters received from the time that the send string is sent, to the time that the $waitFor string is received.





TelnetSendBoolNoCRLF

Previous Top Next



* * *



TelnetSendBoolNoCRLF

Usage:

($Found,$receiveBuffer) = TelnetSendBoolNoCRLF($telnetHandle,$sendString,$waitForString,$timeOut);

Description:

This function will send the $sendString argument on the $telnetHandle supplied without automatically appending a carriage-return, line-feed character combination at the end of the sent message. Otherwise this function is identical to the TelnetSendBool function.

If the $waitForString is received before the $timeOut variable expires, the function returns a 'True' value to the $Found return variable, and all the characters in the receive buffer are returned as a string to the executive. If the $waitForString is not received before the $timeOut period, the function returns a 'False' value to the $Found return variable. This function works in exactly the same way as the TelnetSend function, but is useful for occasions when you want to decide a specific behavior other than forcing a test failure in the event that the $waitForString is not found in the time allotted.

In other words, as long as the function is able to send it's sendString successfully via the Telnet protocol, this function will never generate a test failure.

Function Arguments



Parameter

Variable Type

Description



$telnetHandle

Object

The instance of a Telnet object to be closed.



$sendString

String

The string to be sent.



$waitForString

String

The string to be received before continuing. A blank $waitForString is a valid argument. When a blank string is supplied, the executive will send the $sendString argument, and then continue immediately.



$timeOut

Integer

The time in seconds to wait for the $waitForString before failing. If the $waitForString is an empty string, this argument has no effect.





Return Parameters



Parameter

Variable Type

Description



$Found

Boolean

Returns true of false depending on whether or not the expect string was found in the receive buffer.



$receiveBuffer

String

All the characters received from the time that the send string is sent, to the time that the $waitFor string is received.





TelnetSendMilliseconds

Previous Top Next



* * *



TelnetSendMilliseconds

Usage:

$received = TelnetSendMilliseconds($telnetHandle, $sendString, $waitForString, $timeOut);

Description:

This function will send $sendString to the Telnet server specified in the $telnetHandle and wait for $waitForString to be returned or $timeOut to elapse.

If the $waitForString is received before the $timeOut variable expires, the function will Pass and the received data will be returned in $received. If the $waitForString is not received before the $timeOut period elapses, the function will generate a Fail.

This function differs from TelnetSend in that this function has a millisecond time out value (as opposed to a second time out value).

Function arguments



Parameter

Variable Type

Description



$telnetHandle

Object

Telnet connection handle from TelnetConnect, TelnetConnectBool, or TelnetConnectBoolRaw.



$sendString

String

The string to be sent to the Telnet server.



$waitForString

String

The string to wait for before continuing. If left blank, the function will wait until $timeOut has expired before continuing.



$timeOut

Integer

The time in milliseconds to wait for $waitForString to be received before failing.





Return parameters



Parameter

Variable Type

Description



$received

String

All of the characters received from the time $sendString was sent until either $waitForString was received.





Examples:





// Example without timeout value.

$target = "india.colorado.edu"; // Univ. of Colorado telnet time server.

$portNumber = 13;





$telnetHandle = TelnetConnect($target, $portNumber);





// Send "Hello" then get characters until ">" or 1 second.

($found, $received) = TelnetSendMilliseconds($telnetHandle, "Hello", ">", 1000);





TelnetClose($telnetHandle);





TelnetSendMillisecondsBool

Previous Top Next



* * *



TelnetSendMillisecondsBool

Usage:

($found, $received) = TelnetSendMillisecondsBool($telnetHandle, $sendString, $waitForString, $timeOut);

Description:

This function will send $sendString to the Telnet server specified in the $telnetHandle and wait for $waitForString to be returned or $timeOut to elapse.

If the $waitForString is received before the $timeOut variable expires, the function returns a 'true' value to the $found return variable, and all the characters in the receive buffer are returned as a string to the executive. If the $waitForString is not received before the $timeOut period, the function returns a 'false' value to the $found return variable and all received data.

If $waitForString is an empty string, function waits for period of time (equal to $timeOut) and returns all data received. When there is no data received, returns 'false' and $received will be empty.

This function differs from TelnetSendBool in that this function has a millisecond time out value (as opposed to a second time out value).

Function arguments



Parameter

Variable Type

Description



$telnetHandle

Object

Telnet connection handle from TelnetConnect, TelnetConnectBool, or TelnetConnectBoolRaw.



$sendString

String

The string to be sent to the Telnet server.



$waitForString

String

The string to wait for before continuing. If left blank, the function will wait until $timeOut has expired before continuing.



$timeOut

Integer

The time in milliseconds to wait for $waitForString to be received before failing.





Return parameters



Parameter

Variable Type

Description



$found

Boolean

True if $waitForString was received before the time specified in $timeOut



$received

String

All of the characters received from the time the function was called until either $waitForString was received or $timeOut happened.





Examples:





// Example without timeout value.

$target = "india.colorado.edu"; // Univ. of Colorado telnet time server.

$portNumber = 13;





$telnetHandle = TelnetConnect($target, $portNumber);





// Send "Hello" then get characters until ">" or 1 second.

($found, $received) = TelnetSendMillisecondsBool($telnetHandle, "Hello", ">", 1000);





TelnetClose($telnetHandle);





TelnetSendMillisecondsBoolNoCRLF

Previous Top Next



* * *



TelnetSendMillisecondsBoolNoCRLF

Usage:

($found, $received) = TelnetSendMillisecondsBoolNoCRLF($telnetHandle, $sendString, $waitForString, $timeOut);

Description:

This function will send $sendString to the Telnet server specified in the $telnetHandle and wait for $waitForString to be returned or $timeOut to elapse.

If the $waitForString is received before the $timeOut variable expires, the function returns a 'true' value to the $found return variable, and all the characters in the receive buffer are returned as a string to the executive. If the $waitForString is not received before the $timeOut period, the function returns a 'false' value to the $found return variable and all received data.

If $waitForString is an empty string, function waits for period of time (equal to $timeOut) and returns all data received. When there is no data received, returns 'false' and $received will be empty.

This function differs from TelnetSendMillisecondsBool in that this function does not append Carriage Return and Line Feed (CRLF) characters to the end of $sendString

Function arguments



Parameter

Variable Type

Description



$telnetHandle

Object

Telnet connection handle from TelnetConnect, TelnetConnectBool, or TelnetConnectBoolRaw.



$sendString

String

The string to be sent to the Telnet server.



$waitForString

String

The string to wait for before continuing. If left blank, the function will wait until $timeOut has expired before continuing.



$timeOut

Integer

The time in milliseconds to wait for $waitForString to be received before failing.





Return parameters



Parameter

Variable Type

Description



$found

Boolean

True if $waitForString was received before the time specified in $timeOut



$received

String

All of the characters received from the time the function was called until either $waitForString was received or $timeOut happened.





Examples:





// Example without timeout value.

$target = "india.colorado.edu"; // Univ. of Colorado telnet time server.

$portNumber = 13;





$telnetHandle = TelnetConnect($target, $portNumber);





// Send "Hello" then get characters until ">" or 1 second.

($found, $received) = TelnetSendMillisecondsBoolNoCRLF($telnetHandle, "Hello", ">", 1000);





TelnetClose($telnetHandle);





UdpSendHexString

Previous Top Next



* * *



UdpSendHexString



Usage:

$ReturnString = UdpSendHexSting($IpAddress, $Port, $LocalIP, $HexToSend, $TimeOut);

Description:



This connects to the specified IP Address at the specified Port and sends the Hex String to the connected instrument using a UDP protocol.





Note: If you have multiple network interface cards in the computer, you must specify which one to use by supplying the local IP Address of the interface to use. If you only have one network interface card, the local IP Address can be left as Null ("").

Function arguments



Parameter

Variable Type

Description



$IpAddress

String

The IP Address of the instrument to connect to and send the string to in dot format.



$Port

String

The port number to connect to and send the string to.



$LocalIP

String

The IP Address of the local network interface to send the string from. This can be Null ("") if there is only one network interface.



$HexToSend

String

The hex string to send to the connected instrument.



$TimeOut

Integer

The number of seconds to wait for a reply from the instrument before generating a Time Out error.





Return parameters



Parameter

Variable Type

Description



$ReturnString

String

The return string from the instrument.





Usage Example:





$ReturnString = UdpSendHexString("192.168.1.100", "2010", "192.168.1.2", "3A2B1C", 3);





UdpSendString

Previous Top Next



* * *



UdpSendString



Usage:

$ReturnString = UdpSendSting($IpAddress, $Port, $LocalIP, $StringToSend, $TimeOut);

Description:



This connects to the specified IP Address at the specified Port and sends the String to the connected instrument using a UDP protocol.





Note: If you have multiple network interface cards in the computer, you must specify which one to use by supplying the local IP Address of the interface to use. If you only have one network interface card, the local IP Address can be left as Null ("").

Function arguments



Parameter

Variable Type

Description



$IpAddress

String

The IP Address of the instrument to connect to and send the string to in dot format.



$Port

String

The port number to connect to and send the string to.



$LocalIP

String

The IP Address of the local network interface to send the string from. This can be Null ("") if there is only one network interface.



$StringToSend

String

The string to send to the connected instrument.



$TimeOut

Integer

The number of seconds to wait for a reply from the instrument before generating a Time Out error.





Return parameters



Parameter

Variable Type

Description



$ReturnString

String

The return string from the instrument.





Usage Example:





$ReturnString = UdpSendString("192.168.1.100", "2010", "192.168.1.2", "Hello Instrument", 3);





USB_CheckDeviceExists

Previous Top Next



* * *



USB_CheckDeviceExists



Usage:

$DeviceExists = USB_CheckDeviceExists($VID,$PID);

Description:



This function walks the USB devices connected to the computer and returns true or false depending on whether or not a USB device with the supplied Vendor ID (VID) and Product ID (PID) exists on the USB hub.





Note: This function requires the open source LibUSB-Win32 driver to be installed on the host computer in order to use these functions.

Function arguments



Parameter

Variable Type

Description



$VID

String

The hexadecimal string for the vendor ID to locate.



$PID

String

The hexadecimal string for the product ID to locate





Return parameters



Parameter

Variable Type

Description



$DeviceExists

Boolean

This value will be set to 'True' or 'False' depending on if a USB device with the given VID and PID is connected and powered on.





Usage Example:





$DeviceExists = USB_CheckDeviceExists("0A21","0030");





USB_ClaimDeviceInterface

Previous Top Next



* * *



USB_ClaimDeviceInterface



Usage:

USB_ClaimDeviceInterface($UsbDevice,$Interface);

Description:



This function reserves the interface specified on the current USB device's currently selected configuration for communication.





Note: This function requires the open source LibUSB-Win32 driver to be installed on the host computer in order to use these functions. The interfaces for a particular configuration of a device can be listed by using the USB_ListDeviceConfigurations function.

Function arguments



Parameter

Variable Type

Description



$UsbDevice

Object

The handle to the USB device for communication.



$Interface

Integer

The index number of the interface to reserve for communication on the current configuration profile.





Return parameters



Parameter

Variable Type

Description



None





Usage Example:

$Message = USB_CreateMessage("01 03 02 00 08 02");

$Device = USB_GetDeviceByVIDPID("0A21","0030");

USB_OpenDevice($Device);

SetFinalizeFunction("Cleanup");

USB_SetDeviceConfiguration($Device,1);

USB_ClaimDeviceInterface($Device,0);

$MyWriter = USB_OpenEndPointWriter($Device,2,"INTERRUPT",0);

$BytesSent = USB_WriteMessage($MyWriter,$Message,200,"TRUE");

End;





function Cleanup()

{

USB_CloseDevice($Device);

USB_CloseEndPointWriter($MyWriter);

End;

}





USB_CloseDevice

Previous Top Next



* * *



USB_CloseDevice



Usage:

USB_CloseDevice($UsbDevice);

Description:



Closes the given USB device for communication.





Note: This function requires the open source LibUSB-Win32 driver to be installed on the host computer in order to use these functions.

Function arguments



Parameter

Variable Type

Description



$UsbDevice

Object

The handle to the USB device for communication.





Return parameters



Parameter

Variable Type

Description



None





Usage Example:

USB_CloseDevice($Device);





USB_CloseEndPointReader

Previous Top Next



* * *



USB_CloseEndPointReader



Usage:

USB_CloseEndPointReader($UsbEndPointReader);

Description:



This function disposes of the EndPointReader object created by the USB_OpenEndPointReader function. Once the EndPointReader has been closed, no further information can be read from it, however, if any messages remain in the queue, they will be received and processed before the EndPoint is closed.





Note: This function requires the open source LibUSB-Win32 driver to be installed on the host computer in order to use these functions. The interfaces for a particular configuration of a device can be listed by using the USB_ListDeviceConfigurations function.

Function arguments



Parameter

Variable Type

Description



$UsbEndPointReader

Object

A handle to the USB endpoint reader to be disposed. The USB endpoint reader is created by using the USB_OpenEndPointReader function.





Return parameters



Parameter

Variable Type

Description



None





Usage Example:





function Cleanup()

{

USB_CloseEndPointReader($MyReader);

USB_CloseDevice($Device);





End;

}





USB_CloseEndPointWriter

Previous Top Next



* * *



USB_CloseEndPointWriter



Usage:

USB_CloseEndPointWriter($UsbEndPointWriter);

Description:



This function disposes of the EndPointWriter object created by the USB_OpenEndPointWriter function. Once the EndPointWriter has been closed, no further information can be written to it, however, if any messages remain in the queue, they will be sent and processed before the EndPoint is closed.





Note: This function requires the open source LibUSB-Win32 driver to be installed on the host computer in order to use these functions. The interfaces for a particular configuration of a device can be listed by using the USB_ListDeviceConfigurations function.

Function arguments



Parameter

Variable Type

Description



$UsbEndPointWriter

Object

A handle to the USB endpoint writer to be disposed. The USB endpoint writer is created by using the USB_OpenEndPointWriter function.





Return parameters



Parameter

Variable Type

Description



None





Usage Example:

$Message = USB_CreateMessage("01 03 02 00 08 02");

$Device = USB_GetDeviceByVIDPID("0A21","0030");

USB_OpenDevice($Device);

SetFinalizeFunction("Cleanup");

USB_SetDeviceConfiguration($Device,1);

USB_ClaimDeviceInterface($Device,0);

$MyWriter = USB_OpenEndPointWriter($Device,2,"INTERRUPT",0);

$BytesSent = USB_WriteMessage($MyWriter,$Message,200,"TRUE");

End;





function Cleanup()

{

USB_CloseDevice($Device);

USB_CloseEndPointWriter($MyWriter);

End;

}





USB_CreateMessage

Previous Top Next



* * *



USB_CreateMessage



Usage:

$USBMessage = USB_CreateMessage($MessageBytes);

Description:



This function creates a message consisting of an array of bytes which are passed into the function as a string containing a list of bytes in the order to be sent. Each byte is separated by a single-blank space.





Note: This function requires the open source LibUSB-Win32 driver to be installed on the host computer in order to use these functions. The interfaces for a particular configuration of a device can be listed by using the USB_ListDeviceConfigurations function.

Function arguments



Parameter

Variable Type

Description



$MessageBytes

String

A space delimited string containing the bytes for the USB message being created.





Return parameters



Parameter

Variable Type

Description



$USBMessage

Object

A USB message which can be used in conjunction with the USB_WriteMessage function.





Usage Example:

$Message = USB_CreateMessage("01 03 02 00 08 02");

$Device = USB_GetDeviceByVIDPID("0A21","0030");

USB_OpenDevice($Device);

SetFinalizeFunction("Cleanup");

USB_SetDeviceConfiguration($Device,1);

USB_ClaimDeviceInterface($Device,0);

$MyWriter = USB_OpenEndPointWriter($Device,2,"INTERRUPT",0);

$BytesSent = USB_WriteMessage($MyWriter,$Message,200,"TRUE");

End;





function Cleanup()

{

USB_CloseDevice($Device);

USB_CloseEndPointWriter($MyWriter);

End;

}





USB_GetDeviceByVIDPID

Previous Top Next



* * *



USB_GetDeviceByVIDPID



Usage:

$deviceHandle = USB_GetDeviceByVIDPID($VID, $PID);



Description:

This function returns a handle to the first USB device specified by it's vendor ID and Product ID.





Remarks:

This function requires the open source LibUSB-Win32 driver to be installed on the host computer in order to use these functions.

If a device is not found with the given VID/PID, then the function returns a failure.

If multiple devices are found that have the specified VID and PID, only the first one in the list will be returned. To return handles to other ones, use USB_GetDeviceByVIDPIDNumber.



Function arguments



Parameter

Variable Type

Description



$VID

String

The hexadecimal string for the Vendor ID to locate.



$PID

String

The hexadecimal string for the Product ID to locate.





Return parameters



Parameter

Variable Type

Description



$deviceHandle

Object

The handle to communicate with the specified device.





Example:





// Get a handle to a device.

$VID = "0A21";

$PID = "0030";

$device = USB_GetDeviceByVIDPID($VID, $PID);





USB_GetDeviceByVIDPIDNumber

Previous Top Next



* * *



USB_GetDeviceByVIDPIDNumber



Usage:

$deviceHandle = USB_GetDeviceByVIDPIDNumber($VID, $PID, $number);



Description:

This function returns a handle to the given USB device specified by it's vendor ID, Product ID and it's place in the list of all devices with the same VID, PID. This function allows for multiple devices with the same VID, PID to exist in the system and still be individually accessed.





Remarks:

This function requires the open source LibUSB-Win32 driver to be installed on the host computer in order to use these functions.

If a device is not found with the given VID/PID/number, then the function returns a failure.





Function arguments



Parameter

Variable Type

Description



$VID

String

The hexadecimal string for the Vendor ID to locate.



$PID

String

The hexadecimal string for the Product ID to locate.



$number

Integer

The location of the device to connect to in a list of devices with the same VID/PID. The first device has number = 1.





Return parameters



Parameter

Variable Type

Description



$deviceHandle

Object

The handle to communicate with the specified device.





Example:





// Get a handle to a device.

$VID = "0A21";

$PID = "0030";

$number = 2; // The second device with this VID/PID.

$device = USB_GetDeviceByVIDPIDNumber($VID, $PID, $number);





USB_GetDeviceInfo

Previous Top Next



* * *



USB_GetDeviceInfo



Usage:

($DescriptorType,$DeviceClass,$DeviceSubclass,$DeviceFileName,$Manufacturer,$ProductDescription,$SerialNumber,$MaxPacketSize) = USB_GetDeviceInfo($UsbDevice);

Description:



Returns an array of information about the given USB device.





Note: This function requires the open source LibUSB-Win32 driver to be installed on the host computer in order to use these functions.

Function arguments



Parameter

Variable Type

Description



$UsbDevice

Object

The handle to the USB device





Return parameters



Parameter

Variable Type

Description



$DescriptorType

Integer

The descriptor type of the USB device



$DeviceClass

Integer

The device class of the USB device



$DeviceSubclass

Integer

The device subclass of the USB device



$DeviceFileName

String

The filename of the USB device



$Manufacturer

String

The manufacturer of the USB device



$ProductDescription

String

The product description of the USB device



$SerialNumber

String

The serial number of the USB device



$MaxPacketSize

Integer

The maximum packet size of the USB device





Usage Example:





($DescriptorType,$DeviceClass,$DeviceSubClass,$DeviceFileName,$Manufacturer,$ProductDescription,$SerialNumber,$MaxPacketSize) = USB_GetDeviceInfo($Device);





USB_GetListOfDevices

Previous Top Next



* * *



USB_GetListOfDevices



Usage:

$devList = USB_GetListOfDevices();



Description:

This function returns an array of devices that are registered on the USB busses of the computer.

Function arguments



Parameter

Variable Type

Description



None





Return parameters



Parameter

Variable Type

Description



$devList

Array

The list of devices registered on the USB busses.





Example(s):

$devList = USB_GetListOfDevices();





USB_ListDeviceConfigurations

Previous Top Next



* * *



USB_ListDeviceConfigurations



Usage:

USB_ListDeviceConfigurations($UsbDevice);

Description:



This function dumps all the available configuration information for the supplied USB device into the debug output window. The information from this function is useful in determining the required settings to be passed into subsequent functions to establish the USB communications session.





Note: This function requires the open source LibUSB-Win32 driver to be installed on the host computer in order to use these functions. The interfaces for a particular configuration of a device can be listed by using the USB_ListDeviceConfigurations function.

Function arguments



Parameter

Variable Type

Description



$UsbDevice

Object

The handle to the USB device for communication.





Return parameters



Parameter

Variable Type

Description



None





Example Output:

Now Enumerating All USB Configurations For Device...

---- USB Device [\\.\libusb0-0004--0x0a21-0x0030] CONFIGURATION VALUE [1] ----

BM Attributes: 64

Configuration String: Cruiser

Configuration Index: 4

Descriptor Type: 2

Length:9

Max Power: 0

Total Length: 46

Number of Interfaces: 1

---- Interface [1 ]Information For Configuration ---

Alternate Setting: 0

Descriptor Type: 4

Interface Class: 0

Interface Index: 0

Interface Number: 0

Interface Protocol: 0

Interface String:

Interface Sub Class: 0

Interface Endpoint Count: 4

--- Endpoint [1] Information For Interface [1]---

BM Attributes: 3

Descriptor Type: 5

Endpoint Address: 2

Polling Interval: 1

Length: 7

Max Packet Size: 64

Synch Address: 0

--- Endpoint [2] Information For Interface [1]---

BM Attributes: 3

Descriptor Type: 5

Endpoint Address: 4

Polling Interval: 1

Length: 7

Max Packet Size: 64

Synch Address: 0

--- Endpoint [3] Information For Interface [1]---

BM Attributes: 3

Descriptor Type: 5

Endpoint Address: 129

Polling Interval: 1

Length: 7

Max Packet Size: 64

Synch Address: 0

--- Endpoint [4] Information For Interface [1]---

BM Attributes: 3

Descriptor Type: 5

Endpoint Address: 131

Polling Interval: 5

Length: 7

Max Packet Size: 64

Synch Address: 0





Usage Example:

$Message = USB_CreateMessage("01 03 02 00 08 02");

$Device = USB_GetDeviceByVIDPID("0A21","0030");

USB_OpenDevice($Device);

SetFinalizeFunction("Cleanup");

USB_SetDeviceConfiguration($Device,1);

USB_ClaimDeviceInterface($Device,0);

$MyWriter = USB_OpenEndPointWriter($Device,2,"INTERRUPT",0);

$BytesSent = USB_WriteMessage($MyWriter,$Message,200,"TRUE");

End;





function Cleanup()

{

USB_CloseDevice($Device);

USB_CloseEndPointWriter($MyWriter);

End;

}





USB_OpenDevice

Previous Top Next



* * *



USB_OpenDevice



Usage:

USB_OpenDevice($UsbDevice);

Description:



Opens the given USB device for communication.





Note: This function requires the open source LibUSB-Win32 driver to be installed on the host computer in order to use these functions.

Function arguments



Parameter

Variable Type

Description



$UsbDevice

Object

The handle to the USB device for communication.





Return parameters



Parameter

Variable Type

Description



None





Usage Example:

USB_OpenDevice($Device);





USB_OpenEndPointReader

Previous Top Next



* * *



USB_OpenEndPointReader



Usage:

$EndPointReader = USB_OpenEndPointReader($USBDevice,$EndPoint,$EndPointType,$PacketSize,$ReadBufferSize);

Description:



This function opens a channel to a specified endpoint on a USB device for communication. Once the endpoint has been opened, messages can be read from the endpoint using the USB_ReadMessage function.





Note: This function requires the open source LibUSB-Win32 driver to be installed on the host computer in order to use these functions. The interfaces for a particular configuration of a device can be listed by using the USB_ListDeviceConfigurations function.





Notes on Read End Points:

The read endpoint addresses are offset differently than write endpoints in the USB specification. The following table lists the correct address mappings:

Endpoint 1 = 0x81

Endpoint 2 = 0x82

Endpoint 3 = 0x83

Endpoint 4 = 0x84

Endpoint 5 = 0x85

Endpoint 6 = 0x86

Endpoint 7 = 0x87

Endpoint 8 = 0x88

Endpoint 9 = 0x89

Endpoint 10 = 0x8A

Endpoint 11 = 0x8B

Endpoint 12 = 0x8C

Endpoint 13 = 0x8D

Endpoint 14 = 0x8E

Endpoint 15 = 0x8F





Function arguments



Parameter

Variable Type

Description



$UsbDevice

Object

The handle to the USB device for communication.



$Endpoint

Integer

The number of the endpoint to establish communications.



$EndPointType

String

The type of USB endpoint to open for communcation. Allowable values are:

· "BULK" = Opens the Endpoint for Bulk Style Communication

· "ISOCHRONOUS" = Opens the Endpoint for Isochronous communcation. If the endpoint type is set to Isochronous, you must supply a valid value for the $PacketSize parameter

· "Interrupt" = Opens the Endpoint for interrupt drive communications (this is the most common type of USB endpoint)



$PacketSize

Integer

A packet size for isochronous end points. If any other endpoint type is specified this field is ignored.



$ReadBufferSize

Integer

The number of bytes to reserve for the read buffer.





Return parameters



Parameter

Variable Type

Description



$EndPointReader

Object

The handle to the newly opened endpoint reader.





Usage Example:

$MyReader = USB_OpenEndPointReader($Device,1,"INTERRUPT",64,256);





USB_OpenEndPointWriter

Previous Top Next



* * *



USB_OpenEndPointWriter



Usage:

$EndPointWriter = USB_OpenEndPointWriter($USBDevice,$EndPoint,$EndPointType,$PacketSize);

Description:



This function opens a channel to a specified endpoint on a USB device for communication. Once the endpoint has been opened, messages can be sent to the endpoint using the USB_WriteMessage function.





Note: This function requires the open source LibUSB-Win32 driver to be installed on the host computer in order to use these functions. The interfaces for a particular configuration of a device can be listed by using the USB_ListDeviceConfigurations function.

Function arguments



Parameter

Variable Type

Description



$UsbDevice

Object

The handle to the USB device for communication.



$Endpoint

Integer

The number of the endpoint to establish communications.



$EndPointType

String

The type of USB endpoint to open for communcation. Allowable values are:

· "BULK" = Opens the Endpoint for Bulk Style Communication

· "ISOCHRONOUS" = Opens the Endpoint for Isochronous communcation. If the endpoint type is set to Isochronous, you must supply a valid value for the $PacketSize parameter

· "Interrupt" = Opens the Endpoint for interrupt drive communications (this is the most common type of USB endpoint)



$PacketSize

Integer

A packet size for isochronous end points. If any other endpoint type is specified this field is ignored.





Return parameters



Parameter

Variable Type

Description



$EndPointWriter

Object

The handle to the newly opened endpoint writer.





Usage Example:

$Message = USB_CreateMessage("01 03 02 00 08 02");

$Device = USB_GetDeviceByVIDPID("0A21","0030");

USB_OpenDevice($Device);

SetFinalizeFunction("Cleanup");

USB_SetDeviceConfiguration($Device,1);

USB_ClaimDeviceInterface($Device,0);

$MyWriter = USB_OpenEndPointWriter($Device,2,"INTERRUPT",0);

$BytesSent = USB_WriteMessage($MyWriter,$Message,200,"TRUE");

End;





function Cleanup()

{

USB_CloseDevice($Device);

USB_CloseEndPointWriter($MyWriter);

End;

}





USB_ReadMessage

Previous Top Next



* * *



USB_ReadMessage



Usage:

($BytesRead,$Message) = USB_ReadMessage($EndPointReader,$Timeout);

Description:



This functions reads all the bytes waiting on the endpoint that are stored in the buffer. The number of bytes read is returned as $BytesRead. The message is returned as a string of space-separated hex bytes.





If no bytes are read, the returned message is blank. If an error occurs accessing the USB endpoint, the function returns a failure.





Note: This function requires the open source LibUSB-Win32 driver to be installed on the host computer in order to use these functions. The interfaces for a particular configuration of a device can be listed by using the USB_ListDeviceConfigurations function.

Function arguments



Parameter

Variable Type

Description



$EndPointReader

Object

The handle to the $EndPointReader which was created using the 'USB_OpenEndPointReader' function.



$Timeout

Integer

The timeout value specified in milliseconds. The function will wait for the timeout to see if more message bytes become available in the queue.





Return parameters



Parameter

Variable Type

Description



$BytesRead

Integer

The number of bytes that were read from the endpoint within the $Timeout period.



$Message

String

The bytes received from the USB endpoint converted to a hexadecimal space-delimited string.





Usage Example:

($BytesReceived,$Message) = USB_ReadMessage($MyEndPointReader,200);





USB_SetDeviceConfiguration

Previous Top Next



* * *



USB_SetDeviceConfiguration



Usage:

USB_SetDeviceConfiguration($UsbDevice,$DesiredConfiguration);

Description:



This function selects the desired configuration profile to use for the USB device. The available configuration profiles for the given USB device can be viewed by using the USB_ListDeviceConfigurations function.





Note: This function requires the open source LibUSB-Win32 driver to be installed on the host computer in order to use these functions. The interfaces for a particular configuration of a device can be listed by using the USB_ListDeviceConfigurations function.

Function arguments



Parameter

Variable Type

Description



$UsbDevice

Object

The handle to the USB device for communication.



$DesiredConfiguration

Integer

The index of the desired configuration to use for the USB device.





Return parameters



Parameter

Variable Type

Description



None





Usage Example:

$Message = USB_CreateMessage("01 03 02 00 08 02");

$Device = USB_GetDeviceByVIDPID("0A21","0030");

USB_OpenDevice($Device);

SetFinalizeFunction("Cleanup");

USB_SetDeviceConfiguration($Device,1);

USB_ClaimDeviceInterface($Device,0);

$MyWriter = USB_OpenEndPointWriter($Device,2,"INTERRUPT",0);

$BytesSent = USB_WriteMessage($MyWriter,$Message,200,"TRUE");

End;





function Cleanup()

{

USB_CloseDevice($Device);

USB_CloseEndPointWriter($MyWriter);

End;

}





USB_WriteMessage

Previous Top Next



* * *



USB_WriteMessage



Usage:

$BytesSent = USB_WriteMessage($EndPointWriter,$Message,$Timeout,$FailOnError);

Description:



This functions sends a message that has been created using the 'USB_CreateMessage' command to the supplied endpoint, and returns the number of bytes that were successfully written. If the number of bytes written is negative, it means that a communication error occurred on the USB bus. If the $FailOnError argument is set to TRUE, it causes the function to generate a failure if any error in communication occurs. If the $FailOnError argument is set to false, the function will pass but will return a negative value for the number of bytes sent indicating an error occurred.





Note: This function requires the open source LibUSB-Win32 driver to be installed on the host computer in order to use these functions. The interfaces for a particular configuration of a device can be listed by using the USB_ListDeviceConfigurations function.

Function arguments



Parameter

Variable Type

Description



$EndPointWriter

Object

The handle to the $EndPointWriter which was created using the 'USB_OpenEndPointWriter' function.



$Message

Object

The handle to the USB Message which was created using the 'USB_CreateMessage' function.



$Timeout

Integer

The timeout value specified in milliseconds. If the timeout limit is exceeded, the function will pass, but will return a number of bytes sent which is smaller than the original USB message length to be sent.



$FailOnError

Boolean

This argument specifies whether or not the USB WriteMessage function should fail the test on a communication error.





Return parameters



Parameter

Variable Type

Description



$BytesSent

Integer

The number of bytes sent to the endpoint. If this value is a negative number, it indicates that a communication failure occurred executing the function.





Usage Example:

$Message = USB_CreateMessage("01 03 02 00 08 02");

$Device = USB_GetDeviceByVIDPID("0A21","0030");

USB_OpenDevice($Device);

SetFinalizeFunction("Cleanup");

USB_SetDeviceConfiguration($Device,1);

USB_ClaimDeviceInterface($Device,0);

$MyWriter = USB_OpenEndPointWriter($Device,2,"INTERRUPT",0);

$BytesSent = USB_WriteMessage($MyWriter,$Message,200,"TRUE");

End;





function Cleanup()

{

USB_CloseDevice($Device);

USB_CloseEndPointWriter($MyWriter);

End;

}





IviVISA_Close

Previous Top Next



* * *



IviVISA_Close



Usage:

IviVISA_Close($VisaHandle);



Description:

This function closes communication with the instrument.



Remarks:

· This function requires the IVI Foundation VISA drivers. Both the IVI Shared Components and the VISA Shared Components.

Function arguments



Parameter

Variable Type

Description



$VisaHandle

Object

The GPIB resource handle opened with the IviVISA_Open or IviVISA_OpenBool function.





Return parameters



Parameter

Variable Type

Description



None





Example(s):

// Connect to the instrument.

$resourceString = "USB0::0x0699::0x0408::0x010469::0::INSTR";

$timeOut = 2000; // Time out = 2 seconds.

$visa = IviVISA_Open($resourceString, $timeOut);





// Other functions to work with the instrument.





IviVISA_Close($visa);





IviVISA_Open

Previous Top Next



* * *



IviVISA_Open



Usage:

$VisaHandle = IviVISA_Open($resourceString, $timeOut);



Description:

This function creates a connection to the instrument specified in the resource string.



Remarks:

· This function requires the IVI Foundation VISA drivers. Both the IVI Shared Components and the VISA Shared Components.

Function arguments



Parameter

Variable Type

Description



$resourceString

String

The resource string pointing to the instrument. Prefix with the bus type. Different bus types require different information. Consult the Jabil Test Wiki for information on addressing different buses.



$timeOut

Integer

The time out value to use for communicating with the instrument in milliseconds.





Return parameters



Parameter

Variable Type

Description



$VisaHandle

Object

The reference to the instrument that will be used in other VISA functions.





Example(s):

// Connect to the instrument.

$resourceString = "USB0::0x0699::0x0408::0x010469::0::INSTR";

$timeOut = 2000; // Time out = 2 seconds.

$visa = IviVISA_Open($resourceString, $timeOut);





IviVISA_OpenBool

Previous Top Next



* * *



IviVISA_OpenBool



Usage:

($VisaHandle, $success) = IviVISA_OpenBool($resourceString, $timeOut);



Description:

This function creates a connection to the instrument specified in the resource string and returns the connection reference and a success boolean.



Remarks:

· This function requires the IVI Foundation VISA drivers. Both the IVI Shared Components and the VISA Shared Components.

· This function will not Fail a test.

Function arguments



Parameter

Variable Type

Description



$resourceString

String

The resource string pointing to the instrument. Prefix with the bus type. Different bus types require different information. Consult the Jabil Test Wiki for information on addressing different buses.



$timeOut

Integer

The time out value to use for communicating with the instrument in milliseconds.





Return parameters



Parameter

Variable Type

Description



$VisaHandle

Object

The reference to the instrument that will be used in other VISA functions.



$success

Boolean

A status boolean indicating whether the connection succeeded.





Example(s):

// Connect to the instrument.

$resourceString = "USB0::0x0699::0x0408::0x010469::0::INSTR";

$timeOut = 2000; // Time out = 2 seconds.

($visa, $success) = IviVISA_OpenBool($resourceString, $timeOut);





IviVISA_Read

Previous Top Next



* * *



IviVISA_Read



Usage:

$inString = IviVISA_Read($VisaHandle);



Description:

This function reads a string from the instrument up to a termination character.



Remarks:

· This function requires the IVI Foundation VISA drivers. Both the IVI Shared Components and the VISA Shared Components.

Function arguments



Parameter

Variable Type

Description



$VisaHandle

Object

The VISA resource handle opened with the IviVISA_Open or IviVISA_OpenBool function.





Return parameters



Parameter

Variable Type

Description



$inString

String

The string read back from the instrument.





Example(s):

// Connect to the instrument.

$resourceString = "USB0::0x0699::0x0408::0x010469::0::INSTR";

$timeOut = 2000; // Time out = 2 seconds.

$visa = IviVISA_Open($resourceString, $timeOut);





$inString = IviVISA_Read($visa);





$outStr = "The instrument responded: " + $inString;

UpdateStatus($outStr);





IviVISA_ReadBool

Previous Top Next



* * *



IviVISA_ReadBool



Usage:

($inString, $success) = IviVISA_ReadBool($VisaHandle);



Description:

This function reads a string from the instrument up to a termination character and also returns a boolean indicating whether the read was successful.



Remarks:

· This function requires the IVI Foundation VISA drivers. Both the IVI Shared Components and the VISA Shared Components.

· This function will not fail a test.

Function arguments



Parameter

Variable Type

Description



$VisaHandle

Object

The VISA resource handle opened with the IviVISA_Open or IviVISA_OpenBool function.





Return parameters



Parameter

Variable Type

Description



$inString

String

The string read back from the instrument.



$success

Boolean

A status boolean indicating whether the read was successful.





Example(s):

// Connect to the instrument.

$resourceString = "USB0::0x0699::0x0408::0x010469::0::INSTR";

$timeOut = 2000; // Time out = 2 seconds.

$visa = IviVISA_Open($resourceString, $timeOut);





($inString, $success) = IviVISA_ReadBool($visa);





$outStr = "The instrument responded: " + $inString;

UpdateStatus($outStr);





IviVISA_SetSendEndEnabled

Previous Top Next



* * *



IviVISA_SetSendEndEnabled



Usage:

IviVISA_SetSendEndEnabled($VisaHandle, $enabled);



Description:

This function will set whether the END signal is sent when the last character has been transmitted.



Remarks:

The END signal is a separate line on a GPIB bus.

This setting has no effect on busses other than the GPIB bus.



Function arguments



Parameter

Variable Type

Description



$VisaHandle

Object

The VISA resource handle opened with the IviVISA_Open or IviVISA_OpenBool function.



$enabled

Boolean

Whether the END signal is set at the end of a transmission (true = enabled, false = disabled).





Return parameters



Parameter

Variable Type

Description



None





Example:





// Open communication to the instrument.

$resource = "GPIB0::11::INSTR";

$timeout = 5000;

$handle = IviVISA_Open($resource, $timeout);



// Set the send end enabled.

IviVISA_SetSendEndEnabled($handle, true);





IviVISA_SetTerminationCharacter

Previous Top Next



* * *



IviVISA_SetTerminationCharacter



Usage:

IviVISA_SetTerminationCharacter($VisaHandle, $termChar);



Description:

This function will set the termination character that is expected at the end of a received string.



Remarks:

The VISA resource must already have been opened.



Function arguments



Parameter

Variable Type

Description



$VisaHandle

Object

The VISA resource handle opened with the IviVISA_Open or IviVISA_OpenBool function.



$termChar

String

The character that marks the end of a received string.





Return parameters



Parameter

Variable Type

Description



None





Example:





// Open communication to the instrument.

$resource = "GPIB0::11::INSTR";

$timeout = 5000;

$handle = IviVISA_Open($resource, $timeout);



// Set the termination character.

$termChar = "\n";

IviVISA_SetTerminationCharacter($handle, $termChar);





IviVISA_SetTerminationCharacterEnabled

Previous Top Next



* * *



IviVISA_SetTerminationCharacterEnabled



Usage:

IviVISA_SetTerminationCharacterEnabled($VisaHandle, $enabled);



Description:

This function will set whether to look for a termination character at the end of a received string.



Remarks:

The VISA resource must already have been opened.

When the termination character is enabled, receiving the character will end the receive (any characters after the termination character will be ignored).



Function arguments



Parameter

Variable Type

Description



$VisaHandle

Object

The VISA resource handle opened with the IviVISA_Open or IviVISA_OpenBool function.



$enabled

Boolean

Whether the termination character will end a receive (true = enabled, false = disabled).





Return parameters



Parameter

Variable Type

Description



None





Example:





// Open communication to the instrument.

$resource = "GPIB0::11::INSTR";

$timeout = 5000;

$handle = IviVISA_Open($resource, $timeout);



// Set the termination character enabled.

IviVISA_SetTerminationCharacterEnabled($handle, true);





IviVISA_Write

Previous Top Next



* * *



IviVISA_Write



Usage:

IviVISA_Write($VisaHandle, $outString);



Description:

This function writes a string to the instrument.





Remarks:

· This function requires the IVI Foundation VISA drivers. Both the IVI Shared Components and the VISA Shared Components.

Function arguments



Parameter

Variable Type

Description



$GpibHandle

Object

The VISA resource handle opened with the IviVISA_Open or IviVISA_OpenBool function.



$outString

String

The string to send to the instrument.





Return parameters



Parameter

Variable Type

Description



None





Example(s):

// Connect to the instrument.

$resourceString = "USB0::0x0699::0x0408::0x010469::0::INSTR";

$timeOut = 2000; // Time out = 2 seconds.

$visa = IviVISA_Open($resourceString, $timeOut);





$outString = "*RST"; // Reset the instrument.

IviVISA_Write($visa, $outString);





IviVISA_WriteBool

Previous Top Next



* * *



IviVISA_WriteBool



Usage:

$success = IviVISA_WriteBool($VisaHandle, $outString);



Description:

This function writes a string to the instrument and returns a boolean indicating whether the write was successful.





Remarks:

· This function requires the IVI Foundation VISA drivers. Both the IVI Shared Components and the VISA Shared Components.

· This function will not fail a test.

Function arguments



Parameter

Variable Type

Description



$GpibHandle

Object

The VISA resource handle opened with the IviVISA_Open or IviVISA_OpenBool function.



$outString

String

The string to send to the instrument.





Return parameters



Parameter

Variable Type

Description



$success

Boolean

A status boolean indicating whether the write was successful.





Example(s):

// Connect to the instrument.

$resourceString = "USB0::0x0699::0x0408::0x010469::0::INSTR";

$timeOut = 2000; // Time out = 2 seconds.

$visa = IviVISA_Open($resourceString, $timeOut);





$outString = "*RST"; // Reset the instrument.

$success = IviVISA_WriteBool($visa, $outString);





NIVISA_Close

Previous Top Next



* * *



NIVISA_Close

Usage:

NIVISA_Close($handle)

Description:

Closes the VISA session to the instrument.

Notes:

Requires NI-VISA v5.0.0 + to be installed on the system. Make sure to install the "NI Measurement Studio Common .NET Assemblies for .NET x.x".

Function arguments



Parameter

Variable Type

Description



$handle

Object

Instance of the message-based session created with the NIVISA_Open or NIVISA_OpenBool functions.





Return parameters



Parameter

Variable Type

Description



None





Usage Example:





$Handle = NIVISA_Open("GPIB0::2::Instr");

NIVISA_SetTimeout($Handle, 1000);

SetFinalizeFunction("Cleanup");

NIVISA_Write($Handle, "*IDN?");

$Response = NIVISA_Read($Handle);

UpdateStatus($Response);

End;





function Cleanup()

{





NIVISA_Close($Handle);





End;

}





NIVISA_Open

Previous Top Next



* * *



NIVISA_Open

Usage:

$handle = NIVISA_Open($resourceString);

Description:

Opens a VISA session to the instrument. Supports multiple hardware bus types, including GPIB, USB, Serial, and Ethernet.

Notes:

Requires NI-VISA v5.0.0 + to be installed on the system. Make sure to install the "NI Measurement Studio Common .NET Assemblies for .NET x.x".

Function arguments



Parameter

Variable Type

Description



$resourceString

String

The resource string identifying the instrument. For example, "GPIB0::9::Instr".





Return parameters



Parameter

Variable Type

Description



$handle

Object

The object representing the instance of the GPIB instrument.





Usage Example:





$Handle = NIVISA_Open("GPIB0::2::Instr");





NIVISA_SetTimeout($Handle, 1000);

SetFinalizeFunction("Cleanup");

NIVISA_Write($Handle, "*IDN?");

$Response = NIVISA_Read($Handle);

UpdateStatus($Response);

End;





function Cleanup()

{

NIVISA_Close($Handle);

End;

}





NIVISA_OpenBool

Previous Top Next



* * *



NIVISA_OpenBool



Usage:

($VISAHandle, $success) = NIVISA_OpenBool($resourceString);





Description:

Opens a VISA session to the instrument. Supports multiple hardware bus types, including GPIB, USB, Serial, and Ethernet. Also returns a boolean indicator for whether the connection was successful.





Notes:

Requires NI-VISA v5.0.0 + to be installed on the system. Make sure to install the "NI Measurement Studio Common .NET Assemblies for .NET x.x".

If the instrument is not successfully connected to, this function will not fail, but will return a FALSE in the success boolean.

Function arguments



Parameter

Variable Type

Description



$resourceString

String

The resource string identifying the instrument. For example, "GPIB0::9::Instr".





Return parameters



Parameter

Variable Type

Description



$VISAHandle

Object

The object representing the instance of the GPIB instrument.



$success

Boolean

True if the instrument was successfully connected to, False otherwise.





Usage Example:

// Connect to the instrument.

Label InstrConnect:





($VISAHandle, $success) = NIVISA_OpenBool("GPIB0::11::Instr");





if (!$success)

{

// Did not connect, wait 1 second and try again.

Sleep(1);

goto InstrConnect;

}





NIVISA_Read

Previous Top Next



* * *



NIVISA_Read

Usage:

$response = NIVISA_Read($handle)

Description:

Reads response string back from instrument.

Notes:

Requires NI-VISA v5.0.0 + to be installed on the system. Make sure to install the "NI Measurement Studio Common .NET Assemblies for .NET x.x".

Function arguments



Parameter

Variable Type

Description



$handle

Object

Instance of the message-based session created with the NIVISA_Open or NIVISA_OpenBool functions.





Return parameters



Parameter

Variable Type

Description



$response

String

The string read back from the instrument.





Usage Example:





$Handle = NIVISA_Open("GPIB0::2::Instr");

NIVISA_SetTimeout($Handle, 1000);

SetFinalizeFunction("Cleanup");

NIVISA_Write($Handle, "*IDN?");





$Response = NIVISA_Read($Handle);





UpdateStatus($Response);

End;





function Cleanup()

{

NIVISA_Close($Handle);

End;

}





NIVISA_ReadBool

Previous Top Next



* * *



NIVISA_ReadBool

Usage:

($response, $success) = NIVISA_ReadBool($handle);



Description:

Reads response string back from instrument and returns a status for whether it was successful.





Notes:

Will not fail the test (always passes).

Requires NI-VISA v5.0.0 + to be installed on the system. Make sure to install the "NI Measurement Studio Common .NET Assemblies for .NET x.x".

Function arguments



Parameter

Variable Type

Description



$handle

Object

Instance of the message-based session created with the NIVISA_Open or NIVISA_OpenBool functions.





Return parameters



Parameter

Variable Type

Description



$response

String

The string read back from the instrument.



$success

Boolean

True if the instrument was successfully written to, False otherwise.





Usage Example:





$Handle = NIVISA_Open("GPIB0::2::Instr");

NIVISA_SetTimeout($Handle, 1000);

SetFinalizeFunction("Cleanup");

NIVISA_Write($Handle, "*IDN?");





($Response, $success) = NIVISA_ReadBool($Handle);





// Let the user know if the read failed.

if (!$success)

{

UpdateStatus("Unable to read from the instrument.");

End;

}





UpdateStatus($Response);

End;





function Cleanup()

{

NIVISA_Close($Handle);

End;

}





NIVISA_SetTimeout

Previous Top Next



* * *



NIVISA_SetTimeout

Usage:

NIVISA_SetTimeout($handle, $timeoutMS)

Description:

Sets the communication timeout value for the VISA session. The timeout value is specified in milliseconds.

Notes:

Requires NI-VISA v5.0.0 + to be installed on the system. Make sure to install the "NI Measurement Studio Common .NET Assemblies for .NET x.x".

Function arguments



Parameter

Variable Type

Description



$handle

Object

Instance of the message-based session created with the NIVISA_Open or NIVISA_OpenBool functions.



$timeoutMS

Integer

Communication timeout value in milliseconds.





Return parameters



Parameter

Variable Type

Description



None





Usage Example:





$Handle = NIVISA_Open("GPIB0::2::Instr");





NIVISA_SetTimeout($Handle, 1000);





SetFinalizeFunction("Cleanup");

NIVISA_Write($Handle, "*IDN?");

$Response = NIVISA_Read($Handle);

UpdateStatus($Response);

End;





function Cleanup()

{

NIVISA_Close($Handle);

End;

}





NIVISA_Write

Previous Top Next



* * *



NIVISA_Write

Usage:

NIVISA_Write($handle, $message)

Description:

Writes command string to instrument.

Notes:

Requires NI-VISA v5.0.0 + to be installed on the system. Make sure to install the "NI Measurement Studio Common .NET Assemblies for .NET x.x".

Function arguments



Parameter

Variable Type

Description



$handle

Object

Instance of the message-based session created with the NIVISA_Open or NIVISA_OpenBool functions.



$message

String

Command to write to the instrument.





Return parameters



Parameter

Variable Type

Description



None





Usage Example:





$Handle = NIVISA_Open("GPIB0::2::Instr");

NIVISA_SetTimeout($Handle, 1000);

SetFinalizeFunction("Cleanup");





NIVISA_Write($Handle, "*IDN?");





$Response = NIVISA_Read($Handle);

UpdateStatus($Response);

End;





function Cleanup()

{

NIVISA_Close($Handle);

End;

}





NIVISA_WriteBool

Previous Top Next



* * *



NIVISA_WriteBool

Usage:

$success = NIVISA_WriteBool($handle, $message);



Description:

Writes command string to instrument and returns a status for whether it was successful.





Notes:

Will not fail the test (always passes).

Requires NI-VISA v5.0.0 + to be installed on the system. Make sure to install the "NI Measurement Studio Common .NET Assemblies for .NET x.x".

Function arguments



Parameter

Variable Type

Description



$handle

Object

Instance of the message-based session created with the NIVISA_Open or NIVISA_OpenBool functions.



$message

String

Command to write to the instrument.





Return parameters



Parameter

Variable Type

Description



$success

Boolean

True if the instrument was successfully written to, False otherwise.





Usage Example:





$Handle = NIVISA_Open("GPIB0::2::Instr");

NIVISA_SetTimeout($Handle, 1000);

SetFinalizeFunction("Cleanup");





$success = NIVISA_WriteBool($Handle, "*IDN?");





// Read the response if the command was written successfully.

if ($success)

{

$Response = NIVISA_Read($Handle);

UpdateStatus($Response);

}

End;





function Cleanup()

{

NIVISA_Close($Handle);

End;

}





NumericComparison

Previous Top Next



* * *



NumericComparison



Usage:

$result = NumericComparison($value1, $value2, $logicalOperator);





Description:

This function returns a boolean resulting from the comparison of two numeric script variables and/or numbers. The comparison type is defined by the $logicalOperator.





Remarks:

This function has been deprecated. It still works, but is no longer required. All of the comparison operators can be used in-line. For example: if ($value1 >= $value2)...

Function arguments



Parameter

Variable Type

Description



$value1

Integer, Float, Byte

First comparison value.



$value2

Integer, Float, Byte

Second comparison value.



$logicalOperator

String

The logical comparison operation to be performed on the supplied values. Valid logical operators are:

· "==" : Equal To

· "<" : Less Than

· ">" : Greater Than

· "<=" : Less Than or Equal To

· ">=" : Greater Than or Equal To

· "!=" : Not Equal To





Return parameters



Parameter

Variable Type

Description



$result

Boolean

The result of the logical comparison.





Example:

// Test the value in a variable.

$result = NumericComparison($value, 3000, ">=");

// Will return true if the number in $value is greater than or equal to 3000.





BinaryStringToInteger

Previous Top Next



* * *



BinaryStringToInteger



Usage:



$Value = BinaryStringToInteger($BinaryString);





Description:





Returns an Integer representing the value of the binary string supplied to the function. If the supplied string is not a valid binary value, a failure is generated.

Note:

Binary strings can contain any number of whitespace. Values larger than 2^32 – 1 (0b0111 1111 1111 1111 1111 1111 1111 1111) are returned as the negative-valued two’s complement of the binary string.

Function arguments



Parameter

Variable Type

Description



$BinaryString

String

The binary string (which can contain whitespace)





Return parameters



Parameter

Variable Type

Description



$Value

Integer

The integer value of the binary string





Example:





$Value = BinaryStringToInteger (“10 1001 0001”);





ByteArrayToASCIIString

Previous Top Next



* * *



ByteArrayToASCIIString



Usage:

$returnString = ByteArrayToASCIIString($byteArray);



Description:





This function will convert an array of bytes into a series of ASCII characters that is then returned as a string.





Remarks:

If the input array is an array of integers, the value of each one must be between 0 and 255.

ALL elements of the array will be converted. Including all elements that contain a 0 value.

Function arguments



Parameter

Variable Type

Description



$byteArray

Array

An array of integers or bytes that will be converted to an ASCII string. If this is an integer array, all elements must have a value between 0 and 255.





Return parameters



Parameter

Variable Type

Description



$returnString

String

A string containing the ASCII representation of the bytes from the input array.





Example(s):

// Create our byte array.

$charArray = Array1DCreate("INTEGER", 5);

Array1DSetValue($charArray, 0, 72); // H

Array1DSetValue($charArray, 1, 101); // e

Array1DSetValue($charArray, 2, 108); // l

Array1DSetValue($charArray, 3, 108); // l

Array1DSetValue($charArray, 4, 111); // o





// Convert to String.

$returnString = ByteArrayToASCIIString($charArray);

// the string will now be "Hello".





DecimalToHexString

Previous Top Next



* * *



DecimalToHexString



Usage:

$hexString = DecimalToHexString($value);





Description:

This function will convert a decimal number (stored in an integer, a float or a string) into its hexadecimal equivalent and return that as a string.





Remarks:

If the number is in a float or a string, it must not contain a decimal point. It must be able to be parsed as an integer.

Function arguments



Parameter

Variable Type

Description



$value

Integer, Float or String

The value to be converted to a hexadecimal string.





Return parameters



Parameter

Variable Type

Description



$hexString

String

The string containing the hexadecimal representation of the value supplied.





Example:

// Convert a number to hexadecimal.

$value = 123456789;

$hexString = DecimalToHexString($value);





$outStr = "The value " + $value + " in hexadecimal is " + $hexString;

UpdateStatus($outStr);

// Outputs: The value 123456789 in hexadecimal is 75BCD15





DecimalToHexStringSpecifyWidth

Previous Top Next



* * *



DecimalToHexStringSpecifyWidth



Usage:

$HexString = DecimalToHexStringSpecifyWidth($Value, $Width);



Description:

Converts a decimal number (either Integer, Float or String) to a hexadecimal string representation of the number. The $Width parameter specifies the number of characters that will be returned in the hex string. This parameter is useful if the returned value needs to be padded with leading 0's.



Function arguments



Parameter

Variable Type

Description



$Value

Integer, Float or String

The value to be converted to an hexadecimal string.



$Width

Integer

The number of characters to be returned in the hexadecimal string.





Return parameters



Parameter

Variable Type

Description



$HexString

String

The string representing the Hexadecimal representation of the value supplied to the function.





Example:





$value = 12345;

$width = 8;



$hexString = DecimalToHexStringSpecifyWidth($value, $width);



$outStr = "The hex string is: " + $hexString;

UpdateStatus($outStr);



End;





HexStringToBinaryString

Previous Top Next



* * *



HexStringToBinaryString

Usage:

$value = HexStringToBinaryString($HexString);

Description:

Returns an binary string representing the value of the Hexadecimal string supplied to the function. If the supplied string is not a valid hexadecimal value, a failure is generated.

Example:

$value = HexStringToBinaryString("f0f");

Then, value would contain the string "111100001111";

Function Arguments



Parameter

Variable Type

Description



$HexString

String

The hexadecimal string.





Return Parameters



Parameter

Variable Type

Description



$value

String

The binary string representation of the hexadecimal value.





HexStringToBinaryStringSpecifyWidth

Previous Top Next



* * *



HexStringToBinaryStringSpecifyWidth

Usage:

$value = HexStringToBinaryStringSpecifyWidth($HexString,$ByteWidth);

Description:

Returns an binary string representing the value of the Hexadecimal string supplied to the function. If the supplied string is not a valid hexadecimal value, a failure is generated.

The byte width parameter allows setting the number of bits used to represent the binary string. If the value is shorter than the number of bytes specified, it will be left padded with leading zero's.

Example:

$value = HexStringToBinaryStringSpecifyWidth("f",2);

Then, value would contain the string "0000000000001111";

Function Arguments



Parameter

Variable Type

Description



$HexString

String

The hexadecimal string.



$ByteWidth

Integer

The number of bytes to use to represent the binary string.





Return Parameters



Parameter

Variable Type

Description



$value

String

The binary string representation of the hexadecimal value.





HexStringToFloat

Previous Top Next



* * *



HexStringToFloat

Usage:

$value = HexStringToFloat($HexString);

Description:

Returns a Float data-type representing the value of the Hexadecimal string supplied to the function. If the supplied string is not a valid hexadecimal value, a failure is generated.

Function Arguments



Parameter

Variable Type

Description



$HexString

String

The hexadecimal string.





Return Parameters



Parameter

Variable Type

Description



$value

Float

The floating-point value of the supplied hexadecimal string.





HexStringToInteger

Previous Top Next



* * *



HexStringToInteger

Usage:

$value = HexStringToInteger($HexString);

Description:

Returns an Integer representing the value of the Hexadecimal string supplied to the function. If the supplied string is not a valid hexadecimal value, a failure is generated.

Function Arguments



Parameter

Variable Type

Description



$HexString

String

The hexadecimal string.





Return Parameters



Parameter

Variable Type

Description



$value

Integer

The integer value of the supplied hexadecimal string.





HexStringToString

Previous Top Next



* * *



HexStringToString



Usage:

$return = HexStringToString($hexString, $separatorString);





Description:

This function converts a Hex Format byte string to an ASCII string. This is the opposite of the StringToHexString function.





Remarks:

The Hex numbers must be two bytes. If single byte numbers are present these must be padded out to 2 digits by adding a leading 0. Example: 55 2 ff will become 55 02 ff.

Function arguments



Parameter

Variable Type

Description



$hexString

String

Byte string in hex format.



$separatorString

String

This is the bye used to separate the hex numbers in the string. This is usually a space " ".





Return parameters



Parameter

Variable Type

Description



$return

String

The ASCII string from the input $hexString.





Example:

// Convert the hex string "4A 41 42 49 4C" to an ASCII string.

// It will return the word "JABIL".

$hexString = "4A 41 42 49 4C";

$sepStr = " ";





$return = HexStringToString($hexString, $sepStr);





$outStr = "The hex string " + $hexString + "\nin ASCII is " + $return;

UpdateStatus($outStr);





IntegerToBinaryStringSpecifyWidth

Previous Top Next



* * *



IntegerToBinaryStringSpecifyWidth



Usage:



$ValueString = IntegerToBinaryStringSpecifyWidth ($IntegerNumber,$NumberOfBits);





Description:





This function will format the integer supplied as a binary string. The $NumberOfBits parameter will determine how many characters the binary string will contain. In the event that the binary representation of the number requires fewer bits than the number of characters specified, it will be left padded with zeros.

Note:

A warning will be thrown if the number of bits needed to represent the integer exceeds $NumberOfBits, but no failure will be returned.

Function arguments



Parameter

Variable Type

Description



$IntegerNumber

Integer

The integer number to convert to a binary string



$NumberOfBits

Integer

The number of bits to use to represent the number. This parameter is used to control the padding.





Return parameters



Parameter

Variable Type

Description



$ValueString

String

The binary string representing the integer supplied to the function.





Example:





$ValueString = IntegerToBinaryStringSpecifyWidth (15123, 16);





IntegerToHexString

Previous Top Next



* * *



IntegerToHexString

Usage:

$valueString = IntegerToHexString($IntegerNumber,$NumberOfCharacters);

Description:

This function will format the integer supplied as a hexadecimal string. The $NumberOfCharacters parameter will determine how many characters the hex string will have. In the event that the hexadecimal representation of the number requires less characters than specified, it will be left padded with zeros.

Example:

$ValueString = IntegerToHexString(15123,6);

$ValueString = "003B13";

Function Arguments



Parameter

Variable Type

Description



$IntegerNumber

Integer

The number to convert to a hex string



$NumberOfCharacters

Integer

The number of characters for representing the number. This is useful for left padding a value with 0's to create a string of the desired length.





Return Parameters



Parameter

Variable Type

Description



$valueString

String

The hexadecimal string representing the integer supplied to the function.





StringToFloat

Previous Top Next



* * *



StringToFloat



Usage:

$floatNumber = StringToFloat($stringToConvert);



Description:

This function converts a string containing a float number to a float variable.



Remarks:

The float number must be at the start of the string and must be the only item in the string (no other text).



Function arguments



Parameter

Variable Type

Description



$stringToConvert

String

The string that contains the float number.





Return parameters



Parameter

Variable Type

Description



$floatNumber

Float

The number that was in the string converted to a float.





Example:





// Convert a float number from a string.

$convertString = "3.141592654";

$floatNum = StringToFloat($convertString);





StringToHexString

Previous Top Next



* * *



StringToHexString

Usage:

$return = StringToHexString($String);

Description:

This function convents an ASCII string to a byte string in Hex format.

Example:

The input String is “JABIL”, and the return will be “4A 41 42 49 4C”.

Function Arguments



Parameter

Variable Type

Description



$String

String

ASCII string.





Return Parameters



Parameter

Variable Type

Description



$return

String

Byte string in Hex format.





TwosComplementHexStringToInteger

Previous Top Next



* * *



TwosComplementHexStringToInteger



Usage:



$Value = TwosComplementHexStringToInteger($HexString);





Description:

This function converts the supplied two's complement hexadecimal string to a signed integer value. The length of the supplied hexadecimal string must be 2,4,8, or 16 bytes in length (representing 8 bit, 16 bit, 32 bit, or 64 bit signed integer values).





Note:

If the input string supplied to the function doesn't match a supported string length, the function will generate an error.

Function arguments



Parameter

Variable Type

Description



$HexString

String

The hexadecimal string representing the number





Return parameters



Parameter

Variable Type

Description



$Value

String

Integer return value.





Example:





// Test Byte

$MyHex = "F1";

$MyByte = TwosComplementHexStringToInteger($MyHex);

$MyString = "The Byte is [" + $MyByte + "]";

UpdateStatus($MyString);





// Test Short

$MyHex = "FFF1";

$MyShort = TwosComplementHexStringToInteger($MyHex);

$MyString = "The Short is [" + $MyShort + "]";

UpdateStatus($MyString);





// Test Int

$MyHex = "FFFFFFF1";

$MyInt = TwosComplementHexStringToInteger($MyHex);

$MyString = "The Int is [" + $MyInt + "]";

UpdateStatus($MyString);





// Test Long

$MyHex = "FFFFFFF1";

$MyLong = TwosComplementHexStringToInteger($MyHex);

$MyString = "The Long is [" + $MyLong + "]";

UpdateStatus($MyString);





// Should Blow up with an error

$MyHex = "FFFFFF1";

$MyLong = TwosComplementHexStringToInteger($MyHex);

$MyString = "The Long is [" + $MyLong + "]";

UpdateStatus($MyString);





Example Output:





$MyHex = "F1";

$MyString = "The Byte is [" + -15 + "]";

The Byte is [-15]

$MyHex = "FFF1";

$MyString = "The Short is [" + -15 + "]";

The Short is [-15]

$MyHex = "FFFFFFF1";

$MyString = "The Int is [" + -15 + "]";

The Int is [-15]

$MyHex = "FFFFFFF1";

$MyString = "The Long is [" + -15 + "]";

The Long is [-15]

$MyHex = "FFFFFF1";

TwosComplementHexStringToInteger: Invalid Length of Hex String... Valid String Lengths are (2=byte,4=short,8=int,16=long)





AES128CBC_DecryptByteArrayToByteArray

Previous Top Next



* * *



AES128CBC_DecryptByteArrayToByteArray



Usage:

$decryptedArray = AES128CBC_DecryptByteArrayToByteArray($arrayToDecrypt, $encryptKey, $encryptIV);





Description:

This function will decrypt a byte array using the AES-128 CBC algorythm. The decrypted data is returned as a byte array.





Remarks:

The encryption key and Initialization Vector (IV) must be 16 or 32 bytes long.

The encryption key and IV are hex strings - ie. hex bytes in a string.

Hex strings may contain spaces between each byte , but do not have to.

Function arguments



Parameter

Variable Type

Description



$arrayToDecrypt

Array

A 1 dimensional array of bytes or integers that can be converted to bytes (values between 0 and 255).



$encryptKey

String

A hex string containing the encryption key.



$encryptIV

String

A hex string containing the encryption Initialization Vector.





Return parameters



Parameter

Variable Type

Description



$decryptedArray

Array

The decrypted data returned as an array of bytes.





Example(s):

// Decrypt a byte array.

$encKey = "01 23 45 67 89 AB CD EF 01 23 45 67 89 AB CD EF"; // Hex string with spaces.

$encIV = "0F1E2D3C4B5A69788796A5B4C3D2E1F0"; // Hex string without spaces.





$decArr = AES128CBC_DecryptByteArrayToByteArray($encryptedArray, $encKey, $encIV);





AES128CBC_DecryptByteArrayToHexString

Previous Top Next



* * *



AES128CBC_DecryptByteArrayToHexString



Usage:

$decryptedHexString = AES128CBC_DecryptByteArrayToHexString($arrayToDecrypt, $encryptKey, $encryptIV);





Description:

This function will decrypt a byte array using the AES-128 CBC algorythm. The decrypted data is returned as a hex string with spaces.





Remarks:

The encryption key and Initialization Vector (IV) must be 16 or 32 bytes long.

The encryption key and IV are hex strings - ie. hex bytes in a string.

Hex strings may contain spaces between each byte , but do not have to.

Function arguments



Parameter

Variable Type

Description



$arrayToDecrypt

Array

A 1 dimensional array of bytes or integers that can be converted to bytes (values between 0 and 255).



$encryptKey

String

A hex string containing the encryption key.



$encryptIV

String

A hex string containing the encryption Initialization Vector.





Return parameters



Parameter

Variable Type

Description



$decryptedHexString

String

The decrypted data returned as a hex string with spaces.





Example(s):

// Decrypt a byte array.

$encKey = "01 23 45 67 89 AB CD EF 01 23 45 67 89 AB CD EF"; // Hex string with spaces.

$encIV = "0F1E2D3C4B5A69788796A5B4C3D2E1F0"; // Hex string without spaces.





$decHexStr = AES128CBC_DecryptByteArrayToHexString($encryptedArray, $encKey, $encIV);





AES128CBC_DecryptByteArrayToString

Previous Top Next



* * *



AES128CBC_DecryptByteArrayToString



Usage:

$decryptedString = AES128CBC_DecryptByteArrayToString($arrayToDecrypt, $encryptKey, $encryptIV);





Description:

This function will decrypt a byte array using the AES-128 CBC algorythm. The decrypted data is returned as a string.





Remarks:

The encryption and decryption of strings relies on the ASCII value of each character in the string. Values above 0x7F are converted to '?' characters (0x3F).

The encryption key and Initialization Vector (IV) must be 16 or 32 bytes long.

The encryption key and IV are hex strings - ie. hex bytes in a string.

Hex strings may contain spaces between each byte , but do not have to.

Function arguments



Parameter

Variable Type

Description



$arrayToDecrypt

Array

A 1 dimensional array of bytes or integers that can be converted to bytes (values between 0 and 255).



$encryptKey

String

A hex string containing the encryption key.



$encryptIV

String

A hex string containing the encryption Initialization Vector.





Return parameters



Parameter

Variable Type

Description



$decryptedString

Array

The decrypted data returned as an ASCII string.





Example(s):

// Decrypt a byte array.

$encKey = "01 23 45 67 89 AB CD EF 01 23 45 67 89 AB CD EF"; // Hex string with spaces.

$encIV = "0F1E2D3C4B5A69788796A5B4C3D2E1F0"; // Hex string without spaces.





$decStr = AES128CBC_DecryptByteArrayToString($encryptedArray, $encKey, $encIV);





AES128CBC_DecryptHexStringToHexString

Previous Top Next



* * *



AES128CBC_DecryptHexStringToHexString



Usage:

$decryptedHexString = AES128CBC_DecryptByteArrayToHexString($hexStringToDecrypt, $encryptKey, $encryptIV);





Description:

This function will decrypt a hex string using the AES-128 CBC algorythm. The decrypted data is returned as a hex string with spaces.





Remarks:

The encryption key and Initialization Vector (IV) must be 16 or 32 bytes long.

The encryption key and IV are hex strings - ie. hex bytes in a string.

Hex strings may contain spaces between each byte , but do not have to.

Function arguments



Parameter

Variable Type

Description



$hexStringToDecrypt

String

A hex string containing the data to decrypt.



$encryptKey

String

A hex string containing the encryption key.



$encryptIV

String

A hex string containing the encryption Initialization Vector.





Return parameters



Parameter

Variable Type

Description



$decryptedHexString

String

The decrypted data returned as a hex string with spaces.





Example(s):

// Decrypt a byte array.

$encKey = "01 23 45 67 89 AB CD EF 01 23 45 67 89 AB CD EF"; // Hex string with spaces.

$encIV = "0F1E2D3C4B5A69788796A5B4C3D2E1F0"; // Hex string without spaces.





$decHexStr = AES128CBC_DecryptHexStringToHexString($encryptedHexStr, $encKey, $encIV);





AES128CBC_EncryptByteArrayToByteArray

Previous Top Next



* * *



AES128CBC_EncryptByteArrayToByteArray



Usage:

$encryptedArray = AES128CBC_EncryptByteArrayToByteArray($arrayToEncrypt, $encryptKey, $encryptIV);





Description:

This function will encrypt a byte array using the AES-128 CBC algorythm. The encrypted data is returned as a byte array.





Remarks:

The encryption key and Initialization Vector (IV) must be 16 or 32 bytes long.

The encryption key and IV are hex strings - ie. hex bytes in a string.

Hex strings may contain spaces between each byte , but do not have to.

Function arguments



Parameter

Variable Type

Description



$arrayToEncrypt

Array

A 1 dimensional array of bytes or integers that can be converted to bytes (values between 0 and 255).



$encryptKey

String

A hex string containing the encryption key.



$encryptIV

String

A hex string containing the encryption Initialization Vector.





Return parameters



Parameter

Variable Type

Description



$encryptedArray

Array

The encrypted data returned as an array of bytes.





Example(s):

// Encrypt a byte array.

$encKey = "01 23 45 67 89 AB CD EF 01 23 45 67 89 AB CD EF"; // Hex string with spaces.

$encIV = "0F1E2D3C4B5A69788796A5B4C3D2E1F0"; // Hex string without spaces.





$encArr = AES128CBC_EncryptByteArrayToByteArray($arrayToEncrypt, $encKey, $encIV);





AES128CBC_EncryptHexStringToByteArray

Previous Top Next



* * *



AES128CBC_EncryptHexStringToByteArray



Usage:

$encryptedArray = AES128CBC_EncryptHexStringToByteArray($hexStringToEncrypt, $encryptKey, $encryptIV);





Description:

This function will encrypt a hex string using the AES-128 CBC algorythm. The encrypted data is returned as a byte array.





Remarks:

The encryption key and Initialization Vector (IV) must be 16 or 32 bytes long.

The encryption key and IV are hex strings - ie. hex bytes in a string.

Hex strings may contain spaces between each byte , but do not have to.

Function arguments



Parameter

Variable Type

Description



$hexStringToEncrypt

String

A hex string containing the data to encrypt.



$encryptKey

String

A hex string containing the encryption key.



$encryptIV

String

A hex string containing the encryption Initialization Vector.





Return parameters



Parameter

Variable Type

Description



$encryptedArray

Array

The encrypted data returned as an array of bytes.





Example(s):

// Encrypt a byte array.

$encKey = "01 23 45 67 89 AB CD EF 01 23 45 67 89 AB CD EF"; // Hex string with spaces.

$encIV = "0F1E2D3C4B5A69788796A5B4C3D2E1F0"; // Hex string without spaces.





$encArr = AES128CBC_EncryptHexStringToByteArray($hexStringToEncrypt, $encKey, $encIV);





AES128CBC_EncryptHexStringToHexString

Previous Top Next



* * *



AES128CBC_EncryptHexStringToHexString



Usage:

$encryptedHexString = AES128CBC_EncryptHexStringToHexString($hexStringToEncrypt, $encryptKey, $encryptIV);





Description:

This function will encrypt a hex string using the AES-128 CBC algorythm. The encrypted data is returned as a hex string with spaces.





Remarks:

The encryption key and Initialization Vector (IV) must be 16 or 32 bytes long.

The encryption key and IV are hex strings - ie. hex bytes in a string.

Hex strings may contain spaces between each byte , but do not have to.

Function arguments



Parameter

Variable Type

Description



$hexStringToEncrypt

String

A hex string containing the data to encrypt.



$encryptKey

String

A hex string containing the encryption key.



$encryptIV

String

A hex string containing the encryption Initialization Vector.





Return parameters



Parameter

Variable Type

Description



$encryptedHexString

String

The encrypted data returned as a hex string with spaces.





Example(s):

// Encrypt a byte array.

$encKey = "01 23 45 67 89 AB CD EF 01 23 45 67 89 AB CD EF"; // Hex string with spaces.

$encIV = "0F1E2D3C4B5A69788796A5B4C3D2E1F0"; // Hex string without spaces.





$encHexStr = AES128CBC_EncryptHexStringToHexString($hexStringToEncrypt, $encKey, $encIV);





AES128CBC_EncryptStringToByteArray

Previous Top Next



* * *



AES128CBC_EncryptStringToByteArray



Usage:

$encryptedArray = AES128CBC_EncryptStringToByteArray($stringToEncrypt, $encryptKey, $encryptIV);





Description:

This function will encrypt a string using the AES-128 CBC algorythm. The encrypted data is returned as a byte array.





Remarks:

The encryption and decryption of strings relies on the ASCII value of each character in the string. Values above 0x7F are converted to '?' characters (0x3F).

The encryption key and Initialization Vector (IV) must be 16 or 32 bytes long.

The encryption key and IV are hex strings - ie. hex bytes in a string.

Hex strings may contain spaces between each byte , but do not have to.

Function arguments



Parameter

Variable Type

Description



$stringToEncrypt

String

A string to encrypt.



$encryptKey

String

A hex string containing the encryption key.



$encryptIV

String

A hex string containing the encryption Initialization Vector.





Return parameters



Parameter

Variable Type

Description



$encryptedArray

Array

The encrypted data returned as an array of bytes.





Example(s):

// Encrypt a byte array.

$encKey = "01 23 45 67 89 AB CD EF 01 23 45 67 89 AB CD EF"; // Hex string with spaces.

$encIV = "0F1E2D3C4B5A69788796A5B4C3D2E1F0"; // Hex string without spaces.





$encArr = AES128CBC_EncryptStringToByteArray($stringToEncrypt, $encKey, $encIV);





DataRow_GetValueByColumnName

Previous Top Next



* * *



DataRow_GetValueByColumnName



Usage:

$MyValue1= DataRow_GetValueByColumnName($Row,$ColumnName);



Description:

DataTable_GetValueByColumnName is the function which reads the value from the Data Row for the given Column Name. Function arguments



Parameter

Variable Type

Description



$Row

Object

Data Row Object returned from the DataTable_Create Function.



$ColumnName

String

The Column Name of element to drag the element from the Data Row





Return parameters



Parameter

Variable Type

Description



$MyValue1

Object

The Return Value from the Data Row is assigned to this Variable.





Example(s):





$MyTable = DataTable_Create("Employees");

DataTable_AddColumn($MyTable,"id");

DataTable_AddColumn($MyTable,"name");

DataTable_AddColumn($MyTable,"Place");





$emp1 = DataTable_CreateRow($MyTable);

DataRow_SetValue($emp1,0,"24");

DataRow_SetValue($emp1,1,"Peter");

DataRow_SetValue($emp1,2,"USA");





DataTable_AddRow($MyTable,$emp1);





$emp2 =DataTable_CreateRow($MyTable);





$MyValue1 = DataRow_GetValueByColumnName($emp1,"name");

UpdateStatus($MyValue1);

End;





DataRow_SetValue

Previous Top Next



* * *



DataRow_SetValue



Usage:

DataRow_SetValue($Row,$ColumnIndex,$SetValue);



Description:

DataRow_SetValue is the function which takes the Data Row Object, ColumnIndex and the value that needs to be assigned. Function arguments



Parameter

Variable Type

Description



$Row

Object

Data Row Object returned from the DataTable_Create Function.



$ColumnIndex

Integer

The Column Index of the element of the Data Row that needs to be changed.



$SetValue

Object

The value that should be assigned to that corresponding element in the Data Row.





Example(s):





$MyTable = DataTable_Create("Employees");

DataTable_AddColumn($MyTable,"id");

DataTable_AddColumn($MyTable,"name");

DataTable_AddColumn($MyTable,"Place");





$emp1 = DataTable_CreateRow($MyTable);

DataRow_SetValue($emp1,0,"24");

DataRow_SetValue($emp1,1,"Peter");

DataRow_SetValue($emp1,2,"USA");





DataTable_AddRow($MyTable,$emp1);





$emp2 =DataTable_CreateRow($MyTable);

DataRow_SetValue($emp2,0,"36");

DataRow_SetValue($emp2,1,"John");

DataRow_SetValue($emp2,2,"Florida");





DataTable_AddRow($MyTable,$emp2);

End;





DataRow_SetValueByColumnName

Previous Top Next



* * *



DataRow_SetValueByColumnName



Usage:

DataRow_SetValueByColumnName($Row,$ColumnName,$SetValue);



Description:

DataRow_SetValueByColumnName is the function which takes the Data Row, ColumnName and the value that needs to be assigned . Function arguments



Parameter

Variable Type

Description



$Row

Object

Data Row Object returned from the DataTable_Create Function.



$ColumnName

String

The Column Name is the name of the Column of the Data Row which value needs to be updated.



$SetValue

Object

The value that should be assigned to that corresponding element in the Data Row.





Example(s):





$MyTable = DataTable_Create("Employees");

DataTable_AddColumn($MyTable,"id");

DataTable_AddColumn($MyTable,"name");

DataTable_AddColumn($MyTable,"Place");





$emp1 = DataTable_CreateRow($MyTable);

DataRow_SetValueByColumnName($emp1,"id",24);

DataRow_SetValueByColumnName($emp1,"name","Peter");

DataRow_SetValueByColumnName($emp1,"Place","USA");





DataTable_AddRow($MyTable,$emp1);





$emp2 =DataTable_CreateRow($MyTable);

DataRow_SetValueByColumnName($emp2,"id",36);

DataRow_SetValueByColumnName($emp2,"name","Dan");

DataRow_SetValueByColumnName($emp2,"Place","Florida");





DataTable_AddRow($MyTable,$emp2);

End;





DataTable_AddColumn

Previous Top Next



* * *



DataTable_AddColumn



Usage:

DataTable_AddColumn ($Table,$ColumnName);



Description:

This function adds new Columns to the Data Table.

Function arguments



Parameter

Variable Type

Description



$Table

Object

The Data Table.





$ColumnName

String

Name of the New Column Created.





Example(s):





$MyTable = DataTable_Create("Data Table");

DataTable_AddColumn($MyTable,"Column Name");





DataTable_AddRow

Previous Top Next



* * *



DataTable_AddRow



Usage:

DataTable_AddRow($Table,$Row);



Description:

This function adds new row to the data table.Before adding the row, it needs to be created. It is the DataTable_AddRow function which inserts the newly created rows to the Data Table. Function arguments



Parameter

Variable Type

Description



$Table

Object

Variable that holds the name of the Data Table.





$Row

Object

New Data Row that needs to be added to the Data Table.





Example(s):

$emp1 = DataTable_CreateRow($MyTable);

//Adds a String Name to a New Row...

DataRow_SetValue($emp1,0,"24");

DataRow_SetValue($emp1,1,"Peter");

DataRow_SetValue($emp1,2,"USA");

//Actually Adds a Row to the Data Table

DataTable_AddRow($MyTable,$emp1);





DataTable_Create

Previous Top Next



* * *



DataTable_Create



Usage:

$Table = DataTable_Create($DataTableName);



Description:

This function creates a Data Table named "$Table". After the Data Table is created, Rows and Columns can be directly added by their respective functions.

Function arguments



Parameter

Variable Type

Description



$DataTableName

String

Name of the Data Table.





Return arguments



Parameter

Variable Type

Description



$Table

Object





The Returned Data Table.





Example(s):





$MyTable = DataTable_Create("Data Table");





DataTable_CreateRow

Previous Top Next



* * *



DataTable_CreateRow



Usage:

$emp1 = DataTable_CreateRow($MyTable);



Description:

This function create new Rows in the data table. Function arguments



Parameter

Variable Type

Description



$MyTable

Object

The Data Table.





Return parameters



Parameter

Variable Type

Description



$emp1

Object

Returns the Created Data Row.





Example(s):

$MyTable = DataTable_Create("Employees");

$emp1 = DataTable_CreateRow($MyTable);





DataTable_FillValueByColumn

Previous Top Next



* * *



DataTable_FillValueByColumn



Usage:

DataTable_FillValueByColumn($Table,$ColumnName,$SetValue);



Description:

DataTable_FillValueByColumn fills all values in the given Column Name using the Set Value supplied. Function arguments



Parameter

Variable Type

Description



$Table

Object

The Data Table.



$ColumnName

String

The Column Name is the Name of the Column in the Data Table.



$SetValue

Object

The value that should be assigned.





Example:





DataTable_AddColumn($MeasurementDataTable,"SerialNumber");

DataTable_FillValueByColumn($MeasurementDataTable,"SerialNumber",$SerialNumber);





DataTable_GetValue

Previous Top Next



* * *



DataTable_GetValue



Usage:

$MyValue1= DataTable_GetValue($MyTable,$RowIndex,$ColumnIndex);



Description:

DataTable_GetValue is the function which reads the value from the Data Table for the given Row Index and Column Index. Function arguments



Parameter

Variable Type

Description



$Table

Object

The DataTable.





$RowIndex

Integer

The Row Index of the element of the DataTable that needs to be changed.



$ColumnIndex

Integer

The Column Index of the element of the DataTable that needs to be changed.





Return parameters



Parameter

Variable Type

Description



$MyValue1

Object

The Return Value from the Data Table is assigned to this Variable.





Example(s):





$MyTable = DataTable_Create("Employees");

DataTable_AddColumn($MyTable,"id");

DataTable_AddColumn($MyTable,"name");

DataTable_AddColumn($MyTable,"Place");





$emp1 = DataTable_CreateRow($MyTable);

DataRow_SetValue($emp1,0,"24");

DataRow_SetValue($emp1,1,"Peter");

DataRow_SetValue($emp1,2,"USA");





DataTable_AddRow($MyTable,$emp1);





$emp2 =DataTable_CreateRow($MyTable);





$MyValue1 = DataTable_GetValue($MyTable,1,1);

UpdateStatus($MyValue1);

End;





DataTable_GetValueByColumnName

Previous Top Next



* * *



DataTable_GetValueByColumnName



Usage:

$MyValue1= DataTable_GetValueByColumnName($MyTable,$RowIndex,$ColumnName);



Description:

DataTable_GetValueByColumnName is the function which reads the value from the Data Table for given Row Index and Column Name. Function arguments



Parameter

Variable Type

Description



$Table

Object

The DataTable.





$RowIndex

Integer

The Row Index of the element to drag the element from the DataTable.



$ColumnName

String

The Column Name of element to drag the element from the Data Table.





Return parameters



Parameter

Variable Type

Description



$MyValue1

Object

The Return Value from the Data Table is assigned to this Variable.





Example(s):





$MyTable = DataTable_Create("Employees");

DataTable_AddColumn($MyTable,"id");

DataTable_AddColumn($MyTable,"name");

DataTable_AddColumn($MyTable,"Place");





$emp1 = DataTable_CreateRow($MyTable);

DataRow_SetValue($emp1,0,"24");

DataRow_SetValue($emp1,1,"Peter");

DataRow_SetValue($emp1,2,"USA");





DataTable_AddRow($MyTable,$emp1);





$emp2 =DataTable_CreateRow($MyTable);





$MyValue1 = DataTable_GetValueByColumnName($MyTable,1,"name");

UpdateStatus($MyValue1);

End;





DataTable_InsertToSQL

Previous Top Next



* * *



DataTable_InsertToSQL



Usage:

DataTable_InsertToSQL($ConnectionString,$DestinationTable,$DataTable);



Description:

DataTable_InsertToSQL performs a bulk copy to an existing SQL table. Function arguments



Parameter

Variable Type

Description



$ConnectionString

String

Valid SQL connection string.



$DestinationTable

String

The name of the destination table within the supplied connection string catalog



$DataTable

Object

The DataTable to be copied.





Example(s):





DataTable_InsertToSQL("Data Source=localhost\\SQLEXPRESS;Initial Catalog=Glucose;Integrated Security=True;Connect Timeout=30","ElectricalMeasurements",$MeasurementDataTable);





DataTable_ReplaceMatchingValueByColumnName

Previous Top Next



* * *



DataTable_ReplaceMatchingValueByColumnName



Usage:

DataTable_ReplaceMatchingValueByColumnName($DataTable,$ColumnName,$MatchValue,$SetValue);



Description:

DataTable_ReplaceMatchingValueByColumnName is the function which replaces all the matching values with the specified column and replaces them with the supplied set value. Function arguments



Parameter

Variable Type

Description



$DataTable

Object

The Data Table.



$ColumnName

String

The name of the Column to replace values by matching



$MatchValue

Object

The matching value of the data to be replaced



$SetValue

Object

The value that should be assigned.





Example:

DataTable_ReplaceMatchingValueByColumnName($MeasurementDataTable,"Channel","101","SampleChamber1");





DataTable_RowCount

Previous Top Next



* * *



DataTable_RowCount



Usage:

$count=DataTable_RowCount($Table);



Description:

The RowCount function computes the number of rows in the Data Table. Function arguments



Parameter

Variable Type

Description



$Table

Object

The DataTable.





Return parameters



Parameter

Variable Type

Description



$count

Integer

Row count in the Data Table.





Example(s):

$Table = DataTable_Create("Data Table");

$row1=DataTable_AddRow($Table,"Row Name1");

$row2=DataTable_AddRow($Table,"Row Name2");

$count=DataTable_RowCount($Table);

End;





DataTable_SetValue

Previous Top Next



* * *



DataTable_SetValue



Usage:

DataTable_SetValue($Table,$RowIndex,$ColumnIndex,$SetValue);



Description:

DataTable_SetValue is the function which takes the RowIndex, ColumnIndex and the value that needs to be assigned. Function arguments



Parameter

Variable Type

Description



$Table

Object

The Data Table





$RowIndex

Integer

The Row Index of the element that needs to be changed.



$ColumnIndex

Integer

The Column Index of the element that needs to be changed.



$SetValue

Object

The value that should be assigned .





Example(s):





$MyTable = DataTable_Create("Data Table");

DataTable_AddColumn($MyTable,"Column1");

DataTable_AddColumn($MyTable,"Column2");

DataTable_AddRow($MyTable,"Row1");

DataTable_AddRow($MyTable,"Row2");

//Assign 45 to the 2nd Row and 3rd Column of $MyTable...

DataTable_SetValue($MyTable,1, 2,"45");





DataTable_SetValueByColumnName

Previous Top Next



* * *



DataTable_SetValueByColumnName



Usage:

DataTable_SetValueByColumnName($Table,$RowIndex,$ColumnName,$SetValue);



Description:

DataTable_SetValueByColumnName is the function which takes the Row Index, Column Name and the value that needs to be assigned. Function arguments



Parameter

Variable Type

Description



$Table

Object

The Data Table.



$RowIndex

Integer

The Row Index of the element that needs to be changed.



$ColumnName

String

The Column Name is the Name of the Column in the Data Table.



$SetValue

Object

The value that should be assigned.





Example(s):





$MyTable = DataTable_Create("Employees");

DataTable_AddColumn($MyTable,"id");

DataTable_AddColumn($MyTable,"name");

DataTable_AddColumn($MyTable,"Place");





$emp1 = DataTable_CreateRow($MyTable);

DataTable_SetValue($MyTable,1,0,"24");

DataTable_SetValue($MyTable,1,1,"Peter");

DataTable_SetValue($MyTable,1,2,"USA");

DataTable_AddRow($MyTable,$emp1);

DataTable_SetValueByColumnName($MyTable,1,"Place","Florida");

End;





DataTable_ShowInWindow

Previous Top Next



* * *



DataTable_ShowInWindow



Usage:

DataTable_ShowInWindow($Table);



Description:





This command shows the supplied data table in a separate window in a grid/column view that's useful for script debugging, or presenting tabular data to the user.





The name of the table being viewed will be displayed on the pop-up window.

The columns and rows of the grid view may be re-ordered, sorted, and resized to simplify the viewing of the data table.

Function arguments



Parameter

Variable Type

Description



$Table

Object

The Data Table to be viewed in the window.





Example(s):





$MyTable = DataTable_Create("Employees");

DataTable_ShowInWindow($MyTable);





SQL_Close

Previous Top Next



* * *



SQL_Close

Usage:



SQL_Close($sqlHandle);





Description:





This function will close a connection to a SQL database that was opened with the SQL_Connect function.

Function arguments



Parameter

Variable Type

Description



$sqlHandle

Object

A handle to a SQL database connection.





Return parameters



Parameter

Variable Type

Description



None





Example:



SQL_Close($sqlHandle);





SQL_Connect

Previous Top Next



* * *



SQL_Connect

Usage:



$sqlHandle = SQL_Connect($server, $database, $userName, $password);





Description:





This function will open a connection to a SQL database and return a handle to the SQL connections.



Function arguments



Parameter

Variable Type

Description



$server

String

The name or URL of the server on which the database resides.



$database

String

The name of the database to connect to on the server.



$userName

String

The user name to use for logging into the database on the server.



$password

String

The password for the user name being use to log in to the database.





Return parameters



Parameter

Variable Type

Description



$sqlHandle

Object

A handle to the SQL connection that can be used in subsequent SQL functions.





Example:





$server = "theServer";

$database = "SQLDataBase";

$userName = "Noone";

$password = "Nada";

$sqlHandle = SQL_Connect($server, $database, $userName, $password);





SQL_Query

Previous Top Next



* * *



SQL_Query

Usage:



($dataTable, $rows, $columns) = SQL_Query($sqlHandle, $query);





Description:





This function will send a query to a database previously opened with the SQL_Connect function and return a table of the data based on the query. It also returns the number of rows and number of columns in the table.



Function arguments



Parameter

Variable Type

Description



$sqlHandle

Object

A handle to a SQL database connection.



$query

String

A SQL query string.





Return parameters



Parameter

Variable Type

Description



$dataTable

Table

A table of data returned from the database based on the query. Access the data using the Jabil Test Data Table functions.



$rows

Integer

The number of rows in the returned data table.



$columns

Integer

The number of columns in the returned data table.





Example:





// Set the Finalize function.

SetFinalizeFunction("ScriptComplete");





// Connect to the server.

$server = "theServer";

$database = "SQLDataBase";

$userName = "Noone";

$password = "Nada";

$sqlHandle = SQL_Connect($server, $database, $userName, $password);





// Get the data from the table in the database.

$query = "SELECT * FROM tableofdata";

($dataTable, $rows, $columns) = SQL_Query($sqlHandle, $query);





// Print out the data from the table.

$rowCount = 0;

while ($rowCount < $rows)

{

$colCount = 0;

$rowStr = "\t";

while ($colCount < $columns)

{

// Get the data from the table.

$cellVal = DataTable_GetValue($dbTable, $rowCount, $colCount);

$rowStr = StringCat($rowStr, $cellVal); // Concatenate the new data to the row.

$rowStr = $rowStr + "\t"; // Add tabs between the columns.

$colCount = $colCount + 1;

}

// Output the row.

UpdateStatus($rowStr);

$rowCount = $rowCount + 1;

}

$outStr = "Number of entries: " + $rows;

UpdateStatus($outStr);





End;





// The Finalize function runs when the script ends.

function ScriptComplete()

{

// Close the database.

SQL_Close($sqlHandle);





End;

}





MongoDB_Connect

Previous Top Next



* * *



MongoDB_Connect



Usage:

$databaseHandle = MongoDB_Connect($connectionString, $databaseName);



Description:

This function will create a connection to the specified database on the specified server and return a handle to this database that can be used to connect to one or more collections within that database.



Function arguments



Parameter

Variable Type

Description



$connectionString

String

The string used to connect to the server with the database on it. This can include the IP address or the name of the server, as well as the port number.



$databaseName

String

The name of the database to connect to.





Return parameters



Parameter

Variable Type

Description



$databaseHandle

Object

A link to the database handle that can be used to connect to any number of collections within the database.





Example:





// Link to a database on a server.

$connectStr = "mongodb://192.168.10.112:27017";

$dbName = "myDataBase";



$dbHandle = MongoDB_Connect($connectStr, $dbName);





MongoDB_DocumentExistsById

Previous Top Next



* * *



MongoDB_DocumentExistsById



Usage:

$documentFound = MongoDB_DocumentExistsById($collectionHandle, $documentId);





Description:

This function will return whether a document with the given Id exists in the collection that was opened using the MongoDB_UseCollection function.

Function arguments



Parameter

Variable Type

Description



$collectionHandle

Object

A handle to a collection in the database that was previously opened with the MongoDB_UseCollection function.



$documentId

String

The Id of a document within the collection.





Return parameters



Parameter

Variable Type

Description



$documentFound

Boolean

True if the document was found in the collection and False otherwise.





Example(s):

// Link to a database on a server.

$connectStr = "192.168.10.112:27017";

$dbName = "myDataBase";





$dbHandle = MongoDB_Connect($connectStr, $dbName);





// Link to a collection.

$collectStr = "myCollection";





$collectHandle = MongoDB_UseCollection($dbHandle, $collectStr);





// Check for a document.

$docFound = MongoDB_DocumentExistsById($collectHandle, $docId);





MongoDB_DocumentExistsByName

Previous Top Next



* * *



MongoDB_DocumentExistsByName



Usage:

$documentFound = MongoDB_DocumentExistsByName($collectionHandle, $documentName);





Description:

This function will return whether the named document exists in the collection that was opened using the MongoDB_UseCollection function.

Function arguments



Parameter

Variable Type

Description



$collectionHandle

Object

A handle to a collection in the database that was previously opened with the MongoDB_UseCollection function.



$documentName

String

The name of the document to look for in the collection.





Return parameters



Parameter

Variable Type

Description



$documentFound

Boolean

True if the document was found in the collection and False otherwise.





Example(s):

// Link to a database on a server.

$connectStr = "192.168.10.112:27017";

$dbName = "myDataBase";





$dbHandle = MongoDB_Connect($connectStr, $dbName);





// Link to a collection.

$collectStr = "myCollection";





$collectHandle = MongoDB_UseCollection($dbHandle, $collectStr);





// Check for a document.

$docName = "myDocument";

$docFound = MongoDB_DocumentExistsByName($collectHandle, $docName);





MongoDB_FindAllDocumentsByName

Previous Top Next



* * *



MongoDB_FindAllDocumentsByName



Usage:

($documentIds, $documentDateTimes, $documentTypes) = MongoDB_FindAllDocumentsByName($collectionHandle, $documentName);





Description:

This function will retrieve the Ids, Date/Time last updated, and Types of all documents that match $documentName from the collection that was opened using the MongoDB_UseCollection function. The $documentIName is the name that was given to the documents in the MongoDB_UpdateDocument function when the documents were added to the collection.





Remarks:

The data is returned in three parallel arrays. Parallel in that the same index is used for one document in each array. For example: element 0 in the Id array is for the same document as element 0 in the Date/Time last updated, and Type arrays.

Function arguments



Parameter

Variable Type

Description



$collectionHandle

Object

A handle to a collection in the database that was previously opened with the MongoDB_UseCollection function.



$documentName

String

The name of the documents in the collection of the database.





Return parameters



Parameter

Variable Type

Description



$documentIds

String Array

The Ids of all of the documents found in the database that have the specified document name.



$documentDateTimes

String Array

The date and time that the documents were last updated. In the format: YYYY/MM/DD hh:mm:ss.



$documentTypes

String Array

The type of the data for each of the documents. This will be one of: Array, Boolean, Float, Integer, Object, String.





Example(s):

// Link to a database on a server.

$connectStr = "192.168.10.112:27017";

$dbName = "myDataBase";





$dbHandle = MongoDB_Connect($connectStr, $dbName);





// Link to a collection.

$collectStr = "myCollection";





$collectHandle = MongoDB_UseCollection($dbHandle, $collectStr);





// Get information about documents by name.

$docName = "myDocument";

($docIds, $docDateTimes, $docTypes) = MongoDB_FindAllDocumentsByName($collectHandle, $docName);





MongoDB_FindDocumentById

Previous Top Next



* * *



MongoDB_FindDocumentById



Usage:

($documentName, $documentDateTime, $documentType) = MongoDB_FindDocumentById($collectionHandle, $documentId);





Description:

This function will return the Name, Date/Time last updated and Type of a document from the collection that was opened using the MongoDB_UseCollection function. The $documentId is unique for each document, so there is only one document that will match the $documentId.

Function arguments



Parameter

Variable Type

Description



$collectionHandle

Object

A handle to a collection in the database that was previously opened with the MongoDB_UseCollection function.



$documentId

String

The ID of the document in the collection of the database.





Return parameters



Parameter

Variable Type

Description



$documentName

String

The name of the document from the database.



$documentDateTime

String

The date and time that the document was last updated. In the format: YYYY/MM/DD hh:mm:ss.



$documentType

String

The type of the data for the document. This will be one of: Array, Boolean, Float, Integer, Object, String.





Example(s):

// Link to a database on a server.

$connectStr = "192.168.10.112:27017";

$dbName = "myDataBase";





$dbHandle = MongoDB_Connect($connectStr, $dbName);





// Link to a collection.

$collectStr = "myCollection";





$collectHandle = MongoDB_UseCollection($dbHandle, $collectStr);





// Get information about a document that we know the ID of.

($docData, $docDateTime, $docType) = MongoDB_FindDocumentById($collectHandle, $documentId);





MongoDB_GetDocumentById

Previous Top Next



* * *



MongoDB_GetDocumentById



Usage:

($documentData, $documentDateTime, $documentType) = MongoDB_GetDocumentById($collectionHandle, $documentId);





Description:

This function will retrieve a document from the collection that was opened using the MongoDB_UseCollection function. The $documentId is the unique ID that was assigned to the document when it was added with the MongoDB_UpdateDocument function.





Remarks:

The document ID can be found using the MongoDB_FindAllDocumentsByName function.

Function arguments



Parameter

Variable Type

Description



$collectionHandle

Object

A handle to a collection in the database that was previously opened with the MongoDB_UseCollection function.



$documentId

String

The ID of the document in the collection of the database.





Return parameters



Parameter

Variable Type

Description



$documentData

Object

The document from the database. If the referenced document does not exist, this will be null.



$documentDateTime

String

The date and time that the document was last updated. In the format: YYYY/MM/DD hh:mm:ss.



$documentType

String

The type of the data for the document. This will be one of: Array, Boolean, Float, Integer, Object, String.





Example(s):

// Link to a database on a server.

$connectStr = "192.168.10.112:27017";

$dbName = "myDataBase";





$dbHandle = MongoDB_Connect($connectStr, $dbName);





// Link to a collection.

$collectStr = "myCollection";





$collectHandle = MongoDB_UseCollection($dbHandle, $collectStr);





// Retrieve a document that we already know the ID of.

($docData, $docDateTime, $docType) = MongoDB_GetDocumentById($collectHandle, $documentId);





MongoDB_GetFirstDocumentByName

Previous Top Next



* * *



MongoDB_GetFirstDocumentByName



Usage:

($documentData, $documentDateTime, $documentType) = MongoDB_GetFirstDocumentByName($collectionHandle, $documentName);





Description:

This function will retrieve the first document that matches $documentName from the collection that was opened using the MongoDB_UseCollection function. The $documentIName is the name that was given to the document in the MongoDB_UpdateDocument function when the document was added to the collection.





Remarks:

To get all of the documents with a specified name, use the MongoDB_FindAllDocumentsByName function and then get the document for each ID using the MongoDB_GetDocumentById function.

To get a named document other than the first one, use the MongoDB_GetDocumentById function.

Function arguments



Parameter

Variable Type

Description



$collectionHandle

Object

A handle to a collection in the database that was previously opened with the MongoDB_UseCollection function.



$documentName

String

The name of the document in the collection of the database.





Return parameters



Parameter

Variable Type

Description



$documentData

Varies

The document from the database. If the referenced document does not exist, this will be null. The type that is returned is based on the document data type that was set when the document was created.



$documentDateTime

String

The date and time that the document was last updated. In the format: YYYY/MM/DD hh:mm:ss.



$documentType

String

The type of the data for the document. This will be one of: Array, Boolean, Float, Integer, Object, String.





Example(s):

// Link to a database on a server.

$connectStr = "192.168.10.112:27017";

$dbName = "myDataBase";





$dbHandle = MongoDB_Connect($connectStr, $dbName);





// Link to a collection.

$collectStr = "myCollection";





$collectHandle = MongoDB_UseCollection($dbHandle, $collectStr);





// Retrieve a document by name.

$docName = "myDocument";

($docData, $docDateTime, $docType) = MongoDB_GetFirstDocumentByName($collectHandle, $docName);





MongoDB_RemoveDocumentById

Previous Top Next



* * *



MongoDB_RemoveDocumentById



Usage:

MongoDB_RemoveDocumentById($collectionHandle, $documentId);





Description:

This function will remove a document from the collection that was opened using the MongoDB_UseCollection function. The $documentId is the ID that was assigned to the document when the MongoDB_UpdateDocument function added the document to the collection.





Remarks:

The document ID can be found using the MongoDB_FindAllDocumentsByName function.

Function arguments



Parameter

Variable Type

Description



$collectionHandle

Object

A handle to a collection in the database that was previously opened with the MongoDB_UseCollection function.



$documentId

String

The ID of the document in the collection of the database.





Return parameters



Parameter

Variable Type

Description



none





Example(s):

// Link to a database on a server.

$connectStr = "192.168.10.112:27017";

$dbName = "myDataBase";





$dbHandle = MongoDB_Connect($connectStr, $dbName);





// Link to a collection.

$collectStr = "myCollection";





$collectHandle = MongoDB_UseCollection($dbHandle, $collectStr);





// Remove a document that we already know the ID of.

MongoDB_RemoveDocumentById($collectHandle, $documentId);





MongoDB_RemoveDocumentByName

Previous Top Next



* * *



MongoDB_RemoveDocumentByName



Usage:

MongoDB_RemoveDocumentByName($collectionHandle, $documentName);





Description:

This function will remove all documents that match $documentName from the collection that was opened using the MongoDB_UseCollection function. The $documentName is the name that was given to the document in the MongoDB_UpdateDocument function when the document was added to the collection.





Remarks:

If there are multiple documents that have the same name and you need to remove only one of them, you need to use the MongoDB_RemoveDocumentById function.

The document ID can be found using the MongoDB_FindAllDocumentsByName function.

Function arguments



Parameter

Variable Type

Description



$collectionHandle

Object

A handle to a collection in the database that was previously opened with the MongoDB_UseCollection function.



$documentName

String

The name of the document(s) in the collection.





Return parameters



Parameter

Variable Type

Description



none





Example(s):

// Link to a database on a server.

$connectStr = "192.168.10.112:27017";

$dbName = "myDataBase";





$dbHandle = MongoDB_Connect($connectStr, $dbName);





// Link to a collection.

$collectStr = "myCollection";





$collectHandle = MongoDB_UseCollection($dbHandle, $collectStr);





// Remove a document.

$docName = "myDocument";

MongoDB_RemoveDocumentByName($collectHandle, $docName);





MongoDB_UpdateDocumentById

Previous Top Next



* * *



MongoDB_UpdateDocumentById



Usage:

MongoDB_UpdateDocumentById($collectionHandle, $documentId, $dataType, $documentData);





Description:

This function will update all existing documents that match $documentId.





Remarks:

If a document with this Id does not exist, an error will be generated.

There should be only one document with the Id. All Ids should be unique.

Function arguments



Parameter

Variable Type

Description



$collectionHandle

Object

A handle to a collection in the database that was previously opened with the MongoDB_UseCollection function.



$documentId

String

The Id of the document to update.



$dataType

String

The type of the data that is being stored. Valid entries are:

· Array

· Boolean

· Float

· Integer

· Object

· String



$documentData

Varies

The data to put into the collection in the database.





Return parameters



Parameter

Variable Type

Description



none





Example(s):

// Link to a database on a server.

$connectStr = "192.168.10.112:27017";

$dbName = "myDataBase";





$dbHandle = MongoDB_Connect($connectStr, $dbName);





// Link to a collection.

$collectStr = "myCollection";





$collectHandle = MongoDB_UseCollection($dbHandle, $collectStr);





// Put a new document into the collection.

$docType = GetVariableType($document);





MongoDB_UpdateDocumentById($collectHandle, $docId, $docType, $document);





MongoDB_UpdateDocumentByName

Previous Top Next



* * *



MongoDB_UpdateDocumentByName



Usage:

MongoDB_UpdateDocumentByName($collectionHandle, $documentName, $dataType, $documentData);





Description:

This function will update all existing documents that match $documentName or insert one new document if it does not exist in the collection.





Remarks:

If the database has multiple documents with the same name and you need to update one of them, use the MongoDB_UpdateDocumentById function.

Function arguments



Parameter

Variable Type

Description



$collectionHandle

Object

A handle to a collection in the database that was previously opened with the MongoDB_UseCollection function.



$documentName

String

The name of the document to update or insert.



$dataType

String

The type of the data that is being stored. Valid entries are:

· Array

· Boolean

· Float

· Integer

· Object

· String



$documentData

Varies

The data to put into the collection in the database.





Return parameters



Parameter

Variable Type

Description



none





Example(s):

// Link to a database on a server.

$connectStr = "192.168.10.112:27017";

$dbName = "myDataBase";





$dbHandle = MongoDB_Connect($connectStr, $dbName);





// Link to a collection.

$collectStr = "myCollection";





$collectHandle = MongoDB_UseCollection($dbHandle, $collectStr);





// Put a new document into the collection.

$docName = "MyNewDocument";

$docType = GetVariableType($document);





MongoDB_UpdateDocumentByName($collectHandle, $docName, $docType, $document);





MongoDB_UseCollection

Previous Top Next



* * *



MongoDB_UseCollection



Usage:

$collectionHandle = MongoDB_UseCollection($databaseHandle, $collectionName);





Description:

This function will create a connection to the specified collection within the database specified in the $databaseHandle that was opened using the MongoDB_Connect function.

This function can be used multiple times on the same database to open handles to multiple collections.

Function arguments



Parameter

Variable Type

Description



$databaseHandle

Object

The handle to the database that was previously opened using the MongoDB_Connect function.



$collectionName

String

The name of the collection to connect to within the database.





Return parameters



Parameter

Variable Type

Description



$collectionHandle

Object

A link to the collection within the database that can be passed to the functions for retrieving or manipulating the data.





Example(s):

// Link to a database on a server.

$connectStr = "192.168.10.112:27017";

$dbName = "myDataBase";





$dbHandle = MongoDB_Connect($connectStr, $dbName);





// Link to a collection.

$collectStr = "myCollection";





$collectHandle = MongoDB_UseCollection($dbHandle, $collectStr);





DateAddTime

Previous Top Next



* * *



DateAddTime



Usage:

$newDate = DateAddTime($oldDate, $days, $hours, $minutes, $seconds);



Description:

This function will add the specified number of days, hours, minutes and seconds to the given date/time.



Remarks:

Uses the DateTime class formatting for all date/time strings.



Function arguments



Parameter

Variable Type

Description



$oldDate

String

Starting date/time (must be a valid DateTime string).



$days

Integer

The number of days to add.



$hours

Integer

The number of hours to add.



$minutes

Integer

The number of minutes to add.



$seconds

Integer

The number of seconds to add.





Return parameters



Parameter

Variable Type

Description



$newDate

String

The new date/time result from adding all parameters to the old date/time (returned in DateTime format).





Example:





// Set up the old date and the times to add.

$oldDate = "12/23/2009 10:39:18 AM";

$days = 2;

$hours = 1;

$minutes = 0;

$seconds = 44;



// Calculate and display the new date/time.

$newDate = DateAddTime($oldDate, $days, $hours, $minutes, $seconds);



$outString = "New Date and Time = " + $newDate;

UpdateStatus($outString);





DateParse

Previous Top Next



* * *



DateParse



Usage:

($month, $day, $year, $hour, $minute, $second, $dayOfWeek) = DateParse($dateTime);



Description:

This function will parse the supplied DateTime and return the results in individual variables.



Remarks:

Uses the DateTime class formatting for all date/time strings.



Function arguments



Parameter

Variable Type

Description



$dateTime

String

The date/time (must be a valid DateTime string).





Return parameters



Parameter

Variable Type

Description



$month

Integer

The parsed month (1 = January, 12 = December).



$day

Integer

The parsed day of the month (1 - 31).



$year

Integer

The parsed year in 4-digit format.



$hour

Integer

The parsed hour (0 - 23).



$minute

Integer

The parsed minute (0 - 59).



$second

Integer

The parsed second (0 - 59).



$dayOfWeek

Integer

The parsed day of the week (1 = Sunday, 7 = Saturday).





Example:





// Set up a date and time to parse.

$dateToParse = "12/23/2009 10:39:18 AM";



// Parse and display the date/time components.

($month, $day, $year, $hour, $minute, $second, $dayOfWeek) = DateParse($dateToParse);



$outString = "Date and Time:\r\n\tMonth =\t\t" + $month;

UpdateStatus($outString);

$outString = "\tDay =\t\t" + $day;

UpdateStatus($outString);

$outString = "\tYear =\t\t" + $year;

UpdateStatus($outString);

$outString = "\tHour =\t\t" + $hour;

UpdateStatus($outString);

$outString = "\tMinute =\t\t" + $minute;

UpdateStatus($outString);

$outString = "\tSecond =\t\t" + $second;

UpdateStatus($outString);

$outString = "\tDay of Week =\t" + $dayOfWeek;

UpdateStatus($outString);





DateParseISO

Previous Top Next



* * *



DateParseISO



Usage:

($month,$day,$year,$hour,$minute,$second,$dayOfWeek,$weekOfYear) = DateParseISO($dateTime,$FirstDayOfWeek,$WeekOfYearMethod);





Description:

Uses DateTime class formatting for all date/time strings.

Parses out the supplied DateTime string and returns the results in individual variables.

The parameters for specifying the first day of the week, and the Week of Year Method are used to determine the value returned for the $weekOfYear variable. These two parameters are used to determine week 1 of the year.





Note: The day of week is returned in ISO 8601 format (1 = Monday, 7 = Sunday) regardless of the argument pass in for the $FirstDayOfWeek Function arguments



Parameter

Variable Type

Description



$dateTime

String

Date/time (must be valid DateTime string).



$FirstDayOfWeek

String

Specifies the first day of the week to be used in the calulcation for the week of the year. Allowable values include:

· "MONDAY"

· "TUESDAY"

· "WEDNESDAY"

· "THURSDAY"

· "FRIDAY"

· "SATURDAY"

· "SUNDAY"



$WeekOfYearMethod

String

Specifies the method for determining the first week of the year. Allowable values include:

· "FIRSTDAY"

· "FIRSTFOURDAYWEEK"

· "FIRSTFULLWEEK"





Return parameters



Parameter

Variable Type

Description



$month

Integer

Month (January = 1, December = 12)



$day

Integer

Day of month (1 - 31)



$year

Integer

Year in 4-digit format



$hour

Integer

Hour of day (0 - 23)



$minute

Integer

Minute of hour ( 0 - 59)



$second

Integer

Second of minute (0 - 59)



$dayOfWeek

Integer

Day of the week (Monday = 1, Sunday = 7)



$WeekOfYear

Integer

The week of the year. Note that the value of this parameter is determined by the function arguments passed in for the $FirstDayOfWeek and





Example:





($month,$day,$year,$hour,$minute,$second,$DayOfWeek,$WeekOfYear)= DateParseISO("11/11/2010 2:35:01 pm","SUNDAY","FIRSTFOURDAYWEEK");

UpdateStatus($month);

UpdateStatus($day);

UpdateStatus($year);

UpdateStatus($minute);

UpdateStatus($second);

UpdateStatus($DayOfWeek);

UpdateStatus($WeekOfYear);





GetSystemTicks

Previous Top Next



* * *



GetSystemTicks

Usage:

$Ticks = GetSystemTicks();

Description:

Returns the number of System Ticks that have occured since since 12:00:00 midnight, January 1, 0001. A system tick is 100 nanoseconds.

Function Arguments



Parameter

Variable Type

Description



None





Return Parameters



Parameter

Variable Type

Description



$Ticks

Integer

The number of system ticks.





GetSystemTime

Previous Top Next



* * *



GetSystemTime



Usage:

$currentTime = GetSystemTime();





Description:

Uses DateTime class formatting for all date/time strings.

Returns the current local system time.

Function arguments



Parameter

Variable Type

Description



None

-

-





Return parameters



Parameter

Variable Type

Description



$currentTime

String

Current local system time (returned in DateTime format).





Example:





$currentTime = GetSystemTime();

UpdateStatus($currentTime);





Output:

12/23/2009 10:39:18 AM





GetSystemTimeWithFormat

Previous Top Next



* * *



GetSystemTimeWithFormat



Usage:

$timeString = GetSystemTimeWithFormat($formatString);



Description:

This function returns the current system time in a the specified format.



Remarks:

The format string consists of the following parts:



Character Return Description

y Year Display the characters for the year. yy = 16, yyyy = 2016

M Month Display the characters for the month. M = 8, MM = 08, MMM = Aug, MMMM = August

d Day Display the characters for the day. d = 1, dd = 01, ddd = Fri, dddd = Friday

h Hour (12 hour) Display the characters for the hour in a 12 hour format. h = 6, hh = 06

H Hour (24 hour) Display the characters for the hour in a 24 hour format. H = HH = 16

m Minutes Display the characters for the minutes. m = 5, mm = 05

s Seconds Display the characters for the seconds. s = 9, ss = 09

f Second Fraction Display the characters for the fraction of a second. f = 6, ff = 61, fff = 610, etc.

F Second Fraction Display the characters for the fraction of a second - no trailing zeros. F = 6, FF = 61, FFF = 61, etc.

t AM/PM Display the characters for AM / PM. t = P, tt = PM

z Time Zone Display the characters for the Time Zone. z = -4, zz = -04, zzz = -04:00





Function arguments



Parameter

Variable Type

Description



$formatString

String

The format to return the time in the string. See the table above for the format.





Return parameters



Parameter

Variable Type

Description



$timeString

String

The current system time in the requested format.





Example:





// Return the system time in the example format of "06/30/2016 4:07:21.1234 PM".

$format = "MM/dd/yyyy h:mm:ss.ffff tt";



$time = GetSystemTimeWithFormat($format);



// Print out the time.

$outString = "The current time is: " + $time;

UpdateStatus($outString);





GetTimeSpan

Previous Top Next



* * *



GetTimeSpan

Usage:

($Days,$Hours,$Minutes,$Seconds,$Milliseconds) = GetTimeSpan($Date1,Date2);

Description:

This function returns the difference in Days, Hours, Minutes, Seconds, and Milliseconds between two dates. Each measurement is the total number. Date Strings can be retrieved using the GetUTCTime function.

Function Arguments



Parameter

Variable Type

Description



$Date1

String

A date string in a parseable format.



$Date2

String

A date string in a parseable format.





Return Parameters



Parameter

Variable Type

Description



$Days

Float

The number of days returned as a floating point number



$Hours

Float

The number of hours returned as a floating point number



$Minutes

Float

The number of minutes returned as a floating point number.



$Seconds

Float

The number of seconds returned as a floating point number.



$Milliseconds

Float

The number of milliseconds returned as a floating point number.





GetTimeZone

Previous Top Next



* * *



GetTimeZone

Usage:

($TimeZoneName,$TimeZoneOffSet,$IsDaylightSavings) = GetTimeZone();

Description:

This function returns the Computer's current time zone to the scripting language.

Function Arguments



Parameter

Variable Type

Description



None





Return Parameters



Parameter

Variable Type

Description



$TimeZoneName

String

The international name of the current time zone returned as a string.



$TimeZoneOffSet

Integer

The time offset from UTC returned as a integer.



$IsDaylightSavings

Boolean

A boolean value that contains whether or not the current time zone is in a Daylight savings period.





GetUTCTime

Previous Top Next



* * *



GetUTCTime

Usage:

$UTCTime = GetUTCTime();

Description:

Returns the current system time to a text string.

Function Arguments



Parameter

Variable Type

Description



None





Return Parameters



Parameter

Variable Type

Description



$UTCTime

String

Returns the Current Time in a string.





GetWeekOfYear

Previous Top Next



* * *



GetWeekOfYear

Usage:

($Week,$Year) = GetWeekOfYear();

Description:

Returns the week of the year and the year.

Note: that this function calculates the week of the year based on the first day of the year. For alternative methods for calculating the week of the year, see the 'DateParseISO' function.

Function Arguments



Parameter

Variable Type

Description



None





Return Parameters



Parameter

Variable Type

Description



$Week

Integer

The week of the year.



$Year

Integer

The year





StopwatchControl

Previous Top Next



* * *



StopwatchControl



Usage:

StopwatchControl($swHandle, $functionType);





Description:

Controls the timer functionality of a stopwatch created with the StopwatchCreate() function.



Function Arguments





Parameter



Variable Type

Description



$swHandle

Object

Handle to stopwatch created with the StopwatchCreate() function.



$functionType

String

Type of function to perform on the stopwatch:





· "START" - starts the timer.

· "STOP" - stops the timer. All time values remain constant until the stopwatch is restarted or reset.

· "RESET" - stops the timer and resets the elapsed time.





Return Parameters





Parameter



Variable Type

Description



None

--





Example:

StopwatchControl($timer, "START"); //start timer

SleepMilliseconds(9000); //wait

StopwatchControl($timer, "STOP"); //stop timer





StopwatchControl($timer, "RESET"); //reset timer - stops timer and sets all values to 0





StopwatchCreate

Previous Top Next



* * *



StopwatchCreate



Usage:

$swHandle= StopwatchCreate();





Description:

Creates an instance of a stopwatch timer. The stopwatch can be used to track elapsed time to millisecond precision.



Function Arguments





Parameter



Variable Type

Description



None

--





Return Parameters





Parameter



Variable Type

Description



$swHandle

Object

Handle to stopwatch created used by other functions.





Example:

$timer = StopwatchCreate();





StopwatchQuery

Previous Top Next



* * *



StopwatchQuery



Usage:

$returnTime = StopwatchQuery($swHandle, $returnType);





Description:

Queries a stopwatch, returning the total time elapsed between a START and STOP command in the requested format. If no STOP has been issues, the total time elapsed between a START command and this function call is returned.



Function Arguments





Parameter



Variable Type

Description



$swHandle

Object

Handle to stopwatch created with the StopwatchCreate() function.



$returnType

String

Format of the elapsed time to return:





· "SECONDS" - returns the total time elapsed in fractional seconds.

· "MILLISECONDS" - returns the total time elapsed in whole milliseconds.

· "TICKS" - returns the amount of ticks elapsed. These ticks are based off of the processor frequency and are NOT the same as the DateTime function ticks (which are exactly 100ns).





Return Parameters





Parameter



Variable Type

Description



$returnTime

Float

Total elapsed time in the format specified by the $returnType argument.





Example:

$timeSec = StopwatchQuery($timer, "SECONDS"); //get elapsed time in seconds

$timeMS = StopwatchQuery($timer, "MILLISECONDS"); //get elapsed time in milliseconds





UpdateStatus("\nSTOPWATCH:");

UpdateStatus($timeSec);

UpdateStatus($timeMS);





SystemTime

Previous Top Next



* * *



SystemTime

Usage:

($month,$day,$year,$hour,$min,$sec,$dayOfWeek) = SystemTime();

Description:

Returns the current system time to an array of script variables.

Function Arguments



Parameter

Variable Type

Description



None





Return Parameters



Parameter

Variable Type

Description



$month

Integer

The current month of the year (January = 1, December = 12)



$day

Integer

The current day of the month (1-31)



$year

Integer

The current year in 4-digit format.



$hour

Integer

The current hour (0-23)



$min

Integer

The current minute (0-59)



$sec

Integer

The current second (0-59)



$dayOfWeek

Integer

The current day of the week (Sunday = 1, Saturday = 7)





Dictionary_CheckKeyExists

Previous Top Next



* * *



Dictionary_CheckKeyExists



Usage:

$KeyExists = Dictionary_CheckKeyExists($Dictionary,$Key);

Description:



This function checks the dictionary to see if a given key is present. If the key is present in the dictionary, the function returns TRUE. If the key isn't found in the dictionary, this function returns false.

Function arguments



Parameter

Variable Type

Description



$Dictionary

Object

The dictionary object created using the Dictionary_Create function



$Key

Various

The key of the value to retrieve from the dictionary. The key can be any type of object and simply points to the given value inside of the dictionary.





Return parameters



Parameter

Variable Type

Description



$KeyExists

Boolean

This value will be set to 'True' or 'False' depending on if the key is present in the given dictionary.





Usage Example:

$Result1 = Dictionary_CheckKeyExists($Dictionary,1);





Dictionary_Create

Previous Top Next



* * *



Dictionary_Create



Usage:

$Dictionary = Dictionary_Create();

Description:



This function creates a new dictionary which can be used to store and retrieve key/value pairs from the Jabil Test scripting language. The key can be any object type (integer, string, float, object) and the values stored can also be any type of object. This dictionary is thread-safe and can be shared safely between multiple test cells.





The $Dictionary object returns is internally implemented as a .Net Generic<object,object> generic collection.





Function arguments



Parameter

Variable Type

Description



None





Return parameters



Parameter

Variable Type

Description



$Dictionary

Object

This function returns the newly created, empty dictionary.





Usage Example:

$Dictionary = Dictionary_Create();

Dictionary_SetValue($Dictionary,1,5);

Dictionary_SetValue($Dictionary,2,10);

Dictionary_SetValue($Dictionary,"MyKey","Here is a value");

Dictionary_SetValue($Dictionary,"MyOtherKey",190);





Dictionary_GetValue

Previous Top Next



* * *



Dictionary_GetValue



Usage:

$MyValue = Dictionary_GetValue($Dictionary,$Key);

Description:



This function returns the value pointed to by the $Key argument supplied to the function. If the given key isn't present in the dictionary, the function returns a failure.





Function arguments



Parameter

Variable Type

Description



$Dictionary

Object

The dictionary object created using the Dictionary_Create function.



$Key

Various

The key pointing to a given value inside of the dictionary.





Return parameters



Parameter

Variable Type

Description



$Value

Various

The value pointed to by the given key in the dictionary.





Usage Example:

$Value1 = Dictionary_GetValue($Dictionary,1);

$Value2 = Dictionary_GetValue($Dictionary,2);

$Value1 = Dictionary_GetValue($Dictionary,"MyKey1");

$Value2 = Dictionary_GetValue($Dictionary,"MyKey2");





Dictionary_RemoveValue

Previous Top Next



* * *



Dictionary_RemoveValue



Usage:

Dictionary_RemoveValue($Dictionary,$Key);

Description:



This function deletes the key/value entry pointed to by the $Key argument supplied to the function. If the given key isn't present in the dictionary, the function returns a failure.





Function arguments



Parameter

Variable Type

Description



$Dictionary

Object

The dictionary object created using the Dictionary_Create function.



$Key

Various

The key pointing to a given value inside of the dictionary.





Return parameters



Parameter

Variable Type

Description



None

--





Usage Example:

$Dictionary = Dictionary_Create();

Dictionary_SetValue($Dictionary,"TESTKEY","TESTVALUE");





$KeyExists = Dictionary_CheckKeyExists($Dictionary,"TESTKEY");

if($KeyExists)

{

$MyValue = Dictionary_GetValue($Dictionary,"TESTKEY");

UpdateStatus($MyValue);

}





Dictionary_RemoveValue($Dictionary,"TESTKEY");

$KeyExists = Dictionary_CheckKeyExists($Dictionary,"TESTKEY");

if(!$KeyExists)

{

UpdateStatus("Key not found!");

}





Dictionary_SetValue

Previous Top Next



* * *



Dictionary_SetValue



Usage:

Dictionary_SetValue($Dictionary,$Key,$Value);

Description:



This function sets the given $Key in the dictionary to the value supplied to the function. If the key is already present in the dictionary, the value is replaced by the new value. If the given key is not already present in the dictionary, it is added automatically.





The $Key and $Value arguments can be any object type.





Function arguments



Parameter

Variable Type

Description



$Dictionary

Object

The dictionary object created using the Dictionary_Create function.



$Key

Various

The key pointing to a given value inside of the dictionary.



$Value

Various

The value pointed that will be pointed to by the given key.





Return parameters



Parameter

Variable Type

Description



None





Usage Example:

SetTestName("Dictionary Function Test");

$Dictionary = Dictionary_Create();

Dictionary_SetValue($Dictionary,1,5);

Dictionary_SetValue($Dictionary,2,10);



// Make Sure the Keys Were Stored

$Result1 = Dictionary_CheckKeyExists($Dictionary,1);

$Result2 = Dictionary_CheckKeyExists($Dictionary,2);

if ($Result1 == false || $Result2 == false)

{

Fail("Dictionary Keys Were Not Stored Successfully.");

}

// Test Retreiving the Keys

$Value1 = Dictionary_GetValue($Dictionary,1);

$Value2 = Dictionary_GetValue($Dictionary,2);

$Value3 = $Value1 + $Value2;

if ($Value3 != 15)

{

Fail("Dictionary Keys Were Not Successfully Retrieved.");

}

// OK, Now Let's Work with Strings

Dictionary_SetValue($Dictionary,"MyKey1","This is a good ");

Dictionary_SetValue($Dictionary,"MyKey2","Test");

$Value1 = Dictionary_GetValue($Dictionary,"MyKey1");

$Value2 = Dictionary_GetValue($Dictionary,"MyKey2");

$Value3 = StringCat($Value1,$Value2);

if ($Value3 != "This is a good Test")

{

Fail("Dictionary Keys (using Strings) Were Not Successfully Retreived.");

}

RecordMeasurement("Dictionary Function Validation","PASSED","PASS/FAIL","FALSE");

return;





DAS_EnableAbortButton

Previous Top Next



* * *



DAS_EnableAbortButton



Usage:

DAS_EnableAbortButton($Enabled);



Description:





This function disables or enables the abort button on the DAS user interface. The abort button is available for use whenever the DAS script is waiting for user interaction via the DAS_PromptForUserNavigation or DAS_PromptForUserInput functions.





Important Notes:

· In order to use this function the DAS panel visibility must be set to 'TRUE'. See the DAS_SetDASPanelVisibility function for more details.

· When a user clicks on the Abort button - the running test script is Aborted. Normal running of the script is stopped and the finalize function is run if it has been enabled with the SetFinalizeFunction script function. After that the script will end and the status of the test cell will be set to Abort.

Function arguments



Parameter

Variable Type

Description



$Enabled

Boolean

A boolean value indicating whether or not the Abort Button Should be active on the DAS window.





Return parameters



Parameter

Variable Type

Description



None





Usage Example:





DAS_EnableAbortButton(true);





DAS_EnableFailButton

Previous Top Next



* * *



DAS_EnableFailButton



Usage:

DAS_EnableFailButton($Enabled);



Description:





This function disables or enables the fail button on the DAS user interface. The fail button is available for use whenever the DAS script is waiting for user interaction via the DAS_PromptForUserNavigation or DAS_PromptForUserInput functions.





Important Notes:

· In order to use this function the DAS panel visibility must be set to 'TRUE'. See the DAS_SetDASPanelVisibility function for more details.

· When a user clicks on the Fail button - the running test script is Stopped. Normal running of the script is stopped and the fail function is run if it has been enabled with the SetFailFunction script function (followed by the finalize function if that has been enabled with the SetFinalizeFunction script function). After that the script will end and the status of the test cell will be set to Fail.

Function arguments



Parameter

Variable Type

Description



$Enabled

Boolean

A boolean value indicating whether or not the Fail Button Should be active on the DAS window.





Return parameters



Parameter

Variable Type

Description



None





Usage Example:





DAS_EnableFailButton(true);





DAS_EnablePreviousButton

Previous Top Next



* * *



DAS_EnablePreviousButton



Usage:

DAS_EnablePreviousButton($Enabled);



Description:





This function disables or enables the previous button on the DAS user interface. The previous button is available for use whenever the DAS script is waiting for user interaction via the DAS_PromptForUserNavigation or DAS_PromptForUserInput functions.





Important Note: In order to use this function the DAS panel visibility must be set to 'TRUE'. See the DAS_SetDASPanelVisibility function for more details.

Function arguments



Parameter

Variable Type

Description



$Enabled

Boolean

A boolean value indicating whether or not the Previous Button Should be active on the DAS window.





Return parameters



Parameter

Variable Type

Description



None





Usage Example:





DAS_EnablePreviousButton(true);





DAS_PromptForUserInput

Previous Top Next



* * *



DAS_PromptForUserInput



Usage:

($NavigationType,$UserInput) = DAS_PromptForUserInput($NextLocation,$PreviousLocation);



Description:





This function blocks further script execution until the user enters a value into the user input window, and clicks a navigation button on the DAS form (either NEXT or PREVIOUS).





The $NextLocation argument provides a string label location where the test script execution will proceed in the event that the user clicks the 'Next Button'. If the argument is left blank, the script execution continues at the next line of the test script immediately following the DAS_PromptForUserNavigation command.





The $PreviousLocation argument provides a string label location where the test script execution will proceed in the event that the user clicks the 'Previous Button'. If the argument is left blank, the script execution continues at the next line of the test script immediately following the DAS_PromptForUserNavigation command.





The user supplied input is returned to the test script as a return value of the function.





Important Note: In order to use this function the DAS panel visibility must be set to 'TRUE'. See the DAS_SetDASPanelVisibility function for more details.

Function arguments



Parameter

Variable Type

Description



$NextLocation

String

A string value containing the label name in the script where to continue execution in the event that the user clicks the 'Next Location' button. If the argument is left blank, the script continues execution at the next line of script code.



$PreviousLocation

String

A string value containing the label name in the script where to continue execution in the event that the user clicks the 'Previous Location' button. If the argument is left blank, the script continues execution at the next line of script code.





Return parameters



Parameter

Variable Type

Description



$NavigationType

String

Returns the navigation event selected by the user. Possible values are:

· "Next"

· "Previous"



$UserInput

String

A string containing the value entered by the user. This value can then be tested for against a valid range, or recorded using the RecordMeasurementXXX functions.





Usage Example:





// Set up the document to show the user and give instructions.

BrowserSetDocument("c:\\perf 1.pdf");

DAS_SetDASPanelVisibility(true);

DAS_SetInstructionsFontSize(25);

DAS_SetInstructions("Please Enter A Measurement Value");





// Now wait for the input from the user.

($NavType, $UserInput) = DAS_PromptForUserInput("", "");





DAS_PromptForUserNavigation

Previous Top Next



* * *



DAS_PromptForUserNavigation



Usage:

$NavigationType = DAS_PromptForUserNavigation($NextLocation,$PreviousLocation);



Description:





This function blocks further script execution until the user clicks a navigation button on the DAS form (either NEXT or PREVIOUS).





The $NextLocation argument provides a string label location where the test script execution will proceed in the event that the user clicks the 'Next Button'. If the argument is left blank, the script execution continues at the next line of the test script immediately following the DAS_PromptForUserNavigation command.





The $PreviousLocation argument provides a string label location where the test script execution will proceed in the event that the user clicks the 'Previous Button'. If the argument is left blank, the script execution continues at the next line of the test script immediately following the DAS_PromptForUserNavigation command.





Important Note: In order to use this function the DAS panel visibility must be set to 'TRUE'. See the DAS_SetDASPanelVisibility function for more details.

Function arguments



Parameter

Variable Type

Description



$NextLocation

String

A string value containing the label name in the script where to continue execution in the event that the user clicks the 'Next Location' button. If the argument is left blank, the script continues execution at the next line of script code.



$PreviousLocation

String

A string value containing the label name in the script where to continue execution in the event that the user clicks the 'Previous Location' button. If the argument is left blank, the script continues execution at the next line of script code.





Return parameters



Parameter

Variable Type

Description



$NavigationType

String

Returns the navigation event selected by the user. Possible values are:

· "Next"

· "Previous"





Usage Example:





Automatic Navigation Example





UpdateStatus("Start Example Script");





Label ZeroStep:

SetTestName("Step 0");

DAS_SetDASPanelVisibility(true); //Make the DAS Panel visible

DAS_SetInstructions("Step 0");

DAS_EnablePreviousButton(false);

BrowserSetDocument("c:\\dasstuff\\das0.jpg"); //Put picture in panel

SetCellViewMode("BROWSER"); //View the Browser tab

DAS_PromptForUserNavigation("", "");





Label FirstStep:

SetTestName("Step 1");

DAS_SetInstructions("Step 1");

DAS_EnablePreviousButton(true);

BrowserSetDocument("c:\\dasstuff\\das1.jpg");

DAS_PromptForUserNavigation("", "ZeroStep");





Label SecondStep:

SetTestName("Step 2");

DAS_SetInstructions("Step 2");

DAS_EnablePreviousButton(true);

BrowserSetDocument("c:\\dasstuff\\das2.jpg");

DAS_PromptForUserNavigation("", "FirstStep");





Label ThirdStep:

SetTestName("Step 3");

DAS_SetInstructions("Step 3");

DAS_EnablePreviousButton(true);

BrowserSetDocument("c:\\dasstuff\\das3.jpg");

DAS_PromptForUserNavigation("", "SecondStep");





Label FourthStep:

SetTestName("Step 4");

DAS_SetInstructions("Step 4");

DAS_EnablePreviousButton(true);

BrowserSetDocument("c:\\dasstuff\\das4.jpg");

DAS_PromptForUserNavigation("", "ThirdStep");





Label FifthStep:

SetTestName("Step 5");

DAS_SetInstructions("Step 5");

DAS_EnablePreviousButton(true);

BrowserSetDocument("c:\\dasstuff\\das5.jpg");

DAS_PromptForUserNavigation("", "FourthStep");





DAS_SetDASPanelVisibility(false); //Hide the DAS Panel

End;





Manual Navigation Example





$NavType = DAS_PromptForUserNavigation("", "");

If ($NavType == "Previous")

{

goto LastStepLocation;

}





DAS_SetDASPanelVisibility

Previous Top Next



* * *



DAS_SetDASPanelVisibility



Usage:

DAS_SetDASPanelVisibility($IsVisibile);



Description:





This function sets the visibility of the DAS panel. In order to use the other DAS specific functions, the DAS panel must be visible.





Note: You must be on the Browser View tab of the test cell to see the DAS panel. You can use the Browser View functions to change the document displayed under the panel.

Function arguments



Parameter

Variable Type

Description



$IsVisible

Boolean

The property that specifies whether or not the DAS prompt panel is visible inside of the Browser View window on the main Jabil Test cell Panel.





Return parameters



Parameter

Variable Type

Description



None





Usage Example:

DAS_SetDASPanelVisibility(true);





DAS_SetInstructions

Previous Top Next



* * *



DAS_SetInstructions



Usage:

DAS_SetInstructions($Instructions);



Description:





This function sets the text in the instruction window displayed on the DAS form to the value contained by the $Instructions argument.





Important Note: In order to use this function the DAS panel visibility must be set to 'TRUE'. See the DAS_SetDASPanelVisibility function for more details.

Function arguments



Parameter

Variable Type

Description



$Instructions

String

The instructions to be displayed to the user along with the selected visual aid value.





Return parameters



Parameter

Variable Type

Description



None





Usage Example:





DAS_SetInstructions("Step 1: Configure Switches, Record DMM Current Measurement");





DAS_SetInstructionsFontSize

Previous Top Next



* * *



DAS_SetInstructionsFontSize



Usage:

DAS_SetInstructionsFontSize($FontSize);



Description:





This function sets the text font size in the instruction window displayed on the DAS form to the value contained by the $FontSize argument.





Important Note: In order to use this function the DAS panel visibility must be set to 'TRUE'. See the DAS_SetDASPanelVisibility function for more details.

Function arguments



Parameter

Variable Type

Description



$FontSize

Integer

The font size specified in points for the instruction text displayed to the test operator.





Return parameters



Parameter

Variable Type

Description



None





Usage Example:

DAS_SetInstructionsFontSize(25);





DAS_SetInstructionWindowHeight

Previous Top Next



* * *



DAS_SetInstructionWindowHeight



Usage:

DAS_SetInstructionWindowHeight($WindowHeight);



Description:





This function sets the vertical window height of the instruction window displayed on the DAS form to the value contained by the $WindowHeight argument. The window height is specified in pixels.





The Instruction panel window will be resized automatically and adjust to the new instruction window size.





Important Note: In order to use this function the DAS panel visibility must be set to 'TRUE'. See the DAS_SetDASPanelVisibility function for more details.

Function arguments



Parameter

Variable Type

Description



$WindowHeight

Integer

The height specified in pixels of the instruction window on the DAS form.





Return parameters



Parameter

Variable Type

Description



None





Usage Example:

DAS_SetInstructionWindowHeight(200);





DAS_AddProcessMeasurementStep

Previous Top Next



* * *



DAS_AddProcessMeasurementStep



Usage:

DAS_AddProcessMeasurementStep($AssemblyProcess,$ProcessStepName,$StepType,$TextOrURL,$MeasurementPrompt,$VariableName);

Description:



This function adds a new assembly step to an existing assembly process which has been created using the DAS_CreateProcess function.





An Assembly step is given a name, and can be either a text based assembly step,graphical assembly step, or a document assembly step. If the assembly step uses a text string to instruct the operator, then the fourth parameter is a string containing the text to describe the operation required to the operator. If the assembly step is using a graphic to display an image to the operator, the fourth parameter is the file path or URL to the image to be displayed.





If a document assembly step is used, the $TextOrURL parameter should be the path to the document. Documents can be any document that Internet Explorer can handle such as PDF, Office Documents, etc.





After all the process steps have been added, the process can be displayed to the user by using the DAS_DisplayProcess function.





In addition to prompting the operator, this function also provides a pop-up prompt allowing the test operator to enter a value into the form along with a description which is supplied by the $MeasurementPrompt argument.





The value that the operator enters into the form is stored in the variable name specified by the $VariableName argument.





Important Note:

If you add an assembly step with the StepType set to document, a web browser control is used to display the document to the operator. In order for this control to function properly. Jabil Test must be configured to use a Single-Threaded Apartment model. This is not the default setting of Jabil Test, so it will be necessary to change the system threading mode using in the Global Cell Options dialog which can be accessed from the main pull-down menu.





Note concerning using an Adobe PDF file as a process step:





If you are using an Adobe PDF file as a process step when you have the step type argument set to 'DOCUMENT', you can open the PDF document to a specific page by using the following syntax:





DAS_AddProcessStep($MyProcess,"PDF Page Example","DOCUMENT","c:\\example.pdf#Page=2");





Function arguments



Parameter

Variable Type

Description



$AssemblyProcess

Object

The assembly process which has been created using the DAS_CreateProcess command.



$ProcessStepName

String

The process step name



$StepType

String

A string containing whether the assembly step will display a text string or a graphical image to the operator. Allowable values are:

· "TEXT"

· "IMAGE"

· "DOCUMENT"



$TextOrURL

String

The text string to display to the operator, or a text string containing the file path or URL to the image to be displayed.



$MeasurementPrompt

String

The text shown to the operator on the Measurement Prompt form.



$VariableName

String

The name of the variable to which the operator supplied value is stored.





Return parameters



Parameter

Variable Type

Description



None





Usage Example:





$MyProcess = DAS_CreateProcess("Assembly Process","TRUE");

DAS_AddProcessStep($MyProcess,"Assembly Process 1","TEXT","This is an assembly Process");

DAS_AddProcessStep($MyProcess,"Assembly Process 2","TEXT","This is an another assembly Process!");

DAS_AddProcessStep($MyProcess,"Another Assembly Process","IMAGE","c:\\server.jpg");

DAS_AddProcessStep($MyProcess,"Another Assembly Process","IMAGE","c:\\instr1.gif");

DAS_AddProcessStep($MyProcess,"PDF Assembly Process","DOCUMENT","c:\\dxf.pdf");

DAS_AddProcessMeasurementStep($MyProcess,"New Measurement Process","TEXT","DO SOME STUFF, AND ENTER THE MEASUREMENT","RECORD VALUE FROM Frequency Counter","myMeasurement");

DAS_AddProcessMeasurementStepWithLimits($MyProcess,"New Measurement Process","TEXT","DO SOME STUFF, AND ENTER THE MEASUREMENT","RECORD VALUE FROM Frequency Counter","myMeasurement",100,200);





DAS_DisplayProcess($MyProcess);





DAS_AddProcessMeasurementStepWithLimits

Previous Top Next



* * *



DAS_AddProcessMeasurementStepWithLimits

Usage:

DAS_AddProcessMeasurementStepWithLimits($AssemblyProcess,$ProcessStepName,$StepType,$TextOrURL,$MeasurementPrompt,$VariableName,$LowerLimit,$UpperLimit);

Description:



This function adds a new assembly step to an existing assembly process which has been created using the DAS_CreateProcess function.





An Assembly step is given a name, and can be either a text based assembly step,graphical assembly step, or a document assembly step. If the assembly step uses a text string to instruct the operator, then the fourth parameter is a string containing the text to describe the operation required to the operator. If the assembly step is using a graphic to display an image to the operator, the fourth parameter is the file path or URL to the image to be displayed.





If a document assembly step is used, the $TextOrURL parameter should be the path to the document. Documents can be any document that Internet Explorer can handle such as PDF, Office Documents, etc.





After all the process steps have been added, the process can be displayed to the user by using the DAS_DisplayProcess function.





In addition to prompting the operator, this function also provides a pop-up prompt allowing the test operator to enter a value into the form along with a description which is supplied by the $MeasurementPrompt argument.





The value that the operator enters into the form is stored in the variable name specified by the $VariableName argument. If the values supplied by the $LowerLimit or $UpperLimit parameters is exceeded by the operator entered measurement value, this function automatically generates a failing test.





Important Note:

If you add an assembly step with the StepType set to document, a web browser control is used to display the document to the operator. In order for this control to function properly. Jabil Test must be configured to use a Single-Threaded Apartment model. This is not the default setting of Jabil Test, so it will be necessary to change the system threading mode using in the Global Cell Options dialog which can be accessed from the main pull-down menu.





Note concerning using an Adobe PDF file as a process step:





If you are using an Adobe PDF file as a process step when you have the step type argument set to 'DOCUMENT', you can open the PDF document to a specific page by using the following syntax:





DAS_AddProcessStep($MyProcess,"PDF Page Example","DOCUMENT","c:\\example.pdf#Page=2");





Function arguments



Parameter

Variable Type

Description



$AssemblyProcess

Object

The assembly process which has been created using the DAS_CreateProcess command.



$ProcessStepName

String

The process step name



$StepType

String

A string containing whether the assembly step will display a text string or a graphical image to the operator. Allowable values are:

· "TEXT"

· "IMAGE"

· "DOCUMENT"



$TextOrURL

String

The text string to display to the operator, or a text string containing the file path or URL to the image to be displayed.



$MeasurementPrompt

String

The text shown to the operator on the Measurement Prompt form.



$VariableName

String

The name of the variable to which the operator supplied value is stored.



$LowerLimit

Float

The lower bound for the manually entered measurememt value.



$UpperLimit

Float

The upper bound for the manually entered measurement value.





Return parameters



Parameter

Variable Type

Description



None





Usage Example:





$MyProcess = DAS_CreateProcess("Assembly Process","TRUE");

DAS_AddProcessStep($MyProcess,"Assembly Process 1","TEXT","This is an assembly Process");

DAS_AddProcessStep($MyProcess,"Assembly Process 2","TEXT","This is an another assembly Process!");

DAS_AddProcessStep($MyProcess,"Another Assembly Process","IMAGE","c:\\server.jpg");

DAS_AddProcessStep($MyProcess,"Another Assembly Process","IMAGE","c:\\instr1.gif");

DAS_AddProcessStep($MyProcess,"PDF Assembly Process","DOCUMENT","c:\\dxf.pdf");

DAS_AddProcessMeasurementStep($MyProcess,"New Measurement Process","TEXT","DO SOME STUFF, AND ENTER THE MEASUREMENT","RECORD VALUE FROM Frequency Counter","myMeasurement");

DAS_AddProcessMeasurementStepWithLimits($MyProcess,"New Measurement Process","TEXT","DO SOME STUFF, AND ENTER THE MEASUREMENT","RECORD VALUE FROM Frequency Counter","myMeasurement",100,200);





DAS_DisplayProcess($MyProcess);





DAS_AddProcessStep

Previous Top Next



* * *



DAS_AddProcessStep



Usage:

DAS_AddProcessStep($AssemblyProcess,$ProcessStepName,$StepType,$TextOrURL);

Description:





This function adds a new assembly step to an existing assembly process which has been created using the DAS_CreateProcess function.





An Assembly step is given a name, and can be either a text based assembly step,graphical assembly step, or a document assembly step. If the assembly step uses a text string to instruct the operator, then the fourth parameter is a string containing the text to describe the operation required to the operator. If the assembly step is using a graphic to display an image to the operator, the fourth parameter is the file path or URL to the image to be displayed.





If a document assembly step is used, the $TextOrURL parameter should be the path to the document. Documents can be any document that Internet Explorer can handle such as PDF, Office Documents, etc.





After all the process steps have been added, the process can be displayed to the user by using the DAS_DisplayProcess function.





Important Note:

If you add an assembly step with the StepType set to document, a web browser control is used to display the document to the operator. In order for this control to function properly. Jabil Test must be configured to use a Single-Threaded Apartment model. This is not the default setting of Jabil Test, so it will be necessary to change the system threading mode using in the Global Cell Options dialog which can be accessed from the main pull-down menu.





Note concerning using an Adobe PDF file as a process step:





If you are using an Adobe PDF file as a process step when you have the step type argument set to 'DOCUMENT', you can open the PDF document to a specific page by using the following syntax:





DAS_AddProcessStep($MyProcess,"PDF Page Example","DOCUMENT","c:\\example.pdf#Page=2");

Function arguments



Parameter

Variable Type

Description



$AssemblyProcess

Object

The assembly process which has been created using the DAS_CreateProcess command.



$ProcessStepName

String

The process step name



$StepType

String

A string containing whether the assembly step will display a text string or a graphical image to the operator. Allowable values are:

· "TEXT"

· "IMAGE"

· "DOCUMENT"



$TextOrURL

String

The text string to display to the operator, or a text string containing the file path or URL to the image to be displayed.





Return parameters



Parameter

Variable Type

Description



None





Usage Example:





$MyProcess = DAS_CreateProcess("Assembly Process","TRUE");

DAS_AddProcessStep($MyProcess,"Assembly Process 1","TEXT","This is an assembly Process");

DAS_AddProcessStep($MyProcess,"Assembly Process 2","TEXT","This is an another assembly Process!");

DAS_AddProcessStep($MyProcess,"Another Assembly Process","IMAGE","c:\\server.jpg");

DAS_AddProcessStep($MyProcess,"Another Assembly Process","IMAGE","c:\\instr1.gif");

DAS_AddProcessStep($MyProcess,"PDF Assembly Process","DOCUMENT","c:\\dxf.pdf");

DAS_DisplayProcess($MyProcess);





DAS_CreateProcess

Previous Top Next



* * *



DAS_CreateProcess



Usage:

$MyProcess = DAS_CreateProcess($ProcessName,$AllowMovementToPreviousStep);

Description:





This function creates a new directed assembly process. The directed assembly process can consist of an unlimited number of individual steps which are displayed to the operator. The directed assembly functions can be used in place of the normal Operator Interaction functions in the event that an operator needs the ability to move forward and backward through a list of required online work instructions.





Once a new Directed Assembly Process is created using the DAS_CreateProcess function, new steps can be added using the DAS_AddProcessStep function. Finally, the complete process is displayed to the test operator by using the DAS_DisplayProcess script command.

Function arguments



Parameter

Variable Type

Description



$ProcessName

String

The name of the assembly process or sub-process



$AllowMovementToPreviousStep

Boolean

If this boolean argument is set to true, it allows the operator to move freely back and forth through the list of required assembly or test operations.





Return parameters



Parameter

Variable Type

Description



$MyProcess

Object

This returns a reference to the newly created assembly process. After the process is created, assembly steps must be added to the process by using the DAS_AddProcessStep command.





Usage Example:





$MyProcess = DAS_CreateProcess("Assembly Process","TRUE");

DAS_AddProcessStep($MyProcess,"Assembly Process 1","TEXT","This is an assembly Process");

DAS_AddProcessStep($MyProcess,"Assembly Process 2","TEXT","This is an another assembly Process!");

DAS_AddProcessStep($MyProcess,"Another Assembly Process","IMAGE","c:\\server.jpg");

DAS_AddProcessStep($MyProcess,"Another Assembly Process","IMAGE","c:\\instr1.gif");

DAS_DisplayProcess($MyProcess);





DAS_DisplayProcess

Previous Top Next



* * *



DAS_DisplayProcess



Usage:

DAS_DisplayProcess($Process);



Description:





This script function displays a previously created assembly process to the user. The assembly process is created using the DAS_CreateProcess function and populating it with assembly steps using the DAS_AddProcessStep function.





This command displays the graphical operator interface which will direct the operator through the list of assembly steps to be performed.





Function arguments



Parameter

Variable Type

Description



$Process

Object

The assembly process which has been created using the DAS_CreateProcess command.





Return parameters



Parameter

Variable Type

Description



None





Usage Example:





$MyProcess = DAS_CreateProcess("Assembly Process","TRUE");

DAS_AddProcessStep($MyProcess,"Assembly Process 1","TEXT","This is an assembly Process");

DAS_AddProcessStep($MyProcess,"Assembly Process 2","TEXT","This is an another assembly Process!");

DAS_AddProcessStep($MyProcess,"Another Assembly Process","IMAGE","c:\\server.jpg");

DAS_AddProcessStep($MyProcess,"Another Assembly Process","IMAGE","c:\\instr1.gif");

DAS_DisplayProcess($MyProcess);





DAS_DisplayProcessWithOptions

Previous Top Next



* * *



DAS_DisplayProcessWithOptions



Usage:

DAS_DisplayProcessWithOptions($Process,$WindowWidth,$WindowHeight,$SidePanelWidth,$Maximized);



Description:





This script function displays a previously created assembly process to the user. The assembly process is created using the DAS_CreateProcess function and populating it with assembly steps using the DAS_AddProcessStep function.





This command displays the graphical operator interface which will direct the operator through the list of assembly steps to be performed.





This command allows specifying the size of the DAS window, as well as the size of the process list panel inside of the window when it is displayed.





Function arguments



Parameter

Variable Type

Description



$Process

Object

The assembly process which has been created using the DAS_CreateProcess command.



$WindowWidth

Integer

The width of the DAS window in Pixels



$WindowHeight

Integer

The height of the DAS window in Pixels



$SidePanelWidth

Integer

The width of the DAS process list panel in Pixels



$Maximized

Boolean

A boolean value indicating whether or not the window should be opened as 'Maximized'. If this is set to true, the window is always shown full screen and the $WindowWidth and $WindowHeight properties are ignored.





Return parameters



Parameter

Variable Type

Description



None





Usage Example:





$MyProcess = DAS_CreateProcess("Assembly Process","TRUE");





DAS_AddProcessStep($MyProcess,"SHOW PDF FILE PAGE 2","DOCUMENT","c:\\a.pdf#Page=2");





DAS_DisplayProcessWithOptions($MyProcess,900,400,500,true);





DisplayFullScreenImage

Previous Top Next



* * *



DisplayFullScreenImage

Usage:

$formHandle = DisplayFullScreenImage($DisplayId,$FilePath);

Description:

Displays an a given image file full screen on a given display. In the event that the file, or the display doesn't exist, a failure is returned to the script interpreter.

This function supports JPB,BMP,GIF,PNG, and TIFF image files.

Note: The image will automatically close when the script execution has ended. In the event that you would like to close the image during script execution, you can use the CloseForm function.

Function Arguments



Parameter

Variable Type

Description



$DisplayId

Integer

The ID of the display on which you would like to display the image



$FilePath

String

The filename and path of the image file that you would like to display. Supported image types are JPG,BMP,GIF,PNG,TIFF





Return Parameters



Parameter

Variable Type

Description



$formHandle

Object

The handle to the image displayed.





DisplayPixelSelector

Previous Top Next



* * *



DisplayPixelSelector

Usage:

$PixelList = DisplayPixelSelector($DisplayID,$CursorRed,$CursorGreen,$CursorBlue,$BackgroundRed,$BackgroundGreen,$BackgroundBlue,$InstructionString,$DefectOptionString);

Note: This function displays a control panel on the default display running JabilTest, and generates a pixel selection area on an auxiliary monitor. In order to use this function, the PC running JabilTest must have multiple monitors installed and configured using the Display Properties of the Control Panel.

Description:

This function generates a Pixel Selection control panel which allows the user to choose a set of pixels on a given display. The pixels selected are returned as a semicolon delimited string containing X/Y coordinates. In the event that the $DefectOptionString contains a list of defects, the pixel list is returned with the operator specified defect in the particular location.

If the $DefectOptionString is populated with a semicolon delimited list of options, then a context menu will be displayed on each mouse click which allows the operator to choose one of the defects from the list. If the $DefectOptionString is an empty string, no context menu will be displayed and only the X/Y pixel coordinates are turned in the $PixelList variable.

Example of function call :

$PixelList = DisplayPixelSelector(1,255,255,255,0,0,0,"Please Select The Stuck Pixels","Pixel Stuck On;Pixel Stuck Off");

Example of returned data:

$PixelList = "(216,222,Pixel Stuck On);(923,222,Pixel Stuck Off)";



Function Arguments



Parameter

Variable Type

Description



$DisplayID

Integer

The ID of the display on which to display the pixel selection panel.



$CursorRed

Integer

Sets the intensity value of the color component for the cross hairs. Valid values are 0-255.



$CursorGreen

Integer

Sets the intensity value of the color component for the cross hairs. Valid values are 0-255.



$CursorBlue

Integer

Sets the intensity value of the color component for the cross hairs. Valid values are 0-255.



$BackgroundRed

Integer

Sets the intensity value of the color component for the background. Valid values are 0-255.



$BackgroundGreen

Integer

Sets the intensity value of the color component for the background. Valid values are 0-255.



$BackgroundBlue

Integer

Sets the intensity value of the color component for the background. Valid values are 0-255.



$InstructionString

Integer

Specifies the instructions that will be displayed to the test operator.



$DefectOptionString

Integer

Specifies a list of defect options that the test operator can choose from when selecting a pixel. The list should be a semicolon delimited string as shown in the example.



Return Parameters



Parameter

Variable Type

Description



$PixelList

String

A semicolon delimited list of pixel coordinates and their associated defects.





DisplayRegionSelector

Previous Top Next



* * *



DisplayRegionSelector

Usage:

$RegionList = DisplayRegionSelector($DisplayID,$CursorRed,$CursorGreen,$CursorBlue,$BackgroundRed,$BackgroundGreen,$BackgroundBlue,$InstructionString,$DefectOptionString);

Note: This function displays a control panel on the default display running JabilTest, and generates a region selection area on an auxiliary monitor. In order to use this function, the PC running JabilTest must have multiple monitors installed and configured using the Display Properties of the Control Panel.

Description:

This function generates a Region Selection control panel which allows the user to choose a set of pixels on a given display. The regions selected are returned as a semicolon delimited string containing X/Y coordinates. In the event that the $DefectOptionString contains a list of defects, the pixel list is returned with the operator specified defect in the particular location.

If the $DefectOptionString is populated with a semicolon delimited list of options, then a context menu will be displayed on each mouse click which allows the operator to choose one of the defects from the list. If the $DefectOptionString is an empty string, no context menu will be displayed and only the X/Y region coordinates are turned in the $RegionList variable.

Example of function call :

$RegionList = DisplayRegionSelector(1,255,255,255,0,0,0,"Please Select The Defective Regions","Region failure 1;Region Failure 2");

Example of returned data:

$RegionList = "(216,222,300,400);(923,222,988,233)";



Function Arguments



Parameter

Variable Type

Description



$DisplayID

Integer

The display ID on which to display the region selection screen.



$CursorRed

Integer

Sets the intensity value of the color component for the cross hairs. Valid values are 0-255.



$CursorGreen

Integer

Sets the intensity value of the color component for the cross hairs. Valid values are 0-255.



$CursorBlue

Integer

Sets the intensity value of the color component for the cross hairs. Valid values are 0-255.



$BackgroundRed

Integer

Sets the intensity value of the color component for the background. Valid values are 0-255.



$BackgroundGreen

Integer

Sets the intensity value of the color component for the background. Valid values are 0-255.



$BackgroundBlue

Integer

Sets the intensity value of the color component for the background. Valid values are 0-255.



$InstructionString

Integer

Specifies the instructions that will be displayed to the test operator.



$DefectOptionString

Integer

Specifies a list of defect options that the test operator can choose from when selecting a pixel. The list should be a semicolon delimited string as shown in the example.



Return Parameters



Parameter

Variable Type

Description



$RegionList

String

A semicolon delimited list of region coordinates and their associated defects.





TestCircularRegionViolation

Previous Top Next



* * *



TestCircularRegionViolation

Usage:

($Failed,$FailList) = TestCircularRegionViolation($PixelList,$XRes,$YRes,$DisplayWidth,$DisplayHeight,$RegionAxisX,$RegionAxisY,$RegionRadius,$NumAllowableDefects,$AllowableDefectDistance);

Description:

This function tests a given list of pixels in a region for failure criteria. The pixel list which can be generated manually, or returned from the Pixel test functions, is tested against the allowable number of failures per region, as well as a minimum distance between defects. The $FailList variable will contain a list of all pixel defects within the region. The $Failed variable will contain TRUE if the test failed, or FALSE if the list of pixel defects was within allowable criteria.

Function Arguments



Parameter

Variable Type

Description



$PixelList

String

A pixel list string in one of the following two formats:

· (x,y);(x,y);(x,y);(x,y)

· (x,y,"Defect Description");(x,y,"Defect Description")



$XResolution

Integer

The number of pixels on the horizontal plane of the display. For instance, on an UXGA display this number would be 1280.



$YResolution

Integer

The number of pixels on the vertical plane of the display. For instance, on an UXGA display this number would be 1024.



$DisplayWidth

Float

The physical width of the display. This value is used to calculate the physical width of a single pixel.



$DisplayHeight

Float

The physical height of the display. This value is sued to calculate the physical height of a single pixel.



$RegionAxisX

Integer

The X axis specified in pixel coordinates of the region to test for fail criteria.



$RegionAxisY

Integer

The Y axis specified in pixel coordinates of the region to test for fail criteria.



$RegionRadius

Float

The radius of the region to test for failure criteria



$NumAllowableDefects

Integer

The number of pixel defects that are allowed within the given region.



$AllowableDefectDistance

Float

The acceptable physical distance between pixel defects within the given region.





Return Parameters



Parameter

Variable Type

Description



$Failed

Boolean

A boolean variable indicating whether or not the supplied pixel list fails against the supplied acceptable criteria.



$FailList

String

A list of the failure criteria, suitable for passing to the Fail function or RecordMeasurement function for TARS recording.





TestRectangleRegionViolation

Previous Top Next



* * *



TestRectangleRegionViolation

Usage:

($Failed,$FailList) = TestRectangleRegionViolation($PixelList,$XRes,$YRes,$DisplayWidth,$DisplayHeight,$RegionLeftX,$RegionRightX,$RegionTopY,$RegionBottomY,$NumAllowableDefects,$AllowableDefectDistance);

Description:

This function tests a given list of pixels in a region for failure criteria. The pixel list which can be generated manually, or returned from the Pixel test functions, is tested against the allowable number of failures per region, as well as a minimum distance between defects. The $FailList variable will contain a list of all pixel defects within the region. The $Failed variable will contain TRUE if the test failed, or FALSE if the list of pixel defects was within allowable criteria.

Function Arguments



Parameter

Variable Type

Description



$PixelList

String

A pixel list string in one of the following two formats:

· (x,y);(x,y);(x,y);(x,y)

· (x,y,"Defect Description");(x,y,"Defect Description")



$XResolution

Integer

The number of pixels on the horizontal plane of the display. For instance, on an UXGA display this number would be 1280.



$YResolution

Integer

The number of pixels on the vertical plane of the display. For instance, on an UXGA display this number would be 1024.



$DisplayWidth

Float

The physical width of the display. This value is used to calculate the physical width of a single pixel.



$DisplayHeight

Float

The physical height of the display. This value is sued to calculate the physical height of a single pixel.



$RegionLeftX

Integer

The left edge of the region of interest. This is specified in pixels.



$RegionRightX

Integer

The right edge of the region of interest. This is specified in pixels.



$RegionTopY

Integer

The top edge of the region of interest. This is specified in pixels.



$RegionBottomY

Integer

The bottom edge of the region of interest. This is specified in pixels.



$NumAllowableDefects

Integer

The number of pixel defects that are allowed within the given region.



$AllowableDefectDistance

Float

The acceptable physical distance between pixel defects within the given region.





Return Parameters



Parameter

Variable Type

Description



$Failed

Boolean

A boolean variable indicating whether or not the supplied pixel list fails against the supplied acceptable criteria.



$FailList

String

A list of the failure criteria, suitable for passing to the Fail function or RecordMeasurement function for TARS recording.





FileBinaryWriteByte

Previous Top Next



* * *



FileBinaryWriteByte



Usage:

FileBinaryWriteByte($FileHandle,$Byte);



Description:



This function writes a single byte to a file handle that was created using the FileBinaryWriteOpen script command. The $Byte argument is an integer which must have a value between 0 and 255.





Important Note: The writes to the file are queued in a FIFO buffer so some bytes may not be flushed to the file until it is closed using the FileBinaryWriteClose function. This behavior is dependent on the Write Cache settings configured for the operating system.

Function arguments



Parameter

Variable Type

Description



$FileHandle

Object

A file handle that was created using the FileBinaryWriteOpen function



$Byte

Integer

An integer value representing the byte value to write to the file. The integer must be between 0 and 255





Return parameters



Parameter

Variable Type

Description



None





Example(s):





$FileHandle = FileBinaryWriteOpen("c:\\test\\output.bin");

FileBinaryWriteByte($FileHandle,127);

FileBinaryWriteByte($FileHandle,128);

FileBinaryWriteByte($FileHandle,129);

FileBinaryWriteClose($FileHandle);





FileBinaryWriteByteArray

Previous Top Next



* * *



FileBinaryWriteByteArray



Usage:

FileBinaryWriteByteArray($FileHandle, $ByteArray, $StartIndex, $Length);



Description:



This function will append an array of bytes to a file handle that was created using the FileBinaryWriteOpen script command. $ByteArray can be an integer or byte array. If it is an integer array, the values must all be between 0 and 255.





Important Note: Writes to the file are queued in a FIFO buffer so some bytes may not be flushed to the file until it is closed using the FileBinaryWriteClose function. This behavior is dependent on the Write Cache settings configured for the operating system.

Calling this function will append to a file. To start over from the beginning of a file, close the file using FileBinaryWriteClose and reopen it with FileBinaryWriteOpen.

Function arguments



Parameter

Variable Type

Description



$FileHandle

Object

A file handle that was created using the FileBinaryWriteOpen function



$ByteArray

Array

An array of integers or bytes that will be written to the binary file. If this is an integer array, all elements must have a value between 0 and 255.



$StartIndex

Integer

The location in $ByteArray to start writing from. Enter 0 to begin writing from the first element of the array.



$Length

Integer

The number of bytes to write to the binary file. Entering 0 will write from $StartIndex to the end of the array.





Return parameters



Parameter

Variable Type

Description



None





Example(s):

// Assume we have an array of 100 bytes.

// Write from byte 50 to the end of the array.

$FileHandle = FileBinaryWriteOpen("c:\\test\\output.bin");

FileBinaryWriteByteArray($FileHandle, $ByteArray, 50, 0);

FileBinaryWriteClose($FileHandle);





// Write 15 bytes starting at byte 10.

FileBinaryWriteByteArray($FileHandle, $ByteArray, 10, 15);





// Write entire array to file.

FileBinaryWriteByteArray($FileHandle, $ByteArray, 0, 0);





FileBinaryWriteClose

Previous Top Next



* * *



FileBinaryWriteClose



Usage:

FileBinaryWriteClose($FileHandle);



Description:



This function closes a binary file handle that was created with the FileBinaryWriteOpen command. When this function is called, any remaining bytes written to the file are flushed from the buffer and written to the file system before the file is closed.





If the file can't be closed, an error is returned from the function.

Function arguments



Parameter

Variable Type

Description



$FileHandle

Object

A file handle that was created using the FileBinaryWriteOpen function





Return parameters



Parameter

Variable Type

Description



None





Example(s):





FileBinaryWriteClose($FileHandle);





FileBinaryWriteOpen

Previous Top Next



* * *



FileBinaryWriteOpen



Usage:

$FileHandle = FileBinaryWriteOpen($FileName);



Description:



This functions opens a file on the local file system or mapped drive for writing binary files. In th eevent that the file can't be created or opened, the function returns a failure. If the filename supplied already exists on the file system, it will be replaced with the new file.

Function arguments



Parameter

Variable Type

Description



$FileName

String

The filename and path to create the new binary file (or overwrite an existing file)





Return parameters



Parameter

Variable Type

Description



$FileHandle

Object

The returned file handle which can be used for writing data into the file.





Example(s):





$FileHandle = FileBinaryWriteOpen("c:\\mydirectory\\myfile.bin");





FileCompare

Previous Top Next



* * *



FileCompare



Usage:

$ReturnValue = FileCompare($SourceFile, $FileToCompare, $FailTest);



Description:

This function tests byte per byte if the $SourceFile and the $FileToCompare are equal.



Result

0 if the $SourceFile and the$FileToCompare are equal.

-1 if the $SourceFile cannot be opened for reading.

-2 if the $FileToCompare cannot be opened for reading.

-3 if the $SourceFile and the $FileToCompare have different file length.

-4 if the $SourceFile and the $FileToCompare are NOT equal.





Function arguments



Parameter

Variable Type

Description



$SourceFile

String

The source file for the comparison to be made.



$FileToCompare

String

The file that will be compared to the $SourceFile.



$FailTest

Boolean

Whether to fail the script if the comparison fails (files are not equal or cannot be loaded).





Return parameters



Parameter

Variable Type

Description



$ReturnValue

Integer

The result of the test.





Examples:





$ReturnValue = FileCompare("c:\\source.txt", "c:\\FileToCompare.txt", false);

// returns 0.



$ReturnValue = FileCompare("c:\\sourceNotExists.txt", "c:\\FileToCompare.txt", false);

// returns -1.



$ReturnValue = FileCompare("c:\\source.txt", "c:\\FileToCompareNotExists.txt", false);

// returns -2.



$ReturnValue = FileCompare("c:\\source.txt", "c:\\FileToCompareDifferentLength.txt", false);

// returns -3.



$ReturnValue = FileCompare("c:\\source.txt", "c:\\FileToCompareBad.txt", false);

// returns -4.





FileReadAllBytes

Previous Top Next



* * *



FileReadAllBytes



Usage:

$ByteArray = FileReadAllBytes($FilePath);



Description:



This function reads all the bytes of a file into a 1-D array of bytes. The length of the file determines the length of the returned byte array.



Remarks:

· If the file is not found, the test generates a failure.



Examples:





$ByteArray = FileReadAllBytes("c:\\test\\testfile.dat");

Function arguments



Parameter

Variable Type

Description



$FilePath

String

The complete file path of the file to be read.





Return parameters



Parameter

Variable Type

Description



$ByteArray

Array

The returned array of bytes contained in the file.





FileReadAllBytesToHexString

Previous Top Next



* * *



FileReadAllBytesToHexString



Usage:

$byteString = FileReadAllBytesToHexString($FilePath);



Description:



This function reads all the bytes of a file into a string of space-separated hexadecimal values.



Remarks:

· If the file is not found, the test generates a failure.



Function arguments



Parameter

Variable Type

Description



$FilePath

String

The complete file path of the file to be read.





Return parameters



Parameter

Variable Type

Description



$byteString

String

The bytes contents of the file returned as a string of space-separated hexadecimal values.





Examples:





$byteString = FileReadAllBytes("c:\\test\\testfile.dat");

UpdateStatus($byteString); //prints out something like "10 53 07 00 3C 01 00 97"...etc





GenerateFileHash

Previous Top Next



* * *



GenerateFileHash



Usage:

$Hash = GenerateFileHash($FileName);





Description:

This function generates a cryptographically secure SHA1 hash for the supplied file.





Note: Prior to Jabil Test 7.17.01, this hash function could drop leading zeroes in the string of hexadecimal characters (returned in $Hash). As of Jabil Test 7.17.01, the leading zeroes are included and the hash code will match the hash code in the report writers.

Function arguments



Parameter

Variable Type

Description



$FileName

String

The name of the file for which to generate a hash





Return parameters



Parameter

Variable Type

Description



$Hash

String

A string of hexadecimal characters representing the hash of the file





Example:





// Get the filename of this script (the hash will match the report writer).

$fileName = $RESERVED_CurrentScriptFile;





// Get the hash code.

$Hash = GenerateFileHash($fileName);





ExcelCloseFile

Previous Top Next



* * *



ExcelCloseFile

Usage:

ExcelCloseFile($ExcelObject);



Description:

This function closes the Microsoft Excel file and releases the resources.

Note: The Jabil Test Microsoft Excel file manipulation functions rely on the object model exposed via COM by the Microsoft Office suite. In order to use these functions, Microsoft Office must be installed on the PC running Jabil Test.

Function Arguments



Parameter

Variable Type

Description



$ExcelObject

Object

A handle to the Excel workbook opened by the ExcelOpenFile function.





Return Parameters



Parameter

Variable Type

Description



None





ExcelGetCell

Previous Top Next



* * *



ExcelGetCell



Usage:

$Value = ExcelGetCell($ExcelObject,$WorksheetNumber,$Column,$Row);





Note: The Jabil Test Microsoft Excel file manipulation functions rely on the object model exposed via COM by the Microsoft Office suite. In order to use these functions, Microsoft Office must be installed on the PC running Jabil Test.





Description:

This function returns the contents of the cell specified by the $Column and $Row parameters on the worksheet specified by the $WorksheetNumber parameter. The contents of the cell are returned as a string variable.

Function Arguments



Parameter

Variable Type

Description



$ExcelObject

Object

A handle to the Excel workbook opened by the ExcelOpenFile function.



$WorksheetNumber

Integer

The number of the worksheet page to retrieve the cell. The first worksheet in the workbook starts at 1.



$Column

String

The column of the cell to return



$Row

Integer

The row number of the cell to return





Return Parameters



Parameter

Variable Type

Description



$Value

String

The text contents of the queried cell.





Example:

$Value = ExcelGetCell($ExcelObject,1,"A",5);





ExcelGetRange

Previous Top Next



* * *



ExcelGetRange



Usage:

$dataArray = ExcelGetRange($excelHandle, $worksheet, $startColumn, $startRow, $endColumn, $endRow);



Description:

This function will return an array of data from the specified range of cells on the specified worksheet of the previously opened Excel file. The file needs to have been opened with the ExcelOpenFile function.



Remarks:

· This function uses the Microsoft Office COM interface, so Microsoft Office must be loaded on the computer using this function.

· The data is always returned as a 2-D array, even if only one column is specified.

Function arguments



Parameter

Variable Type

Description



$excelHandle

Object

A reference to the Excel file that was previously opened.



$worksheet

Integer

The number of the worksheet to retrieve the data from. Worksheet numbers start at 1.



$startColumn

String

The leftmost column of the cells to return data from. Columns are listed by letter ('A', 'B', etc.)



$startRow

Integer

The topmost row of the cells to return data from.



$endColumn

String

The rightmost column of the cells to return data from. Columns are listed by letter ('A', 'B', etc.)



$endRow

Integer

The bottommost row of cells to return data from.





Return parameters



Parameter

Variable Type

Description



$dataArray

Array

A 2-D array of strings that contains the data from the specified cells.





Example(s):

// Open the Excel File.

$excelFile = "C:\Files\DataFile.xls";

$excelHandle = ExcelOpenFile($excelFile);





// Return data from cells E5 to F20.

$worksheet = 1;

$startcolumn = "E";

$startRow = 5;

$endColumn = "F";

$endRow = 20;

$dataArray = ExcelGetRange($excelHandle, $worksheet, $startColumn, $startRow, $endColumn, $endRow);





ExcelOpenFile

Previous Top Next



* * *



ExcelOpenFile



Usage:

$ExcelObject = ExcelOpenFile($FileName);





Note: The Jabil Test Microsoft Excel file manipulation functions rely on the object model exposed via COM by the Microsoft Office suite. In order to use these functions, Microsoft Office must be installed on the PC running Jabil Test.





Description:

This function opens a Microsoft Excel file for use.

Function Arguments



Parameter

Variable Type

Description



$FileName

String

The filepath and name of the Excel document to open.





Return Parameters



Parameter

Variable Type

Description



$ExcelObject

Object

A handle to the Excel workbook opened by the function.





Example:

$MyExcel = ExcelOpenFile("c:\\testfile.txt");





ExcelPrintFile

Previous Top Next



* * *



ExcelPrintFile



Usage:

$Status = ExcelPrintFile($Excel,$FirstPageNumber,$LastPageNumber,$PrinterName);



Description:



This function permits sending an Excel document to the specified printer, as well as specifying a page range to be printed.





Function arguments



Parameter

Variable Type

Description



$Excel

Object

An excel file object that was created using the ExcelOpenFile command.



$FirstPageNumber

Integer

The first page number in the workbook to print



$LastPageNumber

Integer

The last page number in the workbook to print



$PrinterName

String

The name of the printer to which the Excel document should be printed.





Return parameters



Parameter

Variable Type

Description



$Status

Boolean

A boolean value indicating whether or not the operation was successful.





Usage Example:





$ExcelObject = ExcelOpenFile("c:\\book1.xls");

SetFinalizeFunction("Cleanup"):

ExcelPrintFile($ExcelObject,1,1,"\\\\stpprt01\\RSV_A");





function Cleanup()

{

ExcelCloseFile($ExcelObject);

End;



}





ExcelRunMacro

Previous Top Next



* * *



ExcelRunMacro



Usage:

ExcelRunMacro($Excel,$MacroName);



Description:



This function will execute a macro in an excel spreadsheet. The macro must take no arguments, and any changes created to the document be applied immediately to the document in memory, but will not be permanently saved until the ExcelCloseFile function has been called.

Function arguments



Parameter

Variable Type

Description



$Excel

Object

An excel file object that was created using the ExcelOpenFile command.



$MacroName

String

The name of the macro to execute.





Return parameters



Parameter

Variable Type

Description



None





Usage Example:





$MyExcel = ExcelOpenFile("c:\\book1.xls");

SetFinalizeFunction("CleanUp");

ExcelRunMacro($MyExcel,"macro1");

End;

function CleanUp()

{

ExcelCloseFile($MyExcel);

End;

}





ExcelSearchForValue

Previous Top Next



* * *



ExcelSearchForValue



Usage:

($Found,$Column,$Row) = ExcelSearchForValue($Excel,$Worksheet,$StartingColumn,$EndingColumn,$StartingRow,$EndingRow,$ValueToFind,$MatchCase);



Description:



This function will search the specified range of an excel file to find the location of a particular value. If the value is found, a boolean result indicating that the value was located is returned along with the column name, and row number of the cell that contained the value. If the value is not found inside of the specified search area, it will return a false result, along with a blank string for the $Column value and a 0 (zero) for the $Row return value.





Important Note:

The search value must be a literal cell value and can't be the result of a formula.





Function arguments



Parameter

Variable Type

Description



$Excel

Object

An excel file object that was created using the ExcelOpenFile command.



$Worksheet

Integer

The index of the worksheet to find, the first worksheet value starts at '1'.



$StartingColumn

String

The first column to include in the search region



$EndingColumn

String

The final column to include in the search region



$StartingRow

Integer

The first row to include in the search region.



$EndingRow

Integer

The final row to include in the search region.



$ValueToFind

String, Float, Integer,Boolean

The value to find in the spreadsheet.



$MatchCase

Boolean

Specifies whether or not a case sensitive search is done. If this variable is set to true, only exact case-matches will be returned.





Return parameters



Parameter

Variable Type

Description



$Found

Boolean

A boolean value indicating whether or not the search string was located inside of the specified search area of the spreadsheet.



$Column

String

The column name in which the first match of the search value was located.



$Row

Integer

The row number in which the first match of the search value was located.





Usage Example:

$Excel = ExcelOpenFile("C:\\Agilent RF Tester.xls");

($Found,$Column,$Row) = ExcelSearchForValue($Excel,1,"A","G",1,100,"Labor","FALSE");

UpdateStatus($Found);

UpdateStatus($Column);

UpdateStatus($Row);

ExcelCloseFile($Excel);





ExcelSetCell

Previous Top Next



* * *



ExcelSetCell

Usage:

ExcelSetCell($ExcelObject,$WorksheetNumber,$Column,$Row,$SetText);



Description:

This function sets the contents of the cell specified by the $Column and $Row parameters on the worksheet specified by the $WorksheetNumber parameter. The content of the cell is in $SetText as a string variable.

Note: The Jabil Test Microsoft Excel file manipulation functions rely on the object model exposed via COM by the Microsoft Office suite. In order to use these functions, Microsoft Office must be installed on the PC running Jabil Test.

Function Arguments



Parameter

Variable Type

Description



$ExcelObject

Object

A handle to the Excel workbook opened by the ExcelOpenFile function.



$WorksheetNumber

Integer

The number of the worksheet page for the cell. The first worksheet in the workbook starts at 1.



$Column

String

The column of the cell to change



$Row

Integer

The row number of the cell to change



$SetText

String

The new contents for the cell





Return Parameters



Parameter

Variable Type

Description



None





Example:

ExcelSetCell($ExcelObject,1,"A",5, "Jabil");





ExcelSetRange

Previous Top Next



* * *



ExcelSetRange



Usage:

ExcelSetRange($excelHandle, $worksheet, $startColumn, $startRow, $endColumn, $endRow, $dataArray);



Description:

This function will take an array of data and place it in the specified range of cells on the specified worksheet of the previously opened Excel file. The file needs to have been opened with the ExcelOpenFile function.



Remarks:

· This function uses the Microsoft Office COM interface, so Microsoft Office must be loaded on the computer using this function.

· The data must be a 2-D array, even if only one column is specified.

· The size of the data must match the size of the selected area of cells on the spreadsheet.

Function arguments



Parameter

Variable Type

Description



$excelHandle

Object

A reference to the Excel file that was previously opened.



$worksheet

Integer

The number of the worksheet to send the data to. Worksheet numbers start at 1.



$startColumn

String

The leftmost column of the cells to send data to. Columns are listed by letter ('A', 'B', etc.)



$startRow

Integer

The topmost row of the cells to send data to.



$endColumn

String

The rightmost column of the cells to send data to. Columns are listed by letter ('A', 'B', etc.)



$endRow

Integer

The bottommost row of cells to send data to.



$dataArray

Array

A 2-D numeric or string array of data to send to the specified range of cells.





Return parameters



Parameter

Variable Type

Description



None





Example(s):

// Open the Excel File.

$excelFile = "C:\Files\DataFile.xls";

$excelHandle = ExcelOpenFile($excelFile);





// Send data to cells E5 to F20.

// Assumed: $dataArray has the correct size.

$worksheet = 1;

$startcolumn = "E";

$startRow = 5;

$endColumn = "F";

$endRow = 20;

ExcelSetRange($excelHandle, $worksheet, $startColumn, $startRow, $endColumn, $endRow, $dataArray);





CompressFile

Previous Top Next



* * *



CompressFile



Usage:

$success = CompressFile($sourceFolder, $destinationZip);



Description:

This function will compress a folder or file and place the compressed ZIP file in the destination location.





Remarks:

This function will always pass. The $success boolean will indicate whether to operation was successful.





Function arguments



Parameter

Variable Type

Description



$sourceFolder

String

The path to the folder or file to be compressed.



$destinationZip

String

The location to save the compressed file to.





Return parameters



Parameter

Variable Type

Description



$success

Boolean

Whether the file was compressed successfully.





Example:





// Set source and destination variables.

$source = "C:\\Temp\\Folder_To_Compress";

$destination = "C:\\Temp\\CompressedFolder.zip";



// Compress the folder.

$success = CompressFile($source, $destination);





ExtractFile

Previous Top Next



* * *



ExtractFile



Usage:

$success = ExtractFile($sourceZip, $destinationFolder);



Description:

This function will decompress a folder or file and place the files in the destination location.





Remarks:

This function will always pass. The $success boolean will indicate whether to operation was successful.





Function arguments



Parameter

Variable Type

Description



$sourceZip

String

The path to the zip file to decompress.



$destinationFolder

String

The location to save the decompressed files to.





Return parameters



Parameter

Variable Type

Description



$success

Boolean

Whether the files were decompressed successfully.





Example:





// Set source and destination variables.

$source = "C:\\Temp\\CompressedFolder.zip";

$destination = "C:\\Temp\\Folder_To_DeCompress_To";



// Decompress the folder.

$success = ExtractFile($source, $destination);





CheckDirectoryExists

Previous Top Next



* * *



CheckDirectoryExists



Usage:

$exists = CheckDirectoryExists($pathName);



Description:

This function returns a boolean value indicating whether or not the specified directory is present in the file system.



Function arguments



Parameter

Variable Type

Description



$pathName

String

The path name to verify.





Return parameters



Parameter

Variable Type

Description



$exists

Boolean

Specifies whether or not the directory is present on the file system.





Example:





// Check if a directory exists.

$exists = CheckDirectoryExists("C:\\windows");

UpdateStatus($exists);



$exists = CheckDirectoryExists("C:\\winnt");

UpdateStatus($exists);





CheckFileExists

Previous Top Next



* * *



CheckFileExists



Usage:

$fileExists= CheckFileExists($filePathAndName,$action);





Description:

This function checks to see if the file specified in the $filePathAndName argument exists in the file system. In the event that the file exists, the script returns the status specified in the $action argument.

Function Arguments



Parameter

Variable Type

Description



$filePathAndName

String

The file path and file name of the file. For example "c:\test\testfile.txt"



$action

String

The test status to return in the event that the file does exist. Valid values for the action argument are:

"PASS"

"FAIL"

"ABORT"

"RETURNONLY" = If specified, no action is taken, only the Boolean result is returned to the script.





Return Parameters



Parameter

Variable Type

Description



$fileExists

Boolean

Returns true if the file exists, false in the event that the file does not exist.





CheckFileInUse

Previous Top Next



* * *



CheckFileInUse



Usage:

$inUse = CheckFileInUse($fileName);





Description:

This function checks if the specified file is locked because another process is using it. This function works for files in network, shared or local folders.

Function arguments



Parameter

Variable Type

Description



$fileName

String

The file path/name. If no file path is specified, it's assumed that the file is located in the same directory as the JabilTest executable.





Return parameters



Parameter

Variable Type

Description



$inUse

Boolean

Indicated if the file is in use. A return of "true" indicates that the file is being used by another process.





Usage Example:

$fName = "C:\\Temp\\File Info Test.txt";





// Loop until file is available

Label CheckLoop:

$inUse = CheckFileInUse($fName);

$strOut = "File in Use = " + $inUse;

UpdateStatus($strOut);





if ($inUse)

{

Sleep(5);

goto CheckLoop;

}





UpdateStatus("\r\nFile is available.");





CreateDirectory

Previous Top Next



* * *



CreateDirectory



Usage:

CreateDirectory($PathName);

Description:



This function creates the specified file path on the file system. If the directory is already present, or if the directory could not be created due to insufficient permissions, or a read-only file system, then the function returns a failure. If the directory is created successfully, the function will pass.

Function arguments



Parameter

Variable Type

Description



$PathName

String

The path name to create





Return parameters



Parameter

Variable Type

Description



None





Usage Example:





// Create a Directory

CreateDirectory("c:\\mynewdirectory\\");





DirectoryCopy

Previous Top Next



* * *



DirectoryCopy



Usage:

DirectoryCopy($sourceDir, $destinationDir, $overWrite, $includeSubs);





Description:

This function will copy the source directory and all of the files in it to the destination and create the destination directory if necessary. It can optionally overwrite files in the destination directory and can optionally include all subdirectories as well.

Function arguments



Parameter

Variable Type

Description



$sourceDir

String

The path of the source directory.



$destinationDir

String

The path of the destination directory.



$overWrite

Boolean

If set to true, any files of the same names in the destination directory will be overwritten.



$includeSubs

Boolean

If set to true, all subdirectories of the main directory will also be copied.





Return parameters



Parameter

Variable Type

Description



None





Example(s):

// Set up the directories to copy with all subdirectories as well.

$srcDir = "C:\\Temp\\Test Dir";

$destDir = "C:\\Temp\\Backup";

$over = true;

$subs = true;





DirectoryCopy($srcDir, $destDir, $over, $subs);





DirectoryDelete

Previous Top Next



* * *



DirectoryDelete



Usage:

DirectoryDelete($directory, $includeSubs);





Description:

This function will delete the directory and all of the files in it and can optionally delete all subdirectories and their contents as well.

Function arguments



Parameter

Variable Type

Description



$directory

String

The path of the directory to delete.



$includeSubs

Boolean

If set to true, all subdirectories and their contents will be deleted as well.





Return parameters



Parameter

Variable Type

Description



None





Example(s):

// Set up the directory to delete with all subdirectories as well.

$dir = "C:\\Temp\\Test Dir";

$subs = true;





DirectoryDelete($dir, $subs);





FileBuildPath

Previous Top Next



* * *



FileBuildPath



Usage:

$combinedPath = FileBuildPath($filePath1, $filePath2);





Description:

This function will combine two strings as a Windows path. The string supplied can include backslashes, or not. This function will also resolve relative path elements.





Note: The backslash character is a delimiter for control characters, so to put a backslash into a string, two need to be added (example "\\").

Function arguments



Parameter

Variable Type

Description



$filePath1

String

The first part of the file path to return.



$filePath2

String

The second part of the file path to return.





Return parameters



Parameter

Variable Type

Description



$combinedPath

String

A string that includes the previous two file path parts combined with the appropriate path delimiter ("\").





Examples:





// Set up the parts that we are going to combine.





$path1 = "C:";

$path2 = "Temp\\";

$path3 = "testfile.txt";





// Combine them, two parts at a time.





$combine1 = FileBuildPath($path1, $path2); // Returns: "C:\\Temp\\"

$fullPath = FileBuildPath($combine1, $path3); // Returns: "C:\\Temp\\testfile.txt"





// Set up a path to demonstrate relative path resolution.





$startPath = "C:\\Temp\\SubFolder1\\Internal_Folder\\testfile.txt";

$newPath = "..\\..\\..\\SubFolder2\\newTestFile.txt"; // Back up 3 levels and add new path.





// Now combine the two elements.





$newPath = FileBuildPath($startPath, $newPath); // Returns: "C:\\Temp\\SubFolder2\\newTestFile.txt"





FileCopy

Previous Top Next



* * *



FileCopy



Usage:

FileCopy($SourceFile,$DestinationFile,$Overwrite);





Description:

This function copies the file located at the source file location to the location specified by the destination file. If a file already exists at the destination location and the $Overwrite argument is set to false, the test function will generate a failure.

Function Arguments



Parameter

Variable Type

Description



$SourceFile

String

The path to the source file



$DestinationFile

String

The desired path and filename for the destination file



$Overwrite

Boolean

Specifies whether or not you want to overwrite an existing file if a file with the name and path of the destination file already exists.





Return Parameters



Parameter

Variable Type

Description



None





Example:

FileCopy("c:\\mysourcedir\\mysourcefile.txt","c:\\mydestdir\\mydestfile.txt","TRUE");





FileDelete

Previous Top Next



* * *



FileDelete



Usage:

FileDelete($FilePath);





Description:

This function deletes the file specified by the $FilePath argument. In the event that the file doesn't exist, no action is taken. If the file can't be deleted for any reason, a failure is generated.

Function Arguments



Parameter

Variable Type

Description



$FilePath

String

The complete file path to the file you want deleted.





Return Parameters



Parameter

Variable Type

Description



None





Example:

FileDelete("c:\\textfile.txt");





FileGetInfo

Previous Top Next



* * *



FileGetInfo



Usage:

($CreateDate,$CreateTime,$LastAccessDate,$LastAccessTime,$LastWriteDate,$LastWriteTime,$FileLength,$Normal,$ReadOnly,$Hidden,$Archive) = FileGetInfo($FileName);





Description:

This function retrieves the information concerning a given file from the file system. If the file is not present, the function returns a failure.

Function arguments



Parameter

Variable Type

Description



$FileName

String

The file path/name. If no file path is specified, it's assumed that the file is located in the same directory as the JabilTest executable.





Return parameters



Parameter

Variable Type

Description



$CreateDate

String

The creation date of the file.



$CreateTime

String

The creation time of the file.



$LastAccessDate

String

The date the file was last accessed.



$LastAccessTime

String

The time that the file was last accessed



$LastWriteDate

String

The date that the file was last written.



$LastWriteTime

String

The time that the file was last written



$FileLength

Integer

The number of bytes contained in the file.



$Normal

Boolean

Specifies if the Normal File Attribute is applied to the file.



$ReadOnly

Boolean

Specifies if the Read Only File Attribute is applied to the file.



$Hidden

Boolean

Specifies if the Hidden File Attribute is applied to the file.



$Archive

Boolean

Specifies if the Archive File Attribute is applied to the file.





Usage Example:

($CreateDate,$CreateTime,$AccessDate,$AccessTime,$WriteDate,$WriteTime,$Length,$Normal,$Hidden,$ReadOnly,$Archive) = FileGetInfo("jabiltest.exe");





FileSetAttribute

Previous Top Next



* * *



FileSetAttribute



Usage:

FileSetAttribute($FileName, $Attribute, $Setting);



Description:

This function sets or resets a specified attribute for a specified file in the system. If the file is not present, the function returns a failure.



Function arguments



Parameter

Variable Type

Description



$FileName

String

The file path/name. If no file path is specified, it's assumed that the file is located in the same directory as the JabilTest executable.



$Attribute

String

The name of the attribute to set.

Value: ReadOnly, Hidden, Archive



$Setting

Boolean

The setting for the attribute.

true = set attribute (turn on)

false = reset attribute (turn off)





Return parameters



Parameter

Variable Type

Description



None





Example:





FileSetAttribute("jabiltest.exe", "ReadOnly", true);





FileStripPath

Previous Top Next



* * *



FileStripPath



Usage:

($pathPart1, $pathPart2) = FileStripPath($filePath);





Description:

This function will remove the last part of a file path and return the two pieces. If there is no path delimiter (in Windows: "\"), then the entire path will be returned as the first part and the second part will be blank.





Note: The backslash character is a delimiter for control characters, so to put a backslash into a string, two need to be added (example "\\").

Function arguments



Parameter

Variable Type

Description



$filePath

String

The file path to have the last part stripped off of.





Return parameters



Parameter

Variable Type

Description



$pathPart1

String

The first part of the path with the second part stripped off.



$pathPart2

String

The second part of the path.





Example:





// Set up the path that we are going to strip apart.





$filePath = "C:\\Temp\\testfile.txt";





// Strip them apart - one piece at a time.





($firstPart, $pathPart3) = FileStripPath($filePath); // Returns: "C:\\Temp" and "testfile.txt"

($pathPart1, $pathPart2) = FileStripPath($firstPart); // Returns: "C:\\" and "Temp\\"





GetCurrentDirectory

Previous Top Next



* * *



GetCurrentDirectory



Usage:

$Path = GetCurrentDirectory();

Description:





This function returns the path name containing the currently running JabilTest.exe executable file.

Function arguments



Parameter

Variable Type

Description



None





Return parameters



Parameter

Variable Type

Description



$Path

String

The directory containing the current running executable file.





Usage Example:





// Get Current Working Directory

$Dir = GetCurrentDirectory();

UpdateStatus($Dir);





GetDirectoriesInDirectory

Previous Top Next



* * *



GetDirectoriesInDirectory



Usage:

($DirectoryArray,$DirectoryCount) = GetDirectoriesInDirectory($DirectoryPath,$SearchPattern);





Description:





This function retrieves an array containing the directory names of each directory in the given directory path which match a given search string. The search string can contain wild cards for matching a particular pattern. If you would like to return all directories in the directory, simply use a '*' as the Search Pattern.





If the directory does not exists, the function generates a test failure.

Function arguments



Parameter

Variable Type

Description



$DirectoryPath

String

The file path of the parent directory. If no file path is specified, it's assumed that the search location is the same directory as the JabilTest executable.



$SearchPattern

String

A search pattern which can contain wild cards for matching particular directories Some examples include:





"f*" = matches all directories starting with the letter f

"*Z*" = matches all directories containing the letter Z.





Return parameters



Parameter

Variable Type

Description



$DirectoryArray

Array

A one-dimensional array of type string containing the names of all the matching directories in the given directory.



$DirectoryCount

Integer

The number of items that were matched and returned in the array.





Usage Example:

($Directories,$Count) = GetDirectoriesInDirectory("c:\\","*program*");

// Then loop and print out all the directories...

while ($Count>0)

{

$Count = $Count-1;

$DirectoryName = ArrayGetValue($Directories,0,$Count);

UpdateStatus($DirectoryName);

}





Example Output:





GetDirectoriesInDirectory: Directory [c:\] Search Pattern [*program*] Returned [3] Directories.

$Count = 3-1;

c:\ProgramData

$Count = 2-1;

c:\Program Files (x86)

$Count = 1-1;

c:\Program Files





FilePath

Previous Top Next



* * *



GetFilePathInfo



Usage:

($DirectoryName,$FileExtension,$FileName,$FileNameWithoutExtension,$FullPath,$PathRoot,$HasExtension,$IsPathRooted) = GetFilePathInfo($FilePath);

Description:





This function retrieves the information concerning a given file path from the file system. If the file is not present, the function returns a failure.

Function arguments



Parameter

Variable Type

Description



$FilePath

String

A string that contains file for directory path information.file path and name.





Return parameters



Parameter

Variable Type

Description



$DirectoryName

String

The directory information for the given path.



$FileExtension

String

Returns the extension portion of the file in the given path.



$FileName

String

Returns the file name and extension of the specified path string.



$FileNameWithoutExtension

String

Returns the file name of the given path without the extension.



$FullPath

String

Returns the absolute path for the specified path string.



$PathRoot

String

Returns the root information of the given path.



$HasExtension

Boolean

Indicates if the given path contains a file name with an extension



$IsPathRooted

Boolean

Indicates if the given path contains absolute or relative path information.





Usage Example:

($DirectoryName,$FileExtension,$FileName,$FileNameWithoutExtension,$FullPath,$PathRoot,$HasExtension,$IsPathRooted) = GetFilePathInfo($FilePath);





GetFilesInDirectory

Previous Top Next



* * *



GetFilesInDirectory



Usage:

($FileArray,$FileCount) = GetFilesInDirectory($DirectoryPath,$SearchPattern);





Description:





This function retrieves an array containing the file names of each file in the given directory path which match a given search string. The search string can contain wild cards for matching a particular pattern. If you would like to return all files in the directory, simply use a '*' as the Search Pattern.





If the directory does not exists, the function generates a test failure.

Function arguments



Parameter

Variable Type

Description



$FileName

String

The file path/name. If no file path is specified, it's assumed that the file is located in the same directory as the JabilTest executable.



$SearchPattern

String

A search pattern which can contain wild cards for matching particular files. Some examples include:

"*.txt" = matches all text files

"f*" = matches all files starting with the letter f

"*Z*" = matches all files containing the letter Z.





Return parameters



Parameter

Variable Type

Description



$FileArray

Array

A one-dimensional array of type string containing the names of all the matching files in the given directory.



$FileCount

Integer

The number of items that were matched and returned in the array.





Usage Example:

($FileArray,$FileCount) = GetFilesInDirectory("c:\\MyPath\\","*.hex");





// Then loop and print out all the files...

Label FilePrintLoop:

if ($FileCount>0)

{

$FileCount = $FileCount-1;

$FileName = ArrayGetValue($FileArray,0,$FileCount);

UpdateStatus($FileName);

goto FilePrintLoop;

}





IniFile_DeleteKeyInSection

Previous Top Next



* * *



IniFile_DeleteKeyInSection



Usage:

IniFile_DeleteKeyInSection($iniPath, $sectionName, $keyName);





Description:

This function will delete one key in one section of the specified INI file.





Remarks:

If the file, section or key is not found, an error is returned.

Function arguments



Parameter

Variable Type

Description



$iniPath

String

The path and file name of the INI file to modify.



$sectionName

String

The section to delete a key in.



$keyName

String

The key to delete.





Return parameters



Parameter

Variable Type

Description



None





Example(s):

// Set up some variables to use.

$iniPath = "C:\\Test\\myProgram.ini";

$sectionName = "Second Section";

$keyName = "Key To Delete";





IniFile_DeleteKeyInSection($iniPath, $sectionName, $keyName);





IniFile_DeleteSection

Previous Top Next



* * *



IniFile_DeleteSection



Usage:

IniFile_DeleteSection($iniPath, $sectionName);





Description:

This function will delete one section from the specified INI file.





Remarks:

If the file or section is not found, an error is returned.

Function arguments



Parameter

Variable Type

Description



$iniPath

String

The path and file name of the INI file to modify.



$sectionName

String

The section to delete.





Return parameters



Parameter

Variable Type

Description



None





Example(s):

// Set up some variables to use.

$iniPath = "C:\\Test\\myProgram.ini";

$sectionName = "Second Section";





IniFile_DeleteSection($iniPath, $sectionName);





IniFile_ReadAllKeyNamesInSection

Previous Top Next



* * *



IniFile_ReadAllKeyNamesInSection



Usage:

$keyNames = IniFile_ReadAllKeyNamesInSection($iniPath, $sectionName);





Description:

This function will return the names of all of the keys in the specified section of the INI file.





Remarks:

The names returned are in a 1D array - even if there is only one key name returned.

Function arguments



Parameter

Variable Type

Description



$iniPath

String

The path and file name of the INI file to read.



$sectionName

String

The name of the section in the INI file to read the key names from.





Return parameters



Parameter

Variable Type

Description



$keyNames

String Array

The names of all of the keys in the specified section of the INI file.





Example(s):

// Set up some variables to use.

$iniPath = "C:\\Test\\myProgram.ini";

$sectionName = "Second Section";





$keyNames = IniFile_ReadAllKeyNamesInSection($iniPath, $sectionName);





// Now print all of the key names

$numKeys = ArrayGetLength($keyNames);





UpdateStatus("Key Names:\n");





$lc = 0;

while ($lc < $numKeys)

{

$keyName = Array1DGetValue($keyNames, $lc);

UpdateStatus($keyName);

$lc = $lc + 1;

}





IniFile_ReadAllSectionNames

Previous Top Next



* * *



IniFile_ReadAllSectionNames



Usage:

$sectionNames = IniFile_ReadAllSectionNames($iniPath);





Description:

This function will return the names of all of the sections in the specified INI file.





Remarks:

The names returned are in a 1D array - even if there is only one section name returned.

Function arguments



Parameter

Variable Type

Description



$iniPath

String

The path and file name of the INI file to read.





Return parameters



Parameter

Variable Type

Description



$sectionNames

String Array

The names of all of the sections in the specified INI file.





Example(s):

// Set up some variables to use.

$iniPath = "C:\\Test\\myProgram.ini";





$sectNames = IniFile_ReadAllSectionNames($iniPath);





// Now print all of the section names

$numSects = ArrayGetLength($sectNames);





UpdateStatus("Section Names:\n");





$lc = 0;

while ($lc < $numSects)

{

$sName = Array1DGetValue($sectNames, $lc);

UpdateStatus($sName);

$lc = $lc + 1;

}





IniFile_ReadKeyInSection

Previous Top Next



* * *



IniFile_ReadKeyInSection



Usage:

$keyValue = IniFile_ReadKeyInSection($iniPath, $sectionName, $keyName);





Description:

This function will return the value from the key in the specified section of the specified INI file.





Remarks:

If the file, section or key is not found, the function will fail the test.

Function arguments



Parameter

Variable Type

Description



$iniPath

String

The path and file name of the INI file to read.



$sectionName

String

The name of the section to find the key in.



$keyName

String

The name of the key to return the value of.





Return parameters



Parameter

Variable Type

Description



$keyValue

String

The value of the key that was read.





Example(s):

// Set up some variables to use.

$iniPath = "C:\\Test\\myProgram.ini";

$section = "First Section";

$key = "TheKeyToEverything";





$value = IniFile_ReadKeyInlSection($iniPath, $section, $key);





IniFile_WriteKeyToSection

Previous Top Next



* * *



IniFile_WriteKeyToSection



Usage:

$keyValue = IniFile_WriteKeyToSection($iniPath, $sectionName, $keyName, $keyValue);





Description:

This function will write the value to the key in the specified section of the specified INI file.





Remarks:

If the file, section and/or key is not found, the function will create them. This can be used to create an INI file.

Function arguments



Parameter

Variable Type

Description



$iniPath

String

The path and file name of the INI file to write to.



$sectionName

String

The name of the section to find or create the key in.



$keyName

String

The name of the key to change the value of or to create.



$keyValue

String

The value to set the key to.





Return parameters



Parameter

Variable Type

Description



$keyValue

String

The value of the key that was written.





Example(s):

// Set up some variables to use.

$iniPath = "C:\\Test\\myProgram.ini";

$section = "Life Universe";

$key = "TheKeyToEverything";

$value = "42";





$valueOut = IniFile_WriteKeyTolSection($iniPath, $section, $key, $value);





ReadIniFile

Previous Top Next



* * *



ReadIniFile



Usage:

$name = ReadIniFile($Path,$Section,$Item);





Description:

This function isprovided only for compatibility with 16-bit Windows-based applications. It is adviced to use XML instead. This Function uses the kernel32.dll.

This function returns the result $name of a reading to an INI file $Path .

Function Arguments



Parameter

Variable Type

Description



$Path

String

The path of where the ini file is located



$Section

String

The Section to look into



$Item

String

The Item in that section to look for





Return Parameters



Parameter

Variable Type

Description



$Name

String

The value of the found item





Example:

$checkValue = ReadIniFile("c:\\test.ini","info","name");





WriteIniFile

Previous Top Next



* * *



WriteIniFile



Usage:

$Name=WriteIniFile($Path,$Section,$Item,$Value);





Description:

This function isprovided only for compatibility with 16-bit Windows-based applications. It is adviced to use XML instead.

This Function uses the kernel32.dll.This function writes the $value into the Ini File $Path beneath Section $Section and Item $Item .

Function Arguments



Parameter

Variable Type

Description



$Path

String

The path of where the ini file is or should be created



$Section

String

The Section to look for or to create



$Item

String

The Item in that section to look for or to create



$Value

String

The value to write into that section





Return Parameters



Parameter

Variable Type

Description



$Name

String

The value written into the ini file





Example:

$Name = WriteIniFile("c:\\test.ini","section","item","something");





MicrosoftWord_Close

Previous Top Next



* * *



MicrosoftWord_Close



Usage:

MicrosoftWord_Close($file);



Description:

This function closes the Microsoft Word Document, which was opened using the MicrosoftWord_OpenDocument function. If this function is not called before ending the test script, an instance of Microsoft Word will remain running on the computer.





Note: In order to use these functions, the computer must have Microsoft Office 2003/07 installed.

Function arguments



Parameter

Variable Type

Description



$file

Object

File Object which specifies the word document to be closed.





Example(s):

$file = MicrosoftWord_OpenDocument("C:\\Documents and Settings\\dantuh\\Desktop\\Word_Doc1.doc",True);

MicrosoftWord_Close($file);





MicrosoftWord_FindAndReplace

Previous Top Next



* * *



MicrosoftWord_FindAndReplace



Usage:

MicrosoftWord_FindAndReplace($file, $textToFind, $textToReplace);



Description:

This function finds a particular string in a Microsoft Word Document previously opened using the MicrosoftWord_OpenDocument function and replaces it with the given string..





Note: In order to use these functions, the computer must have Microsoft Office 2003/07 installed.





Function arguments



Parameter

Variable Type

Description



$file

Object

File Object to access the File.



$textToFind

String

Specifies the string that needs to found



$textToReplace

String

Specifies the string that needs to be replaced with.





Example(s):





$file = MicrosoftWord_OpenDocument("C:\\Documents and Settings\\dantuh\\Desktop\\Word_Doc1.doc",True);

MicrosoftWord_FindAndReplace($file,"John","Peter");

MicrosoftWord_Close($file);





MicrosoftWord_OpenDocument

Previous Top Next



* * *



MicrosoftWord_OpenDocument



Usage:

$file = MicrosoftWord_OpenDocument($FileName ,$Visibility);





Description:

This function opens up a Microsoft Word Document specified by the $FileName parameter. The file must already exist on the file system.





Note: In order to use these functions, the computer must have Microsoft Office 2003/07 installed.

Function arguments



Parameter

Variable Type

Description



$FileName

String

Specifies the Path to access the File.



$Visibility

Boolean

Specifies to show the File or Not.





Return parameters



Parameter

Variable Type

Description



$file

Object

The File Object that was opened by the function.





Example(s):





$file = MicrosoftWord_OpenDocument("C:\\Documents and Settings\\dantuh\\Desktop\\Word_Doc1.doc",True);





MicrosoftWord_Close($file);





MicrosoftWord_RunMacro

Previous Top Next



* * *



MicrosoftWord_RunMacro



Usage:

MicrosoftWord_RunMacro($file, $macro);





Description:

This function runs an existing macro in a Microsoft Word Document previously opened using the MicrosoftWord_OpenDocument function.





Note: In order to use these functions, the computer must have Microsoft Office 2003/07 installed.

Function arguments



Parameter

Variable Type

Description



$file

Object

File Object to access the File.



$macro

String

The name of the macro to be run





Example(s):





$file = MicrosoftWord_OpenDocument("C:\\Documents and Settings\\dantuh\\Desktop\\Word_Doc1.doc",True);

MicrosoftWord_RunMacro($file,"testMacro");

MicrosoftWord_Close($file);





FileReadAllText

Previous Top Next



* * *



FileReadAllText



Usage:

$FileContents = FileReadAllText($FileName);



Description:

This function retrieves all the lines of text inside the given files, and returns it as a single string. If the file is not present, the function returns a failure.

Function arguments



Parameter

Variable Type

Description



$FileName

String

The file path/name. If no file path is specified, it's assumed that the file is located in the same directory as the JabilTest executable.





Return parameters



Parameter

Variable Type

Description



$FileContents

String

The entire text of the supplied file.





Usage Example:





$FileContents = FileReadAllText("c:\\M3_with_DPS_Abril_14.hex");

UpdateStatus($FileContents);

End;





FileReadClose

Previous Top Next



* * *



FileReadClose



Usage:

FileReadClose($fileObject);



Description:

This function closes the $fileObject on the local file system. A passing result is always returned in the event that a valid $fileObject has been passed to the function, otherwise a failure is generated.



Remarks:

The file must already have been opened with FileReadOpen.



Function Arguments



Parameter

Variable Type

Description



$textFileObject

Object

The file object that was previously opened using FileReadOpen.





Return parameters



Parameter

Variable Type

Description



None





Example:





FileReadClose($myFile);





FileReadLine

Previous Top Next



* * *



FileReadLine



Usage:

$fileString = FileReadLine($fileObject);



Description:

This function reads the contents of the current file from the current pointer location up to the next newline or EOF character. This function always generates a passing result as long as the supplied $fileObject is a valid FileReader object. In the event that the file has reach EOF, an empty string is returned.



Remarks:

The file must already have been opened with FileReadOpen.



Function Arguments



Parameter

Variable Type

Description



$fileObject

Object

The file object that was previously opened using FileReadOpen.





Return parameters



Parameter

Variable Type

Description



$myString

String

The contents of the file from the file pointers current location up to the next newline or EOF character.





Example:





$myString = FileReadLine($myFile);





FileReadOpen

Previous Top Next



* * *



FileReadOpen



Usage:

$fileObject = FileReadOpen($fileName);



Description:

This function opens a file on the local testers file system for reading. In the event that the file can't be found or accessed, the function returns a failure. Otherwise, a pass result is returned to the executive.



Remarks:

If the file is not found, the test will be failed.





Function arguments



Parameter

Variable Type

Description



$fileName

String

The name and path of the file to be opened.





Return parameters



Parameter

Variable Type

Description



$fileObject

Object

The returned variable is an Object of type 'FileReader'.





Example:





$fileName = "c:\\TestFiles\\FileToSearch.txt";



$fileObj = FileReadOpen($fileName);





FileSearchTextAndRead

Previous Top Next



* * *



FileSearchTextAndRead



Usage:

($lineNumber, $lineText) = FileSearchTextAndRead($textFileObject, $textToFind);



Description:

This function reads the specified text file a line at a time and searches each line for the specified text. when the text is found, the line number and the text line are returned.



Remarks:

The file must already have been opened with FileReadOpen.



If the search text is not found in the text file, the test will be failed.



Function arguments



Parameter

Variable Type

Description



$textFileObject

Object

The file object that was previously opened using FileReadOpen.



$textToFind

String

The text to search each line for.





Return parameters



Parameter

Variable Type

Description



$lineNumber

Integer

The number of the line that the text was found in (first line is line 0).



$lineText

String

The line of text from the file that the search text was found in.





Example:





$fileName = "c:\\TestFiles\\FileToSearch.txt";

$fileObj = FileReadOpen($fileName);



$searchText = "find this";



($lineNum, $lineText) = FileSearchTextAndRead($fileObj, $searchText);



$outStr = "Text was found on line " + $lineNum;

UpdateStatus($outStr);

$outStr = "The text of the line it was found in is: " + $lineText;

UpdateStatus($outStr);



End;





FileWrite

Previous Top Next



* * *



FileWrite



Usage:

FileWrite($fileObject, $writeString);



Description:

This function writes the contents of the $writeString argument to the current FileWriter object passed in as the first argument. Any character sequence of "\n" in the $writeString parameter is converted to a new line character. In the event that the string is written successfully to the file, a passing result is returned, otherwise a failure result is generated.



Remarks:

The file must already have been opened using the FileWriteOpen function.



Function arguments



Parameter

Variable Type

Description



$fileObject

Object

The open FileWriter object.



$writeString

String

The string to be written to the FileWriter object.





Return parameters



Parameter

Variable Type

Description



None





Example:





// Open and write to a file.

$fileHandle = FileWriteOpen("C:\\temp\\myfile.txt", "NEW");



FileWrite($fileHandle, "String goes here\n");





FileWriteClose

Previous Top Next



* * *



FileWriteClose



Usage:

FileWriteClose($fileObject);



Description:

This function closes the $fileObject on the local file system. A passing result is always returned in the event that a valid $fileObject has been passed to the function, otherwise a failure is generated.



Remarks:

The file must already have been opened using the FileWriteOpen function.



Function arguments



Parameter

Variable Type

Description



$fileObject

Object

The open FileWriter object.





Return parameters



Parameter

Variable Type

Description



None





Example:





// Open and close a file.

$fileHandle = FileWriteOpen("C:\\temp\\myfile.txt", "NEW");



FileWriteClose($fileHandle);





FileWriteOpen

Previous Top Next



* * *



FileWriteOpen



Usage:

$fileObject = FileWriteOpen($fileName, $writeMode);



Description:

This function opens a file on the local tester's file system for writing or appending. In the event that the file can't be created or opened, the function returns a failure. Otherwise, a pass result is returned to the executive.



Function arguments



Parameter

Variable Type

Description



$fileName

String

The name and path of the file to be opened.



$writeMode

String

A switch to determine how the file should be opened for writing. The supported values are: NEW = creates or overwrites an existing file for writing.

APPEND = creates a new file, or opens an existing file while preserving its existing contents.





Return parameters



Parameter

Variable Type

Description



$fileObject

Object

The returned variable is an Object of type "FileWriter".





Example:





// Open and close a file.

$fileHandle = FileWriteOpen("C:\\temp\\myfile.txt", "NEW");





XMLReadConfig

Previous Top Next



* * *



XMLReadConfig



Usage:

$value = XmlReadConfig($filePath, $PCName, $projectName, $diversityKey, $parameter, $updateStatus);



Description:

This function reads a value from the XML config file. It is meant to be used as a generic config file.

There are sections for PCNAME, PROJECTNAME and DIVERSITY

In that way it is possible to run a project on more then one PC (PCNAME) and still have its own PC dedicated parameters

It is also possible to have different versions (DIVERSITY) of the project running , each with its own parameters.

The file can also be use to manage more projects within the same file (PROJECTNAME)

See the example file : XML Example

The XML file must be built up according to the following description:

The mandatory sections are PCNAME, PROJECTNAME, DIVERSITY.

They should be implemented as in the example, same order and syntax.

Within this DIVERSITY section, it is allowed to put whatever is accepted by XML syntax and is needed for your diversity.

Be careful to use unique names for each keys as it is the first occurrence of a key that is returned.



Function arguments



Parameter

Variable Type

Description



$filePath

String

The path + FileName



$PCName

String

The PCNAME or TesterID



$projectName

String

The ProjectName



$diversityKey

String

The Diversity Key



$parameter

String

The Parameter to be read out



$updateStatus

String

Update of the Status Display "0" means NO, "1" means YES





Return parameters



Parameter

Variable Type

Description



$value

String/b>

The actual value read out





Example:





$filePath = "c:\\scripts\\ruif.xml";

$pcName = "MYPC1";

$projectName = "MEDICAL RUIF";

$diversityKey = "A";

$parameter = "PMKey1";

$updateStatus = "1";



$value = XmlReadConfig($filePath, $pcName, $projectName, $diversityKey, $parameter, $updateStatus);





iFactory_AbortWIP

Previous Top Next



* * *



iFactory_AbortWIP



Usage:

($routeIds, $routeNames) = iFactory_AbortWIP($iFactoryToken);



Description:

This function will abort an already started WIP.





Remarks:

A connection to the API server must already have been established with iFactory_Connect.

The WIP must already have been started with iFactory_StartWIP.



Function arguments



Parameter

Variable Type

Description



$iFactoryToken

Object

The object returned by the iFactory_StartWIP function.





Return parameters



Parameter

Variable Type

Description



$routeIds

String Array

The list of queued route step IDs for the next steps of the aborted WIP.



$routeNames

String Array

The list of queued route step names for the next steps of the aborted WIP.





Example:





// Connect to the API and log in.

$url = "http://apiserver01:60200";

$userName = "thisUser";

$password = "abc123";

$iFToken = iFactory_Connect($url, $userName, $password);



// Start a WIP.

$serial = "S00001";

$resource = "TestMachine01";

$iFStarted = iFactory_StartWIP($iFToken, $serial, $resource);



// Abort the WIP.

($routeIds, $routeSteps) = iFactory_AbortWIP($iFStarted);



// Print out the list of Route IDs and Route Step Names.

$numSteps = ArrayGetLength($routeIds);

$loopCount = 0;

while($loopCount < $numSteps)

{

$oneId = Array1DGetValue($routeIds, $loopCount);

$oneName = Array1DGetValue($routeNames, $loopCount);

$outString = "Step ID =\t" + $oneId + "\tStep Name =\t" + $oneName;

UpdateStatus($outString);

$loopCount = $loopCount + 1;



}





iFactory_Close

Previous Top Next



* * *



iFactory_Close



Usage:

iFactory_Close($iFactoryToken);



Description:

This function will close communication with the API server.





Remarks:

A connection to the API server must already have been established with iFactory_Connect.

The WIP may already have been started with iFactory_StartWIP.



Function arguments



Parameter

Variable Type

Description



$iFactoryToken

Object

The object returned by the iFactory_StartWIP function or the iFactory_Connect function.





Return parameters



Parameter

Variable Type

Description



None





Example:





// Connect to the API and log in.

$url = "http://apiserver01:60200";

$userName = "thisUser";

$password = "abc123";

$iFToken = iFactory_Connect($url, $userName, $password);



// Close the connection.

iFactory_Close($iFToken);





iFactory_Connect

Previous Top Next



* * *



iFactory_Connect



Usage:

$iFactoryToken = iFactory_Connect($apiURL, $userName, $password);



Description:

This function will connect to an iFactory StackTest API server and log in.





Remarks:

An error is generated if the URL does not connect or the username and password fail.



Function arguments



Parameter

Variable Type

Description



$apiURL

String

The URL to connect to the iFactory StackTest API.



$userName

String

The name of the user to log in.



$password

String

The user's password for logging in.





Return parameters



Parameter

Variable Type

Description



$iFactoryToken

Object

An object that contains the security token. Passed this in to all succeeding iFactory functions for this user.





Example:





// Connect to the API and log in.

$url = "http://apiserver01:60200";

$namePrompt = "Enter your User Name for login:";

$passPrompt = "Enter your password:";

$userName = OperatorInputPrompt($namePrompt);

$password = OperatorInputPasswordPrompt($namePrompt);



$iFToken = iFactory_Connect($url, $userName, $password);





iFactory_FailWIP

Previous Top Next



* * *



iFactory_FailWIP



Usage:

($routeIds, $routeNames) = iFactory_FailWIP($iFactoryToken, $failLabel[, $failMessage]);



Description:

This function will insert a failure for an already started WIP and then completes the WIP.





Remarks:

A connection to the API server must already have been established with iFactory_Connect.

The WIP must already have been started with iFactory_StartWIP.



Function arguments



Parameter

Variable Type

Description



$iFactoryToken

Object

The object returned by the iFactory_StartWIP function.



$failLabel

String

The failure label (or symptom label) for this failure.



$failMessage

String

[Optional] The failure message for this failure.





Return parameters



Parameter

Variable Type

Description



$routeIds

String Array

The list of queued route step IDs for the next steps of the failed WIP.



$routeNames

String Array

The list of queued route step names for the next steps of the failed WIP.





Example:





// Connect to the API and log in.

$url = "http://apiserver01:60200";

$userName = "thisUser";

$password = "abc123";

$iFToken = iFactory_Connect($url, $userName, $password);



// Start a WIP.

$serial = "S00001";

$resource = "TestMachine01";

$iFStarted = iFactory_StartWIP($iFToken, $serial, $resource);



// Fail the WIP.

$failLabel = "It blew up.";

$failMessage = "Not all pieces recovered.";

($routeIds, $routeSteps) = iFactory_FailWIP($iFStarted, $failLabel, $failMessage);



// Print out the list of Route IDs and Route Step Names.

$numSteps = ArrayGetLength($routeIds);

$loopCount = 0;

while($loopCount < $numSteps)

{

$oneId = Array1DGetValue($routeIds, $loopCount);

$oneName = Array1DGetValue($routeNames, $loopCount);

$outString = "Step ID =\t" + $oneId + "\tStep Name =\t" + $oneName;

UpdateStatus($outString);

$loopCount = $loopCount + 1;



}





iFactory_GetProductionOrderAttribute

Previous Top Next



* * *



iFactory_GetProductionOrderAttribute



Usage:

$poAttribute = iFactory_GetProductionOrderAttribute($iFactoryToken, $serialNumber, $attribute[, $customerId]);



Description:

This function will return the value of the specified Production Order Attribute.





Remarks:

A connection to the API server must already have been established with the iFactory_Connect function.





Function arguments



Parameter

Variable Type

Description



$iFactoryToken

Object

The object returned by the iFactory_Connect function.



$serialNumber

String

The serial number of the item to get the attribute for.



$attribute

String

The name of the attribute to get the value of.



$customerId

Integer

[Optional] The ID of the customer.





Return parameters



Parameter

Variable Type

Description



$poAttribute

String

The value of the specified purchase order attribute.





Example:





// Connect to the API and get an attribute.

$url = "http://apiserver01:60200";

$serialNum = "S000001";

$attrib = "ShipDate";



$attribValue = iFactory_GetProductionOrderAttribute($url, $serialNum, $attrib);



// Print out the attribute value.

UpdateStatus($attribValue);





iFactory_PassWIP

Previous Top Next



* * *



iFactory_PassWIP



Usage:

($routeIds, $routeNames) = iFactory_PassWIP($iFactoryToken);



Description:

This function will pass and complete an already started WIP.





Remarks:

A connection to the API server must already have been established with iFactory_Connect.

The WIP must already have been started with iFactory_StartWIP.



Function arguments



Parameter

Variable Type

Description



$iFactoryToken

Object

The object returned by the iFactory_StartWIP function.





Return parameters



Parameter

Variable Type

Description



$routeIds

String Array

The list of queued route step IDs for the next steps of the passed WIP.



$routeNames

String Array

The list of queued route step names for the next steps of the passed WIP.





Example:





// Connect to the API and log in.

$url = "http://apiserver01:60200";

$userName = "thisUser";

$password = "abc123";

$iFToken = iFactory_Connect($url, $userName, $password);



// Start a WIP.

$serial = "S00001";

$resource = "TestMachine01";

$iFStarted = iFactory_StartWIP($iFToken, $serial, $resource);



// Pass the WIP.

($routeIds, $routeSteps) = iFactory_PassWIP($iFStarted);



// Print out the list of Route IDs and Route Step Names.

$numSteps = ArrayGetLength($routeIds);

$loopCount = 0;

while($loopCount < $numSteps)

{

$oneId = Array1DGetValue($routeIds, $loopCount);

$oneName = Array1DGetValue($routeNames, $loopCount);

$outString = "Step ID =\t" + $oneId + "\tStep Name =\t" + $oneName;

UpdateStatus($outString);

$loopCount = $loopCount + 1;



}





iFactory_RetrieveWipGenealogyById

Previous Top Next



* * *



iFactory_RetrieveWipGenealogyById



Usage:

$wipHistoryArray = iFactory_RetrieveWipGenealogyById($iFactoryToken, $wipId, $maxLevel, $serialized);



Description:

This function returns an array of comma delimited strings for the selected WIPs history.





Remarks:

A connection to the API server must already have been established with the iFactory_Connect function.

The WIP ID can be obtained from the iFactory_RetrieveWipIds function.

The fields in the CSV strings for a history are (in order):

Assembled Date

Assembled Route Step

CRD

ID

Manufacturer Part Number

Material ID

Material Name

Material Plant Code

Operator User Login

Parent ID

Phoenix Material Type

Quantity

Return Count

Serialized Material ID

Serial Number

WIP ID.





Function arguments



Parameter

Variable Type

Description



$iFactoryToken

Object

The object returned by the iFactory_Connect function.



$wipId

String

The ID of the WIP to get the history of.



$maxLevel

Integer

The maximum number of history lines to return. From 1 to 10.



$serialized

Boolean

Whether to return history for only serialized materials.





Return parameters



Parameter

Variable Type

Description



$wipIdArray

String Array

The array of CSV strings with the history data.





Example:





// Connect to the API and log in.

$url = "http://apiserver01:60200";

$userName = "thisUser";

$password = "abc123";

$iFToken = iFactory_Connect($url, $userName, $password);



// Get the WIP IDs.

$serial = "S00001";

$wipArray = iFactory_RetrieveWipIds($iFToken, $serial);



// Get the history for the first WIP ID.

$firstWIP = Array1DGetValue($wipArray, 0);

$maxLevel = 10;

$serial = false;

$histArray = iFactory_RetrieveWipGenealogyById(iFToken, $firstWIP, $maxLevel, $serial);





iFactory_RetrieveWipIds

Previous Top Next



* * *



iFactory_RetrieveWipIds



Usage:

$wipIdArray = iFactory_RetrieveWipIds($iFactoryToken, $serialNumber[, $customerName[, $material[, $plantCode]]]);



Description:

This function returns an array of WIP IDs that are for the specified serial number and optionally, the customer name, material name and material plant code.





Remarks:

A connection to the API server must already have been established with the iFactory_Connect function.

To include any optional parameter, the optional parameters before it must be included. For example, to include $material, you must also include $customer. To include $plantCode, you must include $customer and $material.



Function arguments



Parameter

Variable Type

Description



$iFactoryToken

Object

The object returned by the iFactory_Connect function.



$serialNumber

String

The serial number of the WIP to retrieve.



$customer

String

[Optional] The name of the customer that this WIP belongs to.



$material

String

[Optional] The name of the material for this WIP.



$plantCode

String

[Optional] The material plant code for this WIP.





Return parameters



Parameter

Variable Type

Description



$wipIdArray

Array

The list of WIP IDs for this serial number.





Example:





// Connect to the API and log in.

$url = "http://apiserver01:60200";

$userName = "thisUser";

$password = "abc123";

$iFToken = iFactory_Connect($url, $userName, $password);



// Get the WIP IDs.

$serial = "S00001";

$wipArray = iFactory_RetrieveWipIds($iFToken, $serial);



// Print out the number of WIPS found.

$numWips = ArrayGetLength($wipArray);

$outString = "Found " + $numWips + "WIPs";

UpdateStatus($outString);





iFactory_StartWIP

Previous Top Next



* * *



iFactory_StartWIP



Usage:

$wipStartedToken = iFactory_StartWIP($iFactoryToken, $serialNumber, $resource[, $customer[, $material[, $plantCode]]]);



Description:

This function will start the WIP for the $resource in iFactory.





Remarks:

A connection to the API server must already have been established with the iFactory_Connect function.

To include any optional parameter, the optional parameters before it must be included. For example, to include $material, you must also include $customer. To include $plantCode, you must include $customer and $material.



Function arguments



Parameter

Variable Type

Description



$iFactoryToken

Object

The object returned by the iFactory_Connect function.



$serialNumber

String

The serial number of the WIP to start.



$resource

String

The name of the resource that the WIP is being started for (this is usually the route step name).



$customer

String

[Optional] The name of the customer that this WIP belongs to.



$material

String

[Optional] The name of the material for this WIP.



$plantCode

String

[Optional] The material plant code for this WIP.





Return parameters



Parameter

Variable Type

Description



$wipStartedToken

Object

An object that will need to be passed to the iFactory_AbortWIP, iFactory_FailWIP, or iFactory_PassWIP functions.





Example:





// Connect to the API and log in.

$url = "http://apiserver01:60200";

$userName = "thisUser";

$password = "abc123";

$iFToken = iFactory_Connect($url, $userName, $password);



// Start a WIP.

$serial = "S00001";

$resource = "TestMachine01";

$iFStarted = iFactory_StartWIP($iFToken, $serial, $resource);





ImageGetBlueIntensity

Previous Top Next



* * *



ImageGetBlueIntensity



Usage:

($AverageValue,$LowValue,$HighValue) = ImageGetBlueIntensity($FileName,$RegionX,$RegionY,$Width,$Height);



Description:

This function calculates the intensity value of the given region of interest in the specified region. The upper left rectangle of the area of interest is defined by the point specified by the $RegionX,$RegionY arguments. The lower right corner of the region of interest is defined by the $Width,$Height arguments. The function returns the average, highest, and lowest pixel value intensity found in the region of interest for the specified color plane.



Requirements:



Usage Example:

($Avg,$High,$Low) = ImageGetBlueIntensity("c:\\myFile.bmp",400,500,35,100);

Function arguments



Parameter

Variable Type

Description



$FileName

String

The filename and path of the image to analyze.



$RegionX

Integer

The upper left X coordinate of the region of interest.



$RegionY

Integer

The upper left Y coordinate of the region of interest.



$Width

Integer

The width in pixels of the region of interest.



$Height

Integer

The height in pixels of the region of interest.





Return parameters



Parameter

Variable Type

Description



$AverageValue

Integer

The average value of the pixels in the region of interest.



$LowValue

Integer

The lowest pixel value found in the region of interest.



$HighValue

Integer

The highest pixel value found in the region of interest.





ImageGetGreenIntensity

Previous Top Next



* * *



ImageGetGreenIntensity



Usage:

($AverageValue,$LowValue,$HighValue) = ImageGetGreenIntensity($FileName,$RegionX,$RegionY,$Width,$Height);



Description:

This function calculates the intensity value of the given region of interest in the specified region. The upper left rectangle of the area of interest is defined by the point specified by the $RegionX,$RegionY arguments. The lower right corner of the region of interest is defined by the $Width,$Height arguments. The function returns the average, highest, and lowest pixel value intensity found in the region of interest for the specified color plane.



Requirements:



Usage Example:

($Avg,$High,$Low) = ImageGetGreenIntensity("c:\\myFile.bmp",400,500,35,100);

Function arguments



Parameter

Variable Type

Description



$FileName

String

The filename and path of the image to analyze.



$RegionX

Integer

The upper left X coordinate of the region of interest.



$RegionY

Integer

The upper left Y coordinate of the region of interest.



$Width

Integer

The width in pixels of the region of interest.



$Height

Integer

The height in pixels of the region of interest.





Return parameters



Parameter

Variable Type

Description



$AverageValue

Integer

The average value of the pixels in the region of interest.



$LowValue

Integer

The lowest pixel value found in the region of interest.



$HighValue

Integer

The highest pixel value found in the region of interest.





ImageGetMonoIntensity

Previous Top Next



* * *



ImageGetMonoIntensity



Usage:

($AverageValue,$LowValue,$HighValue) = ImageGetMonoIntensity($FileName,$RegionX,$RegionY,$Width,$Height);



Description:

This function calculates the intensity value of the given region of interest in the specified region. The upper left rectangle of the area of interest is defined by the point specified by the $RegionX,$RegionY arguments. The lower right corner of the region of interest is defined by the $Width,$Height arguments. The function returns the average, highest, and lowest pixel value intensity found in the region of interest for the specified color plane.



Requirements:



Usage Example:

($Avg,$High,$Low) = ImageGetMonoIntensity("c:\\myFile.bmp",400,500,35,100);

Function arguments



Parameter

Variable Type

Description



$FileName

String

The filename and path of the image to analyze.



$RegionX

Integer

The upper left X coordinate of the region of interest.



$RegionY

Integer

The upper left Y coordinate of the region of interest.



$Width

Integer

The width in pixels of the region of interest.



$Height

Integer

The height in pixels of the region of interest.





Return parameters



Parameter

Variable Type

Description



$AverageValue

Integer

The average value of the pixels in the region of interest.



$LowValue

Integer

The lowest pixel value found in the region of interest.



$HighValue

Integer

The highest pixel value found in the region of interest.





ImageGetPixelFormat

Previous Top Next



* * *



ImageGetPixelFormat

Usage:

$PixelFormat = ImageGetPixelFormat($FileName);



Description:



This function returns a string containing the pixel format of the image including color space information, and bit depth per pixel.

Function arguments



Parameter

Variable Type

Description



$FileName

String

The filename and path of the image to analyze.





Return parameters



Parameter

Variable Type

Description



$PixelFormat

String

A string containing the pixel format of the image specifying the color space and the number of bits per pixel. (ex. "RGB24BPP")





Usage Example:





$PixelFormat = ImageGetPixelFormat("c:\\ocrimage.jpg");

UpdateStatus($PixelFormat);





ImageGetRedIntensity

Previous Top Next



* * *



ImageGetRedIntensity



Usage:

($AverageValue,$LowValue,$HighValue) = ImageGetRedIntensity($FileName,$RegionX,$RegionY,$Width,$Height);



Description:

This function calculates the intensity value of the given region of interest in the specified region. The upper left rectangle of the area of interest is defined by the point specified by the $RegionX,$RegionY arguments. The lower right corner of the region of interest is defined by the $Width,$Height arguments. The function returns the average, highest, and lowest pixel value intensity found in the region of interest for the specified color plane.



Requirements:



Usage Example:

($Avg,$High,$Low) = ImageGetRedIntensity("c:\\myFile.bmp",400,500,35,100);

Function arguments



Parameter

Variable Type

Description



$FileName

String

The filename and path of the image to analyze.



$RegionX

Integer

The upper left X coordinate of the region of interest.



$RegionY

Integer

The upper left Y coordinate of the region of interest.



$Width

Integer

The width in pixels of the region of interest.



$Height

Integer

The height in pixels of the region of interest.





Return parameters



Parameter

Variable Type

Description



$AverageValue

Integer

The average value of the pixels in the region of interest.



$LowValue

Integer

The lowest pixel value found in the region of interest.



$HighValue

Integer

The highest pixel value found in the region of interest.





ImageGetResolution

Previous Top Next



* * *



ImageGetResolution



Usage:

($XResolution,$YResolution) = ImageGetResolution($FileName);



Description:



This function returns the horizontal and vertical resolution of the image expressed in Pixels Per Inch.

Function arguments



Parameter

Variable Type

Description



$FileName

String

The filename and path of the image to analyze.





Return parameters



Parameter

Variable Type

Description



$XResolution

Float

The horizontal resolution of the image in pixels per inch.



$YResolution

Float

The vertical resolution of the image in pixels per inch.





Usage Example:

($XResolution,$YResolution)=ImageGetResolution("c:\\ocrimage.jpg");

UpdateStatus($XResolution);

UpdateStatus($YResolution);





ImageGetSize

Previous Top Next



* * *



ImageGetSize



Usage:

($Width,$Height) = ImageGetSize($FileName);



Description:



This function returns the width and height of an image in pixels.

Function arguments



Parameter

Variable Type

Description



$FileName

String

The filename and path of the image to analyze.





Return parameters



Parameter

Variable Type

Description



$Width

Integer

The width of the image in pixels



$Height

Integer

The height of the image in pixels





Usage Example:

($XSize,$YSize)=ImageGetSize("c:\\ocrimage.jpg");

UpdateStatus($XSize);

UpdateStatus($YSize);





FastBitmap_CountPixelsInHSVRange

Previous Top Next



* * *



FastBitmap_CountPixelsInHSVRange



Usage:

$PixelCount = FastBitmap_CountPixelsInHSVRange($Image,$Hmin, $Smin, $Vmin, $Hmax, $Smax, $Vmax, $PixelList, $ShowDebugImage);





Description:





This function counts pixels of a bitmap object based on HSV values. If a pixel's HSV value falls within the high and low limits specified for all three values (Hue, Saturation and Value), the pixel is included in the total pixel count that is returned.





This function requires a pixel list object be provided as an input parameter. A pixel list can be thought of as an advanced ROI description. It contains a list of pixels in the image where you are interested in performing analysis. It can be as simple as a single rectangular or circle ROI description, or a combination of numerous rectangular or circle areas in the image. A pixel list can be created using the following functions:

FastBitmap_GetPixelListFromCircleRadius

FastBitmap_GetPixelListFromRectangle

FastBitmap_CreateSupersetFromPixelLists





This function is useful for calculating area, coverage, and distribution of specific colors within an image.





The image below is a flattened representation of the HSV color space. For more information regarding color space please visit: http://en.wikipedia.org/wiki/HSL_and_HSV





Function arguments



Parameter

Variable Type

Description



$Image

Object

A bitmap image object.



$Hmin

Integer

The lower limit of Hue for pixel color comparison. Note: Since Hue is a cylindrical-coordinate and could wrap around the zero value, if the lower limit for Hue is greater than the higher limit, the function will work on the assumption that the user wants to select Hue values that cross the zero value. The range of values for Hue is 0-360 however, the 360 value is never realized since 360 would equal zero. The actual range of Hue values is [0,360).



$Smin

Integer

The lower limit of Saturation for pixel color comparison. The range of Saturation values is [0,100].



$Vmin

Integer

The lower limit of Value for pixel color comparison. The range of Value values is [0,100].



$Hmax

Integer

The upper limit of Hue for pixel color comparison. See note above regarding wrap.



$Smax

Integer

The upper limit of Saturation for pixel color comparison. The range of Saturation values is [0,100].



$Vmax

Integer

The upper limit of Value for pixel color comparison. The range of Value values is [0,100].



$PixelList

Object

A list object that contains pixels of interest. This list is created using other FastBitmap functions (see explanation above).



$ShowDebugImage

Boolean

Specifies whether to show the debug image. The pixels that meet the HSV input range requirements will be filled gray. [TRUE,FALSE]



Return parameters



Parameter

Variable Type

Description



$PixelCount

Integer

The number of pixels found within the pixel list that match the input HSV color range





Usage Example:





//Load image

$Image = FastBitmap_LoadImageFromFile("C:\\JabilTestScripts\\Jellyfish.jpg");

// Display original image

FastBitmap_DisplayImage($Image);

// Fill pixels with black (HSV = 0,0,0) based on Hue to eliminate colors other than redish orange

$FBResultImage = FastBitmap_FillByHSV($Image,71,249,0,100,0,100,0,0,0);

// Fill pixels with black (HSV = 0,0,0) to eliminate lower saturation levels

$FBResultImage = FastBitmap_FillByHSV($FBResultImage,0,360,0,40,0,100,0,0,0);

// Display and save results of 2nd fill

FastBitmap_DisplayImage($FBResultImage);

FastBitmap_SaveImageToFile($FBResultImage,"C:\\JabilTestScripts\\Jellyfish2ndFill.jpg","JPEG");

// create pixel list for area to count pixels

$PixelList1 = FastBitmap_GetPixelListFromRectangle(50,100,150,100);

$PixelCount = FastBitmap_CountPixelsInHSVRange($FBResultImage,0,1,1,360,100,100,$PixelList1,true);

FastBitmap_DisposeImage($Image);

FastBitmap_DisposeImage($FBResultImage);

End;

Image after 2nd fill



Debug image from FastBitmap_CountPixelsInHSVRange



The debug image indicates which pixels in the pixel list that were found to be in range by filling those pixels with grey.





The result is a count of pixels that meet all of the minimum and maximum HSV parameters specified. Using the original pixel count from the FastBitmap_GetPixelListFromRectangle (15251) and the count from FastBitmap_GetPixelsInHSVRange, you can see that 7625 out of 15251 pixels were within the HSV parameters.

FastBitmap_GetPixelListFromRectangle: Pixel Count [15251]

FastBitmap_CountPixelsInHSVRange: Pixel Count [7625]





Important Note:

The FastBitmap Class is faster than standard bitmap pixel operations but slower than the OpenCV library functions. OpenCV functions should be your first choice for speed if an equivalent function is available.





The FastBitmap Class works on standard Bitmap image object within JabilTest. OpenCV image objects have a different structure. To use an image processed by the FastBitmap class with an OpenCV function, you must open the image using an OpenCV function in order to obtain the correct structure.





FastBitmap_CreateSupersetFromPixelLists

Previous Top Next



* * *



FastBitmap_CreateSupersetFromPixelLists



Usage:

($SupersetPixelList, $SupersetPixelCount) = FastBitmap_CreateSupersetFromPixelLists($PixelList1, $PixelList2);





Description:





This function takes in two pixel list objects and combines them to create a single superset of pixels returned in a single pixel list object. The function also returns the count of pixels contained in this new superset pixel list object.





This function requires a pixel list object be provided as an input parameter. A pixel list can be thought of as an enhanced ROI description. It contains a list of pixels in the image where you are interested in performing analysis. It can be as simple as a single rectangular or circle ROI description, or a combination of numerous rectangular or circle areas in the image. A pixel list can be created using the following functions:

FastBitmap_GetPixelListFromCircleRadius

FastBitmap_GetPixelListFromRectangle

FastBitmap_CreateSupersetFromPixelLists

Function arguments



Parameter

Variable Type

Description



$PixelList1

Object

A list object that contains pixels of interest. This list is created using other FastBitmap functions (see explanation above).



$PixelList2

Object

A list object that contains pixels of interest. This list is created using other FastBitmap functions (see explanation above).





Return parameters



Parameter

Variable Type

Description



$SupersetPixelList

Object

A superset list of pixels resulting from the combination of two other pixel lists.



$SupersetPixelCount

Integer

The number of pixels contained in the newly created pixel list.





The pixel list object returned from this function can in turn be passed back into it with another function call to create a superset of a superset. This can be repeated until all pixel lists (ROIs) have been combined together.





Usage Example:





//Load image

$Image = FastBitmap_LoadImageFromFile("C:\\JabilTestScripts\\Jellyfish.jpg");

// create a pixel list from a rectangle

$PixelList1 = FastBitmap_GetPixelListFromCircleRadius(100,100,50);

// create a pixel list from a rectangle

$PixelList2 = FastBitmap_GetPixelListFromCircleRadius(150,100,50);

// create a superset using $PixelList1 and $PixelList2

$PixelSuperSet = FastBitmap_CreateSupersetFromPixelLists($PixelList1,$PixelList2);

// Display Pixel super set list by filling pixels in image with green (HSV = 120,100,100)

$FBResultImage = FastBitmap_FillPixelListByHSV($Image,$PixelSuperSet,true,120,100,100);

// display and save image

FastBitmap_DisplayImage($FBResultImage);

FastBitmap_SaveImageToFile($FBResultImage,"C:\\JabilTestScripts\\JellyfishPixelSuperSet.jpg","JPEG");

// dispose of images

FastBitmap_DisposeImage($Image);

FastBitmap_DisposeImage($FBResultImage);

Original image



Image with superset filled





Important Note:

The FastBitmap Class is faster than standard bitmap pixel operations but slower than the OpenCV library functions. OpenCV functions should be your first choice for speed if an equivalent function is available.





The FastBitmap Class works on standard Bitmap image object within JabilTest. OpenCV image objects have a different structure. To use an image processed by the FastBitmap class with an OpenCV function, you must open the image using an OpenCV function in order to obtain the correct structure.





FastBitmap_DisplayImage

Previous Top Next



* * *



FastBitmap_DisplayImage



Usage:

FastBitmap_DisplayImage($Image);



Description:

This function will open a diagnostic and debug window displaying the Bitmap image passed to the function. The $Image parameter must be a Bitmap image object. Note: This function is not compatible with OpenCV image types.





Function arguments



Parameter

Variable Type

Description



$Image

Object

A Bitmap image object.





Return parameters



Parameter

Variable Type

Description



None





Usage Example:





$FBImage = FastBitmap_LoadImageFromFile("c:\\myBitmap.bmp");

FastBitmap_DisplayImage($FBImage);

FastBitmap_DisposeImage($FBImage);





Important Note:

The FastBitmap Class is faster than standard bitmap pixel operations but slower than the OpenCV library functions. OpenCV functions should be your first choice for speed if an equivalent function is available.





The FastBitmap Class works on standard Bitmap image object within JabilTest. OpenCV image objects have a different structure. To use an image processed by the FastBitmap class with an OpenCV function, you must open the image using an OpenCV function in order to obtain the correct structure.





FastBitmap_DisposeImage

Previous Top Next



* * *



FastBitmap_DisposeImage



Usage:

FastBitmap_DisposeImage($Image);



Description:





This function will dispose of the memory resources used to hold the Image object.





This function should be used to clean up any FastBitmap Image resources after they are no longer used in the test script.





Function arguments



Parameter

Variable Type

Description



$Image

Object

An Bitmap image object of any resolution, format, or color depth





Return parameters



Parameter

Variable Type

Description



None





Usage Example:





FastBitmap_DisposeImage($MyImage); // Removes $MyImage from Memory...





Important Note:

The FastBitmap Class is faster than standard bitmap pixel operations but slower than the OpenCV library functions. OpenCV functions should be your first choice for speed if an equivalent function is available.





The FastBitmap Class works on standard Bitmap image object within JabilTest. OpenCV image objects have a different structure. To use an image processed by the FastBitmap class with an OpenCV function, you must open the image using an OpenCV function in order to obtain the correct structure.





FastBitmap_DumpImageToCSV

Previous Top Next



* * *



FastBitmap_DumpImageToCSV



Usage:

FastBitmap_DumpImageToCSV($Image, $CSVFileName);





Description:





This function is useful for offline image pixel analysis for color scale and distribution. It can be used to analyze the RGB and HSV values for every pixel in an image to get a better understanding of the image color space for use with other HSV and RGB functions.





This function takes an image bitmap object and writes a .csv file with one line per pixel containing the following information:

"Name,PixelX,PixelY,R,G,B,Hue,Saturation,Value"



Function arguments



Parameter

Variable Type

Description



$Image

Object

A bitmap image object.



$CSVFileName

String

The save destination filename and path.



Return parameters



Parameter

Variable Type

Description



None





Usage Example:





FastBitmap_DumpImageToCSV($FBImage, "C:\\PixelColorValues.csv");





Important Note:

The FastBitmap Class is faster than standard bitmap pixel operations but slower than the OpenCV library functions. OpenCV functions should be your first choice for speed if an equivalent function is available.





The FastBitmap Class works on standard Bitmap image object within JabilTest. OpenCV image objects have a different structure. To use an image processed by the FastBitmap class with an OpenCV function, you must open the image using an OpenCV function in order to obtain the correct structure.





FastBitmap_BinarizeOnHSV

Previous Top Next



* * *



FastBitmap_FillByHSV



Usage:

$FBResultImage = FastBitmap_FillByHSV($FBImage,$Hmin,$Hmax,$Smin,$Smax,$Hmin,$Hmax,$Hfill,$Sfill,$Vfill);



Description:

This function fills a bitmap object based on HSV values. If a pixel's HSV value falls within the high and low limits specified for all three values (Hue, Saturation and Value), the pixel's color is changed to the HSV value specified by the pixel fill parameters.





This function is useful for segmenting an image based on HSV in order to eliminate background clutter and improve image or edge pattern matching probability.





The image below is a flattened representation of the HSV color space. For more information regarding color space please visit: http://en.wikipedia.org/wiki/HSL_and_HSV



Function arguments



Parameter

Variable Type

Description



$FBImage

Object

A Bitmap Image object.



$Hmin

Integer

The lower limit of Hue for pixel color comparison. Note: Since Hue is a cylindrical-coordinate and could wrap around the zero value, if the lower limit for Hue is greater than the higher limit, the function will work on the assumption that the user wants to select Hue values that cross the zero value. The range of values for Hue is 0-360 however, the 360 value is never realized since 360 would equal zero. The actual range of Hue values is [0,360).



$Hmax

Integer

The upper limit of Hue for pixel color comparison. See note above regarding wrap.



$Smin

Integer

The lower limit of Saturation for pixel color comparison. The range of Saturation values is [0,100].



$Smax

Integer

The upper limit of Saturation for pixel color comparison. The range of Saturation values is [0,100].



$Vmin

Integer

The lower limit of Value for pixel color comparison. The range of Value values is [0,100].



$Vmax

Integer

The upper limit of Value for pixel color comparison. The range of Value values is [0,100].



$Hfill

Integer

Pixels within all three criteria of Hue, Saturation and Value will be set to this Hue value. Hue range is [0,360).



$Sfill

Integer

Pixels within all three criteria of Hue, Saturation and Value will be set to this Saturation value. Saturation range is [0,100].



$Vfill

Integer

Pixels within all three criteria of Hue, Saturation and Value will be set to this Value. Value range is [0,100].





Return parameters



Parameter

Variable Type

Description



$FBResultImage

Object

A Bitmap Image object.





Usage Example:

//Load image

$Image = FastBitmap_LoadImageFromFile("C:\\JabilTestScripts\\Jellyfish.jpg");

// Display original image

FastBitmap_DisplayImage($Image);

// Fill pixels with black (HSV = 0,0,0) based on Hue to eliminate colors other than redish orange

$FBResultImage = FastBitmap_FillByHSV($Image,71,249,0,100,0,100,0,0,0);

// Display and save results of 1st fill

FastBitmap_DisplayImage($FBResultImage);

FastBitmap_SaveImageToFile($FBResultImage,"C:\\JabilTestScripts\\Jellyfish1stFill.jpg","JPEG");

// Fill pixels with black (HSV = 0,0,0) to eliminate lower saturation levels

$FBResultImage = FastBitmap_FillByHSV($FBResultImage,0,360,0,40,0,100,0,0,0);

// Display and save results of 2nd fill

FastBitmap_DisplayImage($FBResultImage);

FastBitmap_SaveImageToFile($FBResultImage,"C:\\JabilTestScripts\\Jellyfish2ndFill.jpg","JPEG");

// Dispose and quit

FastBitmap_DisposeImage($Image);

FastBitmap_DisposeImage($FBResultImage);

End;





Original Image



After 1st FastBitmap_FillByHSV



After 2nd FastBitmap_FillByHSV





Important Note:

The FastBitmap Class is faster than standard bitmap pixel operations but slower than the OpenCV library functions. OpenCV functions should be your first choice for speed if an equivalent function is available.





The FastBitmap Class works on standard Bitmap image object within JabilTest. OpenCV image objects have a different structure. To use an image processed by the FastBitmap class with an OpenCV function, you must open the image using an OpenCV function in order to obtain the correct structure.





FastBitmap_FillByPixelList

Previous Top Next



* * *



FastBitmap_FillPixelListByHSV



Usage:

$FilledImage = FastBitmap_FillPixelListByHSV($Image, $PixelList, $FillList, $Hfill, $Sfill, $Vfill);





Description:





This function performs a HSV color fill on a bitmap image object. The user specifies the HSV values to use for the color fill. The color fill pixel area is specified using the two input parameters: $PixelList and $FillList.





$PixelList: This function requires a pixel list object be provided as an input parameter. A pixel list can be thought of as an advanced ROI description. It contains a list of pixels in the image where you are interested in performing analysis. It can be as simple as a single rectangular or circle ROI description, or a combination of numerous rectangular or circle areas in the image. A pixel list can be created using the following functions:

FastBitmap_GetPixelListFromCircleRadius

FastBitmap_GetPixelListFromRectangle

FastBitmap_CreateSupersetFromPixelLists





$FillList: This is a boolean value used to specify whether to color fill only the pixels contained in the input pixel list or color fill all of the pixels not contained in the pixel list.

Function arguments



Parameter

Variable Type

Description



$Image

Object

A bitmap image object.



$PixelList

Object

A list object that contains pixels of interest. This list is created using other FastBitmap functions (see explanation above).



$FillList

Boolean

A boolean value indicating which portion of the image to fill with the input HSV values

TRUE: Fill only the pixels contained in the pixel list with the input HSV values. Useful in masking specific features/areas in the image.

FALSE: Fill only the pixels not contained in the pixel list with the input HSV values. Useful in masking out background noise to uniform color.



$Hfill

Integer

The Hue value that will be used to fill the pixels based on the boolean value. Hue range is [0,360].



$Sfill

Integer

The Saturation value that will be used to fill the pixels based on the boolean value. Saturation range is [0,100].



$Vfill

Integer

The Value that will be used to fill the pixels based on the boolean value. Value range is [0,100].





Return parameters



Parameter

Variable Type

Description



$FilledImage

Object

A bitmap image object that has been updated with HSV color fill based on the input parameters.





Usage Example:





//Load image

$Image = FastBitmap_LoadImageFromFile("C:\\JabilTestScripts\\Jellyfish.jpg");

// create a pixel list from a rectangle

$PixelList1 = FastBitmap_GetPixelListFromRectangle(100,200,100,100);

// Display Pixel list by filling pixels in image with green (HSV = 120,100,100)

$FBResultImage = FastBitmap_FillPixelListByHSV($Image,$PixelList1,true,120,100,100);

// display and save image

FastBitmap_DisplayImage($FBResultImage);

FastBitmap_SaveImageToFile($FBResultImage,"C:\\JabilTestScripts\\JellyfishPixelListRect.jpg","JPEG");

// dispose of images

FastBitmap_DisposeImage($Image);

FastBitmap_DisposeImage($FBResultImage);

End;

Original Image



Image with pixel list Filled





Important Note:

The FastBitmap Class is faster than standard bitmap pixel operations but slower than the OpenCV library functions. OpenCV functions should be your first choice for speed if an equivalent function is available.





The FastBitmap Class works on standard Bitmap image object within JabilTest. OpenCV image objects have a different structure. To use an image processed by the FastBitmap class with an OpenCV function, you must open the image using an OpenCV function in order to obtain the correct structure.





FastBitmap_GetConnectedComponents

Previous Top Next



* * *



FastBitmap_GetConnectedComponents



Usage:

($ConnectedComponentList, $ConnectedComponentImage) = FastBitmap_GetConnectedComponents($Image, $Hbackground, $Sbackground, $Vbackground, $MinimumSize, $ReturnConnectedImage)





Description:





This function analyzes a bitmap image object to determine all of the unique components within the image. This function is a prerequisite to running the FastBitmap_TestConnectedPixels function.





For better performance and less component noise from unwanted regions or colors, you can use the FastBitmap_FillByHSV and FastBitmap_FillPixelListByHSV functions to create a consistent background color (can be specified with the input parameters) for omission to allow more robust component identification and labeling.





Smaller features can be filtered out using the $MinimumSize input field.





The function returns a connected component list (described below) and an image that is determined based on the boolean input value.





For more information regarding this type of blob extraction please review the information in the following link: http://en.wikipedia.org/wiki/Connected-component_labeling





This implementation uses 8 way connectivity.



Function arguments



Parameter

Variable Type

Description



$Image

Object

A bitmap image object.



$Hbackground

Integer

The Hue of the image background.



$Sbackground

Integer

The Saturation of the image background.



$Vbackground

Integer

The Value of the image background.



$MinimumSize

Integer

Specifies the minimum feature size (# of pixels) to include in connected component analysis. Features smaller than the specified pixel count count will be excluded.



$ReturnConnectedImage

Boolean

A boolean value indicating which image to return to the $ConnectedComponentImage return parameter

TRUE: Create and return the connected component color image. Creating the connected component color image can have time impacts depending on the number of components in the image.

FALSE: Return the unmodified original $Image that was passed into the function.





Return parameters



Parameter

Variable Type

Description



$ConnectedComponentList

Object

A list that contains a unique index for each separate component in the image. Each unique component index has a list of all the pixels that make up that particular component. This object list is needed to test for connectivity between ROIs using the FastBitmap_TestConnectedPixels function.



$ConnectedComponentImage

Object

A bitmap image object. Depending on the boolean setting, either the original image that was passed into the function, or a newly created connected component color image. If the $ConnectedComponentImage boolean setting was TRUE, the HSV value of the each connected component is modified to illustrate each unique component. The intent of this output is to provide debug information.





Usage Example:





//Load image

$Image = FastBitmap_LoadImageFromFile("C:\\JabilTestScripts\\Jellyfish.jpg");

// Display original image

FastBitmap_DisplayImage($Image);

// Fill pixels with black (HSV = 0,0,0) based on Hue to eliminate colors other than redish orange

$FBResultImage = FastBitmap_FillByHSV($Image,71,249,0,100,0,100,0,0,0);

// Fill pixels with black (HSV = 0,0,0) to eliminate lower saturation levels

$FBResultImage = FastBitmap_FillByHSV($FBResultImage,0,360,0,40,0,100,0,0,0);

// Display and save results of 2nd fill

FastBitmap_DisplayImage($FBResultImage);

FastBitmap_SaveImageToFile($FBResultImage,"C:\\JabilTestScripts\\Jellyfish2ndFill.jpg","JPEG");

// Generate Connectect Component List

($ConnectedComponentList, $ResultImage) = FastBitmap_GetConnectedComponents($FBResultImage,0,0,0,50,true);

// display and save debug output image

FastBitmap_DisplayImage($ResultImage);

FastBitmap_SaveImageToFile($ResultImage,"C:\\JabilTestScripts\\JellyfishConnectedComponent.jpg","JPEG");

// dispose of images

FastBitmap_DisposeImage($Image);

FastBitmap_DisposeImage($FBResultImage);

FastBitmap_DisposeImage($ResultImage);

End;

Original Image



Image after 2nd fill by HSV



Debug image output of Connected Component





Important Note:

The FastBitmap Class is faster than standard bitmap pixel operations but slower than the OpenCV library functions. OpenCV functions should be your first choice for speed if an equivalent function is available.





The FastBitmap Class works on standard Bitmap image object within JabilTest. OpenCV image objects have a different structure. To use an image processed by the FastBitmap class with an OpenCV function, you must open the image using an OpenCV function in order to obtain the correct structure.





FastBitmap_GetPixelListFromCircleRadius

Previous Top Next



* * *



FastBitmap_GetPixelListFromCircleRadius



Usage:

($PixelList, $PixelCount) = FastBitmap_GetPixelListFromCircleRadius($CenterX, $CenterY, $Radius);





Description:





This function creates a pixel list object that can be used as input parameters for the following FastBitmap functions:

FastBitmap_CreateSupersetFromPixelLists

FastBitmap_FillPixelListByHSV

FastBitmap_CountPixelsInHSVRange

FastBitmap_TestConnectedPixels





The pixel list object that is created is simply a list of pixels that are contained within the user specified circular region of interest. The user supplies the center X/Y coordinate and radius of a circle ROI in terms of image pixels values and the function returns a list of pixels and number of pixels contained within that specified region.

Function arguments



Parameter

Variable Type

Description



$CenterX

Integer

X-coordinate value (image pixel) of the center of the circle of interest. [must be >= 0]



$CenterY

Integer

Y-coordinate value (image pixel) of the center of the circle of interest. [must be >= 0]



$Radius

Integer

The radius of the circle of interest, specified in pixels. [must be > 0]





Return parameters



Parameter

Variable Type

Description



$PixelList

Object

A list of pixels that are contained within the specified circular region



$PixelCount

Integer

The number of pixels contained in the list/circle





Usage Example:





//Load image

$Image = FastBitmap_LoadImageFromFile("C:\\JabilTestScripts\\Jellyfish.jpg");

// create a pixel list from a circle

$PixelList1 = FastBitmap_GetPixelListFromCircleRadius(100,100,50);

// Display Pixel list by filling pixels in image with green (HSV = 120,100,100)

$FBResultImage = FastBitmap_FillPixelListByHSV($Image,$PixelList1,true,120,100,100);

// display and save image

FastBitmap_DisplayImage($FBResultImage);

FastBitmap_SaveImageToFile($FBResultImage,"C:\\JabilTestScripts\\JellyfishPixelListCircle.jpg","JPEG");

// dispose of images

FastBitmap_DisposeImage($Image);

FastBitmap_DisposeImage($FBResultImage);

Original Image



Image with pixel list Filled





Important Note:

The FastBitmap Class is faster than standard bitmap pixel operations but slower than the OpenCV library functions. OpenCV functions should be your first choice for speed if an equivalent function is available.





The FastBitmap Class works on standard Bitmap image object within JabilTest. OpenCV image objects have a different structure. To use an image processed by the FastBitmap class with an OpenCV function, you must open the image using an OpenCV function in order to obtain the correct structure.





FastBitmap_GetPixelListFromRectangle

Previous Top Next



* * *



FastBitmap_GetPixelListFromRectangle



Usage:

($PixelList, $PixelCount) = FastBitmap_GetPixelListFromRectangle($X1,$Y1,$Height,$Width);





Description:





This function creates a pixel list object that can be used as input parameters for the following FastBitmap functions:

FastBitmap_CreateSupersetFromPixelLists

FastBitmap_FillPixelListByHSV

FastBitmap_CountPixelsInHSVRange

FastBitmap_TestConnectedPixels





The pixel list object that is created is simply a list of pixels that are contained within the user specified rectangular region of interest. The user supplies the upper left X/Y coordinate, height, and width of the rectangle ROI in terms of image pixels values and the function returns a list of pixels and number of pixels contained within that specified region.



Function arguments



Parameter

Variable Type

Description



$X1

Integer

X-coordinate value (image pixel) of the upper left corner of the rectangle of interest. [must be >= 0]



$Y1

Integer

Y-coordinate value (image pixel) of the upper left corner of the rectangle of interest. [must be >= 0]



$Height

Integer

Height of the rectangle, in pixels. [must be > 0]



$Width

Integer

Width of the rectangle, in pixels. [must be > 0]



Return parameters



Parameter

Variable Type

Description



$PixelList

Object

A list of pixels that are contained within the specified rectangular region



$PixelCount

Object

The number of pixels contained in the list/rectangle





Usage Example:





//Load image

$Image = FastBitmap_LoadImageFromFile("C:\\JabilTestScripts\\Jellyfish.jpg");

// create a pixel list from a rectangle

$PixelList1 = FastBitmap_GetPixelListFromRectangle(100,200,100,100);

// Display Pixel list by filling pixels in image with green (HSV = 120,100,100)

$FBResultImage = FastBitmap_FillPixelListByHSV($Image,$PixelList1,true,120,100,100);

// display and save image

FastBitmap_DisplayImage($FBResultImage);

FastBitmap_SaveImageToFile($FBResultImage,"C:\\JabilTestScripts\\JellyfishPixelListRect.jpg","JPEG");

// dispose of images

FastBitmap_DisposeImage($Image);

FastBitmap_DisposeImage($FBResultImage);

End;

Original Image



Image with pixel list Filled





Important Note:

The FastBitmap Class is faster than standard bitmap pixel operations but slower than the OpenCV library functions. OpenCV functions should be your first choice for speed if an equivalent function is available.





The FastBitmap Class works on standard Bitmap image object within JabilTest. OpenCV image objects have a different structure. To use an image processed by the FastBitmap class with an OpenCV function, you must open the image using an OpenCV function in order to obtain the correct structure.





FastBitamp_LoadImageFromFile

Previous Top Next



* * *



FastBitmap_LoadImageFromFile



Usage:

$Image =FastBitmap_LoadImageFromFile($Filename);



Description:





This function opens a bitmap image stored on the local computer and creates a bitmap object.



Function arguments



Parameter

Variable Type

Description



$Filename

String

The filename and path of the image to be loaded into an Bitmap image object.





Return parameters



Parameter

Variable Type

Description



$Image

Object

A Bitmap Image object. This image object is not compatible with OpenCV functions.





Usage Example:

$Image = FastBitmap_LoadImageFromFile("c:\\MyBitmap.bmp");





Important Note:

The FastBitmap Class is faster than standard bitmap pixel operations but slower than the OpenCV library functions. OpenCV functions should be your first choice for speed if an equivalent function is available.





The FastBitmap Class works on standard Bitmap image object within JabilTest. OpenCV image objects have a different structure. To use an image processed by the FastBitmap class with an OpenCV function, you must open the image using an OpenCV function in order to obtain the correct structure.





FastBitmap_SaveImageAsBitmap

Previous Top Next



* * *



FastBitmap_SaveImageToFile



Usage:

FastBitmap_SaveImageToFile($Image,$FileName,$ImageType);



Description:

This functions saves an image as the image type specified.



Function arguments



Parameter

Variable Type

Description



$Image

Object

An Image object of any format or color depth.



$FileName

String

The save destination filename and path.



$ImageType

String

The desired image type from the following list: "BMP","EMF","EXIF","GIF","ICON","JPEG","PNG","TIFF","WMF"





Return parameters



Parameter

Variable Type

Description



None





Usage Example:





FastBitmap_SaveImageToFile($Image,"c:\\MyBitmap.bmp","BMP");





Important Note:

The FastBitmap Class is faster than standard bitmap pixel operations but slower than the OpenCV library functions. OpenCV functions should be your first choice for speed if an equivalent function is available.





The FastBitmap Class works on standard Bitmap image object within JabilTest. OpenCV image objects have a different structure. To use an image processed by the FastBitmap class with an OpenCV function, you must open the image using an OpenCV function in order to obtain the correct structure.





FastBitmap_TestConnectedPixels

Previous Top Next



* * *



FastBitmap_TestConnectedPixels



Usage:

$ConnectionCount = FastBitmap_TestConnectedPixels($PixelList1, $PixelList2, $ConnectedComponentList);





Description:





This function tests for connectivity between two specified ROIs (passed in and described as pixel list objects) within an image.





This function requires two pixel list objects be provided as input parameters. Each pixel list can be thought of as an enhanced ROI description. It contains a list of pixels in the image where you are interested in performing the connection analysis. It can be as simple as a single rectangular or circle ROI description, or a combination of numerous rectangular or circle areas in the image built using the superset function. A pixel list can be created using the following functions:

FastBitmap_GetPixelListFromCircleRadius

FastBitmap_GetPixelListFromRectangle

FastBitmap_CreateSupersetFromPixelLists





This function requires a connected component object list ($ConnectedComponentList) which is created using the FastBitmap_GetConnectedComponents function. The connected component object list contains a pixel list for each unique component that was found in the image. Each unique component was assigned an index ID.





This function determines all of the component index IDs contained in $PixelList1 and all of the component index IDs contained in $PixelList2. Any common component index IDs shared between $PixelList1 and $PixelList2 represents a connection between them. Using this method, the function counts the shared component index IDs and returns that as the connection count number.



Function arguments



Parameter

Variable Type

Description



$PixelList1

Object

A list object that contains pixels of interest. This list is created using other FastBitmap functions (see explanation above).



$PixelList2

Object

A list object that contains pixels of interest. This list is created using other FastBitmap functions (see explanation above).



$ConnectedComponentList

Object

The connected component object list created using the FastBitmap_GetConnectedComponents function. (see function description for more information)



Return parameters



Parameter

Variable Type

Description



$ConnectionCount

Integer

Returns the count of connections between the pixel lists provided.





Usage Example:





//Load image

$Image = FastBitmap_LoadImageFromFile("C:\\JabilTestScripts\\Jellyfish.jpg");

// Display original image

FastBitmap_DisplayImage($Image);

// Fill pixels with black (HSV = 0,0,0) based on Hue to eliminate colors other than redish orange

$FBResultImage = FastBitmap_FillByHSV($Image,71,249,0,100,0,100,0,0,0);

// Fill pixels with black (HSV = 0,0,0) to eliminate lower saturation levels

$FBResultImage = FastBitmap_FillByHSV($FBResultImage,0,360,0,40,0,100,0,0,0);

// Display and save results of 2nd fill

FastBitmap_DisplayImage($FBResultImage);

FastBitmap_SaveImageToFile($FBResultImage,"C:\\JabilTestScripts\\Jellyfish2ndFill.jpg","JPEG");

// Generate Connectect Component List

($ConnectedComponentList, $ConnectedComponentDebugImage) = FastBitmap_GetConnectedComponents($FBResultImage,0,0,0,50,true);

// display and save debug output image

FastBitmap_DisplayImage($ConnectedComponentDebugImage);

FastBitmap_SaveImageToFile($ConnectedComponentDebugImage,"C:\\JabilTestScripts\\JellyfishConnectedComponentDebugImage.jpg","JPEG");

// create pixel lists to check for connectivity

$PixelList1 = FastBitmap_GetPixelListFromRectangle(100,200,100,100);

$PixelList2 = FastBitmap_GetPixelListFromCircleRadius(450,100,50);

// create image using debug output of FastBitmap_GetConnectedComponents to display pixel list area

$DebugImageWithPixelListFill = FastBitmap_FillPixelListByHSV($ConnectedComponentDebugImage,$PixelList1,true,120,100,100);

$DebugImageWithPixelListFill = FastBitmap_FillPixelListByHSV($DebugImageWithPixelListFill,$PixelList2,true,120,100,100);

// display and save debug output image

FastBitmap_DisplayImage($DebugImageWithPixelListFill);

FastBitmap_SaveImageToFile($DebugImageWithPixelListFill,"C:\\JabilTestScripts\\JellyfishConnectedComponentResultWithPixelListFill.jpg","JPEG");

// Check for pixel continutity between the two pixel lists using connected component list

$Connections = FastBitmap_TestConnectedPixels($PixelList1,$PixelList2,$ConnectedComponentList);

// dispose of images

FastBitmap_DisposeImage($Image);

FastBitmap_DisposeImage($FBResultImage);

FastBitmap_DisposeImage($ConnectedComponentDebugImage);

FastBitmap_DisposeImage($DebugImageWithPixelListFill);

End;

Segmented image after 2nd fill



Debug image after connected component labeling



Debug image after connected component labeling showing pixel areas being tested for connectivity





The result is a connection count of one since there is one common connected component intersecting the two tested pixel areas.

FastBitmap_TestConnectedPixels: Connection Count [1]





Important Note:

The FastBitmap Class is faster than standard bitmap pixel operations but slower than the OpenCV library functions. OpenCV functions should be your first choice for speed if an equivalent function is available.





The FastBitmap Class works on standard Bitmap image object within JabilTest. OpenCV image objects have a different structure. To use an image processed by the FastBitmap class with an OpenCV function, you must open the image using an OpenCV function in order to obtain the correct structure.





ImageResize

Previous Top Next



* * *



ImageResize



Usage:

ImageResize($FileName,$Scaling,$DestinationFileName);



Description:

This function scales the supplied image file to the percentage specified, and saves it in the destination filename location. A scaling percentage less than 100% reduces the image size, and a scaling percentage greater than 100% increases the image size.



Requirements:



Usage Example:

ImageResize("c:\\myImage.bmp",150,"c:\\myImage2.bmp");

Function arguments



Parameter

Variable Type

Description



$FileName

String

The filename and path of the image to transform.



$ScalingPercentage

Integer

The percentage to scale the image.



$DestinationFile

String

The filename and path of the destination image.





Return parameters



Parameter

Variable Type

Description



None





ImageRotate

Previous Top Next



* * *



ImageRotate



Usage:

ImageRotate($FileName,$RotationType,$DestinationFileName);



Description:

This function rotates and flips the supplied image, and saves it in the location specified by the destination file name.

Requirements:



Usage Example:

ImageRotate("c:\\myFile.bmp","Rotate180FlipNone","c:\\myNewFile.bmp");

Function arguments



Parameter

Variable Type

Description



$FileName

String

The filename and path of the image to transform.



$RotationType

String

The type of rotation and flip transform to apply to the image. Supported transformation types are:

· "Rotate180FlipNone"

· "Rotate180FlipX"

· "Rotate180FlipY"

· "Rotate180FlipXY"

· "Rotate90FlipNone"

· "Rotate90FlipX"

· "Rotate90FlipY"

· "Rotate90FlipXY"

· "Rotate270FlipNone"

· "Rotate270FlipX"

· "Rotate270FlipY"

· "Rotate270FlipXY"



$DestinationFile

String

The filename and path of the destination image.





Return parameters



Parameter

Variable Type

Description



None





MSOffice2007_OCRImage

Previous Top Next



* * *



MSOffice2007_OCRImage



Usage:

($Text, $NumWords,$NumChars,$NumFonts) = MSOffice2007_OCRImage($ImageName,$Language,$OrientImage,$StraightenImage);



Description:

This function uses the Microsoft Office 2007 Document Imaging Library to convert any text found in an image file into a string. This function will automatically convert the image type into the necessary format, and will also align the image automatically.



Requirements:

This function requires Microsoft Office 2007 to be installed on the test machine in order to use this function.



Note:

This function has been deprecated and may not be included in future versions of Jabil Test. Use OpenCV_PerformOCR for OCR functions.



Usage Example:

($Text,$NumWords,$NumChars,$NumFonts) = MSOffice2007_OCRImage("c:\\image0.tif","English","TRUE","TRUE");

Function arguments



Parameter

Variable Type

Description



$ImageName

String

The file path and name of the image to be analyzed.



$Language

String

The language of the document to be analyzed. This function supports the following languages:

· "ENGLISH"

· "CHINESE SIMPLIFIED"

· "CHINESE TRADITIONAL"

· "CZECH"

· "DANISH"

· "DUTCH"

· "ENGLISH"

· "FINNISH"

· "FRENCH"

· "GERMAN"

· "GREEK"

· "HUNGARIAN"

· "ITALIAN"

· "JAPANESE"

· "KOREAN"

· "NORWEGIAN"

· "POLISH"

· "PORTUGUESE"

· "RUSSIAN"

· "SPANISH"

· "SWEDISH"

· "SYSDEFAULT"

· "TURKISH"





$OrientImage

Boolean

This boolean flag determines whether or not the OCR Engine should orient the image before running the OCR function. Note: The orientation algorithm used on the image is dependant on the language selected.



$StraightenImage

Boolean

This boolean flag determines whether or not the OCR engine should attempt to straighten the image before running the OCR function.





Return parameters



Parameter

Variable Type

Description



$Text

String

The complete text read from the image including any formatting such as new lines, spaces, tabs, etc



$NumWords

Integer

The number of words recognized in the image file



$NumChars

Integer

The number of characters recognized in the image file excluding whitespace



$NumFonts

Integer

The number of different fonts that were encountered in the image file.





HexLimitTest

Previous Top Next



* * *



HexLimitTest

Usage:

HexLimitTest($compareValue, $lowerLimit, $upperLimit);

Description:

Compares the comparison value in a hexadecimal string to an upper and lower limit. If the Comparison value falls between (or is equal to) the supplied limits, the test passes. Otherwise, the test produces a failure.

Function arguments



Parameter

Variable Type

Description



$compareValue

String

The hexadecimal string representing the value to be evaluated against the supplied limits.



$lowerLimit

String

The hexadecimal string representing the lower comparison limit.



$upperLimit

String

The hexadecimal string representing the upper comparison limit.





Return parameters



Parameter

Variable Type

Description



None.





Example(s):

// Set up the value and the limits to test it against.

$compareValue = "34AB";

$lowerLimit = "300A";

$upperLimit = "3FFF";





// Compare the numbers (this one will pass).

HexLimitTest($compareValue, $lowerLimit, $upperLimit);





HexLimitTestBool

Previous Top Next



* * *



HexLimitTestBool



Usage:

$inLimits = HexLimitTestBool($compareValue, $lowerLimit, $upperLimit);





Description:

Compares the comparison value in a hexadecimal string to an upper and lower limit. If the Comparison value falls between (or is equal to) the supplied limits, the test returns TRUE, else the test returns FALSE.

Function arguments



Parameter

Variable Type

Description



$compareValue

String

The hexadecimal string representing the value to be evaluated against the supplied limits.



$lowerLimit

String

The hexadecimal string representing the lower comparison limit.



$upperLimit

String

The hexadecimal string representing the upper comparison limit.





Return parameters



Parameter

Variable Type

Description



$inLimits

Boolean

Returns true if the comparison value is between the limits and false if the value is outside of the limits.





Example(s):

// Set up the value and the limits to test it against.

$compareValue = "34AB";

$lowerLimit = "300A";

$upperLimit = "3FFF";





// Compare the numbers (this one will pass).

$inLimits = HexLimitTestBool($compareValue, $lowerLimit, $upperLimit);





NumericLimitTest

Previous Top Next



* * *



NumericLimitTest

Usage:

NumericLimitTest($compareValue, $lowerLimit, $upperLimit);

Description:

Compares the floating point comparison value to an upper and lower limit. If the Comparison value falls between (or is equal to) the supplied limits, the test passes. Otherwise, the test produces a failure. This function is compatible with all numeric values.

Function arguments



Parameter

Variable Type

Description



$compareValue

Float

The value to be evaluated against the supplied limits.



$lowerLimit

Float

The lower comparison limit.



$upperLimit

Float

The upper comparison limit.





Return parameters



Parameter

Variable Type

Description



None.





Example(s):

// Set up the value and the limits to test it against.

$compareValue = 986;

$lowerLimit = 600;

$upperLimit = 1200;





// Compare the numbers (this one will pass).

NumericLimitTest($compareValue, $lowerLimit, $upperLimit);





NumericLimitTestBool

Previous Top Next



* * *



NumericLimitTestBool



Usage:

$inLimits = NumericLimitTestBool($compareValue, $lowerLimit, $upperLimit);





Description:

Compares the floating point comparison value to an upper and lower limit. If the Comparison value falls between (or is equal to) the supplied limits, the test returns TRUE, else the test returns FALSE.

Function arguments



Parameter

Variable Type

Description



$compareValue

Float

The value to be evaluated against the supplied limits.



$lowerLimit

Float

The lower comparison limit.



$upperLimit

Float

The upper comparison limit.





Return parameters



Parameter

Variable Type

Description



$inLimits

Boolean

Returns true if the comparison value is between the limits and false if the value is outside of the limits.





Example(s):

// Set up the value and the limits to test it against.

$compareValue = 986;

$lowerLimit = 600;

$upperLimit = 1200;





// Compare the numbers (this one will pass).

$inLimits = NumericLimitTestBool($compareValue, $lowerLimit, $upperLimit);





OpenCV_ScanBarCode

Previous Top Next



* * *



OpenCV_ScanBarCode



Usage:

($Success,$Count,$Type,$Contents) = OpenCV_ScanBarCode($Image);



Description:

This functions receives an OpenCV image object and scans the image for a bar code. This function will return three parameters indicating whether a bar code was found and if so, the type and contents of the bar code. If more than one bar code is found in the image, the type and content variables will be delimited by a colon.





Important Note:

Any cameras or other video input devices opened with the OpenCV_OpenCamera function must be closed with the OpenCV_CloseCamera function to prevent resource leaks.



Requirements:

These functions use the Open-Source OpenCV computer vision library from Intel, and therefore will offer the maximum performance when running on Intel Processors due to low-level optimizations for the Intel architecture. Any camera or input device that Windows recognizes as an imaging device should be compatible with these functions.





Function arguments



Parameter

Variable Type

Description



$Image

Object

An OpenCV Image Structure that has been loaded from an existing file or camera capture.





Return parameters



Parameter

Variable Type

Description



$Success

Boolean

Indicating whether bar code could be analyzed



$Count

Integer

Number of Bar Codes Found



$Type

String

Bar code type (Colon : Delimited if more than one bar code is found)



$Contents

String

Bar code contents (Colon : Delimited if more than one bar code is found)





Usage Example:

($Success,$Count,$Type,$Contents) = OpenCV_ScanBarCode($Image);





OpenCV_ScanBarCodeWithROI

Previous Top Next



* * *



OpenCV_ScanBarCodeWithROI



Usage:

($Success,$Count,$Type,$Contents) = OpenCV_ScanBarCodeWithROI($Image, $X,$Y,$Width,$Height);



Description:

This functions receives an OpenCV image object and scans the specified region of interest for a bar code. This function will return three parameters indicating whether a bar code was found with the region of interest and if so, the type and contents of the bar code. If more than one bar code is found in the image, the type and content variables will be delimited by a colon.





Note: If the region of interest exceeds the bounds of the image, the region of interest will be modified to obtain the image's original bounds.





Important Note:

Any cameras or other video input devices opened with the OpenCV_OpenCamera function must be closed with the OpenCV_CloseCamera function to prevent resource leaks.



Requirements:

These functions use the Open-Source OpenCV computer vision library from Intel, and therefore will offer the maximum performance when running on Intel Processors due to low-level optimizations for the Intel architecture. Any camera or input device that Windows recognizes as an imaging device should be compatible with these functions.





Function arguments



Parameter

Variable Type

Description



$Image

Object

An OpenCV Image Structure that has been loaded from an existing file or camera capture.



$X

Integer

Upper left X coordinate of the region of interest.



$Y

Integer

Upper left Y coordinate of the region of interest.



$Width

Integer

The width of the region of interest.



$Height

Integer

The height of the region of interest.





Return parameters



Parameter

Variable Type

Description



$Success

Boolean

Indicating whether bar code could be analyzed



$Count

Integer

Number of bar codes found.



$Type

String

Bar code type (Colon : Delimited if more than one bar code is found)



$Contents

String

Bar code contents (Colon : Delimited if more than one bar code is found)





Usage Example:

($Success, $Count, $Type, $Contents) = OpenCV_ScanBarCodeWithROI($Image, 20, 20, 100, 100);





OpenCV_AsynShowCameraOutputInWindow

Previous Top Next



* * *



OpenCV_AsynShowCameraOutputInWindow



Usage:

$handle = OpenCV_AsynShowCamerOutputInWindow($cameraObj, $width, $height);





Description:

This function will open an asynchronous window and show the output from the specified camera.





Remarks:

The camera must have previously opened using OpenCV_OpenCamera.

Function arguments



Parameter

Variable Type

Description



$cameraObj

Object

The camera object



$width

Integer

The width of the window to open.



$height

Integer

The height of the window to open.





Return parameters



Parameter

Variable Type

Description



$handle

Object

The handle of the window that was opened





Example(s):

$camera = OpenCV_OpenCamera(0);





$handle = OpenCV_AsynShowCameraOutputInWindow($camera, 1024, 768);





OpenCV_CloseAsynWindow

Previous Top Next



* * *



OpenCV_CloseAsynWindow



Usage:

OpenCV_CloseAsynWindow($handle);



Description:

This function is used to close an asynchronous window opened with OpenCV_AsynShowCameraOutputInWindow.





Remarks:

These functions use the Open-Source OpenCV computer vision library from Intel, and therefore will offer the maximum performance when running on Intel Processors due to low-level optimizations for the Intel architecture.

Function arguments



Parameter

Variable Type

Description



$handle

Object

The handle to asynchronous window.





Return parameters



Parameter

Variable Type

Description



None





Example(s):

$camera = OpenCV_OpenCamera(0);

$handle = OpenCV_AsynShowCameraOutputInWindow($camera, 1024, 768);





OpenCV_CloseAsynWindow($handle);





OpenCV_CloseCamera

Previous Top Next



* * *



OpenCV_CloseCamera



Usage:

OpenCV_CloseCamera($Camera);



Description:

This function closes an imaging device that has been opened using the OpenCV_OpenCamera function and disposes of its resources. After a Camera has been closed, it must be re-opened to begin using it again.





Important Note:

Any cameras or other video input devices opened with the OpenCV_OpenCamera function must be closed with the OpenCV_CloseCamera function to prevent resource leaks.



Requirements:

These functions use the Open-Source OpenCV computer vision library from Intel, and therefore will offer the maximum performance when running on Intel Processors due to low-level optimizations for the Intel architecture. Any camera or input device that Windows recognizes as an imaging device should be compatible with these functions.





Function arguments



Parameter

Variable Type

Description



$Camera

Object

A handle to the camera or imaging device to be closed. This handle should have been created using the OpenCV_OpenCamera function.





Return parameters



Parameter

Variable Type

Description



None





Usage Example:





$Camera = OpenCV_OpenCamera(0);

SetFinalizeFunction("Cleanup");

End;





function Cleanup()

{

OpenCV_CloseCamera($Camera);

End;

}





OpenCV_GetCameraProperties

Previous Top Next



* * *



OpenCV_GetCameraProperties



Usage:

($Width,$Height,$FramesPerSecond,$Format,$Brightness,$Contrast) = OpenCV_GetCameraProperties($Camera);



Description:

This function returns the current configuration properties for the specified camera object.



Requirements:

These functions use the Open-Source OpenCV computer vision library from Intel, and therefore will offer the maximum performance when running on Intel Processors due to low-level optimizations for the Intel architecture. Any camera or input device that Windows recognizes as an imaging device should be compatible with these functions.





Function arguments



Parameter

Variable Type

Description



$Camera

Object

The handle of the Imaging Object to retrieve its currently configured properties





Return parameters



Parameter

Variable Type

Description



$Width

Float

The width of the camera capture image



$Height

Float

The height of the camera capture image



$FramesPerSecond

Float

The average frames per second set for the camera (0 usually indicates maximum frames per second is configured, but this is hardware dependent)



$Format

Integer

An integer representing an enumeration of the format of the camera (RGB, Bits Depth, etc)



$Brightness

Float

The current brightness gain value set for the camera. This is an offset value to adjust the cameras overall sensitivity. The default value is 0.



$Contrast

Float

The current contrast gain value set for the camera. This is an offset value to adjust the cameras overall contrast sensitivity. The default value is 0.





Usage Example:





($Width,$Height,$FramesPerSecond,$Format,$Brightness,$Contrast) = OpenCV_GetCameraProperties($Camera);

UpdateStatus($Width);

UpdateStatus($Height);

UpdateStatus($FramesPerSecond);

UpdateStatus($Format);

UpdateStatus($Brightness);

UpdateStatus($Contrast);





OpenCV_OpenCamera

Previous Top Next



* * *



OpenCV_OpenCamera



Usage:

$Camera = OpenCV_OpenCamera($CameraIndex);



Description:

This function opens a supported camera device (USB, Firewire, Gig-E, etc) for image capture. The camera is specified by an integer index, starting at 0. If only a single camera is available, it is always camera index 0.





Opening the camera reserves it for use, but does not begin the image acquisition process.





Important Note:

Any cameras or other video input devices opened with the OpenCV_OpenCamera function must be closed with the OpenCV_CloseCamera function to prevent resource leaks.



Requirements:

These functions use the Open-Source OpenCV computer vision library from Intel, and therefore will offer the maximum performance when running on Intel Processors due to low-level optimizations for the Intel architecture. Any camera or input device that Windows recognizes as an imaging device should be compatible with these functions.





Function arguments



Parameter

Variable Type

Description



$CameraIndex

Integer

The index of the camera to reserve for use.





Return parameters



Parameter

Variable Type

Description



$Camera

Object

A handle to the imaging device.





Usage Example:

$Camera = OpenCV_OpenCamera(0);





OpenCV_OpenDevicePropertiesWindow

Previous Top Next



* * *



OpenCV_OpenDevicePropertiesWindow



Usage:

OpenCV_OpenDevicePropertiesWindow($captureDeviceIndex);





Description:

Launches the default system properties windows for the video capture device specified.





Note: The property window is non-blocking; the test script will continue executing after the window is displayed. This allows adjustments to be made in real-time in conjunction with a camera output display function (such as OpenCV_ShowCameraOutputInWindow).





Function Arguments



Parameter

Variable Type

Description



$captureDeviceIndex

Integer

Video capture device index. This is 0 if only one device is present on the system.





Return Parameters



Parameter

Variable Type

Description



None

--





Example:

OpenCV_OpenDevicePropertiesWindow(0); //opens properties windows

OpenCV_ShowCameraOutputInWindow($Camera); //opens camera display window, pauses script





OpenCV_QueryFrame

Previous Top Next



* * *



OpenCV_QueryFrame



Usage:

$Image = OpenCV_QueryFrame($Camera);



Description:

This function captures a single 24 bit color image from the imaging device specified by the $Camera argument at it's native resolution, and returns it as $Image. If the camera is configured for a different imaging format or color depth, the image is converted into a 24 Bit RGB image structure.





The imaging hardware must first be opened using the OpenCV_OpenCamera function before calling this function.





Note: In order to return the current view, this function performs a double query each time. Looped queries that are concerned with performance should use the OpenCV_QueryFrameFast() function instead. However, be aware that functions returns the previously queried frame, not the expected frame being currently queried, so an extra call is required to return the final frame desired.



Requirements:





These functions use the Open-Source OpenCV computer vision library from Intel, and therefore will offer the maximum performance when running on Intel Processors due to low-level optimizations for the Intel architecture. Any camera or input device that Windows recognizes as an imaging device should be compatible with these functions.





Function arguments



Parameter

Variable Type

Description



$Camera

Object

The handle of the Imaging Object to retrieve its currently configured properties





Return parameters



Parameter

Variable Type

Description



$Image

Object

Returns a 24-Bit RGB Image object that represents the current camera view.





Usage Example:





$Camera = OpenCV_OpenCamera(0);

$Image = OpenCV_QueryFrame($Camera);

OpenCV_CloseCamera($Camera);





OpenCV_QueryFrameFast

Previous Top Next



* * *



OpenCV_QueryFrameFast



Usage:

$Image = OpenCV_QueryFrameFast($Camera);



Description:

This function captures a single 24 bit color image from the imaging device specified by the $Camera argument at it's native resolution. If the camera is configured for a different imaging format or color depth, the image is converted into a 24 Bit RGB image structure.





The imaging hardware must first be opened using the OpenCV_OpenCamera function before calling this function.





Note: The image returned by this function is always the LAST frame that was queried! E.g., the first time this function is called, the return parameter $Image will be the frame stored when the camera was initialized with OpenCV_OpenCamera(). The seconds time it is called, $Image will be the frame stored during the first call to OpenCV_QueryFrameFast(). The third call will return the frame queried in the seconds call, etc.





To return a frame that shows the current view every time, use the OpenCV_QueryFrame() function. Be aware that function runs at half the speed of this function.



Requirements:





These functions use the Open-Source OpenCV computer vision library from Intel, and therefore will offer the maximum performance when running on Intel Processors due to low-level optimizations for the Intel architecture. Any camera or input device that Windows recognizes as an imaging device should be compatible with these functions.





Function arguments



Parameter

Variable Type

Description



$Camera

Object

The handle of the Imaging Object to retrieve its currently configured properties





Return parameters



Parameter

Variable Type

Description



$Image

Object

Returns a 24-Bit RGB Image object. Note this is not the current camera view, but the frame from the last query.





Usage Example:





$Camera = OpenCV_OpenCamera(0);

$Image = OpenCV_QueryFrameFast($Camera); //returns frame captured when camera initialized

$Image = OpenCV_QueryFrameFast($Camera); //returns frame captrued by last query call

OpenCV_CloseCamera($Camera);





OpenCV_QueryFrameWithAveraging

Previous Top Next



* * *



OpenCV_QueryFrameWithAveraging



Usage:

$Image = OpenCV_QueryFrameWithAveraging($Camera,$NumberOfFrames);



Description:

This function captures a series of 24 bit color image from the imaging device specified by the $Camera argument at it's currently configured resolution. If the camera is configured for a different imaging format or color depth, the image is converted into a 24 Bit RGB image structure.





The camera captures several frames (specified by the $NumberOfFrames) argument and then does a non-weighted averaging on the frames to create a composite image of all the captured images.

This image averaging is useful for removing "noise" and color banding from lower cost imaging devices such as USB webcams.





The imaging hardware must first be opened using the OpenCV_OpenCamera function before calling this function.





Note:

In order to effectively make use of this function, there can be no movement in the frame due to the imaging process, or the result will be a blurred or "ghosted" image.





Note: This function was developed in Visual C++ 2008 and require the latest version of the Microsoft Visual C++ runtime which can be downloaded from Microsoft.





Requirements:





These functions use the Open-Source OpenCV computer vision library from Intel, and therefore will offer the maximum performance when running on Intel Processors due to low-level optimizations for the Intel architecture. Any camera or input device that Windows recognizes as an imaging device should be compatible with these functions.





Function arguments



Parameter

Variable Type

Description



$Camera

Object

The handle of the Imaging Object to retrieve its currently configured properties



$NumberOfFrames

Integer

The number of frames which should be averaged together in order to create the final noise-free composite image.





Return parameters



Parameter

Variable Type

Description



$Image

Object

Returns a 24-Bit RGB Image object.





Usage Example:





$Camera = OpenCV_OpenCamera(0);

$Image = OpenCV_QueryFrameWithAveraging($Camera,5);

OpenCV_CloseCamera($Camera);





OpenCV_QueryGrayFrame

Previous Top Next



* * *



OpenCV_QueryGrayFrame



Usage:

$Image = OpenCV_QueryGrayFrame($Camera);



Description:

This function captures a single 8 bit grayscale image from the imaging device specified by the $Camera argument at it's native resolution. If the camera is configured for a different imaging format or color depth, the image is converted into a 8 Bit grayscale image structure.





The imaging hardware must first be opened using the OpenCV_OpenCamera function before calling this function.





This is a convenient function to use for image acquisition since many of the analysis and transformation algorithms are designed to work on gray-scale images for improved performance.



Requirements:





These functions use the Open-Source OpenCV computer vision library from Intel, and therefore will offer the maximum performance when running on Intel Processors due to low-level optimizations for the Intel architecture. Any camera or input device that Windows recognizes as an imaging device should be compatible with these functions.





Function arguments



Parameter

Variable Type

Description



$Camera

Object

The handle of the Imaging Object to retrieve its currently configured properties





Return parameters



Parameter

Variable Type

Description



$Image

Object

Returns an 8 Bit grayscale image object.





Usage Example:





$Camera = OpenCV_OpenCamera(0);

$Image = OpenCV_QueryGrayFrame($Camera);

OpenCV_CloseCamera($Camera);





OpenCV_RecordVideo

Previous Top Next



* * *



OpenCV_RecordVideo



Usage:

OpenCV_RecordVideo($Camera, $Duration, $FPS,$CodecString, $UseColor, $FileName);



Description:

This function can be used to record a video file from an OpenCV Capture device, and store it to a file using the specified video encoding codec. The $FPS parameters specifies the desired frames per second for the video. If the specified frames per second exceeds the capabilities of the capture device, the maximum FPS of the capture device will be used.





The $CodecString specifies the desired video encoder to use for recording the video. The Codec is specified using a four character string as defined the the Four CC standard. (For more information, see www.fourcc.org). The most common codec codes are shown below... if you would like a listing of the installed codecs on your system, and to be able to manually choose the codec to use for video recording, use the value of '0000' in this parameter and an options dialog will be displayed when the function runs with all the codecs installed, and adjustable parameters that can be selected before video recording begins.





The $UseColor parameter specifies whether to record the video using color, or else in grayscale.

Finally, the $FileName specifies the destination file name for the output file. If there is an existing file at this location, it will be overwritten with the new file.





Remarks:

Any camera or input device that Windows recognizes as an imaging device should be compatible with these functions.

This function uses the OpenCV and EMGU CV libraries version 3.3.0.





Function arguments



Parameter

Variable Type

Description



$Camera

Object

The handle of the Imaging Object to use for video capture.



$Duration

Integer

The number of seconds of video to record



$FPS

Integer

The desired number of frames per second for the captured video.



$CodecString

String

The four character FourCC code for the video codec. See the fourcc.org website for additional information. Some common codecs used are:

"PIM1" = MPEG-1

"MJPG" = Motion JPEG

"DIB " = RGB AVI Files

"IYUV" = Uncompressed YUV, 4:2;) chroma

subsampled video.

"0000" = Manually Select the Codec to use



$UseColor

Boolean

Specifies whether or not to use color for the recorded video file.



$FileName

String

The output file name for the recorded video file.





Return parameters



Parameter

Variable Type

Description



None





Usage Example:





OpenCV_RecordVideo($Camera, 10, 30, "IYUV", true, "mytestfile.avi");





OpenCV_SetCameraBrightness

Previous Top Next



* * *



OpenCV_SetCameraBrightness



Usage:

OpenCV_SetCameraBrightness($Camera, $brightness);



Description:

This function sets the brightness for the selected camera.





Remarks:

This function uses the OpenCV and EMGU CV libraries version 3.3.0.

Communication with the camera must previously been opened with OpenCV_OpenCamera.



Function arguments



Parameter

Variable Type

Description



$Camera

Object

A previously opened connection to a camera.



$brightness

Integer

The new brightness setting for the camera (0 to 255).





Return parameters



Parameter

Variable Type

Description



None





Example:





// Set the camera brightness.

$camNumber = 0;

$camHandle = OpenCV_OpenCamera($camNumber);



$bright = 115;



OpenCV_SetCameraBrightness($camHandle, $bright);





OpenCV_SetCameraContrast

Previous Top Next



* * *



OpenCV_SetCameraContrast



Usage:

OpenCV_SetCameraContrast($Camera, $contrast);



Description:

This function sets the contrast for the selected camera.





Remarks:

This function uses the OpenCV and EMGU CV libraries version 3.3.0.

Communication with the camera must previously been opened with OpenCV_OpenCamera.



Function arguments



Parameter

Variable Type

Description



$Camera

Object

A previously opened connection to a camera.



$contrast

Integer

The new contrast setting for the camera (0 to 255).





Return parameters



Parameter

Variable Type

Description



None





Example:





// Set the camera contrast.

$camNumber = 0;

$camHandle = OpenCV_OpenCamera($camNumber);



$contrast = 115;



OpenCV_SetCameraBrightness($camHandle, $contrast);





OpenCV_SetCameraControlProperty

Previous Top Next



* * *



OpenCV_SetCameraControlProperty



Usage:

OpenCV_SetCameraControlProperty($captureDeviceIndex, $propertyName, $propertyValue);





Description:

Sets video capture device properties using the DirectShow API. These properties relate to control of the camera itself.





Note: Values outside of the allowable range of a property will cause a failure that reports the valid range, but invalid values within the acceptable range will often be ignored without causing a failure.





e.g., the allowable range for ZOOM is 1-10, but only 1X, 5X, and 10X are valid zoom levels. Entering a value of "2" will return a pass status for the function, but leave the zoom level unchanged.





Valid values and behavior depend on the specific camera drivers. You can often use OpenCV_OpenDevicePropertiesWindow() to inspect valid values for the different properties.





Function Arguments



Parameter

Variable Type

Description



$captureDeviceIndex

Integer

Video capture device index. This is 0 if only one device is present on the system.



$propertyName

String

Name of the property to set. Valid properties are:

· "EXPOSURE"

· "FOCUS"

· "IRIS"

· "PAN"

· "ROLL"

· "TILT"

· "ZOOM"



$propertyValue

String

Value to set property to. Use "DEFAULT" to reset the value, "AUTO" to allow the device to automatically adjust the property (if supported), or enter a numeric value to manually set it. The value must be in the allowable range for the property or the function will fail.





Return Parameters



Parameter

Variable Type

Description



None

--





Example:

OpenCV_SetCameraControlProperty(0, "FOCUS", "AUTO"); //autoset value

OpenCV_SetCameraControlProperty(0, "EXPOSURE", "DEFAULT"); //default value

OpenCV_SetCameraControlProperty(0, "ZOOM", "2"); //manual value





OpenCV_SetCameraResolution

Previous Top Next



* * *



OpenCV_SetCameraResolution



Usage:

OpenCV_SetCameraResolution($CameraIndex,$Width,$Height);



Description:

This function sets the resolution (width x height) for the specified camera object. If the requested camera resolution exceeds the capabilities of the hardware, then the resolution will be set to the maximum value allowed by the camera.





Note: You will need to refer to the documentation that is provided by your camera manufacturer for a list of supported resolutions. Also the driver for the camera must be directShow compatible in order to set the resolution of the camera via this function.





Requirements:

These functions use the Open-Source OpenCV computer vision library from Intel, and therefore will offer the maximum performance when running on Intel Processors due to low-level optimizations for the Intel architecture. Any camera or input device that Windows recognizes as an imaging device should be compatible with these functions.

Function arguments



Parameter

Variable Type

Description



$Camera

Object

The handle of the imaging device returned from the OpenCV_OpenCamera function.



$Width

Integer

The Width (pixels) value to set the camera resolution.



$Height

Integer

The Height (pixels) value to set the camera resolution.





Return parameters



Parameter

Variable Type

Description



none





Usage Example:

OpenCV_SetCameraResolution($Camera,640,480);





OpenCV_SetVideoProcAmpProperty

Previous Top Next



* * *



OpenCV_SetVideoProcAmpProperty



Usage:

OpenCV_SetVideoProcAmpProperty($captureDeviceIndex, $propertyName, $propertyValue);





Description:

Sets video capture device properties using the DirectShow API. These properties relate to the video processing amplifier of the device.





Note: Values outside of the allowable range of a property will cause a failure that reports the valid range, but invalid values within the acceptable range will often be ignored without causing a failure.





e.g., the allowable range for BRIGHTNESS is 0-255, but only multiples of 5 are valid brightness levels. Entering a value of "9" will return a pass status for the function, but leave the brightness level unchanged.





Valid values and behavior depend on the specific camera drivers. You can often use OpenCV_OpenDevicePropertiesWindow() to inspect valid values for the different properties.





Function Arguments



Parameter

Variable Type

Description



$captureDeviceIndex

Integer

Video capture device index. This is 0 if only one device is present on the system.



$propertyName

String

Name of the property to set. Valid properties are:

· "BACKLIGHTCOMPENSATION"

· "BRIGHTNESS"

· "COLORENABLE"

· "CONTRAST"

· "GAIN"

· "GAMMA"

· "HUE"

· "SATURATION"

· "SHARPNESS"

· "WHITEBALANCE"



$propertyValue

String

Value to set property to. Use "DEFAULT" to reset the value, "AUTO" to allow the device to automatically adjust the property (if supported), or enter a numeric value to manually set it. The value must be in the allowable range for the property or the function will fail.





Return Parameters



Parameter

Variable Type

Description



None

--





Example:

OpenCV_SetVideoProcAmpProperty(0, "WHITEBALANCE", "AUTO"); //autoset value

OpenCV_SetVideoProcAmpProperty(0, "SATURATION", "DEFAULT"); //default value

OpenCV_SetVideoProcAmpProperty(0, "HUE", 0); //manual value





OpenCV_ShowCameraOutputInWindow

Previous Top Next



* * *



OpenCV_ShowCameraOutputInWindow



Usage:

OpenCV_ShowCameraOutputInWindow($Camera);





Description:

Shows the output of the camera in a pop-up window.





Note: Script execution blocks until the output window is closed.





Function Arguments



Parameter

Variable Type

Description



$Camera

Object

A handle to the camera or imaging device to be closed. This handle should have been created using the OpenCV_OpenCamera function.





Return Parameters



Parameter

Variable Type

Description



None

--





Example:

OpenCV_OpenDevicePropertiesWindow(0); //opens properties windows

OpenCV_ShowCameraOutputInWindow($Camera); //opens camera display window, pauses script





OpenCV_CalculatePixelDistance

Previous Top Next



* * *



OpenCV_CalculatePixelDistance



Usage:

$Distance = OpenCV_CalculatePixelDistance($X1,$Y1,$X2,$Y2);



Description:

This function calculates the distance between two pixels





Function arguments



Parameter

Variable Type

Description



$X1

Integer

X coordinate of the first pixel



$Y1

Integer

Y coordinate of the first pixel



$X2

Integer

X coordinate of the second pixel



$Y2

Integer

Y coordinate of the second pixel





Return parameters



Parameter

Variable Type

Description



$Distance

Float

The distance between the two pixels





Usage Example:





$Distance = OpenCV_CalculatePixelDistance(10,10,20,20);





OpenCV_CalculatePointAngle

Previous Top Next



* * *



OpenCV_CalculatePointAngle



Usage:

$angle = OpenCV_CalculatePointAngle($x1, $y1, $x2, $y2, $axis);



Description:

This function calculates and returns the angle (in degrees) of a line specified by two end-points and a specified axis.





Remarks:

This function uses the OpenCV and EMGU CV libraries version 3.3.0.





Function arguments



Parameter

Variable Type

Description



$x1

Integer

The X coordinate of the first point.



$y1

Integer

The Y coordinate of the first point.



$x2

Integer

The X coordinate of the second point.



$y2

Integer

The Y coordinate of the second point.



$axis

String

The axis to calculate the angle from. Must be "Horz" or "Vert".





Return parameters



Parameter

Variable Type

Description



$angle

Float

The angle of the line from the specified axis.





Example:





// Find the angle of the line from the X-axis.

$x1 = 10;

$y1 = 20;

$x2 = 100;

$y2 = 115;

$axis = "Horz";



$angle = OpenCV_CalculatePointAngle($x1, $y1, $x2, $y2, $axis);





OpenCV_CannyEdgeDetectGrayscale

Previous Top Next



* * *



OpenCV_CannyEdgeDetectGrayscale



Usage:

$newImage= OpenCV_CannyEdgeDetectGrayscale($Image,$Threshold,$LinkingThreshold);



Description:

This function takes an OpenCV image of any resolution and color depth and converts it to an 8-bit grayscale image before applying a Canny Edge Detection algorithm on the image.

The canny edge detection algorithm attempts to find candidate pixels representing potential edges (regions of high contrast transition) and assembles them into contours.





The returned image will be a gray scale (binary) image showing the edges detected in the original image. This can be a useful transform to apply before using subsequent pattern matching, or measurement algorithms.

The threshold parameter specifies the minimum threshold for a pixel gradient to be determined to be an edge within the image. The maximum parameter specifies the maximum color gradient for a given pixel to be considered an edge within the image.





Canny recommends a high:low hysterisis threshold ratios of 5:1 and 3:2 respective.





Requirements:

These functions use the Open-Source OpenCV computer vision library from Intel, and therefore will offer the maximum performance when running on Intel Processors due to low-level optimizations for the Intel architecture. Any camera or input device that Windows recognizes as an imaging device should be compatible with these functions.





Function arguments



Parameter

Variable Type

Description



$Image

Object

An OpenCV Image Structure that has been loaded from an existing file or camera capture.



$Threshold

Float

The pixel threshold value for it's gradient value to be considered as an edge in the image



$LinkingThreshold

Float

The minimum threshold value for a pixel-to-pixel neighboring threshold for two pixels to be considered as part of a common contour.





Return parameters



Parameter

Variable Type

Description



$newImage

Object

An OpenCV Image Grayscale Structure which can be used with the other OpenCV functions in this library.





Usage Example:

$newImage= OpenCV_CannyEdgeDetectGrayscale($Image,100,60);





Example Photos

Original Image





Edge Detect with Pixel Threshold of 100 and linking neighbor threshold of 60:





OpenCV_CompareImges

Previous Top Next



* * *



OpenCV_CompareImages



Usage:

$UnmatchedPixels = OpenCV_CompareImages($Image1,$Image2);



Description:

This function performs a pixel by pixel comparison of two input images and returns the resulting percentage of matched pixels. No normalization is done on the images before comparison.





The formula is essentially: number of matching pixels/number of total pixels.





A pixel must be a perfect match to be considered a valid match, there is no tolerance function.





Note: This function was developed in Visual C++ 2008 and require the latest version of the Microsoft Visual C++ runtime which can be downloaded from Microsoft.





Requirements:

These functions use the Open-Source OpenCV computer vision library from Intel, and therefore will offer the maximum performance when running on Intel Processors due to low-level optimizations for the Intel architecture. Any camera or input device that Windows recognizes as an imaging device should be compatible with these functions.

Function arguments



Parameter

Variable Type

Description



$Image1

Object

The OpenCV image object for comparison



$Image2

Object

The second OpenCV image object for comparison





Return parameters



Parameter

Variable Type

Description



$MatchedPixelPercent

Float

The percentage matched pixels related to whole image returned as a number from 0 to 1.





Usage Example:

$Scene1 = OpenCV_LoadImageFromFile("c:\\scene1.jpg");

$Scene2 = OpenCV_LoadBitmapObject($image);

$MatchedPixelPercent = OpenCV_CompareImages($Scene1,$Scene2);





OpenCV_CompareImagesWithTolerance

Previous Top Next



* * *



OpenCV_CompareImagesWithTolerance



Usage:

$UnmatchedPixels = OpenCV_CompareImagesWithTolerance($Image1,$Image2,$RTolerance,$GTolerance,$BTolerance);



Description:

This function performs a pixel by pixel comparison of two input images and returns the resulting percentage of matched pixels. No normalization is done on the images before comparison.





The comparison is done in the RGB color space with 8 bits per pixel of color information.





The formula is essentially: number of matching pixels/number of total pixels.





Unlike the OpenCV_CompareImages function this function allows specifying an integer tolerance for each color value. Each tolerance is the absolute value of the difference allowed in a pixels color value for each channel before it is considered a failed match. This makes this function useful to compare video images that have been digitally compressed and suffer from macro-blocking or other types of fixed-contrast stepped distortions.





Note: This function was developed in Visual C++ 2008 and require the latest version of the Microsoft Visual C++ runtime which can be downloaded from Microsoft.





Requirements:

These functions use the Open-Source OpenCV computer vision library from Intel, and therefore will offer the maximum performance when running on Intel Processors due to low-level optimizations for the Intel architecture. Any camera or input device that Windows recognizes as an imaging device should be compatible with these functions.

Function arguments



Parameter

Variable Type

Description



$Image1

Object

The OpenCV image object for comparison



$Image2

Object

The second OpenCV image object for comparison



$RTolerance

Integer

The integer tolerance for the absolute value of the difference in a pixels color value before it is considered a mismatch.



$GTolerance

Integer

The integer tolerance for the absolute value of the difference in a pixels color value before it is considered a mismatch.



$BTolerance

Integer

The integer tolerance for the absolute value of the difference in a pixels color value before it is considered a mismatch.





Return parameters



Parameter

Variable Type

Description



$MatchedPixelPercent

Float

The percentage matched pixels related to whole image returned as a number from 0 to 1.





Usage Example:

$Scene1 = OpenCV_LoadImageFromFile("c:\\scene1.jpg");

$Scene2 = OpenCV_LoadBitmapObject($image);

$MatchedPixelPercent = OpenCV_CompareImagesWithTolerance($Scene1,$Scene2,1,1,4);





OpenCV_CountHorizontalEdges

Previous Top Next



* * *



OpenCV_CountHorizontalEdges

Usage:

$edges = OpenCV_CountHorizontalEdges ($Image, $YCoordinate, $X1Coordinate, $X2Coordinate, $RGB);

Description:

Counts the number of edges found in the horizontal line at Y coordinate and between X1 and X2. The RGB threshold is used to trigger to set the point in which an edge is considered valid as such.

Note:

This function works best with the output of an edge detection algorithm such as OpenCV_CannyEdgeDetectGrayscale().

Function arguments



Parameter

Variable Type

Description



$Image

Object

The image object to work with.



$YCoordinate

Integer

The vertical position of the line that will be checked.



$X1Coordinate

Integer

The starting X position of the line.



$X2Coordinate

Integer

The ending X position of the line.



$RGB

String

RGB Edge Threshold trigger. This is a comma spearated string of R, G and B values (0 - 255).





Return arguments



Parameter

Variable Type

Description



$edges

Integer

The number of edges that were detected.





Example:





$edges = OpenCV_CountHorizontalEdges ($Image, 100, 1, 639, ”20,20,20”);





OpenCV_CountPixelsInHSVRange

Previous Top Next



* * *



OpenCV_CountPixelsInHSVRange



Usage:

$PixelCount = OpenCV_CountPixelsInHSVRange($Image,$MinH,$MinS,$MinV,$MaxH,$MaxS,$MaxV,$X1,$Y1,$X2,$Y2,$ShowDebugImage);



Description:

This function counts the number of pixels in a given image that fall between a range of HSV values in the hue, saturation, and value color space.





If a pixel falls within the minimum and maximum boundaries for each color and intensity parameter, it is added to the summation.





The $X1,$Y1, $X2, $Y2 parameters are used to express the region of interest for the calculation, with $X1, $Y1 setting the upper left corner of the region of interest, and $X2, $Y2 specifying the lower right corner of the region of interest.





If $ShowDebugImage is set to true, the test will pause and show a colored region showing the pixels that were included in the summation, vs the pixels which were excluded for falling outside the threshold range. The debug image shows the region of interest inside of a white rectangle, and all valid pixels within the threshold values are displayed in blue.





Requirements:

These functions use the Open-Source OpenCV computer vision library from Intel, and therefore will offer the maximum performance when running on Intel Processors due to low-level optimizations for the Intel architecture. Any camera or input device that Windows recognizes as an imaging device should be compatible with these functions.





Function arguments



Parameter

Variable Type

Description



$Image

Object

An OpenCV Image Structure that has been loaded from an existing file or camera capture.



$MinH

Float

The minimum Hue Value of the pixel threshold. (Values 0 to 360) Note: Since Hue is a cylindrical-coordinate and could wrap around the zero value, if the lower limit for Hue is greater than the higher limit, the function will work on the assumption that the user wants to select Hue values that cross the zero value.



$MinS

Float

The minimum Saturation Value of the pixel threshold. (Values 0 to 100)



$MinV

Float

The minimum ' Value' Value of the pixel threshold. (Values 0 to 100)



$MaxH

Float

The maximum Hue Value of the pixel threshold. (Values 0 to 360)



$MaxS

Float

The maximum Saturation Value of the pixel threshold. (Values 0 to 100)



$MaxV

Float

The maximum ' Value' Value of the pixel threshold. (Values 0 to 100)



$X1

Integer

Upper Left X coordinate of the region of interest



$Y1

Integer

Upper Left Y coordinate of the region of interest



$X2

Integer

Lower Right X coordinate of the region of interest



$Y2

Integer

Lower Right Y coordinate of the region of interest



$ShowDebugImage

Boolean

Specifies whether or not the test executive will pause to show a debug image of the analyzed image. See example below.





Return parameters



Parameter

Variable Type

Description



$PixelCount

Integer

The number of pixels found matching the requested color matching criteria





Usage Example:





$BadCount = OpenCV_CountPixelsInHSVRange($BadImage,0,0,0,25,100,100,429,341,768,470,true);





Original Image:





Debug Image:





OpenCV_CountPixelsInHSVRangeReturnImage

Previous Top Next



* * *



OpenCV_CountPixelsInHSVRangeReturnImage



Usage:

($PixelCount,$MatchImage) = OpenCV_CountPixelsInHSVRangeReturnImage($Image,$MinH,$MinS,$MinV,$MaxH,$MaxS,$MaxV,$X1,$Y1,$X2,$Y2);



Description:

This function counts the number of pixels in a given image that fall between a range of HSV values in the hue, saturation, and value color space.





If a pixel falls within the minimum and maximum boundaries for each color and intensity parameter, it is added to the summation.





The $X1,$Y1, $X2, $Y2 parameters are used to express the region of interest for the calculation, with $X1, $Y1 setting the upper left corner of the region of interest, and $X2, $Y2 specifying the lower right corner of the region of interest.





The function returns a handle to an OpenCV image object which shows the matching pixels highlighted in blue, as well as the number of pixels that matched the search criteria.





Requirements:

These functions use the Open-Source OpenCV computer vision library from Intel, and therefore will offer the maximum performance when running on Intel Processors due to low-level optimizations for the Intel architecture. Any camera or input device that Windows recognizes as an imaging device should be compatible with these functions.





Function arguments



Parameter

Variable Type

Description



$Image

Object

An OpenCV Image Structure that has been loaded from an existing file or camera capture.



$MinH

Float

The minimum Hue Value of the pixel threshold. (Values 0 to 360) Note: Since Hue is a cylindrical-coordinate and could wrap around the zero value, if the lower limit for Hue is greater than the higher limit, the function will work on the assumption that the user wants to select Hue values that cross the zero value.



$MinS

Float

The minimum Saturation Value of the pixel threshold. (Values 0 to 100)



$MinV

Float

The minimum ' Value' Value of the pixel threshold. (Values 0 to 100)



$MaxH

Float

The maximum Hue Value of the pixel threshold. (Values 0 to 360)



$MaxS

Float

The maximum Saturation Value of the pixel threshold. (Values 0 to 100)



$MaxV

Float

The maximum ' Value' Value of the pixel threshold. (Values 0 to 100)



$X1

Integer

Upper Left X coordinate of the region of interest



$Y1

Integer

Upper Left Y coordinate of the region of interest



$X2

Integer

Lower Right X coordinate of the region of interest



$Y2

Integer

Lower Right Y coordinate of the region of interest





Return parameters



Parameter

Variable Type

Description



$PixelCount

Integer

The number of pixels matching the input color criteria.



$MatchImage

Object

An OpenCV Image Structure which can be used with the other OpenCV functions in this library. This image will be a copy of the input image, with the matched pixels indicated in blue.





Usage Example:





($BadCount,MatchImage) = OpenCV_CountPixelsInHSVRangeReturnImage($BadImage,0,0,0,25,100,100,429,341,768,470);





Original Image:





Match Image:





OpenCV_CountVerticalEdges

Previous Top Next



* * *



OpenCV_CountVerticalEdges

Usage:

$edges = OpenCV_CountVerticalEdges ($Image, $YCoordinate, $X1Coordinate, $X2Coordinate, $RGB);

Description:

Counts the number of edges found in the vertical line at X coordinate and between Y1 and Y2. The RGB threshold is used to trigger to set the point in which an edge is considered valid as such.

Note:

This function works best with the output of an edge detection algorithm such as OpenCV_CannyEdgeDetectGrayscale().

Function arguments



Parameter

Variable Type

Description



$Image

Object

The image object to work with.



$XCoordinate

Integer

The horizontal position of the line that will be checked.



$Y1Coordinate

Integer

The starting Y position of the line.



$Y2Coordinate

Integer

The ending Y position of the line.



$RGB

String

RGB Edge Threshold trigger. This is a comma spearated string of R, G and B values (0 - 255).





Return arguments



Parameter

Variable Type

Description



$edges

Integer

The number of edges that were detected.





Example:





$edges = OpenCV_CountVerticalEdges ($Image, 100, 1, 479, ”20,20,20”);





OpenCV_ExtractLEDInfo

Previous Top Next



* * *



OpenCV_ExtractLEDInfo

Usage:

($X1,$Y1,$X2,$Y2) = OpenCV_ExtractLEDInfo($Image,$X1,$Y1,$X2,$Y2,$RGB);

Description:

Extract the coordinates of an LED inside an area. If no LED is found the function fails. The RGB threshold is used to detect the black area or the minimum color to consider the existence of an LED. Parameters:



Name

Type

Description



$Image

Object





$X1

Integer





$Y1

Integer





$X2

Integer





$Y2

Integer





$RGB

String

RGB Threshold . This is a comma-separated string of R, B, and G values (0-255).





Returns:



Name

Type

Description



X1,Y1,X2,Y2

Integers

The coordinates of the LED





Example:





($X1,$Y1,$X2,$Y2) = OpenCV_ExtractLEDInfo($Image,10,10,50,50,”50,50,50”);





OpenCV_GetColorIntensity

Previous Top Next



* * *



OpenCV_GetColorIntensity

Usage:

($Red,$Green,$Blue) = OpenCV_GetCameraProperties($Image,$RoiUpperLeftX,$RoiUpperLeftY,$RoiWidth,$RoiHeight);



Description:

This function returns the RGB color intensity of the supplied region of interest. If the image passed into the function is a color image of any format, it will be automatically converted to a RGB image before the analysis is performed.

If the requested region of interest is outside of the maximum bounds of the image, the functon will automatically return a failing test result.



Requirements:

These functions use the Open-Source OpenCV computer vision library from Intel, and therefore will offer the maximum performance when running on Intel Processors due to low-level optimizations for the Intel architecture. Any camera or input device that Windows recognizes as an imaging device should be compatible with these functions.





Function arguments



Parameter

Variable Type

Description



$Image

Object

An OpenCV Image Object



$RoiUpperLeftX

Integer

The x-coordinate of the upper left corner of the region of interest to be analyzed for intensity.



$RoiUpperLeftY

Integer

The y-coordinate of the upper left corner of the region of interest to be analyzed for intensity



$RoiWidth

Integer

The width of the region of interest specified in pixels (X-axis)



$RoiHeight

Integer

The height of the region of interest specified in pixels (Y-axis)





Return parameters



Parameter

Variable Type

Description



$Red

Float

The average red color channel pixel values in the specified region of interest.



$Green

Float

The average green color channel pixel values in the specified region of interest.



$Blue

Float

The average blue color channel pixel values in the specified region of interest.





Usage Example:





$Image = OpenCV_LoadImageFromFile("c:\\test.png");





($Red,$Green,$Blue) = OpenCV_GetColorIntensity($Image,214,166,25,25);

UpdateStatus($Red);

UpdateStatus($Green);

UpdateStatus($Blue);





OpenCV_GetHLSAvgLumThreshold

Previous Top Next



* * *



OpenCV_GetHLSAvgLumThreshold.cs

Get the HLS average from an image, the area is limited to a rectangle defined by the Cartesian coordinates (X1,Y1) to (X1+Width, Y1+Height). The Lum threshold is the minimum intensity that pixels should meets to be included in the average. Parameters:





Image

Object



X1

Integer, x-cord of top left corner of area of interest.



Y1

Integer, y-cord of top left corner of area of interest



Width

Integer, width of area of interest in pixels, relative to (X1,Y1)



Height

Integer, height of area of interest in pixels, relative to (X1,Y1)



Lum threshold

Integer





Returns:





Hue, Lum, Sat

Integer, the average of HLS





Example:





($Hue,$Lum,$Sat) = OpenCV_GetHLSAvgLumThreshold ($Image,10,10,50,50,4);





OpenCV_GetHorizontalEdge//

Previous Top Next



* * *



OpenCV_GetHorizontalEdge



Usage:

$XCoord = OpenCV_GetHorizontalEdge ($Image, $YCoord, $Xleft, $Xright, $RGBThreshold, $EdgeNum, $Direction);

Description

Scans a single horizontal line to find all points on the line that have Red, Green and Blue values above a specified level. These are considered edges. Returns the X coordinate of the specified edge number found. Eg. edge number 3.

Notes:

If an edge is not found, the function returns -1.

Requirements:

These functions use the Open-Source OpenCV computer vision library from Intel, and therefore will offer the maximum performance when running on Intel Processors due to low-level optimizations for the Intel architecture. Any camera or input device that Windows recognizes as an imaging device should be compatible with these functions.

Function arguments



Parameter

Variable Type

Description



$Image

Object

An OpenCV image object of any resolution, format, or color depth



$YCoord

Integer

The vertical coordinate of the horizontal line that will be scanned



$Xleft

Integer

The left-most X coordinate of the horizontal line that will be scanned



$Xright

Integer

The right-most X coordinate of the horizontal line that will be scanned



$RGBThreshold

String

Comma delimited string listing the Red, Green and Blue Threshold levels for finding an edge



$EdgeNum

Integer

The number of the edge to return



$Direction

String

The direction to scan

Value:

· "LEFT2RIGHT"

· "RIGHT2LEFT"





Return parameters



Parameter

Variable Type

Description



$XCoord

Integer

The X Coordinate of the specified edge. Returns -1 if no edges were found.





Example:





// Scan a horizontal line at vertical coordinate 190 from X=20 to X=125 for edges where Red level > 150.

$YCoord = 190;

$Xleft = 20;

$XRight = 125;

$RGDThreshold = "150,0,0"; // Green and Blue levels set to 0. We are looking at Red edges.

$EdgeNum = 3; // Return the third edge.

$Direction = "LEFT2RIGHT";

$XCoord = OpenCV_GetHorizontalEdge($Image, $YCoord, $Xleft, $Xright, $RGBThreshold, $EdgeNum, $Direction);





OpenCV_GetHorzLine2PointContour

Previous Top Next



* * *



OpenCV_GetHorzLine2PointContour

Gets two points of a contour in an image.

This function is useful to detect if an object has a rotation from the position we are expecting. With the coordinates from the two points we can calculate the degrees necessary to leave the image in the correct angle. Parameters:





Image

Object



X1

Integer



Y1

Integer



X2

Integer



Y2

Integer



RGB Threshold

String



Direction

String (“LEFT2RIGHT”, “RIGHT2LEFT”)





Returns:





X,Y,X1,Y1

Integer





Example:





($X,$Y,$X1,$Y1) = OpenCV_GetHorzLine2PointContour($Image,10,10,400,400,”50,50,50”,”LEFT2RIGHT”);





OpenCV_GetHoughCircles

Previous Top Next



* * *



OpenCV_GetHoughCircles



Usage:

($numCircles, $centerX, $centerY, $radii) = OpenCV_GetHoughCircles($image, $cannyThresh, $accumThresh, $accumResol, $minDist, $minR, $maxR);



Description:

This function performs a canny edge detect on a grayscale image then performs a circle detection using the Hough algorithm.





Remarks:

For more information about the Hough Circles method, see: http://docs.opencv.org/doc/tutorials/imgproc/imgtrans/hough_circle/hough_circle.html

and: http://www.emgu.com/wiki/files/1.4.0.0/html/6f78c3d8-fb1a-5983-2862-549c49019d49.htm





These functions use the Open-Source OpenCV computer vision library from Intel, and therefore will offer the maximum performance when running on Intel Processors due to low-level optimizations for the Intel architecture.

Function arguments



Parameter

Variable Type

Description



$image

Object

The grayscale image to perform the Circle Detection on.



$cannyThresh

Integer

The higher threshold of the two passed to Canny edge detector (the lower one will be half this number).



$accumThresh

Integer

Accumulator threshold at the center detection stage. The smaller it is, the more false circles may be detected. Circles, corresponding to the larger accumulator values, will be returned first.



$accumResol

Integer

Resolution of the accumulator used to detect centers of the circles. For example, if it is 1, the accumulator will have the same resolution as the input image, if it is 2 - accumulator will have half the width and height, etc.



$minDist

Integer

Minimum distance between centers of the detected circles. If the parameter is too small, multiple neighbor circles may be falsely detected in addition to a true one. If it is too large, some circles may be missed.



$minR

Integer

Minimum radius of the circles to search for.



$maxR

Integer

Maximum radius of the circles to search for.





Return parameters



Parameter

Variable Type

Description



$numCircles

Integer

The number of circles found in the image.



$centerX

Array

An array of Floats that contains the X coordinates of the centers of all of the circles found.



$centerY

Array

An array of Floats that contains the Y coordinates of the centers of all of the circles found.



$radii

Array

An array of Floats that contains the radii of all of the circles found.





Example(s):

// Assumed: $image is already loaded with grayscale image.

$cannyThresh = 120;

$accumThresh = 85;

$accumResol = 1;

$minDist = 80;

$minR = 50;

$maxR = 450;

($numCircles, $centerX, $centerY, $radii) = OpenCV_GetHoughCircles($image, $cannyThresh, $accumThresh, $accumResol, $minDist, $minR, $maxR);





OpenCV_GetHoughLines

Previous Top Next



* * *



OpenCV_GetHoughLines



Usage:

($numLines, $startX, $startY, $endX, $endY) = OpenCV_GetHoughLines($image, $cannyThresh, $cannyLink, $distResol, $angleResol, $accumThresh, $minWidth, $maxGap);



Description:

This function performs a canny edge detect on a grayscale image then performs a line detection using the Hough algorithm.





Remarks:

For more information about the Hough Lines method, see: http://docs.opencv.org/doc/tutorials/imgproc/imgtrans/hough_lines/hough_lines.html

and: http://www.emgu.com/wiki/files/2.3.0/document/html/8cafb14d-e65f-aff1-892f-25376a208bdb.htm





These functions use the Open-Source OpenCV computer vision library from Intel, and therefore will offer the maximum performance when running on Intel Processors due to low-level optimizations for the Intel architecture.

Function arguments



Parameter

Variable Type

Description



$image

Object

The grayscale image to perform the Circle Detection on.



$cannyThresh

Float

The higher threshold of the two passed to Canny edge detector.



$cannyLink

Float

The minimum threshold value for a pixel-to-pixel neighboring threshold for two pixels to be considered as part of a common contour.



$distResol

Float

Distance resolution in pixel-related units.



$angleResol

Float

Angle resolution in radians.



$accumThresh

Integer

A line is returned if the corresponding accumulator value is greater than the threshold.



$minWidth

Integer

Minimum width of a line in pixels.



$maxGap

Integer

The maximum gap between lines for it to be considered one line.





Return parameters



Parameter

Variable Type

Description



$numLines

Integer

The number of lines found in the image.



$startX

Array

An array of Floats that contains the X coordinates of the starts of all of the lines found.



$startY

Array

An array of Floats that contains the Y coordinates of the starts of all of the lines found.



$endX

Array

An array of Floats that contains the X coordinates of the ends of all of the lines found.



$endY

Array

An array of Floats that contains the Y coordinates of the ends of all of the lines found.





Example(s):

// Assumed: $image is already loaded with grayscale image.

$cannyThresh = 150;

$cannyLink = 60;

$distResol = 2;

$angleResol = 0.0698131; // PI / 45.

$accumThresh = 100;

$minWidth = 3;

$maxGap = 7;

($numLines, $startX, $startY, $endX, $endY) = OpenCV_GetHoughLines($image, $cannyThresh, $cannyLink, $distResol, $angleResol, $accumThresh, $minWidth, $maxGap);





OpenCV_GetHueColorArea

Previous Top Next



* * *



OpenCV_GetHueColorArea

This function counts the number of pixels within an area that are within the Min and Max HSL Limits. This function useful to get the area for a specific color like an LED. Parameters:





Image

Object



X1

Integer



Y1

Integer



X2

Integer



Y2

Integer



Min HSL Threshold

String



Max HSL Threshold

String





Returns:





Area

Integer





Example:





$area = OpenCV_GetHueColorArea ($Image,10,10,30,30,”0,50,50”,”45,240,240”);





OpenCV_GetImageChannelCount

Previous Top Next



* * *



OpenCV_GetImageChannelCount



Usage:

$ChannelCount = OpenCV_GetImageChannelCount($Image);



Description:





This function returns the number of color channels in the specified OpenCV image structure.

For example, an RGB image will contain 3 color channels, and an RGBA (w/ Alpha Channel) image will contain 4 color channels.

A grayscale image will contain a single color channel.





Requirements:

These functions use the Open-Source OpenCV computer vision library from Intel, and therefore will offer the maximum performance when running on Intel Processors due to low-level optimizations for the Intel architecture. Any camera or input device that Windows recognizes as an imaging device should be compatible with these functions.





Function arguments



Parameter

Variable Type

Description



$Image

Object

An OpenCV image object of any resolution, format, or color depth





Return parameters



Parameter

Variable Type

Description



$ChannelCount

Integer

The number of color channels that exist in the supplied OpenCV image.





Usage Example:





$Image = OpenCV_LoadImageFromFile("c:\\a.png");

$ChannelCount = OpenCV_GetImageChannelCount($Image);





OpenCV_GetImageSize

Previous Top Next



* * *



OpenCV_GetImageSize



Usage:

($Width,$Height) = OpenCV_GetImageSize($Image);



Description:

This function returns the width and height of the supplied OpenCV image structure in pixels.





Requirements:

These functions use the Open-Source OpenCV computer vision library from Intel, and therefore will offer the maximum performance when running on Intel Processors due to low-level optimizations for the Intel architecture. Any camera or input device that Windows recognizes as an imaging device should be compatible with these functions.





Function arguments



Parameter

Variable Type

Description



$Image

Object

An OpenCV image object of any resolution, format, or color depth





Return parameters



Parameter

Variable Type

Description



$Width

Integer

The number of pixels contained in the x axis of the image



$Height

Integer

The number of pixels contained in the y axis of the image.





Usage Example:





$Image = OpenCV_LoadImageFromFile("c:\\a.png");

($Width,$Height) = OpenCV_GetImageSize($Image);

UpdateStatus($Width);

UpdateStatus($Height);





OpenCV_GetMonoIntensity

Previous Top Next



* * *



OpenCV_GetMonoIntensity

Usage:

($Intensity,$StdDev) = OpenCV_GetMonoIntensity($Image,$RoiUpperLeftX,$RoiUpperLeftY,$RoiWidth,$RoiHeight);



Description:

This function returns the grayscale intensity of the supplied region of interest, and the standard deviation of the pixel values in that region. If the image passed into the function is a color image of any format, it will be automatically converted to a grayscale image before the analysis is performed.

If the requested region of interest is outside of the maximum bounds of the image, the functon will automatically return a failing test result.



Requirements:

These functions use the Open-Source OpenCV computer vision library from Intel, and therefore will offer the maximum performance when running on Intel Processors due to low-level optimizations for the Intel architecture. Any camera or input device that Windows recognizes as an imaging device should be compatible with these functions.





Function arguments



Parameter

Variable Type

Description



$Image

Object

An OpenCV Image Object



$RoiUpperLeftX

Integer

The x-coordinate of the upper left corner of the region of interest to be analyzed for intensity.



$RoiUpperLeftY

Integer

The y-coordinate of the upper left corner of the region of interest to be analyzed for intensity



$RoiWidth

Integer

The width of the region of interest specified in pixels (X-axis)



$RoiHeight

Integer

The height of the region of interest specified in pixels (Y-axis)





Return parameters



Parameter

Variable Type

Description



$Intensity

Float

The 256 bit average intensity of the image in the region of interest (0=Black, 255=white)



$StdDev

Float

The standard deviation of the pixel values in the given region of interest specified in the image





Usage Example:





$Image = OpenCV_LoadImageFromFile("c:\\test.png");

($Intensity,$StdDev) = OpenCV_GetMonoIntensity($Image,40,40,20,20);

UpdateStatus($Intensity);

UpdateStatus($StdDev);





OpenCV_GetMonoMinMaxIntensityInROI

Previous Top Next



* * *



OpenCV_GetMonoMinMaxIntensityInROI



Usage:

($minX,$minY,$minValue,$maxX,$maxY,$maxValue) = OpenCV_GetMonoMinMaxIntensityInROI($Image,$UpperX,$UpperY,$Width,$Height);



Description:

This function takes an OpenCV image, the upper left coordinates & width and height of the region of interest. It returns the gray-scale maximum and minimum pixel values within that region along with their pixel coordinates.





The function will display the following:

· The amount of maximum and minimum locations found

· The maximum and minimum pixel values found within the region of interest.

· The coordinates of the first maximum value found

· The coordinates of the first minimum value found





Note: If the image passed into the function is a color image of any format, it will be automatically converted to a gray-scale image before the analysis is performed.

Note: If the requested region of interest is outside of the maximum bounds of the image, the function will automatically return a failing test result.





Requirements:

These functions use the Open-Source OpenCV computer vision library from Intel, and therefore will offer the maximum performance when running on Intel Processors due to low-level optimizations for the Intel architecture. Any camera or input device that Windows recognizes as an imaging device should be compatible with these functions.





Function arguments



Parameter

Variable Type

Description



$Image

Object

An OpenCV Image Structure that has been loaded from an existing file or camera capture.



$UpperX

Integer

Upper left X coordinate of the ROI



$UpperY

Integer

Upper left Y coordinate of the ROI



$Width

Integer

ROI Width (Pixels)



$Height

Integer

ROI Height (Pixels)





Return parameters



Parameter

Variable Type

Description



$minX

Integer

X coordinate of the first minimum pixel value location



$minY

Integer

Y coordinate of the first minimum pixel value location



$minValue

Float

Pixel value of the first minim pixel located



$maxX

Integer

X coordinate of the first maximum pixel value location



$maxY

Integer

Y coordinate of the first maximum pixel value location



$maxValue

Float

Pixel value of the first maximum pixel value located





Usage Example:

($minx,$miny,$minv,$maxx,$maxy,$maxv) = OpenCV_GetMonoMinMaxIntensityInROI($Image,20,20,100,100);





OpenCV_GetVertLine2PointContour

Previous Top Next



* * *



OpenCV_GetVertLine2PointContour

Gets two points of a contour in an image.

This function is useful to detect if an object has a rotation from the position we are expecting. With the coordinates from the two points we can calculate the degrees necessary to leave the image in the correct angle. Parameters:





Image

Object



X1

Integer



Y1

Integer



X2

Integer



Y2

Integer



RGB Threshold

String



Direction

String (“UP2BOTTOM”, “BOTTOM2UP”)





Returns:





X,Y,X1,Y1

Integer





Example:





$X,$Y,$X1,$Y1 = OpenCV_GetHorzLine2PointContour ($Image,10,10,400,400,”50,50,50”,” UP2BOTTOM”);





OpenCV_GetVerticalEdge

Previous Top Next



* * *



OpenCV_GetVerticalEdge



Usage:

$YCoord = OpenCV_GetVerticalEdge ($Image, $XCoord, $Ytop, $Ybottom, $RGBThreshold, $EdgeNum, $Direction);

Description

Scans a single vertical line to find all points on the line that have Red, Green and Blue values above a specified level. These are considered edges. Returns the Y coordinate of the specified edge number found. Eg. edge number 3.

Notes:

If an edge is not found, the function returns -1.

Requirements:

These functions use the Open-Source OpenCV computer vision library from Intel, and therefore will offer the maximum performance when running on Intel Processors due to low-level optimizations for the Intel architecture. Any camera or input device that Windows recognizes as an imaging device should be compatible with these functions.

Function arguments



Parameter

Variable Type

Description



$Image

Object

An OpenCV image object of any resolution, format, or color depth



$XCoord

Integer

The horizontal coordinate of the vertical line that will be scanned



$Ytop

Integer

The top-most Y coordinate of the vertical line that will be scanned



$Ybottom

Integer

The bottom-most Y coordinate of the vertical line that will be scanned



$RGBThreshold

String

Comma delimited string listing the Red, Green and Blue Threshold levels for finding an edge



$EdgeNum

Integer

The number of the edge to return



$Direction

String

The direction to scan

Value:

· "TOP2BOTTOM"

· "BOTTOM2TOP"

· "UP2BOTTOM" (deprecated)

· "BOTTOM2UP" (deprecated)





Return parameters



Parameter

Variable Type

Description



$YCoord

Integer

The Y Coordinate of the specified edge. Returns -1 if no edges were found.





Example:





// Scan a vertical line at horizontal coordinate 190 from Y=20 to Y=125 for edges where Red level > 150.

$XCoord = 190;

$Ytop = 20;

$Ybottom = 125;

$RGDThreshold = "150,0,0"; // Green and Blue levels set to 0. We are looking at Red edges.

$EdgeNum = 3; // Return the third edge.

$Direction = "TOP2BOTTOM";

$XCoord = OpenCV_GetVerticalEdge($Image, $XCoord, $Ytop, $Ybottom, $RGBThreshold, $EdgeNum, $Direction);





OpenCV_ManualCompareImages

Previous Top Next



* * *



OpenCV_ManualCompareImages



Usage:

$cReturn = OpenCV_ManualCompareImages($title, $image1, $image2);





Description:

This function opens a form to show the two images side by side. The user can then select whether the images pass or fail.





Remarks:

This function will not fail the test when the user selects the FAIL button, but will return the word "FAIL".

These functions use the Open-Source OpenCV computer vision library from Intel, and therefore will offer the maximum performance when running on Intel Processors due to low-level optimizations for the Intel architecture.

Function arguments



Parameter

Variable Type

Description



$title

String

The title to put on screen above the images.



$image1

Object

The first image to show.



$image2

Object

The second image to show.





Return parameters



Parameter

Variable Type

Description



$cReturn

String

The name of the button the user clicked on. Will be "PASS" or "FAIL" or empty if the user closed the window without clicking on a button.





Example(s):

$title = "Confirm";

$cReturn = OpenCV_ManualCompareImages($title, $image1, $image2);





if ($cReturn == "FAIL")

{

Fail("The images did not match.");

}





OpenCV_ManualCompareNonBlocking

Previous Top Next



* * *



OpenCV_ManualCompareNonBlocking



Usage:

OpenCV_ManualCompareNonBlocking($title, $image1, $image2);





Description:

This function opens a form to show the two images side by side. The new form is opened on a separate thread so that it does not stop the script running.





Remarks:

The user must close the form with the images manually by clicking on the Close button or clicking on the X in the top right of the window.

These functions use the Open-Source OpenCV computer vision library from Intel, and therefore will offer the maximum performance when running on Intel Processors due to low-level optimizations for the Intel architecture.

Function arguments



Parameter

Variable Type

Description



$title

String

The title to display on the window.



$image1

Object

The first image to show.



$image2

Object

The second image to show.





Return parameters



Parameter

Variable Type

Description



None





Example(s):

OpenCV_ManualCompareNonBlocking($title, $image1, $image2);





OpenCV_MatchTemplate

Previous Top Next



* * *



OpenCV_MatchTemplate



Usage:

($Confidence,$X,$Y,$ImageMatch) = OpenCV_MatchTemplate($SearchImage,$TemplateImage,$MatchingAlgorithm,$ShowDebug);



Description:

This function performs a basic pattern matching algorithm which attempts to find the template image specified inside of the search image.





The template matching performed via this function "slides" the template image over the search image and computes a corresponding match confidence based on the matching algorithm specified in the function.





The different pattern matching algorithms supported by this function have all been normalized to compensate for colorspace differences caused by poor lighting control.

The "Normalized Correlation Matching" algorithm multiplicatively matches the template against an image so that a perfect match returns a very high confidence and poor matches will have a very low confidence, or 0.

The "Normalized Correlation Coefficient Matching" algorithm attempts to match a template relative to it's mean against the image relative to it's respective mean so that a perfect match will result in a value of 100%, and low matches will correspond a confidence of 50% which essentially means that there is no correlation between the matches (i.e. random alignments).





Finally, the "Normalized Square Difference Matching" algorithm attempts to match the pattern by squaring the difference between the template and the patch of the image being search, where low values (i.e. small differences) yield higher confidence intervals.





The $ShowDebug parameter presents a modal dialog window which shows the operator both the search image, the best pattern match location of the template, and also the computed match image (the correlation or difference map depending on the algorithm chosen) which is useful for debugging when attempting to choose the most appropriate algorithm for a given template matching situation.





Each algorithm will perform better or worse in different situations so it's recommended to try all three, but in general, the Normalized Correlation Coefficent Matching algorithm yields the best results in most situations.





Note:

This function performs a simple template match operation on two images, therefore the template image and the source image must be of the same alignment and scale in order to create an effective match. If a more sophisticated (and more time-consuming) method is required, please see the SURF feature detection algorithm which provides a state of the art, scale and rotation invariant pattern matching solution.





Requirements:

These functions use the Open-Source OpenCV computer vision library from Intel, and therefore will offer the maximum performance when running on Intel Processors due to low-level optimizations for the Intel architecture. Any camera or input device that Windows recognizes as an imaging device should be compatible with these functions.





Function arguments



Parameter

Variable Type

Description



$SearchImage

Object

The OpenCV image object to search for the corresponding template



$TemplateImage

Object

The OpenCV image object to serve as a template for matching inside of the 'Search Image'



$MatchingAlgorithm

String

The desired matching algorithm to use during the template matching operation. Allowable values are:

· "CCOEFF_NORMALIZED" - Correlated Coefficient Matching Algorithm

· "CCORR_NORMALIZED" - Correlation Matching Algorithm

· "SQDIFF_NORMALIZED" - Square of Differences Matching Algorithm



$ShowDebug

Boolean

Show debug image after match [TRUE,FALSE]





Return parameters



Parameter

Variable Type

Description



$Confidence

Float

The overall confidence interval of the match between the template and the source image.



$X

Integer

The X coordinate of the best matching location of the upper left hand corner of the template found in the source image.



$Y

Integer

The Y coordinate of the best matching location of the upper left hand corner of the template found in the source image.



$Image

Object

An OpenCV image structure showing the correlation of the matches between the template and the search image. The size of the image will be the same as the search image minus the dimensions of the template image. When using correlation matching algorithms, the overall brightness of a pixel inside of the match image indicates a high correlation (showing the best match). When using a differencing matching algorithm, the lowest intensity (dark region) indicates a more likely match.





Usage Example:

$SearchImage = OpenCV_LoadImageFromFile("c:\\folderview.png");

$TemplateImage = OpenCV_LoadImageFromFile("c:\\folder.png");

($Confidence,$X,$Y,$Image) = OpenCV_MatchTemplate($SearchImage,$TemplateImage,"CCOEFF_NORMALIZED",true);

End;





OpenCV_MatchTemplateWithROI

Previous Top Next



* * *



OpenCV_MatchTemplateWithROI



Usage:

($Confidence,$X,$Y,$ImageMatch) = OpenCV_MatchTemplateWithROI($SearchImage,$TemplateImage,$MatchingAlgorithm,$X,$Y, $Width, $Height,$ShowDebug);



Description:

This function performs a basic pattern matching algorithm which attempts to find the template image inside of the specified region of interest within the search image.





The template matching performed via this function "slides" the template image over the region of interest in the search image and computes a corresponding match confidence based on the matching algorithm specified in the function.





The different pattern matching algorithms supported by this function have all been normalized to compensate for colorspace differences caused by poor lighting control.

The "Normalized Correlation Matching" algorithm multiplicatively matches the template against an image so that a perfect match returns a very high confidence and poor matches will have a very low confidence, or 0.

The "Normalized Correlation Coefficient Matching" algorithm attempts to match a template relative to it's mean against the image relative to it's respective mean so that a perfect match will result in a value of 100%, and low matches will correspond a confidence of 50% which essentially means that there is no correlation between the matches (i.e. random alignments).





Finally, the "Normalized Square Difference Matching" algorithm attempts to match the pattern by squaring the difference between the template and the patch of the image being search, where low values (i.e. small differences) yield higher confidence intervals.





The $ShowDebug parameter presents a modal dialog window which shows the operator both the search image, the best pattern match location of the template, and also the computed match image (the correlation or difference map depending on the algorithm chosen) which is useful for debugging when attempting to choose the most appropriate algorithm for a given template matching situation.





Each algorithm will perform better or worse in different situations so it's recommended to try all three, but in general, the Normalized Correlation Coefficent Matching algorithm yields the best results in most situations.





Note:

This function performs a simple template match operation on two images, therefore the template image and the region of interest within the source image must be of the same alignment and scale in order to create an effective match. If a more sophisticated (and more time-consuming) method is required, please see the SURF feature detection algorithm which provides a state of the art, scale and rotation invariant pattern matching solution.





Requirements:

These functions use the Open-Source OpenCV computer vision library from Intel, and therefore will offer the maximum performance when running on Intel Processors due to low-level optimizations for the Intel architecture. Any camera or input device that Windows recognizes as an imaging device should be compatible with these functions.





Function arguments



Parameter

Variable Type

Description



$SearchImage

Object

The OpenCV image object to search for the corresponding template



$TemplateImage

Object

The OpenCV image object to serve as a template for matching inside of the 'Search Image'



$MatchingAlgorithm

String

The desired matching algorithm to use during the template matching operation. Allowable values are:

· "CCOEFF_NORMALIZED" - Correlated Coefficient Matching Algorithm

· "CCORR_NORMALIZED" - Correlation Matching Algorithm

· "SQDIFF_NORMALIZED" - Square of Differences Matching Algorithm



$X

Integer

The upper left X coordinate of the region of interest



$Y

Integer

The upper left Y coordinate of the region of interest



$Width

Integer

The width of the region of interest



$Height

Integer

The height of the region of interest



$ShowDebug

Boolean

Show debug image after match [TRUE,FALSE]





Return parameters



Parameter

Variable Type

Description



$Confidence

Float

The overall confidence interval of the match between the template and the source image.



$X

Integer

The X coordinate of the best matching location of the upper left hand corner of the template found in the source image.



$Y

Integer

The Y coordinate of the best matching location of the upper left hand corner of the template found in the source image.



$Image

Object

An OpenCV image structure showing the correlation of the matches between the template and the search image. The size of the image will be the same as the search image minus the dimensions of the template image. When using correlation matching algorithms, the overall brightness of a pixel inside of the match image indicates a high correlation (showing the best match). When using a differencing matching algorithm, the lowest intensity (dark region) indicates a more likely match.





Usage Example:

$SearchImage = OpenCV_LoadImageFromFile("c:\\folderview.png");

$TemplateImage = OpenCV_LoadImageFromFile("c:\\folder.png");

($Confidence,$X,$Y,$Image) = OpenCV_MatchTemplateWithROI($SearchImage,$TemplateImage,"CCOEFF_NORMALIZED", 10,10,100,100,true);

End;





OpenCV_MatchTemplateWithRotation

Previous Top Next



* * *



OpenCV_MatchTemplateWithRotation



Usage:

($Confidence,$X,$Y,$Rotation) = OpenCV_MatchTemplateWithRotation($SearchImage,$TemplateImage,$MatchingAlgorithm,$ShowDebugImage,$StartRotation,$EndRotation,$RotationStepSize,$RoiX,$RoiY,$RoiWidth,$RoiHeight);



Description:

This function performs a hybrid pattern matching algorithm which attempts to find the template image inside of the specified region of interest within the search image. The template can be rotated in the image and still be located by supplying a starting and stopping value for the allowable rotation. The user can also specify the "Step Size" for the rotation to be used when performing the template match.





The starting and stopping rotation, as well as the stepping values are supplied as "Degrees". For instance, if the user wants to match a template that may be rotated by up to -5 degrees to +5 degrees, the user could supply the following values $StartRotation=-5,$StopRotation=5,$StepSize=0.5.





This template matching is performed by "sliding and rolling" the template image over the region of interest in the search image and computes a corresponding match confidence based on the matching algorithm specified in the function.





The different pattern matching algorithms supported by this function have all been normalized to compensate for colorspace differences caused by poor lighting control.

The "Normalized Correlation Matching" algorithm multiplicatively matches the template against an image so that a perfect match returns a very high confidence and poor matches will have a very low confidence, or 0.

The "Normalized Correlation Coefficient Matching" algorithm attempts to match a template relative to it's mean against the image relative to it's respective mean so that a perfect match will result in a value of 100%, and low matches will correspond a confidence of 50% which essentially means that there is no correlation between the matches (i.e. random alignments).





Finally, the "Normalized Square Difference Matching" algorithm attempts to match the pattern by squaring the difference between the template and the patch of the image being search, where low values (i.e. small differences) yield higher confidence intervals.





The $ShowDebug parameter presents a modal dialog window which shows the operator both the search image, the best pattern match location of the template, and also the computed match image (the correlation or difference map depending on the algorithm chosen) which is useful for debugging when attempting to choose the most appropriate algorithm for a given template matching situation.





Each algorithm will perform better or worse in different situations so it's recommended to try all three, but in general, the Normalized Correlation Coefficent Matching algorithm yields the best results in most situations.





Note:

This function performs a simple template match operation on two images, therefore the template image and the region of interest within the source image must be of the same alignment and scale in order to create an effective match. If a more sophisticated (and more time-consuming) method is required, please see the SURF feature detection algorithm which provides a state of the art, scale and rotation invariant pattern matching solution.





Requirements:

These functions use the Open-Source OpenCV computer vision library from Intel, and therefore will offer the maximum performance when running on Intel Processors due to low-level optimizations for the Intel architecture. Any camera or input device that Windows recognizes as an imaging device should be compatible with these functions.





Function arguments



Parameter

Variable Type

Description



$SearchImage

Object

The OpenCV image object to search for the corresponding template



$TemplateImage

Object

The OpenCV image object to serve as a template for matching inside of the 'Search Image'



$MatchingAlgorithm

String

The desired matching algorithm to use during the template matching operation. Allowable values are:

· "CCOEFF_NORMALIZED" - Correlated Coefficient Matching Algorithm

· "CCORR_NORMALIZED" - Correlation Matching Algorithm

· "SQDIFF_NORMALIZED" - Square of Differences Matching Algorithm



$ShowDebug

Boolean

Show debug image after matching [TRUE,FALSE]



$StartRotation

Float

The starting value for the rotation tolerance for pattern matching the template. Allowable values are between (-360 to 360 degrees)



$EndRotation

Float

The ending value for the rotation tolerance for pattern matching the template. Allowable values are between (-360 to 360 degrees).



$RotationStepSize

Float

The step size in degrees for incrementing the rotation for pattern matching Allowable values are between 0 to 360 degrees.



$X

Integer

The upper left X coordinate of the region of interest



$Y

Integer

The upper left Y coordinate of the region of interest



$Width

Integer

The width of the region of interest



$Height

Integer

The height of the region of interest





Return parameters



Parameter

Variable Type

Description



$Confidence

Float

The overall confidence interval of the match between the template and the source image.



$X

Integer

The X coordinate of the best matching location of the upper left hand corner of the template found in the source image.



$Y

Integer

The Y coordinate of the best matching location of the upper left hand corner of the template found in the source image.



$Rotation

Float

The number of degrees of rotation (clock-wise) for which the best template match was found.





Usage Example:

// Real Test





$ServerTemplate = OpenCV_LoadImageFromFile("c:\\images\\server_template.bmp");





$TestImage3 = OpenCV_LoadImageFromFile("c:\\images\\TestPictureDUT13.bmp"); // Rotated 25 Degrees





($Width,$Height) = OpenCV_GetImageSize($TestImage3);

($Confidence,$X,$Y,$Rotation) = OpenCV_MatchTemplateWithRotation($TestImage3,$FaceTemplate,"CCOEFF_NORMALIZED",true,20,30,1,0,0,$Width,$Height);





// Searches for a pattern match between 20 and 30 degrees of rotation, with a step size of 1 degree.





Output Example:





OpenCV_PerformOCR

Previous Top Next



* * *



OpenCV_PerformOCR



Usage:

$RecognizedText = OpenCV_PerformOCR($Image, $Language, $RoiUpperLeftX, $RoiUpperLeftY, $RoiWidth, $RoiHeight, $ShowDebugWindow);



Description:

This function performs optical character recognition on a region of an OpenCV Image object and returns the text that was recognized as a string variable.





This function actually uses the Tesseract OCR library, however it was written to operate on OpenCV image structures so it is included in the OpenCV library.

The language specified configures the OCR engine to use the appropriate training files for recognizing text within the image. Currently, English, Spanish, German, Italian, Dutch, and French language definitions are included with the standard Jabil Test distribution.





The region of interest is the area from which to pull the desired text and is specified as a binding rectangle given it's upper left corner cordinates in the image, and the width and height of the region of interest.





The $ShowDebugWindow parameter is boolean value indicating whether or not you would like Jabil Test to display the thresholded region of interest to the user which can be useful when debugging OCR functionality in a test script.





Important Note: The Tesseract OCR engine performs best when the given text to recognize has an approximate height at least 35 pixels within the captured image. Although it's possible to recognize text with a height as small as 15- 20 pixels, the larger the text appears in the image will provide much more consistent recognition.





Important Note: The Tesseract OCR installer must be downloaded and installed to successfully perform character recognition. To add language files, download the desired file from the link below and paste into the "Tesseract-OCR\tessdata" directory.





The Windows installer and additional language files can be downloaded from the following URL:

http://code.google.com/p/tesseract-ocr/downloads/list

Function arguments



Parameter

Variable Type

Description



$Image

Object

An OpenCV image structure of any color depth or resolution.



$Language

String

The language learning file to initialize the recognition engine. Currently supported language definitions are:

· "ENG" = English

· "SPA" = Spanish

· "FRA" = French

· "ITA" = Italian

· "DEU" = German

· "NLD" = Dutch



$ROIUpperLeftX

Integer

The upper left X coordinate for the region of interest



$ROIUpperLeftY

Integer

The upper left Y coordinate for the region of interest



$ROIWidth

Integer

The width of the region of interest (number of pixels)



$ROIHeight

Integer

The height of the region of interest (number of pixels)



$ShowDebugWindow

Boolean

A boolean value indicating whether or not to show the debug window for the OCR operation.





Return parameters



Parameter

Variable Type

Description



$RecognizedText

String

The text recognized by the OCR function.





Usage Example:

$Image = OpenCV_LoadImageFroFile("c:\\relay.jpg");

$Text = OpenCV_PerformOCR($Image,"eng",36,13,117,24,false);

// Recognized Text = "SIEMENS"





Original Image:





Thresholded Debug Image in the Region of Interest:





OpenCV_PromptRectangleFromImage

Previous Top Next



* * *



OpenCV_PromptRectangleFromImage

This function allows the user to select rectangles in an image and extract their coordinates. This is useful for routines that calibrate testers.

The middle mouse button can be used to pan the image. Parameters:





Image

Object



Number of rectangles to draw

Integer





Returns:





Coordinates

Array





Example:





$RectPosArray = OpenCV_PromptRectagleFromImage($Image,5);

// Get coordinates from rectangle #1

$x1 = ArrayGetValue($RectPosArray,0,0);

$y1 = ArrayGetValue($RectPosArray,0,1);

$x2 = ArrayGetValue($RectPosArray,0,2);

$y2 = ArrayGetValue($RectPosArray,0,3);





// Get coordinates from rectangle #2

$x1 = ArrayGetValue($RectPosArray,0,4);

$y1 = ArrayGetValue($RectPosArray,0,5);

$x2 = ArrayGetValue($RectPosArray,0,6);

$y2 = ArrayGetValue($RectPosArray,0,7);





OpenCV_RGB2HLS

Previous Top Next



* * *





OpenCV_RGB2HLS

Converts and RGB value to HLS. The conversion is compatible with values obtained in windows applications such as MS Paint, Office, etc. Parameters:





Red

Integer



Green

Integer



Blue

Integer





Returns:





Hue,lum,sat

Integer





Example:





($hue,$lum,$sat) = OpenCV_RGB2HLS(50,50,50);





OpenCV_ShowImageInWindow

Previous Top Next



* * *



OpenCV_ShowImageInWindow



Usage:

OpenCV_ShowImageInWindow($Image);





Description:

This function will open a diagnostic and debug window showing the specified image that was passed into the function. The $Image argument can be any OpenCV image structure of any resolution or color depth.





The diagnostic and debug window allows the user to view the image and analysis information such as histograms. The window also allow filters and transformations to be applied to the image in realtime, along with zoom and pan operations.





This is a useful tool for determining the best configuration of image filtering to apply to a live image acquisition before performing analysis functions on the image.





Requirements:

These functions use the Open-Source OpenCV computer vision library from Intel, and therefore will offer the maximum performance when running on Intel Processors due to low-level optimizations for the Intel architecture.

Function arguments



Parameter

Variable Type

Description



$Image

Object

An OpenCV image object of any resolution, format, or color depth





Return parameters



Parameter

Variable Type

Description



None





Usage Example:

$Image = OpenCV_LoadImageFromFile("c:\\a.png");

OpenCV_ShowImageInWindow($Image);





OpenCV_ShowImageInWindowByName

Previous Top Next



* * *



OpenCV_ShowImageInWindowByName



Usage:

OpenCV_ShowImageInWindowByName($Image, $title);





Description:

This function will open a diagnostic and debug window showing the specified image that was passed into the function and allow the user to change the title of the image window. The $Image argument can be any OpenCV image structure of any resolution or color depth.





The diagnostic and debug window allows the user to view the image and analysis information such as histograms. The window also allow filters and transformations to be applied to the image in realtime, along with zoom and pan operations.





This is a useful tool for determining the best configuration of image filtering to apply to a live image acquisition before performing analysis functions on the image.





Requirements:

These functions use the Open-Source OpenCV computer vision library from Intel, and therefore will offer the maximum performance when running on Intel Processors due to low-level optimizations for the Intel architecture.

Function arguments



Parameter

Variable Type

Description



$Image

Object

An OpenCV image object of any resolution, format, or color depth.



$title

String

The title of the image window to show.





Return parameters



Parameter

Variable Type

Description



None





Usage Example:

$Image = OpenCV_LoadImageFromFile("c:\\a.png");





OpenCV_ShowImageInWindowByName($Image, "Image Window");





OpenCV_DrawCircle

Previous Top Next



* * *



OpenCV_DrawCircle



Usage:

$NewImage = OpenCV_DrawCircle($Image,$X, $Y,$Radius,$Thickness,$ColorR,$ColorG,$ColorB);



Description:

This function takes an OpenCV image and draws a circle on the image and returns a new image without altering the original. The circle's position, size, thickness, and color can be adjusted by setting the parameters.





Requirements:

These functions use the Open-Source OpenCV computer vision library from Intel, and therefore will offer the maximum performance when running on Intel Processors due to low-level optimizations for the Intel architecture. Any camera or input device that Windows recognizes as an imaging device should be compatible with these functions.





Function arguments



Parameter

Variable Type

Description



$Image

Object

An OpenCV Image Structure that has been loaded from an existing file or camera capture.



$X

Integer

The center X coordinate of the circle to draw



$Y

Integer

The center Y coordinate of the circle to draw



$Radius

Integer

The radius of the circle to draw



$Thickness

Integer

The thickness (in pixels) of the circle to draw



$ColorR

Integer

The Red component for the circle color to be drawn (0-255)



$ColorG

Integer

The Green component for the circle color to be drawn (0-255)



$ColorB

Integer

The Blue component for the circle color to be drawn (0-255)





Return parameters



Parameter

Variable Type

Description



$newImage

Object

An OpenCV Image Structure.





Usage Example:

$Image = OpenCV_LoadImageFromFile("c:\\test.png");

$Image = OpenCV_DrawCircle($Image,200,200,10,2,255,255,0);

OpenCV_ShowImageInWindow($Image);





OpenCV_DrawCross

Previous Top Next



* * *



OpenCV_DrawCross



Usage:

$NewImage = OpenCV_DrawCross($Image,$X, $Y,$Width,$Height,$Thickness,$ColorR,$ColorG,$ColorB);



Description:

This function takes an OpenCV image and draws a cross on the image and returns a new image without altering the original. The cross's position, size, thickness and color can be adjusted by setting the parameters.





Requirements:

These functions use the Open-Source OpenCV computer vision library from Intel, and therefore will offer the maximum performance when running on Intel Processors due to low-level optimizations for the Intel architecture. Any camera or input device that Windows recognizes as an imaging device should be compatible with these functions.





Function arguments



Parameter

Variable Type

Description



$Image

Object

An OpenCV Image Structure that has been loaded from an existing file or camera capture.



$X

Float

The center X coordinate of the cross to draw



$Y

Float

The center Y coordinate of the cross to draw



$Width

Float

The width of the cross to draw



$Height

Float

The height of the cross to draw



$Thickness

Integer

The thickness (in pixels) of the cross to draw



$ColorR

Integer

The Red component for the cross color to be drawn (0-255)



$ColorG

Integer

The Green component for the cross color to be drawn (0-255)



$ColorB

Integer

The Blue component for the cross color to be drawn (0-255)





Return parameters



Parameter

Variable Type

Description



$newImage

Object

An OpenCV Image Structure.





Usage Example:

$Image = OpenCV_LoadImageFromFile("c:\\test.png");

$Image = OpenCV_DrawCross($Image,200,200,15,15,2,255,255,0);

OpenCV_ShowImageInWindow($Image);





OpenCV_Draw Ellipse

Previous Top Next



* * *



OpenCV_DrawEllipse



Usage:

$NewImage = OpenCV_DrawEllipse($Image,$X, $Y,$Width,$Height,$Angle,$Thickness,$ColorR,$ColorG,$ColorB);



Description:

This function takes an OpenCV image and draws an ellipse on the image and returns a new image without altering the original. The ellipse's position, size, thickness, angle and color can be adjusted by setting the parameters.





Requirements:

These functions use the Open-Source OpenCV computer vision library from Intel, and therefore will offer the maximum performance when running on Intel Processors due to low-level optimizations for the Intel architecture. Any camera or input device that Windows recognizes as an imaging device should be compatible with these functions.





Function arguments



Parameter

Variable Type

Description



$Image

Object

An OpenCV Image Structure that has been loaded from an existing file or camera capture.



$X

Float

The center X coordinate of the ellipse to draw



$Y

Float

The center Y coordinate of the ellipse to draw



$Width

Float

The width of the ellipse to draw



$Height

Float

The height of the ellipse to draw



$Angle

Float

The angle of the ellipse to draw



$Thickness

Integer

The thickness (in pixels) of the ellipse to draw



$ColorR

Integer

The Red component for the ellipse color to be drawn (0-255)



$ColorG

Integer

The Green component for the ellipse color to be drawn (0-255)



$ColorB

Integer

The Blue component for the ellipse color to be drawn (0-255)





Return parameters



Parameter

Variable Type

Description



$newImage

Object

An OpenCV Image Structure.





Usage Example:

$Image = OpenCV_LoadImageFromFile("c:\\test.png");

$Image = OpenCV_DrawEllipse($Image,200,200,30,15,35,2,255,255,0);

OpenCV_ShowImageInWindow($Image);





OpenCV_DrawLine

Previous Top Next



* * *



OpenCV_DrawLine



Usage:

$NewImage = OpenCV_DrawLine($Image,$X1, $Y1,$X2,$Y2,$Thickness,$ColorR,$ColorG,$ColorB);



Description:

This function takes an OpenCV image and draws a line on the image and returns a new image without altering the original. The line's starting & ending points, thickness and color can be adjusted by setting the parameters.





Requirements:

These functions use the Open-Source OpenCV computer vision library from Intel, and therefore will offer the maximum performance when running on Intel Processors due to low-level optimizations for the Intel architecture. Any camera or input device that Windows recognizes as an imaging device should be compatible with these functions.





Function arguments



Parameter

Variable Type

Description



$Image

Object

An OpenCV Image Structure that has been loaded from an existing file or camera capture.



$X1

Integer

The starting point's X coordinate of the line to draw



$Y1

Integer

The starting point's Y coordinate of the line to draw



$X2

Integer

The ending point's X coordinate of the line to draw



$Y2

Integer

The ending point's Y coordinate of the line to draw



$Thickness

Integer

The thickness (in pixels) of the line to draw



$ColorR

Integer

The Red component for the line color to be drawn (0-255)



$ColorG

Integer

The Green component for the line color to be drawn (0-255)



$ColorB

Integer

The Blue component for the line color to be drawn (0-255)





Return parameters



Parameter

Variable Type

Description



$newImage

Object

An OpenCV Image Structure.





Usage Example:

$Image = OpenCV_LoadImageFromFile("c:\\test.png");

$Image = OpenCV_DrawLine($Image,10,10,200,200,2,255,255,0);

OpenCV_ShowImageInWindow($Image);





OpenCV_DrawRectangle

Previous Top Next



* * *



OpenCV_DrawRectangle



Usage:

$NewImage = OpenCV_DrawRectangle($Image,$UpperX, $UpperY,$Width,$Height,$Thickness,$ColorR,$ColorG,$ColorB);



Description:

This function takes an OpenCV image and draws an rectangle on the image and returns a new image without altering the original. The rectangle position, size, thickness, and color can be adjusted by setting the parameters.





Requirements:

These functions use the Open-Source OpenCV computer vision library from Intel, and therefore will offer the maximum performance when running on Intel Processors due to low-level optimizations for the Intel architecture. Any camera or input device that Windows recognizes as an imaging device should be compatible with these functions.





Function arguments



Parameter

Variable Type

Description



$Image

Object

An OpenCV Image Structure that has been loaded from an existing file or camera capture.



$UpperX

Integer

Upper left X coordinate of the Rectangle to draw



$UpperY

Integer

Upper left Y coordinate of the Rectangle to draw



$Width

Integer

The width of the rectangle to draw



$Height

Integer

The height of the rectangle to draw



$Thickness

Integer

The thickness (in pixels) of the Rectangle to draw



$ColorR

Integer

The Red component for the rectangle color to be drawn (0-255)



$ColorG

Integer

The Green component for the rectangle color to be drawn (0-255)



$ColorB

Integer

The Blue component for the rectangle color to be drawn (0-255)





Return parameters



Parameter

Variable Type

Description



$newImage

Object

An OpenCV Image Structure.





Usage Example:





$Image = OpenCV_LoadImageFromFile("c:\\test.png");

$Image = OpenCV_DrawRectangle($Image,100,100,25,25,2,255,0,0);

OpenCV_ShowImageInWindow($Image);





OpenCV_DrawText

Previous Top Next



* * *



OpenCV_DrawText



Usage:

$NewImage = OpenCV_DrawText($Image,$Message,$X, $Y,$Size,$ColorR,$ColorG,$ColorB);



Description:

This function takes an OpenCV image and draws a textual message on the image and returns a new image without altering the original. The message's position, text size and color can be adjusted by setting the parameters.





Requirements:

These functions use the Open-Source OpenCV computer vision library from Intel, and therefore will offer the maximum performance when running on Intel Processors due to low-level optimizations for the Intel architecture. Any camera or input device that Windows recognizes as an imaging device should be compatible with these functions.





Function arguments



Parameter

Variable Type

Description



$Image

Object

An OpenCV Image Structure that has been loaded from an existing file or camera capture.



$Message

String

The message of the text to draw



$X

Integer

The bottom left X coordinate of the text to draw



$Y

Integer

The bottom left Y coordinate of the text to draw



$Size

Float

The font size of the text to draw



$ColorR

Integer

The Red component for the line color to be drawn (0-255)



$ColorG

Integer

The Green component for the line color to be drawn (0-255)



$ColorB

Integer

The Blue component for the line color to be drawn (0-255)





Return parameters



Parameter

Variable Type

Description



$newImage

Object

An OpenCV Image Structure.





Usage Example:

$Image = OpenCV_LoadImageFromFile("c:\\test.png");

$Image = OpenCV_DrawText($Image,"Message",10,10,5,255,255,0);

OpenCV_ShowImageInWindow($Image);





OpenCV_AddImage

Previous Top Next



* * *



OpenCV_AddImage



Usage:

$sumImage = OpenCV_AddImage($image1, $image2);



Description:

This function performs a pixel by pixel sum of the two input images and returns the resulting image.



Remarks:

The two images must be the same size and the same bit-depth.

Function arguments



Parameter

Variable Type

Description



$image1

Object

The first image to be added.



$image2

Object

The second image to be added.





Return parameters



Parameter

Variable Type

Description



$sumImage

Object

The pixel by pixel sum of the two images.





Example(s):

$sumImage = OpenCV_AddImage($image1, $image2);





OpenCV_AddImageWithConstant

Previous Top Next



* * *



OpenCV_AddImageWithConstant



Usage:

$sumImage = OpenCV_AddImageWithConstant($image1, $const);



Description:

This function performs a pixel by pixel sum of the input image with the constant.



Remarks:

The constant will be added to each color of each pixel. If the value goes above 255, it will wrap around to 0.

The returned image is the same size as the input image.

Function arguments



Parameter

Variable Type

Description



$image1

Object

The first image to be added.



$const

Integer

The constant to add to each pixel of the image.





Return parameters



Parameter

Variable Type

Description



$sumImage

Object

The pixel by pixel sum of the image with the constant.





Example(s):

$sumImage = OpenCV_AddImageWithConstant($image1, $const);





OpenCV_AdjustGrayContrastCurve

Previous Top Next



* * *



OpenCV_AdjustGrayContrastCurve



Usage:

$adjImage = OpenCV_AdjustGrayContrastCurve($image, $steep, $midCurve);



Description:

This function adjusts the histogram curve for a gray scale image upwards. This has the effect of brightening dark pixels more than bright pixels. This will give an increase of contrast for the darker pixels while decreasing contrast for the brighter pixels. The basic function is:



f(n) = x + mc * x * (255 - x) / (x + st)

where:

x = the pixel brightness

mc = the midrange of the curve (high numbers flatten the top of the curve)

st = steepness of the low end of the curve (lower number are steeper).



These variables have this type of effect:





Remarks:

The most common use of this has a steepness of 20 and a midrange number of 0.5 (the blue curve in the picture above).

This function uses the OpenCV and EMGU CV libraries version 3.3.0.





Function arguments



Parameter

Variable Type

Description



$image

Object

The image to be adjusted.



$steep

Float

The steepness of the low part of the curve. Must be greater than or equal to 0.



$midCurve

Float

The flatness of the high part of the curve. Must be greater than 0.





Return parameters



Parameter

Variable Type

Description



$adjImage

Object

The resulting adjusted image.





Example:





$steep = 20;

$midCurve = 0.5;



$sImage = OpenCV_AdjustGrayContrastCurve($image, $steep, $midCurve);





OpenCV_AverageImages

Previous Top Next



* * *



OpenCV_AverageImages



Usage:

$AverageImage = OpenCV_AverageImages($Image1,$Image2);



Description:

This function performs a pixel by pixel averaging of two input images and returns the resulting averaged image. This function can be useful for eliminating noise from low quality image acquisition devices such as webcams, etc.

The two input images are converted to an RGB color space before averaging, and the returned image is a 24-bit RGB image which can then be converted later using one of the available OpenCV image transformation functions.





Note: This function was developed in Visual C++ 2008 and require the latest version of the Microsoft Visual C++ runtime which can be downloaded from Microsoft.

Requirements:

These functions use the Open-Source OpenCV computer vision library from Intel, and therefore will offer the maximum performance when running on Intel Processors due to low-level optimizations for the Intel architecture. Any camera or input device that Windows recognizes as an imaging device should be compatible with these functions.

Function arguments



Parameter

Variable Type

Description



$Image1

Object

The OpenCV image object for averaging



$Image2

Object

The second OpenCV image object for averaging





Return parameters



Parameter

Variable Type

Description



$AverageImage

Object

The OpenCV 24-bit RGB color image object that is a combined pixel by pixel value of the two input images.





Usage Example:

$Scene1 = OpenCV_LoadImageFromFile("c:\\scene1.jpg");

$Scene2 = OpenCV_LoadImageFromFile("c:\\scene2.jpg");

$AvgScene = OpenCV_AverageImages($Scene1,$Scene2);

OpenCV_ShowImageInWindow($AvgScene);





OpenCV_ConvertImageToGrayscale

Previous Top Next



* * *



OpenCV_ConvertImageToGrayscale



Usage:

$GrayImage = OpenCV_ConvertImageToGrayscale($Image);



Description:





This function will convert the supplied OpenCV image structure into an 8-bit grayscale image which is suitable for using in analysis and pattern matching functions.





The original color image object is left intact and is not modified.





Requirements:

These functions use the Open-Source OpenCV computer vision library from Intel, and therefore will offer the maximum performance when running on Intel Processors due to low-level optimizations for the Intel architecture. Any camera or input device that Windows recognizes as an imaging device should be compatible with these functions.





Function arguments



Parameter

Variable Type

Description



$Image

Object

An OpenCV image object of any resolution, format, or color depth





Return parameters



Parameter

Variable Type

Description



$GrayImage

Object

An OpenCV image object in 8-bit grayscale format. The original image resolution is retained.





Usage Example:





$Image = OpenCV_LoadImageFromFile("c:\\a.png");

$GrayImage = OpenCV_ConvertImageToGrayscale($Image);

OpenCV_ShowImageInWindow($GrayImage);





OpenCV_CropImage

Previous Top Next



* * *



OpenCV_CropImage

Usage:

$croppedImage= OpenCV_CropImage($Image,$left, $top, $right, $bottom);



Description:

Crops an area from an image, and return it as a new image..



Requirements:

These functions use the Open-Source OpenCV computer vision library from Intel, and therefore will offer the maximum performance when running on Intel Processors due to low-level optimizations for the Intel architecture. Any camera or input device that Windows recognizes as an imaging device should be compatible with these functions.





Function arguments



Parameter

Variable Type

Description



$Image

Object

An OpenCV Image Structure that has been loaded from an existing file or camera capture.



$left

Integer

The left edge of the area to crop.



$top

Integer

The top edge of the area to crop.



$right

Integer

The right edge of the area to crop.



$bottom

Integer

The bottom edge of the are to crop.





Return parameters



Parameter

Variable Type

Description



$croppedImage

Object

An OpenCV Image Structure which can be used with the other OpenCV functions in this library.





Example:





$newImage = OpenCV_CropImage($Image,10,10,50,50);





OpenCV_DilateImage

Previous Top Next



* * *



OpenCV_DilateImage



Usage:

$newImage= OpenCV_DilateImage($Image,$Iterations);



Description:





This function takes an OpenCV image, and dilates it using a fixed 3x3 pattern of adjacent pixels. The function will be applied recursively based on the number of iterations specified.





Requirements:

These functions use the Open-Source OpenCV computer vision library from Intel, and therefore will offer the maximum performance when running on Intel Processors due to low-level optimizations for the Intel architecture. Any camera or input device that Windows recognizes as an imaging device should be compatible with these functions.





Function arguments



Parameter

Variable Type

Description



$Image

Object

An OpenCV Image Structure that has been loaded from an existing file or camera capture.



$Iterations

Integer

The number of times to apply the dilating algorithm to the specified image. Each subsequent iteration is applied to the output of the last iteration.





Return parameters



Parameter

Variable Type

Description



$newImage

Object

A Grayscale OpenCV Image Structure which can be used with the other OpenCV functions in this library.





Usage Example:

$newImage = OpenCV_DilateImage($Image,5); // Dilates the image 5 times using a 3x3 matrix of adjacent pixels.





OpenCV_DisposeImage

Previous Top Next



* * *



OpenCV_DisposeImage



Usage:

OpenCV_DisposeImage($Image);



Description:





This function will dispose of the memory resources used to hold the supplied OpenCV Image object.





This function should be used to clean up any OpenCV Image resources after they are no longer used in the test script.





Requirements:

These functions use the Open-Source OpenCV computer vision library from Intel, and therefore will offer the maximum performance when running on Intel Processors due to low-level optimizations for the Intel architecture. Any camera or input device that Windows recognizes as an imaging device should be compatible with these functions.





Function arguments



Parameter

Variable Type

Description



$Image

Object

An OpenCV image object of any resolution, format, or color depth





Return parameters



Parameter

Variable Type

Description



None





Usage Example:





OpenCV_DisposeImage($MyImage); // Removes $MyImage from Memory...





OpenCV_EqualizeHist

Previous Top Next



* * *



OpenCV_EqualizeHist



Usage:

$ehImage = OpenCV_EqualizeHist($image);



Description:

The algorithm normalizes brightness and increases contrast of the image. For color images, a HSV representation of the image is first obtained and the V (value) channel is histogram normalized.





Remarks:

These functions use the Open-Source OpenCV computer vision library from Intel, and therefore will offer the maximum performance when running on Intel Processors due to low-level optimizations for the Intel architecture.

Function arguments



Parameter

Variable Type

Description



$image

Object

The image to be equalized.





Return parameters



Parameter

Variable Type

Description



$ehImage

Object

The resulting image with the histogram equalized.





Example(s):

$ehImage = OpenCV_EqualizeHist($image);





OpenCV_ErodeImage

Previous Top Next



* * *



OpenCV_ErodeImage



Usage:

$erodedImage = OpenCV_ErodeImage($image, $iterations);



Description:

Erodes the source image using the specified structuring element that determines the shape of a pixel neighborhood over which the minimum is taken: dst=erode(src,element): dst(x,y)=min((x',y') in element)) src(x+x',y+y'). Erosion can be applied several (iterations) times. In the case of a color image, each channel is processed independently.





Remarks:

These functions use the Open-Source OpenCV computer vision library from Intel, and therefore will offer the maximum performance when running on Intel Processors due to low-level optimizations for the Intel architecture.

Function arguments



Parameter

Variable Type

Description



$image

Object

The image to be transformed.



$iterations

Integer

Number of time to apply erosion.





Return parameters



Parameter

Variable Type

Description



$erodedImage

Object

The resulting eroded image.





Example(s):

$erodedImage = OpenCV_ErodeImage($image, $iterations);





OpenCV_FillByHSV

Previous Top Next



* * *



OpenCV_FillByHSV



Usage:

($Count, $ResultImage) = OpenCV_FillByHSV($Image,$Hmin,$Smin,$Vmin,$Hmax,$Smax,$Vmax,$Hfill,$Sfill,$Vfill);



Description:

This function fills a bitmap object based on HSV values. If a pixel's HSV value falls within the high and low limits specified for all three values (Hue, Saturation and Value), the pixel's color is changed to the HSV value specified by the pixel fill parameters.





This function provides the ability to segment an image based on HSV values and set pixels that fall within the HSV limits supplied to a known color value. This is useful for segmenting an image based on HSV in order to eliminate background clutter and improve image or edge pattern matching probability.





The image below is a flattened representation of the HSV color space. For more information regarding color space please visit: http://en.wikipedia.org/wiki/HSL_and_HSV



Requirements:

These functions use the Open-Source OpenCV computer vision library from Intel, and therefore will offer the maximum performance when running on Intel Processors due to low-level optimizations for the Intel architecture. Any camera or input device that Windows recognizes as an imaging device should be compatible with these functions.

Function arguments



Parameter

Variable Type

Description



$Image

Object

An OpenCV Image Structure that has been loaded from an existing file or camera capture.



Low Hue Value

Integer

The lower limit of Hue for pixel color comparison. Note: Since Hue is a cylindrical-coordinate and could wrap around the zero value, if the lower limit for Hue is greater than the higher limit, the function will work on the assumption that the user wants to select Hue values that cross the zero value. The range of values for Hue is 0-360 however, the 360 value is never realized since 360 would equal zero. The actual range of Hue values is [0,360).



Saturation Low Limit

Integer

The lower limit of Saturation for pixel color comparison. The range of Saturation values is [0,100].



Value Low Limit

Integer

The lower limit of Value for pixel color comparison. The range of Value values is [0,100].



High Hue Value

Integer

The upper limit of Hue for pixel color comparison. See note above regarding wrap.



Saturation High Limit

Integer

The upper limit of Saturation for pixel color comparison. The range of Saturation values is [0,100].



Value High Limit

Integer

The upper limit of Value for pixel color comparison. The range of Value values is [0,100].



Hue Fill for pixels within limits

Integer

Pixels within all three criteria of Hue, Saturation and Value will be set to this Hue value. Hue range is [0,360).



Saturation Fill for pixels within limits

Integer

Pixels within all three criteria of Hue, Saturation and Value will be set to this Saturation value. Saturation range is [0,100].



Value Fill for pixels within limits

Integer

Pixels within all three criteria of Hue, Saturation and Value will be set to this Value. Value range is [0,100].





Return parameters



Parameter

Variable Type

Description



$Count

Integer

Number of pixels filled.



$Image

Object

A Bitmap Image object.





Usage Example:

To simplify pattern matching via image or edge, it is desired to eliminate background clutter in the image below. In the example below, all pixels not within a narrow range of hue and high saturation are set to black.





//Load image

$Image = OpenCV_LoadImageFromFile("C:\\JabilTestScripts\\Jellyfish.jpg");

// Display original image

OpenCV_ShowImageInWindow($Image);

// Fill pixels with black (HSV = 0,0,0) based on Hue to eliminate colors other than redish orange

($Count1, $ResultImage) = OpenCV_FillByHSV($Image,71,0,0,249,100,100,0,0,0);

// Display and save results of 1st fill

OpenCV_ShowImageInWindow($ResultImage);

OpenCV_SaveImageToFile($ResultImage,"C:\\JabilTestScripts\\Jellyfish1stFill.jpg","JPEG");

// Fill pixels with black (HSV = 0,0,0) to eliminate lower saturation levels

($Count2,$ResultImage) = OpenCV_FillByHSV($ResultImage,0,0,0,360,40,100,0,0,0);

// Display and save results of 2nd fill

OpenCV_ShowImageInWindow($ResultImage);

OpenCV_SaveImageToFile($ResultImage,"C:\\JabilTestScripts\\Jellyfish2ndFill.jpg","JPEG");

// Dispose and quit

OpenCV_DisposeImage($Image);

OpenCV_DisposeImage($ResultImage);

End;





Original Image



After 1st OpenCV_FillByHSV



After 2nd OpenCV_FillByHSV





OpenCV_InvertColor

Previous Top Next



* * *



OpenCV_InvertColor



Usage:

$newImage= OpenCV_InvertColor($Image);



Description:





This function takes an OpenCV image, computes the complement image and returns the inverted color result.



Requirements:

These functions use the Open-Source OpenCV computer vision library from Intel, and therefore will offer the maximum performance when running on Intel Processors due to low-level optimizations for the Intel architecture. Any camera or input device that Windows recognizes as an imaging device should be compatible with these functions.





Function arguments



Parameter

Variable Type

Description



$Image

Object

An OpenCV Image Structure that has been loaded from an existing file or camera capture.





Return parameters



Parameter

Variable Type

Description



$newImage

Object

A color OpenCV Image Structure which can be used with the other OpenCV functions in this library.





Usage Example:

$newImage= OpenCV_InvertColor($Image);





OpenCV_InvertGrayscale

Previous Top Next



* * *



OpenCV_InvertGrayscale



Usage:

$newImage= OpenCV_InvertGrayscale($Image);



Description:





This function takes an OpenCV image, computes the complement image and returns the inverted gray-scale result.



Requirements:

These functions use the Open-Source OpenCV computer vision library from Intel, and therefore will offer the maximum performance when running on Intel Processors due to low-level optimizations for the Intel architecture. Any camera or input device that Windows recognizes as an imaging device should be compatible with these functions.





Function arguments



Parameter

Variable Type

Description



$Image

Object

An OpenCV Image Structure that has been loaded from an existing file or camera capture.





Return parameters



Parameter

Variable Type

Description



$newImage

Object

A Grayscale OpenCV Image Structure which can be used with the other OpenCV functions in this library.





Usage Example:

$newImage= OpenCV_InvertGrayscale($Image);





OpenCV_LaplaceGrayImage

Previous Top Next



* * *



OpenCV_LaplaceGrayImage



Usage:

$ltImage = OpenCV_LaplaceGrayImage($image, $apertureSize);



Description:

This function converts the input image to gray scale and performs a LaPlace Transform on the image by summing second x and y derivatives calculated using the Sobel operator and returns the resulting gray scale image.





Remarks:

Specifying an aperature size of 1 gives the fastest variant and is equal to convolving the image with a kernel of |0 1 0| |1 -4 1| |0 1 0|.

These functions use the Open-Source OpenCV computer vision library from Intel, and therefore will offer the maximum performance when running on Intel Processors due to low-level optimizations for the Intel architecture.

Function arguments



Parameter

Variable Type

Description



$image

Object

The image to be transformed



$apertureSize

Integer

The aperture size.





Return parameters



Parameter

Variable Type

Description



$ltImage

Object

The resulting transformed image.





Example(s):

$ltImage = OpenCV_LaplaceGrayImage($image, $apertureSize);





OpenCV_LaplaceImage

Previous Top Next



* * *



OpenCV_LaplaceImage



Usage:

$ltImage = OpenCV_LaplaceImage($image, $apertureSize);



Description:

This function performs a LaPlace Transform on an image by summing second x and y derivatives calculated using the Sobel operator and returns the resulting image.





Remarks:

Specifying an aperature size of 1 gives the fastest variant and is equal to convolving the image with a kernel of |0 1 0| |1 -4 1| |0 1 0|.

These functions use the Open-Source OpenCV computer vision library from Intel, and therefore will offer the maximum performance when running on Intel Processors due to low-level optimizations for the Intel architecture.

Function arguments



Parameter

Variable Type

Description



$image

Object

The image to be transformed



$apertureSize

Integer

The aperture size.





Return parameters



Parameter

Variable Type

Description



$ltImage

Object

The resulting transformed image.





Example(s):

$ltImage = OpenCV_LaplaceImage($image, $apertureSize);





OpenCV_LoadBitmapObject

Previous Top Next



* * *



OpenCV_LoadBitmapObject



Usage:

$Image = OpenCV_LoadBitmapObject($Bitmap);



Description:





This function opens a bitmap image (BMP,TIFF,JPG,GIF,PNG,etc) and converts it into an OpenCV image structure so that analysis, filtering, or transformation can be applied to the image.



Requirements:

These functions use the Open-Source OpenCV computer vision library from Intel, and therefore will offer the maximum performance when running on Intel Processors due to low-level optimizations for the Intel architecture. Any camera or input device that Windows recognizes as an imaging device should be compatible with these functions.





Function arguments



Parameter

Variable Type

Description



$Bitmap

Object

The bitmap image object to be loaded into an OpenCV image object. This object is of type System.Drawing.Bitmap.





Return parameters



Parameter

Variable Type

Description



$Image

Object

An OpenCV Image Structure which can be used with the other OpenCV functions in this library.





Usage Example:

$Image = OpenCV_LoadBitmapObject($Bitmap);





OpenCV_LoadImageFromFile

Previous Top Next



* * *



OpenCV_LoadImageFromFile



Usage:

$Image = OpenCV_LoadImageFromFile($Filename);





Description:

This function opens a bitmap image (BMP,TIFF,JPG,GIF,PNG,etc) stored on the local computer and converts it into an OpenCV image structure so that analysis, filtering, or transformation can be applied to the image.





Requirements:

These functions use the Open-Source OpenCV computer vision library from Intel, and therefore will offer the maximum performance when running on Intel Processors due to low-level optimizations for the Intel architecture. Any camera or input device that Windows recognizes as an imaging device should be compatible with these functions.

Function arguments



Parameter

Variable Type

Description



$Filename

String

The filename and path of the image to be loaded into an OpenCV image object.





Return parameters



Parameter

Variable Type

Description



$Image

Object

An OpenCV Image Structure which can be used with the other OpenCV functions in this library.





Usage Example:

$Image = OpenCV_LoadImageFromFile("c:\\goldenscreen.png");





OpenCV_LogGrayImage

Previous Top Next



* * *



OpenCV_LogGrayImage



Usage:

$logImage = OpenCV_LogGrayImage($image);



Description:

This function converts the input image to gray scale and performs a natural log of every pixel in the image and returns the resulting gray scale image.

Function arguments



Parameter

Variable Type

Description



$image

Object

The image to take the log of.





Return parameters



Parameter

Variable Type

Description



$logImage

Object

The resulting gray scale image.





Example(s):

$logImage = OpenCV_LogGrayImage($image);





OpenCV_LogImage

Previous Top Next



* * *



OpenCV_LogImage



Usage:

$logImage = OpenCV_LogImage($image);



Description:

This function performs a natural log of every pixel in the image and returns the resulting image.

Function arguments



Parameter

Variable Type

Description



$image

Object

The image to take the log of.





Return parameters



Parameter

Variable Type

Description



$logImage

Object

The resulting image.





Example(s):

$logImage = OpenCV_LogImage($image);





OpenCV_MaskImageToBlack

Previous Top Next



* * *



OpenCV_MaskImageToBlack



Usage:

$mImage = OpenCV_MaskImageToBlack($image, $mask);



Description:

This function applies a gray scale mask to an image. A black pixel on the mask will return a black pixel and white on the mask will return the original pixel from the image. Gray on the mask will move the pixel on the image towards black based on the darkness of the mask pixel.





Remarks:

The image and the mask must be the same size and the same bit-depth.

These functions use the Open-Source OpenCV computer vision library from Intel, and therefore will offer the maximum performance when running on Intel Processors due to low-level optimizations for the Intel architecture.

Function arguments



Parameter

Variable Type

Description



$image

Object

The image to be masked.



$mask

Object

The gray scale mask to apply to the image.





Return parameters



Parameter

Variable Type

Description



$mImage

Object

The resulting masked image.





Example(s):

$mImage = OpenCV_MaskImageToBlack($image, $mask);





OpenCV_MulGrayImage

Previous Top Next



* * *



OpenCV_MulGrayImage



Usage:

$mulImage = OpenCV_MulGrayImage($image1, $image2);



Description:

This function converts the input images to gray scale and performs a pixel by pixel multiplication of the two images and returns the resulting gray scale image.





Remarks:

The two images must be the same size and the same bit-depth.

These functions use the Open-Source OpenCV computer vision library from Intel, and therefore will offer the maximum performance when running on Intel Processors due to low-level optimizations for the Intel architecture.

Function arguments



Parameter

Variable Type

Description



$image1

Object

The first image to multiply together.



$image2

Object

The second image to multiply.





Return parameters



Parameter

Variable Type

Description



$mulImage

Object

The resulting image of multiplying the pixels of the input images.





Example(s):

$mulImage = OpenCV_MulGrayImage($image1, $image2);





OpenCV_MulGrayImageWithConstant

Previous Top Next



* * *



OpenCV_MulGrayImageWithConstant



Usage:

$mulImage = OpenCV_MulGrayImageWitConstant($image, $scale);





Description:

This function will converts the image to gray scale and performs a pixel by pixel multiplication of the image with a constant and returns the resulting image.





Remarks:

These functions use the Open-Source OpenCV computer vision library from Intel, and therefore will offer the maximum performance when running on Intel Processors due to low-level optimizations for the Intel architecture.

Function arguments



Parameter

Variable Type

Description



$image

Object

The image to be modified.



$scale

Integer

The number to multiply each pixel by.





Return parameters



Parameter

Variable Type

Description



$mulImage

Object

The resulting gray scale image from multiplying the pixels by the scale constant.





Example(s):

$mulImage = OpenCV_MulGrayImageWithConstant($image, $scale);





OpenCV_MulImage

Previous Top Next



* * *



OpenCV_MulImage



Usage:

$mulImage = OpenCV_MulImage($image1, $image2);



Description:

This function performs a pixel by pixel multiplication of the two images and returns the resulting image.





Remarks:

The two images must be the same size and the same bit-depth.

These functions use the Open-Source OpenCV computer vision library from Intel, and therefore will offer the maximum performance when running on Intel Processors due to low-level optimizations for the Intel architecture.

Function arguments



Parameter

Variable Type

Description



$image1

Object

The first image to multiply together.



$image2

Object

The second image to multiply.





Return parameters



Parameter

Variable Type

Description



$mulImage

Object

The resulting image of multiplying the pixels of the input images.





Example(s):

$mulImage = OpenCV_MulImage($image1, $image2);





OpenCV_MulImageWithConstant

Previous Top Next



* * *



OpenCV_MulImageWithConstant



Usage:

$mulImage = OpenCV_MulImageWitConstant($image, $scale);





Description:

This function performs a pixel by pixel multiplication of the image with a constant and returns the resulting image.





Remarks:

These functions use the Open-Source OpenCV computer vision library from Intel, and therefore will offer the maximum performance when running on Intel Processors due to low-level optimizations for the Intel architecture.

Function arguments



Parameter

Variable Type

Description



$image

Object

The image to be modified.



$scale

Integer

The number to multiply each pixel by.





Return parameters



Parameter

Variable Type

Description



$mulImage

Object

The resulting image from multiplying the pixels by the scale constant.





Example(s):

$mulImage = OpenCV_MulImageWithConstant($image, $scale);





OpenCV_PowGrayImage

Previous Top Next



* * *



OpenCV_PowGrayImage



Usage:

$powImage = OpenCV_PowGrayImage($image, $power);





Description:

This function converts the input image to gray scale and raises every pixel of the image to a power and returns the resulting image.





Remarks:

These functions use the Open-Source OpenCV computer vision library from Intel, and therefore will offer the maximum performance when running on Intel Processors due to low-level optimizations for the Intel architecture.

Function arguments



Parameter

Variable Type

Description



$image

Object

The image to be modified.



$power

Float

The number to raise each pixel to.





Return parameters



Parameter

Variable Type

Description



$powImage

Object

The resulting gray scale image from raising each pixel to the power.





Example(s):

$powImage = OpenCV_PowGrayImage($image, $power);





OpenCV_PowImage

Previous Top Next



* * *



OpenCV_PowImage



Usage:

$powImage = OpenCV_PowImage($image, $power);





Description:

This function raises every pixel of the image to a power and returns the resulting image.





Remarks:

Each channel is raised to the power separately.

These functions use the Open-Source OpenCV computer vision library from Intel, and therefore will offer the maximum performance when running on Intel Processors due to low-level optimizations for the Intel architecture.

Function arguments



Parameter

Variable Type

Description



$image

Object

The image to be modified.



$power

Float

The number to raise each pixel to.





Return parameters



Parameter

Variable Type

Description



$powImage

Object

The resulting image from raising each pixel to the power.





Example(s):

$powImage = OpenCV_PowImage($image, $power);





OpenCV_PyramidUpDown

Previous Top Next



* * *



OpenCV_PyramidUpDown



Usage:

$newImage= OpenCV_PyramidUpDown($Image,$Pyramid);



Description:

This function takes an OpenCV image and performs an up or down sampling step Gaussian pyramid decomposition.





Up: First it up-samples the image by injecting even zero rows and columns and then convolves result with the specified filter multiplied by 4 for interpolation. So the resulting image is four times larger than the source image.





Down: First it convolves this image with the specified filter and then down-samples the image by rejecting even rows and columns.





Note: Pyramid Up is not the inverse of Pyramid Down and vice versa because Pyramid Down loses information. Please see descriptions for both above.





Requirements:

These functions use the Open-Source OpenCV computer vision library from Intel, and therefore will offer the maximum performance when running on Intel Processors due to low-level optimizations for the Intel architecture. Any camera or input device that Windows recognizes as an imaging device should be compatible with these functions.





Function arguments



Parameter

Variable Type

Description



$Image

Object

An OpenCV Image Structure that has been loaded from an existing file or camera capture.



$Pyramid

String

Determines whether the Gaussian pyramid decomposition will be done with up sampling or down sampling. Valid inputs are: [UP,DOWN]





Return parameters



Parameter

Variable Type

Description



$newImage

Object

An OpenCV Image Structure which can be used with the other OpenCV functions in this library.





Usage Example:

$newImage= OpenCV_PyramidUpDown($Image,"UP");





OpenCV_ResizeImage

Previous Top Next



* * *



OpenCV_ResizeImage



Usage:

$newImage= OpenCV_ResizeImage($Image,$scaleFactor, $interpolationMethod);



Description:

This function takes an OpenCV image and scales it up or down based on the supplied scaling factor and using the specified interpolation method.





Scaling factors less than 1 will scale the image down in size and scaling factors greater than 1 with scale the image up in size.





Interpolation methods are:

· NN - nearest-neighbor interpolation

· Linear - bilinear interpolation (the default)

· Area - resampling using pixel area relation. The preferred method for moire-free image decimation

· Cubic - bicubic interpolation





Requirements:

These functions use the Open-Source OpenCV computer vision library from Intel, and therefore will offer the maximum performance when running on Intel Processors due to low-level optimizations for the Intel architecture. Any camera or input device that Windows recognizes as an imaging device should be compatible with these functions.





Function arguments



Parameter

Variable Type

Description



$Image

Object

An OpenCV Image Structure that has been loaded from an existing file or camera capture.



$scaleFactor

Float

The amount to scale the image up or down.

scaleFactor < 1 scales the image down.

scaleFactor > 1 scales the image up.



$interpolationMethod

String

The interpolation method to use when scaling the image.

Values: NN, Area, Cubic, Linear





Return parameters



Parameter

Variable Type

Description



$newImage

Object

An OpenCV Image Structure which can be used with the other OpenCV functions in this library.





Usage Examples:

// Scale image to twice its original size using linear interpolation

$largerImage = OpenCV_ResizeImage($Image, 2, "Linear");





// Scale image to half its size using pixel area relation

$smallerImage = OpenCV_ResizeImage($Image, 0.5, "Area");





OpenCV_RotateImage

Previous Top Next



* * *



OpenCV_RotateImage



Usage:

$rotatedImage= OpenCV_RotateImage($Image, $Degrees, $Crop);



Description:

This function takes an OpenCV image and rotates it the desired amount of degrees in the clockwise direction. This function can also crop the resultant image based on the original dimensions or it will automatically resize the canvas to display the entire newly rotated image.





Remarks:

This function uses the OpenCV and EMGU CV libraries version 3.3.0.





Function arguments



Parameter

Variable Type

Description



$Image

Object

An OpenCV Image Structure that has been loaded from an existing file or camera capture.



$Degrees

Float

The number of degrees to rotate in the clockwise direction.



$Crop

Boolean

Specifies whether the resultant image will be cropped to display the entire rotated image.





Return parameters



Parameter

Variable Type

Description



$rotatedImage

Object

An OpenCV Image Structure which can be used with the other OpenCV functions in this library.





Example:





// Rotate an image 90 degrees.

$rotatedImage = OpenCV_RotateImage($Image, 90, false);





OpenCV_RotateImageBkg

Previous Top Next



* * *



OpenCV_RotateImageBkg



Usage:

$rotatedImage= OpenCV_RotateImageBkg($Image, $Degrees, $Crop, $BkgColor);



Description:

This function takes an OpenCV image and rotates it the desired amount of degrees in the clockwise direction and changes the background color to the specified color. This function can also crop the resultant image based on the original dimensions or it will automatically resize the canvas to display the entire newly rotated image.





Remarks:

This function uses the OpenCV and EMGU CV libraries version 3.3.0.

The background color is specified by one byte each for Red, Green, Blue, separated by commas. White would be 255, 255, 255.



Function arguments



Parameter

Variable Type

Description



$Image

Object

An OpenCV Image Structure that has been loaded from an existing file or camera capture.



$Degrees

Float

The number of degrees to rotate in the clockwise direction.



$Crop

Boolean

Specifies whether the resultant image will be cropped to display the entire rotated image.



$BkgColor

String

Color to make the background in R, G, B values.





Return parameters



Parameter

Variable Type

Description



$rotatedImage

Object

An OpenCV Image Structure which can be used with the other OpenCV functions in this library.





Example:





// Rotate an image 90 degrees and change the background to blue.

$bkColor = "0, 0, 200";



$rotatedImage = OpenCV_RotateImageBkg($Image, 90, false, $bkColor);





OpenCV_SaveImageAsBitmap

Previous Top Next



* * *



OpenCV_SaveImageAsBitmap



Usage:

OpenCV_SaveImageAsBitmap($Image,$FileName);



Description:

This functions saves an OpenCV image structure as a bitmap file. The image color depth, resolution, and pixel format are all preserved.



Requirements:





These functions use the Open-Source OpenCV computer vision library from Intel, and therefore will offer the maximum performance when running on Intel Processors due to low-level optimizations for the Intel architecture. Any camera or input device that Windows recognizes as an imaging device should be compatible with these functions.





Note: This function has been deprecated in favor of 'OpenCV_SaveImageToFile' which provides a mechanism to save an OpenCV image multiple file formats.





Function arguments



Parameter

Variable Type

Description



$Image

Object

An OpenCV Image object of any format or color depth.





Return parameters



Parameter

Variable Type

Description



None





Usage Example:





$Camera = OpenCV_OpenCamera(0);

$Image = OpenCV_QueryFrame($Camera);

OpenCV_SaveImageAsBitmap($Image,"c:\\testImage.bmp");

OpenCV_CloseCamera($Camera);





OpenCV_SaveImageToFile

Previous Top Next



* * *



OpenCV_SaveImageToFile



Usage:

OpenCV_SaveImageToFile($Image,$FileName,$FileFormat);



Description:

This functions saves an OpenCV image structure as an file of the specified format. The image color depth, resolution, and pixel format are all preserved.



Requirements:





These functions use the Open-Source OpenCV computer vision library from Intel, and therefore will offer the maximum performance when running on Intel Processors due to low-level optimizations for the Intel architecture. Any camera or input device that Windows recognizes as an imaging device should be compatible with these functions.





Function arguments



Parameter

Variable Type

Description



$Image

Object

An OpenCV Image object of any format or color depth.



$FileName

String

The file name of the image to store



$FileFormat

String

The desired file format of the image. Supported File Types are:

· BMP

· GIF

· JPEG

· PNG

· TIFF

· WMF

· EXIF

· EMF





Return parameters



Parameter

Variable Type

Description



None





Usage Example:





$File = OpenCV_LoadImageFromFile("c:\\images\\callTemplate.jpg");

OpenCV_SaveImageToFile($File,"c:\\images\\myFile.bmp","BMP");

OpenCV_SaveImageToFile($File,"c:\\images\\myFile.jpg","JPEG");

OpenCV_SaveImageToFile($File,"c:\\images\\myFile.tiff","TIFF");





OpenCV_SmoothBilatral

Previous Top Next



* * *



OpenCV_SmoothBilatral



Usage:

$smoothImage= OpenCV_SmoothBilatral($Image,$KernelSize,$ColorSigma,$SpaceSigma);



Description:

This function takes an OpenCV image and performs Bilatral smoothing and returns the resultant image. Bilatral filtering smoothes the image without smoothing away the edges. The size of the kernel determines how many neighboring pixels will be smoothed from the center pixel.





The color sigma is the width of the Kernel in the color domain. The larger the color sigma is, the broader is the range of intensities (or colors) that will be included in the smoothing.





The space sigma is the difference in intensity from the center pixel. Bilatral smoothing weights more similar pixels more highly than less similar ones.





Requirements:

These functions use the Open-Source OpenCV computer vision library from Intel, and therefore will offer the maximum performance when running on Intel Processors due to low-level optimizations for the Intel architecture. Any camera or input device that Windows recognizes as an imaging device should be compatible with these functions.





Function arguments



Parameter

Variable Type

Description



$Image

Object

An OpenCV Image Structure that has been loaded from an existing file or camera capture.



$KernalSize

Integer

The width of the Kernel. Must be an odd integer greater than zero.



$ColorSigma

Integer

The width of the Kernel in the color domain.



$SpaceSigma

Integer

The width of the Kernel in the spatial domain.





Return parameters



Parameter

Variable Type

Description



$smoothImage

Object

An OpenCV Image Structure which can be used with the other OpenCV functions in this library.





Usage Example:

$smoothImage= OpenCV_SmoothBilatral($Image,7,3,3);





OpenCV_SmoothBlur

Previous Top Next



* * *



OpenCV_SmoothBlur



Usage:

$smoothImage= OpenCV_SmoothBlur($Image,$Width, $Height);



Description:

This function takes an OpenCV image and performs Blur smoothing and returns the resultant image. Each pixel in the output is the simple mean of all the pixels in a window around the corresponding pixel in the input. The surrounding pixel window size is determined by the $Width and $Height arguments.





Requirements:

These functions use the Open-Source OpenCV computer vision library from Intel, and therefore will offer the maximum performance when running on Intel Processors due to low-level optimizations for the Intel architecture. Any camera or input device that Windows recognizes as an imaging device should be compatible with these functions.





Function arguments



Parameter

Variable Type

Description



$Image

Object

An OpenCV Image Structure that has been loaded from an existing file or camera capture.



$Width

Integer

The Width of the surrounding pixel window used to calculate the mean.



$Height

Integer

The Height of the surrounding pixel window used to calculate the mean.





Return parameters



Parameter

Variable Type

Description



$smoothImage

Object

An OpenCV Image Structure which can be used with the other OpenCV functions in this library.





Usage Example:

$smoothImage= OpenCV_SmoothBlur($Image,5,5);





OpenCV_SmoothGaussian

Previous Top Next



* * *



OpenCV_SmoothGaussian



Usage:

$smoothImage = OpenCV_SmoothGaussian($Image, $KernelWidth, $KernelHeight, $Sigma1, $Sigma2);



Description:

This function takes an OpenCV image and performs Gaussian smoothing and returns the resultant image. The second and third arguments give the width and height of the filter window. The dimensions of the kernel determine how many neighboring pixels will be smoothed from the center pixel. Gaussian smoothing reduces noise while preserving signal.





Note: Gaussian smoothing smoothes away the edges. Use OpenCV_SmoothBilatral to preserve the edges.





Requirements:

These functions use the Open-Source OpenCV computer vision library from Intel, and therefore will offer the maximum performance when running on Intel Processors due to low-level optimizations for the Intel architecture. Any camera or input device that Windows recognizes as an imaging device should be compatible with these functions.





Function arguments



Parameter

Variable Type

Description



$Image

Object

An OpenCV Image Structure that has been loaded from an existing file or camera capture.



$KernelWidth

Integer

The width of the Gaussian Kernel. Must be an odd integer greater than zero.



$KernelHeight

Integer

The height of the Gaussian Kernel. Must be an odd integer greater than zero.



$Sigma1

Float

The standard deviation of the Gaussian kernel in the horizontal dimension.



$Sigma2

Float

The standard deviation of the Gaussian kernel in the vertical dimension.





Return parameters



Parameter

Variable Type

Description



$smoothImage

Object

An OpenCV Image Structure which can be used with the other OpenCV functions in this library.





Usage Example:

$smoothImage = OpenCV_SmoothGaussian($Image, 3, 3, 5, 5);





OpenCV_SmoothMedian

Previous Top Next



* * *



OpenCV_SmoothMedian



Usage:

$smoothImage= OpenCV_SmoothMedian($Image,$KernelSize);



Description:

This function takes an OpenCV image and performs Median smoothing and returns the resultant image. Median smoothing replaces each pixel by the median or "middle" pixel value in a square neighborhood around the center pixel set by the KernelSize argument.





Requirements:

These functions use the Open-Source OpenCV computer vision library from Intel, and therefore will offer the maximum performance when running on Intel Processors due to low-level optimizations for the Intel architecture. Any camera or input device that Windows recognizes as an imaging device should be compatible with these functions.





Function arguments



Parameter

Variable Type

Description



$Image

Object

An OpenCV Image Structure that has been loaded from an existing file or camera capture.



$KernalSize

Integer

The width of the Kernel. Must be an odd integer greater than zero.





Return parameters



Parameter

Variable Type

Description



$smoothImage

Object

An OpenCV Image Structure which can be used with the other OpenCV functions in this library.





Usage Example:

$smoothImage= OpenCV_SmoothMedian($Image,7);





OpenCV_SobelGrayImage

Previous Top Next



* * *



OpenCV_SobelGrayImage



Usage:

$sImage = OpenCV_SobelGrayImage($image, $xorder, $yorder, $apertureSize);



Description:

This function converts the image to gray scale and calculates the image derivative by convolving the image with the appropriate kernel. The Sobel operators combine Gaussian smoothing and differentiation so the result is more or less robust to the noise.





Remarks:

Most often, the function is called with (xorder = 1, yorder = 0, aperture size = 3) or (xorder = 0, yorder = 1, aperture size = 3) to calculate the first x and y image derivative.

These functions use the Open-Source OpenCV computer vision library from Intel, and therefore will offer the maximum performance when running on Intel Processors due to low-level optimizations for the Intel architecture.

Function arguments



Parameter

Variable Type

Description



$image

Object

The image to be transformed.



$xorder

Integer

Order of the x derivative (0 or 1).



$yorder

Integer

Order of the y derivative (0 or 1).



$apertureSize

Integer

Size of the extended Sobel kernel. Must be 1, 3, 5, or 7.





Return parameters



Parameter

Variable Type

Description



$sImage

Object

The resulting transformed gray scale image.





Example(s):

$sImage = OpenCV_SobelGrayImage($image, $xorder, $yorder, $apertureSize);





OpenCV_SobelImage

Previous Top Next



* * *



OpenCV_SobelImage



Usage:

$sImage = OpenCV_SobelImage($image, $xorder, $yorder, $apertureSize);



Description:

This function calculates the image derivative by convolving the image with the appropriate kernel. The Sobel operators combine Gaussian smoothing and differentiation so the result is more or less robust to the noise.



Remarks:

Most often, the function is called with (xorder = 1, yorder = 0, aperture size = 3) or (xorder = 0, yorder = 1, aperture size = 3) to calculate the first x and y image derivative.

These functions use the Open-Source OpenCV computer vision library from Intel, and therefore will offer the maximum performance when running on Intel Processors due to low-level optimizations for the Intel architecture.

Function arguments



Parameter

Variable Type

Description



$image

Object

The image to be transformed.



$xorder

Integer

Order of the x derivative (0 or 1).



$yorder

Integer

Order of the y derivative (0 or 1).



$apertureSize

Integer

Size of the extended Sobel kernel. Must be 1, 3, 5, or 7.





Return parameters



Parameter

Variable Type

Description



$sImage

Object

The resulting transformed image.





Example(s):

$sImage = OpenCV_SobelImage($image, $xorder, $yorder, $apertureSize);





OpenCV_SubGrayImage

Previous Top Next



* * *



OpenCV_SubGrayImage



Usage:

$subImage = OpenCV_SubGrayImage($image1, $image2);



Description:

This function converts both images to gray scale and performs a pixel by pixel subtraction of the of the second image from the first image and returns the resulting gray scale image.





Remarks:

The two images must be the same size and the same bit-depth.

These functions use the Open-Source OpenCV computer vision library from Intel, and therefore will offer the maximum performance when running on Intel Processors due to low-level optimizations for the Intel architecture.

Function arguments



Parameter

Variable Type

Description



$image1

Object

The first image.



$image2

Object

The image to be subtracted from the first image.





Return parameters



Parameter

Variable Type

Description



$subImage

Object

The gray scale pixel by pixel subtraction of the two images.





Example(s):

$subImage = OpenCV_SubGrayImage($image1, $image2);





OpenCV_SubImage

Previous Top Next



* * *



OpenCV_SubImage



Usage:

$subImage = OpenCV_SubImage($image1, $image2);



Description:

This function performs a pixel by pixel subtraction of the of the second image from the first image and returns the resulting image.





Remarks:

The two images must be the same size and the same bit-depth.

These functions use the Open-Source OpenCV computer vision library from Intel, and therefore will offer the maximum performance when running on Intel Processors due to low-level optimizations for the Intel architecture.

Function arguments



Parameter

Variable Type

Description



$image1

Object

The first image.



$image2

Object

The image to be subtracted from the first image.





Return parameters



Parameter

Variable Type

Description



$subImage

Object

The pixel by pixel subtraction of the two images.





Example(s):

$subImage = OpenCV_SubImage($image1, $image2);





OpenCV_ThresholdBinary

Previous Top Next



* * *



OpenCV_ThresholdBinaryColor



Usage:

$newImage= OpenCV_ThresholdBinaryColor($Image,$ThreshR,$ThreshG,$ThreshB,$MaxR,$MaxG,$MaxB);



Description:

This function takes an OpenCV image and performs a binary threshold and returns the resultant image.





Any pixel values less than the threshold value are set to 0, otherwise they are set to the maximum value passed into the function. This is useful for removing noise and other artifacts from an image before analyzing it.





Requirements:

These functions use the Open-Source OpenCV computer vision library from Intel, and therefore will offer the maximum performance when running on Intel Processors due to low-level optimizations for the Intel architecture. Any camera or input device that Windows recognizes as an imaging device should be compatible with these functions.





Function arguments



Parameter

Variable Type

Description



$Image

Object

An OpenCV Image Structure that has been loaded from an existing file or camera capture.



$ThreshR

Float

The Red Value of the pixel threshold.



$ThreshG

Float

The Green Value of the pixel threshold.



$ThreshB

Float

The Blue Value of the pixel threshold.



$MaxR

Float

The Red Value of the pixel maximum..



$MaxG

Float

The Green Value of the pixel maximum.



$MaxB

Float

The Blue Value of the pixel maximum.





Return parameters



Parameter

Variable Type

Description



$newImage

Object

An OpenCV Image Structure which can be used with the other OpenCV functions in this library.





Usage Example:

$newImage= OpenCV_ThresholdBinaryColor($Image,80,80,80,255,255,255);





OpenCV_ThresholdBinaryGrayBetweenLimits

Previous Top Next



* * *



OpenCV_ThresholdBinaryGrayBetweenLimits



Usage:

$threshImage = OpenCV_ThresholdBinaryGrayBetweenLimits($image, $minR, $minG, $minB, $maxR, $maxG, $maxB);





Description:

This function checks each pixel to see if its color levels are between the minimum and maximum limits (inclusive) and, if it is, sets the pixel to white. If the color levels are outside the limits, the pixel is set to black.





Remarks:

These functions use the Open-Source OpenCV computer vision library from Intel, and therefore will offer the maximum performance when running on Intel Processors due to low-level optimizations for the Intel architecture.

Function arguments



Parameter

Variable Type

Description



$image

Object

The image to check the pixel color levels of.



$minR

Integer

The minimum level for the red color of each pixel (inclusive).



$minG

Integer

The minimum level for the green color of each pixel (inclusive).



$minB

Integer

The minimum level for the blue color of each pixel (inclusive).



$maxR

Integer

The maximum level for the red color of each pixel (inclusive).



$maxG

Integer

The maximum level for the green color of each pixel (inclusive).



$maxB

Integer

The maximum level for the blue color of each pixel (inclusive).





Return parameters



Parameter

Variable Type

Description



$threshImage

Object

The resulting black and white image showing which pixels were between the limits.





Example(s):

$threshImage = OpenCV_ThresholdBinaryGrayBetweenLimits($image, 40, 45, 40, 100, 120, 100);





OpenCV_ThresholdBinaryGrayscale

Previous Top Next



* * *



OpenCV_ThresholdBinaryGrayscale



Usage:

$newImage= OpenCV_ThresholdBinaryGrayscale($Image,$Threshold,$Maximum);



Description:

This function takes an OpenCV image and performs a binary gray-scale threshold and returns the resultant gray-scale image.

Any pixel values less than the threshold value are set to 0, otherwise they are set to the maximum value passed into the function. This is useful for removing noise and other artifacts from an image before analyzing it.





Requirements:

These functions use the Open-Source OpenCV computer vision library from Intel, and therefore will offer the maximum performance when running on Intel Processors due to low-level optimizations for the Intel architecture. Any camera or input device that Windows recognizes as an imaging device should be compatible with these functions.





Function arguments



Parameter

Variable Type

Description



$Image

Object

An OpenCV Image Structure that has been loaded from an existing file or camera capture.



$Threshold

Float

The pixel threshold value



$Maximum

Float

The maximum pixel value





Return parameters



Parameter

Variable Type

Description



$newImage

Object

An OpenCV Image Grayscale Structure which can be used with the other OpenCV functions in this library.





Usage Example:

$newImage= OpenCV_ThresholdBinaryGrayscale($Image,80,255);





OpenCV_ThresholdBinaryInvColor

Previous Top Next



* * *



OpenCV_ThresholdBinaryInvColor



Usage:

$newImage= OpenCV_ThresholdBinaryInvColor($Image,$ThreshR,$ThreshG,$ThreshB,$MaxR,$MaxG,$MaxB);



Description:

This function takes an OpenCV image and performs an inverse binary threshold and returns the resultant image.





Any pixel values exceeding the threshold value are set to 0, otherwise they are set to the maximum value passed into the function. This is useful for removing noise and other artifacts from an image before analyzing it.





Requirements:

These functions use the Open-Source OpenCV computer vision library from Intel, and therefore will offer the maximum performance when running on Intel Processors due to low-level optimizations for the Intel architecture. Any camera or input device that Windows recognizes as an imaging device should be compatible with these functions.





Function arguments



Parameter

Variable Type

Description



$Image

Object

An OpenCV Image Structure that has been loaded from an existing file or camera capture.



$ThreshR

Float

The Red Value of the pixel threshold.



$ThreshG

Float

The Green Value of the pixel threshold.



$ThreshB

Float

The Blue Value of the pixel threshold.



$MaxR

Float

The Red Value of the pixel maximum..



$MaxG

Float

The Green Value of the pixel maximum.



$MaxB

Float

The Blue Value of the pixel maximum.





Return parameters



Parameter

Variable Type

Description



$newImage

Object

An OpenCV Image Structure which can be used with the other OpenCV functions in this library.





Usage Example:

$newImage= OpenCV_ThresholdBinaryInvColor($Image,80,80,80,255,255,255);





OpenCV_ThresholdBinaryInvGrayscale

Previous Top Next



* * *



OpenCV_ThresholdBinaryInvGrayscale



Usage:

$newImage= OpenCV_ThresholdBinaryInvGrayscale($Image,$Threshold,$Maximum);



Description:

This function takes an OpenCV image and performs an inverse binary gray-scale threshold and returns the resultant gray-scale image.





Any pixel values exceeding the threshold value are set to 0, otherwise they are set to the maximum value passed into the function. This is useful for removing noise and other artifacts from an image before analyzing it.





Requirements:

These functions use the Open-Source OpenCV computer vision library from Intel, and therefore will offer the maximum performance when running on Intel Processors due to low-level optimizations for the Intel architecture. Any camera or input device that Windows recognizes as an imaging device should be compatible with these functions.





Function arguments



Parameter

Variable Type

Description



$Image

Object

An OpenCV Image Structure that has been loaded from an existing file or camera capture.



$Threshold

Float

The pixel threshold value



$Maximum

Float

The maximum pixel value





Return parameters



Parameter

Variable Type

Description



$newImage

Object

An OpenCV Image Grayscale Structure which can be used with the other OpenCV functions in this library.





Usage Example:

$newImage= OpenCV_ThresholdBinaryInvGrayscale($Image,80,255);





OpenCV_ThresholdToZeroColor

Previous Top Next



* * *



OpenCV_ThresholdToZeroColor



Usage:

$newImage= OpenCV_ThresholdToZeroColor($Image,$ThreshR,$ThreshG,$ThreshB);



Description:

This function takes an OpenCV image and performs a threshold to zero and returns the resultant image.





Any pixel values less than the threshold values passed into the function are set to 0, otherwise they are set to the corresponding pixel value of the image passed into the function. This is useful for removing noise and other artifacts from an image before analyzing it.





Requirements:

These functions use the Open-Source OpenCV computer vision library from Intel, and therefore will offer the maximum performance when running on Intel Processors due to low-level optimizations for the Intel architecture. Any camera or input device that Windows recognizes as an imaging device should be compatible with these functions.





Function arguments



Parameter

Variable Type

Description



$Image

Object

An OpenCV Image Structure that has been loaded from an existing file or camera capture.



$ThreshR

Float

The Red Value of the pixel threshold.



$ThreshG

Float

The Green Value of the pixel threshold.



$ThreshB

Float

The Blue Value of the pixel threshold.





Return parameters



Parameter

Variable Type

Description



$newImage

Object

An OpenCV Image Structure which can be used with the other OpenCV functions in this library.





Usage Example:

$newImage= OpenCV_ThresholdToZeroColor($Image,80,80,80);





OpenCV_ThresholdToZeroColorHSV

Previous Top Next



* * *



OpenCV_ThresholdToZeroColorHSV



Usage:

$newImage= OpenCV_ThresholdToZeroColorHSV($Image,$ThreshH,$ThreshS,$ThreshV);



Description:

This function takes an OpenCV image and performs a threshold to zero and returns the resultant image. This function operates in the Hue, Saturation, and Value color space.





Any pixel values less than the threshold values passed into the function are set to 0, otherwise they are set to the corresponding pixel value of the image passed into the function. This is useful for removing noise and other artifacts from an image before analyzing it.





Requirements:

These functions use the Open-Source OpenCV computer vision library from Intel, and therefore will offer the maximum performance when running on Intel Processors due to low-level optimizations for the Intel architecture. Any camera or input device that Windows recognizes as an imaging device should be compatible with these functions.





Function arguments



Parameter

Variable Type

Description



$Image

Object

An OpenCV Image Structure that has been loaded from an existing file or camera capture.



$ThreshH

Float

The Hue Value of the pixel threshold. (Values 0 to 360)



$ThreshS

Float

The Saturation Value of the pixel threshold. (Values 0 to 100)



$ThreshV

Float

The ' Value' Value of the pixel threshold. (Values 0 to 100)





Return parameters



Parameter

Variable Type

Description



$newImage

Object

An OpenCV Image Structure which can be used with the other OpenCV functions in this library.





Usage Example:

$newImage= OpenCV_ThresholdToZeroColorHSV($Image,120,50,50);





OpenCV_ThresholdToZeroGrayscale

Previous Top Next



* * *



OpenCV_ThresholdToZeroGrayscale



Usage:

$newImage= OpenCV_ThresholdToZeroGrayscale($Image,$Threshold);



Description:

This function takes an OpenCV image and performs a gray-scale threshold to zero and returns the resultant gray-scale image.





Any pixel values less than the threshold values passed into the function are set to 0, otherwise they are set to the corresponding pixel value of the image passed into the function. This is useful for removing noise and other artifacts from an image before analyzing it.





Requirements:

These functions use the Open-Source OpenCV computer vision library from Intel, and therefore will offer the maximum performance when running on Intel Processors due to low-level optimizations for the Intel architecture. Any camera or input device that Windows recognizes as an imaging device should be compatible with these functions.





Function arguments



Parameter

Variable Type

Description



$Image

Object

An OpenCV Image Structure that has been loaded from an existing file or camera capture.



$Threshold

Float

The pixel threshold value





Return parameters



Parameter

Variable Type

Description



$newImage

Object

An OpenCV Image Grayscale Structure which can be used with the other OpenCV functions in this library.





Usage Example:

$newImage= OpenCV_ThresholdToZeroGrayscale($Image,80);





OpenCV_ThresholdToZeroInvColor

Previous Top Next



* * *



OpenCV_ThresholdToZeroInvColor



Usage:

$newImage= OpenCV_ThresholdToZeroInvColor($Image,$ThreshR,$ThreshG,$ThreshB);



Description:

This function takes an OpenCV image and performs an inverse threshold to zero and returns the resultant image.





Any pixel values exceeding the threshold value are set to 0, otherwise they are set to the corresponding pixel value of the image passed into the function. This is useful for removing noise and other artifacts from an image before analyzing it.





Requirements:

These functions use the Open-Source OpenCV computer vision library from Intel, and therefore will offer the maximum performance when running on Intel Processors due to low-level optimizations for the Intel architecture. Any camera or input device that Windows recognizes as an imaging device should be compatible with these functions.





Function arguments



Parameter

Variable Type

Description



$Image

Object

An OpenCV Image Structure that has been loaded from an existing file or camera capture.



$ThreshR

Float

The Red Value of the pixel threshold.



$ThreshG

Float

The Green Value of the pixel threshold.



$ThreshB

Float

The Blue Value of the pixel threshold.





Return parameters



Parameter

Variable Type

Description



$newImage

Object

An OpenCV Image Structure which can be used with the other OpenCV functions in this library.





Usage Example:

$newImage= OpenCV_ThresholdToZeroInvColor($Image,80,80,80);





OpenCV_ThresholdToZeroInvColorHSV

Previous Top Next



* * *



OpenCV_ThresholdToZeroInvColorHSV



Usage:

$newImage= OpenCV_ThresholdToZeroInvColorHSV($Image,$ThreshH,$ThreshS,$ThreshV);



Description:

This function takes an OpenCV image and performs an inverse threshold to zero and returns the resultant image. This function operates in the Hue, Saturation, and Value color space.





Any pixel values exceeding the threshold value are set to 0, otherwise they are set to the corresponding pixel value of the image passed into the function. This is useful for removing noise and other artifacts from an image before analyzing it.





Requirements:

These functions use the Open-Source OpenCV computer vision library from Intel, and therefore will offer the maximum performance when running on Intel Processors due to low-level optimizations for the Intel architecture. Any camera or input device that Windows recognizes as an imaging device should be compatible with these functions.





Function arguments



Parameter

Variable Type

Description



$Image

Object

An OpenCV Image Structure that has been loaded from an existing file or camera capture.



$ThreshH

Float

The Hue threshold value (Values between 0 and 360)



$ThreshS

Float

The Saturation threshold value (Values between 0 and 100)



$ThreshV

Float

The Value threshold value (Values between 0 and 100)





Return parameters



Parameter

Variable Type

Description



$newImage

Object

An OpenCV Image Structure which can be used with the other OpenCV functions in this library.





Usage Example:

$newImage= OpenCV_ThresholdToZeroInvColorHSV($Image,180,255,255);





OpenCV_ThresholdToZeroInvGrayscale

Previous Top Next



* * *



OpenCV_ThresholdToZeroInvGrayscale



Usage:

$newImage= OpenCV_ThresholdToZeroInvGrayscale($Image,$Threshold);



Description:

This function takes an OpenCV image and performs a gray-scale threshold to zero and returns the resultant gray-scale image.





Any pixel values exceeding the threshold value are set to 0, otherwise they are set to the corresponding pixel value of the image passed into the function. This is useful for removing noise and other artifacts from an image before analyzing it.





Requirements:

These functions use the Open-Source OpenCV computer vision library from Intel, and therefore will offer the maximum performance when running on Intel Processors due to low-level optimizations for the Intel architecture. Any camera or input device that Windows recognizes as an imaging device should be compatible with these functions.





Function arguments



Parameter

Variable Type

Description



$Image

Object

An OpenCV Image Structure that has been loaded from an existing file or camera capture.



$Threshold

Float

The pixel threshold value





Return parameters



Parameter

Variable Type

Description



$newImage

Object

An OpenCV Image Grayscale Structure which can be used with the other OpenCV functions in this library.





Usage Example:

$newImage= OpenCV_ThresholdToZeroInvGrayscale($Image,80);





OpenCV_ThresholdTruncateColor

Previous Top Next



* * *



OpenCV_ThresholdTruncateColor



Usage:

$newImage= OpenCV_ThresholdTruncateColor($Image,$ThreshR,$ThreshG,$ThreshB);



Description:

This function takes an OpenCV image and performs a threshold truncate and returns the resultant image.





Any pixel values exceeding the threshold value are set to the threshold values passed into the function otherwise they are set to the corresponding pixel value of the image passed into the function. This is useful for removing noise and other artifacts from an image before analyzing it.





Requirements:

These functions use the Open-Source OpenCV computer vision library from Intel, and therefore will offer the maximum performance when running on Intel Processors due to low-level optimizations for the Intel architecture. Any camera or input device that Windows recognizes as an imaging device should be compatible with these functions.





Function arguments



Parameter

Variable Type

Description



$Image

Object

An OpenCV Image Structure that has been loaded from an existing file or camera capture.



$ThreshR

Float

The Red Value of the pixel threshold.



$ThreshG

Float

The Green Value of the pixel threshold.



$ThreshB

Float

The Blue Value of the pixel threshold.





Return parameters



Parameter

Variable Type

Description



$newImage

Object

An OpenCV Image Structure which can be used with the other OpenCV functions in this library.





Usage Example:

$newImage= OpenCV_ThresholdTruncateColor($Image,80,80,80);





OpenCV_ThresholdTruncateGrayscale

Previous Top Next



* * *



OpenCV_ThresholdTruncateGrayscale



Usage:

$newImage= OpenCV_ThresholdTruncateGrayscale($Image,$Threshold);



Description:

This function takes an OpenCV image and performs a gray-scale threshold truncate and returns the resultant gray-scale image.





Any pixel values exceeding the threshold value are set to the threshold value passed into the function otherwise they are set to the corresponding pixel value of the image passed into the function. This is useful for removing noise and other artifacts from an image before analyzing it.





Requirements:

These functions use the Open-Source OpenCV computer vision library from Intel, and therefore will offer the maximum performance when running on Intel Processors due to low-level optimizations for the Intel architecture. Any camera or input device that Windows recognizes as an imaging device should be compatible with these functions.





Function arguments



Parameter

Variable Type

Description



$Image

Object

An OpenCV Image Structure that has been loaded from an existing file or camera capture.



$Threshold

Float

The pixel threshold value





Return parameters



Parameter

Variable Type

Description



$newImage

Object

An OpenCV Image Grayscale Structure which can be used with the other OpenCV functions in this library.





Usage Example:

$newImage= OpenCV_ThresholdTruncateGrayscale($Image,80);





OpenCV_ZeroSaturatedColorImagePixels

Previous Top Next



* * *



OpenCV_ZeroSaturatedColorImagePixels



Usage:

($newImage, $pixelCount) = OpenCV_ZeroSaturatedColorImagePixels($Image,$Threshold, $UpperX,$UpperY,$Width,$Height);



Description:

This function takes an OpenCV image, the upper left coordinates & width and height of the region of interest. This function will check each red, green and blue pixel value in the region of interest and if all three values are greater than or equal to the threshold value, the pixel will be set to black. The resultant image is returned along with the the number of pixels that were changed.

Note: If the requested region of interest is outside of the maximum bounds of the image, the function will automatically return a failing test result.





Requirements:

These functions use the Open-Source OpenCV computer vision library from Intel, and therefore will offer the maximum performance when running on Intel Processors due to low-level optimizations for the Intel architecture. Any camera or input device that Windows recognizes as an imaging device should be compatible with these functions.





Function arguments



Parameter

Variable Type

Description



$Image

Object

An OpenCV Image Structure that has been loaded from an existing file or camera capture.



$Threshold

Double

Pixel threshold value



$UpperX

Integer

Upper left X coordinate of the ROI



$UpperY

Integer

Upper left Y coordinate of the ROI



$Width

Integer

ROI Width (Pixels)



$Height

Integer

ROI Height (Pixels)





Return parameters



Parameter

Variable Type

Description



$newImage

Object

An OpenCV Image Structure.



$pixelCount

Integer

Amount of pixels that have been changed to black.





Usage Example:

($newImage, $pixelCount) = OpenCV_ZeroSaturatedColorImagePixels($Image,245, 20,20,100,100);





Abs

Previous Top Next



* * *



Abs

Usage:

$value = Abs($number);

Description:

This function returns the absolute value of the number supplied. The number must be an integer, float, or string representing a numeric value.

Result:

$value = $number or -$number Function Arguments



Parameter

Variable Type

Description



$number

Float, Integer, String

The number.





Return Parameters



Parameter

Variable Type

Description



$value

float

The resulting value is returned as a float data-type regardless of the input data-types





Add

Previous Top Next



* * *



Add

Usage:

$value = Add($number1,$number2);

Description:

This function returns the result of a numeric ADD operation on the two numbers supplied. The two numbers must be integers, floats, or strings representing a numeric value.

Result:

$value = $number1 + $number2 Function Arguments



Parameter

Variable Type

Description



$number1

Float, Integer, String

The first number.



$number2

Float, Integer, String

The second number





Return Parameters



Parameter

Variable Type

Description



$value

float

The resulting value is returned as a float data-type regardless of the input data-types





AddToCRC

Previous Top Next



* * *



AddToCRC

Usage:

$NewCRC = AddToCRC($CurrentCRC,$value,$Method);

Description:

This function adds the value to the current CRC using the specified method and returns the updated CRC. The only the lower 8 bits of the value are used. Only the CRC-CCITT (0x1021) And ANSI-CRC16 (X16 + X12 + X5 + 1) methods are supported at this time with the result returned in the lower 16 bits return value.

Function Arguments



Parameter

Variable Type

Description



$CurrentCRC

Integer

Current CRC



$value

Integer

New value to add to CRC



$Method

String

CRC method to use. Only the CRC-CCITT and ANSI-CRC16 methods are support at this time.





Return Parameters



Parameter

Variable Type

Description



$NewCRC

Integer

Update CRC





ArcTangent

Previous Top Next



* * *



ArcTangent

Usage:

$value = ArcTangent($number);

Description:

This function returns the angle whose tangent is supplied for the argument of the function. This function is essentially the inverse of the tangent function.

Function Arguments



Parameter

Variable Type

Description



$number

Float, Integer, String

The value of of the tangent of a particular angle.





Return Parameters



Parameter

Variable Type

Description



$value

float

The angle in radians of the triangle whose tangent matches the supplied function argument.

The resulting value is returned as a float data-type regardless of the input data-types





BitWiseAnd

Previous Top Next



* * *



BitWiseAnd

Usage:

$value = BitWiseAnd($number1,$number2);

Description:

This function returns the result of a bit-wise AND operation on the two numbers supplied. The two numbers must be strings representing valid hexidecimal values, otherwise a failure is generated by this test step.

Function Arguments



Parameter

Variable Type

Description



$number1

String

The first string representing a hexidecimal number. (Example: "55AF11")



$number2

String

The second string representing a hexidecimal number. (Example: "A0")





Return Parameters



Parameter

Variable Type

Description



$value

String

The string representing the hexidecimal number resulting from the bit-wise operation.





BitWiseNot

Previous Top Next



* * *



BitWiseNot

Usage:

$value = BitWiseNot($number1);

Description:

This function returns the result of a bit-wise NOT operation on the number supplied. The number must be a string representing a valid hexidecimal value, otherwise a failure is generated by this test step.

For Example:

$value = BitWiseNot("1");

$value will be "FFFFFFFE".

Function Arguments



Parameter

Variable Type

Description



$number1

String

The first string representing a hexidecimal number.





Return Parameters



Parameter

Variable Type

Description



$value

String

The string representing the hexidecimal number resulting from the bit-wise NOT operation.





BitWiseOr

Previous Top Next



* * *



BitWiseOr

Usage:

$value = BitWiseOr($number1,$number2);

Description:

This function returns the result of a bit-wise OR operation on the two numbers supplied. The two numbers must be strings representing valid hexidecimal values, otherwise a failure is generated by this test step.

Function Arguments



Parameter

Variable Type

Description



$number1

String

The first string representing a hexidecimal number. (Example: "55AF11")



$number2

String

The second string representing a hexidecimal number. (Example: "A0")





Return Parameters



Parameter

Variable Type

Description



$value

String

The string representing the hexidecimal number resulting from the bit-wise operation.





BitWiseShift

Previous Top Next



* * *



BitWiseShift

Usage:

$value = BitWiseShift($number1,$number2,$direction);

Description:

This function returns the result of a bit-wise SHIFT operation on the number supplied. The number must be a string representing a valid hexidecimal value, otherwise a failure is generated by this test step.

For Example:

$value = BitWiseShift("1","1","<<");

$value will be "2".

Function Arguments



Parameter

Variable Type

Description



$number1

String

A string representing a hexidecimal number. (Example: "55AF11")



$number2

String

A string representing the shift count in hexidecimal.



$direction

String

The shift direction. Valid strings are:

· "<<": Shift Left

· ">>": Shift Right





Return Parameters



Parameter

Variable Type

Description



$value

String

The string representing the hexidecimal number resulting from the bit-wise SHIFT operation.





BitWiseXor

Previous Top Next



* * *



BitWiseXor

Usage:

$value = BitWiseXor($number1,$number2);

Description:

This function returns the result of a bit-wise XOR operation on the two numbers supplied. The two numbers must be strings representing valid hexidecimal values, otherwise a failure is generated by this test step.

For Example:

$value = BitWiseXor("5A","AA");

$value will be "'F0".

Function Arguments



Parameter

Variable Type

Description



$number1

String

The first string representing a hexidecimal number.



$number2

String

The second string representing a hexidecimal number.





Return Parameters



Parameter

Variable Type

Description



$value

String

The string representing the hexidecimal number resulting from the bit-wise XOR operation.





CalculateLinearRegressionOfArray

Previous Top Next



* * *



CalculateLinearRegressionOfArray



Usage:



($Slope,$YIntercept,$R,$RSquared) = CalculateLinearRegressionOfArray($InputArray,$StartIndex,$EndIndex,$DisplayCalculation);





Description:

This function calculates a "best-fit" line of an array of sampled data using linear regression. This function can be used for finding the slope, y-intercept, R and R Squared values of an array of sampled data.





The supplied input array should be a two dimensional array of either integer or floating point values where the first dimension contains the X values of the sampled data, and the second dimension contains the Y values of the sampled data.





The Slope and Y Intercept data returned from the function can be used to determine the best fit line for the portion of data for which the regression was peformed i.e. (Y=mx + B)





The R and R Squared parameters are used evaluate the total amount of deviation of each sample from the ideal best fit line. (For a more detailed explanation, do a search for linear regression or 'Best Fit' regression)

Function arguments



Parameter

Variable Type

Description



$InputArray

Array

An array of either integers or floating point values containing the X and Y coordinates.



$StartIndex

Integer

The starting point in the index to begin calculating the linear regression. This parameter is useful if you are only interested in computing a linear regression of a portion of the data contained in the input array.



$EndIndex

Integer

The ending point in the array index to stop calculating the linear regression. This parameter is useful if you are only interested in compuing a linear regression of a portion of the data contained in the input array.



$DisplayCalculation

Boolean

If this value is set to true, the function will display a pop up window showing a graph of the supplied data along with a chart showing the linear regression. This is useful for debugging test scripts during the development phase.





Return parameters



Parameter

Variable Type

Description



$Slope

Integer

The integer value of the binary string



$Y-Intercept

Double

The point at which the sampled data's best fit line would intersect the X axis



$R

Double

The sum of the total deviation of each sample point from the best fit line.



$RSquared

Double

The square of the sum of the total deviation of each sample point from the best fit line.





Example:





($Slope,$YIntercept,$R,$RSquared) = CalculateLinearRegressionOfArray($MeasureArray,100,500);





Ceiling

Previous Top Next



* * *



Ceiling

Usage:

$value = Ceiling($number);

Description:

This function rounds a floating point number to the next integer of equal or higher value. (Rounds Up)

Function Arguments



Parameter

Variable Type

Description



$number

Float, Integer, String

The number.





Return Parameters



Parameter

Variable Type

Description



$value

float

The resulting value is returned as a float data-type regardless of the input data-types





ConvertPolarToRectangularCoordinate

Previous Top Next



* * *



ConvertPolarToRectangularCoordinate



Usage:



($X,$Y) = ConvertPolarToRectangularCoordinate($Theta,$R);





Description:

This function converts a standard polar coordinate consisting of a value of theta specified in radians, and a radius length which is unitless. The function returns the X,Y equivalent cartesian coordinates.

Function arguments



Parameter

Variable Type

Description



$Theta

Float

An angle measured in radians of the polar coordinate



$R

Float

The radius of the moment arm of the polar coordinate





Return parameters



Parameter

Variable Type

Description



$X

Float

The equivalent X value coordinate



$Y

Float

The equivalent Y value coordinate





Example:





($X,$Y) = ConvertPolarToRectangularCoordinate(3.14159,1);





ConvertRectangulartoPolarCoordinate

Previous Top Next



* * *



ConvertRectangularToPolarCoordinate



Usage:



($Theta,$R) = ConvertRectangularToPolarCoordinate($X,$Y);





Description:

This function converts a standard cartesian coordinate consisting of a unitless X and Y value and returns the equivalent polar coordinate specified by the angle "theta" returned in radians, and a unitless R radius.

Function arguments



Parameter

Variable Type

Description



$X

Float

X Value Coordinate



$Y

Float

Y Value Coordinate





Return parameters



Parameter

Variable Type

Description



$Theta

Float

An angle measured in radians



$R

Float

The moment arm radius length of the polar coordinate





Example:





($Theta,$R) = ConvertRectangularToPolarCoordinate(0,1);





Cosine

Previous Top Next



* * *



Cosine

Usage:

$value = Cosine($number);

Description:

This function returns the Cosine of the angle value specified in Radians.

Function Arguments



Parameter

Variable Type

Description



$number

Float, Integer, String

The value of the angle in radians.





Return Parameters



Parameter

Variable Type

Description



$value

float

The resulting value is returned as a float data-type regardless of the input data-types





Divide

Previous Top Next



* * *



Divide

Usage:

$value = Divide($number1,$number2);

Description:

This function returns the result of a numeric Divide operation on the two numbers supplied. The two numbers must be integers, floats, or strings representing a numeric value.

Result:

$value = $number1 / $number2

Function Arguments



Parameter

Variable Type

Description



$number1

Float, Integer, String

The first number.



$number2

Float, Integer, String

The second number





Return Parameters



Parameter

Variable Type

Description



$value

Float

The resulting value is returned as a float data-type regardless of the input data-types





Floor

Previous Top Next



* * *



Floor

Usage:

$value = Floor($number);

Description:

This function rounds a floating point number to the next integer of equal or lower value. (Rounds Down)

Function Arguments



Parameter

Variable Type

Description



$number

Float, Integer, String

The number.





Return Parameters



Parameter

Variable Type

Description



$value

float

The resulting value is returned as a float data-type regardless of the input data-types





GetRandomInteger

Previous Top Next



* * *



GetRandomInteger



Usage:

$value = GetRandomInteger($lowerBound, $upperBound);



Description:

This function returns an integer between the two numbers. It's random seed is supplied by the number of system ticks currently elapsed.





Note: The $lowerBound is included in the possible numbers, but the $upperBound is not.

Function Arguments



Parameter

Variable Type

Description



$lowerBound

Integer

The lower limit of the random number to be returned (inclusive).



$upperBound

Integer

The upper limit of the random number to be returned (non-inclusive).





Return parameters



Parameter

Variable Type

Description



$value

Integer

The random number returned by this function.





Example:





// Select a number from 1 to 10 (note upper bound not included so we must supply 11).

$lowerBound = 1;

$upperBound = 11;





$value = GetRandomInteger($lowerBound, $upperBound);





$outStr = "Random Number: " + $value;

UpdateStatus($outStr);





HyperbolicCosine

Previous Top Next



* * *



HyperbolicCosine

Usage:

$value = HyperbolicCosine($number);

Description:

This function returns the Hyperbolic Cosine of the angle value specified in Radians.

Function Arguments



Parameter

Variable Type

Description



$number

Float, Integer, String

The value of the angle in radians.





Return Parameters



Parameter

Variable Type

Description



$value

float

The resulting value is returned as a float data-type regardless of the input data-types





HyperbolicSine

Previous Top Next



* * *



HyperbolicSine

Usage:

$value = HyperbolicSine($number);

Description:

This function returns the Hyperbolic Sine of the angle value specified in Radians.

Function Arguments



Parameter

Variable Type

Description



$number

Float, Integer, String

The value of the angle in radians.





Return Parameters



Parameter

Variable Type

Description



$value

float

The resulting value is returned as a float data-type regardless of the input data-types





Log

Previous Top Next



* * *



Log

Usage:

$value = Log($number);

Description:

This function returns the base 10 Logarithm of the supplied value.

Function Arguments



Parameter

Variable Type

Description



$number

Float, Integer, String

The value supplied to the log function.





Return Parameters



Parameter

Variable Type

Description



$value

float

The resulting value is returned as a float data-type regardless of the input data-types





LogSpecifyBase

Previous Top Next



* * *



LogSpecifyBase

Usage:

$value = LogSpecifyBase($number,$base);

Description:

This function returns the result of a logarithm function computed to a specific base.

The most common use of this function is to compute a natural log in which the base value of 2.718281828 should be used. Function Arguments



Parameter

Variable Type

Description



$number

Float, Integer, String

The value supplied to the log function.



$base

Float,Integer

The desired base for the logarithm computation





Return Parameters



Parameter

Variable Type

Description



$value

float

The resulting value is returned as a float data-type regardless of the input data-types





Example:

$Value = LogSpecifyBase(10, 2.718281828); // Computes Ln(1)





Logical_AND

Previous Top Next



* * *



Logical_AND

Usage:

$value = Logical_AND($value1,$value2);

Description:

This function performs a logical AND operation on two boolean script variables and returns the result. In the event that one of the supplied arguments can not be cast as a boolean, a failure is returned to the executive.

Result:

$value = $value1 && $value2

Function Arguments



Parameter

Variable Type

Description



$value1

Boolean

The first boolean argument.



$value2

Boolean

The second boolean argument.





Return Parameters



Parameter

Variable Type

Description



$value

Boolean

The result of the logical AND operation on the two supplied boolean arguments.





Logical_OR

Previous Top Next



* * *



Logical_OR

Usage:

$value = Logical_OR($value1,$value2);

Description:

This function performs a logical OR operation on two boolean script variables and returns the result. In the event that one of the supplied arguments can not be cast as a boolean, a failure is returned to the executive.

Result:

$value = $value1 || $value2

Function Arguments



Parameter

Variable Type

Description



$value1

Boolean

The first boolean argument.



$value2

Boolean

The second boolean argument.





Return Parameters



Parameter

Variable Type

Description



$value

Boolean

The result of the logical OR operation on the two supplied boolean arguments.





Mod

Previous Top Next



* * *



Mod

Usage:

$value = Mod($number1,$number2);

Description:

This function returns the result of a numeric MOD operation on the two numbers supplied. The two numbers must be integers, floats, or strings representing a numeric value.

Result:

$value = $number1 % $number2

Function Arguments



Parameter

Variable Type

Description



$number1

Float, Integer, String

The first number.



$number2

Float, Integer, String

The second number





Return Parameters



Parameter

Variable Type

Description



$value

Float

The resulting value is returned as a float data-type regardless of the input data-types





Multiply

Previous Top Next



* * *



Multiply

Usage:

$value = Multiply($number1,$number2);

Description:

This function returns the result of a numeric MULTIPLY operation on the two numbers supplied. The two numbers must be integers, floats, or strings representing a numeric value.

Result:

$value = $number1 * $number2

Function Arguments



Parameter

Variable Type

Description



$number1

Float, Integer, String

The first number.



$number2

Float, Integer, String

The second number





Return Parameters



Parameter

Variable Type

Description



$value

Float

The resulting value is returned as a float data-type regardless of the input data-types





NaturalLog

Previous Top Next



* * *



NaturalLog



Usage:

$value = NaturalLog($number);



Description:

This function returns the natural logarithm of the supplied number.



NOTE:

The natural logarithm refers to a base of the number 'e'.

Function arguments



Parameter

Variable Type

Description



$number

Float, Integer, String

The number to find the natural logarithm of.





Return parameters



Parameter

Variable Type

Description



$value

Float

The natural logarithm of the number, returned as a floating point value.





Example(s):

// Connect to the instrument.

$number = 10;

$value = NaturalLog($number);





Power

Previous Top Next



* * *



Power



Usage:

$value = Power($number, $exponent);



Description:

This function returns the result of $number raised to the power of $exponent.



Remarks:

The returned value is always of type Float, regardless of the input types.

This function can also be used to find the roots of functions by inverting the $exponent number. For example to find the cube root of a number, use an exponent of 1/3.

Function arguments



Parameter

Variable Type

Description



$number

Float, Integer

The number to use as the base.



$exponent

Float, Integer

The number to use as the exponent.





Return parameters



Parameter

Variable Type

Description



$value

Float

The result of raising $number to the power of $exponent.





Example(s):

// Get 2 raised to the power of 10.

$number = 2;

$expon = 10;

$value = Power($number, $expon);





// Get the cube root of 27.

$number = 27;

$expon = 1 / 3;

$cubeRoot = Power($number, $expon);





Round

Previous Top Next



* * *



Round

Usage:

$value = Round($number,$NumberOfDigits);

Description:

This function rounds a floating point number to the specified number of digits after the decimal place.

Function Arguments



Parameter

Variable Type

Description



$number

Float, Integer, String

The number.



$NumberOfDigits

Integer

The number of digits after the decimal place.





Return Parameters



Parameter

Variable Type

Description



$value

float

The resulting value is returned as a float data-type regardless of the input data-types





Sine

Previous Top Next



* * *



Sine

Usage:

$value = Sine($number);

Description:

This function returns the Sine of the angle value specified in Radians.

Function Arguments



Parameter

Variable Type

Description



$number

Float, Integer, String

The value of the angle in radians.





Return Parameters



Parameter

Variable Type

Description



$value

float

The resulting value is returned as a float data-type regardless of the input data-types





SquareRoot

Previous Top Next



* * *



SquareRoot



Usage:

$value = SquareRoot($number1);



Description:

This function returns the square root of the supplied number.



Remarks:

The returned data type is always Float, regardless of the input data type.

The same data can be achieved using the Power function and a power of 1/2.

Function arguments



Parameter

Variable Type

Description



$number1

Float, Integer

The number to find the square root of.





Return parameters



Parameter

Variable Type

Description



$value

Float

The square root of the input number.





Example(s):

// Get the square root of 81.

$number = 81;

$sqrt = SquareRoot($number);





Subtract

Previous Top Next



* * *



Subtract

Usage:

$value = Subtract($number1,$number2);

Description:

This function returns the result of a numeric SUBTRACT operation on the two numbers supplied. The two numbers must be integers, floats, or strings representing a numeric value.

Result:

$value = $number1 - $number2

Function Arguments



Parameter

Variable Type

Description



$number1

Float, Integer, String

The first number.



$number2

Float, Integer, String

The second number





Return Parameters



Parameter

Variable Type

Description



$value

Float

The resulting value is returned as a float data-type regardless of the input data-types





Tangent

Previous Top Next



* * *



Tangent

Usage:

$value = Tangent($number);

Description:

This function returns the Tangent of the angle value specified in Radians.

Function Arguments



Parameter

Variable Type

Description



$number

Float, Integer, String

The value of the angle in radians.





Return Parameters



Parameter

Variable Type

Description



$value

float

The resulting value is returned as a float data-type regardless of the input data-types





RecordMeasurement

Previous Top Next



* * *



RecordMeasurement



Usage:

RecordMeasurement($measurementName, $measurement, $measurementUnit, $parametricMeasurement);





Description:

This function will record a measurement that will be included in any report writer.





Remarks:

Whether any of the data here is included in a report is a function of the report writer. For example, the HTML report writer will output the Test Name (set with the SetTestName function), but does not include the Measurement Name, even though it includes the measurement data.

Function arguments



Parameter

Variable Type

Description



$measurementName

String

The name of the measurement to be recorded.



$measurement

String,

Integer, or

Float

The measurement data to be recorded.



$measurmentUnit

String

The unit associated with the measurement.



$parametricMeasurement

Boolean

If True, the measurement can be used for parametric data analysis.





Return parameters



Parameter

Variable Type

Description



None





Example(s):

// Record a voltage measurement

$measName = "Input_Voltage";

$measUnit = "Volts";

$parametric = true;





RecordMeasurement($measName, $measurement, $measUnit, $parametric);





RecordMeasurementPassFail

Previous Top Next



* * *



RecordMeasurementPassFail



Usage:

RecordMeasurementPassFail($measurementName, $measurement, $measurementUnit, $parametricMeasurement, $passFail);





Description:

This function will record a measurement that will be included in any report writer and includes a parameter to Pass or Fail this particular test.





Remarks:

Whether any of the data here is included in a report is a function of the report writer. For example, the HTML report writer will output the Test Name (set with the SetTestName function), but does not include the Measurement Name, even though it includes the measurement data.

Setting $passFail to false will cause the test to fail and stop the test script.

Function arguments



Parameter

Variable Type

Description



$measurementName

String

The name of the measurement to be recorded.



$measurement

String,

Integer, or

Float

The measurement data to be recorded.



$measurmentUnit

String

The unit associated with the measurement.



$parametricMeasurement

Boolean

If True, the measurement can be used for parametric data analysis.



$passFail

Boolean

Wether to Pass (set to true) or Fail (set to false) this test step.





Return parameters



Parameter

Variable Type

Description



None





Example(s):

// Record a voltage measurement and pass this test.

$measName = "Input_Voltage";

$measUnit = "Volts";

$parametric = true;

$passFail = true;





RecordMeasurementPassFail($measName, $measurement, $measUnit, $parametric, $passFail);





RecordMeasurementWithLimits

Previous Top Next



* * *



RecordMeasurementWithLimits



Usage:

RecordMeasurementWithLimits($measureName, $measurement, $measureUnit, $parametricMeasure, $lowerLimit, $upperLimit, $failOnLimits);



Description:

This function will record a measurement that will be included in any report writer and tests the measurement against upper and lower limits. If $failOnLimits is set to True and the measurement is outside of the limits, this test will Fail.



Remarks:

Whether any of the data here is included in a report is a function of the report writer. For example, the HTML report writer will output the Test Name (set with the SetTestName function), but does not include the Measurement Name, even though it includes the measurement data.



Setting $failOnLimits to true and having the measurement outside of the limits will cause the test to fail and stop the test script.



Only numerical types can be included in the $measurement so it can be tested against the limits.



Function arguments



Parameter

Variable Type

Description



$measureName

String

The name of the measurement to be recorded.



$measurement

Integer, or Float

The measurement data to be recorded.



$measureUnit

String

The unit associated with the measurement.



$parametricMeasure

Boolean

If true, the measurement can be used for parametric data analysis.



$lowerLimit

Float

The lower numerical limit.



$upperLimit

Float

The upper numerical limit.



$failOnLimits

Boolean

Whether to return a Fail to the script interpreter if $measurement is outside of the limits.





Return parameters



Parameter

Variable Type

Description



None





Example:





// Record a voltage measurement and pass the test.

$measName = "Input Voltage";

$measUnit = "Volts";

$parametric = true;

$lowerLimit = 10.3;

$upperLimit = 14.2;

$failOnLimits = true;



RecordMeasurementWithLimits($measName, $measurement, $measUnit, $parametric, $lowerLimit, $upperLimit, $failOnLimits);





RecordMeasurementWithLimitsSetFailLabel

Previous Top Next



* * *



RecordMeasurementWithLimitsSetFailLabel



Usage:

RecordMeasurementWithLimitsSetFailLabel($MeasurementName, $Measurement, $MeasurementUnit, $ParametricMeasurement, $LowerLimit, $UpperLimit, $FailOnLimits);



Description:

This function is used to record a parametric measurement to TARS. This function is an extension of the regular RecordMeasurement function since it allows for recording a measurement and testing it against a set of limits in a single test step. The limit checking may be ignored by passing a value of false to the $FailOnLimits parameter.





Remarks:

This function is basically a duplicate of the 'RecordMeasurementWithLimits' function with the exception that in the event of a failure, this function sets the failure label reported to TARS or MES to [Test Group Name]-[Measurement Name]. This can cause an issue with truncation when viewing test data in MES since there is a 25 character limit on MES failure labels, so please be aware of this limitation when using the function. Aside from this change, the function works in the exact same manner as the standard 'RecordMeasurementWithLimits' function.





Function arguments



Parameter

Variable Type

Description



$MeasurementName

String

The name of the measurement to be recorded.



$Measurement

Integer, Float

The actual measurement data to record.



$MeasurementUnit

String

The unit associated with the measurement.



$ParametricMeasurement

Boolean

A boolean flag indicating whether or not the recorded measurement can be used for parametric data analysis.



$LowerLimit

Float

The lower numeric limit.



$UpperLimit

Float

The upper numeric limit.



$FailOnLimits

Boolean

If this value is set to true, the $Measurement variable is compared to the upper and lower limit, and the test will automatically return a failing result to the test executive.





Return parameters



Parameter

Variable Type

Description



None





Example:





// Record a passing measurement.

$MeasName = "ThisMeasure";

$Measure = 300;

$MeasUnit = "flops";

$ParamMeas = true;

$LowLimit = 225;

$UpLimit = 512;

$FailOn = true;

RecordMeasurementWithLimitsSetFailLabel($MeasName, $Measure, $MeasUnit, $ParamMeas, $LowLimit, $UpLimit, $FailOn);





RecordMeasurementWithPercentLimits

Previous Top Next



* * *



RecordMeasurementWithPercentLimits

Usage:

RecordMeasurementWithPercentLimits($MeasurementName,$ExpectedValue,$MeasuredValue,$PercentLimit,$ParametricMeasurement,$FailOnLimits)

Description:

This function works just like the RecordMeasurementWithLimits function except you pass it the expected measurement, the actual measurement, and the highest percentage the measured value can differ from the expected Value.The limit checking may be ignored by passing a value of 'FALSE' to the $FailOnLimits parameter.

note: the percent limit is expressed in Percent (%)

Function Arguments



Parameter

Variable Type

Description



$MeasurementName

String

The name of the measurement to be recorded



$ExpectedValue

String, Integer, Float

The expected Value



$MeasuredValue

String, Integer, Float

The actual measurement data to record



$PercentLimit

Float

The Percent Limit



$ParametricMeasurement

Boolean

A boolean flag indicating whether or not the recorded measurement can be used for parametric data analysis.



$FailOnLimits

Boolean

If this value is set to true, the $Measurement variable is compared to the upper and lower limit, and the test will automatically return a failing result to the test executive.





MES_GetUnitChildren

Previous Top Next



* * *



MES_GetUnitChildren



Usage:

($parentSN, $childSN) = MES_GetUnitChildren($serialNum, $assemblyNum, $serverName, $databaseName);



Description:

This function returns the latest child link as detailed in MES based on the assembly number ($assemblyNum).



Remarks:

The MES Static API Proxy must be installed to use this function.



Function arguments



Parameter

Variable Type

Description



$serialNum

String

The unit serial number.



$assemblyNum

String

The unit assembly number.



$serverName

String

The name of the MES server to connect to.



$databaseName

String

The name of the database to get data from.





Return parameters



Parameter

Variable Type

Description



$parentSN

String

The serial number of the parent to the current unit.



$childSN

String

The serial number of the last child of the current unit.





Examples:





// Get the parent and the last child.

$sn = "123456789";

$assem = "this_assembly";

$serv = "AUHSERVER";

$db = "JEMS3";



($parent, $child) = MES_GetUnitChildren($sn, $assem, $serv, $db);



$outString = "The parent of this unit is:\t" + $parent;

UpdateStatus($outString)

$outString = "The last child of this unit is:\t" + $child;

UpdateStatus($outString)





MES_GetUserStats

Previous Top Next



* * *



MES_GetUserStats



Usage:

($active, $mesID, $fName, $lName, $winID) = MES_GetUserStats($userName, $serverName, $database);



Description:

This function will return information about the user from the MES database.



Remarks

The user, server and database must exist or this function will return a fail.





Function arguments



Parameter

Variable Type

Description



$userName

String

The name of the MES user to get data about.



$serverName

String

The name of the MES server to connect to.



$database

String

The name of the MES database to get data from.





Return parameters



Parameter

Variable Type

Description



$active

Boolean

Whether the specified user is active in the system.



$mesID

String

The MES ID of the specified user.



$fName

String

The first name of the specified user.



$lName

String

The last name of the specified user.



$winID

String

The windows ID of the specified user.





Example:





// Connect to server MESTESTSRV, database JEMS and get info on user smithj.

$serv = "MESTESTSRV";

$db = "JEMS";

$user = "smithj";



($active, $mesID, $fName, $lName, $winID) = MES_GetUserStats($user, $serv, $db);



// Output the information on the user.

$outStr = "User is active:\t" + $active;

$outStr = $outStr + "\r\nMES user ID:\t" + $mesID;

$outStr = $outStr + "\r\nFirst Name:\t" + $fName;

$outStr = $outStr + "\r\nLast Name:\t" + $lName;

$outStr = $outStr + "\r\nWIN user ID:\t" + $winID;

UpdateStatus($outStr);





MES_GetValidUser

Previous Top Next



* * *



MES_GetValidUser



Usage:

$valid = MES_GetValidUser($userName, $serverName, $database);



Description:

This function will return whether or not the user is a valid MES user.



Remarks

The user, server and database must exist or this function will return a fail.





Function arguments



Parameter

Variable Type

Description



$userName

String

The name of the MES user to check.



$serverName

String

The name of the MES server to connect to.



$database

String

The name of the MES database to check.





Return parameters



Parameter

Variable Type

Description



$valid

Boolean

Whether the user is a valid user of the specified server and database.





Example:





// Connect to server MESTESTSRV, database JEMS and check if user smithj is a valid user.

$serv = "MESTESTSRV";

$db = "JEMS";

$user = "smithj";



$valid = MES_GetValidUser($user, $serv, $db);



// Output the result of the user validity check.

$notStr = "";

if(!$valid)

{

$notStr = "not ";

}

$outStr = "User is " + $notStr + "valid.";

UpdateStatus($outStr);





MES_CheckOKToTest

Previous Top Next



* * *



MES_CheckOKToTest



Usage:

$OKToTest = MES_CheckOKToTest($ServiceURL,$CustomerName,$DivisionName,$SerialNumber,$AssemblyNumber,$TesterName,$ProcessStep)



Description:



This function queries the Jabil MES system via the MES-TIS web service and returns a string variable containing "PASS" or "FAIL" indicating whether the current test process is valid to proceed.





Result:

This function returns PASS if it is OK to proceed with test.

This function returns FAIL if it is NOT OK to proceed with test.





Function arguments



Parameter

Variable Type

Description



$ServiceURL

String

The Web URL For the MES-TIS webservice. This is usually installed on the COM+ MES server for the plant.



$CustomerName

String

The product's customer name.



$DivisionName

String

The product's division name.



$SerialNumber

String

The product's serial number.



$AssemblyNumber

String

The product's assembly number.



$TesterName

String

The name of the tester



$ProcessStep

String

The name of the current process step to evaluate for test validility.





Return parameters



Parameter

Variable Type

Description



$OKToTest

String

Returns "PASS" if the supplied test process is the next valid step.





MES_CheckOKToTestLinkMaterial

Previous Top Next



* * *



MES_CheckOKToTestLinkMaterial



Usage:

$OKToTest = MES_CheckOKToTestLinkMaterial($ServiceURL, $CustomerName, $DivisionName, $SerialNumber, $AssemblyNumber, $TesterName, $ProcessStep);





Description:

This function queries the Jabil MES system via the MES-TIS web service and returns a string variable containing "PASS" or "FAIL" indicating whether the current test process is valid to proceed with a link material.





Result:

This function returns PASS if it is OK to proceed with test.

This function returns FAIL if it is NOT OK to proceed with test.

Function arguments



Parameter

Variable Type

Description



$ServiceURL

String

The Web URL For the MES-TIS webservice. This is usually installed on the COM+ MES server for the plant.



$CustomerName

String

The product's customer name.



$DivisionName

String

The product's division name.



$SerialNumber

String

The product's serial number.



$AssemblyNumber

String

The product's assembly number.



$TesterName

String

The name of the tester



$ProcessStep

String

The name of the current process step to evaluate for test validility.





Return parameters



Parameter

Variable Type

Description



$OKToTest

String

Returns "PASS" if the supplied test process is the next valid step for the link material.





Example(s):

// These are the parameters that need to be passed:

$url = "http://servername/MES-TIS/TIS.asmx";

$cust = "customername";

$div = "divisionname";

$lmSN = "SN123456B";

$asmb = "ASM45678-001";

$tstr = "TESTERname";

$proc = "Process2";





// Check that the MES-TIS system is up and running.

$sysUp = MES_CheckSystemUp($url);





// Now check the material.

$ret = MES_CheckOKToTestLinkMaterial($url, $cust, $div, $lmSN, $asmb, $tstr, $proc);





MES_CheckSystemUp

Previous Top Next



* * *



MES_CheckSystemUp



Usage:

$SystemUp = MES_CheckSystemUp($ServiceURL)



Description:



This function queries the Jabil MES system via the MES-TIS web service and returns a boolean indicating whether the system is up and responding or not.





Function arguments



Parameter

Variable Type

Description



$ServiceURL

String

The Web URL For the MES-TIS webservice. This is usually installed on the COM+ MES server for the plant.





Return parameters



Parameter

Variable Type

Description



$SystemUp

Boolean

Returns true if the MES-TIS system is responding, false otherwise.





MES_GetCurrentRouteStep

Previous Top Next



* * *



MES_GetCurrentRouteStep



Usage:

($StepType,$StepName,$Status) = MES_GetCurrentRouteStep($ServiceURL,$SerialNumber);



Description:



This function queries the MES service via the MES-TIS web service and returns the current route step for a given serial number.





Result:

Returns a string with the current route step name from MES for the given serial number.





Function arguments



Parameter

Variable Type

Description



$ServiceURL

String

The Web URL For the MES-TIS webservice. This is usually installed on the COM+ MES server for the plant.



$SerialNumber

String

The product serial number.





Return parameters



Parameter

Variable Type

Description



$StepType

String

The current route step type (such as "AOI","ICT","FVT",etc)



$StepName

String

The name of the step station



$Status

String

The status of the last Route Step (Pass/Fail)





Usage Example:

($StepType,$StepName,$Status) = MES_GetCurrentRouteStep("http://arslabcmp02/MES-TIS/TIS.asmx","JAB110203CJ");





MES_GetCurrentRouteStepBool

Previous Top Next



* * *



MES_GetCurrentRouteStepBool



Usage:

($StepType,$StepName,$Status,$Found) = MES_GetCurrentRouteStepBool($ServiceURL,$SerialNumber);



Description:



This function queries the MES service via the MES-TIS web service and returns the current route step for a given serial number. If not information is present, the $Found flag will be false and all other fields empty string.





Result:

Returns a string with the current route step name from MES for the given serial number, if present.





Function arguments



Parameter

Variable Type

Description



$ServiceURL

String

The Web URL For the MES-TIS webservice. This is usually installed on the COM+ MES server for the plant.



$SerialNumber

String

The product serial number.





Return parameters



Parameter

Variable Type

Description



$StepType

String

The current route step type (such as "AOI","ICT","FVT",etc)



$StepName

String

The name of the step station



$Status

String

The status of the last Route Step (Pass/Fail)



$Found

Boolean

Returns true if the route information was found; false otherwise.





Usage Example:

($StepType,$StepName,$Status,$Found) = MES_GetCurrentRouteStepBool("http://arslabcmp02/MES-TIS/TIS.asmx","JAB110203CJ");

if(!$Found)

{

UpdateStatus("No route step information found!");

}





MES_GetLastTestResult

Previous Top Next



* * *



MES_GetLastTestResult



Usage:

($startTime,$stopTime,$status,$machineName,$operatorName,$StepOrTestName) = MES_GetLastTestResult($ServiceURL,$CustomerName,$DivisionName,$SerialNumber,$StepName);



Description:





This function queries the MES-TIS web service and returns the details of the last test performed at a specific test step for a specific product serial number.





Note: This function was added after the first release of MES-TIS server, so you may need to update your MES-TIS installation in order to use this client side function.





Function arguments



Parameter

Variable Type

Description



$ServiceURL

String

The Web URL For the MES-TIS webservice. This is usually installed on the COM+ MES server for the plant.



$CustomerName

String

The name of the customer for the product



$DivisionName

String

The name of the division for the product



$SerialNumber

String

The product serial number.



$StepName

String

The MES Step or Test Name to check





Return parameters



Parameter

Variable Type

Description



$StartTime

String

The starting date/time of the test.



$StopTime

String

The stopping date/time of the test.



$Status

String

The pass/fail status of the test.



$MachineName

String

The machine name which performed the test.



$OperatorName

String

The name of the operator who performed the test.



$StepOrTestName

String

The name of the step or test.





Example Usage:





($startTime,$stopTime,$status,$machineName,$operatorName,$StepOrTestName) = MES_GetLastTestResult("http://teopsdevstg/mes-tis/tis.asmx","Cisco","","JAB104201F2","POST WAVE TOUCHUP");





MES_GetPanelSerializeResult

Previous Top Next



* * *



MES_GetPanelSerializeResult



Usage:

($numPanels, $panelArray) = MES_GetPanelSerializeResult($mesUrl, $customerName, $division, $serialNum);



Description:

This function will return the information for all sub-panels associated with one serial number. The data is returned in a two-dimensional array...



The two dimensional array is formatted as:

Array[x][0] = Panel ID

Array[x][1] = Panel

Array[x][2] = WIP ID

Array[x][3] = Serial Number Ori

Array[x][4] = Mapping

Array[x][5] = XOut

Array[x][6] = XOut Stats

Array[x][7] = Serial Number

(X = Test Record Number)





Remarks:

If the MES-TIS system does not respond to the query, the test step will fail the script.

If the serial number is not found, the test step will fail the script.

Function arguments



Parameter

Variable Type

Description



$mesUrl

String

The Web URL For the MES-TIS webservice. This is usually installed on the COM+ MES server for the plant.



$customerName

String

The name of the customer for this panel.



$division

String

The name of the division for this panel.



$serialNum

String

The serial number to return the data for.





Return parameters



Parameter

Variable Type

Description



$numPanels

Integer

The number of results that are returned.



$panelArray

Array

The results for the sub-panels found.





Example(s):

// Get data for one serial number.

$mesUrl = "129.169.10.123";

$custName = "OurCustomer";

$div = "TheDivision";

$sn = "12345678";

($numPanels, $panArray) = MES_GetPanelSerializeResult($mesUrl, $custName, $div, $sn);





MES_GetTestHistoryAsArray

Previous Top Next



* * *



MES_GetTestHistoryAsArray



Usage:

($RowCount,$Array) = MES_GetTestHistoryAsArray($ServiceURL,$CustomerName,$DivisionName,$SerialNumber);



Description:





This function queries the MES system via the MES-TIS web service and returns the complete test history of the product into a two dimensional array...





The two dimensional array is formatted as:

Array[x][0] = Start Time

Array[x][1] = Stop Time

Array[x][2] = Pass/Fail

Array[x][3] = Machine Name

Array[x][4] = Operator

Array[x][5] = Step or Test Name

Array[x][6] = Failure Label

Array[x][7] = Failure Message

(X = Test Record Number)





Note: This function was added after the first release of MES-TIS server, so you may need to update your MES-TIS installation in order to use this client side function.

Function arguments



Parameter

Variable Type

Description



$ServiceURL

String

The Web URL For the MES-TIS webservice. This is usually installed on the COM+ MES server for the plant.



$CustomerName

String

The name of the customer for the product



$DivisionName

String

The name of the division for the product



$SerialNumber

String

The product serial number.





Return parameters



Parameter

Variable Type

Description



$RowCount

String

The number of rows returned into the array



$Array

Array

A two dimensional array containing the test details for the product being queried.





Example Usage:





($RowCount,$Array) = MES_GetTestHistoryAsArray("http://teopsdevstg/mes-tis/tis.asmx","Cisco","","JAB104201F2");

$x = 0;

Label Loop:

$StartTime = ArrayGetValue($Array,$x,0);

$StopTime = ArrayGetValue($Array,$x,1);

$PassFail = ArrayGetValue($Array,$x,2);

$MachineName = ArrayGetValue($Array,$x,3);

$Operator = ArrayGetValue($Array,$x,4);

$StepOrTestName = ArrayGetValue($Array,$x,5);

$FailureLabel = ArrayGetValue($Array,$x,6);

$FailureMessage = ArrayGetValue($Array,$x,7);

UpdateStatus($StartTime);

UpdateStatus($StopTime);

UpdateStatus($PassFail);

UpdateStatus($MachineName);

UpdateStatus($Operator);

UpdateStatus($StepOrTestName);

UpdateStatus($FailureLabel);

UpdateStatus($FailureMessage);

if ($x < $RowCount-1)

{

$x = $x + 1;

goto Loop;

}





End;





MES_LookupCustomerAssembly

Previous Top Next



* * *



MES_LookupCustomerAssembly



Usage:

($Family,$Number,$Revision,$Version,$Description,$OnHold,$RMA,$ReferenceUnit) = MES_LookupCustomerAssembly($ServiceURL,$CustomerName,$DivisionName,$SerialNumber);



Description:



This function queries the MES service via the MES-TIS web service and returns the assembly information for the supplied customer, division, and serial number.





Result:

Returns a string with the assembly name from MES for the given product information.

Function arguments



Parameter

Variable Type

Description



$ServiceURL

String

The Web URL For the MES-TIS webservice. This is usually installed on the COM+ MES server for the plant.



$CustomerName

String

The name of the customer for the product



$DivisionName

String

The name of the division for the product



$SerialNumber

String

The product serial number.





Return parameters



Parameter

Variable Type

Description



$Family

String

The product's assembly string in MES.



$Number

String

The assembly number of the product



$Revision

String

The revision number of the product



$Version

String

The version number of the product



$Description

String

The description for the assembly



$OnHold

Boolean

Indicates that this board is on hold



$RMA

Boolean

Indicates that this board is an RMA



$ReferenceUnit

Boolean

Indicates that this board is a reference unit.





Example Usage:





($Family,$Number,$Revision,$Version,$Text,$OnHold,$RMA,$RefUnit) = MES_LookupCustomerAssembly("http://arslabcmp02/MES-TIS/TIS.asmx","Cisco","Cisco","JAB105006NF");





MESGOF_CheckOkToTest

Previous Top Next



* * *



MESGOF_CheckOKToTest



Usage:

$Response = MESGOF_CheckOKToTest($ServiceURL,$SFONumber,$ProcessStep)



Description:Queries the MES Global Order Fulfillment web services interface to check if a given shop floor order number is ready to be tested at a given process step.





Note: The MES GOF System has not yet been launched for production, so these functions should only be used for testing new test systems currently in development designed to interact with the new MES Global Order Fulfillment system.

The arguments and return values of these functions are subject to change until the GOF project team has reached a release candidate status.

Function arguments



Parameter

Variable Type

Description



$ServiceURL

String

The Web URL For the MES GOF TIS webservice. This is usually installed on the COM+ MES server for the plant.



$SFONumber

String

The Shop Floor Order Number



$ProcessStep

String

The MES Process Step Name to query





Return parameters



Parameter

Variable Type

Description



$Response

String

XML Response String





MESGOF_GenerateUPDData

Previous Top Next



* * *



MESGOF_GenerateUPDData



Usage:

$Response = MESGOF_GenerateUPDData($ServiceURL,$CustomerName,$DivisionName,$MaterialName,$SerialNumber,$UPDData,$Quantity,$UserName);



Description:This function instructs the MES Global Order Fulfillment system to generate UPD (Unique Product Data) such as Mac Addresses, WWN Addresses, etc for a given product. The UPD Data Generation algorithm must be configured in MES prior to executing this function.





Note: The MES GOF System has not yet been launched for production, so these functions should only be used for testing new test systems currently in development designed to interact with the new MES Global Order Fulfillment system.

The arguments and return values of these functions are subject to change until the GOF project team has reached a release candidate status.

Function arguments



Parameter

Variable Type

Description



$ServiceURL

String

The Web URL For the MES GOF TIS webservice. This is usually installed on the COM+ MES server for the plant.



$CustomerName

String

The Customer Name



$DivisionName

String

The Customer's Division Name



$MaterialName

String

The Material Name for UPD Data Generation.



$SerialNumber

String

The serial number of the product for UPD data generation.



$UPDData

String

A string name indicating the type of UPD Data to generate for the product.



$Quantity

Integer

An integer indicating the number of UPD Data items to generate. The sequence of the generated data is dependent on the algorithm configured for UPD data generation in MES.



$UserName

String

The name of the user to permanently associate with the UPD data generation.





Return parameters



Parameter

Variable Type

Description



$Response

String

XML Response String





MESGOF_GetAsBuiltData

Previous Top Next



* * *



MESGOF_GetAsBuiltData



Usage:

$Response = MESGOF_GetAsBuiltData($ServiceURL,$SFONumber);



Description:This function queries the MES Global Order Fulfillment system to get the 'As Built' data for a particular shop floor order number.





Note: The MES GOF System has not yet been launched for production, so these functions should only be used for testing new test systems currently in development designed to interact with the new MES Global Order Fulfillment system.

The arguments and return values of these functions are subject to change until the GOF project team has reached a release candidate status.

Function arguments



Parameter

Variable Type

Description



$ServiceURL

String

The Web URL For the MES GOF TIS webservice. This is usually installed on the COM+ MES server for the plant.



$SFONumber

String

The SFO Number





Return parameters



Parameter

Variable Type

Description



$Response

String

XML Response String





MESGOF_GetCurrentRouteStep

Previous Top Next



* * *



MESGOF_GetCurrentRouteStep



Usage:

$Response = MESGOF_GetCurrentRouteStep($ServiceURL,$SFONumber);



Description:This function queries the MES Global Order Fulfillment system to get the current route step for a particular shop floor order number.





Note: The MES GOF System has not yet been launched for production, so these functions should only be used for testing new test systems currently in development designed to interact with the new MES Global Order Fulfillment system.

The arguments and return values of these functions are subject to change until the GOF project team has reached a release candidate status.

Function arguments



Parameter

Variable Type

Description



$ServiceURL

String

The Web URL For the MES GOF TIS webservice. This is usually installed on the COM+ MES server for the plant.



$SFONumber

String

The SFO Number





Return parameters



Parameter

Variable Type

Description



$Response

String

XML Response String





MESGOF_GetLastTestResult

Previous Top Next



* * *



MESGOF_GetLastTestResult



Usage:

$Response = MESGOF_GetLastTestResult($ServiceURL,$SFONumber,$ProcessStep);



Description:This function queries the MES Global Order Fulfillment system to get the last test result for a particular shop floor order number at a given test process step.





If a particular SFO was tested multiple times at a given process step, this function will return the last test result for the given process step.





Note: The MES GOF System has not yet been launched for production, so these functions should only be used for testing new test systems currently in development designed to interact with the new MES Global Order Fulfillment system.

The arguments and return values of these functions are subject to change until the GOF project team has reached a release candidate status.

Function arguments



Parameter

Variable Type

Description



$ServiceURL

String

The Web URL For the MES GOF TIS webservice. This is usually installed on the COM+ MES server for the plant.



$SFONumber

String

The SFO Number



$ProcessStep

String

The name of the MES Process Step to query for the last test result.





Return parameters



Parameter

Variable Type

Description



$Response

String

XML Response String





MESGOF_GetMESTestDataFormats

Previous Top Next



* * *



MESGOF_GetMESTestDataFormats



Usage:

$Response = MESGOF_GetMESTestDataFormats($ServiceURL);



Description:This function returns a list of the MES Test Data Formats currently supported by the MES GOF Web Services interface.





Note: The MES GOF System has not yet been launched for production, so these functions should only be used for testing new test systems currently in development designed to interact with the new MES Global Order Fulfillment system.

The arguments and return values of these functions are subject to change until the GOF project team has reached a release candidate status.

Function arguments



Parameter

Variable Type

Description



$ServiceURL

String

The Web URL For the MES GOF TIS webservice. This is usually installed on the COM+ MES server for the plant.





Return parameters



Parameter

Variable Type

Description



$Response

String

XML Response String containing a list of the MES Test Data Formats





MESGOF_GetSFOHeader

Previous Top Next



* * *



MESGOF_GetSFOHeader



Usage:

$Response = MESGOF_GetSFOHeader($ServiceURL,$CustomerName,$DivisionName,$TopLevelSerial);



Description:This function queries the MES Global Order Fulfillment system to retrieve the Shop Floor Order Header for a given top level serial number for a customer and division.





Note: The MES GOF System has not yet been launched for production, so these functions should only be used for testing new test systems currently in development designed to interact with the new MES Global Order Fulfillment system.

The arguments and return values of these functions are subject to change until the GOF project team has reached a release candidate status.

Function arguments



Parameter

Variable Type

Description



$ServiceURL

String

The Web URL For the MES GOF TIS webservice. This is usually installed on the COM+ MES server for the plant.



$CustomerName

String

The name of the customer



$Division

String

The name of the customer's division



$TopLevelSerial

String

The top level serial number for a given shop floor order number.





Return parameters



Parameter

Variable Type

Description



$Response

String

XML Response String





MESGOF_GetSerialNumbersByUPD

Previous Top Next



* * *



MESGOF_GetSerialNumbersByUPD



Usage:

$Response = MESGOF_GetSerialNumbersByUPD($ServiceURL,$CustomerName,$DivisionName,$UPDName,$UPDValue);



Description:This function queries the MES Global Order Fulfillment system and retrieves a list of Serial Numbers that are associated with a given unique product data name and value for the specified customer and division.





Note: The MES GOF System has not yet been launched for production, so these functions should only be used for testing new test systems currently in development designed to interact with the new MES Global Order Fulfillment system.

The arguments and return values of these functions are subject to change until the GOF project team has reached a release candidate status.

Function arguments



Parameter

Variable Type

Description



$ServiceURL

String

The Web URL For the MES GOF TIS webservice. This is usually installed on the COM+ MES server for the plant.



$CustomerName

String

The customer name



$DivisionName

String

The name of the particular division within the customer.



$UPDName

String

The name of the UPD identifier or tag such as 'MAC ADDRESS'.



$UPDValue

String

The value for the given UPD identifier that you wish to locate the corresponding serial number(s) for in the MES system.





Return parameters



Parameter

Variable Type

Description



$Response

String

XML Response String





MESGOF_GetTestHistory

Previous Top Next



* * *



MESGOF_GetTestHistory



Usage:

$Response = MESGOF_GetTestHistory($ServiceURL,$SFONumber,$ProcessStep);

Description:This function queries the MES Global Order Fulfillment system to get the entire test history of a particular SFO number at a specific process step.





Note: The MES GOF System has not yet been launched for production, so these functions should only be used for testing new test systems currently in development designed to interact with the new MES Global Order Fulfillment system.

The arguments and return values of these functions are subject to change until the GOF project team has reached a release candidate status.

Function arguments



Parameter

Variable Type

Description



$ServiceURL

String

The Web URL For the MES GOF TIS webservice. This is usually installed on the COM+ MES server for the plant.



$SFONumber

String

The SFO Number



$ProcessStep

String

The name of the MES Process Step to query for the test results history.





Return parameters



Parameter

Variable Type

Description



$Response

String

XML Response String





MESGOF_GetUPDData

Previous Top Next



* * *



MESGOF_GetUPDData



Usage:

$Response = MESGOF_GetUPDData($ServiceURL,$SFONumber,$Material,$SerialNumber);



Description:This function queries the MES Global Order Fulfillment system to get the assigned Unique Product Data for a particular material item and serial number in a given shop floor order number.





Note: The MES GOF System has not yet been launched for production, so these functions should only be used for testing new test systems currently in development designed to interact with the new MES Global Order Fulfillment system.

The arguments and return values of these functions are subject to change until the GOF project team has reached a release candidate status.

Function arguments



Parameter

Variable Type

Description



$ServiceURL

String

The Web URL For the MES GOF TIS webservice. This is usually installed on the COM+ MES server for the plant.



$SFONumber

String

The SFO Number



$Material

String

The particular material for a given serial number to return the assigned UPD Data.



$SerialNumber

String

The serial number in the given shop floor order to which a particular material UPD has been assigned.





Return parameters



Parameter

Variable Type

Description



$Response

String

XML Response String





MESGOF_GetVersion

Previous Top Next



* * *



MESGOF_GetVersion



Usage:

$VersionString = MESGOF_GetVersion($ServiceURL);



Description:This function returns the particular version string of the current MES installation.





Note: The MES GOF System has not yet been launched for production, so these functions should only be used for testing new test systems currently in development designed to interact with the new MES Global Order Fulfillment system.

The arguments and return values of these functions are subject to change until the GOF project team has reached a release candidate status.

Function arguments



Parameter

Variable Type

Description



$ServiceURL

String

The Web URL For the MES GOF TIS webservice. This is usually installed on the COM+ MES server for the plant.





Return parameters



Parameter

Variable Type

Description



$VersionString

String

The MES Version String for the current installation





MESGOF_SetUPDData

Previous Top Next



* * *



MESGOF_SetUPDData



Usage:

MESGOF_SetUPDData($ServiceURL,$CustomerName,$DivisionName,$MaterialName,$SerialNumber,$UPDName,$UPDValues,$UserName);



Description:This function instructs the MES Global Order Fulfillment system to assigned Unique Product Data values for a particular material item and serial number. The UPD Name parameter is essentially a dictionary key naming the UPD values for a given material. The $UPDValues parameter is an array of strings which will be stored into the MES database for a given UPD data key. The $UserName argument permanently associates a given user with having generated the Unique Product Data.





Note: The MES GOF System has not yet been launched for production, so these functions should only be used for testing new test systems currently in development designed to interact with the new MES Global Order Fulfillment system.

The arguments and return values of these functions are subject to change until the GOF project team has reached a release candidate status.

Function arguments



Parameter

Variable Type

Description



$ServiceURL

String

The Web URL For the MES GOF TIS webservice. This is usually installed on the COM+ MES server for the plant.



$CustomerName

String

The Customer Name



$MaterialName

String

The particular material for a given serial number to assign the UPD Data.



$SerialNumber

String

The serial number in the given shop floor order to which a particular material UPD will be assigned.



$UPDName

String

The key for the UPD dictionary for the given serial number.



$UPDValues

Array

A 1-Dimensional array of strings to assign to the serial number's UPD data key. If a multidimensional array is supplied to the function, a failure will be generated.



$UserName

String

The name of the user who assigned the UPD Data to a given serial number/product.





Return parameters



Parameter

Variable Type

Description



None





BarrierAddParticipant

Previous Top Next



* * *



BarrierAddParticipant



Usage:

BarrierAddParticipant($barrierHandle);





Description:

Adds the cell this function is called from to the barrier's participant list, raising the number of signals needed for waiting cells to continue.





A test cell must be part of the barrier’s participant list for it to wait on a BarrierSignalAndWait() call.



Function Arguments



Parameter

Variable Type

Description



$barrierHandle

Object

Handle to barrier object previously created with the BarrierCreate() function.





Return Parameters



Parameter

Variably Type

Description



None





Example:

BarrierAddParticipant($barrier1); //adds this cell to 1st barrier’s participant list





BarrierCancelAllWaits

Previous Top Next



* * *



BarrierCancelAllWaits



Usage:

BarrierCancelAllWaits($barrierHandle);





Description:

Cancels all blocking at the given barrier, allowing any cells waiting to continue. Cells reaching the barrier after this call will continue without being blocked.





This function has a similar effect to a call to BarrierDestroy(), but does not fail any other test cells that attempt to interact with the barrier.





Note:

The cancel command is permanent. The barrier object must be re-created to enable blocking again.





Function Arguments



Parameter

Variable Type

Description



$barrierHandle

Object

Handle to barrier object previously created with the BarrierCreate() function.





Return Parameters



Parameter

Variably Type

Description



None





Example:

BarrierRemoveParticipant($barrier1); //removes this cell from the 1st barrier’s participant list





BarrierCreate

Previous Top Next



* * *



BarrierCreate



Usage:

$barrierHandle = BarrierCreate($barrierName);





Description:

Creates a barrier object, used to synchronize multiple cells. Barrier description must be unique among active barriers.





Cells are added to the barrier's participant list with the BarrierAddParticipant() function. When a cell reaches the barrier (by calling the BarrierSignalAndWait() function), it will pause until ALL cells in the participant list reach the barrier and signal as well.



Function Arguments



Parameter

Variable Type

Description



$barrierName

String

Unique name for the barrier.





Return Parameters



Parameter

Variably Type

Description



$barrierHandle

Object

Variable holding reference to newly created barrier object.





Example:

$barrier1 = BarrierCreate("1st Test Barrier"); //create barrier named “1st Test Barrier”

$barrier2 = BarrierCreate("2nd Test Barrier"); //create barrier named “2nd Test Barrier”





BarrierDestroy

Previous Top Next



* * *



BarrierDestroy



Usage:

BarrierDestroy($barrierHandle);





Description:

Manually disposes of a barrier object. Calls to a disposed barrier will produce an error.





This function is generally unnecessary as the GC will dispose of unused and out-of-scope barriers automatically.



Function Arguments



Parameter

Variable Type

Description



$barrierHandle

Object

Handle to barrier object previously created with the BarrierCreate() function.





Return Parameters



Parameter

Variably Type

Description



None





Example:

BarrierDestroy($barrier1); //dispose of barrier object





BarrierGetDescription

Previous Top Next



* * *



BarrierGetDescription



Usage:

$barrierName = BarrierGetDescription($barrierHandle);





Description:

Retrieves the name/description of the barrier. This will be same string as the $barrierName argument of the BarrierCreate() function that produced the barrier object.



Function Arguments



Parameter

Variable Type

Description



$barrierHandle

Object

Handle to barrier object previously created with the BarrierCreate() function.





Return Parameters



Parameter

Variably Type

Description



$barrierName

String

Name/description of barrier object.





Example:

$barrier1 = BarrierCreate("1st Test Barrier"); //create barrier named “1st Test Barrier”

$barrierName = BarrierGetDescription($barrier1);

UpdateStatus($barrierName); //prints out “1st Test Barrier”





BarrierGetParticipantCount

Previous Top Next



* * *



BarrierGetParticipantCount



Usage:

$participantCount = BarrierGetParticipantCount($barrierHandle);





Description:

Gets the current number of cells in the barrier's participant list.



Function Arguments



Parameter

Variable Type

Description



$barrierHandle

Object

Handle to barrier object previously created with the BarrierCreate() function.





Return Parameters



Parameter

Variably Type

Description



$participantCount

Integer

# of cells in barrier's participant list.





Example:

$barrier1 = BarrierCreate("1st Test Barrier"); //create barrier named “1st Test Barrier”

$participantCount = BarrierGetParticipantCount($barrier1);

UpdateStatus($participantCount); //prints out “0” - if this is only cell adding to list!

BarrierAddParticipant($barrier1); //adds this cell to 1st barrier’s participant list

$participantCount = BarrierGetParticipantCount($barrier1);

UpdateStatus($participantCount); //prints out “1” - if this is only cell adding to list!





BarrierGetPhaseNumber

Previous Top Next



* * *



BarrierGetPhaseNumber



Usage:

$phaseNumber = BarrierGetPhaseNumber($barrierHandle);





Description:

Gets current phase of the barrier.





The phase is a type of loop counter that records the number of times all cells in the barrier’s participant list have passed through the barrier, due to timeouts or signaling.





This value can be used to track how many times the expected synchronized behavior has been executed by all relevant cells. E.g., it can be checked by a cell that times out to see if the other cells are still waiting for it. If the phase number has not increased, the cell knows that the other cells might be “stuck” at the barrier waiting for it to signal or remove itself from the participant list.



Function Arguments



Parameter

Variable Type

Description



$barrierHandle

Object

Handle to barrier object previously created with the BarrierCreate() function.





Return Parameters



Parameter

Variably Type

Description



$phaseNumber

Integer

Current phase number.





Example:

$phaseNumber1 = BarrierGetPhaseNumber($barrier1);

$signalReceived = BarrierSignalAndWait($barrier1, 10000, false); //timeout after 10 seconds

$phaseNumber2 = BarrierGetPhaseNumber($barrier1);

if($phaseNumber1 == $phaseNumber2)

{

UpdateStatus(“Timeout occurred!”);

}





BarrierRemoveParticipant

Previous Top Next



* * *



BarrierRemoveParticipant



Usage:

BarrierRemoveParticipant($barrierHandle);





Description:

Removes cell from barrier's participant list, lowering the number of signals needed for waiting cells to continue.





Test cells that have been removed from the barrier’s participant list will not wait on a BarrierSignalAndWait() call. In addition, any test cells that are paused because of a barrier that was waiting on this cell will continue.



Function Arguments



Parameter

Variable Type

Description



$barrierHandle

Object

Handle to barrier object previously created with the BarrierCreate() function.





Return Parameters



Parameter

Variably Type

Description



None





Example:

BarrierRemoveParticipant($barrier1); //removes this cell from the 1st barrier’s participant list





BarrierSignalAndWait

Previous Top Next



* * *



BarrierSignalAndWait



Usage:

$signalReceived = BarrierSignalAndWait($barrierHandle [, $timeout] [, $autoRemove]);





Description:

Signals that the cell has reached the barrier. If the cell is in the barrier participant list, it will wait until every other cell in the barrier's participant list signals an arrival as well, or the timeout time elapses; whichever occurs first.





If the $autoRemove parameter is true, cells will remove themselves from the barrier participant list after they pass through the barrier.





Note:

Cells that time out do NOT automatically remove themselves from the list or decrement the participant wait count (unless $autoRemove is true). If you select a non-infinite timeout value, be sure to check the state of the $signalReceived return parameter to check for a timeout condition and handle it appropriately (e.g., removing the timing out cell from the participant list, or retrying the BarrierSignalAndWait() call). Failure to do so can lead to other cells deadlocking at the barrier!



Function Arguments



Parameter

Variable Type

Description



$barrierHandle

Object

Handle to barrier object previously created with the BarrierCreate() function.



$timeout

Integer

[optional] Maximum time to wait at a closed barrier, in milliseconds. A timeout value of 0 or less indicates an infinite timeout.



$autoRemove

Boolean

[optional, if $timeout present] Whether or not to automatically remove a cell from the barrier's participant list after it passes through the barrier.





Return Parameters



Parameter

Variably Type

Description



$signalReceived

Boolean

True if all other cells in participant list reached the barrier (cells removed from the participant list with BarrierRemovedParticipant() do not count).





False in all other cases which cause the cell to continue past the barrier (such as when the timeout expires).





Example:

$signalReceived = BarrierSignalAndWait($barrier1, 0, false); //wait indefinitely for other cells in list





EnterCS

Previous Top Next



* * *



EnterCS

Usage:

EnterCS($criticalSectionName);



Description:

This is a special instruction to the script interpreter which informs it that this particular script is entering a section of code that has been dubbed a critical section. This script function is used when multiple cells are running a common test script and need certain points of mutual exclusion such as sharing test equipment, etc. The EnterCS function will have the following effect on script execution, depending on the condition of other test cells which may or may not currently be executing the code in the critical section. Only one cell is allowed to execute a critical section at a time.

In the event that no other cells are currently in the critical section of code, this cell enters the critical section and locks out all other cells from proceeding until the current script execution encounters an ExitCS() statement closing the critical section, or the script terminates with either a pass/fail/abort status.

In the event that another cell is currently in the critical section of code, this cell will block and wait for the critical section to become available. If several cells are waiting to enter the critical section of code, they will all queue in the order that they attempted to access the critical section. A linked list is maintained which serves as a FIFO for the cells waiting to enter the critical section.

The parameter $critcalSectionName is an arbitrary value chosen by the script author to differentiate among different critical sections in the same script file. If more than one critical section is used in a script file, care must be taken by the script author to ensure that a deadlock condition can't occur. In the event of a deadlock condition, the script will enter an endless loop and never terminate.

Each EnterCS() command must have a corresponding ExitCS() command for proper use of critical sections of code.

Example:

EnterCS("My Critical Section");

UpdateStatus("Only One Cell At a Time May Enter this Section");

Sleep(5);

ExitCS("My Critical Section");...



Function Arguments



Parameter

Variable Type

Description



$criticalSectionName

String

The arbitrary name given to a critical section of code.



Return Parameters



Parameter

Variable Type

Description



None





ExitCS

Previous Top Next



* * *



ExitCS

Usage:

ExitCS($criticalSectionName);

Description:

This is a special instruction to the script interpreter which informs it that this particular script is exiting a section of code that has been dubbed a critical section. This script function is used when multiple cells are running a common test script and need certain points of mutual exclusion such as sharing test equipment, etc. Only one cell is allowed to execute a critical section at a time.

In the event that no other cells are currently waiting for the criticalSection, the ExitCS statement merely removes the current cell from the queue.

In the event that one or more cells are currently waiting for the critical Section, the ExitCS statement removes the current cell from the queue, and sends a notification to all the waiting cells that they are allowed to proceed. The cell that first executed the EnterCS() statement will proceed first through the critical section, and all other cells will follow in the order they were queued.

The parameter $critcalSectionName is an arbitrary value chosen by the script author to differentiate among different critical sections in the same script file. If more than one critical section is used in a script file, care must be taken by the script author to ensure that a deadlock condition can't occur. In the event of a deadlock condition, the script will enter an endless loop and never terminate.

Each ExitCS() command must have a corresponding EnterCS() command for proper use of critical sections of code.

Example:

EnterCS("My Critical Section");

UpdateStatus("Only One Cell At a Time May Enter this Section");

Sleep(5);

ExitCS("My Critical Section");...



Function Arguments



Parameter

Variable Type

Description



$criticalSectionName

String

The arbitrary name given to a critical section of code.



Return Parameters



Parameter

Variable Type

Description



None





QuickEnterCS

Previous Top Next



* * *



QuickEnterCS



Usage:

QuickEnterCS($mutexName [, $timeout]);





Description:

Mutexes (from Mutual Exclusion) are used to implement efficient critical sections, which are blocks of code that can be executed by only one cell at a time.





This function attempts to give control of the named system mutex to the calling cell, which allows the cell past this function and into the critical section it protects.





Only one cell at a time can enter the critical section; other cells are blocked from entering until either the owning cell exits the critical section with a call to the QuickExitCS() function (releasing ownership of the mutex), the owning cell ends execution (abandoning the mutex), or the waiting cell(s) timeout expires.





Care must be taken when using multiple critical sections to avoid deadlocks! A deadlocked cell will be blocked indefinitely, until the Jabil Test executive is closed.





Note:

FIFO execution is not guaranteed with these functions! If multiple cells are waiting to enter the critical section, there is no guarantee the first cell blocked will be the first cell to resume. If FIFO operation is required, use the slower EnterCS()/ExitCS() functions.



Function Arguments



Parameter

Variable Type

Description



$mutexName

String

Name of system mutex used in the MutexCreate() function. Can be any arbitrary string.



$timeout

Integer

[optional] Maximum time to wait for an owned mutex to be released before skipping ownership request and entering the critical section.





A value of 0 or less indicates an infinite timeout period - the cell will block indefinitely until it gains ownership of the mutex.





Return Parameters



Parameter

Variably Type

Description



None





Example:

QuickEnterCS(“PS Critical Section”, 0); //Wait indefinitely for chance to enter critical section

//Critical Section code here





QuickExitCS

Previous Top Next



* * *



QuickExitCS



Usage:

QuickExitCS($mutexName);





Description:

Releases ownership of the named system mutex, allowing other cells to enter the critical section protected by the QuickEnterCS() call with the same mutex name.





Note:

If a test cell fails while inside a critical section (preventing this function from being called), the mutex will be abandoned by the cell when execution stops. This allows another test cell to claim the mutex and enter the critical section, preventing a potential deadlock.



Function Arguments



Parameter

Variable Type

Description



$mutexName

String

Name of system mutex used in the QuickEnterCS() function.





Return Parameters



Parameter

Variably Type

Description



None





Example:

//Critical Section code here

QuickExitCS(“PS Critical Section”); //releases ownership of mutex, allowing other cells into the CS code above





WaitEventCreate

Previous Top Next



* * *



WaitEventCreate



Usage:

$waitHandle = WaitEventCreate($eventName);





Description:

Creates an object based on the EventWaitHandle class, used to synchronize multiple cells. The event description must be unique among active wait events.





Wait events act like gates, allowing cell execution to continue past them when the wait signal is set (turned on) with WaitEventRelease() and blocking cells when the wait signal is reset (turned off) with WaitEventHold(). Cells attempt to wait at these "gates" using calls to WaitOnEvent().



Function Arguments



Parameter

Variable Type

Description



$eventName

String

Unique name for the event.





Return Parameters



Parameter

Variably Type

Description



$waitHandle

Object

Variable holding reference to newly created wait event object.





Example:

$waitEvent1 = WaitEventCreate("1st Wait Event"); //create a wait event named “1st Wait Event”

$waitEvent2 = WaitEventCreate("2nd Wait Event"); //create a wait event named “2nd Wait Event”





WaitEventDestroy

Previous Top Next



* * *



WaitEventDestroy



Usage:

WaitEventDestroy($waitHandle);



Description:

Manually disposes of wait event. Calls to a disposed event will produce an error. This function is generally unnecessary as the GC will automatically dispose of unused events.





Remarks:

Disposing of a wait event will release all other test cells that are waiting for this event.

The $waitHandle must have been previously created using the WaitEventCreate function.



Function arguments



Parameter

Variable Type

Description



$waitHandle

Object

The previously created Wait Event.





Return parameters



Parameter

Variable Type

Description



None





Example:





// Create a wait event, wait for the event for 2 seconds, then destroy the event.

$eventName = "FirstWaitEvent";

$timeout = 2000;



$waitHandle = WaitEventCreate($eventName);



$signalReceived = WaitOnEvent($waitHandle, $timeout);



if ($signalReceived)

{

UpdateStatus("The event signal was received.");

}



WaitEventDestroy($waitHandle);





WaitEventHold

Previous Top Next



* * *



WaitEventHold



Usage:

WaitEventHold($waitHandle);





Description:

Clears (turns off) the wait event object’s signal. All cells calling WaitOnEvent() on this object will block until released with a call to WaitEventRelease().



Function Arguments



Parameter

Variable Type

Description



$waitHandle

Object

Wait event object previously created with the WaitEventCreate() function.





Return Parameters



Parameter

Variably Type

Description



None





Example:

WaitEventHold($waitEvent1); //block all cells calling WaitOnEvent($waitEvent1)





WaitEventRelease

Previous Top Next



* * *



WaitEventRelease



Usage:

WaitEventRelease($waitHandle);





Description:

Sets (turns on) WaitObject signal. Cells that call WaitOnEvent() on this object (or any cells that are currently blocked by a previous call) will continue.



Function Arguments



Parameter

Variable Type

Description



$waitHandle

Object

Wait event object previously created with the WaitEventCreate() function.





Return Parameters



Parameter

Variably Type

Description



None





Example:

WaitEventRelease($waitEvent1); //allow all cells calling WaitOnEvent($waitEvent1) to continue





WaitOnEvent

Previous Top Next



* * *



WaitOnEvent



Usage:

$signalRecieved = WaitOnEvent ($waitHandle [, $timeout]);





Description:

Blocks cells calling this function until the wait event signal for the object is set with a call to WaitEventRelease(), or the timeout elapses.



Function Arguments



Parameter

Variable Type

Description



$waitHandle

Object

Wait event object previously created with the WaitEventCreate() function.



$timeout

Integer

[optional] Timeout for each cell to wait for the event signal to be set, in milliseconds.





Values of 0 or less indicate an infinite timeout period.





Return Parameters



Parameter

Variably Type

Description



$signalRecieved

Boolean

True if the event signal was received (a call to WaitEventRelease() occurred.





False if the timeout expired or an error occurred.





Example:

$signalReceived = WaitOnEvent($waitEvent1, 10000); //block for 10s if the wait event signal is not set





PlaySoundFile

Previous Top Next



* * *



PlaySoundFile

Usage:

$SoundHandle = PlaySoundFile($SoundFilePath);

Description:

This function supports the playback of WAV, MP3 or MIDI files from the test executive. It uses the default WaveOut device specified in the Windows configuration settings. In the event that the file is not found, or is an unsupported sound file format, a failure is returned to the test executive interpreter. Otherwise a pass is returned. The function returns a handle to the current sound file playing so that it can be later stopped using the StopSoundFile function.

Function Arguments



Parameter

Variable Type

Description



$SoundFilePath

String

The filename and path of the sound file to play (e.g. c:\\testfrequency.wav)





Return Parameters



Parameter

Variable Type

Description



$SoundHandle

Object

Returns a handle to the Sound File currently being played





RecordSoundFile

Previous Top Next



* * *



RecordSoundFile

Usage:

RecordSoundFile($SoundFilePath, $CaptureDeviceID, $NumberOfChannels, $BitsPerSample, $SamplesPerSecond, $RecordDuration);

Description:

This function is used to capture a WAV file from the a Wave Capture device such as Microphone or Line-In input on a sound card. In the event of an error, a failing result is returned to the test executive interpreter. In the event that the recording is successful, a pass result is returned to the test executive interpreter.

Example:

RecordSoundFile("c:\\test.wav", 0, 1, 8, 22000, 5);

The example above will record a mono 8-bit sampled input at 22,0000 samples per second for 5 seconds. The results will be stored in a WAV file at c:\test.wav.

Note: This command requires the Microsoft DirectX SDK to be installed on the computer running Jabil Test. If the Operating System is Windows 7 x64 edition, then Jabil Test will need to be run as an administrator to use this command due to the heightened privileges required for low-level access to sound hardware in the newer versions of Microsoft Windows.

This library was last tested with the July 2010 release of the Microsoft DirectX SDK.

Function Arguments



Parameter

Variable Type

Description



$SoundFilePath

String

The filename and path of the sound file to play (e.g. c:\\testfrequency.wav)



$CaptureDeviceID

Integer

The ID of the capture device to be used. The default windows Wave-In device is assigned the capture ID of 0, so this parameter will usually be 0.



$NumberOfChannels

Integer

The number of channels to record in the Wave File.

1 = "Mono"

2 = "Stereo



$BitsPerSample

Integer

The number of bits per sample. Supported values are 8, and 16.



$SamplesPerSecond

Integer

The number of samples per second.



$RecordDuration

Integer

The number of seconds to record.





Return Parameters



Parameter

Variable Type

Description



$SoundHandle

Object

Returns a handle to the Sound File currently being played





RecordSourceSelect

Previous Top Next



* * *



RecordSourceSelect

Usage:

Multimedia.RecordSourceSelect($Device, $Line);

Description:

This function is used to select the which of the available recording line is to be used for Recording.

Function Arguments



Parameter

Variable Type

Description



$Device

String

This is the name of the device which is default. I left blank function will fail and error message will list available device



$Line

String

This is the name of the device which is default. I left blank function will fail and error message will list available device





Return Parameters



Parameter

Variable Type

Description



None





StopSoundFile

Previous Top Next



* * *



StopSoundFile

Usage:

StopSoundFile($SoundHandle);

Description:

This function stops the playback of a particular sound file which has been started with the PlaySoundFile function. In the event that the passed in object can't be casted to an IMediaControl interface, an error is returned to the test executive interpreter.

Function Arguments



Parameter

Variable Type

Description



$SoundHandle

Object

A handle to the sound file for which to terminate playback.





Return Parameters



Parameter

Variable Type

Description



None





AnalyzeWaveFileAmplitude

Previous Top Next



* * *



AnalyzeWaveFileAmplitude

Usage:

($Amplitude,$HighValue,$LowValue) = AnalyzeWaveFileAmplitude($SoundFilePath);

Description:

This function analyzes a recorded WAV file and returns it's amplitude as well as it's peak data values. The WAV file must be a MONO 8-BIT RIFF encoded wave form. All sample rates are supported.

Note: This function requires the Lab View 6.1 runtime to be installed since it uses libraries out of the LabView signal analysis library.

This function relies on the LabVIEW 6.1 runtime that can not be loaded on Windows 7+. This function can not be used on Windows 7+ computers.

Function Arguments



Parameter

Variable Type

Description



$soundFilePath

String

The file path and file name to the WAV file to be analyzed.





Return Parameters



Parameter

Variable Type

Description



$Amplitude

float

The primary frequency component of the WAV file measured in Hertz



$HighValue

float

The highest peak value found in the wave file data



$LowValue

float

The lowest peak value found in the wave file data





AnalyzeWaveFileAmplitudeAtFrequency

Previous Top Next



* * *



NOTE: This function has been deprecated, and should no longer be used.



Usage:

$value = AnalyzeWaveFileAtFrequency($SoundFilePath,$Frequency);

Description:

This function performs a fast fourier-transform on the data contained in the WAV file specified in the $SoundFilePath variable. The WAV file must be a MONO 8-BIT RIFF encoded wave form. All sample rates are supported. The value returned should only be considered a relative value that is suitable for comparisons with measurements taken on the same computer and sound card.

Function Arguments



Parameter

Variable Type

Description



$soundFilePath

String

The file path and file name to the WAV file to be analyzed.



$Frequency

Float

The desired frequency at which to compute the relative amplitude.





Return Parameters



Parameter

Variable Type

Description



$value

float

The amplitude (relative value) of the file at the supplied frequency.





AnalyzeWaveFileFrequency

Previous Top Next



* * *



NOTE: This function has been deprecated, and should no longer be used.

Please use the Array Waveform Function: ArrayAnalyzeFrequency.



AnalyzeWaveFileFrequency

Usage:

$value = AnalyzeWaveFileFrequency($SoundFilePath);

Description:

This function performs a fast fourier-transform on the data contained in the WAV file specified in the $SoundFilePath variable. The WAV file must be a MONO 8-BIT RIFF encoded wave form. All sample rates are supported. The primary frequency component contained in the WAV file data is returned to the test executive. The measurement returned is in Hertz.

Function Arguments



Parameter

Variable Type

Description



$soundFilePath

String

The file path and file name to the WAV file to be analyzed.





Return Parameters



Parameter

Variable Type

Description



$value

float

The primary frequency component of the WAV file measured in Hertz





Audio_ReadWaveFile

Previous Top Next



* * *



Audio_ReadWaveFile



Usage:

($sampleRate, $Data, $Length, $numChannels) = Audio_ReadWaveFile($fileName);



Description:

This function will read a WAVE file and return the data in a 2D array. This function will work with 8, 16, 24 and 32 bits/sample files with any number of channels. Each channel will be returned as one row in the output array.The data is returned in an array of integers.



Remarks:

· The data is returned in an array of integers.

· If the file has only one channel, the data will be returned in the left channel (row index 0) and the right channel (row index 1) will be filled with zeroes.

Function arguments



Parameter

Variable Type

Description



$fileName

String

The path and filename of the .WAV file to load.





Return parameters



Parameter

Variable Type

Description



$sampleRate

Integer

The sample rate for the audio data (from the header data in the WAV file).



$Data

Array

The audio data in a 2D array with one row for each channel.



$Length

Integer

The number of samples for each channel.



$numChannels

Integer

The number of audio channels in the WAV file.





Example(s):

// Read an audio file.

$fileName = "C:\\Samples\\AudioFile1.wav";

($sampleRate, $Data, $Length, $numChan) = Audio_ReadWaveFile($fileName);





ConvertWaveFileToArray

Previous Top Next



* * *



NOTE: This function has been deprecated, and should no longer be used.

The function Audio_ReadWaveFile returns the data as an array that can be analyzed.



ConvertWaveFileToArray





Usage:

($SampleRate,$Data,$Length) = ConvertWaveFileToArray("c:\\1KHi.wav");





Description:

This function converts the wave form data into an array of floats. The function returns the array, the length of the array, as well as the sample rate of the wave file.

This function only works with 8 bits/sample data files.

Function Arguments



Parameter

Variable Type

Description



$soundFilePath

String

The file path and file name to the WAV file to be analyzed.





Return Parameters



Parameter

Variable Type

Description



$SampleRate

Integer

The number of samples per second that the input wave file was recorded at.



$Data

Array

An array of floats containing the wave file data



$Length

Integer

The total number of items in the returned $Data array.





SplitWaveFile

Previous Top Next



* * *



SplitWaveFile



Usage:

SplitWaveFile($InputFile,$OutputFile1,$OutputFile2);



Description:

This function reads in a PCM formatted stereo wave file and splits the wave file into two mono-wave files for each sound channel.





The output files are stored to disk for analysis or data retention.





Remarks:

This function only works with 8 bits/sample data files.

Function arguments



Parameter

Variable Type

Description



$InputFile

String

The filepath and name of the input file



$OutputFile1

String

The file path and name of the first output file (Left Channel)



$OutputFile2

String

The file path and name of the second output file (Right Channel)





Return parameters



Parameter

Variable Type

Description



None





Usage Example:

SplitWaveFile("c:\\inputfile1.wav", "c:\\outputwave1.wav", "c:\\outputwave2.wav");





FTPCreateDirectory

Previous Top Next



* * *



FTPCreateDirectory



Usage:

FTPCreateDirectory($ServerURL,$DirName,$UserName,$Password);

Description:

This function can be used to create a directory on an FTP server.

Function arguments



Parameter

Variable Type

Description



$ServerURL

String

The URL of the server. This should be in the format "ftp://ftp.jabil.com/"



$DirName

String

The name of the new directory.



$UserName

String

The username to supply as a credential to the FTP server.



$Password

String

The password to supply as a credential to the FTP server.





Return parameters



Parameter

Variable Type

Description



$status

Boolean

Returns true if directory is successfully created, false otherwise





Example(s):



$status = FTPCreateDirectory("ftp://ftp.jabil.com/","newDirectory","un","pw");





FTPDeleteDirectory

Previous Top Next



* * *



FTPDeleteDirectory



Usage:

FTPDeleteDirectory($ServerURL,$DirName,$UserName,$Password);

Description:

This function can be used to delete a directory on an FTP server.

Function arguments



Parameter

Variable Type

Description



$ServerURL

String

The URL of the server. This should be in the format "ftp://ftp.jabil.com/"



$DirName

String

The name of the directory to delete.



$UserName

String

The username to supply as a credential to the FTP server.



$Password

String

The password to supply as a credential to the FTP server.





Return parameters



Parameter

Variable Type

Description



$status

Boolean

Returns true if directory is successfully deleted, false otherwise





Example(s):



$status = FTPDeleteDirectory("ftp://ftp.jabil.com/","Directory","un","pw");





FTPDeleteRemoteFile

Previous Top Next



* * *



FTPDeleteRemoteFile



Usage:



$status = FTPDeleteRemoteFile($serverURL, $remoteFileName, $userName, $password);





Description:





Deletes specified file from FTP server.



Function arguments



Parameter

Variable Type

Description



$serverURL

String

URL of FTP server. Must start with "ftp://"



$remoteFileName

String

Path and filename of file to be delete.



$userName

String

FTP server username.



$password

String

Password for username.



Return parameters



Parameter

Variable Type

Description



$status

Boolean

Returns true is file successfully delete, false otherwise.





Example:

$ServerURL = "ftp://10.0.0.1/";

$RemoteFileName = "EXAMPLE.TXT";

$UserName = "test";

$Password = "password";





$status = FTPDeleteRemoteFile($ServerURL,$RemoteFileName,$UserName,$Password);





FTPDownloadFile

Previous Top Next



* * *



FTPDownloadFile



Usage:

$BytesTransferred = FTPDownloadFile($ServerURL,$LocalFileName,$RemoteFileName,$UserName,$Password,$TransferMode);



Description:

This function can be used to download a file from an FTP server and save it to a specified file name, if the transfer is successful, the function returns the number of bytes transferred by the operation.



Function arguments



Parameter

Variable Type

Description



$ServerURL

String

The URL of the server on which the file to download resides. This should be in the format "ftp://ftp.jabil.com/"



$LocalFileName

String

The local filename which to save the downloaded file, for instance "c:\\mylocation\\myfile.zip"



$RemoteFileName

String

The remote path and filename, for instance "pub/downloads/myfile.zip";



$UserName

String

The username to supply as a credential to the FTP server.



$Password

String

The password to supply as a credential to the FTP server.



$TransferMode

String

The desired transfer mode. The valid options are:

· "BINARY"

· "ASCII"





Return parameters



Parameter

Variable Type

Description



$BytesTransferred

Integer

The Number of Bytes Transferred during the FTP File Download.





Example(s):



$TotalSize = FTPDownloadFile("ftp://ftp.jabil.com/","c:\\myfile.zip","pub/myfile.zip","Dan","Password","BINARY");





FTPGetFileSize

Previous Top Next



* * *



FTPGetFileSize



Usage:

$Size = FTPGetFileSize($ServerURL,$FileName,$UserName,$Password);

Description:

This function can be used retrieve the size of a file (bytes) from an FTP server.

Function arguments



Parameter

Variable Type

Description



$ServerURL

String

The URL of the server including the directory in which the file resides. This should be in the format "ftp://ftp.jabil.com/filedirectory/"



$FileName

String

The name of the file.



$UserName

String

The username to supply as a credential to the FTP server.



$Password

String

The password to supply as a credential to the FTP server.





Return parameters



Parameter

Variable Type

Description



$Size

String

The size of the file in bytes





Example(s):



$Size= FTPGetFileSize("ftp://ftp.jabil.com/directory","fileName.txt","un","pw");





FTPListDirectory

Previous Top Next



* * *



FTPListDirectory



Usage:

($numFiles, filelistArray) = FTPListDirectory($directoryUrl, $username, $password);



Description:



Returns the directory contents of the URL specified as a list of strings, along with the number of items found.



Remarks:

· If the directory is not found or the user does not have read access to the directory, the test generates a failure.



Function arguments



Parameter

Variable Type

Description



$directoryUrl

String

URL of the directory on the FTP server to list. Format should be "ftp://ftp.jabil.com/directory/"



$username

String

Name of user on FTP server.



$password

String

Password for user on FTP server.





Return parameters



Parameter

Variable Type

Description



$numFiles

Integer

The number of files/directories found in the directory.



$filelistArray

Array

A one-row 2D array (string[1,X]) of file/directory names.





Examples:





($numFiles, $fileArray) = FTPListDirectory("ftp://localhost/","root","password");

UpdateStatus("Number of items:");

UpdateStatus($numFiles);





$index = 0;

$dirString = "\n@";

Label Loop:

$Value = ArrayGetValue($fileArray, 0, $index);

$dirString = $dirString + "\n" + $Value;

$index = $index + 1;

if($index < $numFiles)

{

goto Loop;

}





$dirString = $dirString + "\n@\n";

UpdateStatus($dirString);





FTPRenameDirectory

Previous Top Next



* * *



FTPRenameDirectory



Usage:

FTPRenameDirectory($ServerURL,$oldName,$newName,$UserName,$Password);

Description:

This function can be used to rename a directory on an FTP server.

Function arguments



Parameter

Variable Type

Description



$ServerURL

String

The URL of the server. This should be in the format "ftp://ftp.jabil.com/"



$oldName

String

The original name of the directory to rename.



$newName

String

The new name of the directory.



$UserName

String

The username to supply as a credential to the FTP server.



$Password

String

The password to supply as a credential to the FTP server.





Return parameters



Parameter

Variable Type

Description



$status

Boolean

Returns true if directory is successfully renamed, false otherwise





Example(s):



$status = FTPRenameDirectory("ftp://ftp.jabil.com/","oldName", "newName","un","pw");





FTPRenameFile

Previous Top Next



* * *



FTPRenameFile



Usage:

FTPRenameFile($ServerURL,$oldName,$newName,$UserName,$Password);

Description:

This function can be used to rename a file on an FTP server.

Function arguments



Parameter

Variable Type

Description



$ServerURL

String

The URL of the server. This should be in the format "ftp://ftp.jabil.com/"



$oldName

String

The original name of the file to rename.



$newName

String

The new name of the file.



$UserName

String

The username to supply as a credential to the FTP server.



$Password

String

The password to supply as a credential to the FTP server.





Return parameters



Parameter

Variable Type

Description



$status

Boolean

Returns true if file is successfully renamed, false otherwise





Example(s):



$status = FTPRenameFile("ftp://ftp.jabil.com/","oldName", "newName","un","pw");





FTPUploadFile

Previous Top Next



* * *



FTPUploadFile



Usage:

$BytesTransferred = FTPUploadFile($ServerURL, $LocalFileName, $UserName, $Password, $TransferMode);



Description:

This function can be used to upload a file to an FTP server, if the transfer is successful, the function returns the number of bytes transferred by the operation.



Function arguments



Parameter

Variable Type

Description



$ServerURL

String

The URL of the server on which to upload the file. This should be in the format "ftp://ftp.jabil.com/"



$LocalFileName

String

The local filename to upload to the server, for instance "c:\\mylocation\\myfile.zip"



$UserName

String

The username to supply as a credential to the FTP server.



$Password

String

The password to supply as a credential to the FTP server.



$TransferMode

String

The desired transfer mode. The valid options are:

· "BINARY"

· "ASCII"





Return parameters



Parameter

Variable Type

Description



$BytesTransferred

Integer

The Number of Bytes Transferred during the FTP File Upload.





Example(s):



$TotalSize = FTPUploadFile("ftp://ftp.jabil.com/", "c:\\myfile.zip", "Dan", "Password", "BINARY");





FileDownload

Previous Top Next



* * *



FileDownload



Usage:

FileDownload($sourceLocation, $destination);





Description:

This function will download a file using the HTTP protocol and save the file on the local disk.





Remarks:

If the source file does not exist, this function will return an error and fail the script.

Function arguments



Parameter

Variable Type

Description



$sourceLocation

String

The URI of the source file to download.



$destination

String

The full path (including the file name) to save the downloaded file to.





Return parameters



Parameter

Variable Type

Description



None





Example(s):

// Download a file and save is locally.

$source = "http://somesite.org/filename.txt";

$dest = "C:\\Temp\\filename.txt";





FileDownload($source, $dest);





GetIpAndMacAddresses

Previous Top Next



* * *



GetIpAndMacAddresses



Usage:

($networkinfo, $interfaceCount) = GetIpAndMacAddresses($ipenabledonly);





Description:

Uses WMI to query and return a table of all local network interfaces with a valid MAC address assigned. The interface name, IP address, and MAC address are returned.





Function Arguments



Parameter

Variable Type

Description



$ipenabledonly

Boolean

When set to true, only interfaces where TCP/IP has been bound and enabled are listed.





Return Parameters



Parameter

Variable Type

Description



$networkinfo

Object

DataTable of network interface information. The column names are "Name", "IP", and "MAC".



$interfaceCount

Integer

# of network interfaces found





Example:

($networkInfo, $interfaceCount) = GetIpAndMacAddresses(false);

UpdateStatus("# of network interfaces:");

UpdateStatus($interfaceCount);

DataTable_ShowInWindow($networkInfo);





GetMacAddressFromIp

Previous Top Next



* * *



GetMacAddressFromIp



Usage:

$macaddress = GetMacAddressFromIp($ipaddress);





Description:

Sends an Address Resolution Protocol (ARP) request to obtain the physical address that corresponds to the specified destination IPv4 address. If the information requested is not in the ARP table on the local computer, then the function will cause an ARP request to be sent to obtain the physical address.





Note: the physical address of an IPv4 address is only available if the destination IPv4 address is on the local subnet (the IPv4 address can be reached directly without going through any routers). The function will fail if the destination IPv4 address is not on the local subnet.





Function Arguments



Parameter

Variable Type

Description



$ipaddress

String

IPv4 address to retrieve the MAC address of.





Return Parameters



Parameter

Variable Type

Description



$macaddress

String

MAC address associated with the IP address.





Example:

$ipAddress = "10.2.49.37";

$mac = GetMacAddressFromIp($ipAddress);

UpdateStatus($mac);





PingTest

Previous Top Next



* * *



PingTest

Usage:

$returnString = PingTest($target,$retryCount,$Delay);

Description:

Attempts to Ping a target that can be either a DNS name, or IP address, and awaits a response. If a ping is returned, the test generates a status of pass, otherwise a failure is returned. The $retryCount argument specifies the number of attempts to make before failing, and the $Delay argument specifies the time in seconds to pause between each attempt.

Function Arguments



Parameter

Variable Type

Description



$target

String

The DNS name or IP address for the target to be pinged.



$retryCount

Integer

The number of times to attempt the Ping



$Delay

Integer

The number of seconds to pause between each re-attempt to ping.





Return Parameters



Parameter

Variable Type

Description



$returnString

String

Returns the a description of the status of the ping, such as "The ping was not returned", or "The ping was returned in [xxxxx] ms.".





PingTestBool

Previous Top Next



* * *



PingTestBool

Usage:

$returnBoolean = PingTestBool($target,$retryCount,$Delay);

Description:

Attempts to Ping a target that can be either a DNS name, or IP address, and awaits a response. The $retryCount argument specifies the number of attempts to make before failing, and the $Delay argument specifies the time in seconds to pause between each attempt.

If a ping is returned, the function returns a status of TRUE. If no ping is returned on all attempts, the function returns FALSE.

Function Arguments



Parameter

Variable Type

Description



$target

String

The DNS name or IP address for the target to be pinged.



$retryCount

Integer

The number of times to attempt the Ping



$Delay

Integer

The number of seconds to pause between each re-attempt to ping.





Return Parameters



Parameter

Variable Type

Description



$returnBoolean

Boolean

If a ping response is returned, the function returns a status of TRUE. If no ping is returned on all attempts, the function returns FALSE.





SendEmail

Previous Top Next



* * *



SendEmail



Usage:

SendEmail($To, $From, $CCList, $BCCList, $Subject, $Message, $Format, $Priority [, $SmtpHost]);



Description:

This function sends an email from the test script. Both HTML or TEXT formats are supported.



Remarks:

To use multiple email addresses separate them by a comma.

You can use the SendEmail or SendEmailWithAttachment functions while running a local SMTP server configured for port 25 on the test machine. This can be accomplished by installing the built in IIS SMTP Server on Microsoft Windows, or installing any free SMTP server utility.



Function arguments



Parameter

Variable Type

Description



$To

String

The list of email recipients



$From

String

The email address the message will be sent from.



$CCList

String

The CC List of email addresses (comma delimited).



$BCCList

String

The BCC List of email addresses (comma delimited).



$Subject

String

The subject of the email.



$Message

String

The body of the email.



$Format

String

The format of the email message. Supported values are:

"HTML"

"TEXT"



$Priority

String

The priority of the email (only works with outlook). Supported values are:

"LOW"

"NORMAL"

"HIGH"



$SmtpHost

String

The name of the SMTP host to send the messages to. This setting is optional. If not supplied, the message will be sent to an SMTP server on the computer running the script.





Return parameters



Parameter

Variable Type

Description



None





Examples:





// Send email through a server running on the local computer.

$to = "bob@mail.com, fred@mail.com";

$from = "me@jabil.com";

$cc = "";

$bcc = "";

$subject = "Test Message Subject";

$message = "This is a test message.";

$format = "TEXT";

$priority = "HIGH";

SendEmail($to, $from, $cc, $bcc, $subject, $message, $format, $priority);



// Send the same email through a remote server (not on the local computer).

$smtp = "server.name.com";

SendEmail($to, $from, $cc, $bcc, $subject, $message, $format, $priority, $smtp);





SendEmailWithAttachment

Previous Top Next



* * *



SendEmailWithAttachment



Usage:

SendEmailWithAttachment($To, $From, $CCList, $BCCList, $Subject, $Message, $Format, $Priority , $SmtpHost, $Filename);



Description:

This function sends an email from the test script. Both HTML or TEXT formats are supported with a single attachment.



Remarks:

To use multiple email addresses separate them by a comma.

You can use the SendEmail or SendEmailWithAttachment functions while running a local SMTP server configured for port 25 on the test machine. This can be accomplished by installing the built in IIS SMTP Server on Microsoft Windows, or installing any free SMTP server utility.



Function arguments



Parameter

Variable Type

Description



$To

String

The list of email recipients



$From

String

The email address the message will be sent from.



$CCList

String

The CC List of email addresses (comma delimited).



$BCCList

String

The BCC List of email addresses (comma delimited).



$Subject

String

The subject of the email.



$Message

String

The body of the email.



$Format

String

The format of the email message. Supported values are:

"HTML"

"TEXT"



$Priority

String

The priority of the email (only works with outlook). Supported values are:

"LOW"

"NORMAL"

"HIGH"



$SmtpHost

String

The name of the SMTP host to send the messages to. This setting is optional. If left blank, the message will be sent to an SMTP server on the computer running the script.



$Filename

String

The path to the file to send as an attachment.





Return parameters



Parameter

Variable Type

Description



None





Examples:





// Send email through a server running on the local computer.

$to = "bob@mail.com, fred@mail.com";

$from = "me@jabil.com";

$cc = "";

$bcc = "";

$subject = "Test Message Subject";

$message = "This is a test message.";

$format = "TEXT";

$priority = "HIGH";

$smtp = "";

$attach = "C:\\Temp\\testfile.zip";

SendEmailWithAttachment($to, $from, $cc, $bcc, $subject, $message, $format, $priority, $smtp, $attach);



// Send the same email through a remote server (not on the local computer).

$smtp = "server.name.com";

SendEmailWithAttachment($to, $from, $cc, $bcc, $subject, $message, $format, $priority, $smtp, $attach);





SetMaxNetworkConnections

Previous Top Next



* * *



SetMaxNetworkConnections



Usage:

SetMaxNetworkConnections($maxConnections);





Description:

Sets the maximum # of persistent network connections.





Function Arguments



Parameter

Variable Type

Description



$maxConnections

Interger

Maximum # of persistent TCP/IP connections allowed.





Return Parameters



Parameter

Variable Type

Description



None

-





Example:

SetMaxNetworkConnections(1); //only allow 1 network connection to be open at a time





AuthenticateOperatorByPassword

Previous Top Next



* * *



AuthenticateOperatorByPassword



Usage:

($IsAuthenticated,$UserName,$Domain) = AuthenticateOperatorByPassword($PromptString,$DefaultToLoggedInUser,$DefaultToCurrentDomain,$FailOnAuthenticationFailure,$RetryLimit);



Description:



This function authorizes the current user against the local machine users, or the domain name controller. If the supplied credentials could be verified successfully, the user name and domain name are returned, and the $IsAuthenticate return variable is set to TRUE, otherwise this variable will be returned as FALSE. The $RetryLimit sets the maximum number of password attempts that can be performed before closing the Dialog Prompt. The $FailOnAuthenticationFailure boolean argument sets whether or not the function will automatically generate a failure if the authentication process is unsuccessful.



Function arguments



Parameter

Variable Type

Description



$PromptString

String

The text string displayed to the operator on the Dialog prompt.



$DefaultToLoggedInUser

Boolean

If this variable is set to true, the current windows user name is automatically populated in the User Name field.



$DefaultToCurrentDomain

Boolean

If this variable is set to true, the current machine's domain name is automatically populated in the Domain Name field.



$FailOnAuthenticationFailure

Boolean

If this variable is set to false, the function will always pass regardless of the whether or not the authentication was successful. If the authentication was unsuccessful and this argument is set to TRUE, then the function will generate a failure if the authentication is not possible.



$RetryLimit

Integer

The maximum number of password attempts that is allowed before the dialog box closes and returns an authentication failure.





Return parameters



Parameter

Variable Type

Description



$IsAuthenticated

Boolean

Returns true if the supplied username, domain, and password could be authenticated against the local machine user database, or the domain controller.



$UserName

String

Returns the user name of the authenticated windows user.



$DomainName

String

Returns the domain of the current authenticated windows user.





Example(s):

($IsAuthenticated,$UserName,$Domain) = AuthenticateOperatorByPassword("Please Provide Authentication To Prove that U R U","TRUE","TRUE","FALSE",3);





AuthenticateUserByFingerprint

Previous Top Next



* * *



AuthenticateUserByFingerprint



Usage:

($IsAuthenticated,$UserName) = AuthenticateUserByFingerprint($PromptString,$FailOnAuthenticationFailure,$RetryLimit);



Description:



This function authorizes the current user from the Jabil Test security definition file. If a matching fingerprint is found in the user file, the user name is returned, and the $IsAuthenticate return variable is set to TRUE, otherwise this variable will be returned as FALSE. The $RetryLimit sets the maximum number of fingerprint scans that will be performed before closing the Dialog Prompt. The $FailOnAuthenticationFailure boolean argument sets whether or not the function will automatically generate a failure if the authentication process is unsuccessful.





Function arguments



Parameter

Variable Type

Description



$PromptString

String

The text string displayed to the operator on the Dialog prompt.



$FailOnAuthenticationFailure

Boolean

If this variable is set to false, the function will always pass regardless of the whether or not the authentication was successful. If the authentication was unsuccessful and this argument is set to TRUE, then the function will generate a failure if the authentication is not possible.



$RetryLimit

Integer

The maximum number of fingerprint scans that can be performed before the dialog is closed and an unsuccessful authentication result is returned.





Return parameters



Parameter

Variable Type

Description



$IsAuthenticated

Boolean

Returns true if a matching fingerprint was found in the Jabil Test security definitions file.



$UserName

String

Returns the username of the matching fingerprint found in the Jabil Test security definitions file.





Example(s):

($IsAuthenticated,$UserName) = AuthenticateUserByFingerprint("Please give me the finger!","TRUE",3);





CheckFormExists

Previous Top Next



* * *



CheckFormExists



Usage:

$exists = CheckFormExists($Form);





Description:

Returns true if the form is still open, and false if it has been closed and disposed of by the system.

Function arguments



Parameter

Variable Type

Description



$Form

Object

A handle to the form created using any of the non-blocking prompt functions.





Return parameters



Parameter

Variable Type

Description



$exists

Boolean

Whether or not the form has been disposed of. Closing an operator prompt window will dispose of the form after a short period of time.





Example(s):





$WindowHandle = OperatorPromptNonBlockingWithButtons("Just a prompt.",400,600,"BUTTON1",50,50,"BUTTON2",50,200);





$Button1Pressed = false;

$Button2Pressed = false;





while(!$Button2Pressed)

{

$windowPresent = CheckFormExists($WindowHandle);

if(!$windowPresent)

{

Fail("Error! Someone closed the window.");

}



$Button1Pressed = OperatorPromptNonBlockingGetButtonState($WindowHandle,"BUTTON1");

$Button2Pressed = OperatorPromptNonBlockingGetButtonState($WindowHandle,"BUTTON2");



UpdateStatus($Button1Pressed);

UpdateStatus($Button2Pressed);



if($Button1Pressed)

{

OperatorPrompt("BUTTON1 pressed!","OK");

}



Sleep(1);

}





End;





CloseForm

Previous Top Next



* * *



CloseForm

Usage:

CloseForm($myForm);

Description:

This function closes a Form object that has been created in a previous test step. In the event that the function argument $myForm can't be cast as a form object, a failure is returned to the script interpreter. If the form is currently already closed, or hidden, no action is taken.

Function Arguments



Parameter

Variable Type

Description



$myForm

Object

A handle to a windows form that has been created in a previous test step





Return Parameters



Parameter

Variable Type

Description



None





DataEntry

Previous Top Next



* * *



DataEntry

Usage:



($SN1,$MN1,$SN2,$MN2) = DataEntry($DataEntryTitle, $NoOfCells);



Description:

This function will require 2 variables the first the title of the Data Entry window and is expected to be a string, and the second is the number of cells required to show.

The Function will return 4 or 6 strings depending on the number of cells shown. The first variable is the serial number on the first cell, the second variable is the Model number on the first cell, the third and forth variables correspond to the second cell and finally the fifth and sixth variables correspond to the third cell.





Example:

($SN1,$MN1,$SN2,$MN2) = DataEntry("Danny's logic test", 2);

Or

($SN1,$MN1,$SN2,$MN2,$SN3,$MN3 ) = DataEntry("Danny's logic test", 3);



Function Arguments



Parameter

Variable Type

Description



$ DataEntryTitle

String

Title of the DataEntry window



$ NoOfCells

Integer

Number of cells, either 2 or 3 cells





Return Parameters



Parameter

Variable Type

Description



$SN1

String

Serial number of the first cell



$MN1

String

Model number of the first cell



$SN2

String

Serial number of the second cell



$MN2

String

Model number of the second cell



$SN3

String

Serial number of the third cell



$MN3

String

Model number of the third cell





GetPicturePromptResult

Previous Top Next



* * *



GetPicturePromptResult

Monitors the status of an image placed with the function ShowPicturePrompt. Parameters:





Handle

Object





Returns:





Text Result

String





Example:





$ImagePath = New("String","C:\\Documents and Settings\\Administrator\\Desktop\\Imagen.bmp");

$ShowPicturePrompt_handle = ShowPicturePrompt($ImagePath,"Hello","Bye","F1","F2",700,400,80,"Button pressed !! Please wait...");

Label loop_1:

Sleep(1);





// verify if button was pressed, if not, monitor again

$sResult = GetPicturePromptResult($ShowPicturePrompt_handle);

$bResult = StringComparison($sResult,"Hello","==");

ScriptIf($bResult,"GOTO","label_1","");

$bResult = StringComparison($sResult,"Bye","==");

ScriptIf($bResult,"GOTO","label_1","loop_1");

Label label_1:





HidePromptImage($ShowPicturePrompt_handle);





UpdateStatus("");

UpdateStatus($sResult);

UpdateStatus("");





HideImage

Previous Top Next



* * *



HideImage



Usage:

HideImage($handle);





Description:

Closes a window that has an image in it that was created with the ShowImage function.

Function Arguments



Parameter

Variable Type

Description



$handle

Object

A handle to a window with an image in it that was created with the ShowImage function.





Return parameters



Parameter

Variable Type

Description



None





Example:





$imagePath = "C:\\Temp\\TestImage.png";

$imageHandle = ShowImage($imagePath, 600, 350);

HideImage($imageHandle);





HidePromptImage

Previous Top Next



* * *



HidePromptImage



Usage:

HidePromptImage($handle);





Description:

Closes a window that has an image in it that was created with the ShowPicturePrompt or ShowPicturePromptWithLocation function.

Function Arguments



Parameter

Variable Type

Description



$handle

Object

A handle to a window with an image in it that was previously created.





Return parameters



Parameter

Variable Type

Description



None





Example:





$imagePath = "C:\\Temp\\TestImage.png";

$imageHandle = ShowImage($imagePath, 600, 350);

HideImage($imageHandle);





HookWindowImage

Previous Top Next



* * *



HookWindowImage

Places an image in the screen, this window is above all the windows in the desktop.

This Windows would be usually placed in the Initialize function of the script thus allowing it to be always visible in JabilTest whether it is a test running or not .

This function is useful to show an image all the time, eg. a picture of the product or logo from what is running at the moment.

Window closes by closing Jabil Test or using function UnHookWindowImage. Parameters:





Image Path

String



Width

Integer



Height

Integer



X Position in screen

Integer



Y Position in screen

Integer



Transparency

Integer (0 – 100)





Returns:





Handle

Object





Example:





$ImagePath = New("String","C:\\Documents and Settings\\Administrator\\Desktop\\Imagen.bmp");

$Hook_handle = HookWindowImage($ImagePath,600,400,400,300,80);

Sleep(5);

UnHookWindowImage($Hook_handle);





OperatorCountDownTimer

Previous Top Next



* * *



OperatorCountDownTimer



Usage:



OperatorCountDownTimer($DisplayString, $TimeInSeconds, $ShowAbortButton);





Description:





This function is used to display a count down timer to the user. This function is generally used when the operator must wait for a finite amount of time for an event to complete before the script can continue. The $DisplayString is displayed to the operator on the countdown GUI form. The $ShowAbortButton boolean argument is used to control whether or not an abort button is shown to the operator. If the operator either closes the form, or clicks the abort button the function will return with an "ABORT" status. Otherwise, if the entire time duration has elapsed, the function will return with a PASS status.

Function arguments



Parameter

Variable Type

Description



$DisplayString

String

The text which is shown to the operator on the count down timer form.



$TimeInSeconds

Integer

The number of seconds that you would like the timer to wait before closing the form and continue the script execution.



$ShowAbortButton

Boolean

This argument controls whether or not an abort button is displayed on the count-down timer form.





Return parameters



Parameter

Variable Type

Description



None





Example(s):





OperatorCountDownTimer("Hello World!", 30, true);





OperatorCountDownTimerWithPause

Previous Top Next



* * *



OperatorCountDownTimerWithPause



Usage:



OperatorCountDownTimerWithPause($DisplayString,$TimeInSeconds,$ShowControlButtons);





Description:





This function is used to display a count down timer to the user. This function is generally used when the operator must wait for a finite amount of time for an event to complete before the script can continue. The $DisplayString is displayed to the operator on the countdown GUI form. The $ShowControlButtons boolean argument is used to control whether or not the interactive control buttons are shown to the operator - Continue (continues execution), Pause (stops timer countdown), Abort (aborts test), and Add Time (adds time to countdown). If the operator either closes the form, or clicks the abort button the function will return with an "ABORT" status. Otherwise, if the entire time duration has elapsed, the function will return with a PASS status.





Function arguments



Parameter

Variable Type

Description



$DisplayString

String

The text which is shown to the operator on the count down timer form.



$TimeInSeconds

Integer

The number of seconds that you would like the timer to wait before closing the form and continuing the script execution.



$ShowControlButtons

Boolean

This argument controls whether or not the pause, continue, and abort buttons are displayed on the count-down timer form.





Return parameters



Parameter

Variable Type

Description



None





Example(s):





OperatorCountDownTimerWithPause("Hello World!",30, true);





OperatorCountDownTimerWithPauseAndLocation

Previous Top Next



* * *



OperatorCountDownTimerWithPauseAndLocation



Usage:

OperatorCountDownTimerWithPauseAndLocation($prompt, $time, $showButtons, $width, $height, $left, $top);





Description:

This function will pop up a window with a prompt and a countdown timer. The $showButtons argument is used to control whether or not the interactive control buttons are shown to the operator. The buttons are:

· Continue - closes the window and continues script execution.

· Pause - stops the timer from counting down. Says "Resume" while paused.

· Abort - closes the window and aborts test execution.

· Add Time - adds 30 seconds to the count down time.





If the timer runs all the way down or the operator clicks on the Continue button, the function will return a PASS status.

If the operator clicks on Abort or closes the window, the test will Abort.





Remarks:

The word "Location" is used in the prompt functions to denote position and size instead of saying "WithPositionAndSize".

Function arguments



Parameter

Variable Type

Description



$prompt

String

String displayed to the user.



$time

Integer

The number of seconds that the time will count down.



$showButtons

Boolean

Whether or not to show the control buttons.



$width

Integer

The width of the countdown timer window in pixels.



$height

Integer

The height of the countdown timer window in pixels.



$left

Integer

The location of the left edge of the countdown timer window in pixels measured from the left edge of the screen.



$top

Integer

The location of the top edge of the countdown timer window in pixels measured from the top edge of the screen.





Return parameters



Parameter

Variable Type

Description



None





Example(s):

// Set up the values for the timer window.

$prompt = "This is the prompt.";

$time = 6;

$show = true;

$width = 1500;

$height = 750;

$xPos = 50;

$yPos = 0;





OperatorCountDownTimerWithPauseAndLocation($prompt, $time, $show, $width, $height, $xPos, $yPos);





OperatorCountDownTimerWithPosition

Previous Top Next



* * *



OperatorCountDownTimerWithPosition



Usage:



OperatorCountDownTimerWithPosition($DisplayString, $TimeInSeconds, $ShowAbortButton, $leftEdge, $topEdge);





Description:





This function is used to display a count down timer to the user at the location specified by $leftEdge and $topEdge. This function is generally used when the operator must wait for a finite amount of time for an event to complete before the script can continue. The $DisplayString is displayed to the operator on the countdown GUI form. The $ShowAbortButton boolean argument is used to control whether or not an abort button is shown to the operator. If the operator either closes the form, or clicks the abort button the function will return with an "ABORT" status. Otherwise, if the entire time duration has elapsed, the function will return with a PASS status.

Function arguments



Parameter

Variable Type

Description



$DisplayString

String

The text which is shown to the operator on the count down timer form.



$TimeInSeconds

Integer

The number of seconds that you would like the timer to wait before closing the form and continue the script execution.



$ShowAbortButton

Boolean

This argument controls whether or not an abort button is displayed on the count-down timer form.



$leftEdge

Integer

The left edge of the count down timer window in pixels measured from the left edge of the screen.



$topEdge

Integer

The top edge of the count down timer window in pixels measured from the top edge of the screen.





Return parameters



Parameter

Variable Type

Description



None





Example(s):





OperatorCountDownTimerWithPosition("Hello World!", 30, true, 1000, 150);





OperatorInputCheckedListPrompt

Previous Top Next



* * *



OperatorInputCheckedListPrompt

Usage:



$SelectedItem = OperatorInputCheckedListPrompt($PromptString,$OptionList,$WindowWidth,$WindowHeight);





Description:





This function is used to prompt the operator with a list of choices that appear in a checked list box control. The $PromptString is displayed at the top of the form to give the operator instructions on how to respond. The $OptionList is a semicolon delimited list of options that will appear in the list control for the operator to choose from. The $WindowWidth and $WindowHeight parameters control the size of the window that will be displayed to the operator.





This function returns an array of boolean values indicated whether or not a particular option was checked depending on it's position in the list (see Example Below);



Function arguments



Parameter

Variable Type

Description



$PromptString

String

The text shown to the operator at the top of the input form.



$OptionList

String

A semicolon delimited list of options that the operator may select to check from a list box. The operator may check multiple items. (If restricting the operator to a single selection is desired, see the OperatorInputListPrompt function).



$WindowWidth

Integer

The width of the window that will be displayed to the user. The window width is specified in pixels.



$WindowHeight

Integer

The height of the window that will be displayed to the user. The window height is specified in pixels.





Return parameters



Parameter

Variable Type

Description



$CheckedItemArray

Array

A list of boolean values indicating whether or not a particular item was checked depending on it's position in the list.





Example(s):



$RetArray = OperatorInputCheckedListPrompt("Pick a Delicious Fruit, or face the Consequences!","Apple;Pear;Bananna;Tangerine;Orange;Pineapple",200,400);

$Length = ArrayGetLength($RetArray);

$Value0 = ArrayGetValue($RetArray,0,0);

$Value1 = ArrayGetValue($RetArray,1,0);

$Value2 = ArrayGetValue($RetArray,2,0);

$Value3 = ArrayGetValue($RetArray,3,0);

$Value4 = ArrayGetValue($RetArray,4,0);

$Value5 = ArrayGetValue($RetArray,5,0);

UpdateStatus($Value0);

UpdateStatus($Value1);

UpdateStatus($Value2);

UpdateStatus($Value3);

UpdateStatus($Value4);

UpdateStatus($Value5);





OperatorInputCheckedListPromptWithLocation

Previous Top Next



* * *



OperatorInputCheckedListPromptWithLocation



Usage:

$checked = OperatorInputCheckedListPromptWithLocation($prompt, $optionList, $width, $height, $left, $top);





Description:

This function will pop up a window with a prompt and a list of checkboxes. The user can select and check multiple items in the list. The list is returned as an array of booleans (true if checked, false otherwise).





Remarks:

The word "Location" is used in the prompt functions to denote position and size instead of saying "WithPositionAndSize".

Function arguments



Parameter

Variable Type

Description



$prompt

String

String displayed to the user.



$optionList

String

A semicolon delimited list of the items to put in the checked list. They will be shown one to a line with a checkbox at the start of the line.



$width

Integer

The width of the checked list prompt window in pixels.



$height

Integer

The height of the checked list prompt window in pixels.



$left

Integer

The location of the left edge of the checked list prompt window in pixels measured from the left edge of the screen.



$top

Integer

The location of the top edge of the checked list prompt window in pixels measured from the top edge of the screen.





Return parameters



Parameter

Variable Type

Description



$checked

Array

A 2D array of booleans with one column that represents which check boxes are checked.





Example(s):

// Set up the values for the timer window.

$prompt = "This is the prompt.";

$optList = "Line_1;Line_2;Line_3;Line_4";

$width = 400;

$height = 350;

$xPos = 20;

$yPos = 20;





OperatorInputCheckedListPromptWithLocation($prompt, $optList, $width, $height, $xPos, $yPos);





OperatorInputComboBox

Previous Top Next



* * *



OperatorInputComboBox



Usage:

$selected = OperatorInputComboBox($prompt, $optionList);



Description:

This function prompts the user to select an item from a drop-down combo box.





Remarks:

If the user makes no selection, an empty string is returned.



Function arguments



Parameter

Variable Type

Description



$prompt

String

Text shown to the operator at the top of the input form.



$optionList

String

Semicolon delimited list of options the operator will select from.





Return parameters



Parameter

Variable Type

Description



$selected

String

The item the operator selected from the combo box.





Example:



// Get the user to select from 5 lines.

$prompt = "Select an option from the list below:";

$options = "Option 1;Option 2;Option 3;Option 4;Option 5";



$selected = OperatorInputComboBox($prompt, $options);





OperatorInputListPrompt

Previous Top Next



* * *



OperatorInputListPrompt

Usage:



$SelectedItem = OperatorInputListPrompt($PromptString,$OptionList,$WindowWidth,$WindowHeight);





Description:





This function is used to prompt the operator with a list of choices that appear in a drop down list control. The $PromptString is displayed at the top of the form to give the operator instructions on how to respond. The $OptionList is a semicolon delimited list of options that will appear in the list control for the operator to choose from. The $WindowWidth and $WindowHeight parameters control the size of the window that will be displayed to the operator.



Function arguments



Parameter

Variable Type

Description



$PromptString

String

The text shown to the operator at the top of the input form.



$OptionList

String

A semicolon delimited list of options that the operator may select from a list box.



$WindowWidth

Integer

The width of the window that will be displayed to the user. The window width is specified in pixels.



$WindowHeight

Integer

The height of the window that will be displayed to the user. The window height is specified in pixels.





Return parameters



Parameter

Variable Type

Description



$SelectedItem

String

The item that the operator selected from the list box. If no option was selected, an empty string is returned.





Example(s):

$OperatorPick = OperatorInputListPrompt("Pick A Fruit In The List Or Face Serious Consequences!","Apple;Orange;Pear;Bananna",500,600);

UpdateStatus($OperatorPick);





OperatorInputListPromptPosition

Previous Top Next



* * *



OperatorInputListPromptPosition

Usage:



$SelectedItem = OperatorInputListPromptPosition($PromptString, $OptionList, $WindowWidth, $WindowHeight, WindowXPosition, $WindowYPosition);





Description:





This function is used to prompt the operator with a list of choices that appear in a list control. The $PromptString is displayed at the top of the form to give the operator instructions on how to respond. The $OptionList is a semicolon delimited list of options that will appear in the list control for the operator to choose from. The $WindowWidth and $WindowHeight parameters control the size of the window that will be displayed to the operator. The $WindowXPosition and $WindowYPosition parameters control the placement of the window on the screen that will be displayed to the operator.



Function arguments



Parameter

Variable Type

Description



$PromptString

String

The text shown to the operator at the top of the input form.



$OptionList

String

A semicolon delimited list of options that the operator may select from a list box.



$WindowWidth

Integer

The width of the window that will be displayed to the user. The window width is specified in pixels.



$WindowHeight

Integer

The height of the window that will be displayed to the user. The window height is specified in pixels.



$WindowXPosition

Integer

The X position of the window that will be displayed to the user. The window X position is specified in pixels. 0 is at the left of the screen.



$WindowYPosition

Integer

The Y position of the window that will be displayed to the user. The window Y position is specified in pixels. 0 is at the top of the screen.





Return parameters



Parameter

Variable Type

Description



$SelectedItem

String

The item that the operator selected from the list box. If no option was selected, an empty string is returned.





Example(s):

$OperatorPick = OperatorInputListPromptPosition("Pick A Fruit In The List Or Face Serious Consequences!","Apple;Orange;Pear;Banana",500,600,0,0); //Window is in top left Corner

UpdateStatus($OperatorPick);





OperatorInputMultiCheckedLists

Previous Top Next



* * *



OperatorInputMultiCheckedLists

Usage:



$SelectedItem = OperatorInputMultiCheckedLists($PromptString, $HeaderStrings, $OptionList1, $OptionList2, ... , $OptionListn, $WindowWidth, $WindowHeight);





Description:





This function is used to prompt the operator with a number of lists of choices that appear in checked list box controls. The list box controls are all shown beside each other. The $PromptString is displayed at the top of the form to give the operator instructions on how to respond. The $HeaderStrings is a semicolon delimited list of strings that are displayed at the top of the columns of check boxes. The $OptionList# is a semicolon delimited list of options that will appear in the list control for the operator to choose from. There must be as many $HeaderStrings as there are $OptionLists. The $WindowWidth and $WindowHeight parameters control the size of the window that will be displayed to the operator. The $WindowWidth is divided up evenly among all of the columns of check boxes.





This function returns a 2D array of boolean values indicated whether or not a particular option was checked depending on it's position in the lists (see Example Below).



Function arguments



Parameter

Variable Type

Description



$PromptString

String

The text shown to the operator at the top of the input form.



$HeaderStrings

String

A semicolon delimited list of headers to show at the top of each column of check boxes



$OptionList1

$OptionList2

...

$OptionListn

String

A semicolon delimited list of options that the operator may select to check from a list box. The operator may check multiple items. There must be as many Option Lists as there are Header Strings.



$WindowWidth

Integer

The width of the window that will be displayed to the user. The window width is specified in pixels.



$WindowHeight

Integer

The height of the window that will be displayed to the user. The window height is specified in pixels.





Return parameters



Parameter

Variable Type

Description



$CheckedItemArray

Array

A 2D array of boolean values indicating whether or not a particular item was checked depending on it's position in the lists.





Example:



// The parameters to send

$boxTitle = "Make Selections From the Lists Below";

$headerTxts = "Header 1;Header 2;Header 3";

$col1Boxes = "Col 1 Check 1;Col 1 Check 2";

$col2Boxes = "Col 2 Check 1;Col 2 Check 2;Col 2 Check 3;Col 2 Check 4;Col 2 Check 5;Col 2 Check 6;Col 2 Check 7;Col 2 Check 8";

$col3Boxes = "Col 3 Check 1;Col 3 Check 2;Col 3 Check 3;Col 3 Check 4;Col 3 Check 5";

$width = 750;

$height = 500;





// Create the checkboxes.

$return = OperatorInputMultiCheckedLists($boxTitle, $headerTxts, $col1Boxes, $col2Boxes, $col3Boxes, $width, $height);





// Get the number of rows and the number of colulmns.

$rows = ArrayGetDimensionSize($return, 0);

$cols = ArrayGetDimensionSize($return, 1);





// Get the value from each cell.

$rowCount = 0;

while ($rowCount < $rows)

{

$rowStr = "";

$colCount = 0;

while ($colCount < $cols)

{

$cell = ArrayGetValue($return, $rowCount, $colCount);



if ($cell == true)

{

$rowStr = $rowStr + "True ";

}

if ($cell == false)

{

$rowStr = $rowStr + "False ";

}

$colCount = $colCount + 1;

}

UpdateStatus($rowStr);

$rowCount = $rowCount + 1;

}





End;





OperatorInputPasswordPrompt

Previous Top Next



* * *



OperatorInputPasswordPrompt



Usage:

$password = OperatorInputPasswordPrompt($promptString);



Description:

This function will prompt the user to enter a string. The entered text will show in the text box as a series of dots.





Function arguments



Parameter

Variable Type

Description



$promptString

String

The string displayed to the users to instruct them in what to do.





Return parameters



Parameter

Variable Type

Description



$password

String

The text string that was typed in by the user.





Example:





// Ask the user for a password.

$prompt = "Enter your password:";



$password = OperatorInputPasswordPrompt($prompt);





OperatorInputMultiCheckedListsWithLocation

Previous Top Next



* * *



OperatorInputMultiCheckedListsWithLocation

Usage:



$checkedItems = OperatorInputMultiCheckedLists($prompt, $headers, $optionList1, $optionList2, ... , $optionListn, $windowWidth, $windowHeight, #windowLeft, $windowTop);





Description:





This function is used to prompt the operator with a number of lists of choices that appear in checked list box controls. The list box controls are all shown beside each other. The $prompt is displayed at the top of the form to give the operator instructions on how to respond. $headers is a semicolon delimited list of strings that are displayed at the top of the columns of check boxes. $optionList# is a semicolon delimited list of options that will appear in the list control for the operator to choose from. There must be as many $headers as there are $optionLists. The $windowWidth and $windowHeight parameters control the size of the window that will be displayed to the operator. The $windowWidth is divided up evenly among all of the columns of check boxes. $windowLeft and $windowTop denote the left and top edges of the window measured from the Left and Top edges of the display.





This function returns a 2D array of boolean values indicated whether or not a particular option was checked depending on it's position in the lists (see Example Below).





Remarks:

The word "Location" is used in the prompt functions to denote position and size instead of saying "WithPositionAndSize".

Function arguments



Parameter

Variable Type

Description



$prompt

String

The text shown to the operator at the top of the input form.



$headers

String

A semicolon delimited list of headers to show at the top of each column of check boxes



$optionList1

$optionList2

...

$optionListn

String

A semicolon delimited list of options that the operator may select to check from a list box. The operator may check multiple items. There must be as many Option Lists as there are Header Strings.



$windowWidth

Integer

The width of the window that will be displayed to the user. The window width is specified in pixels.



$windowHeight

Integer

The height of the window that will be displayed to the user. The window height is specified in pixels.



$windowLeft

Integer

The left edge of the window measured from the left edge of the screen - in pixels.



$windowTop

Integer

The top edge of the window measured from the top edge of the screen - in pixels.





Return parameters



Parameter

Variable Type

Description



$checkedItems

Array

A 2D array of boolean values indicating whether or not a particular item was checked depending on it's position in the lists.





Example:





// The parameters to send.

$boxTitle = "Make Selections From the Lists Below";

$headerTxts = "Header 1;Header 2;Header 3";

$col1Boxes = "Col 1 Check 1;Col 1 Check 2";

$col2Boxes = "Col 2 Check 1;Col 2 Check 2;Col 2 Check 3;Col 2 Check 4;Col 2 Check 5;Col 2 Check 6;Col 2 Check 7;Col 2 Check 8";

$col3Boxes = "Col 3 Check 1;Col 3 Check 2;Col 3 Check 3;Col 3 Check 4;Col 3 Check 5";

$width = 750;

$height = 500;

$left = 20;

$top = 20;





// Create the checkboxes.

$return = OperatorInputMultiCheckedListsWithLocation($boxTitle, $headerTxts, $col1Boxes, $col2Boxes, $col3Boxes, $width, $height, $left, $top);





// Get the number of rows and the number of colulmns.

$rows = ArrayGetDimensionSize($return, 0);

$cols = ArrayGetDimensionSize($return, 1);





// Get the value from each cell.

$rowCount = 0;

while ($rowCount < $rows)

{

$rowStr = "";

$colCount = 0;

// For each row count across the columns.

while ($colCount < $cols)

{

$cell = ArrayGetValue($return, $rowCount, $colCount);



if ($cell == true)

{

$rowStr = $rowStr + "True ";

}

if ($cell == false)

{

$rowStr = $rowStr + "False ";

}

$colCount = $colCount + 1;

}

UpdateStatus($rowStr);

$rowCount = $rowCount + 1;

}





End;





OperatorInputPicturePrompt

Previous Top Next



* * *



OperatorInputPicturePrompt

Usage:

$OperatorResponse = OperatorInputPicturePrompt($PromptString, $GraphicFilePath, $PictureMode, $WindowHeight, $WindowWidth);

Description:

Prompts the Operator with a given string and accompanying graphic file. This operator prompt will automatically assume focus, and is a modal dialog box. If the image is not found at the location given, a blank dialog box is displayed, and no error is generated. The operator has the capability to enter any free form text.

Function Arguments



Parameter

Variable Type

Description



$PromptString

String

The String which is displayed to the operator for instruction or notification purposes.



$GraphicFilePath

String

The path and filename for the graphic image to display. The following graphic formats are supported: GIF,TIFF,BMP,JPG



$PictureMode

String

The resizing mode for the graphic file, supported modes are:

"AUTOSIZE" = Automatically positions the image, size is unchanged

"CENTER" = Centers the image in the form, size is unchanged

"STRETCH" = Centers the image in the form, and sizes it to fit the dialog window



$WindowHeight

Integer

The height of the dialog box in pixels



$WindowWidth

Integer

The width of the dialogi box in pixels





Return Parameters



Parameter

Variable Type

Description



$OperatorResponse

String

The text entered by the operator





OperatorInputPrompt

Previous Top Next



* * *



OperatorInputPrompt

Usage:

$output = OperatorInputPrompt($PromptString);

Description:

Prompts the Operator with a given string in a dialog box which contains a text entry box allowing free form text entry. The dialog box automatically assumes focus so that it is convienent to use from a handheld barcode scanner without keyboard interaction.

Function Arguments



Parameter

Variable Type

Description



$PromptString

String

The String which is displayed to the operator for instruction or notification purposes.





Return Parameters



Parameter

Variable Type

Description



$output

String

The text string that was typed or scanned in by the operator





OperatorInputPromptWithLocation

Previous Top Next



* * *



OperatorInputPromptWithLocation



Usage:

$entered = OperatorInputPromptWithLocation($prompt, $width, $height, $left, $top);





Description:

This function will pop up a window with a prompt and textbox that the user can enter data into. The entered data is returned.





Remarks:

The word "Location" is used in the prompt functions to denote position and size instead of saying "WithPositionAndSize".

Function arguments



Parameter

Variable Type

Description



$prompt

String

String displayed to the user.



$width

Integer

The width of the prompt window in pixels.



$height

Integer

The height of the prompt window in pixels.



$left

Integer

The location of the left edge of the prompt window in pixels measured from the left edge of the screen.



$top

Integer

The location of the top edge of the prompt window in pixels measured from the top edge of the screen.





Return parameters



Parameter

Variable Type

Description



$entered

String

The text that was entered by the user.





Example(s):

// Set up the values for the window.

$prompt = "This is the prompt.";

$width = 400;

$height = 350;

$xPos = 20;

$yPos = 20;





$entered = OperatorInputPromptWithLocation($prompt, $width, $height, $xPos, $yPos);





OperatorInputPromptWithVerify

Previous Top Next



* * *



OperatorInputPromptWithVerify

Usage:

$output = OperatorInputPromptWithVerify($PromptString,$StartString,$MinLength,$MaxLength,$RetryCount);

Description:

Prompts the Operator with a given string in a dialog box which contains a text entry box allowing free form text entry. The dialog box automatically assumes focus so that it is convienent to use from a handheld barcode scanner without keyboard interaction. The Operator.InputPromptWithVerify function will ensure that the operator supplied data begins with the string passed in the $StringString argument. In addition, the length of the string is verified against the $MinLength and $MaxLength variables. In the event that any of these comparisons failed, the operator will be informed of the error and given the opportunity to correct it. The $RetryCount argument controls how many times an operator will be prompted for correct input before a failure is returned to the script. If the supplied input meets all the critieria, it will be returned to the script, and a passing result is returned to the executive. For Operator Input without verification, please see the Operator.InputPrompt function.

Function Arguments



Parameter

Variable Type

Description



$PromptString

String

The String which is displayed to the operator for instruction or notification purposes.



$StartString

String

The prefix of the string that will be accepted as allowable input. For example the prefix string for a Jabil Serial number may be "JBL".



$MinLength

Integer

The minimum allowable length for the operator supplied input.



$MaxLength

Integer

The maximum allowable length for the operator supplied input.



$RetryCount

Integer

The number of times to prompt the operator for corrected input before a failure is generated.





Return Parameters



Parameter

Variable Type

Description



$output

String

The text string that was typed or scanned in by the operator





OperatorInputPromptWithVerifyAndLocation

Previous Top Next



* * *



OperatorInputPromptWithVerifyAndLocation



Usage:

$entered = OperatorInputPromptWithVerifyAndLocation($prompt, $stringStart, $minLength, $maxLength, maxRetries, $width, $height, $left, $top);





Description:

This function will pop up a window with a prompt and textbox that the user can enter data into. The data is tested against the verification parameters. The entered data must begin with the characters in $stringStart, must be at least $minLength long and no longer than $maxLength. If the user enters data that does not meet the verification criteria, an error message will appear with information about the requirement that was not met and the user will be asked to try again. If the data does not meet the verification criteria after $maxRetries times, an error will be generated. The entered data is returned.





Remarks:

The word "Location" is used in the prompt functions to denote position and size instead of saying "WithPositionAndSize".

Function arguments



Parameter

Variable Type

Description



$prompt

String

String displayed to the user.



$stringStart

String

The prefix of the string that will be accepted as allowable input. For example: the prefix string for a Jabil serial number may be "JBL".



$minLength

Integer

The minimum allowable length for the operator supplied input.



$maxLength

Integer

The maximum allowable length for the operator supplied input.



$maxRetries

Integer

The number of times to prompt the operator for corrected input before a failure is generated.



$width

Integer

The width of the prompt window in pixels.



$height

Integer

The height of the prompt window in pixels.



$left

Integer

The location of the left edge of the prompt window in pixels measured from the left edge of the screen.



$top

Integer

The location of the top edge of the prompt window in pixels measured from the top edge of the screen.





Return parameters



Parameter

Variable Type

Description



$entered

String

The text that was entered by the user.





Example(s):

// Set up the values for the window.

$prompt = "This is the prompt.";

$startStr = "Inc";

$minLen = 6;

$maxLen = 12;

$maxRetries = 3;

$width = 400;

$height = 350;

$xPos = 20;

$yPos = 20;





$entered = OperatorInputPromptWithVerifyAndLocation($prompt, $startStr, $minLen, $maxLen, $maxRetries, $width, $height, $xPos, $yPos);





OperatorMultiInputPrompt

Previous Top Next



* * *



OperatorMultiInputPrompt

Usage:



($Response1,[$Response2],[$Response3]....) = OperatorMultiInputPrompt($PromptCount,$Prompt1,[$Prompt2],[$Prompt3].....);





Description:





This function is used to prompt the operator for a list of inputs on a single dialog, without the need for multiple pop-up windows.

The function takes a variable number of arguments based on the $PromptCount parameter which specifies the number of input fields to display to the test operator.





The $Prompt[x] parameters are used to specify the prompt that will be shown to the operator for a particular input field.

Function arguments



Parameter

Variable Type

Description



$PromptCount

Integer

The number of input fields to display to the Operator. The allowable number of prompts can be any number between 1 and 10.



$Prompt1

String

The message to display to the operator for the first input prompt.



[$Prompt...X]

String

The message to display to the operator for the 2nd to 10th input prompt (Optional... see usage examples below)





Return parameters



Parameter

Variable Type

Description



$Response1

String

The value that was recorded by the operator for the first message prompt.



[$Response...X]

String

The value that was recorded by the operator for the Nth message prompt. (The number of return arguments is determined by the value of the $PromptCount parameter).





Example(s):





// Example 1 with 3 prompts

($SerialNumber, $ModelNumber, $MacAddress) = OperatorMultiInputPrompt(3, "Serial Number", "Model Number", "MAC Address");





// Example 2 with 5 prompts

($SerialNumber, $ModelNumber, $MacAddress, $EIN, $Vendor) = OperatorMultiInputPrompt(5, "Serial Number", "Model Number", "MAC Address", "EIN Number", "Vendor");





OperatorMultiInputPromptWithLocation

Previous Top Next



* * *



OperatorMultiInputPromptWithLocation

Usage:



($Response1, [$Response2],... [$ResponseN]) = OperatorMultiInputPromptWithLocation($PromptCount,$Prompt1,[$Prompt2],...[$PromptN], $width, $height, $left, $top);





Description:





This function is used to prompt the operator for a list of inputs on a single dialog, without the need for multiple pop-up windows.

The function takes a variable number of arguments based on the $PromptCount parameter which specifies the number of input fields to display to the test operator.





The $Prompt[x] parameters are used to specify the prompt that will be shown to the operator for a particular input field.





Remarks:

The word "Location" is used in the prompt functions to denote position and size instead of saying "WithPositionAndSize".

Function arguments



Parameter

Variable Type

Description



$PromptCount

Integer

The number of input fields to display to the Operator. The allowable number of prompts can be any number between 1 and 10.



$Prompt1

String

The message to display to the operator for the first input prompt.



[$Prompt...X]

String

The message to display to the operator for the 2nd to 10th input prompt (Optional... see usage examples below).



$width

Integer

The width of the prompt window in pixels.



$height

Integer

The height of the prompt window in pixels.



$left

Integer

The location of the left edge of the prompt window in pixels measured from the left edge of the screen.



$top

Integer

The location of the top edge of the prompt window in pixels measured from the top edge of the screen.





Return parameters



Parameter

Variable Type

Description



$Response1

String

The value that was recorded by the operator for the first message prompt.



[$Response...X]

String

The value that was recorded by the operator for the Nth message prompt. (The number of return arguments is determined by the value of the $PromptCount parameter).





Example(s):





// Example 1 with 3 prompts

($SerialNumber, $ModelNumber, $MacAddress) = OperatorMultiInputPromptWithLocation(3, "Serial Number", "Model Number", "MAC Address", 700, 430, 10, 10);





// Example 2 with 5 prompts

($SerialNumber, $ModelNumber, $MacAddress, $EIN, $Vendor) = OperatorMultiInputPromptWithLocation(5, "Serial Number", "Model Number", "MAC Address", "EIN Number", "Vendor", 700, 430, 10, 10);





OperatorNumericInputPicturePrompt

Previous Top Next



* * *



OperatorNumericInputPicturePrompt

Usage:

$OperatorResponse = OperatorNumericInputPicturePrompt($PromptString, $GraphicFilePath, $PictureMode, $WindowHeight, $WindowWidth);

Description:

Prompts the Operator with a given string and accompanying graphic file. This operator prompt will automatically assume focus, and is a modal dialog box. If the image is not found at the location given, a blank dialog box is displayed, and no error is generated. The operator has the capability to enter any valid numeric value. If a valid numeric value is not supplied, the function will re-prompt the operator until an acceptable value is entered.

Function Arguments



Parameter

Variable Type

Description



$PromptString

String

The String which is displayed to the operator for instruction or notification purposes.



$GraphicFilePath

String

The path and filename for the graphic image to display. The following graphic formats are supported: GIF,TIFF,BMP,JPG



$PictureMode

String

The resizing mode for the graphic file, supported modes are:

"AUTOSIZE" = Automatically positions the image, size is unchanged

"CENTER" = Centers the image in the form, size is unchanged

"STRETCH" = Centers the image in the form, and sizes it to fit the dialog window



$WindowHeight

Integer

The height of the dialog box in pixels



$WindowWidth

Integer

The width of the dialogi box in pixels





Return Parameters



Parameter

Variable Type

Description



$OperatorResponse

Float

The numeric value entered by the test operator.





OperatorNumericInputPicturePromptWithLocation

Previous Top Next



* * *



OperatorNumericInputPicturePromptWithLocation

Usage:

$response = OperatorNumericInputPicturePromptWithLocation($prompt, $filePath, $pictureMode, $width, $height, $left, $top);



Description:

This function displays a picture to the user and has a text box for the user to input a number. If the input is not numeric, the prompt window will re-appear. This will continue until the user enters a valid number.





Remarks:

The word "Location" is used in the prompt functions to denote position and size instead of saying "WithPositionAndSize".

The supported image formats are: BMP, GIF, JPG, PNG, TIFF.

Function arguments



Parameter

Variable Type

Description



$prompt

String

String displayed to the user.



$filePath

String

The path and filename for the graphic to display.



$pictureMode

String

The resizing mode for the image. The supported modes are:

· AUTOSIZE

· CENTER

· STRETCH



$width

Integer

The width of the prompt window in pixels.



$height

Integer

The height of the prompt window in pixels.



$left

Integer

The location of the left edge of the prompt window in pixels measured from the left edge of the screen.



$top

Integer

The location of the top edge of the prompt window in pixels measured from the top edge of the screen.





Return parameters



Parameter

Variable Type

Description



$response

Float

The numeric value entered by the operator.





Example(s):





// Fill the prompt with the picture.

$prompt = "This is the prompt.";

$picture = "C:\\Graphics\\Prompt1.jpg";

$mode = "STRETCH";

$width = 600;

$height = 650;

$left = 20;

$top = 50;

$response = OperatorNumericInputPicturePromptWithLocation($prompt, $picture, $mode, $width, $height, $left, $top);





OperatorNumericInputPrompt

Previous Top Next



* * *



OperatorNumericInputPrompt

Usage:

$output = OperatorNumericInputPrompt($PromptString,$MinValue,$MaxValue);

Description:

Prompts the Operator with a given string in a dialog box which contains a text entry box allowing numeric text entry. The dialog box automatically assumes focus so that it is convienent to use from a handheld barcode scanner without keyboard interaction. This box allows numeric input only in a range of allowable values.

Function Arguments



Parameter

Variable Type

Description



$PromptString

String

The String which is displayed to the operator for instruction or notification purposes.



$MinValue

Float

The minimum numeric value allowable for input.



$MaxValue

Float

The maximum numeric value allowable for input.





Return Parameters



Parameter

Variable Type

Description



$output

String

The numeric string that was typed or scanned in by the operator





OperatorNumericInputPromptDefault

Previous Top Next



* * *



OperatorNumericInputPromptDefault



Usage:

$response = OperatorNumericInputPromptDefault($prompt, $minValue, $maxValue, $defaultValue);



Description:

This function displays a prompt to the user that has a text box for the user to input a number. If the input is not numeric, less than the minimum value or more than the maximum, the prompt window will re-appear with a message stating why the input was rejected. This will continue until the user enters a valid number.



Remarks:

The text box is pre-filled with a default number (supplied by the script) - the user can accept this value by clicking on the OK button without entering a new number.





Function arguments



Parameter

Variable Type

Description



$prompt

String

The string to be displayed to the user.



$minValue

Float

The minimum value of the user entered number.



$maxValue

Float

The maximum value of the user entered number.



$defaultValue

Float

The default value to be placed in the input text box.





Return parameters



Parameter

Variable Type

Description



$response

Float

The numeric value entered by the operator.





Examples:





// Prompt the user to select a number between 6 and 1000. Default to 500.

$prompt = "Please enter a number.";

$min = 6;

$max = 1000;

$default = 500;



$response = OperatorNumericInputPromptDefault($prompt, $min, $max, $default);





OperatorNumericInputPromptWithLocation

Previous Top Next



* * *



OperatorNumericInputPromptWithLocation

Usage:

$response = OperatorNumericInputPromptWithLocation($prompt, $minValue, $maxValue, $width, $height, $left, $top);



Description:

This function displays a prompt to the user that has a text box for the user to input a number. If the input is not numeric, less than the minimum value or more than the maximum, the prompt window will re-appear with a message stating why the input was rejected. This will continue until the user enters a valid number.





Remarks:

The word "Location" is used in the prompt functions to denote position and size instead of saying "WithPositionAndSize".

Function arguments



Parameter

Variable Type

Description



$prompt

String

String displayed to the user.



$minValue

Float

The minimum value of the user entered number.



$maxValue

Float

The maximum value of the user entered number.



$width

Integer

The width of the prompt window in pixels.



$height

Integer

The height of the prompt window in pixels.



$left

Integer

The location of the left edge of the prompt window in pixels measured from the left edge of the screen.



$top

Integer

The location of the top edge of the prompt window in pixels measured from the top edge of the screen.





Return parameters



Parameter

Variable Type

Description



$response

Float

The numeric value entered by the operator.





Example(s):





// Prompt for a number between 6 and 1000.

$prompt = "This is the prompt.";

$minNum = 6;

$maxNum = 1000;

$width = 600;

$height = 650;

$left = 20;

$top = 50;

$response = OperatorNumericInputPromptWithLocation($prompt, $minNum, $maxNum, $width, $height, $left, $top);





OperatorPicturePrompt

Previous Top Next



* * *



OperatorPicturePrompt

Usage:

OperatorPicturePrompt($PromptString,$GraphicFilePath,$PictureMode,$WindowHeight,$WindowWidth);



Description:

Prompts the Operator with a given string and accompanying graphic file. This operator prompt will automatically assume focus, and is a modal dialog box. If the image is not found at the location given, a blank dialog box is displayed, and no error is generated.

Function Arguments



Parameter

Variable Type

Description



$PromptString

String

The String which is displayed to the operator for instruction or notification purposes.



$GraphicFilePath

String

The path and filename for the graphic image to display. The following graphic formats are supported: GIF,TIFF,BMP,JPG



$PictureMode

String

The resizing mode for the graphic file, supported modes are:

"AUTOSIZE" = Automatically positions the image, size is unchanged

"CENTER" = Centers the image in the form, size is unchanged

"STRETCH" = Centers the image in the form, and sizes it to fit the dialog window



$WindowHeight

Integer

The height of the dialog box in pixels



$WindowWidth

Integer

The width of the dialogi box in pixels





Return Parameters



Parameter

Variable Type

Description



None





OperatorPicturePromptNonBlockingWithButtons

Previous Top Next



* * *



OperatorPicturePromptNonBlockingWithButtons

Usage:

$WindowHandle = OperatorPicturePromptNonBlockingWithButtons($PromptString,$GraphicFilePath,$PictureMode,$WindowHeight,$WindowWidth,$Button1Text,$Button2Text);

Description:

This function will prompt the operator with a graphic in a separate window, and allows the script to continue. Two programmable buttons can be displayed on the form. The operator prompt dialog continues to exist in a separate thread until it is disposed of with the CloseForm function.

Function arguments



Parameter

Variable Type

Description



$PromptString

String

The String which is displayed to the operator for instruction or notification purposes.



$GraphicFilePath

String

The path and filename for the graphic image to display. The following graphic formats are supported: GIF,TIFF,BMP,JPG



$PictureMode

String

The resizing mode for the graphic file, supported modes are:

"AUTOSIZE" = Automatically positions the image, size is unchanged

"CENTER" = Centers the image in the form, size is unchanged

"STRETCH" = Centers the image in the form, and sizes it to fit the dialog window



$WindowHeight

Integer

The height of the dialog box in pixels



$WindowWidth

Integer

The width of the dialog box in pixels



$Button1Text

String

The label for button 1. If this string is null the button will not be displayed.



$Button2Text

String

The label for button 2. If this string is null the button will not be displayed





Return arguments



Parameter

Variable Type

Description



$WindowHandle

Object

A handle to the operator dialog box. This can later be closed with the CloseForm function.





Example:

$window = OperatorPicturePromptNonBlockingWithButtons("wassup","c:\\import\\words.jpg", "CENTER", 500,500,"button1","button2");

$clicked = false;

while ($clicked==false)

{

$clicked = OperatorPicturePromptNonBlockingWithButtonsGetButtonState($window,"button1");

SleepMilliseconds(100);

}

UpdateStatus($clicked);

CloseForm($window);

End;





OperatorPicturePromptNonBlockingWithButtonsAndLocation

Previous Top Next



* * *



OperatorPicturePromptNonBlockingWithButtonsAndLocation

Usage:

$winHandle = OperatorPicturePromptNonBlockingWithButtonsAndLocation($prompt, $filePath, $pictureMode, $button1Text, $button2Text, $width, $height, $left, $top);



Description:

This function displays a picture to the user in a non-blocking window that has two buttons to close the prompt. The text on the buttons can be set by the script.





Remarks:

The state of the buttons can be read using the function, OperatorPicturePromptNonBlockingWithButtonsGetButtonState.

The window can be closed with the function, CloseForm.

The supported image formats are: BMP, GIF, JPG, PNG, TIFF.

The word "Location" is used in the prompt functions to denote position and size instead of saying "WithPositionAndSize".

Function arguments



Parameter

Variable Type

Description



$prompt

String

String displayed to the user.



$filePath

String

The path and filename for the graphic to display.



$pictureMode

String

The resizing mode for the image. The supported modes are:

· AUTOSIZE

· CENTER

· STRETCH



$button1Text

String

The text that will appear on the button on the left of the window. If left blank, the default of "OK" will be used.



$button2Text

String

The text that will appear on the button on the right of the window. If left blank, the default of "Cancel" will be used.



$width

Integer

The width of the prompt window in pixels.



$height

Integer

The height of the prompt window in pixels.



$left

Integer

The location of the left edge of the prompt window in pixels measured from the left edge of the screen.



$top

Integer

The location of the top edge of the prompt window in pixels measured from the top edge of the screen.





Return parameters



Parameter

Variable Type

Description



$winHandle

Object

A handle to the window that was opened. Passed to other functions to read the button state or close the window.





Example(s):





// Fill the prompt with the picture.

$prompt = "This is the prompt.";

$picture = "C:\\Graphics\\Prompt1.jpg";

$mode = "STRETCH";

$btn1 = "PASS";

$btn2 = "FAIL";

$width = 600;

$height = 650;

$left = 20;

$top = 50;

$handle = OperatorPicturePromptWithLocation($prompt, $picture, $mode, $btn1, $btn2, $width, $height, $left, $top);





OperatorPicturePromptNonBlockingWithButtonsGetButtonState

Previous Top Next



* * *



OperatorPicturePromptNonBlockingWithButtonsGetButtonState

Usage:

$ButtonState = OperatorPicturePromptNonBlockingGetButtonState($WindowHandle, $ButtonName);

Description:

This function will return the state of the requested button. TRUE indicates that the button has been pressed. The state of the button will be cleared after this function is called.

Function arguments



Parameter

Variable Type

Description



$WindowHandle

String

The handle that was returned when the form was created.



$ButtonName

String

The text name of the button whose state is requested.





Return arguments



Parameter

Variable Type

Description



$ButtonState

Boolean

The state of the requested button. TRUE indicates that the button has been pressed.





Example:

$window = OperatorPicturePromptNonBlockingWithButtons("wassup","c:\\import\\words.jpg", "CENTER", 500,500,"button1","button2");

$clicked = false;

while ($clicked==false)

{

$clicked = OperatorPicturePromptNonBlockingWithButtonsGetButtonState($window,"button1");

SleepMilliseconds(100);

}

UpdateStatus($clicked);

CloseForm($window);

End;





OperatorPicturePromptOptionsHotkeys

Previous Top Next



* * *



OperatorPicturePromptOptionsHotkeys



Usage:

$ButtonText = OperatorPicturePromptOptionsHotkeys($PromptString,$GraphicFilePath,$PictureMode,$WindowHeight,$WindowWidth,$ButtonOptions);





Description:

Prompts the Operator with a given string and accompanying graphic file. This operator prompt will automatically assume focus, and is a modal dialog box. If the image is not found at the location given, a blank dialog box is displayed, and no error is generated.

This is a more flexible version of the OperatorPicturePrompt command. This function allows you to also specify the number and text displays of the buttons and returns the text of the button that is clicked.

The buttons in this function respond to Hotkeys. The keys assigned are <CTRL-1> to <CTRL-0>. The first button will activate when <CTRL-1> is pressed, the second button when <CTRL-2> is pressed and so on up to a maximum of 10 buttons or the number of buttons whichever is less.

Function arguments



Parameter

Variable Type

Description



$PromptString

String

The String which is displayed to the operator for instruction or notification purposes.



$GraphicFilePath

String

The path and filename for the graphic image to display. The following graphic formats are supported: GIF, TIFF, BMP, JPG, PNG.



$PictureMode

String

The resizing mode for the graphic file, supported modes are:

"AUTOSIZE" = Automatically positions the image, size is unchanged

"CENTER" = Centers the image in the form, size is unchanged

"STRETCH" = Centers the image in the form, and sizes it to fit the dialog window



$WindowHeight

Integer

The height of the dialog box in pixels



$WindowWidth

Integer

The width of the dialog box in pixels



$ButtonOptions

String

A text string containing the text of each button that you would like displayed on the operator prompt form separated by semicolons. For example, "Red;Green;Blue"





Return arguments



Parameter

Variable Type

Description



$ButtonText

String

The text of the button clicked on by the operator.





Example:

$ButtonText = OperatorPicturePromptOptionsHotkeys("Test Prompt", "C:\\testPic.jpg", "CENTER", 500, 500 ,"red;green;blue");





OperatorPicturePromptOptionsHotkeysWithPosition

Previous Top Next



* * *



OperatorPicturePromptOptionsHotkeysWithPosition

Usage:

$ButtonText = OperatorPicturePromptOptionsHotkeysWithPosition($PromptString,$GraphicFilePath,$PictureMode,$WindowHeight,$WindowWidth,$ButtonOptions,$xPos,$yPos);



Description:

Prompts the Operator with a given string and accompanying graphic file. This operator prompt will automatically assume focus, and is a modal dialog box. If the image is not found at the location given, a blank dialog box is displayed, and no error is generated.

This is a more flexible version of the OperatorPicturePrompt command. This function allows you to also specify the number and text displays of the buttons and returns the text of the button that is clicked. The prompt window will be positioned on the screen at the specified X and Y coordinates.

The buttons in this function respond to Hotkeys. The keys assigned are <CTRL-1> to <CTRL-0>. The first button will activate when <CTRL-1> is pressed, the second button when <CTRL-2> is pressed and so on up to a maximum of 10 buttons or the number of buttons whichever is less.

Function arguments



Parameter

Variable Type

Description



$PromptString

String

The String which is displayed to the operator for instruction or notification purposes.



$GraphicFilePath

String

The path and filename for the graphic image to display. The following graphic formats are supported: GIF, TIFF, BMP, JPG, PNG.



$PictureMode

String

The resizing mode for the graphic file, supported modes are:

"AUTOSIZE" = Automatically positions the image, size is unchanged

"CENTER" = Centers the image in the form, size is unchanged

"STRETCH" = Centers the image in the form, and sizes it to fit the dialog window



$WindowHeight

Integer

The height of the dialog box in pixels



$WindowWidth

Integer

The width of the dialog box in pixels



$ButtonOptions

String

A text string containing the text of each button that you would like displayed on the operator prompt form separated by semicolons. For example, "Red;Green;Blue"



$xPos

Integer

The X coordinate of the top-left point of the picture prompt window



$yPos

Integer

The Y coordinate of the top-left point of the picture prompt window.





Return arguments



Parameter

Variable Type

Description



$ButtonText

String

The text of the button clicked on by the operator.





Example:

$ButtonText = OperatorPicturePromptOptionsHotkeysWithPosition("Test Prompt", "C:\\testPic.jpg", "CENTER", 500, 500, "red;green;blue", 100, 100);





OperatorPicturePromptSpecifyOptions

Previous Top Next



* * *



OperatorPicturePromptSpecifyOptions

Usage:

$ButtonText = OperatorPicturePromptSpecifyOptions($PromptString,$GraphicFilePath,$PictureMode,$WindowHeight,$WindowWidth,$ButtonOptions);



Description:

Prompts the Operator with a given string and accompanying graphic file. This operator prompt will automatically assume focus, and is a modal dialog box. If the image is not found at the location given, a blank dialog box is displayed, and no error is generated.

This is a more flexible version of the OperatorPicturePrompt command. This function allows you to also specify the number and text displays of the buttons and returns the text of the button that is clicked.

Function arguments



Parameter

Variable Type

Description



$PromptString

String

The String which is displayed to the operator for instruction or notification purposes.



$GraphicFilePath

String

The path and filename for the graphic image to display. The following graphic formats are supported: GIF, TIFF, BMP, JPG, PNG.



$PictureMode

String

The resizing mode for the graphic file, supported modes are:

"AUTOSIZE" = Automatically positions the image, size is unchanged

"CENTER" = Centers the image in the form, size is unchanged

"STRETCH" = Centers the image in the form, and sizes it to fit the dialog window



$WindowHeight

Integer

The height of the dialog box in pixels



$WindowWidth

Integer

The width of the dialog box in pixels



$ButtonOptions

String

A text string containing the text of each button that you would like displayed on the operator prompt form separated by semicolons. For example, "Red;Green;Blue"





Return arguments



Parameter

Variable Type

Description



$ButtonText

String

The text of the button clicked on by the operator.





Example:

$ButtonText = OperatorPicturePromptSpecifyOptions("Test Prompt", "C:\\testPic.jpg", "CENTER", 500, 500, "red;green;blue");





OperatorPicturePromptSpecifyOptionsWithPosition

Previous Top Next



* * *



OperatorPicturePromptSpecifyOptionsWithPosition

Usage:

$ButtonText = OperatorPicturePromptSpecifyOptionsWithPosition($PromptString,$GraphicFilePath,$PictureMode,$WindowHeight,$WindowWidth,$ButtonOptions,$xPos,$yPos);



Description:

Prompts the Operator with a given string and accompanying graphic file. This operator prompt will automatically assume focus, and is a modal dialog box. If the image is not found at the location given, a blank dialog box is displayed, and no error is generated.

This is a more flexible version of the OperatorPicturePrompt command. This function allows you to also specify the number and text displays of the buttons and returns the text of the button that is clicked. The prompt window will be positioned on the screen at the specified X and Y coordinates.

Function arguments



Parameter

Variable Type

Description



$PromptString

String

The String which is displayed to the operator for instruction or notification purposes.



$GraphicFilePath

String

The path and filename for the graphic image to display. The following graphic formats are supported: GIF, TIFF, BMP, JPG, PNG.



$PictureMode

String

The resizing mode for the graphic file, supported modes are:

"AUTOSIZE" = Automatically positions the image, size is unchanged

"CENTER" = Centers the image in the form, size is unchanged

"STRETCH" = Centers the image in the form, and sizes it to fit the dialog window



$WindowHeight

Integer

The height of the dialog box in pixels



$WindowWidth

Integer

The width of the dialog box in pixels



$ButtonOptions

String

A text string containing the text of each button that you would like displayed on the operator prompt form separated by semicolons. For example, "Red;Green;Blue"



$xPos

Integer

The X coordinate of the top-left point of the picture prompt window



$yPos

Integer

The Y coordinate of the top-left point of the picture prompt window.





Return arguments



Parameter

Variable Type

Description



$ButtonText

String

The text of the button clicked on by the operator.





Example:

$ButtonText = OperatorPicturePromptSpecifyOptionsWithPosition("Test Prompt", "C:\\testPic.jpg", "CENTER", 500, 500, "red;green;blue", 100, 100);





OperatorPicturePromptWithLocation

Previous Top Next



* * *



OperatorPicturePromptWithLocation

Usage:

OperatorPicturePromptWithLocation($prompt, $filePath, $pictureMode, $width, $height, $left, $top);



Description:

This function displays a picture to the user and a has a button to close the prompt.





Remarks:

The word "Location" is used in the prompt functions to denote position and size instead of saying "WithPositionAndSize".

The supported image formats are: BMP, GIF, JPG, PNG, TIFF.

Function arguments



Parameter

Variable Type

Description



$prompt

String

String displayed to the user.



$filePath

String

The path and filename for the graphic to display.



$pictureMode

String

The resizing mode for the image. The supported modes are:

· AUTOSIZE

· CENTER

· STRETCH



$width

Integer

The width of the prompt window in pixels.



$height

Integer

The height of the prompt window in pixels.



$left

Integer

The location of the left edge of the prompt window in pixels measured from the left edge of the screen.



$top

Integer

The location of the top edge of the prompt window in pixels measured from the top edge of the screen.





Return parameters



Parameter

Variable Type

Description



None





Example(s):





// Fill the prompt with the picture.

$prompt = "This is the prompt.";

$picture = "C:\\Graphics\\Prompt1.jpg";

$mode = "STRETCH";

$width = 600;

$height = 650;

$left = 20;

$top = 50;

OperatorPicturePromptWithLocation($prompt, $picture, $mode, $width, $height, $left, $top);





OperatorPrompt

Previous Top Next



* * *



OperatorPrompt

Usage:

$output = OperatorPrompt($PromptString, $ButtonOptions);

Description:

Prompts the Operator with a given string, and returns the text of the button selected. This operator prompt will automatically assume focus, and is a modal dialog box.

Function Arguments



Parameter

Variable Type

Description



$PromptString

String

The String which is displayed to the operator for instruction or notification purposes.



$ButtonOptions

String

The Button Options supplied for the operator to provide feedback to the test script. Valid Options are:

"AbortRetryIgnore"

"OKCancel"

"RetryCancel"

"YesNo"

"YesNoCancel"

"OK"





Return Parameters



Parameter

Variable Type

Description



$output

String

The Text Label Of The Button Which was selected by the operator.





OperatorPromptCreateGaugeNonBlocking

Previous Top Next



* * *



OperatorPromptCreateGaugeNonBlocking



Usage:





$GaugeForm = OperatorPromptCreateGaugeNonBlocking($Instructions, $MinValue, $MaxValue, $LowerLimit, $UpperLimit, $InitialValue, $GaugeArc);





Description:





This function displays the following gauge window to the operator which remains on the screen while script execution continues. The gauge value can be updated by using the OperatorPromptNonBlockingGaugeUpdate function.





When the value is within the limits specified by the $LowerLimit and $UpperLimit functions, the current value box will turn green, otherwise it remains red while the current value is outside of the allowable limits.

The gauge form window can be closed at any time by using the CloseForm function.





The Arc of the gauge can be modified by using the $GaugeArc parameter which specifies the total number of degrees that the gauge's arc will span.





Function arguments



Parameter

Variable Type

Description



$Instructions

String

The text shown to the operator at the top of the window display.



$MinValue

Float

The minimum value for the gauge.



$MaxValue

Float

The maximum value for the gauge.



$LowerLimit

Float

The lower limit of the acceptable value range.



$UpperLimit

Float

The upper limit of the acceptable value range.



$InitialValue

Float

The starting value for the gauge.



$GaugeArc

Float

The number of degrees that the gauge arc will occupy. This can be useful for creating different styles of gauges for display to the operator.





Return parameters



Parameter

Variable Type

Description



$Gauge

Object

The handle to the newly created window which can be passed to subsequent functions to update or close the gauge window.





Example(s):

$MyGauge = OperatorPromptCreateGaugeNonBlocking("Here are some instructions for the Operator...", 100, 500, 300, 400, 325, 280);

Sleep(2);

OperatorPromptNonBlockingGaugeUpdate($MyGauge, 50);

Sleep(2);

OperatorPromptNonBlockingGaugeUpdate($MyGauge, 100);

Sleep(2);

OperatorPromptNonBlockingGaugeUpdate($MyGauge, 200);

Sleep(2);

OperatorPromptNonBlockingGaugeUpdate($MyGauge, 300);

Sleep(2);

OperatorPromptNonBlockingGaugeUpdate($MyGauge, 400);

Sleep(2);

OperatorPromptNonBlockingGaugeUpdate($MyGauge, 500);

Sleep(2);

OperatorPromptNonBlockingGaugeUpdate($MyGauge, 600);

Sleep(2);

OperatorPromptNonBlockingGaugeUpdate($MyGauge, 700);

Sleep(2);





CloseForm($MyGauge);





OperatorPromptCreateGaugeNonBlockingWithPosition

Previous Top Next



* * *



OperatorPromptCreateGaugeNonBlockingWithPosition



Usage:





$GaugeForm = OperatorPromptCreateGaugeNonBlockingWithPosition($Instruct, $MinValue, $MaxValue, $LowerLimit, $UpperLimit, $InitialValue, $GaugeArc, $leftEdge, $topEdge);





Description:





This function displays the following gauge window to the operator which remains on the screen while script execution continues. The gauge value can be updated by using the OperatorPromptNonBlockingGaugeUpdate function.





When the value is within the limits specified by the $LowerLimit and $UpperLimit functions, the current value box will turn green, otherwise it remains red while the current value is outside of the allowable limits.





The Gauge window will show up at a location on screen defined by $leftEdge and $topEdge.

The gauge form window can be closed at any time by using the CloseForm function.





The Arc of the gauge can be modified by using the $GaugeArc parameter which specifies the total number of degrees that the gauge's arc will span.





Function arguments



Parameter

Variable Type

Description



$Instruct

String

The text shown to the operator at the top of the window display.



$MinValue

Float

The minimum value for the gauge.



$MaxValue

Float

The maximum value for the gauge.



$LowerLimit

Float

The lower limit of the acceptable value range.



$UpperLimit

Float

The upper limit of the acceptable value range.



$InitialValue

Float

The starting value for the gauge.



$GaugeArc

Float

The number of degrees that the gauge arc will occupy. This can be useful for creating different styles of gauges for display to the operator.



$leftEdge

Integer

The left edge of the gauge window in pixels measured from the left edge of the screen.



$topEdge

Integer

The top edge of the gauge window in pixels measured from the top edge of the screen.





Return parameters



Parameter

Variable Type

Description



$GaugeForm

Object

The handle to the newly created window which can be passed to subsequent functions to update or close the gauge window.





Example(s):

$MyGauge = OperatorPromptCreateGaugeNonBlockingWithPosition("Here are some instructions for the Operator...", 100, 500, 300, 400, 325, 280, 1000, 250);

Sleep(2);

OperatorPromptNonBlockingGaugeUpdate($MyGauge, 50);

Sleep(2);

OperatorPromptNonBlockingGaugeUpdate($MyGauge, 100);

Sleep(2);

OperatorPromptNonBlockingGaugeUpdate($MyGauge, 200);

Sleep(2);

OperatorPromptNonBlockingGaugeUpdate($MyGauge, 300);

Sleep(2);

OperatorPromptNonBlockingGaugeUpdate($MyGauge, 400);

Sleep(2);

OperatorPromptNonBlockingGaugeUpdate($MyGauge, 500);

Sleep(2);

OperatorPromptNonBlockingGaugeUpdate($MyGauge, 600);

Sleep(2);

OperatorPromptNonBlockingGaugeUpdate($MyGauge, 700);

Sleep(2);





CloseForm($MyGauge);





OperatorPromptCreateTuningBarNonBlocking

Previous Top Next



* * *



OperatorPromptCreateTuningBarNonBlocking



Usage:





$TuningForm = OperatorPromptCreateTuningBarNonBlocking($Instructions, $MinValue, $MaxValue, $LowerLimit, $UpperLimit, $InitialValue);





Description:





This function displays the following "Tuning Bar" window to the operator which remains on the screen while script execution continues. The tuning bar value and instructions can be updated by using the OperatorPromptNonBlockingTuningBarUpdate function.





When the value is within the limits specified by the $LowerLimit and $UpperLimit functions, the current value box will turn green, otherwise it remains red while the current value is outside of the allowable limits.

The tuning bar form window can be closed at any time by using the CloseForm function.





Function arguments



Parameter

Variable Type

Description



$Instructions

String

The text shown to the operator at the top of the window display.



$MinValue

Float

The minimum value for the tuning bar.



$MaxValue

Float

The maximum value for the tuning bar.



$LowerLimit

Float

The lower limit of the acceptable value range.



$UpperLimit

Float

The upper limit of the acceptable value range.



$InitialValue

Float

The starting value for the tuning bar.





Return parameters



Parameter

Variable Type

Description



$TuningForm

Object

The handle to the newly created window which can be passed to subsequent functions to update or close the tuning bar window.





Example(s):





$TuningForm = OperatorPromptCreateTuningBarNonBlocking("Here are Instructions", 20, 90, 58.5, 72.5, 68.42, 300, 150);

Sleep(2);

$Closed = OperatorPromptNonBlockingTuningBarUpdate($TuningForm, 71.2, "New Message 1");

UpdateStatus($Closed);

Sleep(2);

$Closed = OperatorPromptNonBlockingTuningBarUpdate($TuningForm, 74.3, "New Message 2");

UpdateStatus($Closed);

Sleep(2);

$Closed = OperatorPromptNonBlockingTuningBarUpdate($TuningForm, 75.6, "New Message 3");

UpdateStatus($Closed);

Sleep(2);

$Closed = OperatorPromptNonBlockingTuningBarUpdate($TuningForm, 76.3, "New Message 5");

UpdateStatus($Closed);

Sleep(2);

$Closed = OperatorPromptNonBlockingTuningBarUpdate($TuningForm, 45.5, "New Message 6");

UpdateStatus($Closed);

Sleep(2);

$Closed = OperatorPromptNonBlockingTuningBarUpdate($TuningForm, 71.2, "New Message 7");

UpdateStatus($Closed);

Sleep(2);

$Closed = OperatorPromptNonBlockingTuningBarUpdate($TuningForm, 71.99, "New Message 8");

UpdateStatus($Closed);

CloseForm($TuningForm);





OperatorPromptCreateTuningBarNonBlockingWithPosition

Previous Top Next



* * *



OperatorPromptCreateTuningBarNonBlockingWithPosition



Usage:





$TuningForm = OperatorPromptCreateTuningBarNonBlockingWithPosition($Instruct, $MinValue, $MaxValue, $LowerLimit, $UpperLimit, $InitialValue, $leftEdge, $topEdge);





Description:





This function displays the following "Tuning Bar" window to the operator which remains on the screen while script execution continues. The tuning bar value and instructions can be updated by using the OperatorPromptNonBlockingTuningBarUpdate function.





When the value is within the limits specified by the $LowerLimit and $UpperLimit functions, the current value box will turn green, otherwise it remains red while the current value is outside of the allowable limits.





The Tuning Bar window will show up at a location on screen defined by $leftEdge and $topEdge.

The tuning bar form window can be closed at any time by using the CloseForm function.





Function arguments



Parameter

Variable Type

Description



$Instruct

String

The text shown to the operator at the top of the window display.



$MinValue

Float

The minimum value for the tuning bar.



$MaxValue

Float

The maximum value for the tuning bar.



$LowerLimit

Float

The lower limit of the acceptable value range.



$UpperLimit

Float

The upper limit of the acceptable value range.



$InitialValue

Float

The starting value for the tuning bar.



$leftEdge

Integer

The left edge of the tuning bar window in pixels measured from the left edge of the screen.



$topEdge

Integer

The top edge of the tuning bar window in pixels measured from the top edge of the screen.





Return parameters



Parameter

Variable Type

Description



$TuningForm

Object

The handle to the newly created window which can be passed to subsequent functions to update or close the tuning bar window.





Example(s):





$TuningForm = OperatorPromptCreateTuningBarNonBlockingWithPosition("Here are Instructions", 20, 90, 58.5, 72.5, 68.42, 300, 150);

Sleep(2);

$Closed = OperatorPromptNonBlockingTuningBarUpdate($TuningForm, 71.2, "New Message 1");

UpdateStatus($Closed);

Sleep(2);

$Closed = OperatorPromptNonBlockingTuningBarUpdate($TuningForm, 74.3, "New Message 2");

UpdateStatus($Closed);

Sleep(2);

$Closed = OperatorPromptNonBlockingTuningBarUpdate($TuningForm, 75.6, "New Message 3");

UpdateStatus($Closed);

Sleep(2);

$Closed = OperatorPromptNonBlockingTuningBarUpdate($TuningForm, 76.3, "New Message 5");

UpdateStatus($Closed);

Sleep(2);

$Closed = OperatorPromptNonBlockingTuningBarUpdate($TuningForm, 45.5, "New Message 6");

UpdateStatus($Closed);

Sleep(2);

$Closed = OperatorPromptNonBlockingTuningBarUpdate($TuningForm, 71.2, "New Message 7");

UpdateStatus($Closed);

Sleep(2);

$Closed = OperatorPromptNonBlockingTuningBarUpdate($TuningForm, 71.99, "New Message 8");

UpdateStatus($Closed);

CloseForm($TuningForm);





OperatorPromptForFile

Previous Top Next



* * *



OperatorPromptForFile

Usage:



$FileName = OperatorPromptForFile($TitleString, $InitialFolder, $Filters);





Description:





This function is used to open the File dialog prompt and display it to the operator.



Function arguments



Parameter

Variable Type

Description



$TitleString

String

The text shown on the Open File Dialog Display



$InitialFolder

String

The initial folder to which the Open File Dialog will be shown.



$Filters

String

The filter string to be displayed on the dialog. The format is the same as the MFC style filter string for file dialogs:

Example: Text Files (*.txt) | Binary Files (*.bin)





Return parameters



Parameter

Variable Type

Description



$FileName

String





Example(s):





$FileName = OperatorPromptForFile("Display String","c:\\","Text Files (*.txt)|");





OperatorPromptNonBlocking

Previous Top Next



* * *



OperatorPromptNonBlocking

Usage:

$WindowHandle = OperatorPromptNonBlocking($PromptString,$Height,$Width);

Description:

This function will prompt the operator in a separate window, and allows the script to continue. The operator prompt dialog continues to exist in a separate thread until it is disposed of with the CloseForm function.

Function Arguments



Parameter

Variable Type

Description



$PromptString

String

The String which is displayed to the operator for instruction or notification purposes.



$Height

Integer

The height in pixels of the prompt dialog box



$Width

Integer

The width in pixels of the prompt dialog box





Return Parameters



Parameter

Variable Type

Description



$WindowHandle

Object

A handle to the operator dialog box. This can later be closed with the CloseForm function.





OperatorPromptNonBlockingGaugeUpdate

Previous Top Next



* * *



OperatorPromptNonBlockingGaugeUpdate

Usage:



$FormClosed =OperatorPromptNonBlockingGaugeUpdate($Form, $Value);





Description:





This function is used to update the current value display on a gauge form that has been created using the OperatorPromptCreateGaugeNonBlocking script command.





In the event that the value supplied for the gauge is less than or greater than the minimum or maximum values for the gauge, it's range will be automatically updated to include the new value.





The function returns a boolean variable indicating whether or not the form has been closed by the user.

Function arguments



Parameter

Variable Type

Description



$Form

Object

A handle to the form created using the OperatorPromptCreateGaugeNonBlocking function.



$Value

Float

The desired value to display on the gauge control.





Return parameters



Parameter

Variable Type

Description



$FormClosed

Boolean

A boolean value indicating whether or not the form has been closed.

· False = form is still visible

· True = form has been closed and is no longer visible





Example(s):





$MyGauge = OperatorPromptCreateGaugeNonBlocking("Here are some instructions for the Operator...",100,500,300,400,325,280);

Sleep(2);

OperatorPromptNonBlockingGaugeUpdate($MyGauge,50);

Sleep(2);

OperatorPromptNonBlockingGaugeUpdate($MyGauge,100);

Sleep(2);

OperatorPromptNonBlockingGaugeUpdate($MyGauge,200);

Sleep(2);

OperatorPromptNonBlockingGaugeUpdate($MyGauge,300);

Sleep(2);

OperatorPromptNonBlockingGaugeUpdate($MyGauge,400);

Sleep(2);

OperatorPromptNonBlockingGaugeUpdate($MyGauge,500);

Sleep(2);

OperatorPromptNonBlockingGaugeUpdate($MyGauge,600);

Sleep(2);

OperatorPromptNonBlockingGaugeUpdate($MyGauge,700);

Sleep(2);





CloseForm($MyGauge);





OperatorPromptNonBlockingGetButtonState

Previous Top Next



* * *



OperatorPromptNonBlockingGetButtonState

Usage:

$ButtonState = OperatorPromptNonBlockingGetButtonState($WindowHandle, $ButtonName);

Description:

This function will return the state of the requested button. TRUE indicates that the button has been pressed. The state of the button will be cleared after this function is called.

Function Arguments



Parameter

Variable Type

Description



$WindowHandle

Object

The handle that was returned when the form was created.



$ButtonName

String

Text name of the button whose state is requested





Return Parameters



Parameter

Variable Type

Description



$ButtonState

Boolean

The state of the requested button. TRUE indicates that the button has been pressed.





OperatorPromptNonBlockingKeepOnTop

Previous Top Next



* * *



OperatorPromptNonBlockingKeepOnTop



Usage:

OperatorPromptNonBlockingKeepOnTop($windowHandle, $keepOnTop);



Description:

This function will force the non-blocking prompt to be on top of all other windows or remove that ability (other windows can be on top of the prompt).



Remarks:

The prompt must already have been opened with OperatorPromptNonBlocking.



If the prompt is not already open, the function will fail.



Function arguments



Parameter

Variable Type

Description



$windowHandle

Object

The handle to the prompt that was previously opened using OperatorPromptNonBlocking.



$keepOnTop

Boolean

Whether the prompt should stay on top of all other windows. true = stay on top, false = do not stay on top.





Return parameters



Parameter

Variable Type

Description



None





Example:





// Open a non-blocking prompt.

$prompt = "This is a non-blocking prompt.";

$height = 150;

$width = 300;

$winHandle = OperatorPromptNonBlocking($fileName);



//Keep the prompt on top.

$keepOnTop = true;



OperatorPromptNonBlockingKeepOnTop($winHandle, $keepOnTop);



End;





OperatorPromptNonBlockingPositionToCell

Previous Top Next



* * *



OperatorPromptNonBlockingPositionToCell

Usage:



OperatorPromptNonBlockingPositionToCell($Form);





Description:





This function is used to set a non-blocking operator prompt directly over the test cell which created the user prompt.





This function can be useful when several test cells may be presenting non-blocking user-prompts to clarify which test cell opened which non-blocking user prompt.





Note: Because the non-blocking user prompt is running on a completely different thread than the test cell, it may be necessary to pause for a length of time between creating the non-blocking window and positioning it over the test cell to ensure that the prompt has been created by the other thread running in parallel with the test cell. This is especially true on a test station running very large numbers of test cells.

Function arguments



Parameter

Variable Type

Description



$Form

Object

A handle to the form created using the OperatorPromptNonBlocking function.





Return parameters



Parameter

Variable Type

Description



None





Example(s):





UpdateStatus("Starting Test");

$WindowHandle = OperatorPromptNonBlocking("Hello World!",75,75);

Sleep(1); // Provide Time For the Window to be created

OperatorPromptNonBlockingPositionToCell($WindowHandle);

Sleep(5);

CloseForm($MyGauge);





OperatorPromptNonBlockingTuningBarUpdate

Previous Top Next



* * *



OperatorPromptNonBlockingTuningBarUpdate

Usage:



$FormClosed =OperatorPromptNonBlockingTuningBarUpdate($Form,$Value,$Instructions);





Description:





This function is used to update the current value display on a tuning bar form that has been created using the OperatorPromptCreateTuningBarNonBlocking script command.





In the event that the value supplied for the tuning bar is less than or greater than the minimum or maximum values for the tuning bar, it's range will be automatically updated to include the new value.





The function returns a boolean variable indicating whether or not the form has been closed by the user.

Function arguments



Parameter

Variable Type

Description



$Form

Object

A handle to the form created using the OperatorPromptCreateTuningBarNonBlocking function.



$Value

Float

The desired value to display on the tuning bar control.



$Instructions

String

Updated Instructions to Display to the Operator





Return parameters



Parameter

Variable Type

Description



$FormClosed

Boolean

A boolean value indicating whether or not the form has been closed.

· False = form is still visible

· True = form has been closed and is no longer visible





Example(s):





$TuningForm = OperatorPromptCreateTuningBarNonBlocking("Here are Instructions",20,90,58.5,72.5,68.42);

Sleep(2);

$Closed = OperatorPromptNonBlockingTuningBarUpdate($TuningForm,71.2,"New Message 1");

UpdateStatus($Closed);

Sleep(2);

$Closed = OperatorPromptNonBlockingTuningBarUpdate($TuningForm,74.3,"New Message 2");

UpdateStatus($Closed);

Sleep(2);

$Closed = OperatorPromptNonBlockingTuningBarUpdate($TuningForm,75.6,"New Message 3");

UpdateStatus($Closed);

Sleep(2);

$Closed = OperatorPromptNonBlockingTuningBarUpdate($TuningForm,76.3,"New Message 5");

UpdateStatus($Closed);

Sleep(2);

$Closed = OperatorPromptNonBlockingTuningBarUpdate($TuningForm,45.5,"New Message 6");

UpdateStatus($Closed);

Sleep(2);

$Closed = OperatorPromptNonBlockingTuningBarUpdate($TuningForm,71.2,"New Message 7");

UpdateStatus($Closed);

Sleep(2);

$Closed = OperatorPromptNonBlockingTuningBarUpdate($TuningForm,71.99,"New Message 8");

UpdateStatus($Closed);

CloseForm($TuningForm);





End;





OperatorPromptNonBlockingUpdateMessage

Previous Top Next



* * *



OperatorPromptNonBlockingUpdateMessage

Usage:

OperatorPromptNonBlockingUpdateMessage($WindowHandle, $Message);

Description:

This function will update the prompt message in the form. The form must already have been created using the OperatorPromptNonBlocking function.

Function arguments



Parameter

Variable Type

Description



$WindowHandle

Object

That handle that was returned when the form was created.



$Message

String

The new message to prompt the user with.





Return parameters



Parameter

Variable Type

Description



None





Example:

// Open the form.

$WindowHandle = OperatorPromptNonBlocking("The Prompt String:", 200, 400);





// Change the prompt.

OperatorPromptNonBlockingUpdateMessage($WindowHandle, "A new prompt");





OperatorPromptNonBlockingWithButtons

Previous Top Next



* * *



OperatorPromptNonBlockingWithButtons

Usage:

$WindowHandle = OperatorPromptNonBlockingWithButtons($PromptString, $Height, $Width, $Button1Text ,$Button1Top ,$Button1Left ,$Button2Text ,$Button2Top ,$Button2Left);

Description:

This function will prompt the operator in a separate window, and allows the script to continue. Two programmable buttons can be displayed on the form. The operator prompt dialog continues to exist in a separate thread until it is disposed of with the CloseForm function.

Function Arguments



Parameter

Variable Type

Description



$PromptString

String

The String which is displayed to the operator for instruction or notification purposes.



$Height

Integer

The height in pixels of the prompt dialog box



$Width

Integer

The width in pixels of the prompt dialog box



$Button1Text

String

Label for button. If this string is null the button will not be displayed.



$Button1Top

Integer

Position of the buttons top edge in the form



$Button1Left

Integer

Position of the buttons left edge in the form.



$Button2Text

String

Label for button. If this string is null the button will not be displayed.



$Button2Top

Integer

Position of the buttons top edge in the form



$Button2Left

Integer

Position of the buttons left edge in the form.





Return Parameters



Parameter

Variable Type

Description



$WindowHandle

Object

A handle to the operator dialog box. This can later be closed with the CloseForm function.





OperatorPromptNonBlockingWithButtonsAndLocation

Previous Top Next



* * *



OperatorPromptNonBlockingWithButtonsAndLocation

Usage:

$winHandle = OperatorPromptNonBlockingWithButtonsAndLocation($prompt, $button1Text, $button1Left, $button1Top, $button2Test, $button2Left, $button2Top, $width, $height, $left, $top);



Description:

This function opens a non-blocking window with a message to the user and up to two buttons. The script, then, continues.





Remarks:

The prompt can be changed using the function, OperatorPromptNonBlockingWithButtonsUpdateMessage.

The status of the buttons can be checked with the function, OperatorPromptNonBlockingGetButtonState.

The prompt window is closed using the function, CloseForm.

Check for the window being closed without clicking on any button with the function, CheckFormExists.

The word "Location" is used in the prompt functions to denote position and size instead of saying "WithPositionAndSize".

Function arguments



Parameter

Variable Type

Description



$prompt

String

String displayed to the user.



$button1Text

String

The text to show on button 1.



$button1Left

Integer

The left edge of button 1 relative to the left edge of the prompt window.



$button1Top

Integer

The top edge of button 1 relative to the top edge of the prompt window.



$button2Text

String

The text to show on button 2.



$button2Left

Integer

The left edge of button 2 relative to the left edge of the prompt window.



$button2Top

Integer

The top edge of button 2 relative to the top edge of the prompt window.



$width

Integer

The width of the prompt window in pixels.



$height

Integer

The height of the prompt window in pixels.



$left

Integer

The location of the left edge of the prompt window in pixels measured from the left edge of the screen.



$top

Integer

The location of the top edge of the prompt window in pixels measured from the top edge of the screen.





Return parameters



Parameter

Variable Type

Description



$winHandle

Object

A handle to the prompt window that can be passed to other functions.





Example(s):





// Set up the prompt variables.

$prompt = "This is the prompt.";

$btn1Txt = "Button 1";

$btn1Left = 20;

$btn1Top = 550;

$btn2Txt = "Button 2";

$btn2Left = 450;

$btn2Top = 550;

$width = 600;

$height = 650;

$left = 20;

$top = 50;





$handle = OperatorPromptNonBlockingWithButtonsAndLocation($prompt, $btn1Txt, $btn1Left, $btn1Top, $btn2Txt, $btn2Left, $btn2Top, $width, $height, $left, $top);





// Check for the window closed or a button clicked.

$clicked = false;

while (!$clicked)

{

$exists = CheckFormExists($handle);

$state1 = OperatorPromptNonBlockingGetButtonState($handle, $btn1Txt);

$state2 = OperatorPromptNonBlockingGetButtonState($handle, $btn2Txt);

$clicked = $state1 || $state2 || !$exists;

}





$btnStr = "No button";

if ($state1)

{

$btnStr = $btn1Txt;

}

if ($state2)

{

$btnStr = $btn2Txt;

}





$outStr = "Button pressed:\t" + $btnStr;

UpdateStatus($outStr);





OperatorPromptNonBlockingWithButtonsUpdateMessage

Previous Top Next



* * *



OperatorPromptNonBlockingWithButtonsUpdateMessage

Usage:

OperatorPromptNonBlockingWithButtonsUpdateMessage($WindowHandle,$Message);

Description:

This function will update the prompt message in the form.

Function Arguments



Parameter

Variable Type

Description



$WidowHandle

Object

The handle that was returned when the form was created



$Message

String

The new prompt string for the message.





Return Parameters



Parameter

Variable Type

Description



none





OperatorPromptNonBlockingWithInput

Previous Top Next



* * *



OperatorPromptNonBlockingWithInput

Usage:

$Handle = OperatorPromptNonBlockingWithInput($Message, $Height, $Width, $InputTop, $InputLeft, $Button1Text, $Button1Top, $Button1Left, $Button2Text, $Button2Top, $Button2Left);

Description:

This function will prompt the operator in a separate window, and allows the script to continue. An input text box and two programmable buttons can be displayed on the form. The operator prompt dialog continues to exist in a separate thread until it is disposed of with the CloseForm function.

Function arguments



Parameter

Variable Type

Description



$Message

String

A message that will be shows to the user at the top of the prompt window.



$Height

Integer

The height of the prompt window in pixels.



$Width

Integer

The width of the prompt window in pixels.



$InputTop

Integer

The top edge of the input text box in pixels.



$InputLeft

Integer

The left edge of the input text box in pixels.



$Button1Text

String

The text displayed on the first button. If left blank, the button will not be displayed.



$Button1Top

Integer

The top edge of button 1 in pixels.



$Button2Left

Integer

The left edge of button 1 in pixels.



$Button2Text

String

The text displayed on the second button. If left blank, the button will not be displayed.



$Button2Top

Integer

The top edge of button 2 in pixels.



$Button2Left

Integer

The left edge of button 2 in pixels.





Return parameters



Parameter

Variable Type

Description



$Handle

Object

A pointer to the window opened as a prompt. This handle is used in other functions to access the parts of this window.





Example:

// Set up the prompting variables.

$pPrompt = "Enter some data and click a button.";

$pHeight = 200;

$pWidth = 400;

$pInpTop = 85;

$pInpLeft = 85;

$pBtn1 = "OK";

$pBtn1Top = 135;

$pBtn1Left = 95;

$pBtn2 = "Cancel";

$pBtn2Top = 135;

$pBtn2Left = 275;





$WindowHandle = OperatorPromptNonBlockingWithInput($pPrompt, $pHeight, $pWidth, $pInpTop, $pInpLeft, $pBtn1, $pBtn1Top, $pBtn1Left, $pBtn2, $pBtn2Top, $pBtn2Left);





OperatorPromptNonBlockingWithInputAndLocation

Previous Top Next



* * *



OperatorPromptNonBlockingWithInputAndLocation

Usage:

$winHandle = OperatorPromptNonBlockingWithInputAndLocation($prompt, $inputLeft, $inputTop, $button1Text, $button1Left, $button1Top, $button2Test, $button2Left, $button2Top, $width, $height, $left, $top);



Description:

This function opens a non-blocking window with a message to the user, a text box for user entered data and up to two buttons. The script, then, continues.





Remarks:

The prompt can be changed using the function, OperatorPromptNonBlockingWithInputUpdateMessage.

The status of the buttons can be checked with the function, OperatorPromptNonBlockingWithInputGetButtonState.

The user entered data can be read with the function, OperatorPromptNonBlockingWithInputGetInput.

The prompt window is closed using the function, CloseForm.

Check for the window being closed without clicking on any button with the function, CheckFormExists.

The word "Location" is used in the prompt functions to denote position and size instead of saying "WithPositionAndSize".

Function arguments



Parameter

Variable Type

Description



$prompt

String

String displayed to the user.



$inputLeft

Integer

The left edge of the input box relative to the left edge of the prompt window.



$inputTop

Integer

The top edge of the input box relative to the top edge of the prompt window.



$button1Text

String

The text to show on button 1.



$button1Left

Integer

The left edge of button 1 relative to the left edge of the prompt window.



$button1Top

Integer

The top edge of button 1 relative to the top edge of the prompt window.



$button2Text

String

The text to show on button 2.



$button2Left

Integer

The left edge of button 2 relative to the left edge of the prompt window.



$button2Top

Integer

The top edge of button 2 relative to the top edge of the prompt window.



$width

Integer

The width of the prompt window in pixels.



$height

Integer

The height of the prompt window in pixels.



$left

Integer

The location of the left edge of the prompt window in pixels measured from the left edge of the screen.



$top

Integer

The location of the top edge of the prompt window in pixels measured from the top edge of the screen.





Return parameters



Parameter

Variable Type

Description



$winHandle

Object

A handle to the prompt window that can be passed to other functions.





Example(s):





// Set up the prompt variables.

$prompt = "This is the prompt.";

$inpLeft = 30;

$inpTop = 300;

$btn1Txt = "Button 1";

$btn1Left = 20;

$btn1Top = 550;

$btn2Txt = "Button 2";

$btn2Left = 450;

$btn2Top = 550;

$width = 600;

$height = 650;

$left = 20;

$top = 50;





$handle = OperatorPromptNonBlockingWithInputAndLocation($prompt, $inpLeft, $inpTop, $btn1Txt, $btn1Left, $btn1Top, $btn2Txt, $btn2Left, $btn2Top, $width, $height, $left, $top);





// Check for the window closed or a button clicked.

$clicked = false;

while (!$clicked)

{

$exists = CheckFormExists($handle);

$state1 = OperatorPromptNonBlockingWithInputGetButtonState($handle, $btn1Txt);

$state2 = OperatorPromptNonBlockingWithInputGetButtonState($handle, $btn2Txt);

$clicked = $state1 || $state2 || !$exists;

}





$btnStr = "No button";

if ($state1)

{

$btnStr = $btn1Txt;

}

if ($state2)

{

$btnStr = $btn2Txt;

}





$outStr = "Button pressed:\t" + $btnStr;

UpdateStatus($outStr);





$input = OperatorPromptNonBlockingWithInputGetInput($handle);

$outStr = "Data Entered:\t" + $input;

UpdateStatus($outStr);





OperatorPromptNonBlockingWithInputGetButtonState

Previous Top Next



* * *



OperatorPromptNonBlockingWithInputGetButtonState

Usage:

$ButtonState = OperatorPromptNonBlockingWithInputGetButtonState($WindowHandle, $ButtonName);

Description:

This function will return the state of the requested button from the prompt window that was opened using OperatorPromptNonBlockingWithInput. TRUE indicates that the button has been pressed. The state of the button will be cleared after this function is called.

Function arguments



Parameter

Variable Type

Description



$WindowHandle

String

The handle that was returned when the form was created.



$ButtonName

String

The text name of the button whose state is requested.





Return arguments



Parameter

Variable Type

Description



$ButtonState

Boolean

The state of the requested button. TRUE indicates that the button has been pressed.





Example:

// Set up a prompt with input.

$pPrompt = "Enter some data and click a button.";

$pHeight = 200;

$pWidth = 400;

$pInpTop = 85;

$pInpLeft = 85;

$pBtn1 = "OK";

$pBtn1Top = 135;

$pBtn1Left = 95;

$pBtn2 = "Cancel";

$pBtn2Top = 135;

$pBtn2Left = 275;

$loopPause = 250;





// Open the prompt window.

$WindowHandle = OperatorPromptNonBlockingWithInput($pPrompt, $pHeight, $pWidth, $pInpTop, $pInpLeft, $pBtn1, $pBtn1Top, $pBtn1Left, $pBtn2, $pBtn2Top, $pBtn2Left);





// Now loop to check the button states.

$btnPress = false;

while (!$btnPress)

{

// Check button 1.

$btn1 = OperatorPromptNonBlockingWithInputGetButtonState($pHandle, $pBtn1);

if ($btn1)

{

UpdateStatus("Clicked on Button 1");

$btnPress = true;

}

// Check button 2.

$btn2 = OperatorPromptNonBlockingWithInputGetButtonState($pHandle, $pBtn2);

if ($btn2)

{

UpdateStatus("Clicked on Button 2");

$btnPress = true;

}





// If a button was not pressed, wait and then check again.

if (!$btnPress)

{

SleepMilliseconds($loopPause);

}

}





OperatorPromptNonBlockingWithInputGetInput

Previous Top Next



* * *



OperatorPromptNonBlockingWithInputGetInput

Usage:

$TextInput = OperatorPromptNonBlockingWithInputGetInput($WindowHandle);

Description:

This function will return the text that was entered in the text box from the prompt window that was opened using OperatorPromptNonBlockingWithInput.

Function arguments



Parameter

Variable Type

Description



$WindowHandle

String

The handle that was returned when the form was created.





Return arguments



Parameter

Variable Type

Description



$TextInput

String

The text that was in the text input box when this function was called.





Example:

// Set up a prompt with input.

$pPrompt = "Enter some data and click a button.";

$pHeight = 200;

$pWidth = 400;

$pInpTop = 85;

$pInpLeft = 85;

$pBtn1 = "OK";

$pBtn1Top = 135;

$pBtn1Left = 95;

$pBtn2 = "Cancel";

$pBtn2Top = 135;

$pBtn2Left = 275;

$newMessage = "Please press the other button.";

$loopPause = 250;





// Open the prompt window.

$WindowHandle = OperatorPromptNonBlockingWithInput($pPrompt, $pHeight, $pWidth, $pInpTop, $pInpLeft, $pBtn1, $pBtn1Top, $pBtn1Left, $pBtn2, $pBtn2Top, $pBtn2Left);





// Now loop to check the button states.

$btnPress = false;

while (!$btnPress)

{

// Check button 1.

$btn1 = OperatorPromptNonBlockingWithInputGetButtonState($pHandle, $pBtn1);

if ($btn1)

{

UpdateStatus("Clicked on Button 1");

$btnPress = true;

}

// Check button 2.

$btn2 = OperatorPromptNonBlockingWithInputGetButtonState($pHandle, $pBtn2);

if ($btn2)

{

UpdateStatus("Clicked on Button 2");

$btnPress = false;

// If user pressed button 2, update the message.

OperatorPromptNonBlockingWithInputUpdateMessage($pHandle, $newMessage);

}





// If a button was not pressed, wait and then check again.

if (!$btnPress)

{

SleepMilliseconds($loopPause);

}

}





// User clicked on the first button, so Get the Input and display it.

$pInput = OperatorPromptNonBlockingWithInputGetInput($pHandle);





$outStr = "The user entered :" + $pInput;

UpdateStatus($outStr);

CloseForm($pHandle);





End;





OperatorPromptNonBlockingWithInputUpdateMessage

Previous Top Next



* * *



OperatorPromptNonBlockingWithInputUpdateMessage

Usage:

OperatorPromptNonBlockingWithInputUpdateMessage($Handle, $NewMessage);

Description:

This function will change the prompt that is shown to the user in the specified Non-Blocking prompt that was opened using OperatorPromptNonBlockingWithInput.

Function arguments



Parameter

Variable Type

Description



$Handle

Object

A pointer to the window that was previously opened.



$NewMessage

String

The new message to replace the existing prompt message with.





Return parameters



Parameter

Variable Type

Description



None





Example:

// Set up a prompt with one button.

$pPrompt = "Enter some data and click the button.";

$pHeight = 200;

$pWidth = 400;

$pInpTop = 85;

$pInpLeft = 85;

$pBtn1 = "OK";

$pBtn1Top = 135;

$pBtn1Left = 95;





// Open the prompt window.

$WindowHandle = OperatorPromptNonBlockingWithInput($pPrompt, $pHeight, $pWidth, $pInpTop, $pInpLeft, $pBtn1, $pBtn1Top, $pBtn1Left, "", 0, 0);





// Now change the prompt.

$NewMessage = "Enter the data and click \"OK\".";

OperatorPromptNonBlockingWithInputUpdateMessage($WindowHandle, $NewMessage);





OperatorPromptNonBlockingWithLocation

Previous Top Next



* * *



OperatorPromptNonBlockingWithLocation

Usage:

$winHandle = OperatorPromptNonBlockingWithLocation($prompt, $width, $height, $left, $top);



Description:

This function opens a non-blocking window with the string displayed to the user.





Remarks:

The prompt message can be changed using OperatorPromptNonBlockingUpdateMessage.

Close the prompt window using CloseForm.

The word "Location" is used in the prompt functions to denote position and size instead of saying "WithPositionAndSize".

Function arguments



Parameter

Variable Type

Description



$prompt

String

String displayed to the user.



$width

Integer

The width of the prompt window in pixels.



$height

Integer

The height of the prompt window in pixels.



$left

Integer

The location of the left edge of the prompt window in pixels measured from the left edge of the screen.



$top

Integer

The location of the top edge of the prompt window in pixels measured from the top edge of the screen.





Return parameters



Parameter

Variable Type

Description



$winHandle

Object

A handle to the window that was opened. Passed to other functions to read the button state or close the window.





Example(s):





// Show Prompt to the user.

$prompt = "This is the prompt.";

$width = 600;

$height = 650;

$left = 20;

$top = 50;

OperatorPromptNonBlockingWithLocation($prompt, $width, $height, $left, $top);





OperatorPromptShowDocument

Previous Top Next



* * *



OperatorPromptShowDocument



Usage:





OperatorPromptShowDocument($PromptString,$URL,$WindowWidth,$WindowHeight);





Description:





This function shows a window to the operator with a text box containing instructions, and a web browser window that can be used to show different type of documents such as images, PDF files, static HTML files, or intranet/internet sites.





Note: Since this function uses an ActiveX web browser control, this function must be running under a single threaded apartment model. You can adjust this setting in the Global Cell Options window.

Function arguments



Parameter

Variable Type

Description



$PromptString

String

The text shown to the operator at the top of the window display.



$URL

String

The file path, or URL to the document to display to the operator.



$WindowWidth

String

The width of the displayed window.



$WindowHeight

String

The height of the displayed window.





Return parameters



Parameter

Variable Type

Description



None





Example(s):





OperatorPromptShowDocument("Showing an Image","C:\\brain.jpg",500,500);

OperatorPromptShowDocument("Showing a PDF","C:\\dxf.pdf",500,500);

OperatorPromptShowDocument("Showing an HTML document","C:\\myfile.html",500,500);

OperatorPromptShowDocument("Showing a web page","http://www.google.com",500,500);





OperatorPromptShowDocumentWithLocation

Previous Top Next



* * *



OperatorPromptShowDocumentWithLocation



Usage:

OperatorPromptShowDocumentWithLocation($prompt, $URL, $width, $height, $left, $top);





Description:

This function shows a window to the operator with a text box containing instructions, and a web browser window that can be used to show different type of documents such as images, PDF files, static HTML files, or intranet/internet sites.





Remarks:

The word "Location" is used in the prompt functions to denote position and size instead of saying "WithPositionAndSize".

Function arguments



Parameter

Variable Type

Description



$prompt

String

The text shown to the operator at the top of the window display.



$URL

String

The file path, or URL to the document to display to the operator.



$width

Integer

The width of the displayed window measured in pixels.



$height

Integer

The height of the displayed window measured in pixels.



$left

Integer

The left edge of the prompt window measured from the left edge of the screen - in pixels.



$top

Integer

The top edge of the prompt window measured from the top edge of the screen - in pixels.





Return parameters



Parameter

Variable Type

Description



None





Example(s):





OperatorPromptShowDocumentWithLocation("Showing an Image", "C:\\brain.jpg", 500, 500, 10, 10);

OperatorPromptShowDocumentWithLocation("Showing a PDF", "C:\\dxf.pdf", 500, 500, 200, 0);

OperatorPromptShowDocumentWithLocation("Showing an HTML document", "C:\\myfile.html", 500, 500, 0, 500);

OperatorPromptShowDocumentWithLocation("Showing a web page", "http://www.google.com", 500, 500, 0, 0);





OperatorPromptSpecifyOptions

Previous Top Next



* * *



OperatorPromptSpecifyOptions

Usage:

$ButtonText = OperatorPromptSpecifyOptions($PromptString,$ButtonOptions,$Width,$Height,XPosition,YPosition);

Description:

This is a more flexible version of the OperatorPrompt command. This function allows you to specify the message, the number and text displays of the buttons, the form height, the form width, and the position that the dialog box will be displayed on the screen.

Example:

$ReturnString = OperatorPromptSpecifyOptions("What is your favorite color? ","Red;Green;Blue;Yellow",300,200,800,300);

Function Arguments



Parameter

Variable Type

Description



$PromptString

String

The String which is displayed to the operator for instruction or notification purposes.



$ButtonOptions

String

A text string containin the text of each button that you would like displayed on the operator prompt form seperated by semicolons. . For example "Red;Green;Blue" will generate a dialog box with three buttons labeled with the colors specified.



$Width

Integer

The width of the dialog box in pixels



$Height

Integer

The height of the dialog box in pixels



$XPosition

Integer

The location of the left of the dialog box specified in pixels from the left of the display.



$YPosition

Integer

The top of the dialog box specified in pixels from the top of the display.





Return Parameters



Parameter

Variable Type

Description



$ButtonText

String

The text of the button clicked on by the operator





OperatorPromptSpecifyOptionsAndSizes

Previous Top Next



* * *



OperatorPromptSpecifyOptionsAndSizes



Usage:





$ButtonText = OperatorPromptSpecifyOptionsAndSizes($PromptString,$ButtonOptions,$Width,$Height,$XPosition,$YPosition,$FontSize,$ButtonWidth,$ButtonHeight);





Description:





This is a more flexible version of the OperatorPromptSpecifyOptions command. Along with the options provided by the OperatorPromptSpecifyOptions command (window text, button text, window size, window position), this function also allows the user to set the font height, button width and button height.





Function arguments



Parameter

Variable Type

Description



$PromptString

String

The String which is displayed to the operator for instruction or notification purposes.



$ButtonOptions

String

A text string containing the text of each button that you would like displayed on the operator prompt form separated by semicolons. . For example "Red;Green;Blue" will generate a dialog box with three buttons labeled with the colors specified.



$Width

Integer

The width of the dialog box in pixels



$Height

Integer

The height of the dialog box in pixels



$XPosition

Integer

The location of the left of the dialog box specified in pixels from the left of the display.



$YPosition

Integer

The top of the dialog box specified in pixels from the top of the display.



$FontSize

Integer

The size of the font to be displayed in the prompt window. This font size will be applied to both the message text and the button text.



$ButtonWidth

Integer

The width of the buttons to be displayed.



$ButtonHeight

Integer

The height of the buttons to be displayed.





Return parameters



Parameter

Variable Type

Description



$ButtonText

String

The text of the button clicked on by the operator





Example(s):





$ButtonText = OperatorPromptSpecifyOptionsAndSizes("hello","one;two;three",300,200,20,20,15,80,50);





OperatorShiftBarCreate

Previous Top Next



* * *



OperatorShiftBarCreate

Usage:

$WindowHandle = OperatorShiftBarCreate($Title, $LowerLimitValue, $UpperLimitValue, $StartValue);

Description:

This function will prompt the operator with a colored shiftbar in a seperate window, and allows the script to continue. The operator prompt dialog continues to exist in a seperate thread until it is disposed of with the CloseForm function. To update the shiftbar use the OperatorShiftBarUpdate function. There are 2 buttons placed on the dialog box, an OK button and an Cancel Button. If we press the cancel button the script will fail. If we press the OK button the window hides.



Function arguments



Parameter

Variable Type

Description



$Title

String

The String which is displayed to the operator for instruction or notification purposes.



$LowerLimitValue

Float

The lower limit of the prompt dialog box.



$UpperLimitValue

Float

The upper limit of the prompt dialog box.



$StartValue

Float

The start value of the prompt dialog box.





Return parameters



Parameter

Variable Type

Description



$WindowHandle

Object

A handle to the operator dialog box. This can later be closed with the CloseForm function.





Example(s):





$shiftBar = OperatorShiftBarCreate("Instructions to User", 50, 500, 350);





Sleep(2);

($return, $closed) = OperatorShiftBarUpdate($shiftBar, 400);





OperatorShiftBarCreateWithPosition

Previous Top Next



* * *



OperatorShiftBarCreateWithPostion

Usage:

$WindowHandle = OperatorShiftBarCreateWithPosition($Title, $LowerLimitValue, $UpperLimitValue, $StartValue, $leftEdge, $topEdge);

Description:

This function will prompt the operator with a colored shiftbar in a seperate window at the position specified by $leftEdge and $topEdge, and allows the script to continue. The operator prompt dialog continues to exist in a seperate thread until it is disposed of with the CloseForm function. To update the shiftbar use the OperatorShiftBarUpdate function. There are 2 buttons placed on the dialog box, an OK button and an Cancel Button. If we press the cancel button the script will fail. If we press the OK button the window hides.



Function arguments



Parameter

Variable Type

Description



$Title

String

The String which is displayed to the operator for instruction or notification purposes.



$LowerLimitValue

Float

The lower limit of the prompt dialog box.



$UpperLimitValue

Float

The upper limit of the prompt dialog box.



$StartValue

Float

The start value of the prompt dialog box.



$leftEdge

Integer

The left edge of the shift bar window in pixels measured from the left edge of the screen.



$topEdge

Integer

The top edge of the shift bar window in pixels measured from the top edge of the screen.





Return parameters



Parameter

Variable Type

Description



$WindowHandle

Object

A handle to the operator dialog box. This can later be closed with the CloseForm function.





Example(s):





$shiftBar = OperatorShiftBarCreateWithPosition("Instructions to User", 50, 500, 350, 1000, 250);





Sleep(2);

($return, $closed) = OperatorShiftBarUpdate($shiftBar, 400);





OperatorShiftBarUpdate

Previous Top Next



* * *



OperatorShiftBarUpdate

Usage:

($ReturnValue,$OperatorPressedContinue) = OperatorShiftBarUpdate($WindowHandle, $CurrentValue);

Description:

This function will update the operatorshiftbar window with the CurrentValue. The return value is the value we see on the dialog box.The operator prompt dialog continues to exist in a seperate thread until it is disposed of with the CloseForm

Example:

$CurrentValue = New("Float",9.102);

$windowHandle = OperatorShiftBarCreate($Title,$LowerLimit,$HigherLimit,$CurrentValue);

Label RemeasureAndUpdateWindow:

$CurrentValue = Add($CurrentValue,0.2);

SleepMicroseconds(100000);

($StringValue,$OperatorPresedContinue) = OperatorShiftBarUpdate($windowHandle,$CurrentValue);

ScriptIf($OperatorPresedContinue,"GOTO","LimitTest","RemeasureAndUpdateWindow");

Label LimitTest:

UpdateStatus("OperatorPresedContinue = true");

CloseForm($windowHandle);

NumericLimitTest($StringValue,$LowerLimit,$HigherLimit);

Function Arguments



Parameter

Variable Type

Description



$WindowHandle

Object

A handle to a windows form that has been created in a previous test step



$CurrentValue

Float

The current value we want to show in the prompt dialog box





Return Parameters



Parameter

Variable Type

Description



$ReturnValue

String

The value we see in the dialog box.



$OperatorPressedContinue

Bool

This variable returns TRUE if the operator pressed the continue button else the variable is FALSE





OperatorTextPanelsNonBlocking_Create

Previous Top Next



* * *



OperatorTextPanelsNonBlocking_Create

Usage:

$winHandle = OperatorTextPanelsNonBlocking_Create($prompt, $numPanels, $width, $height, $left, $top);



Description:

This function opens a non-blocking window with one to four text panels. The script can then replace or append to the text on each panel individually.





Remarks:

The text messages can be changed using OperatorTextPanelsNonBlocking_UpdateText.

Close the prompt window using CloseForm.

Function arguments



Parameter

Variable Type

Description



$prompt

String

String displayed to the user at the top of the window.



$numPanels

Integer

The number of text panels that will be in the window. Must be a number from 1 to 4.



$width

Integer

The width of the window in pixels.



$height

Integer

The height of the window in pixels.



$left

Integer

The location of the left edge of the window in pixels measured from the left edge of the screen.



$top

Integer

The location of the top edge of the window in pixels measured from the top edge of the screen.





Return parameters



Parameter

Variable Type

Description



$winHandle

Object

A handle to the window that was opened. Passed to other functions to change the text or close the window.





Example(s):





// Show Prompt to the user.

$prompt = "This is the prompt.";

$numPans = 3;

$width = 600;

$height = 650;

$left = 20;

$top = 50;

$handle = OperatorTextPanelsNonBlocking_Create($prompt, $numPans, $width, $height, $left, $top);





$text1 = "This is the text for panel 1.";

$text2 = "This is the text for panel 2.";

$text3 = "Add this text to panel 3.";





OperatorTextPanelsNonBlocking_UpdateText($handle, 1, $text1, "REPLACE");

OperatorTextPanelsNonBlocking_UpdateText($handle, 2, $text2, "REPLACE");

OperatorTextPanelsNonBlocking_UpdateText($handle, 3, $text3, "APPEND");





OperatorTextPanelsNonBlocking_UpdateText

Previous Top Next



* * *



OperatorTextPanelsNonBlocking_UpdateText

Usage:

OperatorTextPanelsNonBlocking_UpdateText($winHandle, $numPanel, $text, $action);



Description:

This function updates the text in one of up to four text panels. The function can replace or append to the text on the panel.





Remarks:

The text message window must have been opened with OperatorTextPanelsNonBlocking_Create.

Close the prompt window using CloseForm.

The panels are numbered starting from 0. For example, if there are 4 windows, they are numbered 0, 1, 2, and 3.

Function arguments



Parameter

Variable Type

Description



$winHandle

Object

Handle to a previously opened text window.



$numPanel

Integer

The number of the panel to update (0 based numbering).



$text

String

The new text to put on the panel.



$action

String

The method used to put the text into the text window. This must be "REPLACE" or "APPEND"





Return parameters



Parameter

Variable Type

Description



None





Example(s):





// Show Prompt to the user.

$prompt = "This is the prompt.";

$numPans = 3;

$width = 600;

$height = 650;

$left = 20;

$top = 50;

$handle = OperatorTextPanelsNonBlocking_Create($prompt, $numPans, $width, $height, $left, $top);





$text1 = "This is the text for panel 1.";

$text2 = "This is the text for panel 2.";

$text3 = "Add this text to panel 3.";





OperatorTextPanelsNonBlocking_UpdateText($handle, 0, $text1, "REPLACE");

OperatorTextPanelsNonBlocking_UpdateText($handle, 1, $text2, "REPLACE");

OperatorTextPanelsNonBlocking_UpdateText($handle, 2, $text3, "APPEND");





ShowDelayPicture

Previous Top Next



* * *



ShowDelayPicture

Shows an image for a predetermine amount of time, a control bar displays the progress. Window closes after time has lapsed. Parameters:





Image Path

String



Width

Integer



Height

Integer



Transparency

Integer (0 – 100)



Time to wait

Integer





Returns:





None





Example:





$ImagePath = New("String","C:\\Documents and Settings\\Administrator\\Desktop\\Imagen.bmp");

ShowDelayPicture($ImagePath,600,400,80,4);





ShowDelayPictureWithLocation

Previous Top Next



* * *



ShowDelayPictureWithLocation



Usage:

ShowDelayPictureWithLocation($path, $opacity, $time, $width, $height, $left, $top);





Description:

This function will pop up a window with a picture in it and delay for a set amount of time before closing. The opacity of the window is also configurable.





Remarks:

The supported image formats are: BMP, GIF, JPG, PNG, TIFF.

The word "Location" is used in the prompt functions to denote position and size instead of saying "WithPositionAndSize".

Function arguments



Parameter

Variable Type

Description



$path

String

The path and file name of the image to display.



$opacity

Integer

The opacity of the window with 0 being fully transparent and 100 being fully opaque.



$time

Integer

The number of seconds to wait before closing the window.



$width

Integer

The width of the window in pixels.



$height

Integer

The height of the window in pixels.



$left

Integer

The location of the left edge of the window in pixels measured from the left edge of the screen.



$top

Integer

The location of the top edge of the window in pixels measured from the top edge of the screen.





Return parameters



Parameter

Variable Type

Description



None





Example(s):

// Show a picture for 10 seconds.

$path = "C:\\Graphics\\Delay_Pic.jpg";

$opacity = 80;

$time = 10;

$width = 500;

$height = 500;

$left = 10;

$top = 20;





ShowDelayPictureWithLocation($path, $opacity, $time, $width, $height, $left, $top);





ShowImage

Previous Top Next



* * *



ShowImage

Usage:

$imageHandle = ShowImage($imagePath, $width, $height);



Description:

Shows an image and returns immediately. To close image use HideImage function. Function Arguments



Parameter

Variable Type

Description



$imageHandle

String

The location of the image to load and display.



$width

Integer

The width of the window to show the image on.



$height

Integer

The height of the window to show the image on.





Return parameters



Parameter

Variable Type

Description



$imageHandle

Object

A handle to the window that was opened for displaying the image.





Example:





$imagePath = "C:\\Temp\\TestImage.png";

$imageHandle = ShowImage($imagePath, 600, 350);

HideImage($imageHandle);





ShowImageWithLocation

Previous Top Next



* * *



ShowImageWithLocation

Usage:

$imageHandle = ShowImageWithLocation($imagePath, $width, $height, $left, $top);



Description:

Shows an image and returns immediately. To close image use HideImage function.

Remarks:

The word "Location" is used in the prompt functions to denote position and size instead of saying "WithPositionAndSize". Function Arguments



Parameter

Variable Type

Description



$imageHandle

String

The location of the image to load and display.



$width

Integer

The width of the window to show the image on.



$height

Integer

The height of the window to show the image on.



$left

Integer

The left edge of the window, measured from the left edge of the screen - in pixels.



$top

Integer

The top edge of the window, measured from the top edge of the screen - in pixels.





Return parameters



Parameter

Variable Type

Description



$imageHandle

Object

A handle to the window that was opened for displaying the image.





Example:





$imagePath = "C:\\Temp\\TestImage.png";

$width = 600;

$height = 350;

$left = 400;

$top = 200;





$imageHandle = ShowImageWithLocation($imagePath, $width, $height, $left, $top);

HideImage($imageHandle);





ShowPickButton

Previous Top Next



* * *



ShowPickButton



Usage:

$result = ShowPickButton($imagePath, $buttonText, $buttonColor, $buttonShortCut, $textSize, $buttonSize, $width, $height, $opacity);



Description:

This function will show an image with a set of buttons underneath. The number of buttons is configurable, up to 7.



Remarks:

Loads the image from a file. Does not work with an image in memory.

The number of button names, button colors and shortcut keys must be the same.



Function arguments



Parameter

Variable Type

Description



$imagePath

String

The location and name of the file to load the image from.



$buttonText

String

Comma delimited list of text to put on the buttons.



$buttonColor

String

Comma delimited list of colors for the buttons (one color for each button).



$buttonShortCut

String

Comma delimited list of "F" keys that can be used to activate the buttons.



$textSize

Integer

The size of the button text in pixels.



$buttonSize

Integer

The size of the buttons in pixels.



$width

Integer

The width of the image window in pixels.



$height

Integer

The height of the entire window (including image and buttons) in pixels.



$opacity

Integer

The opacity of the window in percent (0 = fully transparent, 100 = fully opaque).





Return parameters



Parameter

Variable Type

Description



$result

String

The text that is on the button that was activated.





Example:





// Set up some variables to use.

$image = "C:\\Images\\TestImage.bmp";

$buttons = "Button 1,Button 2,Button 3";

$butnColor = "RED,BLUE,YELLOW";

$butnKeys = "F1,F2,F3";

$textSize = 20;

$butnSize = 50;

$width = 700;

$height = 400;

$opacity = 80;



// Display and wait for button press.

$pressed = ShowPickButton($image, $buttons, $butnColor, $butnKeys, $textSize, $butnSize, $width, $height, $opacity);



$outString = "The button pressed = " + $pressed;

UpdateStatus($outString);





ShowPickButtonWithLocation

Previous Top Next



* * *



ShowPickButtonWithLocation



Usage:

$result = ShowPickButtonWithLocation($path, $buttonText, $buttonColor, $buttonKeys, $textSize, $buttonSize, $opacity, $width, $height, $left, $top);





Description:

This function will pop up a window with a picture in it and up to seven configurable buttons. The opacity of the window is also configurable.





Remarks:

The supported image formats are: BMP, GIF, JPG, PNG, TIFF.

The word "Location" is used in the prompt functions to denote position and size instead of saying "WithPositionAndSize".

Function arguments



Parameter

Variable Type

Description



$path

String

The path and file name of the image to display.



$buttonText

String

The text to show on each of the buttons. This is a comma delimited list - one entry for each button. Buttons with blank entries are not shown.



$buttonColor

String

The color of each button. This is a comma delimited list - one color for each button. Valid colors are:

· Red

· Yellow

· Blue

· Gray

· Black

· White

· Green

· Pink

· Purple

· Orange

· Brown



$buttonKeys

String

The shortcut key for each button. This is a comma delimited list - one entry for each button.



$textSize

Integer

The size of the text to put on the buttons.



$buttonSize

Integer

The size of the buttons in pixels.



$opacity

Integer

The opacity of the window with 0 being fully transparent and 100 being fully opaque.



$width

Integer

The width of the window in pixels.



$height

Integer

The height of the window in pixels.



$left

Integer

The location of the left edge of the window in pixels measured from the left edge of the screen.



$top

Integer

The location of the top edge of the window in pixels measured from the top edge of the screen.





Return parameters



Parameter

Variable Type

Description



$result

String

The text that was on the button that was clicked on by the user.





Example(s):

// Show a picture and seven buttons.

$pic = "C:\\Graphics\\Delay_Pic.jpg";

$btnTxt = "Btn 1,Btn 2,Btn 3,Btn 4,Btn 5,Btn 6,Btn 7";

$btnClr = "Purple,Blue,Green,Yellow,Orange,Red,Pink";

$btnShr = "F1,F2,F3,F4,F5,F6,F7";

$txtSiz = 20;

$btnSiz = 50;

$opacity = 80;

$width = 1000;

$height = 450;

$left = 20;

$top = 10;





$result = ShowPickButtonWithLocation($pic, $btnTxt, $btnClr, $btnShr, $txtSiz, $btnSiz, $opacity, $width, $height, $left, $top);





$outStr = "Result =\t" + $result;

UpdateStatus($outStr);





ShowPictureButtonPrompt

Previous Top Next



* * *



ShowPictureButtonPrompt

Shows an image and returns after button has been pressed. Parameters:





Image Path

String



Button Text

String



Width

Integer



Height

Integer



Transparency

Integer (0-100)





Returns:





none





Example:





$ImagePath = New("String","C:\\Documents and Settings\\Administrator\\Desktop\\Imagen.bmp");

ShowPictureButtonPrompt($ImagePath,"texto",600,400,80);





ShowPictureButtonPromptWithLocation

Previous Top Next



* * *



ShowPictureButtonPromptWithLocation



Usage:

ShowPictureButtonPromptWithLocation($path, $buttonText, $opacity, $width, $height, $left, $top);





Description:

This function will pop up a window with a picture in it and a button. The opacity of the window is also configurable.





Remarks:

The supported image formats are: BMP, GIF, JPG, PNG, TIFF.

The word "Location" is used in the prompt functions to denote position and size instead of saying "WithPositionAndSize".

Function arguments



Parameter

Variable Type

Description



$path

String

The path and file name of the image to display.



$buttonText

String

The text to show on each of the buttons. This is a comma delimited list - one entry for each button. Buttons with blank entries are not shown.



$opacity

Integer

The opacity of the window with 0 being fully transparent and 100 being fully opaque.



$width

Integer

The width of the window in pixels.



$height

Integer

The height of the window in pixels.



$left

Integer

The location of the left edge of the window in pixels measured from the left edge of the screen.



$top

Integer

The location of the top edge of the window in pixels measured from the top edge of the screen.





Return parameters



Parameter

Variable Type

Description



None





Example(s):

// Show a picture and a button.

$pic = "C:\\Graphics\\Delay_Pic.jpg";

$btnTxt = "Button 1";

$opacity = 80;

$width = 1000;

$height = 450;

$left = 20;

$top = 10;





ShowPictureButtonPromptWithLocation($pic, $btnTxt, $opacity, $width, $height, $left, $top);





ShowPicturePrompt

Previous Top Next



* * *



ShowPicturePrompt

Shows a dialog with configurable text buttons and returns immediately, user can monitor if a button was pressed with the handle. To hide image use the HidePromptImage function. Parameters:





Image Path

String



ButtonText 1

String



ButtonText 2

String



Button Shortcut 1

String



Button Shortcut 2

String



Width

Integer



Height

Integer



Message to Show when pressed

String





Returns:





Image Handle

Object





Example:





$ImagePath = New("String","C:\\Documents and Settings\\Administrator\\Desktop\\Imagen.bmp");

$ShowPicturePrompt_handle = ShowPicturePrompt($ImagePath,"Hello","Bye","F1","F2",700,400,80,"Button pressed !! Please wait...");

Label loop_1:

Sleep(1);





// verify if button was pressed, if not, monitor again

$sResult = GetPicturePromptResult($ShowPicturePrompt_handle);

$bResult = StringComparison($sResult,"Hello","==");

ScriptIf($bResult,"GOTO","label_1","");

$bResult = StringComparison($sResult,"Bye","==");

ScriptIf($bResult,"GOTO","label_1","loop_1");

Label label_1:





HidePromptImage($ShowPicturePrompt_handle);





UpdateStatus("");

UpdateStatus($sResult);

UpdateStatus("");





ShowPicturePromptWithLocation

Previous Top Next



* * *



ShowPicturePromptWithLocation



Usage:

$handle = ShowPictureButtonWithLocation($path, $btn1Text, $btn2Text, $btn1Key, $btn2Key, $message, $opacity, $width, $height, $left, $top);





Description:

This function will pop up a window with a picture and up to two buttons. The function will then return so the script will keep running. A message will replace the buttons when one of the buttons has been clicked on. The text on the buttons and shortcut key for each button is configurable. The opacity of the window is also configurable.





Remarks:

The supported image formats are: BMP, GIF, JPG, PNG, TIFF.

Check on the status of the buttons using the function, GetPicturePromptResult.

Close the window using the function, HidePromptImage.

The word "Location" is used in the prompt functions to denote position and size instead of saying "WithPositionAndSize".

Function arguments



Parameter

Variable Type

Description



$path

String

The path and file name of the image to display.



$btn1Text

String

The text to show on button 1.



$btn2Text

String

The text to show on button 2.



$btn1Key

String

The keyboard shortcut key for button 1.



$btn2Key

String

The keyboard shortcut key for button 2.



$message

String

The text message to show to the user after a button has been clicked. The message will replace the buttons.



$opacity

Integer

The opacity of the window with 0 being fully transparent and 100 being fully opaque.



$width

Integer

The width of the window in pixels.



$height

Integer

The height of the window in pixels.



$left

Integer

The location of the left edge of the window in pixels measured from the left edge of the screen.



$top

Integer

The location of the top edge of the window in pixels measured from the top edge of the screen.





Return parameters



Parameter

Variable Type

Description



$handle

Object

A handle to the window that can be passed to other functions.





Example(s):

// Show a picture and wait.

$pic = "C:\\Graphics\\Prompt_Pic.jpg";

$btn1Txt = "Button 1";

$btn2Txt = "Button 2";

$btn1Key = "F1";

$btn2Key = "F2";

$message = "Button Pressed. Please Wait...";

$opacity = 80;

$width = 1000;

$height = 450;

$left = 20;

$top = 10;





$handle = ShowPicturePromptWithLocation($pic, $btn1Txt, $btn2Txt, $btn1Key, $btn2Key, $message, $opacity, $width, $height, $left, $top);





// Check for the form closed or a button clicked.

$result = "";

while ($result == "")

{

$exists = CheckFormExists($handle);

$result = GetPicturePromptResult($handle);





// Was the form closed with no button pressed?

if (!$exists)

{

$result = "Form closed with no button pressed.";

}

}





$outStr = "Button Pressed:\t" + $result;

UpdateStatus($outStr);





HidePromptImage($handle);





ShowStaticPicturePrompt

Previous Top Next



* * *



ShowStaticPicturePrompt

Shows an image with two buttons, Dialog returns only after user pressed one of the two buttons. Parameters:





Image Path

String



ButtonText 1

String



ButtonText 2

String



Button Shortcut 1

String



Button Shortcut 2

String



Width

Integer



Height

Integer



Transparency

Integer (0 – 100)





Returns:





Text Result

String





Example:





$sResult = ShowStaticPicturePrompt ($ImagePath,"Hallo","Tschuss","F1","F2",600,400,80);

UpdateStatus("");

UpdateStatus($sResult);

UpdateStatus("");





ShowStaticPicturePromptWithLocation

Previous Top Next



* * *



ShowStaticPicturePromptWithLocation



Usage:

$result = ShowStaticPictureButtonWithLocation($path, $btn1Text, $btn2Text, $btn1Key, $btn2Key, $opacity, $width, $height, $left, $top);





Description:

This function will pop up a window with a picture and up to two buttons. The text on the buttons and shortcut key for each button is configurable. The opacity of the window is also configurable.





Remarks:

The supported image formats are: BMP, GIF, JPG, PNG, TIFF.

Check on the status of the buttons using the function, GetPicturePromptResult.

The word "Location" is used in the prompt functions to denote position and size instead of saying "WithPositionAndSize".

Function arguments



Parameter

Variable Type

Description



$path

String

The path and file name of the image to display.



$btn1Text

String

The text to show on button 1.



$btn2Text

String

The text to show on button 2.



$btn1Key

String

The keyboard shortcut key for button 1.



$btn2Key

String

The keyboard shortcut key for button 2.



$opacity

Integer

The opacity of the window with 0 being fully transparent and 100 being fully opaque.



$width

Integer

The width of the window in pixels.



$height

Integer

The height of the window in pixels.



$left

Integer

The location of the left edge of the window in pixels measured from the left edge of the screen.



$top

Integer

The location of the top edge of the window in pixels measured from the top edge of the screen.





Return parameters



Parameter

Variable Type

Description



$result

String

The name (text) of the button that was clicked.





Example(s):

// Show a picture and wait.

$pic = "C:\\Graphics\\Prompt_Pic.jpg";

$btn1Txt = "Button 1";

$btn2Txt = "Button 2";

$btn1Key = "F1";

$btn2Key = "F2";

$opacity = 80;

$width = 1000;

$height = 450;

$left = 20;

$top = 10;





$result = ShowStaticPicturePromptWithLocation($pic, $btn1Txt, $btn2Txt, $btn1Key, $btn2Key, $opacity, $width, $height, $left, $top);





$outStr = "Button Pressed:\t" + $result;

UpdateStatus($outStr);





ShowTextDialog

Previous Top Next



* * *



ShowTextDialog

Shows a configurable text dialog and returns only after user pressed a button. Parameters:





Display Text

String



ButtonText 1

String



ButtonText 2

String



Button Shortcut 1

String



Button Shortcut 2

String



Width

Integer



Height

Integer



Transparency

Integer (0 – 100)



Text Size

Integer





Returns:





Text Result

String





Example:





$sResult = ShowTextDialog("Text de ejemplo","Text-Beispiel","texto ejemplo","F1","F2",700,300,80,60);

UpdateStatus("");

UpdateStatus($sResult);

UpdateStatus("");





ShowTextDialogWithLocation

Previous Top Next



* * *



ShowTextDialogWithLocation



Usage:

$result = ShowTextDialogWithLocation($text, $btn1Text, $btn2Text, $btn1Key, $btn2Key, $textSize, $opacity, $width, $height, $left, $top);





Description:

This function will pop up a window with some text and up to two buttons. The text on the buttons and shortcut key for each button is configurable. The opacity of the window and text size are also configurable.





Remarks:

The word "Location" is used in the prompt functions to denote position and size instead of saying "WithPositionAndSize".

Function arguments



Parameter

Variable Type

Description



$text

String

The text to display.



$btn1Text

String

The text to show on button 1.



$btn2Text

String

The text to show on button 2.



$btn1Key

String

The keyboard shortcut key for button 1.



$btn2Key

String

The keyboard shortcut key for button 2.



$textSize

Integer

The size of the text that is displayed.



$opacity

Integer

The opacity of the window with 0 being fully transparent and 100 being fully opaque.



$width

Integer

The width of the window in pixels.



$height

Integer

The height of the window in pixels.



$left

Integer

The location of the left edge of the window in pixels measured from the left edge of the screen.



$top

Integer

The location of the top edge of the window in pixels measured from the top edge of the screen.





Return parameters



Parameter

Variable Type

Description



$result

String

The name (text) of the button that was clicked.





Example(s):

// Show text and wait.

$text = "This is the text that will be shown.";

$btn1Txt = "Button 1";

$btn2Txt = "Button 2";

$btn1Key = "F1";

$btn2Key = "F2";

$textSize = 20;

$opacity = 80;

$width = 1000;

$height = 450;

$left = 20;

$top = 10;





$result = ShowTextDialogWithLocation($text, $btn1Txt, $btn2Txt, $btn1Key, $btn2Key, $textSize, $opacity, $width, $height, $left, $top);





$outStr = "Button Pressed:\t" + $result;

UpdateStatus($outStr);





UnhookWindowImage

Previous Top Next



* * *





UnHookWindowImage

This function closes an image that was previously hooked in the screen with the function HookWindowImage. Parameters:





Handle

Object





Returns:





none





Example:





$ImagePath = New("String","C:\\Documents and Settings\\Administrator\\Desktop\\Imagen.bmp");

$Hook_handle = HookWindowImage($ImagePath,600,400,400,300,80);

Sleep(5);

UnHookWindowImage($Hook_handle);





ConfigurableHtmlReportWriter_ConfigureLocations

Previous Top Next



* * *



ConfigurableHtmlReportWriter_ConfigureLocations



Usage:

ConfigurableHtmlReportWriter_ConfigureLocations($locationOne,$locationTwo);





Description:

This function can be used to modify the report directory to which the Configurable HTML report will be generated.





Note: This function must be called from within a critical section of your script.

Function Arguments



Parameter

Variable Type

Description



$locationOne

String

The new #1 directory for the configurable html report writer



$locationTwo

String

The new #2 directory for the configurable html report writer





Return parameters



Parameter

Variable Type

Description



None





Example:

EnterCS("Report");

ConfigurableHtmlReportWriter_ConfigureLocations("C:\\html1\\", "C:\\html2\\");

ExitCS("Report");





ConfigureReporting

Previous Top Next



* * *



ConfigureReporting



Usage:

ConfigureReporting($ReportWriterDLLName,$Active);





Description:

This function can be used to activate and deactivate a specific report generator from inside of a test script. The report writer is specified by the DLL name of the report generator. The $Active argument is set to true or false indicating whether or not the report writer is active.





Note: This function activates/deactivates the report generator for the current test cell only.





Function Arguments



Parameter

Variable Type

Description



$ReportWriterName

String

The name of the report generation DLL library that you would like to activate or deactivate.



$Active

Boolean

A Boolean value indicating whether or not the selected report generator is active for the current test cell.





Return parameters



Parameter

Variable Type

Description



None





DebugStatusReportWriter_ConfigureLocations

Previous Top Next



* * *



DebugStatusReportWriter_ConfigureLocations



Usage:

DebugStatusReportWriter_ConfigureLocations($locationOne,$locationTwo);





Description:

This function can be used to modify the report directory to which the Debug Status report will be generated.





Note: This function must be called from within a critical section of your script.

Function Arguments



Parameter

Variable Type

Description



$locationOne

String

The new #1 directory for the debug status report writer



$locationTwo

String

The new #2 directory for the debug status report writer





Return parameters



Parameter

Variable Type

Description



None





Example:

EnterCS("Report");

DebugStatusReportWriter_ConfigureLocations("C:\\debug1\\","C:\\debug2\\");

ExitCS("Report");





HtmlReportWriter_ConfigureLocations

Previous Top Next



* * *



HtmlReportWriter_ConfigureLocations



Usage:

HtmlReportWriter_ConfigureLocations($locationOne,$locationTwo);





Description:

This function can be used to modify the report directory to which the HTML report will be generated.





Note: This function must be called from within a critical section of your script.

Function Arguments



Parameter

Variable Type

Description



$locationOne

String

The new #1 directory for the html report writer



$locationTwo

String

The new #2 directory for the html report writer





Return parameters



Parameter

Variable Type

Description



None





Example:

EnterCS("Report");

HtmlReportWriter_ConfigureLocations("C:\\html1\\","C:\\html2\\");

ExitCS("Report");





HtmlReportWriter_GetLocations

Previous Top Next



* * *



HtmlReportWriter_GetLocations



Usage:

($primaryLocation,$secondaryLocation) = HtmlReportWriter_GetLocations();



Description:

This function returns the directory configuration information of the HTML report writer.





Note: This function must be called from within a critical section of your script.

Function Arguments



Parameter

Variable Type

Description



None





Return parameters



Parameter

Variable Type

Description



$primaryLocation

String

Primary location to write HTML files to.



$secondaryLocation

String

Secondary location to write HTML files to.





Example:

($primaryLocation, $secondaryLocation) = HtmlReportWriter_GetLocations();





$outStr = "Primary Location: " + $primaryLocation;

UpdateStatus($outStr);

$outStr = "Secondary Location: " + $secondaryLocation;

UpdateStatus($outStr);





MesPlusReportWriter_ConfigureLocations

Previous Top Next



* * *



MesPlusReportWriter_ConfigureLocations



Usage:

MesPlusReportWriter_ConfigureLocations($primaryLoc, $secondaryLoc, $dropToBoth);



Description:

This function will set the locations to save the report in and whether to save the report to both locations.



Remarks:

If the report writer is not set to save to both locations, it will attempt to save to the primary location and, if that fails, will attempt to save to the secondary location. Only if saving to both locations fails, will an error be generated.

If the report writer is set to save to both locations, an error will only be generated if unable to save to either location.



Function arguments



Parameter

Variable Type

Description



$primaryLoc

String

The first location to save the report in.



$secondaryLoc

String

The second location to save the report in.



$dropToBoth

Boolean

Whether to save the report to both locations.





Return parameters



Parameter

Variable Type

Description



None





Example:





// Set the report writer to save to both the local mes folder and a network folder.

$primLoc = "C:\\mes\\";

$secLoc = "\\\\networkserver\\MesReports\\";

$dropBoth = true;



MesPlusReportWriter_ConfigureLocations($primLoc, $secLoc, $dropBoth);





MesPlusReportWriter_ConfigureOptions

Previous Top Next



* * *



MesPlusReportWriter_ConfigureOptions



Usage:

MesPlusReportWriter_ConfigureOptions($includeFixture, $fixtureName, $includeMeasurements, $includeLimits);



Description:

This function will set the options for saving the test report.



Remarks:

If $includeMeasurements is set to false then the setting of $includeLimits will be ignored.

If $fixtureName is blank, the value of $includeFixture will be ignored and the fixture data will not be changed.

The fixture name is limited to 25 characters. Any characters beyond 25 will be truncated.



Function arguments



Parameter

Variable Type

Description



$includeFixture

Boolean

Whether to include the fixture name in the report.



$fixtureName

String

The fixture name to include in the report (assuming $includeFixture is set to true).



$includeMeasurements

Boolean

Whether to save the measurement data in the report.



$includeLimits

Boolean

Whether to save the measurement limits and limit test results in the report.





Return parameters



Parameter

Variable Type

Description



None





Example:





// Set the report writer to save to the fixture name and measurements with limits in the report.

$inclFix = true;

$fixture = "Fixture01-002";

$inclMeas = true;

$inclLimits = true;



MesPlusReportWriter_ConfigureOptions($inclFix, $fixture, $inclMeas, $inclLimits);





MesPlusReportWriter_GetLocations

Previous Top Next



* * *



MesPlusReportWriter_GetLocations



Usage:

($primaryLoc, $secondaryLoc, $dropToBoth) = MesPlusReportWriter_GetLocations();



Description:

This function will return the locations where the report writer will attempt to save the report.



Remarks:

If the report writer is not set to save to both locations, it will attempt to save to the primary location and, if that fails, will attempt to save to the secondary location. Only if saving to both locations fails, will an error be generated.

If the report writer is set to save to both locations, an error will only be generated if unable to save to either location.



Function arguments



Parameter

Variable Type

Description



None





Return parameters



Parameter

Variable Type

Description



$primaryLoc

String

The first location where the report writer will attempt to save the report.



$secondaryLoc

String

The second location where the report writer will attempt to save the report.



$dropToBoth

Boolean

Whether the report writer will attempt to save in both locations.





Example:





// Get save location infomation.

($primLoc, $secLoc, $dropBoth) = MesPlusReportWriter_GetLocations();



// Print out the information.

$outString = "Primary Location = " + $primLoc;

UpdateStatus($outString);

$outString = "Secondary Location = " + $secLoc;

UpdateStatus($outString);

$outString = "Save to both locations = " + $dropBoth;

UpdateStatus($outString);





MesPlusReportWriter_GetOptions

Previous Top Next



* * *



MesPlusReportWriter_GetOptions



Usage:

($includeFixture, $fixtureName, $includeMeasurements, $includeLimits) = MesPlusReportWriter_GetOptions();



Description:

This function will return the options for the report writer.



Remarks:

If the report writer is set to not save the fixture, the fixture name does not matter.

If the report writer is set to not save the measurements, the setting to save the limits is ignored.



Function arguments



Parameter

Variable Type

Description



None





Return parameters



Parameter

Variable Type

Description



$includeFixture

Boolean

Whether the fixture name will be included in the report.



$fixtureName

String

The fixture name that will be included in the report (assuming $includeFixture is set to true).



$includeMeasurements

Boolean

Whether the measurement data will be included in the report.



$includeLimits

Boolean

Whether the measurement limits and limit test results will be included in the report.





Example:





// Get report writer options.

($inclFix, $fixture, $inclMeas, $inclLimits) = MesPlusReportWriter_GetOptions();



// Print out the information.

$outString = "Include Fixture= " + $inclFix;

UpdateStatus($outString);

$outString = "Fixture Name = " + $fixture;

UpdateStatus($outString);

$outString = "Include Measurements = " + $inclMeas;

UpdateStatus($outString);

$outString = "Include Limits = " + $inclLimits;

UpdateStatus($outString);





MESTISReportWithOffsite_ConfigureLocations

Previous Top Next



* * *



MESTISReportWithOffsite_ConfigureLocations



Usage:

MESTISReportWithOffsite_ConfigureLocations($serverURL, $dbServer, $dbName);



Description:

This function will set the location to send the report to and the database to store data in.



Function arguments



Parameter

Variable Type

Description



$serverURL

String

The URL of the MES-TIS server to send the report to.



$dbServer

String

The name of the SQL server to store the data on.



$dbName

String

The name of the database to save the data in.





Return parameters



Parameter

Variable Type

Description



None





Example:





// Send report to the MES-TIS server mytistestserver on port 1010 in the testserver testdatabase.

$servURL = "http://mytistestserver:1010//MES-TIS/TIS.asmx";

$dbServ = "testserver";

$dbName = "testdatabase";



MESTISReportWithOffsite_ConfigureLocations($servURL, $dbServ, $dbName);





MESTISReportWithOffsite_GetLocations

Previous Top Next



* * *



MESTISReportWithOffsite_GetLocations



Usage:

($serverURL, $dbServer, $dbName, $storeMeasure, $offsite, $jems) = MESTISReportWithOffsite_GetLocations();



Description:

This function will return the settings for location to send the report to, the database to store data in and whether/where the measurement data is to be saved.



Function arguments



Parameter

Variable Type

Description



None





Return parameters



Parameter

Variable Type

Description



$serverURL

String

The URL of the MES-TIS server that the report will be sent to.



$dbServer

String

The name of the SQL database server to save the data in.



$dbName

String

The name of the SQL database to save the data in.



$storeMeasure

Boolean

Whether the measurement data should be saved.



$offsite

Boolean

Whether the measurement data should be saved in a separate MongoDB database. This setting is ignored if $storeMeasure is false.



$jems

Boolean

Whether the data should be saved in a Jems database (true) or an iFactory database (false).





Example:





// Get infomation for MES-TIS server.

($servURL, $dbServer, $dbName, $offsite, $jems) = MESTISReportWithOffsite_GetLocations();



// Print out the information.

$outString = "MES-TIS Server URL = " + $servURL;

UpdateStatus($outString);

$outString = "SQL Server Name = " + $dbServer;

UpdateStatus($outString);

$outString = "SQL Database Name = " + $dbName;

UpdateStatus($outString);

$outString = "Measurements in MongoDB = " + $offsite;

UpdateStatus($outString);

$outString = "Use Jems DB = " + $jems;

UpdateStatus($outString);





MESReportWriter_ConfigureLocations

Previous Top Next



* * *



MESReportWriter_ConfigureLocations



Usage:

MESReportWriter_ConfigureLocations($primaryLoc, $secondaryLoc, $dropToBoth);



Description:

This function will set the locations to save the report in and whether to save the report to both locations.



Remarks:

If the report writer is not set to save to both locations, it will attempt to save to the primary location and, if that fails, will attempt to save to the secondary location. Only if saving to both locations fails, will an error be generated.

If the report writer is set to save to both locations, an error will only be generated if unable to save to either location.



Function arguments



Parameter

Variable Type

Description



$primaryLoc

String

The first location to save the report in.



$secondaryLoc

String

The second location to save the report in.



$dropToBoth

Boolean

Whether to save the report to both locations.





Return parameters



Parameter

Variable Type

Description



None





Example:





// Set the report writer to save to both the local mes folder and a network folder.

$primLoc = "C:\\mes\\";

$secLoc = "\\\\networkserver\\MesReports\\";

$dropBoth = true;



MESReportWriter_ConfigureLocations($primLoc, $secLoc, $dropBoth);





MESReportWriter_GetLocations

Previous Top Next



* * *



MESReportWriter_GetLocations



Usage:

($primaryLoc, $secondaryLoc, $dropToBoth) = MESReportWriter_GetLocations();



Description:

This function will return the locations where the report writer will attempt to save the report.



Remarks:

If the report writer is not set to save to both locations, it will attempt to save to the primary location and, if that fails, will attempt to save to the secondary location. Only if saving to both locations fails, will an error be generated.

If the report writer is set to save to both locations, an error will only be generated if unable to save to either location.



Function arguments



Parameter

Variable Type

Description



None





Return parameters



Parameter

Variable Type

Description



$primaryLoc

String

The first location where the report writer will attempt to save the report.



$secondaryLoc

String

The second location where the report writer will attempt to save the report.



$dropToBoth

Boolean

Whether the report writer will attempt to save in both locations.





Example:





// Get save location infomation.

($primLoc, $secLoc, $dropBoth) = MESReportWriter_GetLocations();



// Print out the information.

$outString = "Primary Location = " + $primLoc;

UpdateStatus($outString);

$outString = "Secondary Location = " + $secLoc;

UpdateStatus($outString);

$outString = "Save to both locations = " + $dropBoth;

UpdateStatus($outString);





MESTISReportWriter_ConfigureLocations

Previous Top Next



* * *



MESTISReportWriter_ConfigureLocations



Usage:

MESTISReportWriter_ConfigureLocations($serverURL);



Description:

This function will set the URL of the MES-TIS server that the report will be sent to.



Remarks

This setting will override the URL that was set in the Report Writer configuration GUI.



Function arguments



Parameter

Variable Type

Description



$serverURL

String

The URL of the MES-TIS server to send the report to.





Return parameters



Parameter

Variable Type

Description



None





Example:





// Send to MES-TIS server mytistestserver on port 1010.

$servURL = "http://mytistestserver:1010//MES-TIS/TIS.asmx";



MESTISReportWriter_ConfigureLocations($servURL);





MESTISReportWriter_GetLocations

Previous Top Next



* * *



MESTISReportWriter_GetLocations



Usage:

($serverURL, $includeMeasure) = MESTISReportWriter_GetLocations();



Description:

This function will return the URL of the server that the report will be sent to and whether measurements are included in the report.



Function arguments



Parameter

Variable Type

Description



None





Return parameters



Parameter

Variable Type

Description



$serverURL

String

The URL of the MES-TIS server that the report will be sent to.



$includeMeasure

Boolean

Whether measurement data will be included in the report.





Example:





// Get infomation for MES-TIS server.

($servURL, $includeMeas) = MESTISReportWriter_GetLocations();



// Print out the information.

$outString = "MES-TIS Server URL = " + $servURL;

UpdateStatus($outString);

$outString = "Include Measurements = " + $includeMeas;

UpdateStatus($outString);





MesWithLimitsReportWriter_ConfigureLocations

Previous Top Next



* * *



MesWithLimitsReportWriter_ConfigureLocations



Usage:

MesWithLimitsReportWriter_ConfigureLocations($primaryLoc, $secondaryLoc, $dropToBoth);



Description:

This function will set the locations to save the report in and whether to save the report to both locations.



Remarks:

If the report writer is not set to save to both locations, it will attempt to save to the primary location and, if that fails, will attempt to save to the secondary location. Only if saving to both locations fails, will an error be generated.

If the report writer is set to save to both locations, an error will only be generated if unable to save to either location.



Function arguments



Parameter

Variable Type

Description



$primaryLoc

String

The first location to save the report in.



$secondaryLoc

String

The second location to save the report in.



$dropToBoth

Boolean

Whether to save the report to both locations.





Return parameters



Parameter

Variable Type

Description



None





Example:





// Set the report writer to save to both the local mes folder and a network folder.

$primLoc = "C:\\mes\\";

$secLoc = "\\\\networkserver\\MesReports\\";

$dropBoth = true;



MesWithLimitsReportWriter_ConfigureLocations($primLoc, $secLoc, $dropBoth);





MesWithLimitsReportWriter_GetLocations

Previous Top Next



* * *



MesWithLimitsReportWriter_GetLocations



Usage:

($primaryLoc, $secondaryLoc, $dropToBoth) = MesWithLimitsReportWriter_GetLocations();



Description:

This function will return the locations where the report writer will attempt to save the report.



Remarks:

If the report writer is not set to save to both locations, it will attempt to save to the primary location and, if that fails, will attempt to save to the secondary location. Only if saving to both locations fails, will an error be generated.

If the report writer is set to save to both locations, an error will only be generated if unable to save to either location.



Function arguments



Parameter

Variable Type

Description



None





Return parameters



Parameter

Variable Type

Description



$primaryLoc

String

The first location where the report writer will attempt to save the report.



$secondaryLoc

String

The second location where the report writer will attempt to save the report.



$dropToBoth

Boolean

Whether the report writer will attempt to save in both locations.





Example:





// Get save location infomation.

($primLoc, $secLoc, $dropBoth) = MesWithLimitsReportWriter_GetLocations();



// Print out the information.

$outString = "Primary Location = " + $primLoc;

UpdateStatus($outString);

$outString = "Secondary Location = " + $secLoc;

UpdateStatus($outString);

$outString = "Save to both locations = " + $dropBoth;

UpdateStatus($outString);





TARSReportWriter_ConfigureLocations

Previous Top Next



* * *



TARSReportWriter_ConfigureLocations



Usage:

TARSReportWriter_ConfigureLocations($locationOne,$locationTwo,$writeToBoth);





Description:

This function can be used to modify the report directory to which the TARS report will be generated.





Note: This function must be called from within a critical section of your script.

Function Arguments



Parameter

Variable Type

Description



$locationOne

String

The new #1 directory for the TARS report writer



$locationTwo

String

The new #2 directory for the TARS report writer



$writeToBoth

Boolean

Determines if the report will be written to both of the specified locations [TRUE,FALSE]





Return parameters



Parameter

Variable Type

Description



None





Example:

EnterCS("Report");

TARSReportWriter_ConfigureLocations("C:\\tars1\\", "C:\\tars2\\", true);

ExitCS("Report");





TARSReportWriter_GetLocations

Previous Top Next



* * *



TARSReportWriter_GetLocations



Usage:

($primaryLocation,$secondaryLocation,$dropToBoth) = TARSReportWriter_GetLocations();





Description:

This function returns the directory configuration information of the TARS report writer.





Note: This function must be called from within a critical section of your script.

Function Arguments



Parameter

Variable Type

Description



None





Return parameters



Parameter

Variable Type

Description



$primaryLocation

String

Primary location to write TARS files to.



$secondaryLocation

String

Secondary location to write TARS files to.



$dropToBoth

Boolean

Determines if the report will be written to both of the specified locations [TRUE,FALSE]





Example:

($primaryLocation, $secondaryLocation, $dropToBoth) = TARSReportWriter_GetLocations();





UpdateStatus("Primary Location:");

UpdateStatus($primaryLocation);

UpdateStatus("Secondary Location:");

UpdateStatus($secondaryLocation);

UpdateStatus("Drop to Both Locations?");

UpdateStatus($dropToBoth);





TXTReportWriter_ConfigureFileName

Previous Top Next



* * *



TXTReportWriter_ConfigureFileName



Usage:

TXTReportWriter_ConfigureFileName($TestStepsFileName, $TestRunsFileName);



Description:

This function can be used to modify the report directory to which the TXT report will be generated.



Note: This function must be called from within a critical section of your script.

Function Arguments



Parameter

Variable Type

Description



$TestStepsFileName

String

The file name to use to log all the test step results (all the record measurements).



$TestRunsFileName

String

The file to use to log the overall test run result (pass, fail, the first failure, run date, run time).





Return parameters



Parameter

Variable Type

Description



None





Example 1 (log all test runs for a day in one file):





EnterCS("Reporting");

ConfigureReporting("TXTReportWriter.dll", true);





$TARS_Customer = "Customer";

$TARS_Process = "FVT";





// Get system time

($month, $day, $year, $hour, $minutes, $seconds, $dayOfWeek) = SystemTime();





if($month < 10)

{

$month = "0" + $month;

}





if($day < 10)

{

$day = "0" + $day;

}





if($hour < 10)

{

$hour = "0" + $hour;

}





if($minutes < 10)

{

$minutes = "0" + $minutes;

}





if($seconds < 10)

{

$seconds = "0" + $seconds;

}





// Configure file name to log all test results for a whole day

$TestStepsFileName = $day + "-" + $month + "-" + $year + "_TestSteps_" + $TARS_Customer + "_ETUxxx_" + $TARS_Process + "_Cell" + $CellNumber + ".txt";

$TestRunsFileName = $day + "-" + $month + "-" + $year + "_TestRuns_" + $TARS_Customer + "_ETUxxx_" + $TARS_Process + "_Cell" + $CellNumber + ".txt";





TXTReportWriter_ConfigureFileName($TestStepsFileName, $TestRunsFileName);





TXTReportWriter_ConfigureLocations("C:\\TXT1\\", "C:\\TXT2\\", true);





ExitCS("Reporting");





Example 2 (log each test run in a file):





EnterCS("Reporting");

ConfigureReporting("TXTReportWriter.dll", true);





// <locations and variables the same as the example above>...





// Configure file name for each serial number

$TestStepsFileName = "TestSteps_" + $SerialNumber + "(" + $month + "-" + $day + "-" + $year + " " + $hour + "-" + $minutes + "-" + $seconds + ")-" + $CellNumber + ".txt";

$TestRunsFileName = "Testrun_" + $SerialNumber + "(" + $month + "-" + $day + "-" + $year + " " + $hour + "-" + $minutes + "-" + $seconds + ")-" + $CellNumber + ".txt";





TXTReportWriter_ConfigureFileName($TestStepsFileName, $TestRunsFileName);





TXTReportWriter_ConfigureLocations("C:\\TXT1\\", "C:\\TXT2\\", true);





ExitCS("Reporting");





TXTReportWriter_ConfigureLocations

Previous Top Next



* * *



TXTReportWriter_ConfigureLocations



Usage:

TXTReportWriter_ConfigureLocations($locationOne, $locationTwo, $writeToBoth);





Description:

This function can be used to modify the report directory to which the TXT report will be generated.





Note: This function must be called from within a critical section of your script.

Function Arguments



Parameter

Variable Type

Description



$locationOne

String

The new #1 directory for the Txt report writer



$locationTwo

String

The new #2 directory for the Txt report writer



$writeToBoth

Boolean

Determines if the report will be written to both of the specified locations [TRUE,FALSE]





Return parameters



Parameter

Variable Type

Description



None





Example:

EnterCS("Report");

TxtReportWriter_ConfigureLocations("C:\\Txt1\\", "C:\\Txt2\\", true);

ExitCS("Report");





XmlReportWriter_ConfigureLocations

Previous Top Next



* * *



XmlReportWriter_ConfigureLocations



Usage:

XmlReportWriter_ConfigureLocations($locationOne, $locationTwo, $writeToBoth);





Description:

This function can be used to modify the report directory to which the XML report will be generated.





Note: This function must be called from within a critical section of your script.

Function Arguments



Parameter

Variable Type

Description



$locationOne

String

The new #1 directory for the XML report writer



$locationTwo

String

The new #2 directory for the XML report writer



$writeToBoth

Boolean

Determines if the report will be written to both of the specified locations [TRUE, FALSE]





Return parameters



Parameter

Variable Type

Description



None





Example:

EnterCS("Report");

XmlReportWriter_ConfigureLocations("C:\\XML1\\", "C:\\XML2\\", true);

ExitCS("Report");





XmlReportWriter_GetLocations

Previous Top Next



* * *



XmlReportWriter_GetLocations



Usage:

($primaryLocation, $secondaryLocation) = XmlReportWriter_GetLocations();



Description:

This function returns the directory configuration information of the XML report writer.





Note: This function must be called from within a critical section of your script.

Function Arguments



Parameter

Variable Type

Description



None





Return parameters



Parameter

Variable Type

Description



$primaryLocation

String

Primary location to write XML files to.



$secondaryLocation

String

Secondary location to write XML files to.





Example:

($primaryLocation, $secondaryLocation) = XmlReportWriter_GetLocations();





$outStr = "Primary Location: " + $primaryLocation;

UpdateStatus($outStr);

$outStr = "Secondary Location: " + $secondaryLocation;

UpdateStatus($outStr);





Abort

Previous Top Next



* * *



Usage:

Abort($AbortMessage)

Description:

This is a special function that controls script execution. When this function is encountered, the script generates an abort, and the $AbortMessage is reported to the test executive. This can be useful when combined with the ScriptIf function to force a particular failure in response to a conditional evaluation.

Function Arguments



Parameter

Variable Type

Description



$AbortMessage

String

The abort message that should be displayed and recorded.





Return Parameters



Parameter

Variable Type

Description



None





CheckIfLastCellRunning

Previous Top Next



* * *



CheckIfLastCellRunning



Usage:

$IsLastCellRunning = CheckIfLastCellRunning();



Description:

This function returns true or false indicating if the current cell is the last test cell executing... this can be useful for determining if the test cell is the last cell still executing in order to perform actions such as unlocking a gate, or actuating a test fixture.

Function Arguments



None





Return parameters



Parameter

Variable Type

Description



$IsLastCellRunning

Boolean

Returns true if the current test cell is the only test cell currently running, otherwise returns false if other cells are still executing.





ClearStatusText

Previous Top Next



* * *



ClearStatusText



Usage:

ClearStatusText();



Description:



This function removes all the current text from the debug status window. This can be used to conserve memory for test scripts which produce a great deal of debug output.





Function Arguments



None





Return parameters



Parameter

Variable Type

Description



None





DisableAbort

Previous Top Next



* * *



DisableAbort



Usage:

DisableAbort();



Description:

Disables all methods of aborting a test script that is currently executing (Abort button, context menu item, etc).

Function Arguments



Parameter

Variable Type

Description



None





Return parameters



Parameter

Variable Type

Description



None





DisableLogging

Previous Top Next



* * *



DisableLogging

Usage:

DisableLogging();

Description:

All output to the HTML report writer is suppressed after encountering this function. No more output will be reported by the HTML report writer until an Script.EnableLogging statement is encountered.

Function Arguments



Parameter

Variable Type

Description



None





Return Parameters



Parameter

Variable Type

Description



None





EnableAbort

Previous Top Next



* * *



EnableAbort



Usage:

EnableAbort();



Description:

Allows aborting of a running test script by enabling abort buttons and menu items. Aborting is enabled by default; this function reverses the effects of the DisableAbort() call;

Function Arguments



Parameter

Variable Type

Description



None





Return parameters



Parameter

Variable Type

Description



None





EnableLogging

Previous Top Next



* * *



EnableLogging

Usage:

EnableLogging();

Description:

The output to the HTML Report writer is re-enabled after this function is encountered. In the event that the output had not previously been disabled by the DisableLogging function, than this function causes no effect.

Function Arguments



Parameter

Variable Type

Description



None





Return Parameters



Parameter

Variable Type

Description



None





EnforceValidation

Previous Top Next



* * *



EnforceValidation



Usage:

EnforceValidation();



Description:

This function checks the validation status of all functions used in the test script and fails the test if one or more functions is/are not validated.



Remarks:

This function should be used at the top of the script being checked. Then it will pass or fail the validation test before any other functions are run.

Function arguments



Parameter

Variable Type

Description



None





Return parameters



Parameter

Variable Type

Description



None





Example(s):

EnforceValidation();





Fail

Previous Top Next



* * *



Fail

Usage:

Fail($FailMessage)

Description:

This is a special function that controls script execution. This function is encountered, the script generates a failure, and the $FailMesasge is reported to the test executive. This can be useful when combined with the ScriptIf function to force a particular failure in response to a conditional evaluation.

Function Arguments



Parameter

Variable Type

Description



$FailMessage

String

The failure message that should be displayed and recorded.





Return Parameters



Parameter

Variable Type

Description



None





GetCellCount

Previous Top Next



* * *



GetCellCount



Usage:

$CellsCount = GetCellCount();



Description:

This function returns the total number of Jabil Test cells currently being displayed.

Function Arguments



None





Return parameters



Parameter

Variable Type

Description



$CellsCount

Integer

The Total Number of Jabil Test Cells shown to the operator.





GetElapsedTime

Previous Top Next



* * *



GetElapsedTime



Usage:

$ElapsedTime = GetElapsedTime();





Description:





This function returns the total elapsed execution time for the currently running test script in seconds. (Note that this value can be reset any time during a test script's execution by using the ResetElapsedTime function).





The elapsed execution time is returned in seconds.

Function Arguments



Parameter

Variable Type

Description



None





Return parameters



Parameter

Variable Type

Description



$ElapsedTime

Float

The total test script execution time in seconds (Note: If the elapsed time has been reset in the test script, this will be the total elapsed execution time since the last reset event).





Example





$ElapsedTime = GetElapsedTime();





GetElapsedTimeInUnits

Previous Top Next



* * *



GetElapsedTimeInUnits



Usage:

($TotalDays,$TotalHours,$TotalMinutes,$TotalSeconds,$Days,$Hours,$Minutes,$Seconds) = GetElapsedTimeInUnits();





Description:





This function returns the total elapsed execution time for the currently running test script in both total time units as well as elapsed time units.





Note that this value can be reset any time during a test script's execution by using the ResetElapsedTime function.





The elapsed execution time is returned in seconds.

Function Arguments



Parameter

Variable Type

Description



None





Return parameters



Parameter

Variable Type

Description



$TotalDays

Float

The total elapsed test execution time expressed in the unit of 'Days'



$TotalHours

Float

The total elapsed test execution time expressed in the unit of 'Hours'



$TotalMinutes

Float

The total elapsed test execution time expressed in the unit of 'Minutes'



$TotalSeconds

Float

The total elapsed test execution time expressed in the unit of 'Seconds'



$Days

Integer

The 'Day' unit of the total elapsed test time.



$Hours

Integer

The 'Hour' unit of the total elapsed test time.



$Minutes

Integer

The 'Minute' unit of the total elapsed test time.



$Seconds

Integer

The 'Second' unit of the total elapsed test time.





Example





// Demonstrate the Difference between Total Units and Standard Units





Sleep(5);

($TotalDays,$TotalHours,$TotalMinutes,$TotalSeconds,$Days,$Hours,$Minutes,$Seconds) = GetElapsedTimeInUnits();

End;





// Output Example





Sleeping 5 Seconds...

GetElapsedTimeInUnits: Total Days [5.78703703703704E-05] Total Hours [0.00138888888888889] Total Minutes [0.0833333333333333] Total Seconds [5] --- Days [0] Hours [0] Minutes [0] Seconds [5]

5.78703703703704E-05

0.00138888888888889

0.0833333333333333

5

0

0

0

5





GetNumberOfCellsRunning

Previous Top Next



* * *



GetNumberOfCellsRunning



Usage:

$CellsRunning = GetNumberOfCellsRunning();



Description:

This function returns the number of Jabil Test cells which are currently executing.





Return parameters



Parameter

Variable Type

Description



$CellsRunning

Integer

The number of test cells which are currently running or active.





GetTestCellPosition

Previous Top Next



* * *



GetTestCellPosition



Usage:

$xPos,$yPos,$Width,$Height= GetTestCellPosition();



Description:

This function returns the position coordinates and size of the test cell running the current script.



Note: The position coordinates returned refer to the Jabil Test cell panel and not the entire monitor.





None





Return parameters



Parameter

Variable Type

Description



$xPos

Integer

The X coordinate of the top-left position of the test cell.



$yPos

Integer

The Y coordinate of the top-left position of the test cell.



$Width

Float

The width of the test cell.



$Height

Float

The height of the test cell





Example:

$xPos,$yPos,$width,$height = GetTestCellPosition();





GetTestResultFailures

Previous Top Next



* * *



GetTestResultFailures



Usage:

($failureTable) = GetTestResultFailures();





Description:

Returns a table of the failed test steps (one failure per row) with the following columns:





· Test Name, Measurement Name, Measurement Value, Units, Lower Limit, Upper Limit





Function Arguments



Parameter

Variable Type

Description



None





Return parameters



Parameter

Variable Type

Description



$failureTable

DataTable

Table of all failing test results that have occurred in the test so far.





Example





//Create some failures then display them as a table

SetTestName("PC Check");

RecordMeasurementPassFail("RAM Test", 13091, "Readback error", true, false);

RecordMeasurementPassFail("Serial #", "", "", false, false);

RecordMeasurementPassFail("Assembly #", "", "", false, true);





SetTestName("Voltage Test");

RecordMeasurementWithLimits("20V Check", 19.9, "Volts", true , 18, 22, true);

RecordMeasurementWithLimits("12V Check", 0.1, "Volts", true , 10, 14, true);

RecordMeasurementWithLimits("5V Check", 7.1, "Volts", true , 4, 6, true);

RecordMeasurementWithLimits("3.3V Check", 1.1, "Volts", true , 3, 3.6, true);

RecordMeasurementWithLimits("1.5V Check", 1.4, "Volts", true , 1, 2, true);





$failureTable = GetTestResultFailures();





DataTable_ShowInWindow($failureTable);





End;





ResetElapsedTime

Previous Top Next



* * *



ResetElapsedTime



Usage:

ResetElapsedTime();





Description:





This function resets the currently elapsed time value for the test script. This command resets the 'Elapsed Time' recorded in each test step executed. This affects the value shown for elapsed time on the test cell GUI, as well as the report writer collection.

Function Arguments



Parameter

Variable Type

Description



None





Return parameters



Parameter

Variable Type

Description



None





ScriptIf

Previous Top Next



* * *



ScriptIf

Usage:

ScriptIf($BooleanValue,$CallType,$TrueLocation,$FalseLocation);

Description:

The ScriptIf command allows branching from inside of the test script. The first argument to the function, is a boolean variable. The second argument is the call type, which can be either "CALL" or "GOTO". The $TrueLocation argument represents a function name in the case of a CALL call type, or a label name in the case of a GOTO call type. The script interpreter will branch to this location if the $BooleanValue parameter is TRUE. The $FalseLocation argument represents a function name in the case of a CALL call type, or a label name in the case of a GOTO call type. The script interpreter will branch to this location if the $BooleanValue parameter is FALSE. In the event that the $TrueLocation or $FalseLocation are left blank, the script interpreter will continue on the next line, and not perform a call or goto operation.

Examples:

ScriptIf($BooleanValue,"GOTO","HereLabel","ThereLabel");

ScriptIf($BooleanValue,"CALL","HereFunction","ThereFunction");

ScriptIf($BooleanValue,"GOTO","HereLabel","");

Function Arguments



Parameter

Variable Type

Description



$BooleanValue

Boolean

The expression that will determine whether the script will CALL or GOTO a particular label or function.



$CallType

String

The call-type to be performed. Valid Values are:

· "CALL"

· "GOTO"



$TrueLocation

String

In the event that the $BooleanValue is TRUE:

In the case of a "CALL" call-type, the script interpreter will place the current script line on the stack, and then perform a call to the function name supplied.

In the case of a "GOTO" call-type, the script interpreter will perform a goto to the label name supplied.

In the event that this location is left blank, the script interpreter continues to the next line in the script.



$FalseLocation

String

In the event that the $BooleanValue is FALSE:

In the case of a "CALL" call-type, the script interpreter will place the current script line on the stack, and then perform a call to the function name supplied.

In the case of a "GOTO" call-type, the script interpreter will perform a goto to the label name supplied.

In the event that this location is left blank, the script interpreter continues to the next line in the script.





Return Parameters



Parameter

Variable Type

Description



None





SetAbortFunction

Previous Top Next



* * *



SetAbortFunction

Usage:

SetAbortFunction($functionName)

Description:

This is a special function that controls script execution. When this function is used, the function name supplied as an argument will always be executed immediately before executing the finalization function in the event of a test abort caused by either manual operator intervention, or via the 'Abort' command.



This function is used to take special actions that should only occur in the event that a particular test run resulted in an abort status.

Function Arguments



Parameter

Variable Type

Description



$functionName

String

The name of the function to be run as an abort step. The function name should not contain the ending '()' .





Return Parameters



Parameter

Variable Type

Description



None





Example





SetFailFunction("OnFail");

SetFinalizeFunction("OnFinal");

SetAbortFunction("OnAbort");

Sleep(1);

Abort("DOH!");

Sleep(1);

End;





function OnFail()

{

UpdateStatus("This function will run if the test fails.");

End;

}





function OnAbort()

{

UpdateStatus("This function will run if the test aborts");

End;

}





function OnFinal()

{

UpdateStatus("This function will always run as the last step in the test... it will be run after the abort and fail functions if they are called");

End;

}





SetCellColor

Previous Top Next



* * *



SetCellColor



Usage:

SetCellColor($Red1,$Green1,$Blue1,$Red2,$Green2,$Blue2,$ColorAngle);





Description:





This function can be used to set the background color of a test cell from inside of a test script. This function can be used to alert the operator that a particular cell needs attention, or let the operator know that a particular test cell has entered a certain section of a test process.





The test cell has two colors (primary/secondary) which form a gradient for the test cells background. The first color is specified by values (0-255) assigned to $Red1,$Green1, and $Blue1 parameters. The second color is specified by values assigned to $Red2,$Green2, and $Blue2 parameters. The $ColorAngle parameter is used to set the angle at which the gradient is applied to the background color of the test cell.





If you would like to use a solid background color for the test cell, simply set the values for the top and bottom colors to the same RGB values.

Function Arguments



Parameter

Variable Type

Description



$Red1

Integer

The red component of the cell's primary background color.



$Green1

Integer

The green component of the cell's primary background color.



$Blue1

Integer

The blue component of the cell's primary background color.



$Red2

Integer

The red component of the cell's secondary background color.



$Green2

Integer

The green component of the cell's secondary background color.



$Blue2

Integer

The blue component of the cell's secondary background color.



$ColorAngle

Integer

The angle used for applying the color gradient to the background color testing.





Return parameters



Parameter

Variable Type

Description



None





Usage Examples:





//This demo script creates a rotating rainbow effect on the test cell

$Rotation = 0;

$Color1 = 0;

$Color2 = 0;





Label Looper:

SleepMilliseconds(10);

$Rotation = $Rotation + 1;

$Color1 = $Color1 + 1;

$Color2 = 255 - $Color1;





SetCellColor($Color1,$Color2,$Color1,$Color2,$Color1,$Color2,$Rotation);

if ($Rotation<360)

{

goto Looper;

}





End;





SetCellLabel

Previous Top Next



* * *



SetCellLabel

Usage:

SetCellLabel($CellLabel)

Description:

Sets the current cell label (normally 'Test Cell xxx') with a user defined text string. This can be useful for marking a specific cell as having a special purpose, or to display information to the user that needs to be distinct from the information displayed in the test progress window. Function Arguments



Parameter

Variable Type

Description



$CellLabel

String

The string representing the desire Test Cell label that will be displayed in a bold font at the top of the Test Cell executing the current script.





Return Parameters



Parameter

Variable Type

Description



None





SetCellViewMode

Previous Top Next



* * *



SetCellViewMode



Usage:

SetCellViewMode($ViewMode);



Description:





This function can be used to set the currently selected view panel of the test cell from within a test script. The currently support Cell View Modes are 'STATUS', 'DEBUG' and 'BROWSER' which brings up the corresponding tab on the test cell's main GUI panel.

Function Arguments



Parameter

Variable Type

Description



$ViewMode

String

The desired view mode of the test cell. Supported values are:

· "STATUS"

· "DEBUG"

· "BROWSER"





Return parameters



Parameter

Variable Type

Description



None





Usage Examples:





SetCellViewMode("DEBUG"); // Forces test cell to debug view.





SetCurrentCellPanel

Previous Top Next



* * *



SetCurrentCellPanel



Usage:

SetCurrentCellPanel($PanelNumber);



Description:

This function allows setting the current visible test cell panel from inside of a test script. In order to select a cell panel, the Jabil Test main configuration options must already be configured for multiple cell panels. If the developer selects a test panel greater than the number of test panels currently configured in Jabil Test, the function will return with a failing test result, otherwise the main test cell window will be changed to the selected cell panel.





Function Arguments



Parameter

Variable Type

Description



$PanelNumber

Integer

The number of the test cell panel to be displayed to the user.





Return parameters



Parameter

Variable Type

Description



None





Examples





Sleep(2);

SetCurrentCellPanel(1);

Sleep(2);

SetCurrentCellPanel(2);

Sleep(2);

SetCurrentCellPanel(3);

Sleep(2);

SetCurrentCellPanel(4);

Sleep(2);

SetCurrentCellPanel(1);

End;





SetDebugVerbosityLevel

Previous Top Next



* * *



SetDebugVerbosityLevel



Usage:

SetDebugVerbosityLevel($VerbosityLevel);





Description:





This function sets the debug verbosity level for the test cell's current debug output. This function can be useful if you have a large number of loops occuring inside of your test script, but you don't want to have the entire debug output for that process recorded in the debug output window.





The verbosity setting only affects the current test cell, and the verbosity level is set back to the default Jabil Test setting after the test script completes execution.





Function Arguments



Parameter

Variable Type

Description



$VerbosityLevel

String

This string specifies the desired verbosity level of the debug output for the test script. Supported values include:

· "NONE" = No Debug Output is displayed

· "Verbose" = All Debug Output is displayed

· "UpdateStatusOnly" = Only the output from the UpdateStatus command is displayed in the debug window.





Return parameters



Parameter

Variable Type

Description



None





SetFailFunction

Previous Top Next



* * *



SetFailFunction

Usage:

SetFailFunction($functionName)

Description:

This is a special function that controls script execution. When this function is used, the function name supplied as an argument will always be executed immediately before executing the finalization function in the event of a test failure. This is done to take special actions that should only occur in the event that a particular test run resulted in failure.

Function Arguments



Parameter

Variable Type

Description



$functionName

String

The name of the function to be run as a finalizations step. The function name should not contain the ending '()' .





Return Parameters



Parameter

Variable Type

Description



None





SetFinalizeFunction

Previous Top Next



* * *



SetFinalizeFunction

Usage:

SetFinalizeFunction($functionName)

Description:

This is a special function that controls script execution. When this function is used, the function name supplied as an argument will always be executed as the last step of a script, regardless of how the test ends; be it a pass,fail, or abort status. This is usually used to ensure that a particular set of "clean up" steps is performed at the end of every script execution. This function can be placed anywhere in the script allowing for multiple pass/fail/abort conditions to be established depending on the scripts progress.

Function Arguments



Parameter

Variable Type

Description



$functionName

String

The name of the function to be run as a finalizations step. The function name should not contain the ending '()' .





Return Parameters



Parameter

Variable Type

Description



None





SetMainWindowSize

Previous Top Next



* * *



SetMainWindowSize



Usage:

SetMainWindowSize($x,$y,$width,$height);



Description:

This function can be used to modify the Jabil Test main window size and position from inside of a test script. If the Jabil Test window is maximized when this function is called, the window state will be set to normal in order to allow the window position and size to be modified.

Function Arguments



Parameter

Variable Type

Description



$x

Integer

The X position of the Jabil Test Main Window



$y

Integer

The Y position of the Jabil Test Main Window



$width

Integer

The width in pixels of the Jabil Test Main Window



$height

Integer

The height in pixels of the Jabil Test Main Window





Return parameters



Parameter

Variable Type

Description



None





Examples

SetMainWindowSize(10,10,1000,800);





SetProductName

Previous Top Next



* * *



SetProductName

Usage:

SetProductName($ProductName)

Description:

Sets the Current Product Name. This function sets the product name property of the test results object which is passed to the report generator collection. This allows a single script to test multiple product types.

Function Arguments



Parameter

Variable Type

Description



$ProductName

String

The supplied string will set the 'Product Name' property of a script. This property is passed to the ReportWriter collection for data logging and reporting.





Return Parameters



Parameter

Variable Type

Description



None





SetSerialNumberField

Previous Top Next



* * *



SetSerialNumberField



Usage:

SetSerialNumberField($SerialNumber);



Description:

This function can be used to update the serial number that's displayed in the test cell for a currently executing test. This can be useful if the serial number is changed during a long running test and you want to update the value shown to the operator.



Remarks:

The serial number can be read using the reserved variable $SerialNumber.



Function arguments



Parameter

Variable Type

Description



$SerialNumber

String

The serial number to set the test cell display.





Return parameters



Parameter

Variable Type

Description



None





Example:





// Prompt the user for a new serial number.

$newSerial = OperatorInputPrompt("Enter the new Serial Number");



SetSerialNumberField($newSerial);





SetTestName

Previous Top Next



* * *



SetTestName



Usage:

SetTestName($testName);





Description:

This function will set the current test name. This test name will appear in the "Current Test" display at the top of the test cell. The $testName will also be copied into the Test Group for all recorded measurements until the test name is changed.





Remarks:

Note: RecordMeasurement functions will allow you to set the Measurement Name but the Test Name and Test Group that will be recorded are the ones set by this function.

Function arguments



Parameter

Variable Type

Description



$testName

String

The Test Name to set for the current test.





Return parameters



Parameter

Variable Type

Description



None





Example(s):

// Set the current test name.

$testName = "Read_Voltage");

SetTestName($testName);





SetWaitingOff

Previous Top Next



* * *



SetWaitingOff

Usage:

SetWaitingOff();

Description:

This will make JabilTest go from a waiting status back to running status.





Example Script.

SetWaitingOff();

You do not need to set the status back to running, because the next script function call will do that.

See also SetWaitingOn function.



Function Arguments



Parameter

Variable Type

Description



None





Return Parameters



Parameter

Variable Type

Description



None





SetWaitingOn

Previous Top Next



* * *



SetWaitingOn

Usage:

SetWaitingOn();

Description:

This will make the test cell go into waiting mode.

It will be indicated by an orange flickering status.

This status is also reported to the remote channel and in the logging.

This function should be used in combination with an operator depending function.

Like a message popup.



Example Script.

SetTestName("Waiting Test");

UpdateStatus("Waiting Test");

SetWaitingOn();

$output = OperatorPrompt("Ask the operator do to this, do that...","OK");

You do not need to set the status back to running, because the next scriptfunction call will do that.



However, run the SetWaitingOff() function, if you need to stop the waiting state and put JabilTest back in running mode.

Function Arguments



Parameter

Variable Type

Description



None





Return Parameters



Parameter

Variable Type

Description



None





Sleep

Previous Top Next



* * *



Sleep

Usage:

Sleep($Time);

Description:

Instructs the script to pause for the time period specified in seconds.

Function Arguments



Parameter

Variable Type

Description



$Time

Integer

The number of seconds to pause before continuing.





Return Parameters



Parameter

Variable Type

Description



None





SleepMicroseconds

Previous Top Next



* * *



SleepMicroseconds

Usage:

SleepMicroseconds($Time);

Description:

Instructs the script to pause for the time period specified in microseconds (millionths of a second). This can be used to fine-tuning timing that requires a finer adjustment than the Sleep function provides. See also the Sleep command.

Function Arguments



Parameter

Variable Type

Description



$Time

Integer

The number of microseconds to pause before continuing.





Return Parameters



Parameter

Variable Type

Description



None





SleepMilliseconds

Previous Top Next



* * *



SleepMilliseconds

Usage:

SleepMilliseconds($Time);

Description:

Instructs the script to pause for the time period specified in milliseconds.

Function Arguments



Parameter

Variable Type

Description



$Time

Integer

The number of milliseconds to pause before continuing.





Return Parameters



Parameter

Variable Type

Description



None





UpdateProgressBar

Previous Top Next



* * *



UpdateProgressBar

Usage:

UpdateProgressBar($progress);

Description:

Updates The Progress Bar in the cell display to show the current test progress. This is an integer number between 1 and 100 which indicates the percentage completion of the current script. Usage of this function is optional, but can serve as a useful indicator to the operator for tests that are longer in duration.

Function Arguments



Parameter

Variable Type

Description



$progress

Integer

The percentage completion that should be displayed in the script progress meter.





Return Parameters



Parameter

Variable Type

Description



None





UpdateStatus

Previous Top Next



* * *



UpdateStatus

Usage:

UpdateStatus($DisplayString);

Description:

Writes the supplied string to the current cell's progress status window.

Function Arguments



Parameter

Variable Type

Description



$DisplayString

String

The string that should be displayed in the progress window.





Return Parameters



Parameter

Variable Type

Description



None





StringCat

Previous Top Next



* * *



StringCat



Usage:

$returnString = StringCat($firstString, $secondString);





Description:

This function will concatenate two strings together and return the result.

Function arguments



Parameter

Variable Type

Description



$firstString

String

The first string to be concatenated. This string will be at the start of the $returnString.



$secondString

String

The second string to be concatenated. This string will be at the end of the $returnString.





Return parameters



Parameter

Variable Type

Description



$returnString

String

A new string with $firstString and $secondString concatenated.





Example(s):





// Concatenate two string together.

$first = "These two strings ";

$second = "will be put together.";





$resultString = StringCat($first, $second);





UpdateStatus($resultString);





StringCheckMask

Previous Top Next



* * *



StringCheckMask



Usage:

$matches = StringCheckMask($stringToCheck, $mask);





Description:

This function will check the supplied string with the RegEx espression in $mask and return a True if the string matches the mask (False, otherwise).





Remarks:

See the website at: https://msdn.microsoft.com/en-us/library/hs600312(v=vs.110).aspx for more information on RegEx expressions.

Function arguments



Parameter

Variable Type

Description



$stringToCheck

String

The string to test with the mask.



$mask

String

The RegEx expression to check the string against.





Return parameters



Parameter

Variable Type

Description



$matches

Boolean

True if the string matches the RegEx expression in $mask.





Example(s):

// Check a serial number for a the format:

// 1-5 digits,

// 2-4 alpha character,

// 3-8 digits.

$serNum = "1234ABC1234567"; // This will pass the test.

$mask = "[0-9]{1,5}[A-Za-z]{2,4}[0-9]{3,8}";





$match = StringCheckMask($serNum, $mask);





StringCompare

Previous Top Next



* * *



StringCompare

Usage:

StringCompare($firstString,$secondString);

Description:

Compares the first and second string parameters for equality. If the first and second parameters are identical, the test passes, otherwise a failure is returned to the executive. This function is case-sensitive.

Function Arguments



Parameter

Variable Type

Description



$FirstString

String

The first string to be compared.



$SecondString

String

The second string to be compared.





Return Parameters



Parameter

Variable Type

Description



None





StringCompareOrdinal

Previous Top Next



* * *



StringCompareOrdinal

Usage:

$Result = StringCompareOrdinal($String1, $String2);

Description:

The StringCompareOrdinal function compares two string objects by evaluating the numeric values of the corresponding characters in each string.



Example

$Result = StringCompareOrdinal("ABC","ABD"); // Returns -1

$Result = StringCompareOrdinal("ABD","ABC"); // Returns 1

$Result = StringCompareOrdinal("ABC","ABC"); // Returns 0

Function arguments



Parameter

Variable Type

Description



$String1

String

The first string to compare.



$String2

String

The second string to compare.





Return parameters



Parameter

Variable Type

Description



$Result

Integer

Returns the result of the ordinal evaluation (i.e. the numerical difference between the values of the two strings)





StringComparison

Previous Top Next



* * *



StringComparison

Usage:

$Result = StringComparison($Value1,$Value2,$LogicalOperator);

Description:

The StringComparison function returns a boolean resulting from the comparison of two script variables. $Value1 represents the first comparison value, $Value2 represents the second comparison value, and $LogicalOperator represents the comparison type to be performed.

For Example:

$Result = StringComparison($Value1,"cat","==")

$Result will be 'true' if the variable contents of $Value1 are equal to "cat".

Function Arguments



Parameter

Variable Type

Description



$Value1

String

First Comparison Value



$Value2

String

Second Comparison Value



$LogicalOperator

String

The logical comparison operation to perform on the two supplied arguments. Valid Logical Operators are:

· "==": Equal To

· "!=": Not Equal To





Return Parameters



Parameter

Variable Type

Description



$Result

Boolean

The result of the logical comparison operation





StringContains

Previous Top Next



* * *



StringContains

Usage:

$Result = StringContains($String1,$String2);

Description:

Returns a boolean value indicating whether or not $String2 exists in $String1. Function Arguments



Parameter

Variable Type

Description



$String1

String

The primary string which will be searched to see if it contains an occurence of $String2



$String2

String

The search string which will be searched for inside of $String1





Return Parameters



Parameter

Variable Type

Description



$Result

Boolean

Returns "TRUE" if $String2 is found inside of $String1, otherwise returns "FALSE"





StringCut

Previous Top Next



* * *



StringCut



Usage:

$returnString = StringCut($inputString, $tokenString, $numberOfCharacters);



Description:

Searches for the $tokenString in the $inputString. If the token string is found, the $returnString parameter will be a substring of the $inputString - starting after the location of the $tokenString and containing up to the $numberOfCharacters parameter specified.





Remarks:

The test will FAIL if the token string is not found.



Function arguments



Parameter

Variable Type

Description



$inputString

String

The string to be searched.



$tokenString

String

The string to be found in the input string.



$numberOfCharacters

Integer

The number of characters to be returned. If the input string contains fewer characters than specified, the entire remaining string will be returned.





Return parameters



Parameter

Variable Type

Description



$returnString

String

The resulting substring returned.





Example:





// Return 5 characters after the word "good".

$inStr = "Every Good Boy Does Fine.";

$token = "Good";



$numChars = 5;



$returnStr = StringCut($inStr, $token, $numChars);



The return string will contain " Boy ".





StringEndsWith

Previous Top Next



* * *



StringEndsWith

Usage:

$Result = StringEndsWith($String1,$String2,$IgnoreCase);

Description:

The function will return true if the contents of $String1 ends with the string specified in $String2. The $IgnoreCase parameter allows the function to ignore differences in upper vs. lower case when doing the comparison operation.



Function arguments



Parameter

Variable Type

Description



$String1

String

The primary string to search for the substring.



$String2

String

The string to search for at the end of the primary string



$IgnoreCase

Boolean

Specifies whether or not to ignore upper/lower case differences when making the comparison.





Return parameters



Parameter

Variable Type

Description



$Result

Boolean

Returns a true/false value indicating whether or not $String2 was found at the beginning of $String1





Example

$Result = StringEndsWith("ABCDEF","ABC",true);





StringIndexOf

Previous Top Next



* * *



StringIndexOf



Usage:

$location = StringIndexOf($primaryString, $searchString, $startIndex);



Description:

This function will find the position of the first occurrence of the $searchString occuring in the $primaryString, starting at the character position indicated by $startIndex.



Remarks:

If the search string is not found, a value of -1 is returned to the executive.





Function arguments



Parameter

Variable Type

Description



$primaryString

String

The string to be searched for occurrences of the search string.



$searchString

String

The string to be searched for in the primary string.



$startIndex

Integer

The 0-based index to begin searching for the second string at.





Return parameters



Parameter

Variable Type

Description



$location

Integer

The location of the 0-based index of the first occurrence of the search string in the primary string. If the search string is not found, -1 is returned.





Examples:





$textToSearch = "My Dog is a Good Dog.";



// Search starting from the first character.

$location = StringIndexOf($textToSearch, "Dog", 0);

// $location returns 3.



// Search starting from the fourth character. Will skip first "Dog".

$location = StringIndexOf($textToSearch, "Dog", 4);

// $location returns 17.





StringIsHexadecimal

Previous Top Next



* * *



StringIsHexadecimal

Usage:

$IsHexadecimal = StringIsHexadecimal($InputString);

Description:

This function evaluates the input string to determine if it contains a valid hexadecimal value. If the string can be converted to a positive/negative integer, the function returns true, otherwise a false value is returned.



Function arguments



Parameter

Variable Type

Description



$InputString

String

The string to evalutate to determine if it contains a value that can be parsed into a hexadecimal value type. The string shall not contain a leading "0x" in order to be considered a value.





Return parameters



Parameter

Variable Type

Description



$IsHexadecimal

Boolean

Returns a value of true if the string represents a hexadecimal integer value, otherwise returns a false value.





Example





$Hex = StringIsHexadecimal("Kermit the Frog!"); // Returns False





$Hex = StringIsHexadecimal ("FEDCBA01"); // Returns True





StringIsNumeric

Previous Top Next



* * *



StringIsNumeric

Usage:

$IsNumeric = StringIsNumeric($InputString);

Description:

This function evaluates the input string to determine if it contains a valid numeric value. If the string can be converted to a positive/negative integer or floating point value, the function returns true, otherwise a false value is returned.



Function arguments



Parameter

Variable Type

Description



$InputString

String

The string to evaluate to determine if it contains a value that can be parsed into numeric value type.





Return parameters



Parameter

Variable Type

Description



$IsNumeric

Boolean

Returns a value of true if the string represents a positive/negative integer or floating point value, otherwise returns a false value.





Usage Example:





$Numeric = StringIsNumeric("Kermit the Frog!"); // Returns False

$Numeric = StringIsNumeric("-1232.22"); // Returns True





StringLastIndexOf

Previous Top Next



* * *



StringLastIndexOf



Usage:

$location = StringLastIndexOf($primaryString, $searchString, $startIndex);



Description:

This function will find the position of the last occurence of the $searchString occurring in the $primaryString, starting at the character position indicated by $startIndex beginning from the end of the string.



Remarks:

If the search string is not found, a value of -1 is returned to the executive.





Function arguments



Parameter

Variable Type

Description



$primaryString

String

The string to be searched for occurrences of the search string.



$searchString

String

The string to be searched for in the primary string.



$startIndex

Integer

The 0-based index to begin searching for the second string at. 0 = the end of the string.





Return parameters



Parameter

Variable Type

Description



$location

Integer

The location of the 0-based index of the first occurrence of the search string in the primary string. If the search string is not found, -1 is returned. The index returned is from the beginning of the string.





Examples:





$textToSearch = "Every Good Dog Likes to Bark at Dogs In The Neighborhood.";

$strLength = StringLength($textToSearch);



// Search starting from the last character. Returns -1.

$location = StringLastIndexOf($textToSearch, "Dog", 0);



// Search starting from the first character. Returns 32.

$location = StringLastIndexOf($textToSearch, "Dog", $strLength);



// For comparison: Using StringIndexOf to find the first occurrence of the string. Returns 11.

$location = StringIndexOf($textToSearch, "Dog", 0);





StringLength

Previous Top Next



* * *



StringLength

Usage:

$length = StringLength($InputString);

Description:

Returns the Integer value representing the number of characters in the input string. Function Arguments



Parameter

Variable Type

Description



$Input

String

The Input String





Return Parameters



Parameter

Variable Type

Description



$length

Integer

The number of characters in the input string.





StringLookup

Previous Top Next



* * *



StringLookup

Usage:

$returnString = StringLookup($keyString,$pairString);

Description:

This function will search the $pairString argument for the the first occurence of the $keyString and return it's corresponding value.

The format of the $pairString is: "key:value,key:value,key:value,etc". In the event that they $keyString value doesn't exist, or can't be found in the $pairString argument, the test generates a failing result. Otherwise, a passing result is always returned.

Example:

$returnString = StringLookup("frog","dog:canine,cat:feline,mouse:rodent,frog:amphibian");

After this operation $returnString will contain "amphibian".

Function Arguments



Parameter

Variable Type

Description



$keyString

String

The key to be located in the $pairString argument



$pairString

String

The string containing the keys and values in the format "key:value,key:value,..."





Return Parameters



Parameter

Variable Type

Description



$returnString

String

The corresponding value matching the $keyString parameter.





StringParse

Previous Top Next



* * *



StringParse



Usage:

$returnString = StringParse($StringToParse, $firstString, $secondString);



Description:

This function returns a portion of a string that exists between two delimiting strings.



Function arguments



Parameter

Variable Type

Description



$StringToParse

String

The string to be parsed.



$firstString

String

The opening delimiter string.



$secondString

String

The closing delimiting string.





Return parameters



Parameter

Variable Type

Description



$returnString

String

The portion of the input string occurring between the two delimiting strings.





Example:





// Find the word(s) between two specified words.

$testString = "The quick brown fox jumps over the lazy stream.";

$firstString = "brown ";

$secondString = " jumps";



// Find the text between the two delimiters.

$returnString = StringParse($testString, $firstString, $secondString);



// $returnString now contains "fox".





StringParseToBoolean

Previous Top Next



* * *



StringParseToBoolean



Usage:

$boolResult = StringParseToBoolean($stringToCheck);





Description:

Parses the start of a string to see if it gives an indication of a boolean value. White space characters at the start of the string are ignored. If the first character of the string is "T", "t", "Y", "y", or"1" the result returned will be True. All other characters will return False.

Function Arguments



Parameter

Variable Type

Description



$stringToCheck

String

The string to parse.





Return parameters



Parameter

Variable Type

Description



$boolResult

Boolean

Whether the first non-white-space character was T, t, Y, y or 1.





Example:





$checkStr = " true";

$result = StringParseToBoolean($checkStr);

// The return boolean will be True.





StringParseToFloat

Previous Top Next



* * *



StringParseToFloat

Usage:

$MyFloat = StringParseToFloat($InputString);

Description:

This functions converts a string in a numeric format to an floating point variable type. If the string is not in a valid format which can be parsed to a floating point variable type successfully, the function returns a failing result.



Function arguments



Parameter

Variable Type

Description



$InputString

String

The numeric string to be converted to an floating point.





Return parameters



Parameter

Variable Type

Description



$MyFloat

Float

The resulting float from the string conversion.





Usage Example:

$MyFloat = StringParseToFloat($MyString)





//Output

StringParseToFloat: [19239.232] Was Successfully Converted to a Float [19239.232]





StringParseToInteger

Previous Top Next



* * *



StringParseToInteger

Usage:

$MyInteger = StringParseToInteger($InputString);

Description:

This functions converts a string in a numeric format to an integer variable type. If the string is not in a valid format which can be parsed to an integer successfully, the function returns a failing result.



Function arguments



Parameter

Variable Type

Description



$InputString

String

The numeric string to be converted to an integer.





Return parameters



Parameter

Variable Type

Description



$MyInteger

Integer

The resulting integer from the string conversion.





Usage Example:





$MyInt = StringParseToInteger($MyString);





//Output

StringParseToInteger: [0012345] Was Successfully Converted to an Integer [12345]





StringRemoveVT100Codes

Previous Top Next



* * *



StringRemoveVT100Codes



Usage:

$resultString = StringRemoveVT100Codes($inputString);



Description:

This function removes the ANSI / VT100 control codes from a string.



Remarks:

· The code removes the ANSI / VT100 control codes only. Some of the codes for specific keys on the terminal are not removed.

Function arguments



Parameter

Variable Type

Description



$inputString

Strinf

The string that will have the control codes removed.





Return parameters



Parameter

Variable Type

Description



$resultString

String

The input string with all of the control codes removed.





Example(s):

$resultString = StringRemoveVT100Codes($inputString);





StringReplace

Previous Top Next



* * *



StringReplace

Usage:

$returnString = StringReplace($inputString,$findString,$replaceString);



Description:

This function finds all occurences of the $findString parameter in the $inputString parameter, and replaces them with the $replaceString.





Example:

$returnString = StringReplace("Every Good Boy Does Good.","Good","Bad");

After this operation $returnString will contain "Every Bad Boy Does Bad.".

Function Arguments



Parameter

Variable Type

Description



$inputString

String

The input string on which to perform the find and replace operation.



$findString

String

The string to be located and replaced in the $inputString



$replaceString

String

The string to be substituted in place of the $findString.





Return Parameters



Parameter

Variable Type

Description



$returnString

String

The newly created string with the substrings replaced.





StringReplaceHexByte

Previous Top Next



* * *



StringReplaceHexByte

Usage:

$returnString = StringReplaceHexByte($inputString,$findHexValue,$replaceHexValue);

Description:

This function replaces all occurances of the $findHexValue with the $replaceHexValue parameter.

Example:

$Test = New("String","This is a good string");

$Test = StringReplaceHexByte($Test,"6F","7A");

After this operation $rTest will contain "This is a gzzd string".

Function Arguments



Parameter

Variable Type

Description



$inputString

String

The input string on which to perform the find and replace operation.



$findHexValueString

String

An 8-bit hexidecimal value



$replaceHexValue

String

An 8-bit hexidecimal value





Return Parameters



Parameter

Variable Type

Description



$returnString

String

The newly created string with the substrings replaced.





StringReplaceHexString

Previous Top Next



* * *



StringReplaceHexString

Usage:

$returnString = StringReplaceHexString($inputString,$findHexStringValue,$replaceHexStringValue);

Description:

This function replaces all occurances of the $findHexStringValue with the $replaceHexStringValue parameter.

Example: $Test = StringReplaceHexByte("This is a good string","67 6F 6F 64 ","62 61 64");

After this operation $Test will contain "This is a bad string".

Function Arguments



Parameter

Variable Type

Description



$inputString

String

The input string on which to perform the find and replace operation.



$findHexStringValue

String

A list of 8-bit hexidecimal values



$replaceHexStringValue

String

A list of 8-bit hexidecimal value





Return Parameters



Parameter

Variable Type

Description



$returnString

String

The newly created string with the substrings replaced.





StringReverse

Previous Top Next



* * *



StringReverse



Usage:

$returnString = StringReverse($stringToReverse);





Description:

This function will reverse all the bytes in a string (first byte becomes the last byte and vice versa) and return the result.

Function arguments



Parameter

Variable Type

Description



$stringToReverse

String

The string that will be reversed.





Return parameters



Parameter

Variable Type

Description



$returnString

String

A new string with all of the bytes in reverse order.





Example(s):





// Reverse a string.

$str = "This string will be reversed.";





$resultString = StringReverse($str);





UpdateStatus($resultString);

// Returns: ".desrever eb lliw gnirts sihT".





StringSplit

Previous Top Next



* * *



StringSplit



Usage:

($retVar1,$retVar2,$retVar3......) = StringSplit($MainString, $SplitCharacter, $MaxReturnVariables);



Description:

The StringSplit function returns a collection from the $MainString argument splitting the string on the occurrence of the $SplitCharacter. The maximum strings returned to the executive is determined by the $MaxReturnVariables argument.



Remarks:

If $MaxReturnVariables is too small, then all of the last strings that should be split will be in the last returned string.

If $MaxReturnVariables is too large, an error will be generated and the script will be failed.



Function arguments



Parameter

Variable Type

Description



$MainString

String

The string that is to be split.



$SplitCharacter

String

The character to split the string on. This must be a single character string.



$MaxReturnVariables

String

The maximum number of strings to be returned by the function.





Return parameters



Parameter

Variable Type

Description



$retVat1, ..., $retVarN

String

The individual strings that $MainString was split into. There must be $MaxReturnVariables variables to return the strings in.





Example:





// Set up a string and split variables.

$stringToSplit = "Split this string on the spaces";

$splitChar = " ";

$numSplits = 6;



// Split the string and output the return (formatted for ease of reading).

($spl1, $spl2, $spl3, $spl4, $spl5, $spl6) = StringSplit($stringToSplit, $splitChar, $numSplits);



$outString = "The split string returned:";

$outString = $outString + "\r\n\t" + $spl1;

$outString = $outString + "\r\n\t" + $spl2;

$outString = $outString + "\r\n\t" + $spl3;

$outString = $outString + "\r\n\t" + $spl4;

$outString = $outString + "\r\n\t" + $spl5;

$outString = $outString + "\r\n\t" + $spl6;

UpdateStatus($outString);





StringSplitToArray

Previous Top Next



* * *



StringSplitToArray

Usage:

$MyArray = StringSplitToArray($MainString,$SplitCharacter,$MaxReturnItems);

Description:

The StringSplitToArray function returns a collection of from the $MainString argument splitting the string on the occurence of the $SplitCharacter. The maximum strings returned in the array is determined by the $MaxReturnItems argument. The returned strings are placed in a single dimensional array.

Example

$MyArray = StringSplitToArray("192.168.1.1",".",4);

Function arguments



Parameter

Variable Type

Description



$MainString

String

The complete file path of the file to be read.



$SplitCharacter

String

The character to split the string on, this must be a single character string



$MaxReturnItems

Integer

The maximum number of strings to be placed in the array.





Return parameters



Parameter

Variable Type

Description



$ReturnArray

Array

The array is returned as a single dimensional array containing the number of strings returned from the split function





StringStartsWith

Previous Top Next



* * *



StringStartsWith

Usage:

$Result = StringStartsWith($String1,$String2,$IgnoreCase);

Description:

The function will return true if the contents of $String1 starts with the string specified in $String2. The $IgnoreCase parameter allows the function to ignore differences in upper vs. lower case when doing the comparison operation.



Function arguments



Parameter

Variable Type

Description



$String1

String

The primary string to search for the substring.



$String2

String

The string to search for at the beginning of the primary string



$IgnoreCase

Boolean

Specifies whether or not to ignore upper/lower case differences when making the comparison.





Return parameters



Parameter

Variable Type

Description



$Result

Boolean

Returns a true/false value indicating whether or not $String2 was found at the beginning of $String1





Example

$Result = StringStartsWith("ABCDEF","ABC",true);





StringSub

Previous Top Next



* * *



StringSub

Usage:

$returnString = StringSub($inputString,$StartingPosition,$Length);

Description:

Returns a substring of the InputString parameter, starting with the position specified by the $StartingPosition argument, up to the number of characters specified in the $Length argument. In the event that the input string length is less than the $Length argument, all of the remaining string will be returned.

Example:

$inputString = "Every Good Boy Does Fine.";

$a = StringSub($inputString,3,5)

After this operation, the return string $a will contain "ry Go".

Function Arguments



Parameter

Variable Type

Description



$InputString

String

The String parameter to be searched.



$StartingPosition

Integer

The zero based position to begin the start of the substring.



$Length

Integer

The number of characters to be placed in the substring.





Return Parameters



Parameter

Variable Type

Description



$returnString

String

The resulting substring returned.





StringToLower

Previous Top Next



* * *



StringToLower

Usage:

$output = StringToLower($Input);

Description:

Converts all Alpha characters in a string to lower case. Function Arguments



Parameter

Variable Type

Description



$Input

String

The String which is to be lower-cased.





Return Parameters



Parameter

Variable Type

Description



$Output

String

The resultant lower-case string is returned.





StringToTitle

Previous Top Next



* * *



StringToTitle



Usage:

$newString = StringToTitle($oldString);



Description:

This function will convert the supplied string into Title Case (the first letter of every word will be capitalized).

Function arguments



Parameter

Variable Type

Description



$oldString

String

The string to change the case of.





Return parameters



Parameter

Variable Type

Description



$newString

String

The string changed into Title Case.





Example(s):

// Change this string to Title Case.

$oldString = "this is the string to change the case of";

$newString = StringToTitle($$oldString);



// This will return: "This Is The String To Change The Case Of"





StringToUpper

Previous Top Next



* * *



StringToUpper

Usage:

$output = StringToUpper($Input);

Description:

Converts all Alpha characters in a string to upper case. Function Arguments



Parameter

Variable Type

Description



$Input

String

The String which is to be uppercased.





Return Parameters



Parameter

Variable Type

Description



$Output

String

The resultant upper-case string is returned.





StringTrim

Previous Top Next



* * *



StringTrim

Usage:

$TrimmedString = StringTrim($StringToTrim);

Description:

The StringTrim function removes all the whitespace located at the front and end of a string.

Example

$TrimmedString = StringTrim(" MY STRING ");



Function arguments



Parameter

Variable Type

Description



$StringToTrim

String

The string which contains white space to be removed





Return parameters



Parameter

Variable Type

Description



$TrimmedString

String

The returned string with the whitespace removed.





StringTrimEnd

Previous Top Next



* * *



StringTrimEnd

Usage:

$TrimmedString = StringTrimEnd($StringToTrim);

Description:

The StringTrimEnd function removes all the whitespace located at the end of a string.

Example

$TrimmedString = StringTrimEnd(" MY STRING ");



Function arguments



Parameter

Variable Type

Description



$StringToTrim

String

The string which contains white space to be removed





Return parameters



Parameter

Variable Type

Description



$TrimmedString

String

The returned string with the whitespace removed.





StringTrimStart

Previous Top Next



* * *



StringTrimStart

Usage:

$TrimmedString = StringTrimStart($StringToTrim);

Description:

The StringTrimStart function removes all the whitespace located at the front of a string.

Example

$TrimmedString = StringTrimStart(" MY STRING ");



Function arguments



Parameter

Variable Type

Description



$StringToTrim

String

The string which contains white space to be removed





Return parameters



Parameter

Variable Type

Description



$TrimmedString

String

The returned string with the whitespace removed.





Clipboard_GetText

Previous Top Next



* * *



Clipboard_GetText



Usage:

$cbText = Clipboard_GetText();





Description:

This function will return text that is on the Windows System clipboard.

Function arguments



Parameter

Variable Type

Description



None





Return parameters



Parameter

Variable Type

Description



$cbText

String

The string data that was on the Windows System clipboard.





Example(s):

// Get the text data

$cbText = Clipboard_GetText();





Clipboard_SetText

Previous Top Next



* * *



Clipboard_SetText



Usage:

Clipboard_SetText($textToCopy);





Description:

This function will place text on the Windows System clipboard.

Function arguments



Parameter

Variable Type

Description



$textToCopy

String

The text to copy onto the Windows System clipboard.





Return parameters



Parameter

Variable Type

Description



None





Example(s):

// Copy the text data

$textToCopy = "This goes on the clipboard";

Clipboard_SetText($textToCopy);





CMD_Close

Previous Top Next



* * *



CMD_Close



Usage:

CMD_Close($cmdHandle);





Description:

This function will close the command line window that was opened with CMD_OpenCMDProcess.

Function arguments



Parameter

Variable Type

Description



$cmdHandle

Object

A handle to the command line process that was opened with CMD_OpenCMDProcess.





Return parameters



Parameter

Variable Type

Description



None





Example(s):

// Open a Window and Name it.

$winName = "Test Window";

$cmdHandle = CMD_OpenCMDProcess($winName);





// Now close the window.

CMD_Close($cmdHandle);





CMD_OpenCMDProcess

Previous Top Next



* * *



CMD_OpenCMDProcess



Usage:

$cmdHandle = CMD_OpenCMDProcess($windowName, $showWindow);





Description:

This function will open a command line process in a shown or hidden window and apply a name to that window (even if not visible, the window still needs a unique name).





Note:

CMD_OpenCMDProcess works differently from the CreateProcess function in that this function will open the command window and allow for reading Standard In and Standard Error without closing the process first. This is an asynchronous operation.

Function arguments



Parameter

Variable Type

Description



$windowName

String

A name to attach to the process window that opens.



$showWindow

Boolean

Whether to show the command window. This parameter is optional. If omitted, the default will be FALSE.





Return parameters



Parameter

Variable Type

Description



$cmdHandle

Object

A handle to the command line process that is used to send text to this process or retrieve text from the process.





Example(s):

// Open a Process and Name it.

$winName = "Test Window";

$showWin = false;

$cmdHandle = CMD_OpenCMDProcess($winName, $showWin);





CMD_ReadStdErr

Previous Top Next



* * *



CMD_ReadStdErr



Usage:

$errText = CMD_ReadStdErr($cmdHandle);





Description:

This function will return all of the error text that was generated since the last time this function was called. This is the text that a command line process would normally send to StdErr.

Function arguments



Parameter

Variable Type

Description



$cmdHandle

Object

A handle to the command line process that was opened with CMD_OpenCMDProcess.





Return parameters



Parameter

Variable Type

Description



$errText

String

The error text that was generated by this process since the last time this function was called.





Example(s):

// Open a Window and Name it.

$winName = "Test Window";

$cmdHandle = CMD_OpenCMDProcess($winName);





$errText = CMD_ReadStdErr($cmdHandle);





CMD_ReadStdOut

Previous Top Next



* * *



CMD_ReadStdOut



Usage:

$newText = CMD_ReadStdOut($cmdHandle);





Description:

This function will return all of the new text that was generated since the last time this function was called. This is the text that a command line process would normally send to StdOut.

Function arguments



Parameter

Variable Type

Description



$cmdHandle

Object

A handle to the command line process that was opened with CMD_OpenCMDProcess.





Return parameters



Parameter

Variable Type

Description



$newText

String

The new text that was generated by this process since the last time this function was called.





Example(s):

// Open a Window and Name it.

$winName = "Test Window";

$cmdHandle = CMD_OpenCMDProcess($winName);





$newText = CMD_ReadStdOut($cmdHandle);





CMD_Write

Previous Top Next



* * *



CMD_Write



Usage:

CMD_Write($cmdHandle, $text);





Description:

This function will write text to the command line process without appending an end-of-line. The text is sent to StdIn.

Function arguments



Parameter

Variable Type

Description



$cmdHandle

Object

A handle to the command line process that was opened with CMD_OpenCMDProcess.



$text

String

Text that will be sent to the command line process. No end-of-line will be appended.





Return parameters



Parameter

Variable Type

Description



None





Example(s):

// Open a Window and Name it.

$winName = "Test Window";

$cmdHandle = CMD_OpenCMDProcess($winName);





// Send the ping local command but don't press return yet.

$text = "ping 127.0.0.1";

CMD_Write($cmdHandle, $text);





CMD_WriteLine

Previous Top Next



* * *



CMD_WriteLine



Usage:

CMD_WriteLine($cmdHandle, $text);





Description:

This function will write text to the command line process and append an end-of-line. The text is sent to StdIn.

Function arguments



Parameter

Variable Type

Description



$cmdHandle

Object

A handle to the command line process that was opened with CMD_OpenCMDProcess.



$text

String

Text that will be sent to the command line process. An end-of-line will be appended.





Return parameters



Parameter

Variable Type

Description



None





Example(s):

// Open a Window and Name it.

$winName = "Test Window";

$cmdHandle = CMD_OpenCMDProcess($winName);





// Send the ping local command and press return.

$text = "ping 127.0.0.1";

CMD_WriteLine($cmdHandle, $text);





LPT_Port_Read

Previous Top Next



* * *



LPT_Port_Read

Usage:

$returnValue = LPT_Port_Read($portNumber);

Description:

This function returns a byte value representing an 8 bit value from the port specified in the function parameters.

Note:

The original DriverLINX Port I/O Driver developed by Scientific Software Tools, Inc. has been replaced with InpOut32.DLL (renamed back to DLPORTIO.dll) which is compatible with 64-bit systems.

Function arguments



Parameter

Variable Type

Description



$portNumber

Integer

The Port number to read from.

Valid ports:

· 0 = address 0x378

· 1 = address 0x3F8





Return parameters



Parameter

Variable Type

Description



$returnValue

Integer

A value of the pattern read from the port specified in the function parameters.





Example:

$returnValue = LPT_Port_Read(0);





LPT_Port_Set_Baseaddress

Previous Top Next



* * *



LPT_Port_Set_Baseaddress

Usage:

LPT_Port_Set_Baseaddress($portBaseAddress, $portData);

Description:

This function writes one byte value to the port specified in the function parameters.

Function arguments



Parameter

Variable Type

Description



$portBaseAddress

String

The Address of the port to write to, specified as a hexadecimal value, eg. "FF" for 255. Valid port ranges are 0x100 to 0x3FF.



$portData

String

The Data to be written to the port, specified as a hexadecimal byte, eg. "FF" for 255.





Return parameters



Parameter

Variable Type

Description



None





Example:

LPT_Port_Set_Baseaddress("1F", "1F");





LPT_Port_Write

Previous Top Next



* * *



LPT_Port_Write

Usage:

LPT_Port_Write($portNumber, $portData);

Description:

This function writes one byte value to the port specified in the function parameters.

Function arguments



Parameter

Variable Type

Description



$portNumber

Integer

The Port number to read from.

Valid ports:

· 0 = address 0x378

· 1 = address 0x3F8



$portData

String

The Data to be written to the port, specified as a hexadecimal byte, eg. "FF" for 255.





Return parameters



Parameter

Variable Type

Description



$returnValue

Integer

A value of the pattern read from the status byte of port specified in the function parameters.





Example:

LPT_Port_Write(0, "FE", "10"); // Bit 0 is cleared & bit 4 is set





LPT_Status_Read

Previous Top Next



* * *



LPT_Status_Read

Usage:

$returnValue = LPT_Status_Read($portNumber);

Description:

This function returns a byte value representing an 8 bit status value from the port specified in the function parameters.

Note:

The original DriverLINX Port I/O Driver developed by Scientific Software Tools, Inc. has been replaced with InpOut32.DLL (renamed back to DLPORTIO.dll) which is compatible with 64-bit systems.

Function arguments



Parameter

Variable Type

Description



$portNumber

Integer

The Port number to read from.

Valid ports:

· 0 = address 0x379

· 1 = address 0x3F9





Return parameters



Parameter

Variable Type

Description



$returnValue

Integer

A value of the pattern read from the status byte of port specified in the function parameters.





Example:

$returnValue = LPT_Status_Read(0);





CheckProcessIsRunning

Previous Top Next



* * *



CheckProcessIsRunning

Usage:

$Result = CheckProcessIsRunning($Process);

Description:

The CheckProcessIsRunning function checks to see if the supplied process name is currently executing on the PC.

Example:

$Result = CheckProcessIsRunning("iexplore"); // Will Return True if Internet Explorer is Running.

Function Arguments



Parameter

Variable Type

Description



$Process

String

The name of the process to check for it's running status





Return Parameters



Parameter

Variable Type

Description



$Result

Boolean

Returns 'TRUE' if the process is running, returns 'FALSE' otherwise.





CheckProcessIsRunningByHandle

Previous Top Next



* * *



CheckProcessIsRunningByHandle

Usage:

$Result = CheckProcessIsRunningHandle($ProcessHandle);

Description:

The CheckProcessIsRunningByHandle function checks to see if the supplied process handle is currently executing on the PC.

Example:

$Result = CheckProcessIsRunning($MyProcess); // Will Return True if the supplied process handle hasn't exited.

Function Arguments



Parameter

Variable Type

Description



$Process

Object

The process handle to check to see if the given process has exited.





Return Parameters



Parameter

Variable Type

Description



$Result

Boolean

Returns 'TRUE' if the process is running, returns 'FALSE' otherwise.





CreateProcess

Previous Top Next



* * *



CreateProcess

Usage:

$Process = CreateProcess($workingDirectory, $program, $programArguments, $showWindow);



Description:

The CreateProcesss function prepares a process for start, and returns a handle to the System.Process structure.

Function arguments



Parameter

Variable Type

Description



$workingDirectory

String

The working directory for the executable you wish to run.



$program

String

The path and name of the executable to run.



$programArguments

String

The command line arguments to be passed to the external executable.



$showWindow

Boolean

Whether the external process should be displayed in a shell window, or allowed to open another window on the desktop.

Values:

· true - Shows the external process window

· false - Prevents any window from opening on the display





Return parameters



Parameter

Variable Type

Description



$Process

Object

The handle to the Process Created





Example(s):

$Process = CreateProcess("c:\\directory", "c:\\directory\\myprogram.exe", "-v -p", false);





// The following script automates the windows diskpart.exe command line utility program

$Process = CreateProcess("c:\\windows\\system32", "c:\\windows\\system32\\diskpart.exe", "", true);

RedirectProcessStdIn($Process);

RedirectProcessStdOut($Process);

$ExitCode = StartProcess($Process, false);

Sleep(3);

WriteLineToProcessStdIn($Process, "dir\n");

Sleep(1);

WriteLineToProcessStdIn($Process, "exit\n");

$Output = ReadAllLinesFromProcessStdOut($Process);

UpdateStatus($Output);

End;





KillProcess

Previous Top Next



* * *



KillProcess

Usage:

KillProcess($Process);

Description:

The KillProcess functions kills an executing process that has been created with the CreateProcess function.

Example:

KillProcess($Process);

Function Arguments



Parameter

Variable Type

Description



$Process

Object

The handle of a process that has been created previously with the CreateProcess function.





Return Parameters



Parameter

Variable Type

Description



None





KillProcessByName

Previous Top Next



* * *



KillProcessByName

Usage:

$ProcessesKilled = KillProcessByName($ProcessName);

Description:

The KillProcessByName function will kill all the executing processes which match the current name. If more than one instance of a process exists, all the processes will be killed.

Example:

$ProcessCount = KillProcessByName($ProcessName);

Function Arguments



Parameter

Variable Type

Description



$ProcessName

String

The name of the process that you wish to kill.





Return Parameters



Parameter

Variable Type

Description



$ProcessesKilled

Integer

The number of processes that were killed as a result of running this command.





ProcessWindowControlByHandle

Previous Top Next



* * *





ProcessWindowControlByHandle





Usage:

ProcessWindowControlByHandle($ProcessHandle, $windowControl)





Description:





This function allows setting the state of the window for other processes or applications running on the same computer as Jabil Test. This is useful for minimizing or maximizing other GUI's that may be running as part of your test process.





Notes:

Uses “user32.dll” ShowWindow() function to control process windows.

Function arguments



Parameter

Variable Type

Description



$ProcessHandle

String

Process handled returned by the CreateProcess() function.



$WindowControl

Integer

Integer representing WindowShowStyle enumeration:





0. Hide - Hides the window and activates another window [SW_HIDE]

1. ShowNormal - Activates and displays a window. If the window is minimized or maximized, the system restores it to its original size and position. An application should specify this flag when displaying the window for the first time [SW_SHOWNORMAL]

2. ShowMinimized - Activates the window and displays it as a minimized window [SW_SHOWMINIMIZED]

3. ShowMaximized - Activates the window and displays it as a maximized window [SW_SHOWMAXIMIZED]

3. Maximize - Maximizes the specified window (same as ShowMaximized above) [SW_MAXIMIZE]

4. ShowNormalNoActivate - Displays a window in its most recent size and position. This value is similar to "ShowNormal", except the window is not activated. [SW_SHOWNOACTIVATE]

5. Show - Activates the window and displays it in its current size and position [SW_SHOW]

6. Minimize - Minimizes the specified window and activates the next top-level window in the Z order. Also trims working set [SW_MINIMIZE]

7. ShowMinNoActivate - Displays the window as a minimized window. This value is similar to "ShowMinimized", except the window is not activated [SW_SHOWMINNOACTIVE]

8. ShowNoActivate - Displays the window in its current size and position. This value is similar to "Show", except the window is not activated [SW_SHOWNA]

9. Restore - Activates and displays the window. If the window is minimized or maximized, the system restores it to its original size and position. An application should specify this flag when restoring a minimized window [SW_RESTORE]

10. ShowDefault - Sets the show state based on the SW_ value specified in the STARTUPINFO structure passed to the CreateProcess function by the program that started the application [SW_SHOWDEFAULT]

11. ForceMinimized - Windows 2000/XP: Minimizes a window, even if the thread that owns the window is hung. This flag should only be used when mimizing windows from a different thread [SW_FORCEMINIMIZE]





Return parameters



Parameter

Variable Type

Description



None





ProcessWindowControlByName

Previous Top Next



* * *





ProcessWindowControlByName





Usage:

ProcessWindowControlByName($processName, $windowControl)





Description:





This function allows setting the state of the window for other processes or applications running on the same computer as Jabil Test. This is useful for minimizing or maximizing other GUI's that may be running as part of your test process.





Notes:

Uses “user32.dll” ShowWindow() function to control process windows.

Function arguments



Parameter

Variable Type

Description



$ProcessName

String

The name of the process (as shown in the task manager window)



$WindowControl

Integer

Integer representing WindowShowStyle enumeration:





0. Hide - Hides the window and activates another window [SW_HIDE]

1. ShowNormal - Activates and displays a window. If the window is minimized or maximized, the system restores it to its original size and position. An application should specify this flag when displaying the window for the first time [SW_SHOWNORMAL]

2. ShowMinimized - Activates the window and displays it as a minimized window [SW_SHOWMINIMIZED]

3. ShowMaximized - Activates the window and displays it as a maximized window [SW_SHOWMAXIMIZED]

3. Maximize - Maximizes the specified window (same as ShowMaximized above) [SW_MAXIMIZE]

4. ShowNormalNoActivate - Displays a window in its most recent size and position. This value is similar to "ShowNormal", except the window is not activated. [SW_SHOWNOACTIVATE]

5. Show - Activates the window and displays it in its current size and position [SW_SHOW]

6. Minimize - Minimizes the specified window and activates the next top-level window in the Z order. Also trims working set [SW_MINIMIZE]

7. ShowMinNoActivate - Displays the window as a minimized window. This value is similar to "ShowMinimized", except the window is not activated [SW_SHOWMINNOACTIVE]

8. ShowNoActivate - Displays the window in its current size and position. This value is similar to "Show", except the window is not activated [SW_SHOWNA]

9. Restore - Activates and displays the window. If the window is minimized or maximized, the system restores it to its original size and position. An application should specify this flag when restoring a minimized window [SW_RESTORE]

10. ShowDefault - Sets the show state based on the SW_ value specified in the STARTUPINFO structure passed to the CreateProcess function by the program that started the application [SW_SHOWDEFAULT]

11. ForceMinimized - Windows 2000/XP: Minimizes a window, even if the thread that owns the window is hung. This flag should only be used when mimizing windows from a different thread [SW_FORCEMINIMIZE]





Return parameters



Parameter

Variable Type

Description



None





ReadAllLinesFromProcessStdError

Previous Top Next



* * *



ReadAllLinesFromProcessStdError



Usage:

$Result = ReadAllLinesFromProcessStdError($Process);

Description:

Reads the entire contents of the process's standard error buffer.

Note:

Before using this function, the standard output of the process must first be redirected using the RedirectProcessStdErr script function.

Function arguments



Parameter

Variable Type

Description



$Process

Object

The handle of a process that has been created previously with the CreateProcess function.





Return parameters



Parameter

Variable Type

Description



$Result

String

Returns all lines of text from process' standard error.





Usage Example:





// The following script automates the windows diskpart.exe command line utility program





$Process = CreateProcess("c:\\windows\\system32", "c:\\windows\\system32\\diskpart.exe", "", true);

RedirectProcessStdIn($Process);

RedirectProcessStdErr($Process);

$ExitCode = StartProcess($Process, false);

Sleep(3);

WriteLineToProcessStdIn($Process, "dir\n");

Sleep(1);

WriteLineToProcessStdIn($Process, "exit\n");

$Output = ReadAllLinesFromProcessStdError($Process);

UpdateStatus($Output);

End;





ReadAllLinesFromProcessStdOut

Previous Top Next



* * *



ReadAllLinesFromProcessStdOut

Usage:

$Result = ReadAllLinesFromProcessStdOut($Process);

Description:

Reads the entire contents of the process's standard output buffer.

Function Arguments



Parameter

Variable Type

Description



$Process

Object

The handle of a process that has been created previously with the CreateProcess function.





Return Parameters



Parameter

Variable Type

Description



$Result

String

Returns all lines of text from process's standard output.





Usage Example:





// The following script automates the windows diskpart.exe command line utility program





$Process = CreateProcess("c:\\windows\\system32","diskpart.exe","",true);

RedirectProcessStdIn($Process);

RedirectProcessStdOut($Process);

$ExitCode = StartProcess($Process, false);

Sleep(3);

WriteLineToProcessStdIn($Process,"dir\n");

Sleep(1);

WriteLineToProcessStdIn($Process,"exit\n");

$Output = ReadAllLinesFromProcessStdOut($Process);

UpdateStatus($Output);

End;





ReadLineFromProcessStdError

Previous Top Next



* * *



ReadLineFromProcessStdError



Usage:

$Result = ReadLineFromProcessStdError($Process);



Description:

Reads a line from the process's standard error buffer.





Remarks:

The process must already have been created using the CreateProcess function.

Before using this function, the standard error of the process must first be redirected using the RedirectProcessStdErr function.





Function arguments



Parameter

Variable Type

Description



$Process

Object

The handle of a process that was created previously.





Return parameters



Parameter

Variable Type

Description



$Result

String

One text line from the process's standard error output.





Example:





// The following script automates the windows diskpart.exe command line utility program.

$working = "c:\\windows\\system32";

$prog = "c:\\windows\\system32\\diskpart.exe";

$args = "";

$show = false;

$wait = false;

$dirCom = "dir\n";

$exitCom = "exit\n";



$process = CreateProcess($working, $prog, $args, $show);

RedirectProcessStdIn($process);

RedirectProcessStdErr($process);



$exitCode = StartProcess($process, $wait);

Sleep(3)

WriteLineToProcessStdIn($process, $dirCom);

Sleep(1)

WriteLineToProcessStdIn($process, $exitCom);



// Get the first line from the stderr of the process.

$errString = ReadLineFromProcessStdError($process);

UpdateStatus($errString);





ReadLineFromProcessStdOut

Previous Top Next



* * *



ReadLineFromProcessStdOut



Usage:

$Result = ReadLineFromProcessStdOut($Process);



Description:

Reads a line from the process's standard output buffer.





Remarks:

The process must already have been created using the CreateProcess function.

Before using this function, the standard output of the process must first be redirected using the RedirectProcessStdOut function.





Function arguments



Parameter

Variable Type

Description



$Process

Object

The handle of a process that was created previously.





Return parameters



Parameter

Variable Type

Description



$Result

String

One text line from the process's standard output.





Example:





// The following script automates the windows diskpart.exe command line utility program.

$working = "c:\\windows\\system32";

$prog = "c:\\windows\\system32\\diskpart.exe";

$args = "";

$show = false;

$wait = false;

$dirCom = "dir\n";

$exitCom = "exit\n";



$process = CreateProcess($working, $prog, $args, $show);

RedirectProcessStdIn($process);

RedirectProcessStdErr($process);



$exitCode = StartProcess($process, $wait);

Sleep(3)

WriteLineToProcessStdIn($process, $dirCom);

Sleep(1)

WriteLineToProcessStdIn($process, $exitCom);



// Get the first line from the stdout of the process.

$outString = ReadLineFromProcessStdOut($process);

UpdateStatus($outString);





RedirectProcessStdErr

Previous Top Next



* * *



RedirectProcessStdErr

Usage:

RedirectProcessStdErr($Process);

Description:

Redirects the process standard error to a buffer in the Process object.

Example:

RedirectProcessStdErr($Process);

Function Arguments



Parameter

Variable Type

Description



$Process

Object

The handle of a process that has been created previously with the CreateProcess function.





Return Parameters



Parameter

Variable Type

Description



None





Usage Example:





// The following script automates the windows diskpart.exe command line utility program





$Process = CreateProcess("c:\\windows\\system32","diskpart.exe","", true);

RedirectProcessStdIn($Process);

RedirectProcessStdOut($Process);

$ExitCode = StartProcess($Process, false);

Sleep(3);

WriteLineToProcessStdIn($Process,"dir\n");

Sleep(1);

WriteLineToProcessStdIn($Process,"exit\n");

$Output = ReadAllLinesFromProcessStdOut($Process);

UpdateStatus($Output);

End;





RedirectProcessStdIn

Previous Top Next



* * *



RedirectProcessStdIn

Usage:

RedirectProcessStdIn($Process);

Description:

Redirects the process standard input to a buffer in the Process object.

Example:

RedirectProcessStdIn($Process);

Function Arguments



Parameter

Variable Type

Description



$Process

Object

The handle of a process that has been created previously with the CreateProcess function.





Return Parameters



Parameter

Variable Type

Description



None





Usage Example:





// The following script automates the windows diskpart.exe command line utility program





$Process = CreateProcess("c:\\windows\\system32","diskpart.exe","", true);

RedirectProcessStdIn($Process);

RedirectProcessStdOut($Process);

$ExitCode = StartProcess($Process, false);

Sleep(3);

WriteLineToProcessStdIn($Process,"dir\n");

Sleep(1);

WriteLineToProcessStdIn($Process,"exit\n");

$Output = ReadAllLinesFromProcessStdOut($Process);

UpdateStatus($Output);

End;





RedirectProcessStdOut

Previous Top Next



* * *



RedirectProcessStdOut

Usage:

RedirectProcessStdOut($Process);

Description:

Redirects the process standard output to a buffer in the Process object.

Important Note: There is a maximum buffer size on the process standard output pipe, and if your program sends large amounts of information out to the standard output, or is a long running process, you will need to periodically read lines from the standard output to prevent the process from dead-locking. As an alternative, you can use the new function StartProcessCaptureStandardOutputUntilExit which automatically polls the process for output while waiting for the external process to complete.

Example:

RedirectProcessStdOut($Process);

Function Arguments



Parameter

Variable Type

Description



$Process

Object

The handle of a process that has been created previously with the CreateProcess function.





Return Parameters



Parameter

Variable Type

Description



None





Usage Example:





// The following script automates the windows diskpart.exe command line utility program





$Process = CreateProcess("c:\\windows\\system32","diskpart.exe","", true);

RedirectProcessStdIn($Process);

RedirectProcessStdOut($Process);

$ExitCode = StartProcess($Process, false);

Sleep(3);

WriteLineToProcessStdIn($Process,"dir\n");

Sleep(1);

WriteLineToProcessStdIn($Process,"exit\n");

$Output = ReadAllLinesFromProcessStdOut($Process);

UpdateStatus($Output);

End;





SafelyRemoveDriveByLetter

Previous Top Next



* * *



SafelyRemoveDriveByLetter



Usage:

SafelyRemoveDriveByLetter($DriveLetter, $WindowsNotification)



Description:

This function ejects a removable disk present on your system. The function checks if the drive is a removable disk device.



Remarks:

· This function is tested with a USB memory stick.

· The function won't eject the drive when it's not removable.

Function arguments



Parameter

Variable Type

Description



$DriveLetter

String

This parameter represents the drive letter to be ejected.



$WindowsNotification

Boolean

Pass true to allow the Windows shell to display any related UI element.





Return parameters



Parameter

Variable Type

Description





Example(s):

SafelyRemoveDriveByLetter("E:", true);





SafelyRemoveDriveByLetter("E:\\", true);





SafelyRemoveDriveByLetter("E:/", true);





SetProcessWindowToForeground

Previous Top Next



* * *





SetProcessWindowToForeground





Usage:

SetProcessWindowToForeground($processName)





Description:





This function is used to set the current foreground window on a visual process running on the test computer. Note, that if a window is minimized, that it first must be changed to an visible state using the ProcessWindowControlByName function.





If the named process is not currently running, the function will generate a failure. The process can be started using the StartProcess or SystemCall command if necessary.

Function arguments



Parameter

Variable Type

Description



$ProcessName

String

The name of the process (as shown in the task manager window)





Return parameters



Parameter

Variable Type

Description



None





Usage Example:





// Toggles back and forth between a running notepad process and Jabil Test





SetProcessWindowToForeground("notepad");

Sleep(1);

SetProcessWindowToForeground("jabiltest");

Sleep(1);

SetProcessWindowToForeground("notepad");

Sleep(1);

SetProcessWindowToForeground("jabiltest");

Sleep(1);

SetProcessWindowToForeground("notepad");





StartProcess

Previous Top Next



* * *



StartProcess



Usage:

$ExitCode = StartProcess($Process, $WaitForExit);





Description:

The StartProcess functions starts a process that has been created with the CreateProcess function. The $WaitForExit argument controls whether or not the test execution will block and wait for the process to exit, or to continue on in parallel with the executing process. If the WaitForExit variable has been set to TRUE, then the function also returns the errorcode of the process that has terminated.

Function arguments



Parameter

Variable Type

Description



$Process

Object

The handle of a process that has been created with the CreateProcess function.



$WaitForExit

Boolean

Specifies whether or not the script should continue execution, or should block and wait for the process to finish.





Return parameters



Parameter

Variable Type

Description



$ExitCode

Integer

The exit code of the terminating process. NOTE: The exit code is only returned if $WaitForExit was set to true. Otherwise, no return value is passed to the script.





Example(s):

$ExitCode = StartProcess($Process, true);





// The following script automates the windows diskpart.exe command line utility program





$Process = CreateProcess("c:\\windows\\system32", "diskpart.exe", "", true);

RedirectProcessStdIn($Process);

RedirectProcessStdOut($Process);

$ExitCode = StartProcess($Process, false);

Sleep(3);

WriteLineToProcessStdIn($Process, "dir\n");

Sleep(1);

WriteLineToProcessStdIn($Process, "exit\n");

$Output = ReadAllLinesFromProcessStdOut($Process);

UpdateStatus($Output);

End;





StartProcessCaptureStandardErrorUntilExit

Previous Top Next



* * *





StartProcessCaptureAllStandardErrorUntilExit





Usage:

($ExitCode,$OutputString) = StartProcessCaptureAllStandardErrorUntilExit($Process);





Description:





This function executes the supplied process, and waits for it to exit. During the execution of the process, all standard error is captured and returned as a single string variable.





This function is useful for capturing the output of a long running process which doesn't require any input from the operator or the test executive.





Note:

Before using this function, the standard output of the process must first be redirected using the RedirectProcessStdErr script function.

Function arguments



Parameter

Variable Type

Description



$Process

Object

The handle of a process that was created previously with the CreateProcess function.





Return parameters



Parameter

Variable Type

Description



$ExitCode

Integer

The exit code of the process as returned by the execution shell.



$OutputString

String

The entire standard error of the process during execution.





Usage Example:





$Process = CreateProcess("c:\\", "c:\\myConsoleApp.exe", "", true);

RedirectProcessStdIn($Process);

RedirectProcessStdErr($Process);

($ExitCode, $BigString) = StartProcessCaptureAllStandardErrorUntilExit($Process);

UpdateStatus($BigString);

End;





StartProcessCaptureStandardOutputUntilExit

Previous Top Next



* * *





StartProcessCaptureAllStandardOutputUntilExit





Usage:

($ExitCode,$OutputString) = StartProcessCaptureAllStandardOutputUntilExit($Process);





Description:





This function executes the supplied process, and waits for it to exit. During the execution of the process, all standard output is captured and returned as a single string variable.





This function is useful for capturing the output of a long running process which doesn't require any input from the operator or the test executive.





Note:

Before using this function, the standard output of the process must first be redirected using the RedirectProcessStdOut script function.

Function arguments



Parameter

Variable Type

Description



$Process

Object

The handle of a process that was created previously with the CreateProcess function.





Return parameters



Parameter

Variable Type

Description



$ExitCode

Integer

The exit code of the process as returned by the execution shell.



$OutputString

String

The entire standard output of the process during execution.





Usage Example:





$Process = CreateProcess("c:\\", "c:\\myConsoleApp.exe", "", true);

RedirectProcessStdIn($Process);

RedirectProcessStdOut($Process);

($ExitCode, $BigString) = StartProcessCaptureAllStandardOutputUntilExit($Process);

UpdateStatus($BigString);

End;





SystemCall

Previous Top Next



* * *



SystemCall

Usage:

SystemCall($workingDirectory,$program,$programArguments,$waitForExit,$showWindow);

Description:

The SystemCall function is used to spawn an external process from the test executive. The function will always return a PASS result, unless the external process to run can't be found.

Example:

SystemCall("c:\\directory","myprogram.exe","-v -p","TRUE","FALSE");

This function will spawn the myprogram.exe executable contained in the c:\directory passing it the arguments '-v -p'. The test executive will wait for the process to finish before continuing, and no window will be displayed on the GUI.

Function Arguments



Parameter

Variable Type

Description



$workingDirectory

String

The working directory for the executable you wish to run.



$program

String

The name of the executable to run



$programArguments

String

The command line arguments to be passed to the external executable.



$waitFor

String

A boolean string indicating whether the test executive should wait for the external process to exit before continuing on with the script execution, or whether the executive should continue to run in parallel with the external process. Supported values are:

"TRUE" - Waits for the process to finish

"FALSE" - Continues with the rest of the test without waiting for the external process to finish



$showWindow

String

A boolean string indicating whether the external process should be displayed in a shell window, or allowed to open another window on the desktop. Supported values are:

"TRUE" - Shows the external process window

"FALSE" - Prevents any window from opening on the display.





Return Parameters



Parameter

Variable Type

Description



None





WriteLineToProcessStdIn

Previous Top Next



* * *



WriteLineToProcessStdIn

Usage:

WriteLineToProcessStdIn($Process,$Text);

Description:

Writes a text line to the process's standard input buffer.

Example:

WriteLineToProcessStdIn($Process);

Function Arguments



Parameter

Variable Type

Description



$Process

Object

The handle of a process that has been created previously with the CreateProcess function.



$Text

String

Text line to write to the process's standard input.





Return Parameters



Parameter

Variable Type

Description



None





Usage Example:





// The following script automates the windows diskpart.exe command line utility program





$Process = CreateProcess("c:\\windows\\system32","diskpart.exe","", true);

RedirectProcessStdIn($Process);

RedirectProcessStdOut($Process);

$ExitCode = StartProcess($Process, false);

Sleep(3);

WriteLineToProcessStdIn($Process,"dir\n");

Sleep(1);

WriteLineToProcessStdIn($Process,"exit\n");

$Output = ReadAllLinesFromProcessStdOut($Process);

UpdateStatus($Output);

End;





RegistryCheckKeyExists

Previous Top Next



* * *



RegistryCheckKeyExists



Usage:

$KeyExists = RegistryCheckKeyExists($RegistryRootKey,$RegistrySubKey,$RegistryKeyName)

Description:





This function checks to see if the specified registry key exists. If the key is present in the registry, the function returns true, otherwise false is returned.





If the registry could be successfully opened, the function will generate a passing result.

Function arguments



Parameter

Variable Type

Description



$RegistryRootKey

String

The name of the base registry key. Allowable values are:

· "ClassesRoot"

· "CurrentConfig"

· "CurrentUser"

· "LocalMachine"





$RegistrySubKey

String

The name of the registry subkey which contains the key to be edited



$RegistryKeyName

String

The name of the registry key to be modified





Return parameters



Parameter

Variable Type

Description



$KeyExists

Boolean

A boolean indicating whether or not the key was found in the registry,





Usage Examples

$KeyExists = RegistryCheckKeyExists("LocalMachine","Software\\MySubKey","MyKey")





RegistryCreateSubKey

Previous Top Next



* * *



RegistryCreateSubKey



Usage:

RegistryCreateSubKey($RegistryRootKey,$RegistryKeyName);





Description:





This function creates the registry sub key under the specified Registry Root Key. The user must have sufficient privileges to write to the specified registry location or the function will generate a failure if the key cannot be written.





Function arguments



Parameter

Variable Type

Description



$RegistryRootKey

String

The name of the base registry key. Allowable values are:

· "ClassesRoot"

· "CurrentConfig"

· "CurrentUser"

· "LocalMachine"





$RegistryKeyName

String

The name of the registry subkey to create





Return parameters



Parameter

Variable Type

Description



None





Usage Examples

RegistryCreateSubKey("LocalMachine","Software\\MySubKey\\");





RegistryDeleteSubKey

Previous Top Next



* * *



RegistryDeleteSubKey

Usage:

RegistryDeleteSubKey($Root,$KeyName);

Description:

This function is used to delete the specified item type from the registry. Function Arguments



Parameter

Variable Type

Description



$Root

String

The Root Key, allowed values are:

· "ClassesRoot"

· "CurrentConfig"

· "CurrentUser"

· "LocalMachine"



$KeyName

String

The element in the registry to be deleted





Return Parameters



Parameter

Variable Type

Description



None





RegistryDeleteSubKeyTree

Previous Top Next



* * *



RegistryDeleteSubKeyTree

Usage:

RegistryDeleteSubKeyTree($Root,$KeyName);

Description:

This function is used to delete the specified item type from the registry. Function Arguments



Parameter

Variable Type

Description



$Root

String

The Root Key, allowed values are:

· "ClassesRoot"

· "CurrentConfig"

· "CurrentUser"

· "LocalMachine"



$KeyName

String

The element in the registry to be deleted





Return Parameters



Parameter

Variable Type

Description



None





RegistryDeleteValue

Previous Top Next



* * *



RegistryDeleteValue

Usage:

RegistryDeleteValue($Root,$KeyName);

Description:

This function is used to delete the specified item type from the registry.

Function Arguments



Parameter

Variable Type

Description



$Root

String

The Root Key, allowed values are:

· "ClassesRoot"

· "CurrentConfig"

· "CurrentUser"

· "LocalMachine"



$KeyName

String

The element in the registry to be deleted





Return Parameters



Parameter

Variable Type

Description



None





RegistryGetKeyValue

Previous Top Next



* * *



RegistryGetKeyValue



Usage:

$RegistryValue = RegistryGetKeyValue($RegistryRootKey,$RegistrySubKey,$RegistryKeyName)

Description:





This function retrieves the value of the requested registry key. Regardless of the key value type, the value is always returned as a string which can be parsed to the desired value type.

Function arguments



Parameter

Variable Type

Description



$RegistryRootKey

String

The name of the base registry key. Allowable values are:

· "ClassesRoot"

· "CurrentConfig"

· "CurrentUser"

· "LocalMachine"





$RegistrySubKey

String

The name of the registry subkey which contains the key to be edited



$RegistryKeyName

String

The name of the registry key to be modified





Return parameters



Parameter

Variable Type

Description



$RegistryValue

String

The value of the requested registry key





Usage Examples

$RegistryValue = RegistryGetKeyValue("LocalMachine","Software\\MySubKey","MyKey")





RegistryGetSubKeyNames

Previous Top Next



* * *



RegistryGetSubKeyNames



Usage:

$subKeyNames = RegistryGetSubKeyNames($rootKey, $keyName);





Description:

This function will return the list of sub-keys included in the specified key or sub-key.





Remarks:

The function returns the list of sub-keys, not the list of values that are in the specified location. For the list of values, use the RegistryGetValueNames function.

Function arguments



Parameter

Variable Type

Description



$rootKey

String

The name of the base registry key. Valid values are:

· ClassesRoot

· CurrentConfig

· CurrentUser

· LocalMachine



$keyName

String

The name of the key or sub-key to return the list of sub-keys from.





Return parameters



Parameter

Variable Type

Description



$subKeyNames

Array

The list of all of the sub-keys in the specified location. If there are no sub-keys, this will be empty.





Example(s):

// Get the list of Video subkeys from the HKey_LocalMachine entry.

$rootKey = "LocalMachine";

$location = "SYSTEM\CurrentControlSet\Control\Video";





$subKeyList = RegistryGetSubKeyNames($rootKey, $location);





// Print the list of sub-keys.

$numKeys = ArrayGetLength($subKeyList);





$loopCount = 0;

while ($loopCount < $numKeys)

{

$oneKey = Array1DGetValue($subKeyList, $loopCount);

UpdateStatus($oneKey);

$loopCount = $loopCount + 1;

}





RegistryGetValueNames

Previous Top Next



* * *



RegistryGetValueNames



Usage:

$valueNames = RegistryGetValueNames($rootKey, $keyName);





Description:

This function will return the list of names of values included in the specified key or sub-key.





Remarks:

The function returns the list of value names, not the list of sub-keys that are in the specified location. For the list of sub-keys, use the RegistryGetSubKeyNames function.

Function arguments



Parameter

Variable Type

Description



$rootKey

String

The name of the base registry key. Valid values are:

· ClassesRoot

· CurrentConfig

· CurrentUser

· LocalMachine



$keyName

String

The name of the key or sub-key to return the list of value names from.





Return parameters



Parameter

Variable Type

Description



$valueNames

Array

The list of the names of all of the values in the specified location. If there are no values, this will be empty.





Example(s):

// Get the list of Video value names from the HKey_LocalMachine entry.

$rootKey = "LocalMachine";

$location = "SYSTEM\CurrentControlSet\Control\Video";





$valueList = RegistryGetValueNames($rootKey, $location);





// Print the list of value names.

$numVals = ArrayGetLength($valueList);





$loopCount = 0;

while ($loopCount < $numVals)

{

$oneName = Array1DGetValue($valueList, $loopCount);

UpdateStatus($oneName);

$loopCount = $loopCount + 1;

}





RegistrySetKeyValue

Previous Top Next



* * *



RegistrySetKeyValue



Usage:

RegistrySetKeyValue($RegistryRootKey,$RegistrySubKey,$RegistryKeyName,$RegistryKeyValueType,$KeyValue);





Description:





This function writes a new value to an existing or new key under the given sub-key. The user must have sufficient privileges to write to the specified registry location or the function will generate a failure if the key cannot be written.





Function arguments



Parameter

Variable Type

Description



$RegistryRootKey

String

The name of the base registry key. Allowable values are:

· "ClassesRoot"

· "CurrentConfig"

· "CurrentUser"

· "LocalMachine"





$RegistrySubKey

String

The name of the registry subkey which contains the key to be edited



$RegistryKeyName

String

The name of the registry key to be modified



$RegistryKeyValueType

String

The type of registry value to be set. Allowable Values are:

· "BINARY"

· "DWORD"

· "EXPANDSTRING"

· "MULTISTRING"

· "STRING"



$KeyValue

Various

· The desired value for the key. Supported values types are booleans, floats, integers, or strings.





Return parameters



Parameter

Variable Type

Description



None





Usage Examples

RegistrySetKeyValue("LocalMachine",Software\\MySubKey","MyKey","String","Hello World");





CheckDriveWriteProtected

Previous Top Next



* * *



CheckDriveWriteProtected



Usage:

$BooleanReturnValue = CheckDriveWriteProtected($DriveLetterString, $ExpectedProtection, $FailJabilTest);



Description:

This function tests if a given drive ($DriveLetterString) is write protected.



Result:

The result $BooleanReturnValuevalue is TRUE if the drive is write protected.

The result $BooleanReturnValuevalue is FALSE if the drive is NOT write protected.

Function arguments



Parameter

Variable Type

Description



$DriveLetter

String

The drive letter string where we want to test the write protection.



$ExpectedProtection

Boolean

If we expect the drive to be write protected, place "TRUE". If we expect the drive to be NOT write protected place "FALSE"



$FailJabilTest

Boolean

Fail Jabil Test if the $ExpectedProtection of the drive is different then the return value.

If we place "FALSE" then the $ExpectedProtection is ignored.





Return parameters



Parameter

Variable Type

Description



$ReturnValue

Boolean

The result True or False if we can write data to the drive





Example(s):



Variable 1 : Here we test if the C:\ drive is write protected or not.

Variable 2 : We expect it is write protected

Variable 3 : Jabil Test will not fail, the previous variable is ignored

$bResult = CheckDriveWriteProtected("c:\\","TRUE","FALSE");





GetDiskSpace

Previous Top Next



* * *



GetDiskSpace

Usage:

($TotalSpace,$FreeSpace) = GetDiskSpace($DriveLetter);

Description:

This function returns the total number of bytes, and the total number of free bytes that are available on the drive specified by $DriveLetter

Example:

($TotalSpace,$FreeSpace) = GetDiskSpace("C:");



Function Arguments



Parameter

Variable Type

Description



$DriveLetter

String

A string containing the drive letter



Return Parameters



Parameter

Variable Type

Description



$TotalSpace

Integer

The total number of bytes available on the drive specified.



$FreeSpace

Integer

The total number of free bytes available on the drive specified.





GetDisplayInformation

Previous Top Next



* * *



GetDisplayInformation



Usage:

($number, $names, $horiz, $vert, $BPP) = GetDisplayInformation();



Description:

This function gets the number of displays attached to the computer and returns the names, resolutions and bits per pixel for each monitor.





Remarks:

The data is returned in separate arrays, but they all correspond (for example, the first monitor has its data stored in the first element of the $names, $horiz, $vert and $BPP arrays).

Function arguments



Parameter

Variable Type

Description



None





Return parameters



Parameter

Variable Type

Description



$number

Integer

The number of displays in the system.



$names

String Array

The name of each of the displays.



$horiz

Integer Array

The horizontal resolution of each of the displays.



$vert

Integer Array

The vertical resolution of each of the displays.



$BPP

Integer Array

The bits per pixel of each of the displays.





Example(s):

// Get the list of displays

($num, $dispNames, $dispX, $dispY, $dispBpp) = GetDisplayInformation();





// Print out the list of displays.

$outStr = "\nNumber of Displays: " + $num;

UpdateStatus($outStr);





$outStr = "\nName\t\tHoriz\tVert\tBPP";

UpdateStatus($outStr);





$loopCount = 0;

while ($loopCount < $num)

{

// Get this display's data.

$dName = Array1DGetValue($dispNames, $loopCount);

$dX = Array1DGetValue($dispX, $loopCount);

$dY = Array1DGetValue($dispY, $loopCount);

$dBpp = Array1DGetValue($dispBpp, $loopCount);





$outStr = $dName + "\t" + $dX + "\t" + $dY + "\t" + $dBpp;

UpdateStatus($outStr);





$loopCount = $loopCount + 1;

}





GetDisplaySize

Previous Top Next



* * *



GetDisplaySize

Usage:

($width,$height) = GetDisplaySize($DisplayNumber);

Description:

Returns the size of the display specified by $DisplayNumber in pixels. The primary display is always display number 0. In the event that a display number is supplied to the function that does not exist on the system, an error is returned to the script interpreter.

Function Arguments



Parameter

Variable Type

Description



$DisplayNumber

Integer

The ID of the display whose size you wish to retrieve





Return Parameters



Parameter

Variable Type

Description



$width

Integer

The number of pixels making up the width of the display.



$height

Integer

The number of pixels making up the height of the display.





GetDriveLetterByVolumeName

Previous Top Next



* * *



GetDriveLetterByVolumeName



Usage:

$DriveLetter = GetDriveLetterByVolumeName($DriveVolumeName,$TimeOut,$FailTest);



Description:

This function returns the drive letter for the corresponding drive volume name.



Result:

The corresponding drive letter.



Function arguments



Parameter

Variable Type

Description



$DriveVolumeName

String

The volume name where we want the corresponding drive letter of.



$TimeOut

Float

The timeout in milliseconds of the function.

If we enter 0 there is no timeout.



$FailTest

Boolean

Choose if the script must fail if the corresponding drive letter is not found or a timeout occured.





Return parameters



Parameter

Variable Type

Description



$DriveLetter

String

The drive letter for the specified volume name.





Example(s):

$DriveLetter = GetDriveLetterByVolumeName("Local Drive","0","FALSE");

$DriveLetter will have as content "C:\"





GetListOfDrives

Previous Top Next



* * *



GetListOfDrives



Usage:

$driveArray = GetListOfDrives();



Description:

This function gets a list of the drives connected to the computer and returns them in an array of strings.

Function arguments



Parameter

Variable Type

Description



None





Return parameters



Parameter

Variable Type

Description



$driveArray

String Array

The list of drives connected to the computer.





Example(s):

// Get the list of drives

$driveArray = GetListOfDrives();





// Print out the list of drives.

$loopCount = 0;

$numDrives = ArrayGetDimensionSize($driveArray, 0);





while ($loopCount < $numDrives)

{

$drv = Array1DGetValue($driveArray, $loopCount);

UpdateStatus($drv);

$loopCount = $loopCount + 1;

}





GetPciDeviceList

Previous Top Next



* * *



GetPciDeviceList



Usage:

($number, $VIDs, $PIDs, $descripts) = GetPciDeviceList();



Description:

This function gets the number of PCI devices attached to the computer and returns the Vendor ID, Product ID and description of each device.





Remarks:

The data is returned in separate arrays, but they all correspond (for example, the first PCI device has its data stored in the first element of the $VIDs, $PIDs and $descripts arrays).

Function arguments



Parameter

Variable Type

Description



None





Return parameters



Parameter

Variable Type

Description



$number

Integer

The number of PCI devices in the system.



$VIDs

String Array

The Vendor IDs of each of the PCI devices.



$PIDs

String Array

The Product IDs of each of the PCI devices.



$descripts

String Array

The description of each of the PCI devices.





Example(s):

// Get the list of PCI devices

($num, $VIDs, $PIDs, $descripts) = GetPciDeviceList();





// Print out the list of PCI devices.

$outStr = "\nNumber of Devices: " + $num;

UpdateStatus($outStr);





// Print column header.

$outStr = "\nVID\tPID\tDescription";

UpdateStatus($outStr);





$loopCount = 0;

while ($loopCount < $num)

{

// Get this device's data.

$dVID = Array1DGetValue($VIDs, $loopCount);

$dPID = Array1DGetValue($PIDs, $loopCount);

$dDesc = Array1DGetValue($descripts, $loopCount);





$outStr = $dVID + "\t" + $dPID + "\t" + $dDesc;

UpdateStatus($outStr);





$loopCount = $loopCount + 1;

}





GetSystemName

Previous Top Next



* * *



GetSystemName()

Usage:

$Name = GetSystemName();

Description:

Returns the DNS name of the current computer.

Function Arguments



Parameter

Variable Type

Description



None





Return Parameters



Parameter

Variable Type

Description



$Name

String

The network name of the current computer running Jabil Test.





GetUserName

Previous Top Next



* * *



GetUserName

Usage:

$Name = GetUserName();

Description:

Returns the current Windows user name of the account logged into the system.

Function Arguments



Parameter

Variable Type

Description



None





Return Parameters



Parameter

Variable Type

Description



$Name

String

The current windows user name of the account logged into the system, including the domain prefix (e.g. "JABIL/framed")





GetVolumeLabel

Previous Top Next



* * *



GetVolumeLabel



Usage:

$volumeLabel = GetVolumeLabel($driveLetter);





Description:

Returns the volume label for the corresponding drive letter/drive name.

Function arguments



Parameter

Variable Type

Description



$driveLetter

String

Drive name (see DriveInfo.VolumeLabel property of System.IO namespace for details.





Return parameters



Parameter

Variable Type

Description



$volumeLabel

String

Volume label name of selected drive.





Example:





$volumeLabel = GetVolumeLabel(“C”);

UpdateStatus($volumeLabel);





Output:

Local Drive





GetWirelessNetworks

Previous Top Next



* * *



GetWirelessNetworks



NOTE: This function is only compatible with Windows XP

Usage:

$ReturnString = System.GetWirelessNetworks();

Description:

This function returns a string containing the names and signal strength of all publicly available 802.11a/b/g wireless networks in the range of the test station that are broadcasting their SSID's. In the event that the test computer is not equipped with an 802.11 network adapter, and error is returned to the test script interpreter.

The return string is formatted as follows:

Network1Name:SignalStrength;Network2Name:SignalStrength

The Signal Strength is the RSSI as reported by WMI. If no wireless networks are available, an empty string is returned.

Function Arguments



Parameter

Variable Type

Description



None





Return Parameters



Parameter

Variable Type

Description



$ReturnString

String

The names and signal strengths of each available wireless access point.





SaveScreenCaptureToFile

Previous Top Next



* * *



SaveScreenCaptureToFile



Usage:

SaveScreenCaptureToFile($FileName);



Description:

This function captures the screen and saves it to an image file with the specified file name.

Function Arguments



Parameter

Variable Type

Description



$FileName

String

The file name to save the screen capture image as.





Return parameters



Parameter

Variable Type

Description



None





Example Usage:



SaveScreenCaptureToFile("C:\\screenCapture.bmp");





ClearExtendedPanelControls

Previous Top Next



* * *





ClearExtendedPanelControls



Usage:

ClearExtendedPanelControls()





Description:





This function removes any extended panel controls that have been added to the extended cell panel.





Note: these controls are not automatically disposed, they are only removed from the extended display panel.

Function arguments



Parameter

Variable Type

Description



None





Return parameters



Parameter

Variable Type

Description



None





Usage Example:





ClearExtendedPanelControls();





GetExtendedPanelMode

Previous Top Next



* * *





GetExtendedPanelMode



Usage:

$PanelMode = GetExtendedPanelMode();





Description:





This function returns the current extended panel of the test cell. The panel mode is returned as a string.

Function arguments



Parameter

Variable Type

Description



None





Return parameters



Parameter

Variable Type

Description



$PanelMode

String

Returns the current panel mode of the test cell. Current possible values include:

· None

· Charting

· Empty





Usage Example:





$PanelMode = GetExtendedPanelMode();

UpdateStatus($PanelMode);





SetExtendedPanelMode

Previous Top Next



* * *





SetExtendedPanelMode



Usage:

SetExtendedPanelMode($PanelMode);





Description:





This function sets the current extended panel mode of the test cell.





Note: The panel mode is set for the current script execution only and has no effect on the persistent configuration settings of the test cell.

Function arguments



Parameter

Variable Type

Description



$PanelMode

String

Sets the current panel mode of the test cell. Current possible values include:

· "NONE"

· "CHARTING"

· "EMPTY"





Return parameters



Parameter

Variable Type

Description



None





Usage Example:





SetExtendedPanelMode("CHARTING");





SetExtendedPanelSliderPosition

Previous Top Next



* * *





SetExtendedPanelSliderPosition



Usage:

SetExtendedPanelSliderPosition($SliderPosition);





Description:





This function moves the vertical slider control between the standard test cell display and the extended panel display for the given test cell. The $SliderPosition is specified in number of pixels from the left side of the test cell window.





When the Extended Panel Slider Position is modified both the standard test cell





Important Note: In order to use the SetExtendedPanelSliderPosition you must be running Jabil Test in an extended panel mode such as "Empty" or "None"

Function arguments



Parameter

Variable Type

Description



$SliderPosition

Integer

The number of pixels from the left side of the test cell to set the slider position.





Return parameters



Parameter

Variable Type

Description



None





Usage Example:





SetExtendedPanelSliderPosition(500);





CastVariable

Previous Top Next



* * *



CastVariable



Usage:



$NewVariable = CastVariable($CastType,$Variable);





Description:





This function will cast the supplied variable to the type specified by the $CastType parameter. If the variable can't be successfully cast to the type specified, an error will be thrown by the function.

Function arguments



Parameter

Variable Type

Description



$CastType

String

A string specifying the desired variable cast target. Allowable values are:

· "String"

· "Bool"

· "Integer"

· "Float"



$Variable

Object

The variable to be cast to the desired value type.





Return parameters



Parameter

Variable Type

Description



$NewVariable

Bool,Float,Integer,String

The returned value type.





Example:





$MyString = "3.0";

$MyInt = 3.0000;

$MyFloat = 3.14159;

$MyBool ="true";





$VariableType = GetVariableType($MyBool);

$OutputVariable = CastVariable("String",$MyString);

$VariableType = GetVariableType($OutputVariable);

$OutputVariable = CastVariable("Integer",$MyInt);

$VariableType = GetVariableType($OutputVariable);

UpdateStatus($MyInt);

$VariableType = GetVariableType($MyInt);

UpdateStatus($OutputVariable);

$OutputVariable = CastVariable("Float",$MyFloat);

$VariableType = GetVariableType($OutputVariable);





CheckPersistentVariableExists

Previous Top Next



* * *



CheckPersistentVariableExists



Usage:



$Exists = CheckPersistentVariableExists($VariableScope,$VariableName);





Description:





This function checks to see if a given variable name exists in the specified scope. The Persistent Variable functions save Jabil Test variables values into the built-in Jabil Test database so that they can be retrieved by subsequent test executions.





Note:





The persistent variables are stored inside of the Jabil Test SQL Compact database (JabilTest.sdf) inside of the table named 'persistentVariables'.





Function arguments



Parameter

Variable Type

Description



$VariableScope

String

The Scope of the variable that you would like to check for presence in the Persistent Variable Space. It is possible for a CELL-scoped variable and a GLOBAL-scoped variable to have the same name, but contain different values.

Valid values for variable scope are:

"CELL" = A variable that can only be accessed from the cell that created it.

"GLOBAL" = A variable that can be accessed from all cell



$VariableName

String

The name of the variable that you would like to check for presence in the Persistent Variable Space





Return parameters



Parameter

Variable Type

Description



$Exists

Boolean

Returns a boolean variable specifying whether or not the given variable was found to exist inside of the persistent variable space.





CheckVariableExists

Previous Top Next



* * *



CheckVariableExists



Usage:



$Exists = CheckVariableExists($VariableName);





Description:





This function checks to see if a present variable exists within the variable space in the currently executing script. Returns true if the value is found in the variable space, or otherwise returns false.





Function arguments



Parameter

Variable Type

Description



$VariableName

String

The name of the variable that you would like to check to see if it's present in memory.





Return parameters



Parameter

Variable Type

Description



$Exists

Boolean

Returns a boolean variable specifying whether or not the given variable was found to exist in memory.





Example:





$Exists = CheckVariableExists("MyVariable");

UpdateStatus($Exists);

$MyVariable = "Some Important Value";

$Exists = CheckVariableExists("MyVariable");

UpdateStatus($Exists);





Output Example:





CheckVariableExists: Variable [MyVariable] Exists = [False]

False

$MyVariable = "Some Important Value";

CheckVariableExists: Variable [MyVariable] Exists = [True]

True





CopyVariable

Previous Top Next



* * *



CopyVariable

Usage:

$NewVariable = CopyVariable($ObjectVariable);

Description:

This function is used to copy the variable contents to a new variable.

Function Arguments



Parameter

Variable Type

Description



$ObjectVariable

Various

The variable for which you wish to make a copy. The variable type can be any string, number, boolean, or object variable.





Return Parameters



Parameter

Variable Type

Description



$ReturnVariable

Various

The returned variable is a "Copy Of Reference" copy of the argument variable. The two variables actually refer to the same script variable, but can be accessed by the two different names.





DeletePersistentVariable

Previous Top Next



* * *



DeletePersistentVariable



Usage:



DeletePersistentVariable($VariableScope,$VariableName);





Description:





This function deletes the named variable from the persistent variable space, if it exists. If the variable doesn't exist, the function returns a passing result as well.





Function arguments



Parameter

Variable Type

Description



$VariableScope

String

The scope of the variable to delete. Variables with the same name are allowed to exist at different scopes. In other words, a cell scoped variable may have the same name as a global scoped variable. Allowable values are:

· "CELL"

· "GLOBAL"



$VariableName

String

The name of the variable that you would like to delete from persistent variable storage.





Return parameters



Parameter

Variable Type

Description



None





Example:





DeletePersistentVariable("GLOBAL","CalibrationTime");





GetPersistentVariable

Previous Top Next



* * *



GetPersistentVariable



Usage:

$returnValue = GetPersistentVariable($variableScope, $variableName);



Description:

This function is used to pull a permanent script variable into the test script for usage.





Remarks:

The permanent variable must first have been created using the SetPersistentVariable function.

Persistent Variables in Jabil Test are non-volatile and continue to exist between different test runs.

The scope of a persistent variable can be set "CELL" meaning that the variable is only visible to the test cell that created it, or "GLOBAL" which means that all test cells can access the variable for reading and writing.

It is possible for a CELL-scoped variable and a GLOBAL-scoped variable to have the same name.

All persistent variables are permanently stored in an encrypted file.



Function arguments



Parameter

Variable Type

Description



$variableScope

String

The Scope of the variable to retrieve.

Valid values for scope are: "CELL" = Can only be accessed from the cell that created it.

"GLOBAL" = Can be accessed by all cells.





$variableName

String

The name of the variable to retrieve.





Return parameters



Parameter

Variable Type

Description



$returnValue

Boolean, Float, Integer, or String

The value of the variable retrieved. Type will match the type when the variable was created.





Example:





// Retrieve the last serial number used in this cell.

$varScope = "CELL";

$varName = "LastSN";



$varValue = GetPersistentVariable($varScope, $varName);





GetVariableType

Previous Top Next



* * *



GetVariableType



Usage:



$VariableType = GetVariableType($Variable);





Description:





This function returns the variable type of the variable that has been passed in as the argument to the function. This can be helpful for debugging scripts which use variables returned from dynamic statement evaluation.





Function arguments



Parameter

Variable Type

Description



$Variable

Various

The variable to be analyzed for it's type.





Return parameters



Parameter

Variable Type

Description



$VariableType

String

Returns a string specifying the type of the variable supplied to the function. Possible Variable Types include:

· Integer

· String

· Float

· Boolean

· Object

· Array





Examples:





$VarType = GetVariableType($MyString);

UpdateStatus($VartType); // returns 'String'





GetVariableType(12);

GetVariableType("DAN");

GetVariableType(12.22);

GetVariableType(true);

// Output

GetVariableType: Variable Is Of Type [Integer]

GetVariableType: Variable Is Of Type [String]

GetVariableType: Variable Is Of Type [Float]

GetVariableType: Variable Is Of Type [Boolean]





IsEqual

Previous Top Next



* * *



IsEqual



Usage:



$equal = IsEqual($Variable1,$Variable2);





Description:





This function compares two variables and determines their equality. It is useful for comparing object type variables, which is currently unsupported by the '==' operator in scripts.





For value type variables (integers, floats, string, booleans) the value of the variables is compared, and true is returned if the values are the same.





For arrays and other object type variables, true is only returned if the two variables reference the same object in memory.

Function arguments



Parameter

Variable Type

Description



$Variable1

Object

The first variable to be compared. Can be of any type (integer, float, boolean, string, array, object).



$Variable2

Object

The second variable to be compared. Can be of any type (integer, float, boolean, string, array, object).





Return parameters



Parameter

Variable Type

Description



$equal

Boolean

True if the variables are equal, false otherwise. The conditions for equality vary by the type of the input arguments.





Example:





$StringObject1 = "Hello world!";

$StringObject2 = New("String", "Hello world!");

$equal = IsEqual($StringObject1 ,$StringObject2 ); //returns true





$ArrayObject1 = Array1DCreate("INTEGER", 1);

$ArrayObject2 = Array1DCreate("INTEGER", 1); //different object

$ArrayObject3 = CopyVariable($ArrayObject1); //copy by reference

$ArrayObject4 = $ArrayObject1; //doesn't work, assigns string equal to type name

$equal = IsEqual($Object1, $Object2); //returns false

$equal = IsEqual($Object1, $Object3); //returns true

$equal = IsEqual($Object1, $Object4); //returns false





New

Previous Top Next



* * *



New



Usage:

$newVariable = New($variableType, $variableValue);



Description:

This function will create and return an instance of a new variable of the specified type with the specified initial value.





Remarks:

When setting a boolean, the initial value must be in string format and either "TRUE" or "FALSE".





Function arguments



Parameter

Variable Type

Description



$variableType

String

The type of variable to create. Valid values are:

Boolean

Integer

Float

String



$variableValue

Boolean, Float, Integer or String

The initial value to set the variable to.





Return parameters



Parameter

Variable Type

Description



$newVariable

Boolean, Float, Integer or String

The variable that has been created.





Example:





// Create an explicit float variable.

$varType = "Float";

$varVal = 3.0; // Without New, this would set as an integer.



$floatVar = New($varType, $varVal);





SetPersistentVariable

Previous Top Next



* * *



SetPersistentVariable

Usage:

SetPersistentVariable($VariableScope,$VariableName,$VariableType,$VariableValue);

Description:

The SetPersistentVariable function is used to store a permanent script variable into the Persistent Variable Space. The permanent variable may be retrieved using the GetPersistentVariable function.

Persistent Variables in Jabil Test are non-volatile and continue to exist between different test runs. The scope of a persistent variable can be set "CELL" meaning that the variable is only visible to the test cell that created it, or "GLOBAL" which means that all test cells can access the variable for reading and writing. All persistent variables are permanently stored in the Jabil Test database file.

Note:

The persistent variables are stored inside of the Jabil Test SQL Compact database (JabilTest.sdf) inside of the table named 'persistentVariables'.

Function arguments



Parameter

Variable Type

Description



$VariableScope

String

The Scope of the variable that will be stored in the Persistent Variable Space. It is possible for a CELL-scoped variable and a GLOBAL-scoped variable to have the same name.

Values:

· "CELL" = A variable that can only be accessed from the cell that created it.

· "GLOBAL" = A variable that can be accessed from all cells.



$VariableName

String

The name of the variable that you would like to store in the Persistent Variable Space.



$VariableType

String

The type of variable to store.

Values:

· "BOOLEAN"

· "INTEGER"

· "FLOAT"

· "STRING"



$VariableValue

Boolean, Integer, Float or String

The value of the variable to store.





Return parameters



Parameter

Variable Type

Description



None





Example:

$VariableScope = "CELL";

$VariableName = "SavedVariable";

$VariableType = "STRING";

SetPersistentVariable($VariableScope, $VariableName, $VariableType, "Saved Data");





WMI_ClassMethod

Previous Top Next



* * *



WMI_ClassMethod



Usage:

$methodResultsTable = WMI_ClassMethod($machinePath, $username, $password, $className, $methodName, $inParams, $outParams);





Description:

Executes the named function of a given WMI (Windows Management Instrumentation) class – does not require an instance of the class as returned by a WQL query. The results of the method are returned in a DataTable object with (# of output parameters) columns and (# of objects) rows.





See Microsoft’s WMI Reference page for a list of classes, methods, parameters, and return value tables.





Note:

DCOM must be enabled and WMI installed on both the host and target machines.





The account used must have WMI permissions set. Check "Computer Management > Services and Applications > WMI Control" and right-click Properties. Navigate to the Security tab and select Root, then click the Security button to check permissions.





Firewalls must be setup to allow RPC (Remote Procedure Call) and remote computer management.





Remote connections may require changes to the local security policy on the target machine. Use "Administrative Tools > Local Security Policy" or "Run > secpol.msc" to access the security settings.





For remote logins, navigate to "Security Settings > Local Policies > Security Options" and ensure "Network access: Sharing and security model for local accounts" is set to "Classic - local users authenticate as themselves".





For remote logins with no password, ensure "Accounts: Limit local account use of blank passwords to console logon only" is disabled. For security reasons, Microsoft does NOT recommend disabling this setting - use an account with a password if possible.





Function arguments



Parameter

Variable Type

Description



$machinePath

String

Server and computer name of machine to connect to.



$username

String

Username of account on machine. Use null string (“null”) for local host logins.



$password

String

Password for account. Use null string (“null”) for local host logins, and empty string ("") for remote logins with no password (see examples in WMI_Query() help).



$className

String

WMI class that contains the method.



$methodName

String

Name of method to execute.



$inParams

Object

List of input parameter names and values given in as a Dictionary<object,object> type. See the Dictionary_Create() method for details.



$outParams

String

Semicolon-separated list of output parameter names. Only parameters listed will be recorded in the results table. The ‘ReturnValue’ of the method is automatically returned as the first column, even if this field is blank.





Return variables



Parameter

Variable Type

Description



$methodResultsTable

Object

DataTable object containing the results of the method. Each row represents a matching object, and each column is a matching parameter from the $outParams list. The first column will always be ‘ReturnValue’, the return value of the method itself (0 usually means no errors).





Examples:





//Opens a new instance of notepad

//use NULL username and password for local connections

$machinePath = "localhost";

$username = "null";

$password = "null";

$class = "Win32_Process";

$method = "Create";

$inParameters = Dictionary_Create();

Dictionary_SetValue($inParameters, "CommandLine", "c:\\windows\\system32\\notepad.exe");

$outParameters = "ProcessId";

$resultsTable = WMI_ClassMethod($machinePath, $username, $password, $class, $method, $inParameters, $outParameters);

DataTable_ShowInWindow($resultsTable);





WMI_InstanceMethod

Previous Top Next



* * *



WMI_InstanceMethod



Usage:

$methodResultsTable = WMI_InstanceMethod($machinePath, $username, $password, $WQL_query, $methodName, $inParams, $outParams);





Description:

Executes the named function on all object instances of a given WMI (Windows Management Instrumentation) class returned by the query. The results of the method are returned in a DataTable object with (# of output parameters) columns and (# of objects) rows.





See Microsoft’s WMI Reference page for a list of classes, methods, parameters, and return value tables.





Note:

DCOM must be enabled and WMI installed on both the host and target machines.





The account used must have WMI permissions set. Check "Computer Management > Services and Applications > WMI Control" and right-click Properties. Navigate to the Security tab and select Root, then click the Security button to check permissions.





Firewalls must be setup to allow RPC (Remote Procedure Call) and remote computer management.





Remote connections may require changes to the local security policy on the target machine. Use "Administrative Tools > Local Security Policy" or "Run > secpol.msc" to access the security settings.





For remote logins, navigate to "Security Settings > Local Policies > Security Options" and ensure "Network access: Sharing and security model for local accounts" is set to "Classic - local users authenticate as themselves".





For remote logins with no password, ensure "Accounts: Limit local account use of blank passwords to console logon only" is disabled. For security reasons, Microsoft does NOT recommend disabling this setting - use an account with a password if possible.





Function arguments



Parameter

Variable Type

Description



$machinePath

String

Server and computer name of machine to connect to.



$username

String

Username of account on machine. Use null string (“null”) for local host logins.



$password

String

Password for account. Use null string (“null”) for local host logins, and empty string ("") for remote logins with no password (see examples in WMI_Query() help).



$WQL_query

String

WQL formatted query string.



$methodName

String

Name of method to execute.



$inParams

Object

List of input parameter names and values given in as a Dictionary<object,object> type. See the Dictionary_Create() method for details.



$outParams

String

Semicolon-separated list of output parameter names. Only parameters listed will be recorded in the results table. The ‘ReturnValue’ of the method is automatically returned as the first column, even if this field is blank.





Return variables



Parameter

Variable Type

Description



$methodResultsTable

Object

DataTable object containing the results of the method. Each row represents a matching object, and each column is a matching parameter from the $outParams list. The first column will always be ‘ReturnValue’, the return value of the method itself (0 usually means no errors).





Examples:





//Terminates all instances of notepad

//use NULL username and password for local connections

$machinePath = "localhost";

$username = "null";

$password = "null";

$WQL_query = "SELECT * FROM Win32_Process WHERE Name = 'notepad.exe'";

$method = "Terminate";

$inParameters = Dictionary_Create();

Dictionary_SetValue($inParameters, "Reason", "1234");

$outParameters = "";

$resultsTable = WMI_InstanceMethod($machinePath, $username, $password, $WQL_query, $method, $inParameters, $outParameters);

DataTable_ShowInWindow($resultsTable);





//Renames a file using WMI

$WQL_query = "SELECT * FROM CIM_DataFile WHERE Name = 'c:\\\\test\\\\test.txt'";

$method = "Rename";

$inParameters = Dictionary_Create();

Dictionary_SetValue($inParameters, "FileName", "c:\\test\\test2.txt");

$outParameters = "";

$resultsTable = WMI_InstanceMethod($machinePath, $username, $password, $WQL_query, $method, $inParameters, $outParameters);

DataTable_ShowInWindow($resultsTable);





//Gets the user name and domain of the owner of all processes currently running

$WQL_query = "SELECT * FROM Win32_Process";

$method = "GetOwner";

$inParameters = "";

$outParameters = "User;Domain";

$resultsTable = WMI_InstanceMethod($machinePath, $username, $password, $WQL_query, $method, $inParameters, $outParameters);

DataTable_ShowInWindow($resultsTable);





WMI_Query

Previous Top Next



* * *



WMI_Query



Usage:

$queryResultsTable = WMI_Query($machinePath, $username, $password, $WQL_query);



Description:

Executes a WMI (Windows Management Instrumentation) query using a given WQL string. The results of the query are returned in a DataTable object with (# of properties) columns and (# of objects) rows.





Note:

DCOM must be enabled and WMI installed on both the host and target machines.



The account used must have WMI permissions set. Check "Computer Management > Services and Applications > WMI Control" and right-click Properties. Navigate to the Security tab and select Root, then click the Security button to check permissions.



Firewalls must be setup to allow RPC (Remote Procedure Call) and remote computer management.



Remote connections may require changes to the local security policy on the target machine. Use "Administrative Tools > Local Security Policy" or "Run > secpol.msc" to access the security settings.



For remote logins, navigate to "Security Settings > Local Policies > Security Options" and ensure "Network access: Sharing and security model for local accounts" is set to "Classic - local users authenticate as themselves".



For remote logins with no password, ensure "Accounts: Limit local account use of blank passwords to console logon only" is disabled. For security reasons, Microsoft does NOT recommend disabling this setting - use an account with a password if possible.





Function arguments



Parameter

Variable Type

Description



$machinePath

String

Server and computer name of machine to connect to.



$username

String

Username of account on machine. Use null string (“null”) for local host logins.



$password

String

Password for account. Use null string (“null”) for local host logins, and empty string ("") for remote logins with no password (see example below).



$WQL_query

String

WQL formatted query string.





Return variables



Parameter

Variable Type

Description



$queryResultsTable

Object

DataTable object containing all data that matches the WQL query. Each row represents a matching object, and each column is a matching property.





Examples:



//get specific information about active network cards on local PC

//use NULL username and password for local connections

$machinePath = "localhost";

$username = "null";

$password = "null";

$WQL_query = "SELECT Description, IPAddress, MACAddress FROM Win32_NetworkAdapterConfiguration WHERE IPEnabled = true";

$queryResultsTable = WMI_Query($machinePath, $username, $password, $WQL_query);





//show all information about running processes on a remote computer in pop-up window

$machinePath = "172.128.12.149";

$username = "TEST";

$password = "test123";

$WQL_query = "SELECT * FROM Win32_Process";

$queryResultsTable = WMI_Query($machinePath, $username, $password, $WQL_query);

DataTable_ShowInWindow($queryResultsTable);





//get free disk space for C: drive on remote computer

//use empty string for accounts with no password

$machinePath = "172.128.12.149";

$username = "TEST2";

$password = "";

$WQL_query = "SELECT FreeSpace FROM Win32_LogicalDisk WHERE DeviceID = \"C:\"";

$queryResultsTable = WMI_Query($machinePath, $username, $password, $WQL_query);

DataTable_ShowInWindow($queryResultsTable);





WMI_read

Previous Top



* * *



WMI_read

Usage:

($ResultString) = WMI_read($QueryString) ;



Description:

This function reads the PC information using the windows WMI interface which can be queried via a language called WQL, very similar in syntax to SQL. This function allows JabilTest to identify most aspects of the computer using a standard interface rather then needing to become an expert interface operation.

Example:

$ResultString = WMI_read("Select * from Win32_USBController") ;





Function Arguments



Parameter

Variable Type

Description



$QueryString

String

The variable used to present the query to WMI. These can be complex in structure.





Return Parameters



Parameter

Variable Type

Description



$ReturnString

String

The result of the query in a string format, if multiple items are available these are added to the string and separated by spaces





AG34401A_Init

Previous Top Next



* * *



AG34401A_Init



Usage:

$agHandle = AG34401A_Init($resourceString);



Description:

This function initializes communication with the instrument.





Remarks:

This function uses the Agilent IVI instrument drivers for the AG34401A instrument. You also need to load the Agilent COM components.

This function does not reset the instrument or change any existing settings.

A fail is generated if this function is unable to open the communication channel.



Function arguments



Parameter

Variable Type

Description



$resourceString

String

VISA resource string identifying the instrument. See VISA Communications in Jabil Test for more information.





Return parameters



Parameter

Variable Type

Description



$agHandle

Object

Handle to instrument communication channel.





Example:





// Open communication on GPIB bus.

$resource = "GPIB0::11::INSTR";



$agHandle = AG34401A_Init($resource);





AG34401A_InitWithOptions

Previous Top Next



* * *



AG34401A_InitWithOptions



Usage:

$agHandle = AG34401A_InitWithOptions($resourceString[, $query[, $reset[, $options]]]);



Description:

This function initializes communication with the instrument and, optionally, queries the instrument for its ID, resets the instrument and sets initialization options.





Remarks:

This function uses the Agilent IVI instrument drivers for the AG34401A instrument. You also need to load the Agilent COM components.

A fail is generated if this function is unable to open the communication channel.

Refer to the instrument documentation for more details on initialization parameters.



Function arguments



Parameter

Variable Type

Description



$resourceString

String

VISA resource string identifying the instrument. See VISA Communications in Jabil Test for more information.



$query

Boolean

{Optional] Whether to query the instrument ID on initialization.



$reset

Boolean

[Optional] Whether to reset the instrument on initialization.



$options

String

[Optional] List of additional parameters to be supplied when initializing the instrument.





Return parameters



Parameter

Variable Type

Description



$agHandle

Object

Handle to instrument communication channel.





Example:





// Open communication on GPIB bus with query and reset.

$resource = "GPIB0::11::INSTR";

$query = true;

$reset = true;



$agHandle = AG34401A_InitWithOptions($resource, $query, $reset);





AG34401A_MeasureACCurrent

Previous Top Next



* * *



AG34401A_MeasureACCurrent



Usage:

$measurement = AG34401A_MeasureACCurrent($agHandle, $timeout, $range, $resolution);



Description:

This function performs an AC current measurement and returns the result.





Remarks:

This function uses the Agilent IVI instrument drivers for the AG34401A instrument. You also need to load the Agilent COM components.

Communication must previously have been opened using the AG34401A_Init or AG34401A_InitWithOptions function.

A fail is generated if the instrument is unable to make a measurement or times out.



Function arguments



Parameter

Variable Type

Description



$agHandle

Object

Handle to previously opened instrument communication channel.



$timeout

Integer

Number of milliseconds to wait for a measurement before returning a fail result.



$range

Float

The range for the measurement.



$resolution

Float

The resolution for the measurement.





Return parameters



Parameter

Variable Type

Description



$measurement

Float

The AC current measurement.





Example:



// Open communication.

$resource = "GPIB0::11::INSTR";



$agHandle = AG34401A_Init($resource);



// Make an AC Current measurement.

$timeout = 1000;

$range = 1;

$resol = 0.0001;



$measure = AG34401A_MeasureACCurrent($agHandle, $timeout, $range, $resol);





AG34401A_MeasureACVolt

Previous Top Next



* * *



AG34401A_MeasureACVolt



Usage:

$measurement = AG34401A_MeasureACVolt($agHandle, $timeout, $range, $resolution);



Description:

This function performs an AC voltage measurement and returns the result.





Remarks:

This function uses the Agilent IVI instrument drivers for the AG34401A instrument. You also need to load the Agilent COM components.

Communication must previously have been opened using the AG34401A_Init or AG34401A_InitWithOptions function.

A fail is generated if the instrument is unable to make a measurement or times out.



Function arguments



Parameter

Variable Type

Description



$agHandle

Object

Handle to previously opened instrument communication channel.



$timeout

Integer

Number of milliseconds to wait for a measurement before returning a fail result.



$range

Float

The range for the measurement.



$resolution

Float

The resolution for the measurement.





Return parameters



Parameter

Variable Type

Description



$measurement

Float

The AC Voltage measurement.





Example:



// Open communication.

$resource = "GPIB0::11::INSTR";



$agHandle = AG34401A_Init($resource);



// Make an AC Voltage measurement.

$timeout = 1000;

$range = 5;

$resol = 0.001;



$measure = AG34401A_MeasureACVolt($agHandle, $timeout, $range, $resol);





AG34410A_Init

Previous Top Next



* * *



AG34410A_Init



Usage:

$Handle = AG34410A_Init($InstrumentID);



Description:

This function opens, and initializes the Agilent 34410A digital multimeter and prepares it for further operations.





Requirements:

· This function uses the Agilent IVI-COM driver which must be installed before using these functions.



Function arguments



Parameter

Variable Type

Description



$InstrumentID

String

The GPIB address of the Instrument, for example "GPIB0::3::Instr".





Return parameters



Parameter

Variable Type

Description



$Handle

Object

A communications handle for the instrument to pass to subsequent function calls.





Example:





$AG34410A = AG34410A_Init("GPIB0::3::INSTR");





MSP_GANG_CreateGangImage

Previous Top Next



* * *



MSP_GANG_CreateGangImage



Usage:

MSP_GANG_CreateGangImage($imageName);



Description:

This function will convert the loaded code file into an image that can be programmed into the target by the MSP-GANG programmer.



Remarks

Communication with the MSP-GANG Programmer must already have been opened using the MSP_GANG_InitComm function.

The code file must already have been loaded into memory using the MSP_GANG_ReadCodeFile function.





Function arguments



Parameter

Variable Type

Description



$imageName

String

The name of the image.





Return parameters



Parameter

Variable Type

Description



None





Example:





// Open communication on COM3.

$startBaud = 9600;

$port = "COM4";



MSP_GANG_InitComm($port, $startBaud);



// Load a code file.

$codeFile = "C:\\CodeFiles\\MSP_Code_File.hex";



MSP_GANG_ReadCodeFile($codeFile);



// Create an image to be programmed.

$imageName = "BurnImage";



MSP_GANG_CreateGangImage($imageName);





<rootNode>

<PCNAME>LapTop</PCNAME>

<PROJECTNAME>T1FirstProject</PROJECTNAME>

<DIVERSITY>T1P1FirstDiversity</DIVERSITY>

<Key1>T1 P1 D1 Not Used</Key1>

<Key2>T1 P1 D1 Also Not Used</Key2>

<Key3>T1 P1 D1 May Be Used</Key3>

<DIVERSITY>T1P1SecondDiversity</DIVERSITY>

<Key1>T1 P1 D2 Second Not Used</Key1>

<Key2>T1 P1 D2 Second Also Not Used</Key2>

<Key3>T1 P1 D2 Second May Be Used</Key3>

<PROJECTNAME>T1SecondProject</PROJECTNAME>

<DIVERSITY>T1P2FirstDiversity</DIVERSITY>

<Key1>T1 P2 D1 Not Used</Key1>

<Key2>T1 P2 D1 Also Not Used</Key2>

<Key3>T1 P2 D1 May Be Used</Key3>

<DIVERSITY>T1P2SecondDiversity</DIVERSITY>

<Key1>T1 P2 D2 Second Not Used</Key1>

<Key2>T1 P2 D2 Second Also Not Used</Key2>

<Key3>T1 P2 D2 Second May Be Used</Key3>

<PCNAME>DeskTop</PCNAME>

<PROJECTNAME>T2FirstProject</PROJECTNAME>

<DIVERSITY>T2P1FirstDiversity</DIVERSITY>

<Key1>T2 P1 D1 Not Used</Key1>

<Key2>T2 P1 D1 Also Not Used</Key2>

<Key3>T2 P1 D1 May Be Used</Key3>

<DIVERSITY>T2P1SecondDiversity</DIVERSITY>

<Key1>T2 P1 D2 Second Not Used</Key1>

<Key2>T2 P1 D2 Second Also Not Used</Key2>

<Key3>T2 P1 D2 Second May Be Used</Key3>

<PROJECTNAME>T2SecondProject</PROJECTNAME>

<DIVERSITY>T2P2FirstDiversity</DIVERSITY>

<Key1>T2 P2 D1 Not Used</Key1>

<Key2>T2 P2 D1 Also Not Used</Key2>

<Key3>T2 P2 D1 May Be Used</Key3>

<DIVERSITY>T2P2SecondDiversity</DIVERSITY>

<Key1>T2 P2 D2 Second Not Used</Key1>

<Key2>T2 P2 D2 Second Also Not Used</Key2>

<Key3>T2 P2 D2 Second May Be Used</Key3>

</rootNode>





OpenCV_AdjustGrayContrastWithROI

Previous Top Next



* * *



OpenCV_AdjustGrayContrastWithROI



Usage:

$adjImage = OpenCV_AdjustGrayContrastWithROI($image, $steep, $midCurve, $left, $top, $width, $height, $returnItem);



Description:

This function adjusts the histogram curve for an area of a gray scale image upwards. This has the effect of brightening dark pixels more than bright pixels. This will give an increase of contrast for the darker pixels while decreasing contrast for the brighter pixels. The function can return the entire image with the adjusted area, or just the adjusted area.The basic function is:



f(n) = x + mc * x * (255 - x) / (x + st)

where:

x = the pixel brightness

mc = the midrange of the curve (high numbers flatten the top of the curve)

st = steepness of the low end of the curve (lower number are steeper).



These variables have this type of effect:





Remarks:

The most common use of this has a steepness of 20 and a midrange number of 0.5 (the blue curve in the picture above).

This function uses the OpenCV and EMGU CV libraries version 3.3.0.





Function arguments



Parameter

Variable Type

Description



$image

Object

The image to be adjusted.



$steep

Float

The steepness of the low part of the curve. Must be greater than or equal to 0.



$midCurve

Float

The flatness of the high part of the curve. Must be greater than 0.



$left

Integer

The left edge of the ROI (in pixels).



$top

Integer

The top edge of the ROI (in pixels).



$width

Integer

The width of the ROI (in pixels).



$height

Integer

The height of the ROI (in pixels).



$returnItem

String

Whether to return the entire image with the adjusted area, or return just the adjusted area. Valid inputs are "Image" or "ROI".





Return parameters



Parameter

Variable Type

Description



$adjImage

Object

The resulting adjusted image.





Example:





$steep = 20;

$midCurve = 0.5;

$left = 110;

$top = 50;

$width = 300;

$height = 210;

$retItem = "ROI";



$sImage = OpenCV_AdjustGrayContrastWithROI($image, $steep, $midCurve, $left, $top, $width, $height, $retItem);





