{
  "JTS base structure": {
    "prefix": "jts",
    "body": [
      "//******************************** initial General Information ***************************************",
      "//|------------------------------------General Information -------------------------------------------|",
      "//| Project:\t\t\t${1}",
      "//| Customer:\t\t\t${2}",
      "//| Creator:\t\t\t${3:xxxxx}",
      "//| Create Date:\t\t${CURRENT_DATE}-${CURRENT_MONTH_NAME_SHORT}-${CURRENT_YEAR}",
      "//| Checked:\t\t\t${4}",
      "//| Checked Date:\t\t${CURRENT_DATE}-${CURRENT_MONTH_NAME_SHORT}-${CURRENT_YEAR}",
      "//| Current Revision:\t${5:A}",
      "//| Test Platform:\t\t${6:JabilTest07500}",
      "//| Comments:\t\t\t",
      "//|---------------------------------------------------------------------------------------------------|",
      "",
      "//*************************Release History*********************************//",
      "//***  Revision:\t${10:A}",
      "//***  Description:\t${11:Initial release}",
      "//***  Created By:\t${12:xxxxx}",
      "//***  ECN:\t\t\t${13:ECN}",
      "//***  Created On:\t${CURRENT_DATE}-${CURRENT_MONTH_NAME_SHORT}-${CURRENT_YEAR}",
      "//*************************************************************************//",
      "",
      "SetFinalizeFunction(\"CleanUp\");",
      "SetFailFunction(\"CleanUp\");",
      "SetAbortFunction(\"CleanUp\");",
      "call Test_Information_Initialize();",
      "UpdateProgressBar(5);",
      "call InitialInstrument();",
      "UpdateProgressBar(10);",
      "call Read_Fixture_ID();",
      "UpdateProgressBar(15);",
      "call ScanSerialNumber();",
      "UpdateProgressBar(20);",
      "call Fixture_PowerOn();",
      "UpdateProgressBar(25);",
      "call WaitingFixtureEngaged();",
      "\n",
      "\n",
      "\n",
      "End;",
      "",
      "function Test_Information_Initialize()",
      "{",
      "\t",
      "\t",
      "\treturn;",
      "}",
      "",
      "function InitialInstrument()",
      "{",
      "\t",
      "\t",
      "\treturn;",
      "}",
      "",
      "function Read_Fixture_ID()",
      "{",
      "\tUpdateStatus(\"******************************************************\");",
      "\t$$TestName = \"Read_Fixture_ID\";",
      "\tSetTestName($$TestName);",
      "\t$$UpdateString = StringCat(\"\\n......\",$$TestName);",
      "\t$$UpdateString = StringCat($$UpdateString,\"......\");",
      "\tUpdateStatus($$UpdateString);",
      "\t$$Value = NI_DAQmx_ReadDIOPort($$NI_PCI6509,\"Port5\",\"IDTask\");",
      "\tUpdateStatus($$Value);",
      "\t$$Display=\"The fixture ID is: \"+$$Value;",
      "\tUpdateStatus($$Display);",
      "\t$$TestName = \"Read_Fixture_ID\";",
      "\t$$Unit = \"Hex\";",
      "\t$$nLowerLimit = \"49\";",
      "\t$$nUpperLimit = \"49\";",
      "\t$$inLimits = HexLimitTestBool($$Value,$$nLowerLimit,$$nUpperLimit);",
      "\t$$inLimits = RecordMeasurementPassFail(\"Fixture ID Check\",$$Value,\"N/A\",true,$$inLimits);",
      "\treturn;",
      "}",
      "",
      "function ScanSerialNumber()",
      "{",
      "\tUpdateStatus(\"******************************************************\");",
      "\t$$TestName = \"Serial_Number_Check\";",
      "\tSetTestName($$TestName);",
      "\t$$TestName = StringCat($$TestName,\"\\n\");",
      "\tUpdateStatus($$TestName);",
      "\t",
      "\t$$RetryCount = New(\"Integer\",0);",
      "\t$$SerialNumber = StringToUpper($$SerialNumber);",
      "\tLabel CheckSerialNumber:",
      "\tUpdateStatus(\"$$SerialNumber%%%%%\");",
      "\tUpdateStatus($$SerialNumber);",
      "\t$$SerLength = StringLength($$SerialNumber);",
      "\t$$Result_Length = NumericComparison($$SerLength,11,\"==\");",
      "\tUpdateStatus(\"$$SerialLength%%%%%\");",
      "\tUpdateStatus($$SerLength);",
      "\tScriptIf($$Result_Length,\"GOTO\",\"\",\"SerialNumber_WrongLength\")",
      "\t",
      "\t$$SN_String = StringSub($$SerialNumber,0,2);",
      "\t$$Result_String = StringComparison($$SN_String,\"JC\",\"==\");",
      "\t$$Result_SN = Logical_AND($$Result_Length,$$Result_String);",
      "\tScriptIf($$Result_String,\"GOTO\",\"SerialNumber_DONE\",\"SerialNumber_WrongString\")",

      "\tLabel SerialNumber_WrongLength:",
      "\tLabel SerialNumber_WrongString:",
      "\t$$RetryCount = Add($$RetryCount,1);",
      "\t$$Result = NumericComparison($$RetryCount,3,\">=\")",
      "\tScriptIf($$Result,\"GOTO\",\"CheckSerialNumber_RetryCountExceeded\",\"\")",
      "\t$$PromptString = \"Please Re-Scan PCBA Serial Number: \";",
      "\t$$SerialNumber = OperatorInputPrompt($$PromptString);",
      "\tUpdateStatus($$SerialNumber);",
      "\tgoto CheckSerialNumber;",
      "\tLabel CheckSerialNumber_RetryCountExceeded:",
      "\t\tFail(\"Serial_Number_Attempts Exceeded\");",
      "\t\treturn;",
      "\tLabel SerialNumber_DONE:",
      "\tRecordMeasurementPassFail(\"Serial Number\",$$SerialNumber,\"String\",false,$$Result_SN);",
      "\tSetSerialNumberField($$SerialNumber);",
      "\treturn;",
      "}",
      "",
      "function Initialize()",
      "{",
      "\tUpdateStatus(\"........>>>>>>>>>>>>>>>**** Initialize ****<<<<<<<<<<<<<<<<<........\\n\");",
      "\t",
      "\treturn;",
      "}",
      "",
      "function AutoScanSerialNumber()",
      "{",
      "\tUpdateStatus(\"******************************************************\");",
      "\t$$TestName = \"AutoScanSerialNumber\";",
      "\tSetTestName($$TestName);",
      "\t$$TestName = StringCat($$TestName,\"\\n\");",
      "\tUpdateStatus($$TestName);",
      "\t$$baud = 9600;",
      "\t$$bits = 8;",
      "\t$$parity = \"N\";",
      "\t$$stopBits = 1;",
      "\t$$Raw_length = 32;",
      "\t$$Auto_Scan_portNum = 11;",
      "\t$$ScanString = New(\"String\",\"04 E4 04 00 FF 14\");",
      "\t$$waitString = \"0D\";",
      "\t$$timeout = 5000;",
      "\t$$comObject = SerialOpen($$Auto_Scan_portNum, $$baud, $$bits, $$parity, $$stopBits);",
      "\tSleepMilliseconds(200);",
      "\t$$Read_returned = SerialSendBinaryMilliseconds($$comObject, $$ScanString, $$waitString, $$timeout);",
      "\t$$SerialNumber_Hexstring = $$Read_returned;",
      "\tUpdateStatus(\"$$SerialNumber_Hexstring###########\");",
      "\tUpdateStatus($$SerialNumber_Hexstring);",
      "\t$$Read_returned_length = StringLength($$Read_returned);",
      "\tUpdateStatus(\"$Read_returned_length###########\");",
      "\tUpdateStatus($$Read_returned_length);",
      "\t$$Raw_length_Result = NumericComparison($$Read_returned_length,$$SRaw_length,\"==\");",
      "\t$$Read_returned3 = HexStringToString($$Read_returned, \" \");",
      "\tUpdateStatus(\"$$Read_returned3%%%%\");",
      "\tUpdateStatus($$Read_returned3);",
      "\tif ($$Raw_length_Result)",
      "\t{",
      "\t\t$$SerialNumber = $$Read_returned3;",
      "\t}",
      "\tif (!$$Raw_length_Result)",
      "\t{",
      "\t\tFail(\"Serial Number Read Failed\");",
      "\t}",
      "\tSerialPurge($$comObject);",
      "\tSerialClose($$comObject);",
      "\treturn;",
      "}",
      "",
      "function CleanUp()",
      "{",
      "\tUpdateStatus(\"........>>>>>>>>>>>>>>>**** Now Clean Up ****<<<<<<<<<<<<<<<<<........\\n\");",
      "\t",
      "\tEnd;",
      "}",
      "",
      "function GlobalCleanup()",
      "{",
      "\tUpdateStatus(\"........>>>>>>>>>>>>>>>**** Now Global Clean Up ****<<<<<<<<<<<<<<<<<........\\n\");",
      "\t",
      "\tEnd;",
      "}",
      "",
      "function AutomationLoop()",
      "{",
      "\tUpdateStatus(\"........>>>>>>>>>>>>>>>**** AutomationLoop ****<<<<<<<<<<<<<<<<<........\\n\");",
      "\t",
      "\tEnd;",
      "}"
    ],
    "description": "JTS Initial jts scripts"
  },
  "JTS Function Name": {
    "prefix": "funtion",
    "body": ["function ${1:functionName}() \n{", "\t$2", "\treturn;", "}"],
    "description": "JTS Function Name"
  },
  "JTS Print Function": {
    "prefix": "UpdateStatus",
    "body": ["UpdateStatus(\"${1:}\");"],
    "description": "JTS UpdateStatus Log"
  },
  "JTS PCI6509 Initial Function": {
    "prefix": "Initialize_PCI_6509",
    "body": [
      "function Initialize_PCI_6509() \n{",
      "\t//****************************Initial PCI_6509 ******************************************************//",
      "\t$$NI_PCI6509 =\"Dev1\";",
      "\tNI_DAQmx_Initialize();",
      "\tNI_DAQmx_WriteDIOPort($$NI_PCI6509,\"Port0\",\"00\",\"Port0\");",
      "\tNI_DAQmx_WriteDIOPort($$NI_PCI6509,\"Port1\",\"00\",\"Port1\");",
      "\tNI_DAQmx_WriteDIOPort($$NI_PCI6509,\"Port2\",\"00\",\"Port2\");",
      "\tNI_DAQmx_WriteDIOPort($$NI_PCI6509,\"Port3\",\"00\",\"Port3\");",
      "\tNI_DAQmx_WriteDIOPort($$NI_PCI6509,\"Port4\",\"00\",\"Port4\");",
      "\tNI_DAQmx_WriteDIOPort($$NI_PCI6509,\"Port5\",\"00\",\"Port5\");",
      "\tNI_DAQmx_WriteDIOPort($$NI_PCI6509,\"Port6\",\"00\",\"Port6\");",
      "\tNI_DAQmx_WriteDIOPort($$NI_PCI6509,\"Port7\",\"00\",\"Port7\");",
      "\tNI_DAQmx_WriteDIOPort($$NI_PCI6509,\"Port8\",\"00\",\"Port8\");",
      "\tNI_DAQmx_WriteDIOPort($$NI_PCI6509,\"Port9\",\"00\",\"Port9\");",
      "\tNI_DAQmx_WriteDIOPort($$NI_PCI6509,\"Port10\",\"00\",\"Port10\");",
      "\tNI_DAQmx_WriteDIOPort($$NI_PCI6509,\"Port11\",\"00\",\"Port11\");",
      "\treturn;",
      "}"
    ],
    "description": "JTS NI-PCI 6509 Initailize Function"
  },
  "JTS USB6501 Initial Function": {
    "prefix": "Initialize_USB_6501",
    "body": [
      "function Initialize_USB_6501() \n{",
      "\t//****************************Initial PCI_6501 ******************************************************//",
      "\t$$NI_USB6501 =\"Dev1\";",
      "\tNI_DAQmx_Initialize();",
      "\tNI_DAQmx_WriteDIOPort($$NI_USB6501,\"Port0\",\"00\",\"Port0\");",
      "\tNI_DAQmx_WriteDIOPort($$NI_USB6501,\"Port1\",\"00\",\"Port1\");",
      "\tNI_DAQmx_WriteDIOPort($$NI_USB6501,\"Port2\",\"00\",\"Port2\");",
      "\treturn;",
      "}"
    ],
    "description": "JTS NI-USB 6501 Initailize Function"
  },
  "JTS USB6008 Initial Function": {
    "prefix": "Initialize_USB_6008",
    "body": [
      "function Initialize_USB_6008() \n{",
      "\t//****************************Initial PCI_6501 ******************************************************//",
      "\t$$NI_USB6008 =\"Dev1\";",
      "\tNI_DAQmx_Initialize();",
      "\tNI_DAQmx_WriteDIOPort($$NI_USB6008,\"Port0\",\"00\",\"Port0\");",
      "\tNI_DAQmx_WriteDIOPort($$NI_USB6008,\"Port1\",\"00\",\"Port1\");",
      "\treturn;",
      "}"
    ],
    "description": "JTS NI-USB 6008 Initailize Function"
  },
  "JTS NI_DAQmx_WriteDIOPort Request": {
    "prefix": "NI_DAQmx_WriteDIOPort",
    "body": [
      "NI_DAQmx_WriteDIOPort($${1:DeviceName},\"port${2:ChannelNumber}\",\"${3:ChannelValue}\",\"${4:TaskName}\");"
    ],
    "description": "JTS NI_DAQmx_WriteDIOPort Request"
  },
  "JTS NI_DAQmx_Read_Dig_Port_Line Request": {
    "prefix": "NI_DAQmx_Read_Dig_Port_Line",
    "body": [
      "NI_DAQmx_Read_Dig_Port_Line($${1:DeviceName},\"${2:port}\",\"${3:line}\",\"${4:TaskName}\");"
    ],
    "description": "JTS NI_DAQmx_Read_Dig_Port_Line Request"
  },
  "JTS OperatorPrompt Request": {
    "prefix": "OperatorPrompt",
    "body": ["OperatorPrompt(\"pause\", \"OK\");"],
    "description": "JTS OperatorPrompt Request"
  },
  "JTS SerialSendMilliseconds Request": {
    "prefix": "SerialSendMilliseconds",
    "body": [
      "SerialSendMilliseconds($${1:comObject}, \"${2:sendString}\", \"${3:waitString}\", ${4:timeOut});"
    ],
    "description": "JTS SerialSendMilliseconds Request"
  },
  "JTS SerialSendBool Request": {
    "prefix": "SerialSendBool",
    "body": [
      "SerialSendBool($${1:comObject}, \"${2:sendString}\", \"${3:waitString}\", ${4:timeOut});"
    ],
    "description": "SerialSendBool Request"
  },
  "JTS SerialSend Request": {
    "prefix": "SerialSend",
    "body": [
      "SerialSend($${1:comObject}, \"${2:sendString}\", \"${3:waitString}\", ${4:timeOut});"
    ],
    "description": "JTS SerialSend Request"
  },
  "SleepMilliseconds Request": {
    "prefix": "SleepMilliseconds",
    "body": ["SleepMilliseconds(${1:100});"],
    "description": "JTS SleepMilliseconds Request"
  },
  "JTS SerialOpen Request": {
    "prefix": "SerialOpen",
    "body": [
      "$${1:PortName}_Port = SerialOpen(${2:comPort},${3|9600,19200,115200|},${4:8},${5:\"N\"},${6:1});"
    ],
    "description": "JTS SerialOpen Request"
  },
  "JTS Sleep Request": {
    "prefix": "Sleep",
    "body": ["Sleep(${1:1});"],
    "description": "JTS Sleep Request"
  },
  "JTS call function": {
    "prefix": "call",
    "body": ["call ${1:functionName}();"],
    "description": "JTS call function"
  },
  "JTS UpdateProgressBar request": {
    "prefix": "UpdateProgressBar",
    "body": ["UpdateProgressBar(${1:});"],
    "description": "JTS UpdateProgressBar request"
  },
  "JTS Abort request": {
    "prefix": "Abort",
    "body": ["Abort(\"${1:}\");"],
    "description": "JTS Abort request"
  },
  "JTS Fail request": {
    "prefix": "Fail",
    "body": ["Fail(\"${1:}\");"],
    "description": "JTS Fail request"
  },
  "JTS Release History request": {
    "prefix": "Release History",
    "body": [
      "//***  Revision:\t${1|A,B,C,D,E,F|}",
      "//***  Description:\t${2:Initial release}",
      "//***  Created By:\t${3:Sean Wang}",
      "//***  ECN:\t\t\t${4:ECN}",
      "//***  Created On:\t${CURRENT_DATE}-${CURRENT_MONTH_NAME_SHORT}-${CURRENT_YEAR}",
      "//*************************************************************************//"
    ],
    "description": "JTS Release History request"
  },
  "JTS insert date": {
    "prefix": "date",
    "body": "${CURRENT_DATE}-${CURRENT_MONTH_NAME_SHORT}-${CURRENT_YEAR}",
    "description": "JTS add date"
  }
}
